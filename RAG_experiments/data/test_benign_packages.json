[
    {
        "package_name": "accelerate-0.12.0",
        "file_list": "LICENSE PKG-INFO pyproject.toml README.md setup.cfg setup.py accelerator.py big_modeling.py checkpointing.py accelerate_cli.py cluster.py config_args.py config_utils.py sagemaker.py __init__.py env.py launch.py test.py __init__.py data_loader.py hooks.py launchers.py logging.py memory_utils.py optimizer.py scheduler.py state.py examples.py test_checkpointing.py test_metrics.py test_peak_memory_usage.py test_performance.py __init__.py test_script.py test_sync.py __init__.py testing.py training.py __init__.py tracking.py constants.py dataclasses.py deepspeed.py imports.py launch.py memory.py modeling.py offload.py operations.py other.py random.py tqdm.py versions.py __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "# Copyright 2021 The HuggingFace Team. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import setup\nfrom setuptools import find_packages\n\nextras = {}\nextras[\"quality\"] = [\"black ~= 22.0\", \"isort >= 5.5.4\", \"flake8 >= 3.8.3\", \"hf-doc-builder >= 0.3.0\"]\nextras[\"docs\"] = []\nextras[\"test_prod\"] = [\"pytest\", \"pytest-xdist\", \"pytest-subtests\", \"parameterized\"]\nextras[\"test_dev\"] = [\"datasets\", \"evaluate\", \"transformers\", \"scipy\", \"sklearn\", \"deepspeed<0.7.0\", \"tqdm\"]\nextras[\"testing\"] = extras[\"test_prod\"] + extras[\"test_dev\"]\n\nextras[\"test_trackers\"] = [\"wandb\", \"comet-ml\", \"tensorboard\"]\nextras[\"dev\"] = extras[\"quality\"] + extras[\"testing\"]\n\nextras[\"sagemaker\"] = [\n\"sagemaker\", # boto3 is a required package in sagemaker\n]\n\nsetup(\nname=\"accelerate\",\nversion=\"0.12.0\",\ndescription=\"Accelerate\",\nlong_description=open(\"README.md\", \"r\", encoding=\"utf-8\").read(),\nlong_description_content_type=\"text\/markdown\",\nkeywords=\"deep learning\",\nlicense=\"Apache\",\nauthor=\"The HuggingFace team\",\nauthor_email=\"sylvain@huggingface.co\",\nurl=\"https:\/\/github.com\/huggingface\/accelerate\",\npackage_dir={\"\": \"src\"},\npackages=find_packages(\"src\"),\nentry_points={\n\"console_scripts\": [\n\"accelerate=accelerate.commands.accelerate_cli:main\",\n\"accelerate-config=accelerate.commands.config:main\",\n\"accelerate-launch=accelerate.commands.launch:main\",\n]\n},\npython_requires=\">=3.7.0\",\ninstall_requires=[\"numpy>=1.17\", \"packaging>=20.0\", \"psutil\", \"pyyaml\", \"torch>=1.4.0\"],\nextras_require=extras,\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Education\",\n\"Intended Audience :: Science\/Research\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Topic :: Scientific\/Engineering :: Artificial Intelligence\",\n],\n)\n\n# Release checklist\n# 1. Change the version in __init__.py and setup.py.\n# 2. Commit these changes with the message: \"Release: VERSION\"\n# 3. Add a tag in git to mark the release: \"git tag VERSION -m 'Adds tag VERSION for pypi' \"\n# Push the tag to git: git push --tags origin main\n# 4. Run the following commands in the top-level directory:\n# python setup.py bdist_wheel\n# python setup.py sdist\n# 5. Upload the package to the pypi test server first:\n# twine upload dist\/* -r pypitest\n# twine upload dist\/* -r pypitest --repository-url=https:\/\/test.pypi.org\/legacy\/\n# 6. Check that you can install it in a virtualenv by running:\n# pip install -i https:\/\/testpypi.python.org\/pypi accelerate\n# accelerate env\n# accelerate test\n# 7. Upload the final version to actual pypi:\n# twine upload dist\/* -r pypi\n# 8. Add release notes to the tag in github once everything is looking hunky-dory.\n# 9. Update the version in __init__.py, setup.py to the new version \"-dev\" and push to master\n"
    },
    {
        "package_name": "Acquisition-4.10",
        "file_list": ".coveragerc .manylinux-install.sh .manylinux.sh appveyor.yml buildout.cfg CHANGES.rst COPYRIGHT.txt ExtensionClass.h _compat.h LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py Acquisition.h interfaces.py tests.py _Acquisition.c __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt tox.ini",
        "setup.py": "##############################################################################\n#\n# Copyright (c) 2007 Zope Foundation and Contributors.\n# All Rights Reserved.\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL). A copy of the ZPL should accompany this distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE.\n#\n##############################################################################\n\"\"\"Setup for the Acquisition distribution\n\"\"\"\nimport os\nimport platform\nfrom setuptools import setup, find_packages, Extension\n\nwith open('README.rst') as f:\nREADME = f.read()\n\nwith open('CHANGES.rst') as f:\nCHANGES = f.read()\n\n# PyPy won't build the extension.\npy_impl = getattr(platform, 'python_implementation', lambda: None)\nis_pypy = py_impl() == 'PyPy'\nif is_pypy:\next_modules = []\nelse:\next_modules = [\nExtension(\"Acquisition._Acquisition\",\n[os.path.join('src', 'Acquisition', '_Acquisition.c')],\ninclude_dirs=['include', 'src']),\n]\n\nversion = '4.10'\n\nsetup(\nname='Acquisition',\nversion=version,\nurl='https:\/\/github.com\/zopefoundation\/Acquisition',\nlicense='ZPL 2.1',\ndescription=\"Acquisition is a mechanism that allows objects to obtain \"\n\"attributes from the containment hierarchy they're in.\",\nauthor='Zope Foundation and Contributors',\nauthor_email='zope-dev@zope.org',\nlong_description='\\n\\n'.join([README, CHANGES]),\npackages=find_packages('src'),\npackage_dir={'': 'src'},\nclassifiers=[\n\"Development Status :: 6 - Mature\",\n\"Environment :: Web Environment\",\n\"Framework :: Zope :: 2\",\n\"Framework :: Zope :: 4\",\n\"Framework :: Zope :: 5\",\n\"License :: OSI Approved :: Zope Public License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n],\next_modules=ext_modules,\npython_requires='>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*',\ninstall_requires=[\n'ExtensionClass >= 4.2.0',\n'zope.interface',\n],\nextras_require={\n'test': ['zope.testrunner'],\n},\ninclude_package_data=True,\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "advertools-0.13.1",
        "file_list": "ad_create.py ad_from_string.py cli.py emoji.py extract.py header_spider.py knowledge_graph.py kw_generate.py logs.py regex.py reverse_dns_lookup.py robotstxt.py serp.py sitemaps.py spider.py stopwords.py twitter.py urlytics.py url_builders.py word_frequency.py word_tokenize.py youtube.py _yt_helpers.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt all.py any.py base.py count.py deciles.py first.py has_nulls.py iqr.py mad.py max.py max_length.py max_precision.py mean.py median.py min.py mode.py percentiles.py quartiles.py quintiles.py stdev.py sum.py summary.py variance.py __init__.py columns.py base.py change.py formula.py percent.py percentile_rank.py percent_change.py rank.py slug.py __init__.py config.py csv_py2.py csv_py3.py base.py boolean.py date.py date_time.py number.py text.py time_delta.py __init__.py exceptions.py fixed.py mapped_sequence.py rows.py aggregate.py bar_chart.py bins.py column_chart.py compute.py denormalize.py distinct.py exclude.py find.py from_csv.py from_fixed.py from_json.py from_object.py group_by.py homogenize.py join.py limit.py line_chart.py merge.py normalize.py order_by.py pivot.py print_bars.py print_html.py print_structure.py print_table.py rename.py scatterplot.py select.py to_csv.py to_json.py where.py __init__.py aggregate.py bar_chart.py column_chart.py from_csv.py from_json.py having.py line_chart.py merge.py print_structure.py proxy_methods.py scatterplot.py to_csv.py to_json.py __init__.py testcase.py type_tester.py utils.py warns.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS.rst test_joins.py __init__.py CHANGELOG.rst charts.py COPYING about.rst aggregations.rst columns_and_rows.rst computations.rst config.rst csv.rst data_types.rst exceptions.rst fixed.rst misc.rst table.rst tableset.rst testcase.rst type_tester.rst warns.rst api.rst changelog.rst conf.py contributing.rst charting.rst columns.rst compute.rst create.rst datetime.rst excel.rst filter.rst homogenize.rst locale.rst lookup.rst r.rst rank.rst remove.rst save.rst search.rst sort.rst sql.rst standardize.rst statistics.rst transform.rst underscore.rst cookbook.rst extensions.rst bar_chart.svg column_chart.svg dots_chart.svg lattice.svg line_chart.svg index.rst install.rst license.rst Makefile release_process.rst tutorial.rst example.py example.py.ipynb Datagov_FY10_EDU_recp_by_State.csv exonerations-20150828.csv ks_1033_data.csv README.csv table1.csv table1.json table2.csv table2.json table3.csv table3.json table1.csv table2.csv test.csv test.json testfixed testfixed_converted.csv testfixed_schema.csv test_cr.csv test_crlf.csv test_csv_sniff.csv test_key.json test_keyed.json test_latin1.csv test_mixed.json test_nested.json test_newline.json test_non_string_keyed.json test_no_header.csv test_tableset.json test_utf16_big.csv test_utf16_little.csv exonerations.py MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_agate.py test_aggregations.py test_columns.py test_computations.py test_data_types.py test_fixed.py test_from_json.py test_mapped_sequence.py test_py2.py test_py3.py test_aggregate.py test_bins.py test_charting.py test_compute.py test_denormalize.py test_from_csv.py test_from_fixed.py test_group_by.py test_homogenize.py test_join.py test_merge.py test_normalize.py test_order_py.py test_pivot.py test_print_bars.py test_print_html.py test_print_structure.py test_print_table.py test_rename.py test_to_csv.py test_to_json.py __init__.py test_aggregate.py test_charting.py test_having.py test_merge.py __init__.py test_type_tester.py test_utils.py __init__.py tutorial.ipynb advertools.ad_create.rst advertools.ad_from_string.rst advertools.cli.cli.rst advertools.cli.rst advertools.code_recipes.cli.rst advertools.code_recipes.rst advertools.code_recipes.spider_strategies.rst advertools.emoji.rst advertools.extract.rst advertools.header_spider.rst advertools.knowledge_graph.rst advertools.kw_generate.rst advertools.logs.rst advertools.regex.rst advertools.reverse_dns_lookup.rst advertools.robotstxt.rst advertools.rst advertools.serp.rst advertools.sitemaps.rst advertools.spider.rst advertools.stopwords.rst advertools.twitter.rst advertools.urlytics.rst advertools.url_builders.rst advertools.word_frequency.rst advertools.word_tokenize.rst advertools.youtube.rst conf.py include_changelog.rst index.rst make.bat Makefile modules.rst readme.rst file.png minus.png plus.png HISTORY.rst LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py .coverage broken_links.html duplicate_links.html test_content.html econ.log goog_mktg.log guardian.log imf.log imf2.log nginx_access.log smrsh.log error_sitemap.xml image_sitemap.xml news_sitemap.xml regular_sitemap.xml robots.txt sitemap_index.xml video_sitemap.xml zipped_sitemap.xml.gz test_ad_create.py test_ad_from_string.py test_crawl.py test_crawl_or_not.py test_emoji.py test_extract.py test_header_spider.py test_kw_generate.py test_logs.py test_reverse_dns_lookup.py test_robotstxt.py test_serp.py test_sitemaps.py test_spider.py test_twitter.py test_urlytics.py test_url_builders.py test_word_frequency.py test_word_tokenize.py test_youtube.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n\"\"\"The setup script.\"\"\"\n\nfrom setuptools import find_packages, setup\n\nimport os; os.listdir()\nwith open('README.rst') as readme_file:\nreadme = readme_file.read()\n\nwith open('HISTORY.rst') as history_file:\nhistory = history_file.read()\n\nrequirements = [\n'pandas',\n'pyasn1',\n'scrapy',\n'twython',\n'pyarrow',\n]\n\nsetup_requirements = [\n'pytest-runner',\n]\n\ntest_requirements = [\n'pytest',\n]\n\nsetup(\nauthor=\"Elias Dabbas\",\nauthor_email='eliasdabbas@gmail.com',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'Intended Audience :: End Users\/Desktop',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n],\ndescription=\"Productivity and analysis tools for online marketing\",\nentry_points={\n'console_scripts': [\n'advertools=advertools.cli:main',\n'adv=advertools.cli:main',\n],\n},\ninstall_requires=requirements,\nlicense=\"MIT license\",\nlong_description=readme + '\\n\\n' + history,\ninclude_package_data=True,\nkeywords='advertising marketing search-engine-optimization adwords '\n'seo sem bingads keyword-research',\nname='advertools',\npackages=find_packages(include=['advertools']),\nsetup_requires=setup_requirements,\ntest_suite='tests',\ntests_require=test_requirements,\nurl='https:\/\/github.com\/eliasdabbas\/advertools',\nversion='0.13.1',\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "agate-1.6.3",
        "file_list": null,
        "setup.py": "from setuptools import find_packages, setup\n\nwith open('README.rst') as f:\nlong_description = f.read()\n\nsetup(\nname='agate',\nversion='1.6.3',\ndescription='A data analysis library that is optimized for humans instead of machines.',\nlong_description=long_description,\nlong_description_content_type='text\/x-rst',\nauthor='Christopher Groskopf',\nauthor_email='chrisgroskopf@gmail.com',\nurl='http:\/\/agate.readthedocs.org\/',\nlicense='MIT',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Framework :: IPython',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Scientific\/Engineering :: Information Analysis',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\npackages=find_packages(exclude=['benchmarks', 'tests', 'tests.*']),\ninstall_requires=[\n'Babel>=2.0',\n'isodate>=0.5.4',\n'leather>=0.3.2',\n# KeyError: 's' https:\/\/github.com\/bear\/parsedatetime\/pull\/233 https:\/\/github.com\/wireservice\/agate\/issues\/743\n# AttributeError: 'module' object has no attribute 'Locale' https:\/\/github.com\/bear\/parsedatetime\/pull\/247\n'parsedatetime>=2.1,!=2.5,!=2.6',\n'python-slugify>=1.2.1',\n'pytimeparse>=1.1.5',\n'six>=1.9.0',\n],\nextras_require={\n'test': [\n'coverage>=3.7.1',\n'cssselect>=0.9.1',\n'lxml>=3.6.0',\n'nose>=1.1.2',\n# CI is not configured to install PyICU on macOS and Windows.\n'PyICU>=2.4.2;sys_platform==\"linux\"',\n'pytz>=2015.4',\n'mock>=1.3.0;python_version<\"3\"',\n'unittest2>=1.1.0;python_version<\"3\"',\n],\n'docs': [\n'Sphinx>=1.2.2',\n'sphinx_rtd_theme>=0.1.6',\n],\n}\n)\n"
    },
    {
        "package_name": "agate-sql-0.5.8",
        "file_list": "table.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS.rst CHANGELOG.rst COPYING conf.py index.rst Makefile example.db example.py MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_agatesql.py __init__.py",
        "setup.py": "from setuptools import find_packages, setup\n\nwith open('README.rst') as f:\nlong_description = f.read()\n\nsetup(\nname='agate-sql',\nversion='0.5.8',\ndescription='agate-sql adds SQL read\/write support to agate.',\nlong_description=long_description,\nlong_description_content_type='text\/x-rst',\nauthor='Christopher Groskopf',\nauthor_email='chrisgroskopf@gmail.com',\nurl='http:\/\/agate-sql.readthedocs.org\/',\nlicense='MIT',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Scientific\/Engineering :: Information Analysis',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\npackages=find_packages(exclude=['tests', 'tests.*']),\ninstall_requires=[\n'agate>=1.5.0',\n'sqlalchemy>=1.0.8',\n],\nextras_require={\n'test': [\n'crate',\n'nose>=1.1.2',\n'geojson',\n],\n'docs': [\n'Sphinx>=1.2.2',\n'sphinx_rtd_theme>=0.1.6',\n],\n}\n)\n"
    },
    {
        "package_name": "aio-pika-8.1.1",
        "file_list": "abc.py channel.py connection.py exceptions.py exchange.py log.py message.py base.py master.py rpc.py __init__.py pool.py py.typed queue.py robust_channel.py robust_connection.py robust_exchange.py robust_queue.py tools.py transaction.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "import os\nfrom setuptools import setup, find_packages\nfrom importlib.machinery import SourceFileLoader\n\n\nmodule = SourceFileLoader(\n\"version\", os.path.join(\"aio_pika\", \"version.py\")\n).load_module()\n\n\nsetup(\nname=\"aio-pika\",\nversion=module.__version__,\nauthor=module.__author__,\nauthor_email=module.team_email,\nlicense=module.package_license,\ndescription=module.package_info,\nlong_description=open(\"README.rst\").read(),\nplatforms=\"all\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Topic :: Internet\",\n\"Topic :: Software Development\",\n\"Topic :: Software Development :: Libraries\",\n\"Intended Audience :: Developers\",\n\"Natural Language :: English\",\n\"Operating System :: MacOS\",\n\"Operating System :: POSIX\",\n\"Operating System :: Microsoft\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n],\npackages=find_packages(exclude=[\"tests\"]),\npackage_data={\"aio_pika\": [\"py.typed\"]},\ninstall_requires=[\n\"aiormq~=6.4.0\",\n\"yarl\",\n'typing_extensions; python_version < \"3.8.0\"'\n],\npython_requires=\">3.6, <4\",\nextras_require={\n\"develop\": [\n\"aiomisc~=16.0\",\n\"coverage!=4.3\",\n\"coveralls\",\n\"pylava\",\n\"pytest\",\n\"pytest-cov\",\n\"shortuuid\",\n\"nox\",\n\"sphinx\",\n\"sphinx-autobuild\",\n\"timeout-decorator\",\n\"tox>=2.4\",\n],\n},\nproject_urls={\n\"Documentation\": \"https:\/\/aio-pika.readthedocs.org\/\",\n\"Source\": \"https:\/\/github.com\/mosquito\/aio-pika\",\n},\n)\n"
    },
    {
        "package_name": "aiohttp-jinja2-1.5",
        "file_list": ".coveragerc helpers.py py.typed typedefs.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.rst aiohttp-icon.ico api.rst conf.py index.rst make.bat Makefile aiohttp-icon-128x128.png LICENSE Makefile MANIFEST.in PKG-INFO README.rst requirements-dev.txt setup.cfg setup.py conftest.py test_context_processors.py test_jinja_filters.py test_jinja_globals.py test_simple_renderer.py __init__.py",
        "setup.py": "import codecs\nimport os\nimport re\n\nfrom setuptools import setup\n\n\ndef _get_version():\nPATH_TO_INIT_PY = os.path.join(\nos.path.abspath(os.path.dirname(__file__)), \"aiohttp_jinja2\", \"__init__.py\"\n)\n\nwith codecs.open(PATH_TO_INIT_PY, \"r\", \"latin1\") as fp:\ntry:\nfor line in fp.readlines():\nif line:\nline = line.strip()\nversion = re.findall(r'^__version__ = \"([^\"]+)\"$', line, re.M)\nif version:\nreturn version[0]\nexcept IndexError:\nraise RuntimeError(\"Unable to determine version.\")\n\n\nversion = _get_version()\n\n\ndef read(f):\nreturn open(os.path.join(os.path.dirname(__file__), f)).read().strip()\n\n\ninstall_requires = [\n\"aiohttp>=3.6.3\",\n\"jinja2>=3.0.0\",\n'typing_extensions>=3.7.4; python_version<\"3.8\"',\n]\n\n\nsetup(\nname=\"aiohttp-jinja2\",\nversion=version,\ndescription=(\n\"jinja2 template renderer for aiohttp.web \" \"(http server for asyncio)\"\n),\nlong_description=\"\\n\\n\".join((read(\"README.rst\"), read(\"CHANGES.rst\"))),\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Intended Audience :: Developers\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Development Status :: 5 - Production\/Stable\",\n\"Topic :: Internet :: WWW\/HTTP\",\n\"Framework :: AsyncIO\",\n\"Framework :: aiohttp\",\n],\nauthor=\"Andrew Svetlov\",\nauthor_email=\"andrew.svetlov@gmail.com\",\nurl=\"https:\/\/github.com\/aio-libs\/aiohttp_jinja2\/\",\nlicense=\"Apache 2\",\npackages=[\"aiohttp_jinja2\"],\npython_requires=\">=3.6\",\ninstall_requires=install_requires,\ninclude_package_data=True,\n)\n"
    },
    {
        "package_name": "aiohttp-middlewares-2.1.0",
        "file_list": "LICENSE PKG-INFO pyproject.toml README.rst setup.py annotations.py constants.py cors.py error.py https.py py.typed shield.py timeout.py utils.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackage_dir = \\\n{'': 'src'}\n\npackages = \\\n['aiohttp_middlewares']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['aiohttp>=3.8.1,<4.0.0', 'async-timeout>=4.0.2,<5.0.0', 'yarl>=1.5.1,<2.0.0']\n\nsetup_kwargs = {\n'name': 'aiohttp-middlewares',\n'version': '2.1.0',\n'description': 'Collection of useful middlewares for aiohttp applications.',\n'long_description': '===================\\naiohttp-middlewares\\n===================\\n\\n.. image:: https:\/\/github.com\/playpauseandstop\/aiohttp-middlewares\/actions\/workflows\/ci.yml\/badge.svg\\n :target: https:\/\/github.com\/playpauseandstop\/aiohttp-middlewares\/actions\/workflows\/ci.yml\\n :alt: CI Workflow\\n\\n.. image:: https:\/\/img.shields.io\/badge\/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white\\n :target: https:\/\/github.com\/pre-commit\/pre-commit\\n :alt: pre-commit\\n\\n.. image:: https:\/\/img.shields.io\/badge\/code%20style-black-000000.svg\\n :target: https:\/\/github.com\/psf\/black\\n :alt: black\\n\\n.. image:: https:\/\/img.shields.io\/pypi\/v\/aiohttp-middlewares.svg\\n :target: https:\/\/pypi.org\/project\/aiohttp-middlewares\/\\n :alt: Latest Version\\n\\n.. image:: https:\/\/img.shields.io\/pypi\/pyversions\/aiohttp-middlewares.svg\\n :target: https:\/\/pypi.org\/project\/aiohttp-middlewares\/\\n :alt: Python versions\\n\\n.. image:: https:\/\/img.shields.io\/pypi\/l\/aiohttp-middlewares.svg\\n :target: https:\/\/github.com\/playpauseandstop\/aiohttp-middlewares\/blob\/main\/LICENSE\\n :alt: BSD License\\n\\n.. image:: https:\/\/coveralls.io\/repos\/playpauseandstop\/aiohttp-middlewares\/badge.svg?branch=main&service=github\\n :target: https:\/\/coveralls.io\/github\/playpauseandstop\/aiohttp-middlewares\\n :alt: Coverage\\n\\n.. image:: https:\/\/readthedocs.org\/projects\/aiohttp-middlewares\/badge\/?version=latest\\n :target: http:\/\/aiohttp-middlewares.readthedocs.org\/en\/latest\/\\n :alt: Documentation\\n\\nCollection of useful middlewares for `aiohttp.web`_ applications.\\n\\n- Works on `Python`_ 3.7+\\n- Works with `aiohttp.web`_ 3.8.1+\\n- BSD licensed\\n- Latest documentation `on Read The Docs\\n <https:\/\/aiohttp-middlewares.readthedocs.io\/>`_\\n- Source, issues, and pull requests `on GitHub\\n <https:\/\/github.com\/playpauseandstop\/aiohttp-middlewares>`_\\n\\n.. _`aiohttp.web`: https:\/\/docs.aiohttp.org\/en\/stable\/web.html\\n.. _`Python`: https:\/\/www.python.org\/\\n\\nQuick Start\\n===========\\n\\nBy default ``aiohttp.web`` does not provide `many built-in middlewares\\n<https:\/\/docs.aiohttp.org\/en\/stable\/web_reference.html#middlewares>`_ for\\nstandart web-development needs such as: handling errors, shielding view\\nhandlers, or providing CORS headers.\\n\\n``aiohttp-middlewares`` tries to fix this by providing several middlewares that\\naims to cover most common web-development needs.\\n\\nFor example, to enable CORS headers for ``http:\/\/localhost:8081`` origin and\\nhandle errors for ``aiohttp.web`` application you need to,\\n\\n.. code-block:: python\\n\\n from aiohttp import web\\n from aiohttp_middlewares import (\\n cors_middleware,\\n error_middleware,\\n )\\n\\n\\n app = web.Application(\\n middlewares=(\\n cors_middleware(origins=(\"http:\/\/localhost:8081\",)),\\n error_middleware(),\\n )\\n )\\n\\nCheck `documentation <https:\/\/aiohttp-middlewares.readthedocs.io\/>`_ for\\nall available middlewares and available initialization options.\\n',\n'author': 'Igor Davydenko',\n'author_email': 'iam@igordavydenko.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/igordavydenko.com\/projects.html#aiohttp-middlewares',\n'package_dir': package_dir,\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "aiohttp_retry-2.8.3",
        "file_list": "client.py py.typed retry_options.py types.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS LICENSE PKG-INFO pyproject.toml README.md setup.cfg setup.py",
        "setup.py": "from setuptools import find_packages, setup\n\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\nlong_description = fh.read()\n\n\nsetup(\nname='aiohttp_retry',\nversion='2.8.3',\ndescription='Simple retry client for aiohttp',\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n],\nkeywords='aiohttp retry client',\nauthor='Dmitry Inyutin',\nauthor_email='inyutin.da@gmail.com',\nurl='https:\/\/github.com\/inyutin\/aiohttp_retry',\nlicense='MIT',\ninclude_package_data=True,\npackages=find_packages(exclude=[\"tests\", \"tests.*\"]),\nplatforms=['any'],\npython_requires='>=3.7',\ninstall_requires=[\n'aiohttp',\n],\npackage_data={\n\"aiohttp_retry\": [\"py.typed\"],\n}\n)\n"
    },
    {
        "package_name": "aiohttp_socks-0.7.1",
        "file_list": "connector.py utils.py _deprecated.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nimport codecs\nimport os\nimport re\nimport sys\n\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\nversion = None\n\nwith codecs.open(os.path.join(os.path.abspath(os.path.dirname(\n__file__)), 'aiohttp_socks', '__init__.py'), 'r', 'latin1') as fp:\ntry:\nversion = re.findall(r\"^__version__ = '([^']+)'\\r?$\",\nfp.read(), re.M)[0]\nexcept IndexError:\nraise RuntimeError('Unable to determine version.')\n\nif sys.version_info < (3, 6, 0):\nraise RuntimeError('aiohttp-socks requires Python 3.6+')\n\nwith open('README.md') as f:\nlong_description = f.read()\n\nsetup(\nname='aiohttp_socks',\nauthor='Roman Snegirev',\nauthor_email='snegiryev@gmail.com',\nversion=version,\nlicense='Apache 2',\nurl='https:\/\/github.com\/romis2012\/aiohttp-socks',\ndescription='Proxy connector for aiohttp',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\npackages=['aiohttp_socks'],\nkeywords='asyncio aiohttp socks socks5 socks4 http proxy',\ninstall_requires=[\n'aiohttp>=2.3.2',\n'attrs>=19.2.0',\n'python-socks[asyncio]>=2.0.0,<3.0.0',\n],\n)\n"
    },
    {
        "package_name": "aiorwlock-1.3.0",
        "file_list": "py.typed __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe CHANGES.rst LICENSE Makefile MANIFEST.in PKG-INFO README.rst setup.cfg setup.py conftest.py test_corner_cases.py test_rwlock.py",
        "setup.py": "import os\nimport re\n\nfrom setuptools import setup\n\ninstall_requires = []\n\n\ndef read(f):\nreturn open(os.path.join(os.path.dirname(__file__), f)).read().strip()\n\n\ndef read_version():\nregexp = re.compile(r\"^__version__\\W*=\\W*'([\\d.abrc]+)'\")\ninit_py = os.path.join(\nos.path.dirname(__file__), 'aiorwlock', '__init__.py'\n)\nwith open(init_py) as f:\nfor line in f:\nmatch = regexp.match(line)\nif match is not None:\nreturn match.group(1)\nraise RuntimeError('Cannot find version in aiorwlock\/__init__.py')\n\n\nclassifiers = [\n'License :: OSI Approved :: Apache Software License',\n'Intended Audience :: Developers',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Operating System :: OS Independent',\n'Development Status :: 4 - Beta',\n'Framework :: AsyncIO',\n]\n\nproject_urls = {\n'Website': 'https:\/\/github.com\/aio-libs\/aiorwlock',\n'Issues': 'https:\/\/github.com\/aio-libs\/aiorwlock\/issues',\n}\n\n\nsetup(\nname='aiorwlock',\nversion=read_version(),\ndescription=('Read write lock for asyncio.'),\nlong_description='\\n\\n'.join((read('README.rst'), read('CHANGES.rst'))),\nclassifiers=classifiers,\nplatforms=['POSIX'],\nauthor='Nikolay Novik',\nauthor_email='nickolainovik@gmail.com',\nurl='https:\/\/github.com\/aio-libs\/aiorwlock',\ndownload_url='https:\/\/pypi.python.org\/pypi\/aiorwlock',\nlicense='Apache 2',\npackages=['aiorwlock'],\ninstall_requires=install_requires,\nkeywords=['aiorwlock', 'lock', 'asyncio'],\nzip_safe=True,\nproject_urls=project_urls,\npython_requires='>=3.7.0',\ninclude_package_data=True,\n)\n"
    },
    {
        "package_name": "aiosqlite-0.17.0",
        "file_list": ".gitignore .pylint .pyup.yml .readthedocs.yml context.py core.py cursor.py py.typed helpers.py perf.py smoke.py __init__.py __main__.py __init__.py __version__.py CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md api.rst changelog.rst conf.py contributing.rst index.rst custom.css badges.html omnilib.html LICENSE makefile MANIFEST.in mypy.ini PKG-INFO pyproject.toml README.rst requirements-dev.txt setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# setup.py generated by flit for tools that don't yet use PEP 517\n\nfrom distutils.core import setup\n\npackages = \\\n['aiosqlite', 'aiosqlite.tests']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['typing_extensions>=3.7.2']\n\nsetup(name='aiosqlite',\nversion='0.17.0',\ndescription='asyncio bridge to the standard sqlite3 module',\nauthor='John Reese',\nauthor_email='john@noswap.com',\nurl='https:\/\/aiosqlite.omnilib.dev',\npackages=packages,\npackage_data=package_data,\ninstall_requires=install_requires,\npython_requires='>=3.6',\n)\n"
    },
    {
        "package_name": "AlexaPy-1.26.1",
        "file_list": "abc.py base_protocol.py client.py client_exceptions.py client_proto.py client_reqrep.py client_ws.py connector.py cookiejar.py formdata.py hdrs.py helpers.py http.py http_exceptions.py http_parser.py http_websocket.py http_writer.py locks.py log.py multipart.py payload.py payload_streamer.py py.typed pytest_plugin.py resolver.py streams.py tcp_helpers.py test_utils.py tracing.py typedefs.py web.py web_app.py web_exceptions.py web_fileresponse.py web_log.py web_middlewares.py web_protocol.py web_request.py web_response.py web_routedef.py web_runner.py web_server.py web_urldispatcher.py web_ws.py worker.py _cparser.pxd _find_header.h _find_header.pxd _helpers.pyi _helpers.pyx _http_parser.pyx _http_writer.pyx _websocket.pyx __init__.py alexaapi.py alexalogin.py alexaproxy.py alexawebsocket.py const.py errors.py helpers.py __init__.py LICENSE PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['alexapy', 'alexapy.aiohttp']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['aiofiles>0,<1',\n'authcaptureproxy>=1.1.4,<2.0.0',\n'backoff>=1.10',\n'beautifulsoup4',\n'certifi',\n'cryptography>=35.0',\n'pyotp>=2.4',\n'requests',\n'simplejson',\n'yarl']\n\nsetup_kwargs = {\n'name': 'alexapy',\n'version': '1.26.1',\n'description': 'Python API to control Amazon Echo Devices Programmatically.',\n'long_description': '# alexapy\\n\\n[![License](https:\/\/img.shields.io\/badge\/License-Apache%202.0-blue.svg)](https:\/\/opensource.org\/licenses\/Apache-2.0)\\n[![Python version compatibility](https:\/\/img.shields.io\/pypi\/pyversions\/alexapy)](https:\/\/pypi.org\/project\/alexapy)\\n[![Version on PyPi](https:\/\/img.shields.io\/pypi\/v\/alexapy)](https:\/\/pypi.org\/project\/alexapy)\\n[![pipeline status](https:\/\/gitlab.com\/keatontaylor\/alexapy\/badges\/master\/pipeline.svg)](https:\/\/gitlab.com\/keatontaylor\/alexapy\/commits\/master)\\n![PyPI - Downloads](https:\/\/img.shields.io\/pypi\/dd\/alexapy)\\n![PyPI - Downloads](https:\/\/img.shields.io\/pypi\/dw\/alexapy)\\n![PyPI - Downloads](https:\/\/img.shields.io\/pypi\/dm\/alexapy)\\n\\nPython Package for controlling Alexa devices (echo dot, etc) programmatically. This was originally designed for [alexa_media_player](https:\/\/github.com\/custom-components\/alexa_media_player) a custom_component for [Home Assistant](https:\/\/www.home-assistant.io\/).\\n\\n**NOTE:** Alexa has no official API; therefore, this library may stop\\nworking at any time without warning.\\n\\n# Credits\\nOriginally inspired by [this blog](https:\/\/blog.loetzimmer.de\/2017\/10\/amazon-alexa-hort-auf-die-shell-echo.html) [(GitHub)](https:\/\/github.com\/thorsten-gehrig\/alexa-remote-control).\\nAdditional scaffolding from [simplisafe-python](https:\/\/github.com\/bachya\/simplisafe-python)\\n\\n# Contributing\\n\\n1. [Check for open features\/bugs](https:\/\/gitlab.com\/keatontaylor\/alexapy\/issues)\\n or [initiate a discussion on one](https:\/\/gitlab.com\/keatontaylor\/alexapy\/issues\/new).\\n2. [Fork the repository](https:\/\/gitlab.com\/keatontaylor\/alexapy\/forks\/new).\\n3. Install the dev environment: `make init`.\\n4. Enter the virtual environment: `pipenv shell`\\n5. Code your new feature or bug fix.\\n6. Write a test that covers your new functionality.\\n7. Update `README.md` with any new documentation.\\n8. Run tests and ensure 100% code coverage for your contribution: `make coverage`\\n9. Ensure you have no linting errors: `make lint`\\n10. Ensure you have typed your code correctly: `make typing`\\n11. Add yourself to `AUTHORS.md`.\\n12. Submit a pull request!\\n\\n# License\\n[Apache-2.0](LICENSE). By providing a contribution, you agree the contribution is licensed under Apache-2.0.\\n\\n# API Reference\\n[See the docs \ud83d\udcda](https:\/\/alexapy.readthedocs.io\/en\/latest\/index.html).\\n',\n'author': 'Keaton Taylor',\n'author_email': 'keatonstaylor@gmail.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/gitlab.com\/keatontaylor\/alexapy',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'python_requires': '>=3.8,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "allennlp_models-2.10.0",
        "file_list": "boolq.py stanford_sentiment_tree_bank.py __init__.py biattentive_classification_network.py transformer_classification_tt.py __init__.py __init__.py ontonotes.py __init__.py conll.py preco.py winobias.py __init__.py conll_coref_scores.py mention_recall.py __init__.py coref.py __init__.py coref.py __init__.py util.py __init__.py cnn_dm.py copynet_seq2seq.py seq2seq.py __init__.py bart.py composed_seq2seq.py copynet_seq2seq.py simple_seq2seq.py t5.py __init__.py decoder_net.py lstm_cell.py stacked_self_attention.py __init__.py auto_regressive.py seq_decoder.py __init__.py __init__.py seq2seq.py __init__.py __init__.py masked_language_model.py next_token_lm.py simple_language_modeling.py __init__.py bidirectional_lm.py language_model.py masked_language_model.py next_token_lm.py __init__.py bert.py gpt2.py language_model_head.py linear.py __init__.py bidirectional_lm_transformer.py __init__.py bidirectional_lm.py language_model.py __init__.py __init__.py masked_language_model.py next_token_lm.py __init__.py beam_search_generator.py transformer_beam_search_genera transformer_beam_search_generator.py __init__.py __init__.py __init__.py commonsenseqa.py fake.py piqa.py piqa_tt.py swag.py transformer_mc.py transformer_mc_tt.py __init__.py transformer_mc.py transformer_mc_tt.py __init__.py transformer_mc.py __init__.py __init__.py coref-spanbert.json evaluate_rc-lerc.json generation-bart.json glove-sst.json lm-masked-language-model.json lm-next-token-lm-gpt2.json mc-roberta-commonsenseqa.json mc-roberta-piqa.json mc-roberta-swag.json modelcard-template.json nlvr2-vilbert-head.json nlvr2-vilbert.json pair-classification-adversarial-binary-gender-bias pair-classification-adversarial-binary-gender-bias-mitigated-roberta-snli.json pair-classification-binary-gender-bias-mitigated-r pair-classification-binary-gender-bias-mitigated-roberta-snli.json pair-classification-decomposable-attention-elmo.js pair-classification-decomposable-attention-elmo.json pair-classification-esim.json pair-classification-roberta-mnli.json pair-classification-roberta-rte.json pair-classification-roberta-snli.json rc-bidaf-elmo.json rc-bidaf.json rc-naqanet.json rc-nmn.json rc-transformer-qa.json roberta-sst.json semparse-nlvr.json semparse-text-to-sql.json semparse-wikitables.json structured-prediction-biaffine-parser.json structured-prediction-constituency-parser.json structured-prediction-srl-bert.json structured-prediction-srl.json tagging-elmo-crf-tagger.json tagging-fine-grained-crf-tagger.json tagging-fine-grained-transformer-crf-tagger.json ve-vilbert.json vgqa-vilbert.json vqa-vilbert.json quora_paraphrase.py snli.py transformer_superglue_rte transformer_superglue_rte.py __init__.py bimpm.py decomposable_attention.py esim.py __init__.py textual_entailment.py __init__.py __init__.py pretrained.py drop.py qangaroo.py quac.py record_reader.py squad.py transformer_squad.py triviaqa.py utils.py __init__.py drop_em_and_f1.py squad_em_and_f1.py __init__.py bidaf.py bidaf_ensemble.py dialog_qa.py naqanet.py qanet.py transformer_qa.py utils.py __init__.py multi_head_self_attention.py qanet_encoder.py stacked_self_attention.py __init__.py __init__.py bidaf.py dialog_qa.py transformer_qa.py __init__.py drop.py narrativeqa.py orb.py orb_utils.py quoref.py squad.py transformer_qa_eval.py __init__.py __init__.py penn_tree_bank.py semantic_dependencies.py srl.py universal_dependencies. universal_dependencies.py __init__.py srl_eval_scorer.py __init__.py biaffine_dependency_parser.py constituency_parser.py graph_parser.py srl.py srl_bert.py __init__.py biaffine_dependency_parser.p biaffine_dependency_parser.py constituency_parser.py openie.py srl.py util.py __init__.py convert_openie_to_conll.py srl-eval.pl write_srl_predictions_to_conll_format.py __init__.py __init__.py ccgbank.py conll2000.py conll2003.py ontonotes_ner.py __init__.py crf_tagger.py __init__.py sentence_tagger.py __init__.py __init__.py constituency_parsing.json coref.json dependency_parsing.json evaluate_rc.json language_modeling.json masked_language_modeling.json ner.json oie.json rc.json semparse-nlvr.json semparse-tabular.json semparse-text-to-sql.json sentiment_analysis.json srl.json taskcard_template.json textual_entailment.json ve.json vqa.json version.py flickr30k.py gqa.py nlvr2.py utils.py vgqa.py vision_reader.py visual_entailment.py vqav2.py __init__.py vqa.py __init__.py nlvr2_head.py visual_entailment_head.py vqa_head.py __init__.py nlvr2.py vilbert_image_retrieval.py vilbert_vqa.py vision_text_model.py visual_entailment.py __init__.py nlvr2.py vilbert_vqa.py visual_entailment.py __init__.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO pyproject.toml README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup, find_packages\nimport os\n\n# PEP0440 compatible formatted version, see:\n# https:\/\/www.python.org\/dev\/peps\/pep-0440\/\n#\n# release markers:\n# X.Y\n# X.Y.Z # For bugfix releases\n#\n# pre-release markers:\n# X.YaN # Alpha release\n# X.YbN # Beta release\n# X.YrcN # Release Candidate\n# X.Y # Final release\n\n# version.py defines the VERSION and VERSION_SHORT variables.\n# We use exec here so we don't import allennlp_semparse whilst setting up.\nVERSION = {}\nwith open(\"allennlp_models\/version.py\") as version_file:\nexec(version_file.read(), VERSION)\n\n# Load requirements.txt with a special case for allennlp so we can handle\n# cross-library integration testing.\nwith open(\"requirements.txt\") as requirements_file:\nimport re\n\ndef requirement_is_allennlp(req: str) -> bool:\nif req == \"allennlp\":\nreturn True\nif re.match(r\"^allennlp[>=<]\", req):\nreturn True\nif re.match(r\"^(git\\+)?(https|ssh):\/\/(git@)?github\\.com\/.*\/allennlp\\.git\", req):\nreturn True\nif re.match(\nr\"^allennlp\\[.*\\] @ (git\\+)?(https|ssh):\/\/(git@)?github\\.com\/.*\/allennlp\\.git\", req\n):\nreturn True\nreturn False\n\ndef fix_url_dependencies(req: str) -> str:\n\"\"\"Pip and setuptools disagree about how URL dependencies should be handled.\"\"\"\nm = re.match(\nr\"^(git\\+)?(https|ssh):\/\/(git@)?github\\.com\/([\\w-]+)\/(?P<name>[\\w-]+)\\.git\", req\n)\nif m is None:\nreturn req\nelse:\nreturn f\"{m.group('name')} @ {req}\"\n\ninstall_requirements = []\nallennlp_requirements = []\nfor line in requirements_file:\nline = line.strip()\nif line.startswith(\"#\") or len(line) <= 0:\ncontinue\nif requirement_is_allennlp(line):\nallennlp_requirements.append(line)\nelse:\ninstall_requirements.append(line)\n\nassert len(allennlp_requirements) == 1\nallennlp_override = os.environ.get(\"ALLENNLP_VERSION_OVERRIDE\")\nif allennlp_override is not None:\nif len(allennlp_override) > 0:\nallennlp_requirements = [allennlp_override]\nelse:\nallennlp_requirements = []\n\ninstall_requirements.extend(allennlp_requirements)\ninstall_requirements = [fix_url_dependencies(req) for req in install_requirements]\n\nsetup(\nname=\"allennlp_models\",\nversion=VERSION[\"VERSION\"],\ndescription=(\"Officially supported models for the AllenNLP framework\"),\nlong_description=open(\"README.md\").read(),\nlong_description_content_type=\"text\/markdown\",\nclassifiers=[\n\"Intended Audience :: Science\/Research\",\n\"Development Status :: 3 - Alpha\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Topic :: Scientific\/Engineering :: Artificial Intelligence\",\n],\nkeywords=\"allennlp NLP deep learning machine reading semantic parsing parsers\",\nurl=\"https:\/\/github.com\/allenai\/allennlp-models\",\nauthor=\"Allen Institute for Artificial Intelligence\",\nauthor_email=\"allennlp@allenai.org\",\nlicense=\"Apache\",\npackages=find_packages(\nexclude=[\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"],\n),\ninstall_requires=install_requirements,\ninclude_package_data=True,\npackage_data={\n\"allennlp_models\": [\n\"modelcards\/*.json\",\n\"taskcards\/*.json\",\n\"structured_prediction\/tools\/srl-eval.pl\",\n]\n},\npython_requires=\">=3.7.1\",\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "androguard-3.3.5",
        "file_list": "androarsc.py androaxml.py androcg.py androdd.py androdis.py entry_points.py main.py __init__.py analysis.py auto.py tags.py __init__.py androconf.py permissions_10.json permissions_13.json permissions_14.json permissions_15.json permissions_16.json permissions_17.json permissions_18.json permissions_19.json permissions_21.json permissions_22.json permissions_23.json permissions_24.json permissions_25.json permissions_26.json permissions_27.json permissions_28.json permissions_4.json permissions_5.json permissions_6.json permissions_7.json permissions_8.json permissions_9.json permissions_16.json permissions_17.json permissions_18.json permissions_19.json permissions_21.json permissions_22.json permissions_23.json permissions_24.json permissions_25.json __init__.py bytecode.py apk.py types.py __init__.py dvm.py dvm_types.py mutf8.py __init__.py public.py public.xml __init__.py __init__.py basic_blocks.py control_flow.py dast.py dataflow.py decompile.py graph.py instruction.py node.py opcode_ins.py util.py writer.py __init__.py decompiler.py __init__.py androguard.ico annotation.ui apiwindow.py Banners.py BinViewMode.py binwindow.py cemu.py DataModel.py DisasmViewMode.py fileloading.py helpers.py HexViewMode.py mainwindow.py methodswindow.py renamewindow.py resourceswindow.py search.ui SourceViewMode.py sourcewindow.py stringswindow.py TextDecorators.py TextSelection.py treewindow.py ViewMode.py xrefwindow.py __init__.py misc.py session.py util.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt androgui.py androlyze.py androsign.py PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nfrom __future__ import print_function\nimport sys\nfrom androguard import __version__\n\nfrom setuptools import setup, find_packages\n\n\n# We do not support python versions <2.7 and python <3.4\nif (sys.version_info.major == 3 and sys.version_info.minor < 4) or (sys.version_info.major == 2 and sys.version_info.minor < 7):\nprint(\"Unfortunatly, your python version is not supported!\\n\"\n\"Please upgrade at least to python 2.7 or 3.4!\", file=sys.stderr)\nsys.exit(1)\n\n# PyQT5 is only available for python >=3.5\nif sys.version_info <= (3, 4):\nprint(\"PyQT5 is probably not available for your system, the GUI might not work!\", file=sys.stderr)\n\ninstall_requires = ['future',\n'networkx>=1.11',\n'pygments',\n'lxml',\n'colorama',\n'matplotlib',\n'asn1crypto>=0.24.0',\n'click',\n'pydot>=1.4.1',\n]\n\n# python version specific library versions:\n#\n# IPython Issue: For python2.x, a version <6 is required\nif sys.version_info >= (3, 3):\ninstall_requires.append('ipython>=5.0.0')\nelse:\ninstall_requires.append('ipython>=5.0.0,<6')\n\n\n# TODO add the permission mapping generation at a better place!\n# from axplorer_to_androguard import generate_mappings\n# generate_mappings()\n\nsetup(\nname='androguard',\ndescription='Androguard is a full python tool to play with Android files.',\nlong_description=\"\"\"Androguard is a tool and python library to interact with Android Files.\n\nUsually they come in the form of Android Packages (APK) or Dalvik Executeable (DEX) files.\nAndroguard has tools to read Android's binary format for XML files (AXML) and is also suited with a decompiler for DEX.\n\nAndroguard might not only be used as a tool for reverse engineering single applications, but features a lot of functions\nfor automated analysis. It provides a pure python framework to build your own analysis tools.\n\nIf you encounter bugs while using androguard, please feel free to report them in our bugtracker_.\n\n.. _bugtracker: https:\/\/github.com\/androguard\/androguard\/issues\n\"\"\",\nversion=__version__,\nlicense=\"Apache Licence, Version 2.0\",\nurl=\"https:\/\/github.com\/androguard\/androguard\",\ndownload_url=\"https:\/\/github.com\/androguard\/androguard\/releases\",\npackages=find_packages(),\npackage_data={\n# add the json files, residing in the api_specific_resources package\n\"androguard.core.api_specific_resources\": [\"aosp_permissions\/*.json\",\n\"api_permission_mappings\/*.json\"],\n\"androguard.core.resources\": [\"public.xml\"],\n# Collect also the GUI files this way\n\"androguard.gui\": [\"annotation.ui\", \"search.ui\", \"androguard.ico\"],\n},\nscripts=['androaxml.py',\n'androarsc.py',\n'androsign.py',\n'androdis.py',\n'androlyze.py',\n'androdd.py',\n'androgui.py',\n'androcg.py',\n],\nentry_points={\n'console_scripts': ['androguard=androguard.cli.entry_points:entry_point']\n},\ninstall_requires=install_requires,\nextras_require={\n'GUI': [\"pyperclip\", \"PyQt5\"],\n'magic': ['python-magic>=0.4.15'],\n'docs': ['sphinx', \"sphinxcontrib-programoutput>0.8\", 'sphinx_rtd_theme'],\n'tests': ['mock>=2.0', 'nose', 'codecov', 'coverage', 'nose-timer'],\n},\nsetup_requires=['setuptools'],\nclassifiers=[\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Topic :: Security',\n'Topic :: Software Development',\n'Topic :: Utilities',\n],\n\n)\n"
    },
    {
        "package_name": "annoy-1.17.1",
        "file_list": "ann.png py.typed __init__.py __init__.pyi dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py annoylib.h annoymodule.cc kissrandom.h mman.h",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2013 Spotify AB\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n# use this file except in compliance with the License. You may obtain a copy of\n# the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations under\n# the License.\n\nfrom setuptools import setup, Extension\nimport codecs\nimport os\nimport platform\nimport sys\n\nreadme_note = \"\"\"\\\n.. note::\n\nFor the latest source, discussion, etc, please visit the\n`GitHub repository <https:\/\/github.com\/spotify\/annoy>`_\\n\\n\n\n.. image:: https:\/\/img.shields.io\/github\/stars\/spotify\/annoy.svg\n:target: https:\/\/github.com\/spotify\/annoy\n\n\"\"\"\n\nwith codecs.open('README.rst', encoding='utf-8') as fobj:\nlong_description = readme_note + fobj.read()\n\n# Various platform-dependent extras\nextra_compile_args = ['-D_CRT_SECURE_NO_WARNINGS', '-fpermissive']\nextra_link_args = []\n\n# Not all CPUs have march as a tuning parameter\ncputune = ['-march=native',]\nif platform.machine() == 'ppc64le':\nextra_compile_args += ['-mcpu=native',]\n\nif platform.machine() == 'x86_64':\nextra_compile_args += cputune\n\nif os.name != 'nt':\nextra_compile_args += ['-O3', '-ffast-math', '-fno-associative-math']\n\n# Add multithreaded build flag for all platforms using Python 3 and\n# for non-Windows Python 2 platforms\npython_major_version = sys.version_info[0]\nif python_major_version == 3 or (python_major_version == 2 and os.name != 'nt'):\nextra_compile_args += ['-DANNOYLIB_MULTITHREADED_BUILD']\n\nif os.name != 'nt':\nextra_compile_args += ['-std=c++14']\n\n# #349: something with OS X Mojave causes libstd not to be found\nif platform.system() == 'Darwin':\nextra_compile_args += ['-mmacosx-version-min=10.12']\nextra_link_args += ['-stdlib=libc++', '-mmacosx-version-min=10.12']\n\n# Manual configuration, you're on your own here.\nmanual_compiler_args = os.environ.get('ANNOY_COMPILER_ARGS', None)\nif manual_compiler_args:\nextra_compile_args = manual_compiler_args.split(',')\nmanual_linker_args = os.environ.get('ANNOY_LINKER_ARGS', None)\nif manual_linker_args:\nextra_link_args = manual_linker_args.split(',')\n\nsetup(name='annoy',\nversion='1.17.1',\ndescription='Approximate Nearest Neighbors in C++\/Python optimized for memory usage and loading\/saving to disk.',\npackages=['annoy'],\npackage_data={'annoy': ['__init__.pyi', 'py.typed']},\next_modules=[\nExtension(\n'annoy.annoylib', ['src\/annoymodule.cc'],\ndepends=['src\/annoylib.h', 'src\/kissrandom.h', 'src\/mman.h'],\nextra_compile_args=extra_compile_args,\nextra_link_args=extra_link_args,\n)\n],\nlong_description=long_description,\nauthor='Erik Bernhardsson',\nauthor_email='mail@erikbern.com',\nurl='https:\/\/github.com\/spotify\/annoy',\nlicense='Apache License 2.0',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n],\nkeywords='nns, approximate nearest neighbor search',\nsetup_requires=['nose>=1.0'],\ntests_require=['numpy', 'h5py']\n)\n"
    },
    {
        "package_name": "antlr4-python3-runtime-4.10",
        "file_list": "MANIFEST.in PKG-INFO README.txt RELEASE-4.5.txt setup.cfg setup.py ATN.py ATNConfig.py ATNConfigSet.py ATNDeserializationOptions.py ATNDeserializer.py ATNSimulator.py ATNState.py ATNType.py LexerAction.py LexerActionExecutor.py LexerATNSimulator.py ParserATNSimulator.py PredictionMode.py SemanticContext.py Transition.py __init__.py BufferedTokenStream.py CommonTokenFactory.py CommonTokenStream.py DFA.py DFASerializer.py DFAState.py __init__.py DiagnosticErrorListener.py ErrorListener.py Errors.py ErrorStrategy.py __init__.py FileStream.py InputStream.py IntervalSet.py Lexer.py ListTokenSource.py LL1Analyzer.py Parser.py ParserInterpreter.py ParserRuleContext.py PredictionContext.py Recognizer.py RuleContext.py StdinStream.py Token.py TokenStreamRewriter.py Chunk.py ParseTreeMatch.py ParseTreePattern.py ParseTreePatternMatcher.py RuleTagToken.py TokenTagToken.py Tree.py Trees.py __init__.py Utils.py XPath.py XPathLexer.py __init__.py _pygrun.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nv = '4.10'\n\nsetup(\nname='antlr4-python3-runtime',\nversion=v,\npackages=['antlr4', 'antlr4.atn', 'antlr4.dfa', 'antlr4.tree', 'antlr4.error', 'antlr4.xpath'],\npackage_dir={'': 'src'},\ninstall_requires=[\n\"typing ; python_version<'3.5'\",\n],\nurl='http:\/\/www.antlr.org',\nlicense='BSD',\nauthor='Eric Vergnaud, Terence Parr, Sam Harwell',\nauthor_email='eric.vergnaud@wanadoo.fr',\nentry_points={'console_scripts': ['pygrun=antlr4._pygrun:main']},\ndescription=f'ANTLR {v} runtime for Python 2.7.12'\n)\n"
    },
    {
        "package_name": "anyconfig-0.13.0",
        "file_list": "bug_report.md feature_request.md tests-in-centos.yml tests.yml .gitignore AUTHORS.txt anyconfig_cli.1 anyconfig.api.datatypes.rst anyconfig.api.rst anyconfig.api.utils.rst anyconfig.api._dump.rst anyconfig.api._load.rst anyconfig.api._open.rst anyconfig.backend.base.compat.rst anyconfig.backend.base.datatypes.rst anyconfig.backend.base.dumpers.rst anyconfig.backend.base.loaders.rst anyconfig.backend.base.parsers.rst anyconfig.backend.base.rst anyconfig.backend.base.utils.rst anyconfig.backend.ini.rst anyconfig.backend.json.common.rst anyconfig.backend.json.default.rst anyconfig.backend.json.rst anyconfig.backend.json.simplejson.rst anyconfig.backend.pickle.rst anyconfig.backend.properties.rst anyconfig.backend.rst anyconfig.backend.shellvars.rst anyconfig.backend.toml.rst anyconfig.backend.xml.rst anyconfig.backend.yaml.common.rst anyconfig.backend.yaml.pyyaml.rst anyconfig.backend.yaml.rst anyconfig.backend.yaml.ruamel_yaml.rst anyconfig.cli.rst anyconfig.common.datatypes.rst anyconfig.common.errors.rst anyconfig.common.rst anyconfig.dicts.rst anyconfig.ioinfo.constants.rst anyconfig.ioinfo.datatypes.rst anyconfig.ioinfo.detectors.rst anyconfig.ioinfo.factory.rst anyconfig.ioinfo.rst anyconfig.ioinfo.utils.rst anyconfig.models.processor.rst anyconfig.models.rst anyconfig.parser.rst anyconfig.parsers.parsers.rst anyconfig.parsers.rst anyconfig.parsers.utils.rst anyconfig.processors.datatypes.rst anyconfig.processors.processors.rst anyconfig.processors.rst anyconfig.processors.utils.rst anyconfig.query.datatypes.rst anyconfig.query.default.rst anyconfig.query.query.rst anyconfig.query.rst anyconfig.schema.datatypes.rst anyconfig.schema.default.rst anyconfig.schema.jsonschema.rst anyconfig.schema.rst anyconfig.template.jinja2.rst anyconfig.template.rst anyconfig.utils.detectors.rst anyconfig.utils.files.rst anyconfig.utils.lists.rst anyconfig.utils.rst anyconfig.utils.utils.rst index.rst cli.rst conf.py design.rst hacking.rst index.rst introduction.rst Makefile requirements.txt usage.rst LICENSE.MIT MANIFEST.in mypy.ini NEWS copr-build.sh gen-authors.sh gen-readme.sh header.rst nose.cfg package.spec.in scrutinizer.yml PKG-INFO README.rst requirements.txt requirements_min.txt setup.cfg setup.py datatypes.py utils.py _dump.py _load.py _open.py __init__.py compat.py datatypes.py dumpers.py loaders.py parsers.py utils.py __init__.py ini.py common.py default.py simplejson.py __init__.py pickle.py properties.py shellvars.py toml.py xml.py common.py pyyaml.py ruamel_yaml.py __init__.py __init__.py actions.py constants.py detectors.py filters.py io.py parse_args.py utils.py _main.py __init__.py datatypes.py errors.py __init__.py dicts.py constants.py datatypes.py detectors.py factory.py utils.py __init__.py processor.py __init__.py parser.py parsers.py utils.py __init__.py datatypes.py processors.py utils.py __init__.py py.typed datatypes.py default.py query.py __init__.py datatypes.py default.py jsonschema.py __init__.py singleton.py jinja2.py __init__.py detectors.py files.py lists.py utils.py __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt common.py test_basics.py __init__.py common.py test_basics.py __init__.py common.py test_basics.py test_multi_types.py test_query.py test_schema.py test_templates.py __init__.py common.py test_basics.py test_query.py test_schema.py test_template.py __init__.py collector.py common.py datatypes.py test_basics.py test_collector.py test_common.py test_multi_types.py test_query.py test_schema.py test_template.py test_utils.py utils.py __init__.py common.py test_basics.py __init__.py common.py test_ac_parser.py test_basics.py test_common.py test_multi_types.py test_optional_types.py test_primitives.py test_query.py test_schema.py test_template.py __init__.py test_utils.py __init__.py test_dumpers.py test_loaders.py test_parsers.py test_utils.py __init__.py common.py constants.py test_default.py test_simplejson.py __init__.py test_ini.py test_pickle.py test_properties.py test_shellvars.py test_toml.py test_xml.py common.py test_pyyaml.py test_ruamel_yaml.py __init__.py __init__.py collector.py constants.py datatypes.py test_collector.py test_utils.py utils.py __init__.py collectors.py datatypes.py test_base.py test_detectors.py test_errors.py test_extra_options.py test_ignore_missing.py test_multi_inputs.py test_parse_args.py test_query.py test_schema.py test_show.py test_single_input.py test_single_input_to_yaml_output.py test_template.py __init__.py common.py common.py test_functions.py test_get.py test_merge.py test_mk_nested_dic.py __init__.py constants.py test_detectors.py test_factory.py test_utils.py __init__.py common.py test_attrlist.py test_attrlist_0.py test_list.py test_parse.py test_single.py __init__.py test_parsers.py test_utils.py __init__.py pip_install.bats common.py test_processors.py test_utils.py __init__.py test_query.py __init__.py requirements.txt requirements_plugins.txt requirements_type-check.txt 00-00-cnf.json 00-00-cnf_indented.json 00-01-cnf.json 00-02-cnf.json 00-cnf.json 00-cnf.yml 00-scm.json 00-template-ctx.yml 20-00-cnf.ini 20-00-cnf.json 20-00-cnf.properties 20-00-cnf.sh 20-00-cnf.toml 20-00-cnf.xml 20-00-cnf.yml 20-10-cnf.xml 30-00-cnf.json 30-00-template-cnf-ng-scm.json 30-00-template-cnf.json 30-10-template-cnf.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.py 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 10.json 10.json 10.json 10.json 20.json 30.json 40.json 50.json 10.json 20.json 30.json 40.json 50.json 10.json 20.json 30.json 40.json 50.json README.md 10.json 10.json 10.json 10.json 10.json README.md 10.json 10.json 10.json 10.json 10.json README.md 10.json 20.json 30.json 10.json 10.json 10.json 10.json 10.json README.md 10.json 20.xml 30.sh 10.json 10.json 10.json 10.json 10.json README.md 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 20.json 10.json 20.json 10.json 20.json 10.json 10.json 10.json README.md 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json README.md 10.json 20.json 10.json 20.json 10.json 20.json README.md 10.json 10.json 10.json README.md 10.json 20.conf 30.json 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 30.json README.md 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 10.json 20.json 10.json 20.json 10.json 20.json 10.json 20.json 10.json 20.json README.md 10.json 10.json 10.json 10.json 10.json README.md 10.json 10.json 10.json 10.json 10.json README.md 10.json 20.json 30.yml 40.yml 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json README.md 10.json 20.json 10.json 20.json 10.json 20.json 10.json 20.json 10.json 20.json 00_primitives.json 10.json 10_primitives.json 10.json 20.json 10.json 20.json 10.py 20.py 10.py 20.py 00.json 10.json 100.json 110.json 20.json 30.json 40.json 50.json 60.json 70.json 80.json 90.json 00.json 10.json 100.py 110.py 20.py 30.py 40.py 50.py 60.py 70.py 80.py 90.py 00.py 10.py 100.py 110.py 20.py 30.py 40.py 50.py 60.py 70.py 80.py 90.py 00.py 10.py 100.py 110.py 20.py 30.py 40.py 50.py 60.py 70.py 80.py 90.py 10.json 20.json 30.json 10.py 20.json 30.json 10.txt 20.txt 30.txt 10.txt 20.txt 30.txt 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.py 20.py 10.json 20.json 10.json 20.json 10.py 20.py 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.ini 00.json 00.json 10.json 20.json 00.json 10.json 20.json 10.json 20.json 30.json 40.json 10.txt 20.txt 30.txt 40.txt 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 20_00.json 20_10.json 20_20.json 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 10_50.json 20_00.json 20_10.json 20_20.json 00_00.txt 00_10.txt 10_00.txt 10_10.txt 10_20.txt 10_30.txt 10_40.txt 10_50.txt 20_00.txt 20_10.txt 20_20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 30.json 40.json exp.json 00.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.ini 20.json 30.json 40.properties 50.sh exp.json 00.json 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json 00.json 00.json 30.json 00.json exp.json 00.json 00.json 10.json 20.json 30.json 00.json exp.json 00.json 00.json 10.json 20.json 30.json exp.json 00.json 00.conf 10.conf 20.conf 00.py 10.py 20.py 00.json 10.json 20.json 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.json 10.json 20.json test_cases_with_schema_validation.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json test_cases_with_explicit_parser_type_option.txt 10.ini 20.properties 10.json 20.json 10.sh 10.json 10.json 00.xml 10.xml 20.xml 00.json 10.json 20.json 10.json 20.json 30.json 40.json 10.py 20.py 30.py 40.py 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 20_00.json 20_10.json 20_20.json 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 10_50.json 20_00.json 20_10.json 20_20.json 00_00.txt 00_10.txt 10_00.txt 10_10.txt 10_20.txt 10_30.txt 10_40.txt 10_50.txt 20_00.txt 20_10.txt 20_20.txt 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.j2 10.j2 20.j2 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.j2 10.j2 20.j2 30.j2 00.json 10.json 20.json 30.json 00.json 10.json 20.json 30.json 00.json 10.json 20.json 30.json 00.j2 10.j2 20.j2 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.toml 10.toml 20.toml 00.json 10.json 20.json 00.yml 10.yml 20.yml 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00_00.txt 00_10.txt 10_00.txt 10_10.txt 10_20.txt 10_30.txt 10_40.txt 20_00.txt 20_10.txt 20_20.txt 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 10_50.json 20_00.json 20_10.json 20_20.json 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 20_00.json 20_10.json 20_20.json 00_00.txt 00_10.txt 10_00.txt 10_10.txt 10_20.txt 10_30.txt 10_40.txt 10_50.txt 20_00.txt 20_10.txt 20_20.txt 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 30.json 40.json exp.json 00.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.ini 20.json 30.json 40.properties 50.sh exp.json 00.json 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json 00.json 00.json 30.json 00.json exp.json 00.json 00.json 10.json 20.json 30.json 00.json exp.json 00.json 00.json 10.json 20.json 30.json exp.json 00.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.txt 10.txt 20.txt 30.txt 40.txt 00.json 10.json 20.json 30.json 40.json 00.txt 10.txt 20.txt 30.txt 40.txt 00.json 10.py 20.py 30.py 40.py 00.txt 10.txt 20.txt 30.txt 40.txt 50.txt 00.json 10.json 20.json 30.json 40.json 50.json 00.json 10.json 20.json 30.json 40.json 50.json 00.py 10.txt 20.txt 30.txt 40.py 50.py 60.txt 70.txt 00.py 10.py 20.py 30.py 40.py 50.py 60.py 70.py 20.txt 30.txt 40.txt 00.json 10.json 20.json 30.json 40.json 50.json 10.txt 20.txt 30.txt 40.txt 00.json 10.json 20.json 30.json 40.json 00.py 10.txt 20.txt 30.txt 40.py 50.py 60.txt 70.txt 00.py 10.py 20.py 30.py 40.py 50.py 60.py 70.py 10.properties 10.json 10.sh 10.json 00.conf 10.conf 20.conf 00.py 10.py 20.py 00.json 10.json 20.json 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.json 10.json 20.json test_cases_with_schema_validation.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json test_cases_with_explicit_parser_type_option.txt 10.ini 20.properties 10.json 20.json 10.sh 10.json 10.json 00.xml 10.xml 20.xml 00.json 10.json 20.json 10.json 20.json 30.json 40.json 10.py 20.py 30.py 40.py 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 20_00.json 20_10.json 20_20.json 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 10_50.json 20_00.json 20_10.json 20_20.json 00_00.txt 00_10.txt 10_00.txt 10_10.txt 10_20.txt 10_30.txt 10_40.txt 10_50.txt 20_00.txt 20_10.txt 20_20.txt 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.j2 10.j2 20.j2 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.j2 10.j2 20.j2 30.j2 00.json 10.json 20.json 30.json 00.json 10.json 20.json 30.json 00.json 10.json 20.json 30.json 00.j2 10.j2 20.j2 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.toml 10.toml 20.toml 00.json 10.json 20.json 00.yml 10.yml 20.yml 00.json 10.json 20.json 10.j2 20.j2 10.txt 10.j2 10.txt 00.xml 10.xml 20.xml 00.json 10.json 20.json test_jsonschema.py __init__.py test_jinja2.py __init__.py test_lib.py test_singleton.py test_detectors.py test_files.py test_lists.py test_utils.py __init__.py __init__.py tox.ini",
        "setup.py": "\"\"\"setup.py to build package.\"\"\"\nimport os\nimport pathlib\nimport re\nimport setuptools\nimport setuptools.command.bdist_rpm\n\n\n# It might throw IndexError and so on.\nVERSION = '0.1.0'\nVER_REG = re.compile(r\"^__version__ = '([^']+)'\")\n\nfor fpath in pathlib.Path('src').glob('**\/__init__.py'):\nfor line in fpath.open():\nmatch = VER_REG.match(line)\nif match:\nVERSION = match.groups()[0]\nbreak\n\n# For daily snapshot versioning mode:\nRELEASE = \"1%{?dist}\"\nif os.environ.get(\"_SNAPSHOT_BUILD\", None) is not None:\nimport datetime\nRELEASE = RELEASE.replace('1',\ndatetime.datetime.now().strftime(\"%Y%m%d\"))\n\n\ndef _replace(line):\n\"\"\"Replace some strings in the RPM SPEC template.\"\"\"\nif \"@VERSION@\" in line:\nreturn line.replace(\"@VERSION@\", VERSION)\n\nif \"@RELEASE@\" in line:\nreturn line.replace(\"@RELEASE@\", RELEASE)\n\nif \"Source0:\" in line: # Dirty hack\nreturn \"Source0: %{pkgname}-%{version}.tar.gz\"\n\nreturn line\n\n\nclass bdist_rpm(setuptools.command.bdist_rpm.bdist_rpm):\n\"\"\"Override the default content of the RPM SPEC.\"\"\"\n\nspec_tmpl = pathlib.Path('pkg\/package.spec.in').resolve()\n\ndef _make_spec_file(self):\n\"\"\"Generate the RPM SPEC file.\"\"\"\nreturn [_replace(line.rstrip()) for line in self.spec_tmpl.open()]\n\n\nsetuptools.setup(version=VERSION, cmdclass=dict(bdist_rpm=bdist_rpm),\ndata_files=[(\"share\/man\/man1\", [\"docs\/anyconfig_cli.1\"])])\n\n# vim:sw=4:ts=4:et:\n"
    },
    {
        "package_name": "apache-airflow-backport-providers-cncf-kubernetes-2021.3.3",
        "file_list": "backwards_compat_converters.py __init__.py example_kubernetes.py example_spark_kubernetes.py example_spark_kubernetes_spark_pi.yaml __init__.py kubernetes.py __init__.py kubernetes_pod.py spark_kubernetes.py __init__.py spark_kubernetes.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md README.rst setup.cfg setup.py",
        "setup.py": "#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements. See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership. The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License. You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied. See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE\n# OVERWRITTEN WHEN PREPARING PACKAGES.\n#\n# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE\n# `SETUP_TEMPLATE.py.jinja2` IN the `dev\/provider_packages` DIRECTORY\n\n\"\"\"Setup.py for the apache-airflow-backport-providers-cncf-kubernetes package.\"\"\"\n\nimport logging\nimport os\n\nfrom os.path import dirname\nfrom setuptools import find_namespace_packages, setup\n\nlogger = logging.getLogger(__name__)\n\nversion = '2021.3.3'\n\nmy_dir = dirname(__file__)\n\ntry:\nwith open(os.path.join(my_dir, 'README.md'), encoding='utf-8') as f:\nlong_description = f.read()\nexcept FileNotFoundError:\nlong_description = ''\n\n\ndef do_setup():\n\"\"\"Perform the package apache-airflow-backport-providers-cncf-kubernetes setup.\"\"\"\nsetup(\nname='apache-airflow-backport-providers-cncf-kubernetes',\ndescription='Backport provider package '\n'apache-airflow-backport-providers-cncf-kubernetes for Apache Airflow',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nlicense='Apache License 2.0',\nversion=version,\npackages=find_namespace_packages(\ninclude=['airflow.providers.cncf.kubernetes', 'airflow.providers.cncf.kubernetes.*']\n),\nzip_safe=False,\ninclude_package_data=True,\ninstall_requires=[\n'apache-airflow>=1.10.12, <2.0.0',\n'cryptography>=2.0.0',\n'kubernetes>=3.0.0, <12.0.0',\n],\nsetup_requires=['setuptools', 'wheel'],\nextras_require={},\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Topic :: System :: Monitoring',\n],\nauthor='Apache Software Foundation',\nauthor_email='dev@airflow.apache.org',\nurl='https:\/\/airflow.apache.org\/',\ndownload_url='https:\/\/archive.apache.org\/dist\/airflow\/backport-providers',\npython_requires='~=3.6',\nproject_urls={\n'Documentation': 'https:\/\/airflow.apache.org\/docs\/',\n'Bug Tracker': 'https:\/\/github.com\/apache\/airflow\/issues',\n'Source Code': 'https:\/\/github.com\/apache\/airflow',\n},\n)\n\n\nif __name__ == \"__main__\":\ndo_setup()\n"
    },
    {
        "package_name": "apns2-0.7.2",
        "file_list": "client.py credentials.py errors.py payload.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py eckey.pem test_client.py test_credentials.py test_payload.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom setuptools import setup\n\nsetup(\nname='apns2',\nversion='0.7.2',\npackages=['apns2'],\ninstall_requires=[\n'hyper>=0.7',\n'PyJWT>=1.4.0,<2.0.0',\n'cryptography>=1.7.2',\n],\nextras_require={\n\"tests\": [\n'freezegun',\n'pytest',\n],\n},\nurl='https:\/\/github.com\/Pr0Ger\/PyAPNs2',\nlicense='MIT',\nauthor='Sergey Petrov',\nauthor_email='me@pr0ger.prg',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Topic :: Software Development :: Libraries',\n],\ndescription='A python library for interacting with the Apple Push Notification Service via HTTP\/2 protocol'\n)\n"
    },
    {
        "package_name": "appier-1.29.1",
        "file_list": "MANIFEST.in PKG-INFO README.rst setup.cfg setup.py amqp.py api.py asgi.py asynchronous.py async_neo.py async_old.py base.py bus.py cache.py common.py component.py compress.py config.py controller.py crypt.py data.py defines.py exceptions.py execution.py export.py extra.py extra_neo.py extra_old.py geo.py git.py graph.py http.py legacy.py log.py meta.py mock.py model.py model_a.py mongo.py observer.py part.py preferences.py queuing.py redisdb.py request.py base.css favicon.ico base.js error.html.tpl holder.html.tpl layout.html.tpl scheduler.py serialize.py session.py settings.py smtp.py storage.py structures.py base.py cache.py config.py crypt.py data.py exceptions.py export.py graph.py http.py legacy.py log.py mock.py model.py part.py preferences.py queuing.py request.py serialize.py session.py smtp.py structures.py typesf.py util.py __init__.py typesf.py util.py validation.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/python\n# -*- coding: utf-8 -*-\n\n# Hive Appier Framework\n# Copyright (c) 2008-2022 Hive Solutions Lda.\n#\n# This file is part of Hive Appier Framework.\n#\n# Hive Appier Framework is free software: you can redistribute it and\/or modify\n# it under the terms of the Apache License as published by the Apache\n# Foundation, either version 2.0 of the License, or (at your option) any\n# later version.\n#\n# Hive Appier Framework is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# Apache License for more details.\n#\n# You should have received a copy of the Apache License along with\n# Hive Appier Framework. If not, see <http:\/\/www.apache.org\/licenses\/>.\n\n__author__ = \"Jo\u00e3o Magalh\u00e3es <joamag@hive.pt>\"\n\"\"\" The author(s) of the module \"\"\"\n\n__version__ = \"1.0.0\"\n\"\"\" The version of the module \"\"\"\n\n__revision__ = \"$LastChangedRevision$\"\n\"\"\" The revision number of the module \"\"\"\n\n__date__ = \"$LastChangedDate$\"\n\"\"\" The last change date of the module \"\"\"\n\n__copyright__ = \"Copyright (c) 2008-2022 Hive Solutions Lda.\"\n\"\"\" The copyright for the module \"\"\"\n\n__license__ = \"Apache License, Version 2.0\"\n\"\"\" The license for the module \"\"\"\n\nimport os\nimport setuptools\n\ndef read_file(path):\nif not os.path.exists(path): return None\nfile = open(path, \"r\")\ntry: return file.read()\nfinally: file.close()\n\nsetuptools.setup(\nname = \"appier\",\nversion = \"1.29.1\",\nauthor = \"Hive Solutions Lda.\",\nauthor_email = \"development@hive.pt\",\ndescription = \"Appier Framework\",\nlicense = \"Apache License, Version 2.0\",\nkeywords = \"appier framework web json wsgi\",\nurl = \"http:\/\/appier.hive.pt\",\nzip_safe = False,\npackages = [\n\"appier\",\n\"appier.test\"\n],\ntest_suite = \"appier.test\",\npackage_dir = {\n\"\" : os.path.normpath(\"src\")\n},\npackage_data = {\n\"appier\" : [\n\"res\/static\/css\/*\",\n\"res\/static\/images\/*\",\n\"res\/static\/js\/*\",\n\"res\/templates\/*\"\n]\n},\nclassifiers = [\n\"Development Status :: 5 - Production\/Stable\",\n\"Topic :: Utilities\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2.6\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3.0\",\n\"Programming Language :: Python :: 3.1\",\n\"Programming Language :: Python :: 3.2\",\n\"Programming Language :: Python :: 3.3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\"\n],\nlong_description = read_file(\"README.rst\")\n)\n"
    },
    {
        "package_name": "applicationinsights-0.11.10",
        "file_list": "AsynchronousQueue.py AsynchronousSender.py Application.py AvailabilityData.py Base.py Cloud.py Data.py DataPoint.py DataPointType.py Device.py Domain.py Envelope.py EventData.py ExceptionData.py ExceptionDetails.py Internal.py Location.py MessageData.py MetricData.py Operation.py PageViewData.py PageViewPerfData.py RemoteDependencyData.py RequestData.py Session.py SeverityLevel.py StackFrame.py User.py Utils.py __init__.py NullSender.py QueueBase.py SenderBase.py SynchronousQueue.py SynchronousSender.py TelemetryChannel.py TelemetryContext.py __init__.py common.py logging.py middleware.py __init__.py enable.py __init__.py ext.py __init__.py LoggingHandler.py __init__.py WSGIApplication.py __init__.py TelemetryClient.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.md CONTRIBUTING.md LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py TestApplication.py TestData.py TestDataPoint.py TestDevice.py TestEnvelope.py TestEventData.py TestExceptionData.py TestExceptionDetails.py TestInternal.py TestLocation.py TestMessageData.py TestMetricData.py TestOperation.py TestPageViewData.py TestRemoteDependencyData.py TestRequestData.py TestSession.py TestStackFrame.py TestUser.py Utils.py __init__.py TestAsynchronousQueue.py TestAsynchronousSender.py TestQueueBase.py TestSenderBase.py TestSynchronousQueue.py TestSynchronousSender.py TestTelemetryChannel.py TestTelemetryContext.py __init__.py TestEnable.py __init__.py TestLoggingHandler.py __init__.py TestWSGIApplication.py __init__.py TestTelemetryClient.py TestTelemetryProcessor.py __init__.py __init__.py",
        "setup.py": "from setuptools import setup, find_packages # Always prefer setuptools over distutils\nfrom codecs import open # To use a consistent encoding\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the relevant file\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\nlong_description = f.read()\n\nsetup(\nname='applicationinsights',\n\n# Versions should comply with PEP440. For a discussion on single-sourcing\n# the version across setup.py and the project code, see\n# http:\/\/packaging.python.org\/en\/latest\/tutorial.html#version\nversion='0.11.10',\n\ndescription='This project extends the Application Insights API surface to support Python.',\nlong_description=long_description,\n\n# The project's main homepage.\nurl='https:\/\/github.com\/Microsoft\/ApplicationInsights-Python',\ndownload_url='https:\/\/github.com\/Microsoft\/ApplicationInsights-Python',\n\n# Author details\nauthor='Microsoft',\nauthor_email='appinsightssdk@microsoft.com',\n\n# Choose your license\nlicense='MIT',\n\n# See https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\nclassifiers=[\n# How mature is this project? Common values are\n# 3 - Alpha\n# 4 - Beta\n# 5 - Production\/Stable\n'Development Status :: 3 - Alpha',\n\n# Indicate who your project is intended for\n'Intended Audience :: Developers',\n'Topic :: Software Development :: Libraries :: Python Modules',\n\n# operating systems\n'Operating System :: OS Independent',\n\n# Pick your license as you wish (should match \"license\" above)\n'License :: OSI Approved :: MIT License',\n\n# Specify the Python versions you support here. In particular, ensure\n# that you indicate whether you support Python 2, Python 3 or both.\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n],\n\n# What does your project relate to?\nkeywords='analytics applicationinsights telemetry appinsights development',\n\n# You can just specify the packages manually here if your project is\n# simple. Or you can use find_packages().\npackages=find_packages(exclude=['contrib', 'docs', 'tests*']),\n\ntest_suite='tests.applicationinsights_tests'\n)\n\n"
    },
    {
        "package_name": "arabic_reshaper-2.1.3",
        "file_list": "arabic_reshaper.py letters.py ligatures.py reshaper_config.py __init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# coding=utf-8\n\nfrom setuptools import setup\n\nimport os\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\nlong_description = fh.read()\n\nsetup(\nname=\"arabic_reshaper\",\ndescription=(\"Reconstruct Arabic sentences to be used in\"\n\" applications that don't support Arabic\"),\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nversion='2.1.3',\nplatforms=\"ALL\",\nlicense=\"MIT\",\npackages=['arabic_reshaper'],\ninstall_requires=['configparser; python_version <\"3\"',\n'future',\n'setuptools'],\nextras_require={\n'with-fonttools': ['fonttools>=4.0; python_version >=\"3\"',\n'fonttools>=3.0<4.0; python_version <\"3\"']\n},\nauthor=\"Abdullah Diab\",\nauthor_email=\"mpcabd@gmail.com\",\nmaintainer=\"Abdullah Diab\",\nmaintainer_email=\"mpcabd@gmail.com\",\npackage_dir={'arabic_reshaper': 'arabic_reshaper'},\ntest_suite='arabic_reshaper.tests',\ninclude_package_data=True,\nkeywords=\"arabic shaping reshaping reshaper\",\nurl=\"https:\/\/github.com\/mpcabd\/python-arabic-reshaper\/\",\ndownload_url=(\"https:\/\/github.com\/mpcabd\/\"\n\"python-arabic-reshaper\/tarball\/master\"),\nclassifiers=[\n\"Natural Language :: Arabic\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\n)\n"
    },
    {
        "package_name": "argon2-cffi-bindings-21.2.0",
        "file_list": "CODE_OF_CONDUCT.md CONTRIBUTING.md FUNDING.yml SECURITY.md main.yml wheels.yml .gitignore .gitmodules .pre-commit-config.yaml CHANGELOG.md .git .gitattributes .gitignore .travis.yml appveyor.yml argon2-specs.pdf Argon2.sln CHANGELOG.md export.sh argon2.h argon2d argon2d.shasum argon2d_v16 argon2d_v16.shasum argon2i argon2i.shasum argon2id argon2id.shasum argon2id_v16 argon2id_v16.shasum argon2i_v16 argon2i_v16.shasum check-sums.ps1 check-sums.sh test.ps1 test.sh argon2-specs.tex IEEEtran.cls Makefile argon2-par.pdf compression.pdf generic.pdf power-distribution.jpg tradeoff.bib libargon2.pc.in LICENSE Makefile argon2.1 Package.swift README.md argon2.c bench.c blake2-impl.h blake2.h blake2b.c blamka-round-opt.h blamka-round-ref.h core.c core.h encoding.c encoding.h genkat.c genkat.h opt.c ref.c run.c test.c thread.c thread.h Argon2Opt.vcxproj Argon2Opt.vcxproj.filters Argon2OptBench.vcxproj Argon2OptBench.vcxproj.filters Argon2OptDll.vcxproj Argon2OptDll.vcxproj.filters Argon2OptGenKAT.vcxproj Argon2OptGenKAT.vcxproj.filters Argon2OptTestCI.vcxproj Argon2OptTestCI.vcxproj.filters Argon2Ref.vcxproj Argon2Ref.vcxproj.filters Argon2RefBench.vcxproj Argon2RefBench.vcxproj.filters Argon2RefDll.vcxproj Argon2RefDll.vcxproj.filters Argon2RefGenKAT.vcxproj Argon2RefGenKAT.vcxproj.filters Argon2RefTestCI.vcxproj Argon2RefTestCI.vcxproj.filters LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt _ffi_build.py __init__.py test_build.py test_smoke.py tox.ini",
        "setup.py": "# SPDX-License-Identifier: MIT\n\nimport pathlib\nimport platform\nimport sys\n\nfrom setuptools import find_packages, setup\n\n\n###############################################################################\n\nNAME = \"argon2-cffi-bindings\"\nDESCRIPTION = \"Low-level CFFI bindings for Argon2\"\nURL = \"https:\/\/github.com\/hynek\/argon2-cffi-bindings\"\nLICENSE = \"MIT\"\nAUTHOR = \"Hynek Schlawack\"\nEMAIL = \"hs@ox.cx\"\n\nCFFI_MODULES = [\"src\/_argon2_cffi_bindings\/_ffi_build.py:ffi\"]\nPYTHON_REQUIRES = \">=3.6\"\nSETUP_REQUIRES = [\"cffi>=1.0.1\", \"setuptools_scm>=6.2\"]\nINSTALL_REQUIRES = [\"cffi>=1.0.1\"]\nEXTRAS_REQUIRE = {\"tests\": [\"pytest\"]}\nEXTRAS_REQUIRE[\"dev\"] = EXTRAS_REQUIRE[\"tests\"] + [\n\"cogapp\",\n\"pre-commit\",\n\"wheel\",\n]\n\nKEYWORDS = [\"password\", \"hash\", \"hashing\", \"security\", \"bindings\", \"cffi\"]\nPROJECT_URLS = {\n\"Source Code\": \"https:\/\/github.com\/hynek\/argon2-cffi-bindings\",\n\"Funding\": \"https:\/\/github.com\/sponsors\/hynek\",\n\"Tidelift\": \"https:\/\/tidelift.com\/subscription\/pkg\/pypi-argon2-cffi?\"\n\"utm_source=pypi-argon2-cffi&utm_medium=pypi\",\n\"Ko-fi\": \"https:\/\/ko-fi.com\/the_hynek\",\n}\nCLASSIFIERS = [\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Natural Language :: English\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: POSIX\",\n\"Operating System :: Unix\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Programming Language :: Python\",\n\"Topic :: Security :: Cryptography\",\n\"Topic :: Security\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n]\n\n\n###############################################################################\n\n\nif platform.python_implementation() == \"CPython\":\ntry:\nimport wheel.bdist_wheel\nexcept ImportError:\nBDistWheel = None\nelse:\n\nclass BDistWheel(wheel.bdist_wheel.bdist_wheel):\ndef finalize_options(self):\nself.py_limited_api = f\"cp3{sys.version_info[1]}\"\nwheel.bdist_wheel.bdist_wheel.finalize_options(self)\n\n\nelse:\nBDistWheel = None\n\n\nif __name__ == \"__main__\":\ncmdclass = {}\nif BDistWheel is not None:\ncmdclass[\"bdist_wheel\"] = BDistWheel\nsetup(\nname=NAME,\nuse_scm_version=True, # setuptools_scm\ndescription=DESCRIPTION,\nlicense=LICENSE,\nurl=URL,\nproject_urls=PROJECT_URLS,\nauthor=AUTHOR,\nauthor_email=EMAIL,\nmaintainer=AUTHOR,\nmaintainer_email=EMAIL,\nlong_description=pathlib.Path(\"README.md\").read_text(),\nlong_description_content_type=\"text\/markdown\",\nkeywords=KEYWORDS,\npackages=find_packages(where=\"src\"),\npackage_dir={\"\": \"src\"},\nclassifiers=CLASSIFIERS,\npython_requires=PYTHON_REQUIRES,\nsetup_requires=SETUP_REQUIRES,\ninstall_requires=INSTALL_REQUIRES,\nextras_require=EXTRAS_REQUIRE,\ncmdclass=cmdclass,\n# CFFI\nzip_safe=False,\next_package=\"_argon2_cffi_bindings\",\ncffi_modules=CFFI_MODULES,\n)\n"
    },
    {
        "package_name": "args-0.1.0",
        "file_list": "dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt args.py PKG-INFO setup.cfg setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nargs\n~~~~\n\nThis simple module gives you an elegant interface for your command line argumemnts.\n\n\"\"\"\n\nfrom setuptools import setup\n\nsetup(\nname='args',\nversion='0.1.0',\nurl='https:\/\/github.com\/kennethreitz\/args',\nlicense='BSD',\nauthor='Kenneth Reitz',\nauthor_email='me@kennethreitz.com',\ndescription='Command Arguments for Humans.',\nlong_description=__doc__,\npy_modules=['args'],\nzip_safe=False,\ninclude_package_data=True,\nplatforms='any',\nclassifiers=[\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n'Topic :: Software Development :: Libraries :: Python Modules'\n]\n)\n"
    },
    {
        "package_name": "asgi-lifespan-1.0.1",
        "file_list": "py.typed _compat.py asyncio.py base.py trio.py __init__.py _exceptions.py _manager.py _types.py __init__.py __version__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.md LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport re\nimport typing\nfrom pathlib import Path\n\nfrom setuptools import setup\n\n\ndef get_version(package: str) -> str:\nversion = Path(package, \"__version__.py\").read_text()\nmatch = re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", version)\nassert match is not None\nreturn match.group(1)\n\n\ndef get_long_description() -> str:\nwith open(\"README.md\", encoding=\"utf8\") as readme:\nwith open(\"CHANGELOG.md\", encoding=\"utf8\") as changelog:\nreturn readme.read() + \"\\n\\n\" + changelog.read()\n\n\ndef get_packages(package: str) -> typing.List[str]:\nreturn [str(path.parent) for path in Path(package).glob(\"**\/__init__.py\")]\n\n\nsetup(\nname=\"asgi-lifespan\",\npython_requires=\">=3.6\",\nversion=get_version(\"asgi_lifespan\"),\nurl=\"https:\/\/github.com\/florimondmanca\/asgi-lifespan\",\nlicense=\"MIT\",\ndescription=\"Programmatic startup\/shutdown of ASGI apps.\",\nlong_description=get_long_description(),\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Florimond Manca\",\nauthor_email=\"florimond.manca@gmail.com\",\npackages=get_packages(\"asgi_lifespan\"),\ninstall_requires=[\"sniffio\", \"async_exit_stack; python_version < '3.7'\"],\ninclude_package_data=True,\npackage_data={\"asgi_lifespan\": [\"py.typed\"]},\nzip_safe=False,\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n],\n)\n"
    },
    {
        "package_name": "asset-0.6.13",
        "file_list": "isstr.py plugin.py resource.py symbol.py file1.nl file2.nl subfile1.nl data.csv test.py test_plugin.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe CHANGELOG.rst LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test-requirements.txt TODO.txt VERSION.txt",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n#------------------------------------------------------------------------------\n# file: $Id$\n# auth: metagriffin <mg.github@uberdev.org>\n# date: 2013\/10\/29\n# copy: (C) Copyright 2013-EOT metagriffin -- see LICENSE.txt\n#------------------------------------------------------------------------------\n# This software is free software: you can redistribute it and\/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This software is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see http:\/\/www.gnu.org\/licenses\/.\n#------------------------------------------------------------------------------\n\nimport os, sys, setuptools\nfrom setuptools import setup, find_packages\n\n# require python 2.7+\nif sys.hexversion < 0x02070000:\nraise RuntimeError('This package requires python 2.7 or better')\n\nheredir = os.path.abspath(os.path.dirname(__file__))\ndef read(*parts, **kw):\ntry: return open(os.path.join(heredir, *parts)).read()\nexcept: return kw.get('default', '')\n\ntest_dependencies = [\n'nose >= 1.3.0',\n'coverage >= 3.5.3',\n# note: `pxml` should be installed as an egg, i.e.:\n# easy_install --zip-ok pxml\n# for the unit tests to be able to test that.\n'pxml >= 0.2.13',\n]\n\ndependencies = [\n# note: `globre` should be installed unzipped, i.e.:\n# easy_install --always-unzip globre\n# for the unit tests to be able to test that.\n'globre >= 0.1.5',\n'six >= 1.10.0',\n'aadict >= 0.2.2',\n]\n\nentrypoints = None\n\nclassifiers = [\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Programming Language :: Python',\n'Operating System :: OS Independent',\n'Natural Language :: English',\n'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',\n]\n\nsetup(\nname = 'asset',\nversion = read('VERSION.txt', default='0.0.1').strip(),\ndescription = 'A package resource and symbol loading helper library.',\nlong_description = read('README.rst'),\nclassifiers = classifiers,\nauthor = 'metagriffin',\nauthor_email = 'mg.pypi@uberdev.org',\nurl = 'http:\/\/github.com\/metagriffin\/asset',\nkeywords = 'python package pkg_resources asset resolve lookup loader',\npackages = find_packages(),\nplatforms = ['any'],\ninclude_package_data = True,\nzip_safe = True,\ninstall_requires = dependencies,\ntests_require = test_dependencies,\ntest_suite = 'asset',\nentry_points = entrypoints,\nlicense = 'GPLv3+',\n)\n\n#------------------------------------------------------------------------------\n# end of $Id$\n#------------------------------------------------------------------------------\n"
    },
    {
        "package_name": "asyncinit-0.2.4",
        "file_list": "__init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py",
        "setup.py": "from setuptools import setup\n\nsetup(\nname=\"asyncinit\",\nversion=\"0.2.4\",\ndescription=\"Class decorator to enable async __init__\",\nauthor=\"Mick Koch\",\nlicense=\"MIT\",\nauthor_email=\"mick@kochm.co\",\nurl=\"https:\/\/github.com\/kchmck\/pyasyncinit\",\npackages=[\"asyncinit\"],\npython_requires=\">=3.5\",\nextras_require={\n\"dev\": [\n\"pylint~=2.1\",\n\"pytest~=3.6\",\n],\n},\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"License :: OSI Approved :: MIT License\",\n],\nkeywords=\"async init asyncio\",\n)\n"
    },
    {
        "package_name": "asyncio-3.4.3",
        "file_list": "base_events.py base_subprocess.py constants.py coroutines.py events.py futures.py locks.py log.py proactor_events.py protocols.py queues.py selectors.py selector_events.py sslproto.py streams.py subprocess.py tasks.py test_support.py test_utils.py transports.py unix_events.py windows_events.py windows_utils.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt AUTHORS check.py COPYING cacheclt.py cachesvr.py child_process.py crawl.py echo_client_tulip.py echo_server_tulip.py fetch0.py fetch1.py fetch2.py fetch3.py fuzz_as_completed.py hello_callback.py hello_coroutine.py shell.py simple_tcp_server.py sink.py source.py source1.py stacks.py subprocess_attach_read_pipe.py subprocess_attach_write_pipe.py subprocess_shell.py tcp_echo.py timing_tcp_server.py udp_echo.py Makefile MANIFEST.in overlapped.c PKG-INFO pypi.bat README release.py runtests.py run_aiotest.py setup.cfg setup.py echo.py echo2.py echo3.py keycert3.pem pycacert.pem sample.crt sample.key ssl_cert.pem ssl_key.pem test_base_events.py test_events.py test_futures.py test_locks.py test_proactor_events.py test_queues.py test_selectors.py test_selector_events.py test_sslproto.py test_streams.py test_subprocess.py test_tasks.py test_transports.py test_unix_events.py test_windows_events.py test_windows_utils.py update_stdlib.sh",
        "setup.py": "# Release procedure:\n# - run tox (to run runtests.py and run_aiotest.py)\n# - maybe test examples\n# - update version in setup.py\n# - hg ci\n# - hg tag VERSION\n# - hg push\n# - run on Linux: python setup.py register sdist upload\n# - run on Windows: python release.py VERSION\n# - increment version in setup.py\n# - hg ci && hg push\n\nimport os\ntry:\nfrom setuptools import setup, Extension\nexcept ImportError:\n# Use distutils.core as a fallback.\n# We won't be able to build the Wheel file on Windows.\nfrom distutils.core import setup, Extension\n\nextensions = []\nif os.name == 'nt':\next = Extension(\n'asyncio._overlapped', ['overlapped.c'], libraries=['ws2_32'],\n)\nextensions.append(ext)\n\nwith open(\"README\") as fp:\nlong_description = fp.read()\n\nsetup(\nname=\"asyncio\",\nversion=\"3.4.3\",\n\ndescription=\"reference implementation of PEP 3156\",\nlong_description=long_description,\nurl=\"http:\/\/www.python.org\/dev\/peps\/pep-3156\/\",\n\nclassifiers=[\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.3\",\n],\n\npackages=[\"asyncio\"],\ntest_suite=\"runtests.runtests\",\n\next_modules=extensions,\n)\n"
    },
    {
        "package_name": "asyncssh-2.12.0",
        "file_list": ".coveragerc run_tests.yml .gitignore agent.py agent_unix.py agent_win32.py asn1.py auth.py auth_keys.py channel.py client.py compression.py config.py connection.py constants.py chacha.py cipher.py dh.py dsa.py ec.py ec_params.py ed.py kdf.py misc.py rsa.py sntrup.py umac.py x509.py __init__.py dsa.py ecdsa.py eddsa.py editor.py encryption.py forward.py gss.py gss_unix.py gss_win32.py kex.py kex_dh.py kex_rsa.py keysign.py known_hosts.py listener.py logging.py mac.py misc.py packet.py pattern.py pbe.py pkcs11.py process.py public_key.py py.typed rsa.py saslprep.py scp.py server.py session.py sftp.py sk.py sk_ecdsa.py sk_eddsa.py socks.py stream.py subprocess.py version.py x11.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CONTRIBUTING.rst COPYRIGHT api.rst changes.rst conf.py contributing.rst index.rst layout.html rftheme.css_t theme.conf rtd-req.txt sidebarbottom.html sidebartop.html callback_client.py callback_client2.py callback_client3.py callback_math_server.py chat_server.py check_exit_status.py chroot_sftp_server.py direct_client.py direct_server.py editor.py gather_results.py listening_client.py local_forwarding_client.py local_forwarding_client2.py local_forwarding_server.py math_client.py math_server.py redirect_input.py redirect_local_pipe.py redirect_remote_pipe.py redirect_server.py remote_forwarding_client.py remote_forwarding_client2.py remote_forwarding_server.py reverse_client.py reverse_server.py scp_client.py set_environment.py set_terminal.py sftp_client.py show_environment.py show_terminal.py simple_cert_server.py simple_client.py simple_keyed_server.py simple_scp_server.py simple_server.py simple_sftp_server.py stream_direct_client.py stream_direct_server.py stream_listening_client.py LICENSE MANIFEST.in mypy.ini PKG-INFO pylintrc README.rst setup.cfg setup.py gssapi_stub.py gss_stub.py keysign_stub.py pkcs11_stub.py server.py sk_stub.py sspi_stub.py test_agent.py test_asn1.py test_auth.py test_auth_keys.py test_channel.py test_compression.py test_config.py test_connection.py test_connection_auth.py test_editor.py test_encryption.py test_forward.py test_kex.py test_known_hosts.py test_logging.py test_mac.py test_packet.py test_pkcs11.py test_process.py test_public_key.py test_saslprep.py test_sftp.py test_sk.py test_stream.py test_subprocess.py test_x11.py test_x509.py util.py __init__.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python3.6\n\n# Copyright (c) 2013-2022 by Ron Frederick <ronf@timeheart.net> and others.\n#\n# This program and the accompanying materials are made available under\n# the terms of the Eclipse Public License v2.0 which accompanies this\n# distribution and is available at:\n#\n# http:\/\/www.eclipse.org\/legal\/epl-2.0\/\n#\n# This program may also be made available under the following secondary\n# licenses when the conditions for such availability set forth in the\n# Eclipse Public License v2.0 are satisfied:\n#\n# GNU General Public License, Version 2.0, or any later versions of\n# that license\n#\n# SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later\n#\n# Contributors:\n# Ron Frederick - initial implementation, API, and documentation\n\n\"\"\"AsyncSSH: Asynchronous SSHv2 client and server library\n\nAsyncSSH is a Python package which provides an asynchronous client and\nserver implementation of the SSHv2 protocol on top of the Python asyncio\nframework. It requires Python 3.6 or later and the PyCA library for some\ncryptographic functions.\n\n\"\"\"\n\nfrom os import path\nfrom setuptools import setup\n\nbase_dir = path.abspath(path.dirname(__file__))\n\ndoclines = __doc__.split('\\n', 1)\n\nwith open(path.join(base_dir, 'README.rst')) as desc:\nlong_description = desc.read()\n\nwith open(path.join(base_dir, 'asyncssh', 'version.py')) as version:\nexec(version.read())\n\nsetup(name = 'asyncssh',\nversion = __version__,\nauthor = __author__,\nauthor_email = __author_email__,\nurl = __url__,\nproject_urls = {\n'Documentation': 'https:\/\/asyncssh.readthedocs.io',\n'Source': 'https:\/\/github.com\/ronf\/asyncssh',\n'Tracker': 'https:\/\/github.com\/ronf\/asyncssh\/issues'\n},\nlicense = 'Eclipse Public License v2.0',\ndescription = doclines[0],\nlong_description = long_description,\nplatforms = 'Any',\npython_requires = '>= 3.6',\ninstall_requires = ['cryptography >= 3.1', 'typing_extensions >= 3.6'],\nextras_require = {\n'bcrypt': ['bcrypt >= 3.1.3'],\n'fido2': ['fido2 >= 0.9.2'],\n'gssapi': ['gssapi >= 1.2.0'],\n'libnacl': ['libnacl >= 1.4.2'],\n'pkcs11': ['python-pkcs11 >= 0.7.0'],\n'pyOpenSSL': ['pyOpenSSL >= 17.0.0'],\n'pywin32': ['pywin32 >= 227']\n},\npackages = ['asyncssh', 'asyncssh.crypto'],\npackage_data = {'asyncssh': ['py.typed']},\nscripts = [],\ntest_suite = 'tests',\nclassifiers = [\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: POSIX',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Topic :: Internet',\n'Topic :: Security :: Cryptography',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: System :: Networking'])\n"
    },
    {
        "package_name": "async_generator-1.10",
        "file_list": ".coveragerc _impl.py conftest.py test_async_generator.py test_util.py __init__.py _util.py _version.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CODE_OF_CONDUCT.md CONTRIBUTING.md make.bat Makefile conf.py history.rst index.rst reference.rst .gitkeep LICENSE LICENSE.APACHE2 LICENSE.MIT MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test-requirements.txt",
        "setup.py": "from pathlib import Path\n\nfrom setuptools import setup, find_packages\n\nexec(open(\"async_generator\/_version.py\", encoding=\"utf-8\").read())\n\nsetup(\nname=\"async_generator\",\nversion=__version__,\ndescription=\"Async generators and context managers for Python 3.5+\",\n# Just in case the cwd is not the root of the source tree, or python is\n# not set to use utf-8 by default:\nlong_description=Path(__file__).with_name(\"README.rst\").read_text('utf-8'),\nauthor=\"Nathaniel J. Smith\",\nauthor_email=\"njs@pobox.com\",\nlicense=\"MIT -or- Apache License 2.0\",\npackages=find_packages(),\nurl=\"https:\/\/github.com\/python-trio\/async_generator\",\npython_requires=\">=3.5\",\nkeywords=[\"async\"],\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Framework :: AsyncIO\",\n]\n)\n"
    },
    {
        "package_name": "authcaptureproxy-1.1.4",
        "file_list": "auth_capture_proxy.py cli.py const.py modifiers.py testers.py __init__.py helper.py stackoverflow.py __init__.py CHANGELOG.md LICENSE.txt PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['authcaptureproxy', 'authcaptureproxy.examples']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['aiohttp>=3,<4',\n'beautifulsoup4>=4,<5',\n'httpx',\n'importlib-metadata>=3.4.0',\n'multidict>=6,<7',\n'typer>=0.3,<1.0',\n'yarl>=1,<2']\n\nentry_points = \\\n{'console_scripts': ['auth_capture_proxy = authcaptureproxy.cli:cli']}\n\nsetup_kwargs = {\n'name': 'authcaptureproxy',\n'version': '1.1.4',\n'description': 'A Python project to create a proxy to capture authentication information from a webpage. This is useful to capture oauth login details without access to a third-party oauth.',\n'long_description': '# Auth_capture_proxy\\n\\n[![Version status](https:\/\/img.shields.io\/pypi\/status\/authcaptureproxy)](https:\/\/pypi.org\/project\/authcaptureproxy)\\n[![License](https:\/\/img.shields.io\/badge\/License-Apache%202.0-blue.svg)](https:\/\/opensource.org\/licenses\/Apache-2.0)\\n[![Python version compatibility](https:\/\/img.shields.io\/pypi\/pyversions\/authcaptureproxy)](https:\/\/pypi.org\/project\/authcaptureproxy)\\n[![Version on Github](https:\/\/img.shields.io\/github\/v\/release\/alandtse\/auth_capture_proxy?include_prereleases&label=GitHub)](https:\/\/github.com\/alandtse\/auth_capture_proxy\/releases)\\n[![Version on PyPi](https:\/\/img.shields.io\/pypi\/v\/authcaptureproxy)](https:\/\/pypi.org\/project\/authcaptureproxy)\\n![PyPI - Downloads](https:\/\/img.shields.io\/pypi\/dd\/authcaptureproxy)\\n![PyPI - Downloads](https:\/\/img.shields.io\/pypi\/dw\/authcaptureproxy)\\n![PyPI - Downloads](https:\/\/img.shields.io\/pypi\/dm\/authcaptureproxy)\\n[![Documentation Status](https:\/\/readthedocs.org\/projects\/auth-capture-proxy\/badge\/?version=latest)](https:\/\/auth-capture-proxy.readthedocs.io\/en\/latest\/?badge=latest)\\n[![Build (Github Actions)](https:\/\/img.shields.io\/github\/workflow\/status\/alandtse\/auth_capture_proxy\/Build%20&%20test?label=Build%20&%20test)](https:\/\/github.com\/alandtse\/auth_capture_proxy\/actions)\\n[![Test coverage (coveralls)](https:\/\/coveralls.io\/repos\/github\/alandtse\/auth_capture_proxy\/badge.svg?branch=main&service=github)](https:\/\/coveralls.io\/github\/alandtse\/auth_capture_proxy?branch=main)\\n\\nA Python project to create a proxy to capture authentication information from a webpage. This is useful to capture oauth login details without access to a third-party oauth.\\n\\n## Install\\n\\n```bash\\npip install authcaptureproxy\\n```\\n\\n## Using\\n\\nTo see basic usage look at the [proxy-example](authcaptureproxy\/cli.py) that logs into Amazon.com and will print out the detected email and password.\\n\\n```bash\\npython authcaptureproxy\/cli.py proxy-example\\n```\\n\\n[See the docs \ud83d\udcda](https:\/\/auth-capture-proxy.readthedocs.io\/en\/latest\/) for more info.\\n\\n## License\\n\\nLicensed under the terms of the [Apache License 2.0](https:\/\/spdx.org\/licenses\/Apache-2.0.html).\\n\\n## Contributing\\n\\n[New issues](https:\/\/github.com\/alandtse\/auth_capture_proxy\/issues) and pull requests are welcome.\\nPlease refer to the [contributing guide](https:\/\/github.com\/alandtse\/auth_capture_proxy\/blob\/main\/CONTRIBUTING.md)\\nand [security policy](https:\/\/github.com\/alandtse\/auth_capture_proxy\/blob\/main\/SECURITY.md).\\n\\nGenerated with [Tyrannosaurus](https:\/\/github.com\/dmyersturnbull\/tyrannosaurus).\\n',\n'author': 'Alan D. Tse',\n'author_email': None,\n'maintainer': 'Alan D. Tse',\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/alandtse\/auth_capture_proxy',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'entry_points': entry_points,\n'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "autopep8-1.7.0",
        "file_list": "AUTHORS.rst dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt autopep8.py LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py bad_encoding.py bad_encoding2.py e101_example.py example.py example_with_reduce.py .pep8 tox.ini iso_8859_1.py test_autopep8.py test_suite.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"Setup for autopep8.\"\"\"\n\nimport ast\nimport io\n\nfrom setuptools import setup\n\n\nINSTALL_REQUIRES = (\n['pycodestyle >= 2.9.1', 'toml']\n)\n\n\ndef version():\n\"\"\"Return version string.\"\"\"\nwith io.open('autopep8.py') as input_file:\nfor line in input_file:\nif line.startswith('__version__'):\nreturn ast.parse(line).body[0].value.s\n\n\nwith io.open('README.rst') as readme:\nsetup(\nname='autopep8',\nversion=version(),\ndescription='A tool that automatically formats Python code to conform '\n'to the PEP 8 style guide',\nlong_description=readme.read(),\nlicense='Expat License',\nauthor='Hideo Hattori',\nauthor_email='hhatto.jp@gmail.com',\nurl='https:\/\/github.com\/hhatto\/autopep8',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Software Development :: Quality Assurance',\n],\nkeywords='automation, pep8, format, pycodestyle',\ninstall_requires=INSTALL_REQUIRES,\ntest_suite='test.test_autopep8',\npy_modules=['autopep8'],\nzip_safe=False,\nentry_points={'console_scripts': ['autopep8 = autopep8:main']},\n)\n"
    },
    {
        "package_name": "avro_validator-1.2.1",
        "file_list": "avro_types.py cli.py schema.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import setuptools\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nsetuptools.setup(\nname=\"avro_validator\",\nversion=\"1.2.1\",\nauthor=\"Leonardo de Campos Almeida\",\nauthor_email=\"leocalm@gmail.com\",\ndescription=\"Pure python avro schema validator\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/leocalm\/avro_validator\",\npackages=setuptools.find_packages(),\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n],\npython_requires='>=3.6',\ninstall_requires=[],\nextras_require={\n\"dev\": [\n\"pytest\",\n\"coverage\",\n\"tox\",\n\"flake8\",\n\"hypothesis\",\n\"pytest-cov\",\n\"python-coveralls\",\n],\n\"docs\": [\n\"sphinx\",\n\"pallets-sphinx-themes\",\n\"sphinxcontrib-log-cabinet\",\n\"sphinx-issues\",\n],\n},\nkeywords=\"avro schema\",\nproject_urls={\n\"Repository\": \"https:\/\/github.com\/leocalm\/avro_validator\",\n\"Bug Reports\": \"https:\/\/github.com\/leocalm\/avro_validator\/issues\",\n\"Documentation\": \"https:\/\/avro-validator.readthedocs.io\/\",\n},\nentry_points={\n\"console_scripts\": [\"avro_validator=avro_validator.cli:main\"]\n},\n)\n"
    },
    {
        "package_name": "aws-assume-role-lib-2.10.0",
        "file_list": "aws_assume_role_lib.py py.typed __init__.py __main__.py LICENSE PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['aws_assume_role_lib']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['boto3>=1.17.51,<2.0.0']\n\nsetup_kwargs = {\n'name': 'aws-assume-role-lib',\n'version': '2.10.0',\n'description': 'Assumed role session chaining (with credential refreshing) for boto3',\n'long_description': '# aws-assume-role-lib\\n**Assumed role session chaining (with credential refreshing) for boto3**\\n\\nThe typical way to use boto3 when programmatically assuming a role is to explicitly call [`sts.AssumeRole`](https:\/\/boto3.amazonaws.com\/v1\/documentation\/api\/latest\/reference\/services\/sts.html#STS.Client.assume_role) and use the returned credentials to create a new [`boto3.Session`](https:\/\/boto3.amazonaws.com\/v1\/documentation\/api\/latest\/reference\/core\/session.html) or client.\\nIt looks like this mess of code:\\n\\n```python\\nrole_arn = \"arn:aws:iam::123456789012:role\/MyRole\"\\nsession = boto3.Session()\\n\\nsts = session.client(\"sts\")\\nresponse = sts.assume_role(\\n RoleArn=role_arn,\\n RoleSessionName=\"something_you_have_to_think_about\"\\n)\\n\\ncredentials = response[\"Credentials\"]\\n\\nassumed_role_session = boto3.Session(\\n aws_access_key_id=credentials[\"AccessKeyId\"],\\n aws_secret_access_key=credentials[\"SecretAccessKey\"],\\n aws_session_token=credentials[\"SessionToken\"]\\n)\\n\\n# use the session\\nprint(assumed_role_session.client(\"sts\").get_caller_identity())\\n```\\n\\nThis code is verbose, requires specifying a role session name even if you don\\'t care what it is, and must explicitly handle credential expiration and refreshing if needed (in a Lambda function, this is typically handled by calling `AssumeRole` in every invocation).\\n\\nWith `aws-assume-role-lib`, all that collapses down to a single line. The assumed role session automatically refreshes expired credentials and generates a role session name if one is not provided.\\n\\n```python\\nrole_arn = \"arn:aws:iam::123456789012:role\/MyRole\"\\nsession = boto3.Session()\\n\\nassumed_role_session = aws_assume_role_lib.assume_role(session, role_arn)\\n\\n# use the session\\nprint(assumed_role_session.client(\"sts\").get_caller_identity())\\n```\\n\\nIn a Lambda function that needs to assume a role, you can create the assumed role session during initialization and use it for the lifetime of the execution environment, with `AssumeRole` calls only being made when necessary, not on every invocation.\\n\\nNote that in `~\/.aws\/config`, [you have the option to have profiles that assume a role based on another profile](https:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/cli-configure-role.html), and this automatically handles refreshing expired credentials as well.\\n\\nIf you\\'ve only used `boto3.client()` and are not familiar with boto3 sessions, [here\\'s an explainer](https:\/\/ben11kehoe.medium.com\/boto3-sessions-and-why-you-should-use-them-9b094eb5ca8e).\\n\\n# Installation\\n\\n```bash\\npip install --user aws-assume-role-lib\\n```\\n\\nOr just add [`aws_assume_role_lib.py`](https:\/\/raw.githubusercontent.com\/benkehoe\/aws-assume-role-lib\/stable\/aws_assume_role_lib\/aws_assume_role_lib.py) to your project.\\n\\nView the release history [here](CHANGELOG.md).\\n\\n# Usage\\n\\n```python\\nimport boto3\\nfrom aws_assume_role_lib import assume_role\\n\\n# Get a session\\nsession = boto3.Session()\\n# or with a profile:\\n# session = boto3.Session(profile_name=\"my-profile\")\\n\\n# Assume the session\\nassumed_role_session = assume_role(session, \"arn:aws:iam::123456789012:role\/MyRole\")\\n\\n# do stuff with the original credentials\\nprint(session.client(\"sts\").get_caller_identity()[\"Arn\"])\\n\\n# do stuff with the assumed role\\nprint(assumed_role_session.client(\"sts\").get_caller_identity()[\"Arn\"])\\n```\\n\\nIn Lambda, initialize the sessions outside the handler, and `AssumeRole` will only get called when necessary, rather than on every invocation:\\n```python\\nimport os\\nimport boto3\\nfrom aws_assume_role_lib import assume_role, generate_lambda_session_name\\n\\n# Get the Lambda session\\nSESSION = boto3.Session()\\n\\n# Get the config\\nROLE_ARN = os.environ[\"ROLE_ARN\"]\\nROLE_SESSION_NAME = generate_lambda_session_name() # see below for details\\n\\n# Assume the session\\nASSUMED_ROLE_SESSION = assume_role(SESSION, ROLE_ARN, RoleSessionName=ROLE_SESSION_NAME)\\n\\ndef handler(event, context):\\n # do stuff with the Lambda role using SESSION\\n print(SESSION.client(\"sts\").get_caller_identity()[\"Arn\"])\\n\\n # do stuff with the assumed role using ASSUMED_ROLE_SESSION\\n print(ASSUMED_ROLE_SESSION.client(\"sts\").get_caller_identity()[\"Arn\"])\\n```\\nLearn more about the benefits of `aws-assume-role-lib` in Lambda functions in the [demo](lambda-demo\/README.md).\\n\\n# Interface\\n\\n```\\nassume_role(\\n # required arguments\\n session: boto3.Session,\\n RoleArn: str,\\n\\n *,\\n # keyword-only arguments for AssumeRole\\n RoleSessionName: str = None,\\n PolicyArns: Union[list[dict[str, str]], list[str]] = None,\\n Policy: Union[str, dict] = None,\\n DurationSeconds: Union[int, datetime.timedelta] = None,\\n Tags: list[dict[str, str]] = None,\\n TransitiveTagKeys: list[str] = None,\\n ExternalId: str = None,\\n SerialNumber: str = None,\\n TokenCode: str = None,\\n SourceIdentity: str = None,\\n additional_kwargs: dict = None,\\n\\n # keyword-only arguments for returned session\\n region_name: Union[str, bool] = None,\\n\\n # keyword-only arguments for assume_role() itself\\n validate: bool = True,\\n cache: dict = None,\\n)\\n```\\n\\n`assume_role()` takes a session and a role ARN, and optionally [other keyword arguments for `sts.AssumeRole`](https:\/\/boto3.amazonaws.com\/v1\/documentation\/api\/latest\/reference\/services\/sts.html#STS.Client.assume_role).\\n\\nUnlike the `AssumeRole` API call itself, `RoleArn` is required, but `RoleSessionName` is not.\\nThe `RoleSessionName` is set for you if it is not provided; it will use the [`SourceIdentity`](https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/id_credentials_temp_control-access_monitor.html) if that is provided, otherwise it will generated.\\nIf you want this generated value for `RoleSessionName` when `SourceIdentity` is provided (the behavior in v2.8 and before), set `RoleSessionName` to the special value `aws_assume_role_lib.AUTOMATIC_ROLE_SESSION_NAME`.\\n\\nNote that unlike the boto3 sts client method, you can provide the `Policy` parameter (the [inline session policy](https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/access_policies.html#policies_session)) as a `dict` instead of as a serialized JSON string, `PolicyArns` as a list of ARNs, and `DurationSeconds` as a `datetime.timedelta` instead of as an integer.\\n\\nBy default, the session returned by `assume_role()` links its region configuration to the input session.\\nIf you would like to set the region explicitly, pass it in the `region_name` parameter.\\n\\nNote that if the parent session was created without a region passed in to the `Session` constructor, it has an implicit region, based on searching potential configuration locations.\\nThis means that the region used by the session can change (for example, if you set or change `os.environ[\"AWS_DEFAULT_REGION\"]`).\\nBy default, the child session region is linked to the parent session, so if the parent session has an implicit region, or if the parent session\\'s region is changed directly, they would both change.\\nIf you would like to fix the child session region to be explicitly the current value, pass `region_name=True`.\\nIf, for some reason, you have an explicit region set on the parent, and want the child to have implicit region config, pass `region_name=False`.\\n\\nBy default, `assume_role()` checks if the parameters are invalid.\\nWithout this validation, errors for these issues are more confusingly raised when the child session is first used to make an API call (boto3 doesn\\'t make the call to retrieve credentials until they are needed).\\nHowever, this incurs a small time penalty, so parameter validation can be disabled by passing `validate=False`.\\n\\nIf any new arguments are added to `AssumeRole` in the future and this library is not updated to allow them directly, they can be passed in as a dict via the `additional_kwargs` argument.\\n\\nThe parent session is available on the child session in the `assume_role_parent_session` property.\\nNote this property is added by this library; ordinary boto3 sessions do not have it.\\n\\n# Patching boto3\\n\\nYou can make the `assume_role()` function available directly in boto3 by calling `patch_boto3()`.\\nThis creates a `boto3.assume_role(RoleArn, ...)` function (note that it does not take a session, it uses the same default session as `boto3.client()`), and adds a `boto3.Session.assume_role()` method.\\nSo usage for that looks like:\\n\\n```python\\nimport boto3\\nimport aws_assume_role_lib\\naws_assume_role_lib.patch_boto3()\\n\\nassumed_role_session = boto3.assume_role(\"arn:aws:iam::123456789012:role\/MyRole\")\\n# the above is basically equivalent to:\\n# aws_assume_role_lib.assume_role(boto3.Session(), \"arn:aws:iam::123456789012:role\/MyRole\")\\n\\nsession = boto3.Session(profile_name=\"my-profile\")\\nassumed_role_session = session.assume_role(\"arn:aws:iam::123456789012:role\/MyRole\")\\n```\\n\\n# Role session names for Lambda functions\\nLearn more about the benefits of `aws-assume-role-lib` in Lambda functions in the [demo](lambda-demo\/README.md).\\n\\nIf you don\\'t provide a role session name, but you provide a [`SourceIdentity`](https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/id_credentials_temp_control-access_monitor.html), this value is used for the role session name as well.\\nIf `SourceIdentity` is not provided either, the underlying `botocore` library [generates one using a timestamp](https:\/\/github.com\/boto\/botocore\/blob\/c53072ec257ef47e2fc749c384a9488fd3f3e626\/botocore\/credentials.py#L730).\\nThat\\'s the best it can do, because it doesn\\'t have any other context.\\n\\nBut in a Lambda function, we do have additional context, the Lambda function itself.\\nIf you call `generate_lambda_session_name()` inside an instance of a Lambda function, it returns a session name that corresponds to the function instance, which you can use when assuming a role in the Lambda function (either with this library\\'s `assume_role()` or any other method).\\nThe purpose of this is to simplify tracing usage of the session back to the function instance.\\n\\nThe returned value is in one of the following forms, depending on the length of the values, to keep the session name within the maximum of 64 characters:\\n* `{function_name}`\\n* `{function_name}.{identifier}`\\n* `{function_name}.{function_version}.{identifier}`\\n\\nThe function version is never included if it is `$LATEST`.\\n\\nThe maximum role session name length is 64 characters. To ensure this, and\\nto provide at least 4 characters of the identifier when it is used, the\\nfollowing rules apply, in order:\\n1. If the function name is longer than 59 characters, the session name is the truncated function name.\\n2. If the function name plus the function version is longer than 59 characters, the session name is the function name plus the identifier, truncated.\\n3. Otherwise, the session name is the function name plus the version (if one is found and not $LATEST) plus the identifier, truncated.\\n\\nThe identifier is the function instance\\'s unique ID taken from the CloudWatch log stream name; if this cannot be found, it\\'s a timestamp if the identifier can be at least 14 characters long (to provide for second-level precision), otherwise it is a random string.\\nThe identifier will not be included unless at least 4 characters\\n\\nThe values are automatically extracted from [the relevant environment variables](https:\/\/docs.aws.amazon.com\/lambda\/latest\/dg\/configuration-envvars.html#configuration-envvars-runtime); you can override any of them by providing them as arguments to the function.\\n\\n# ARN formatting\\n`assume_role()` requires a role ARN, and if you know the role name and account id but have trouble remembering the [exact format of role ARNs](https:\/\/docs.aws.amazon.com\/service-authorization\/latest\/reference\/list_identityandaccessmanagement.html#identityandaccessmanagement-resources-for-iam-policies), there\\'s `get_role_arn()` for you.\\nThere\\'s additionally a `get_assumed_role_session_arn()` for formatting assumed role session ARNs.\\n\\n```\\nget_role_arn(\\n account_id: Union[str, int],\\n role_name: str,\\n path: str = \"\",\\n partition: str = \"aws\",\\n)\\n\\nget_assumed_role_session_arn(\\n account_id: Union[str, int],\\n role_name: str,\\n role_session_name: str,\\n partition: str = \"aws\",\\n)\\n```\\n\\nFor `get_role_arn()`, if the role name has a path, it can be provided as part of the name or as the separate `path` argument (but not both).\\nAssumed role session ARNs do not include the role path; if it is used in the role name it is removed.\\n\\n# Caching\\n\\nIf you would like to cache the credentials on the file system, you can use the `JSONFileCache` class, which will create files under the directory you provide in the constructor (which it will create if it doesn\\'t exist).\\nUse it like:\\n```python\\nassumed_role_session = assume_role(session, \"arn:aws:iam::123456789012:role\/MyRole\", cache=JSONFileCache(\"path\/to\/dir\"))\\n```\\nYou can also use any `dict`-like object for the cache (supporting `__getitem__`\/`__setitem__`\/`__contains__`).\\n\\n# Command line use\\n`aws-assume-role-lib` has basic support for retrieving assumed role credentials from the command line.\\nIn general, it\\'s better to make profiles in `~\/.aws\/config` for role assumption, like this:\\n\\n```ini\\n# this is a pre-existing profile you already have\\n[profile profile-to-call-assume-role-with]\\n# maybe it\\'s IAM User credentials\\n# or AWS SSO config\\n# or whatever else you may have\\n\\n[profile my-assumed-role]\\nrole_arn = arn:aws:iam::123456789012:role\/MyRole\\n# optional: role_session_name = MyRoleSessionName\\n\\nsource_profile = profile-to-call-assume-role-with\\n# or instead of source_profile, you can tell it to\\n# use external credentials. one of:\\n# credential_source = Environment\\n# credential_source = Ec2InstanceMetadata\\n# credential_source = EcsContainer\\n```\\n\\nYou can use `my-assumed-role` like any other profile.\\nIt uses the AWS SDKs\\' built-in support for role assumption, rather than relying on this third party library.\\nIt also gets you credential refreshing from the SDKs, where getting the credentials in the manner below cannot refresh them when they expire.\\n\\nBut if you absolutely must have ad hoc role assumption on the command line, use the module invocation syntax `python -m aws_assume_role_lib ROLE_ARN [OPTIONS]`.\\n\\nThe options are:\\n* `--profile`: use a specific configuration profile.\\n* `--env`: print the credentials as environment variables (the default), suitable for `export $(python -m aws_assume_role_lib ...)`.\\n* `--json`: print the credentials in [`credential_process`-formatted JSON format](https:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/cli-configure-sourcing-external.html). Note that you don\\'t normally need to use this as a `credential_process` in a profile, because you can just directly make the profile do role assumption as shown above.\\n* The remaining options are the arguments to `assume_role()`:\\n * `--RoleSessionName`\\n * `--PolicyArns`: must be a comma-separated list of ARNs, a JSON list of ARNs, or a JSON object per the API\\n * `--Policy`: must be a JSON object\\n * `--DurationSeconds`\\n * `--Tags`: must be formatted as `Key1=Value1,Key2=Value2`, or a JSON object.\\n * `--TransitiveTagKeys`: must be a comma-separated list or a JSON list.\\n * `--ExternalId`\\n * `--SerialNumber`\\n * `--TokenCode`\\n * `--SourceIdentity`\\n * `--additional-kwargs`: must be a JSON object.\\n',\n'author': 'Ben Kehoe',\n'author_email': 'ben@kehoe.io',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/benkehoe\/aws-assume-role-lib',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "aws-embedded-metrics-2.0.0",
        "file_list": "configuration.py environment_configuration_provider.py __init__.py constants.py default_environment.py ec2_environment.py environment_detector.py lambda_environment.py local_environment.py __init__.py exceptions.py metric.py metrics_context.py metrics_logger.py metrics_logger_factory.py __init__.py __init__.py log_serializer.py __init__.py agent_sink.py stdout_sink.py tcp_client.py udp_client.py __init__.py unit.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE NOTICE PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nsetup(\nname=\"aws-embedded-metrics\",\nversion=\"2.0.0\",\nauthor=\"Amazon Web Services\",\nauthor_email=\"jarnance@amazon.com\",\ndescription=\"AWS Embedded Metrics Package\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nkeywords=\"aws logs metrics emf\",\nurl=\"https:\/\/github.com\/awslabs\/aws-embedded-metrics-python\",\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"Operating System :: OS Independent\",\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Natural Language :: English\",\n\"License :: OSI Approved :: Apache Software License\",\n],\npackages=find_packages(exclude=[\"tests*\"]),\ninclude_package_data=True,\ninstall_requires=[\"aiohttp\"],\ntest_suite=\"tests\"\n)\n"
    },
    {
        "package_name": "aws-psycopg2-1.3.8",
        "file_list": "dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO errorcodes.py errors.py extensions.py extras.py pool.py sql.py tz.py _ipaddress.py _json.py _range.py __init__.py README.md setup.cfg setup.py",
        "setup.py": "import setuptools\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nwith open(\"version.txt\", \"r\") as fv:\nversion = fv.read().strip()\n\nsetuptools.setup(\nname=\"aws-psycopg2\",\nversion=version,\nauthor=\"Abhimanyu HK\",\nauthor_email=\"manyu1994@hotmail.com\",\ndescription=\"A aws psycopg2 package from psycopg2.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/AbhimanyuHK\/aws-psycopg2\",\npackages=setuptools.find_packages(),\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n],\n)\n"
    },
    {
        "package_name": "aws-sam-translator-1.49.0",
        "file_list": "dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md base.txt dev.txt dialup.py feature_toggle.py __init__.py actions.py resolver.py resource_refs.py __init__.py method_decorator.py metrics.py __init__.py api_generator.py http_api_generator.py __init__.py apigateway.py apigatewayv2.py architecture.py cloudformation.py codedeploy.py cognito.py dynamodb.py eventbridge_utils.py events.py cloudwatchlogs.py pull.py push.py __init__.py exceptions.py function_policies.py iam.py intrinsics.py iot.py lambda_.py log.py naming.py packagetype.py deployment_preference.py deployment_preference_collection.py __init__.py resource_policies.py role_constructor.py __init__.py route53.py s3.py uri_parser.py __init__.py sam_resources.py sns.py sqs.py events.py generators.py resources.py __init__.py resource_tagging.py __init__.py types.py update_policy.py xray_utils.py __init__.py open_api.py __init__.py parser.py __init__.py default_definition_body_plugin.py implicit_api_plugin.py implicit_http_api_plugin.py implicit_rest_api_plugin.py __init__.py serverless_app_plugin.py __init__.py exceptions.py globals.py globals_plugin.py __init__.py policy_templates_plugin.py __init__.py sam_plugins.py __init__.py policy_templates.json schema.json __init__.py exceptions.py processor.py template.py __init__.py exceptions.py helpers.py intrinsics.py models.py open_api.py parser.py plugins.py parameter.py resource.py template.py __init__.py swagger.py translator.py __init__.py region_configuration.py parameter.py resource.py template.py __init__.py swagger.py __init__.py hash.py __init__.py __init__.py arn_generator.py logical_id_generator.py managed_policy_translator.py transform.py translator.py verify_logical_id.py __init__.py cfn_dynamic_references.py py27hash_fix.py __init__.py api.json cfn.json common.json parameter.json __init__.py schema.json schema_new.json __init__.py validator.py __init__.py yaml_helper.py __init__.py setup.cfg setup.py THIRD_PARTY_LICENSES",
        "setup.py": "# -*- coding: utf-8 -*-\n#\n# setup.py\n#\n# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n\"\"\"\nAWS SAM Serverless Application Model\n\"\"\"\nimport io\nimport os\nimport re\n\nfrom setuptools import setup, find_packages\n\n\ndef read(*filenames, **kwargs):\nencoding = kwargs.get(\"encoding\", \"utf-8\")\nsep = kwargs.get(\"sep\", os.linesep)\nbuf = []\nfor filename in filenames:\nwith io.open(filename, encoding=encoding) as f:\nbuf.append(f.read())\nreturn sep.join(buf)\n\n\ndef read_version():\ncontent = read(os.path.join(os.path.dirname(__file__), \"samtranslator\", \"__init__.py\"))\nreturn re.search(r\"__version__ = \\\"([^']+)\\\"\", content).group(1)\n\n\ndef read_requirements(req=\"base.txt\"):\ncontent = read(os.path.join(\"requirements\", req))\nreturn [line for line in content.split(os.linesep) if not line.strip().startswith(\"#\")]\n\n\nsetup(\nname=\"aws-sam-translator\",\nversion=read_version(),\ndescription=\"AWS SAM Translator is a library that transform SAM templates into AWS CloudFormation templates\",\nlong_description=read(\"README.md\"),\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Amazon Web Services\",\nauthor_email=\"aws-sam-developers@amazon.com\",\nurl=\"https:\/\/github.com\/awslabs\/serverless-application-model\",\nlicense=\"Apache License 2.0\",\n# Exclude all but the code folders\npackages=find_packages(\nexclude=(\"tests\", \"tests.*\", \"integration\", \"integration.*\", \"docs\", \"examples\", \"versions\")\n),\nlicense_files=(\n\"LICENSE\",\n\"NOTICE\",\n\"THIRD_PARTY_LICENSES\",\n),\npython_requires=\">=3.7, <=4.0, !=4.0\",\ninstall_requires=read_requirements(\"base.txt\"),\ninclude_package_data=True,\nextras_require={\"dev\": read_requirements(\"dev.txt\")},\nkeywords=\"AWS SAM Serverless Application Model\",\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Environment :: Console\",\n\"Environment :: Other Environment\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Information Technology\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Internet\",\n\"Topic :: Software Development :: Build Tools\",\n\"Topic :: Utilities\",\n],\n)\n"
    },
    {
        "package_name": "aws_secretsmanager_caching-1.1.1.5",
        "file_list": "PULL_REQUEST_TEMPLATE.md .gitignore .pylintrc buildspec.yaml CODE_OF_CONDUCT.md CONTRIBUTING.md dev-requirements.txt conf.py index.rst module.rst LICENSE NOTICE PKG-INFO README.md requirements.txt setup.cfg setup.py items.py lru.py secret_cache_hook.py __init__.py config.py decorators.py secret_cache.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt test_aws_secretsmanager_caching.py __init__.py test_aws_secretsmanager_caching.py test_cache_hook.py test_config.py test_decorators.py test_items.py test_lru.py __init__.py tox.ini",
        "setup.py": "from setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nsetup(\nname=\"aws_secretsmanager_caching\",\ndescription=\"Client-side AWS Secrets Manager caching library\",\nurl=\"https:\/\/github.com\/aws\/aws-secretsmanager-caching-python\",\nauthor=\"Amazon Web Services\",\nauthor_email=\"aws-secretsmanager-dev@amazon.com\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\npackages=find_packages(where=\"src\", exclude=(\"test\",)),\npackage_dir={\"\": \"src\"},\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7'\n],\nkeywords='secretsmanager secrets manager development cache caching client',\nuse_scm_version=True,\npython_requires='>3.5',\ninstall_requires=['botocore'],\nsetup_requires=['pytest-runner', 'setuptools-scm'],\ntests_require=['pytest', 'pytest-cov', 'pytest-sugar', 'codecov']\n\n)\n"
    },
    {
        "package_name": "aws-xray-sdk-2.10.0",
        "file_list": "async_context.py async_recorder.py context.py daemon_config.py udp_emitter.py __init__.py exceptions.py __init__.py lambda_launcher.py default_dynamic_naming.py dummy_entities.py entity.py facade_segment.py http.py noop_traceid.py segment.py subsegment.py throwable.py traceid.py trace_header.py __init__.py patcher.py ec2_plugin.py ecs_plugin.py elasticbeanstalk_plugin.py utils.py __init__.py recorder.py connector.py reservoir.py sampler.py sampling_rule.json sampling_rule.py __init__.py reservoir.py rule_cache.py rule_poller.py sampler.py sampling_rule.py target_poller.py __init__.py default_streaming.py __init__.py atomic_counter.py compat.py conversion.py search_pattern.py stacktrace.py __init__.py __init__.py patch.py __init__.py client.py middleware.py __init__.py patch.py __init__.py boto_utils.py middleware.py __init__.py dbapi2.py apps.py conf.py db.py middleware.py templates.py __init__.py middleware.py __init__.py query.py __init__.py patch.py __init__.py patch.py __init__.py patch.py __init__.py patch.py __init__.py patch.py __init__.py patch.py __init__.py patch.py __init__.py patch.py __init__.py aws_para_whitelist.json query.py decorators.py __init__.py __init__.py patch.py __init__.py patch.py __init__.py util.py __init__.py sdk_config.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import sys\n\nfrom setuptools import setup, find_packages\nfrom os import path\nfrom aws_xray_sdk.version import VERSION\n\nCURRENT_DIR = path.abspath(path.dirname(__file__))\n\ntry:\nfrom pypandoc import convert\nread_md = lambda f: convert(f, 'rst')\nexcept ImportError:\nread_md = lambda f: open(f, 'r').read()\n\nlong_description = read_md(path.join(CURRENT_DIR, 'README.md'))\n\nINSTALL_REQUIRED_DEPS = [\n'enum34;python_version<\"3.4\"',\n'wrapt',\n'botocore>=1.11.3',\n]\n\nif sys.version_info[0] == 2:\nINSTALL_REQUIRED_DEPS.append(\"future\")\n\nsetup(\nname='aws-xray-sdk',\nversion=VERSION,\n\ndescription='The AWS X-Ray SDK for Python (the SDK) enables Python developers to record'\n' and emit information from within their applications to the AWS X-Ray service.',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\n\nurl='https:\/\/github.com\/aws\/aws-xray-sdk-python',\n\nauthor='Amazon Web Services',\n\nlicense=\"Apache License 2.0\",\n\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Natural Language :: English',\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n],\n\ninstall_requires=INSTALL_REQUIRED_DEPS,\n\nkeywords='aws xray sdk',\n\npackages=find_packages(exclude=['tests*']),\ninclude_package_data=True\n)\n"
    },
    {
        "package_name": "awscli-plugin-endpoint-0.4",
        "file_list": "__init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nimport sys\nfrom setuptools import setup\n\nrequires = ['awscli>=1.11.0']\n\nsetup(\nname='awscli-plugin-endpoint',\npackages=['awscli_plugin_endpoint'],\nversion='0.4',\ndescription='Endpoint plugin for AWS CLI',\nlong_description=open('README.md').read(),\nlong_description_content_type='text\/markdown',\nauthor='Wenbing Li',\nauthor_email='wbingli@gmail.com',\nurl='https:\/\/github.com\/wbingli\/awscli-plugin-endpoint',\ndownload_url='https:\/\/github.com\/wbingli\/awscli-plugin-endpoint\/tarball\/0.4',\nkeywords=['awscli', 'plugin', 'endpoint'],\ninstall_requires=requires,\nclassifiers = []\n)\n"
    },
    {
        "package_name": "azure-cli-2.39.0",
        "file_list": "az az.bat az.completion.sh agentpool.py build.py check_health.py commands.py connected_registry.py credential.py custom.py helm.py import.py manifest.py network_rule.py notary.py pack.py policy.py private_endpoint_connection.py replication.py repository.py run.py scope_map.py task.py taskrun.py token.py webhook.py _agentpool_polling.py _archive_utils.py _azure_utils.py _client_factory.py _constants.py _docker_utils.py _errors.py _format.py _help.py _params.py _run_polling.py _stream_utils.py _utils.py _validators.py __init__.py acs_client.py addonconfiguration.py agentpool_decorator.py base_decorator.py commands.py custom.py managed_cluster_decorator.py proxy.py win_proxy.py _client_factory.py _completers.py _consts.py _format.py _graph.py _help.py _helpers.py _loadbalancer.py _natgateway.py _params.py _resourcegroup.py _roleassignments.py _validators.py __init__.py commands.py custom.py _client_factory.py _help.py _params.py _validators.py __init__.py commands.py account.py account_filter.py asset.py asset_filter.py content_key_policy.py encryption.py identity.py job.py live_event.py live_output.py mru.py sp.py streaming_endpoint.py streaming_locator.py streaming_policy.py tracks.py transform.py __init__.py _client_factory.py _completers.py _exception_handler.py _format.py _help.py _params.py _sdk_utils.py _test_utils.py _utils.py _validators.py __init__.py action.py actions.py commands.py custom.py action.py commands.py custom.py _client_factory.py _help.py _params.py _validators.py __init__.py __init__.py _client_factory.py _format.py _help.py _params.py _validators.py __init__.py commands.py custom.py feature.py keyvalue.py _client_factory.py _constants.py _featuremodels.py _format.py _help.py _kv_helpers.py _models.py _params.py _utils.py _validators.py __init__.py access_restrictions.py appservice_domains.py appservice_environment.py commands.py custom.py custom.py _constants.py _help.py __init__.py GenerateRandomAppNames.json WebappRuntimeStacks.json static_sites.py tunnel.py utils.py _appservice_utils.py _client_factory.py _completers.py _constants.py _create_util.py _github_oauth.py _help.py _params.py _template_builder.py _validators.py __init__.py commands.py custom.py _aad.py _client_factory.py _format.py _help.py _params.py _rbac.py _validators.py __init__.py commands.py custom.py custom_afs.py custom_base.py custom_common.py custom_help.py custom_wl.py _client_factory.py _exception_handler.py _format.py _help.py _params.py _validators.py __init__.py commands.py custom.py _client_factory.py _command_type.py _completers.py _exception_handler.py _format.py _help.py _parameter_format.py _params.py _validators.py __init__.py commands.py custom.py _client_factory.py _format.py _help.py _params.py __init__.py action.py commands.py custom.py action.py commands.py custom.py _client_factory.py _help.py _params.py _validators.py __init__.py action.py commands.py custom.py _help.py _params.py _validators.py __init__.py _client_factory.py _exception_handler.py _help.py _params.py __init__.py bot_json_formatter.py bot_publish_prep.py channel_operations.py commands.py constants.py custom.py http_response_validator.py kudu_client.py name_availability.py typescript.web.config web.config webappv4.template.json web_app_operations.py _client_factory.py _exception_handler.py _help.py _params.py __init__.py commands.py custom.py custom_afdx.py custom_waf.py __init__.py _actions.py _client_factory.py _help.py _params.py _validators.py __init__.py custom.py _completers.py _help.py __init__.py commands.py custom.py _client_factory.py _help.py _params.py __init__.py commands.py custom.py _help.py _params.py _validators.py __init__.py commands.py custom.py _consts.py _help.py _params.py _utils.py __init__.py commands.py custom.py _client_factory.py _exception_handler.py _help.py _params.py _transformers.py _validators.py __init__.py commands.py custom.py _client_factory.py _format.py _help.py _params.py _validators.py _vt_helper.py __init__.py actions.py commands.py custom.py _client_factory.py _command_type.py _exception_handler.py _format.py _help.py _params.py _transformers.py _validators.py __init__.py action.py custom.py action.py commands.py custom.py _client_factory.py _help.py _params.py _validators.py __init__.py commands.py custom.py _help.py _params.py __init__.py _help.py __init__.py commands.py custom.py _client_factory.py _help.py _params.py __init__.py commands.py custom.py _client_factory.py _help.py _params.py _validators.py __init__.py commands.py custom.py _client_factory.py _help.py _params.py _validators.py __init__.py commands.py custom.py scenario_inputs.py _client_factory.py _help.py _params.py __init__.py advanced_filter.py authorized_partner.py commands.py custom.py delivery_attribute_mapping.py event_channel_filter.py inbound_ip_rules.py inline_event_type.py user_assigned.py _client_factory.py _help.py _params.py __init__.py action.py commands.py constants.py custom.py _client_factory.py _completers.py _help.py _params.py _utils.py _validator.py __init__.py custom.py _completers.py _help.py __init__.py custom.py _help.py __init__.py commands.py custom.py _help.py _params.py __init__.py commands.py custom.py util.py _client_factory.py _completers.py _help.py _params.py _validators.py __init__.py commands.py custom.py _client_factory.py _help.py _params.py _validators.py __init__.py custom.py __init__.py commands.py custom.py sas_token_auth.py shared.py _client_factory.py _constants.py _help.py _params.py _utils.py _validators.py __init__.py commands.py custom.py byte_shares.py jwe.py mod_math.py security_domain.py shared_secret.py sp800_108.py utils.py __init__.py http_bearer_chal http_bearer_challenge.py __init__.py http_challenge.p http_challenge.py http_message_sec http_message_security.py key_vault_authen key_vault_authentication.py key_vault_client key_vault_client.py key_vault_id.py models.py key_vault_c key_vault_client.py cert certificate_set_py3.py erro error_py3.py key_ key_vault_client_enums.py key_vault_error_py3.py secu security_domain_certificate_item_py3.py security_domain_json_web_key_py3.py security_domain_object_py3.py security_domain_operation_status_py3.py tran transfer_key_py3.py __in __init__.py version.py __init__.py version.py _internal.py __init__.py __init__.py _client_factory.py _command_type.py _completers.py _format.py _help.py _params.py _transformers.py _validators.py __init__.py commands.py custom.py _client_factory.py _help.py _params.py _validators.py __init__.py commands.py custom.py validators.py _client_factory.py _format.py _help.py _params.py __init__.py commands.py custom.py _client_factory.py _help.py _params.py __init__.py action.py commands.py custom.py _client_factory.py _help.py _params.py __init__.py action.py custom.py action.py commands.py custom.py _client_factory.py _help.py _params.py _validators.py __init__.py custom.py _help.py __init__.py _help.py __init__.py _delete. _delete.py _list.py _show.py _update. _update.py __cmd_gr __cmd_group.py __init__ __init__.py _create.py _delete.py _list.py _search.py _show.py _update.py __cmd_group.py __init__.py _crea _create.py _dele _delete.py _list _list.py _show _show.py _upda _update.py __cmd __cmd_group.py __ini __init__.py __cmd_group.py __init__.py __cmd_group.py __init__.py __init__.py __init__.py actions.py commands.py custom.py AutoscaleConditionLexer.py AutoscaleConditionListener.py AutoscaleConditionParser.py AutoscaleConditionValidator.py __init__.py MetricAlertConditionLexer.py MetricAlertConditionListener MetricAlertConditionListener.py MetricAlertConditionParser.p MetricAlertConditionParser.py MetricAlertConditionValidato MetricAlertConditionValidator.py __init__.py __init__.py action_groups.py activity_log_alerts.py autoscale-parameters-template.json autoscale_settings.py diagnostics_settings.py general_operations.py log_analytics_cluster.py log_analytics_linked_storage_account.p log_analytics_linked_storage_account.py log_analytics_workspace.py log_analytics_workspace_linked_service log_analytics_workspace_linked_service.py log_profiles.py metric_alert.py monitor_clone_util.py private_link_scope.py subscription_diagnostic_settings.py __init__.py transformers.py util.py validators.py _autoscale_util.py _client_factory.py _exception_handler.py _help.py _params.py __init__.py commands.py custom.py _client_factory.py _help.py _params.py _validators.py __init__.py commands.py custom.py _client_factory.py _exception_handler.py _help.py _params.py __init__.py _create.py _delete.py _list.py _show.py _update.py _wait.py __cmd_group.py __init__.py _cre _create.py _del _delete.py _lis _list.py _sho _show.py _upd _update.py _wai _wait.py __cm __cmd_group.py __in __init__.py __cmd_group.py __init__.py __init__.py __init__.py commands.py custom.py cu custom.py keyvault_provider.py __init__.py __ __init__.py tunnel.py make_zone_file.py parse_zone_file.py record_processors.py __init__.py _actions.py _client_factory.py _completers.py _format.py _help.py _params.py _process_helper.py _template_builder.py _util.py _validators.py __init__.py commands.py custom.py _client_factory.py _completers.py _exception_handler.py _help.py _params.py _validators.py __init__.py commands.py custom.py _client_factory.py _format.py _help.py _params.py _validators.py __init__.py custom.py _format.py _help.py _validators.py __init__.py commands.py custom.py flexible_server_commands.py flexible_server_custom_common.py flexible_server_custom_mysql.py flexible_server_custom_postgres.py flexible_server_virtual_network.py adjectives.txt generate.py nouns.txt __init__.py mysql_githubaction_template.yaml postgresql_githubaction_template.yaml validators.py _client_factory.py _flexible_server_util.py _help.py _helptext_mysql.py _helptext_pg.py _params.py _transformers.py _util.py __init__.py commands.py custom.py _client_factory.py _help.py _params.py _validators.py __init__.py commands.py custom.py _client_factory.py _completers.py _help.py _params.py _utils.py _validators.py __init__.py commands.py custom.py _client_factory.py _exception_handler.py _help.py _params.py __init__.py commands.py custom.py parameters.py _bicep.py _client_factory.py _color.py _completers.py _exception_handler.py _formatters.py _help.py _json_handler.py _packing_engine.py _params.py _symbol.py _utils.py _validators.py _win_vt.py __init__.py commands.py custom.py _client_factory.py _completers.py _help.py _graph_client.py _graph_objects.py __init__.py _multi_api_adaptor.py _params.py _validators.py __init__.py commands.py custom.py _client_factory.py _help.py _params.py __init__.py actions.py commands.py custom.py _client_factory.py _help.py _params.py _utils.py _validators.py __init__.py action.py commands.py constants.py custom.py _client_factory.py _completers.py _help.py _params.py _utils.py _validators.py __init__.py action.py commands.py custom.py _addon_factory.py _client_factory.py _help.py _params.py _resource_config.py _transformers.py _utils.py _validators.py __init__.py commands.py custom.py applications.py managed_applications.py managed_clusters.py managed_node_types.py __init__.py parameter.json template.json parameter.json template.json parameter.json template.json _arm_deployment_utils.py _client_factory.py _help.py _params.py _sf_utils.py _validators.py __init__.py commands.py cors.py custom.py key.py msi.py network.py upstream.py _actions.py _client_factory.py _constants.py _help.py _params.py __init__.py commands.py custom.py _format.py _help.py _params.py _util.py _validators.py __init__.py commands.py custom.py _assessment_data_source.py _format.py _help.py _params.py _util.py _validators.py __init__.py util.py __init__.py commands.py commands_azure_stack.py completers.py oauth_token_util.py access_policy.py account.py acl.py azcopy.py blob.py blob_azure_stack.py cors.py cors_azure_stack.py directory.py directory_azure_stack.py file.py fileshare.py filesystem.py file_azure_stack.py fs_directory.py fs_file.py logging.py metrics.py queue.py table.py __init__.py sdkutil.py services_wrapper.py services_wrapper_azure_stack.py storage_url_helpers.py track2_util.py url_quote_util.py util.py _client_factory.py _client_factory_azure_stack.py _exception_handler.py _format.py _format_azure_stack.py _help.py _params.py _params_azure_stack.py _transformers.py _transformers_azure_stack.py _validators.py _validators_azure_stack.py __init__.py action.py custom.py custom_help.py action.py commands.py custom.py _client_factory.py _help.py _params.py _validators.py __init__.py action.py commands.py constant.py accesscontrol.py adonlyauthentications.py artifacts.py integrationruntime.py integrationruntimenode.py kustopool.py managedprivateendpoints.py spark.py sparkpool.py sqlpool.py sqlpoolblobauditingpolicy.py sqlpoolsecurityalertpolicy.py sqlpoolsensitivitylabel.py sqlpooltde.py workspace.py workspacesqlaadadmin.py __init__.py util.py _client_factory.py _completers.py _help.py _params.py _validators.py __init__.py _help.py __init__.py commands.py custom.py _help.py _params.py __init__.py commands.py custom.py disk_encryption.py action.py commands.py custom.py _client_factory.py _help.py _params.py _validators.py __init__.py commands.py custom.py _help.py _params.py __init__.py _actions.py _alias.py _arg_client.py _client_factory.py _completers.py _format.py _help.py _image_builder.py _params.py _template_builder.py _validators.py _vm_diagnostics_templates.py _vm_utils.py _workspace_data_source_settings.py __init__.py __init__.py __init__.py __main__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt azure_cli_bdist_wheel.py HISTORY.rst LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n# --------------------------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for license information.\n# --------------------------------------------------------------------------------------------\n\nfrom codecs import open\nfrom setuptools import setup, find_packages\nimport sys\n\ntry:\nfrom azure_cli_bdist_wheel import cmdclass\nexcept ImportError:\nfrom distutils import log as logger\n\nlogger.warn(\"Wheel is not available, disabling bdist_wheel hook\")\ncmdclass = {}\n\nVERSION = \"2.39.0\"\n# If we have source, validate that our version numbers match\n# This should prevent uploading releases with mismatched versions.\ntry:\nwith open('azure\/cli\/__main__.py', 'r', encoding='utf-8') as f:\ncontent = f.read()\nexcept OSError:\npass\nelse:\nimport re\n\nm = re.search(r'__version__\\s*=\\s*[\\'\"](.+?)[\\'\"]', content)\nif not m:\nprint('Could not find __version__ in azure\/cli\/__main__.py')\nsys.exit(1)\nif m.group(1) != VERSION:\nprint('Expected __version__ = \"{}\"; found \"{}\"'.format(VERSION, m.group(1)))\nsys.exit(1)\n\nCLASSIFIERS = [\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'License :: OSI Approved :: MIT License',\n]\n\nDEPENDENCIES = [\n\"antlr4-python3-runtime~=4.9.3\",\n'azure-appconfiguration~=1.1.1',\n'azure-batch~=12.0.0',\n'azure-cli-core=={}'.format(VERSION),\n'azure-cosmos~=3.0,>=3.0.2',\n'azure-data-tables==12.4.0',\n'azure-datalake-store~=0.0.49',\n'azure-graphrbac~=0.60.0',\n'azure-keyvault-administration==4.0.0b3',\n'azure-keyvault-keys==4.5.1',\n'azure-keyvault~=1.1.0',\n'azure-loganalytics~=0.1.0',\n'azure-mgmt-advisor==9.0.0',\n'azure-mgmt-apimanagement~=3.0.0',\n'azure-mgmt-appconfiguration==2.1.0',\n'azure-mgmt-applicationinsights~=1.0.0',\n'azure-mgmt-authorization~=0.61.0',\n'azure-mgmt-batchai==7.0.0b1',\n'azure-mgmt-batch~=16.2.0',\n'azure-mgmt-billing==6.0.0',\n'azure-mgmt-botservice~=2.0.0b3',\n'azure-mgmt-cdn==12.0.0',\n'azure-mgmt-cognitiveservices~=13.2.0',\n'azure-mgmt-compute~=27.1.0',\n'azure-mgmt-consumption~=2.0',\n'azure-mgmt-containerinstance~=9.1.0',\n'azure-mgmt-containerregistry==8.2.0',\n'azure-mgmt-containerservice~=20.2.0',\n'azure-mgmt-cosmosdb==7.0.0b6',\n'azure-mgmt-databoxedge~=1.0.0',\n'azure-mgmt-datalake-analytics~=0.2.1',\n'azure-mgmt-datalake-store~=0.5.0',\n'azure-mgmt-datamigration~=10.0.0',\n'azure-mgmt-deploymentmanager~=0.2.0',\n'azure-mgmt-devtestlabs~=4.0',\n'azure-mgmt-dns~=8.0.0',\n'azure-mgmt-eventgrid==10.2.0b2',\n'azure-mgmt-eventhub~=10.1.0',\n'azure-mgmt-extendedlocation==1.0.0b2',\n'azure-mgmt-hdinsight~=9.0.0',\n'azure-mgmt-imagebuilder~=1.1.0',\n'azure-mgmt-iotcentral~=10.0.0b1',\n'azure-mgmt-iothub==2.2.0',\n'azure-mgmt-iothubprovisioningservices==1.1.0',\n'azure-mgmt-keyvault==9.3.0',\n'azure-mgmt-kusto~=0.3.0',\n'azure-mgmt-loganalytics==13.0.0b4',\n'azure-mgmt-managedservices~=1.0',\n'azure-mgmt-managementgroups~=1.0.0',\n'azure-mgmt-maps~=2.0.0',\n'azure-mgmt-marketplaceordering==1.1.0',\n'azure-mgmt-media~=9.0',\n'azure-mgmt-monitor~=3.0.0',\n'azure-mgmt-msi~=6.0.1',\n'azure-mgmt-netapp~=8.0.0',\n'azure-mgmt-network~=20.0.0',\n'azure-mgmt-policyinsights~=1.1.0b2',\n'azure-mgmt-privatedns~=1.0.0',\n'azure-mgmt-rdbms~=10.2.0b1',\n'azure-mgmt-recoveryservicesbackup~=5.0.0',\n'azure-mgmt-recoveryservices~=2.0.0',\n'azure-mgmt-redhatopenshift==1.1.0',\n'azure-mgmt-redis~=13.1.0',\n'azure-mgmt-relay~=0.1.0',\n'azure-mgmt-reservations==2.0.0', # TODO: Use requirements.txt instead of '==' #9781\n'azure-mgmt-resource==21.1.0b1',\n'azure-mgmt-search~=8.0',\n'azure-mgmt-security==2.0.0b1',\n'azure-mgmt-servicebus~=7.1.0',\n'azure-mgmt-servicefabricmanagedclusters~=1.0.0',\n'azure-mgmt-servicelinker==1.0.0',\n'azure-mgmt-servicefabric~=1.0.0',\n'azure-mgmt-signalr==1.0.0b2',\n'azure-mgmt-sqlvirtualmachine==1.0.0b3',\n'azure-mgmt-sql==4.0.0b2',\n'azure-mgmt-storage~=20.0.0',\n'azure-mgmt-synapse==2.1.0b2',\n'azure-mgmt-trafficmanager~=1.0.0',\n'azure-mgmt-web==7.0.0',\n'azure-multiapi-storage~=0.9.0',\n'azure-storage-common~=1.4',\n'azure-synapse-accesscontrol~=0.5.0',\n'azure-synapse-artifacts~=0.13.0',\n'azure-synapse-managedprivateendpoints~=0.3.0',\n'azure-synapse-spark~=0.2.0',\n'chardet~=3.0.4',\n'colorama~=0.4.4',\n# On Linux, the distribution (Ubuntu, Debian, etc) and version are checked for `az feedback`\n'distro; sys_platform == \"linux\"',\n'fabric~=2.4',\n'javaproperties~=0.5.1',\n'jsondiff~=2.0.0',\n'packaging>=20.9,<22.0',\n'PyGithub~=1.38',\n'PyNaCl~=1.5.0',\n'scp~=0.13.2',\n'semver==2.13.0',\n'six>=1.10.0', # six is still used by countless extensions\n'sshtunnel~=0.1.4',\n'urllib3[secure]',\n'websocket-client~=1.3.1',\n'xmltodict~=0.12'\n]\n\nwith open('README.rst', 'r', encoding='utf-8') as f:\nREADME = f.read()\n\nsetup(\nname='azure-cli',\nversion=VERSION,\ndescription='Microsoft Azure Command-Line Tools',\nlong_description=README,\nlicense='MIT',\nauthor='Microsoft Corporation',\nauthor_email='azpycli@microsoft.com',\nurl='https:\/\/github.com\/Azure\/azure-cli',\nzip_safe=False,\nclassifiers=CLASSIFIERS,\nscripts=[\n'az',\n'az.completion.sh',\n'az.bat',\n],\npackages=find_packages(exclude=[\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\", \"azure\", \"azure.cli\"]),\ninstall_requires=DEPENDENCIES,\npython_requires='>=3.6.0',\npackage_data={\n'azure.cli.command_modules.acr': ['*.json'],\n'azure.cli.command_modules.botservice': ['*.json', '*.config'],\n'azure.cli.command_modules.monitor.operations': ['autoscale-parameters-template.json'],\n'azure.cli.command_modules.servicefabric': [\n'template\/windows\/template.json',\n'template\/windows\/parameter.json',\n'template\/linux\/template.json',\n'template\/linux\/parameter.json',\n'template\/service\/template.json',\n'template\/service\/parameter.json'\n],\n'azure.cli.command_modules.appservice': [\n'resources\/WebappRuntimeStacks.json',\n'resources\/GenerateRandomAppNames.json'\n],\n'azure.cli.command_modules.rdbms': [\n'randomname\/adjectives.txt',\n'randomname\/nouns.txt',\n'templates\/mysql_githubaction_template.yaml',\n'templates\/postgresql_githubaction_template.yaml'\n]\n},\ncmdclass=cmdclass\n)\n"
    },
    {
        "package_name": "azure-iot-device-2.11.0",
        "file_list": "patch_documentation.py __init__.py alarm.py asyncio_compat.py async_adapter.py connection_string.py sastoken.py signing_mechanism.py __init__.py evented_callback.py handle_exceptions.py http_transport.py proxy_options.py x509.py __init__.py mqtt_transport.py config.py pipeline_events_base.py pipeline_events_mqtt.py pipeline_exceptions.py pipeline_ops_base.py pipeline_ops_http.py pipeline_ops_mqtt.py pipeline_stages_base.py pipeline_stages_http.py pipeline_stages_mqtt.py pipeline_thread.py __init__.py transport_exceptions.py __init__.py constant.py exceptions.py abstract_clients.py async_clients.py async_handler_manager.py async_inbox.py loop_management.py __init__.py client_event.py edge_hsm.py inbox_manager.py message.py methods.py __init__.py config.py constant.py exceptions.py http_map_error.py http_path_iothub.py http_pipeline.py mqtt_pipeline.py mqtt_topic_iothub.py pipeline_events_iothub.py pipeline_ops_iothub.py pipeline_ops_iothub_http.py pipeline_stages_iothub.py pipeline_stages_iothub_http.py pipeline_stages_iothub_mqtt.py __init__.py sync_clients.py sync_handler_manager.py sync_inbox.py __init__.py patch.py patch_documentation.py abstract_provisioning_device_client.py async_provisioning_device_client.py __init__.py registration_result.py __init__.py config.py constant.py exceptions.py mqtt_pipeline.py mqtt_topic_provisioning.py pipeline_ops_provisioning.py pipeline_stages_provisioning.py pipeline_stages_provisioning_mqtt.py __init__.py provisioning_device_client.py __init__.py user_agent.py __init__.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\n\nfrom setuptools import setup, find_packages\nimport re\n\n# azure v0.x is not compatible with this package\n# azure v0.x used to have a __version__ attribute (newer versions don't)\ntry:\nimport azure\n\ntry:\nver = azure.__version__\nraise Exception(\n\"This package is incompatible with azure=={}. \".format(ver)\n+ 'Uninstall it with \"pip uninstall azure\".'\n)\nexcept AttributeError:\npass\nexcept ImportError:\npass\n\n\nwith open(\"README.md\", \"r\") as fh:\n_long_description = fh.read()\n\n\nfilename = \"azure\/iot\/device\/constant.py\"\nversion = None\n\nwith open(filename, \"r\") as fh:\nif not re.search(\"\\n+VERSION\", fh.read()):\nraise ValueError(\"VERSION is not defined in constants.\")\n\nwith open(filename, \"r\") as fh:\nfor line in fh:\nif re.search(\"^VERSION\", line):\nconstant, value = line.strip().split(\"=\")\nif not value:\nraise ValueError(\"Value for VERSION not defined in constants.\")\nelse:\n# Strip whitespace and quotation marks\n# Need to str convert for python 2 unicode\nversion = str(value.strip(' \"'))\nbreak\n\nsetup(\nname=\"azure-iot-device\",\nversion=version,\ndescription=\"Microsoft Azure IoT Device Library\",\nlicense=\"MIT License\",\nlicense_files=(\"LICENSE\",),\nurl=\"https:\/\/github.com\/Azure\/azure-iot-sdk-python\/tree\/main\/azure-iot-device\",\nauthor=\"Microsoft Corporation\",\nauthor_email=\"opensource@microsoft.com\",\nlong_description=_long_description,\nlong_description_content_type=\"text\/markdown\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\ninstall_requires=[\n# Define sub-dependencies due to pip dependency resolution bug\n# https:\/\/github.com\/pypa\/pip\/issues\/988\n# ---requests dependencies---\n# requests 2.22+ does not support urllib3 1.25.0 or 1.25.1 (https:\/\/github.com\/psf\/requests\/pull\/5092)\n# Security issue below 1.26.5\n\"urllib3>=1.26.5,<1.27\",\n# Actual project dependencies\n\"deprecation>=2.1.0,<3.0.0\",\n\"paho-mqtt>=1.4.0,<2.0.0\",\n\"requests>=2.20.0,<3.0.0\",\n\"requests-unixsocket>=0.1.5,<1.0.0\",\n\"janus\",\n\"PySocks\",\n],\npython_requires=\"!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5, <4\",\npackages=find_packages(\nexclude=[\n\"tests\",\n\"tests.*\",\n\"samples\",\n\"samples.*\",\n# Exclude packages that will be covered by PEP420\n\"azure\",\n\"azure.iot\",\n]\n),\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "backports-datetime-fromisoformat-1.0.0",
        "file_list": "module.c timezone.c timezone.h _datetimemodule.c _datetimemodule.h __init__.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "import os\n\nfrom setuptools import setup, Extension\n# workaround for open() with encoding='' python2\/3 compability\nfrom io import open\n\nwith open('README.rst', encoding='utf-8') as file:\nlong_description = file.read()\n\nVERSION = \"1.0.0\"\n\nsetup(\nname=\"backports-datetime-fromisoformat\",\nversion=VERSION,\ndescription=\"Backport of Python 3.7's datetime.fromisoformat\",\nlong_description=long_description,\nlicense=\"MIT\",\nauthor=\"Michael Overmeyer\",\nauthor_email=\"backports@movermeyer.com\",\nurl=\"https:\/\/github.com\/movermeyer\/backports.datetime_fromisoformat\",\n\npackages=[\"backports\", \"backports.datetime_fromisoformat\"],\n\next_modules=[Extension(\"backports._datetime_fromisoformat\", [\nos.path.join(\"backports\", \"datetime_fromisoformat\", \"module.c\"),\nos.path.join(\"backports\", \"datetime_fromisoformat\", \"_datetimemodule.c\"),\nos.path.join(\"backports\", \"datetime_fromisoformat\", \"timezone.c\")\n])],\n\ntest_suite='tests',\ntests_require=[\n'pytz'\n],\nclassifiers=[\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Topic :: Software Development :: Libraries :: Python Modules'\n]\n)\n"
    },
    {
        "package_name": "backports.zoneinfo-0.2.1",
        "file_list": "build-publish.yml python-tests.yml .pre-commit-config.yaml CHANGELOG.rst codecov.yml changelog.rst conf.py index.rst maintaining.rst zoneinfo.rst zoneinfo_module.c LICENSE LICENSE_APACHE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed _common.py _tzpath.py _version.py _zoneinfo.py __init__.py __init__.pyi __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt test_zoneinfo.py test_zoneinfo_property.py typing_example.py _support.py __init__.py tox.ini",
        "setup.py": "import os\nimport platform\nimport sys\n\nimport setuptools\nfrom setuptools import Extension\n\nif platform.python_implementation() != \"PyPy\":\n# We need to pass the -std=c99 to gcc and\/or clang, but we shouldn't pass\n# it to MSVC. There doesn't seem to be a simple way of setting\n# compiler-specific compile arguments, but for practical purposes\n# conditionally adding this argument on non-Windows platforms should be\n# enough. If an edge case is found that prevents compilation on some\n# systems, the end user should be able to set CFLAGS=\"-std=c99\".\nif not sys.platform.startswith(\"win\"):\nextra_compile_args = [\"-std=c99\"]\nelse:\nextra_compile_args = []\n\nc_extension = Extension(\n\"backports.zoneinfo._czoneinfo\",\nsources=[\"lib\/zoneinfo_module.c\"],\nextra_compile_args=extra_compile_args,\n)\n\nsetuptools.setup(ext_modules=[c_extension])\nelse:\nsetuptools.setup()\n\n\nif \"GCNO_TARGET_DIR\" in os.environ:\nimport glob\n\ngcno_files = glob.glob(\"**\/*.gcno\", recursive=True)\n\nif gcno_files:\nimport shutil\n\ntarget_dir = os.environ[\"GCNO_TARGET_DIR\"]\nos.makedirs(target_dir, exist_ok=True)\nfor gcno_file in gcno_files:\nsrc = gcno_file\nsrc_dir, filename = os.path.split(gcno_file)\nnew_target_dir = target_dir\n\n# When using gcc-9, the files are created in some flat location\n# with a naming convention where \/path\/to\/file.gcda would be\n# represented as ${BASEDIR}\/#path#to#file.gcda. In gcc-7, the input\n# directory is mirrored in the output directory, so the filename\n# would be ${BASEDIR}\/path\/to\/file.gcda. The gcno files need to\n# have the same name and relative location as the gcda files,\n# apparently.\nif not filename.startswith(\"#\"):\nrel_src_dir = os.path.relpath(src_dir)\nnew_target_dir = os.path.join(target_dir, rel_src_dir)\nos.makedirs(new_target_dir, exist_ok=True)\n\ndst = os.path.join(new_target_dir, filename)\nshutil.copy(src, dst)\n"
    },
    {
        "package_name": "bashlex-0.16",
        "file_list": "ast.py errors.py flags.py heredoc.py parser.py parsetab.py shutils.py state.py subst.py tokenizer.py utils.py yacc.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup\n\n\nsetup(\nname='bashlex',\nversion='0.16',\nurl='https:\/\/github.com\/idank\/bashlex.git',\nlicense='GPLv3+',\nauthor='Idan Kamara',\nauthor_email='idankk86@gmail.com',\ndescription='Python parser for bash',\nlong_description='''bashlex is a Python port of the parser used internally by GNU bash.\n\nFor the most part it's transliterated from C, the major differences are:\n\n1. it does not execute anything\n2. it is reentrant\n3. it generates a complete AST\n\nSee https:\/\/github.com\/idank\/bashlex\/blob\/master\/README.md for more info.''',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: System :: System Shells',\n'Topic :: Text Processing',\n],\npython_requires=\">=2.7, !=3.0, !=3.1, !=3.2, !=3.3, !=3.4\",\ninstall_requires=['enum34; python_version < \"3.4\"'],\npackages=['bashlex'],\n)\n"
    },
    {
        "package_name": "Beaker-1.11.0",
        "file_list": "cache.py container.py converters.py cookie.py jcecrypto.py noencryption.py nsscrypto.py pbkdf2.py pyca_cryptography.py pycrypto.py util.py __init__.py exceptions.py database.py google.py memcached.py mongodb.py redisnm.py sqla.py __init__.py middleware.py session.py synchronization.py util.py _compat.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "import os\nimport sys\nimport re\nimport inspect\n\nfrom setuptools import setup, find_packages\n\npy_version = sys.version_info[:2]\nhere = os.path.abspath(os.path.dirname(__file__))\nv = open(os.path.join(here, 'beaker', '__init__.py'))\nVERSION = re.compile(r\".*__version__ = '(.*?)'\", re.S).match(v.read()).group(1)\nv.close()\n\ntry:\nREADME = open(os.path.join(here, 'README.rst')).read()\nexcept IOError:\nREADME = ''\n\n\nINSTALL_REQUIRES = []\nif not hasattr(inspect, 'signature'):\n# On Python 2.6, 2.7 and 3.2 we need funcsigs dependency\nINSTALL_REQUIRES.append('funcsigs')\n\n\nTESTS_REQUIRE = ['nose', 'Mock', 'pycryptodome']\n\nif py_version == (2, 6):\nTESTS_REQUIRE.append('WebTest<2.0.24')\nTESTS_REQUIRE.append('pycparser==2.18')\nelse:\nTESTS_REQUIRE.append('webtest')\n\nif py_version == (3, 2):\nTESTS_REQUIRE.append('coverage < 4.0')\nelse:\nTESTS_REQUIRE.append('coverage')\n\nif py_version == (3, 3):\nTESTS_REQUIRE.append('cryptography < 2.1.0')\nelse:\nTESTS_REQUIRE.append('cryptography')\n\nif not sys.platform.startswith('java') and not sys.platform == 'cli':\nif py_version == (2, 6):\nTESTS_REQUIRE.append('sqlalchemy < 1.2')\nelse:\nTESTS_REQUIRE.append('sqlalchemy')\nTESTS_REQUIRE.extend(['pymongo', 'redis'])\ntry:\nimport sqlite3\nexcept ImportError:\nTESTS_REQUIRE.append('pysqlite')\nTESTS_REQUIRE.extend(['pylibmc', 'python-memcached'])\n\n\nsetup(name='Beaker',\nversion=VERSION,\ndescription=\"A Session and Caching library with WSGI Middleware\",\nlong_description=README,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n'Topic :: Internet :: WWW\/HTTP :: WSGI',\n'Topic :: Internet :: WWW\/HTTP :: WSGI :: Middleware',\n],\nkeywords='wsgi myghty session web cache middleware',\nauthor='Ben Bangert, Mike Bayer, Philip Jenvey, Alessandro Molina',\nauthor_email='ben@groovie.org, pjenvey@groovie.org, amol@turbogears.org',\nurl='https:\/\/beaker.readthedocs.io\/',\nlicense='BSD',\npackages=find_packages(exclude=['ez_setup', 'examples', 'tests', 'tests.*']),\nzip_safe=False,\ninstall_requires=INSTALL_REQUIRES,\nextras_require={\n'crypto': ['pycryptopp>=0.5.12'],\n'pycrypto': ['pycrypto'],\n'pycryptodome': ['pycryptodome'],\n'cryptography': ['cryptography'],\n'testsuite': [TESTS_REQUIRE]\n},\ntest_suite='nose.collector',\ntests_require=TESTS_REQUIRE,\nentry_points=\"\"\"\n[paste.filter_factory]\nbeaker_session = beaker.middleware:session_filter_factory\n\n[paste.filter_app_factory]\nbeaker_session = beaker.middleware:session_filter_app_factory\n\n[beaker.backends]\ndatabase = beaker.ext.database:DatabaseNamespaceManager\nmemcached = beaker.ext.memcached:MemcachedNamespaceManager\ngoogle = beaker.ext.google:GoogleNamespaceManager\nsqla = beaker.ext.sqla:SqlaNamespaceManager\n\"\"\"\n)\n"
    },
    {
        "package_name": "bertopic-0.11.0",
        "file_list": "_base.py _flair.py _gensim.py _hftransformers.py _sentencetransformers.py _spacy.py _use.py _utils.py _word_doc.py __init__.py _barchart.py _distribution.py _documents.py _heatmap.py _hierarchical_documents.py _hierarchy.py _term_rank.py _topics.py _topics_over_time.py _topics_per_class.py __init__.py _bertopic.py _ctfidf.py _mmr.py _utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py conftest.py test_bertopic.py test_models.py test_other.py test_topic_representation.py test_utils.py __init__.py",
        "setup.py": "from setuptools import setup, find_packages\n\ntest_packages = [\n\"pytest>=5.4.3\",\n\"pytest-cov>=2.6.1\"\n]\n\ndocs_packages = [\n\"mkdocs>=1.1\",\n\"mkdocs-material>=4.6.3\",\n\"mkdocstrings>=0.8.0\",\n]\n\nbase_packages = [\n\"numpy>=1.20.0\",\n\"hdbscan>=0.8.28\",\n\"umap-learn>=0.5.0\",\n\"pandas>=1.1.5\",\n\"scikit-learn>=0.22.2.post1\",\n\"tqdm>=4.41.1\",\n\"sentence-transformers>=0.4.1\",\n\"plotly>=4.7.0\",\n\"pyyaml<6.0\"\n]\n\nflair_packages = [\n\"transformers>=3.5.1\",\n\"torch>=1.4.0\",\n\"flair>=0.7\"\n]\n\nspacy_packages = [\n\"spacy>=3.0.1\"\n]\n\nuse_packages = [\n\"tensorflow\",\n\"tensorflow_hub\",\n\"tensorflow_text\"\n]\n\ngensim_packages = [\n\"gensim>=4.0.0\"\n]\n\nextra_packages = flair_packages + spacy_packages + use_packages + gensim_packages\n\ndev_packages = docs_packages + test_packages + extra_packages\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nsetup(\nname=\"bertopic\",\npackages=find_packages(exclude=[\"notebooks\", \"docs\"]),\nversion=\"0.11.0\",\nauthor=\"Maarten P. Grootendorst\",\nauthor_email=\"maartengrootendorst@gmail.com\",\ndescription=\"BERTopic performs topic Modeling with state-of-the-art transformer models.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/MaartenGr\/BERTopic\",\nproject_urls={\n\"Documentation\": \"https:\/\/maartengr.github.io\/BERTopic\/\",\n\"Source Code\": \"https:\/\/github.com\/MaartenGr\/BERTopic\/\",\n\"Issue Tracker\": \"https:\/\/github.com\/MaartenGr\/BERTopic\/issues\",\n},\nkeywords=\"nlp bert topic modeling embeddings\",\nclassifiers=[\n\"Programming Language :: Python\",\n\"Intended Audience :: Science\/Research\",\n\"Intended Audience :: Developers\",\n\"Topic :: Scientific\/Engineering :: Artificial Intelligence\",\n\"License :: OSI Approved :: MIT License\",\n\"Topic :: Scientific\/Engineering\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: POSIX\",\n\"Operating System :: Unix\",\n\"Operating System :: MacOS\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.8\",\n],\ninstall_requires=base_packages,\nextras_require={\n\"test\": test_packages,\n\"docs\": docs_packages,\n\"dev\": dev_packages,\n\"flair\": flair_packages,\n\"spacy\": spacy_packages,\n\"use\": use_packages,\n\"gensim\": gensim_packages\n},\npython_requires='>=3.7',\n)\n"
    },
    {
        "package_name": "betamax-0.8.1",
        "file_list": "AUTHORS.rst adapter.py cassette.py interaction.py __init__.py configure.py decorator.py exceptions.py pytest.py unittest.py __init__.py headers.py base.py body.py digest_auth.py headers.py host.py method.py path.py query.py uri.py __init__.py mock_response.py options.py recorder.py base.py json_serializer.py proxy.py __init__.py util.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt api.rst cassettes.rst conf.py configuring.rst implementation_details.rst index.rst integrations.rst introduction.rst long_term_usage.rst Makefile matchers.rst record_modes.rst serializers.rst third_party_packages.rst usage_patterns.rst HISTORY.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py GitHub_create_issue.json GitHub_emojis.json global_preserve_exact_body_bytes.json handles_digest_auth.json once_record_mode.json preserve_exact_bytes.json replay_interactions.json replay_multiple_times.json test-multiple-cookies-regression.json test.json tests.integration.test_fixtures.TestPyTestFixtures.test_pytest_fixture.json tests.integration.test_fixtures.TestPyTestParametrizedFixtures.test_pytest_fixture[https---httpbin.org-get].json tests.integration.test_fixtures.test_pytest_parametrize_with_filesystem_problematic_chars[aaa-bbb].json tests.integration.test_fixtures.test_pytest_parametrize_with_filesystem_problematic_chars[ccc-ddd].json tests.integration.test_fixtures.test_pytest_parametrize_with_filesystem_problematic_chars[eee-fff].json test_replays_response_on_right_order.json conftest.py helper.py test_allow_playback_repeats.py test_backwards_compat.py test_fixtures.py test_hooks.py test_multiple_cookies.py test_placeholders.py test_preserve_exact_body_bytes.py test_record_modes.py test_unicode.py __init__.py test_can_replay_interactions_multiple_times.py test_cassettes_retain_global_configuration.py test_gzip_compression.py test_once_prevents_new_interactions.py test_requests_2_11_body_matcher.py test_works_with_digest_auth.py test_adapter.py test_betamax.py test_cassette.py test_configure.py test_decorator.py test_exceptions.py test_fixtures.py test_matchers.py test_options.py test_recorder.py test_replays.py test_serializers.py __init__.py",
        "setup.py": "import os\nimport re\nimport sys\nfrom setuptools import setup, find_packages\n\npackages = find_packages(exclude=['tests', 'tests.integration'])\nrequires = ['requests >= 2.0']\n\n__version__ = ''\nwith open('betamax\/__init__.py', 'r') as fd:\nreg = re.compile(r'__version__ = [\\'\"]([^\\'\"]*)[\\'\"]')\nfor line in fd:\nm = reg.match(line)\nif m:\n__version__ = m.group(1)\nbreak\n\nif not __version__:\nraise RuntimeError('Cannot find version information')\n\nif sys.argv[-1] in ['submit', 'publish']:\nos.system(\"python setup.py sdist bdist_wheel upload\")\nsys.exit()\n\n\ndef data_for(filename):\nwith open(filename) as fd:\ncontent = fd.read()\nreturn content\n\nsetup(\nname=\"betamax\",\nversion=__version__,\ndescription=\"A VCR imitation for python-requests\",\nlong_description=\"\\n\\n\".join([data_for(\"README.rst\"),\ndata_for(\"HISTORY.rst\")]),\nlicense=\"Apache 2.0\",\nauthor=\"Ian Stapleton Cordasco\",\nauthor_email=\"graffatcolmingov@gmail.com\",\nurl=\"https:\/\/github.com\/sigmavirus24\/betamax\",\npackages=packages,\npackage_data={'': ['LICENSE', 'AUTHORS.rst']},\ninclude_package_data=True,\ninstall_requires=requires,\nentry_points={\n'pytest11': ['pytest-betamax = betamax.fixtures.pytest']\n},\nclassifiers=[\n'Development Status :: 4 - Beta',\n'License :: OSI Approved',\n'Intended Audience :: Developers',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: Implementation :: CPython',\n]\n)\n"
    },
    {
        "package_name": "bigquery-schema-generator-1.5",
        "file_list": "anonymize.py generate_schema.py version.py __init__.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup\n\n# Slurp in the README.md. PyPI finally supports Markdown, so we no longer need\n# to convert it to RST.\nwith open('README.md', encoding=\"utf-8\") as f:\nlong_description = f.read()\n\n# Read the version string from bigquery_schema_generator\/version.py.\n# See https:\/\/packaging.python.org\/guides\/single-sourcing-package-version\/\nversion = {}\nwith open(\"bigquery_schema_generator\/version.py\") as fp:\nexec(fp.read(), version)\nversion_string = version['__version__']\nif not version_string:\nraise Exception(\"Unable to read version.py\")\n\nsetup(\nname='bigquery-schema-generator',\nversion=version_string,\ndescription='BigQuery schema generator from JSON or CSV data',\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl='https:\/\/github.com\/bxparks\/bigquery-schema-generator',\nauthor='Brian T. Park',\nauthor_email='brian@xparks.net',\nlicense='Apache 2.0',\npackages=['bigquery_schema_generator'],\npython_requires='>=3.6',\nentry_points={\n'console_scripts': [\n'generate-schema = bigquery_schema_generator.generate_schema:main'\n]\n},\n)\n"
    },
    {
        "package_name": "blinker-1.5",
        "file_list": "base.py _saferef.py _utilities.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGES.rst conf.py index.rst make.bat Makefile requirements.in requirements.txt blinker-named.png LICENSE.rst MANIFEST.in PKG-INFO README.rst setup.cfg setup.py requirements.in requirements.txt test_context.py test_saferef.py test_signals.py test_utilities.py tox.ini",
        "setup.py": "try:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\nreadme = open('README.rst').read()\nimport blinker\nversion = blinker.__version__\n\nsetup(name=\"blinker\",\nversion=version,\npackages=['blinker'],\nauthor='Jason Kirtland',\nauthor_email='jek@discorporate.us',\nmaintainer=\"Pallets Ecosystem\",\nmaintainer_email=\"contact@palletsprojects.com\",\ndescription='Fast, simple object-to-object and broadcast signaling',\nkeywords='signal emit events broadcast',\nlong_description=readme,\nlong_description_content_type=\"text\/x-rst\",\nlicense='MIT License',\nurl='https:\/\/blinker.readthedocs.io',\nproject_urls={\n'Source': 'https:\/\/github.com\/pallets-eco\/blinker',\n},\npython_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Topic :: Software Development :: Libraries',\n],\n)\n"
    },
    {
        "package_name": "boltons-21.0.0",
        "file_list": "cacheutils.py debugutils.py deprutils.py dictutils.py easterutils.py ecoutils.py excutils.py fileutils.py formatutils.py funcutils.py gcutils.py ioutils.py iterutils.py jsonutils.py listutils.py mathutils.py mboxutils.py namedutils.py pathutils.py queueutils.py setutils.py socketutils.py statsutils.py strutils.py tableutils.py tbutils.py timeutils.py typeutils.py urlutils.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt CHANGELOG.md LICENSE MANIFEST.in PKG-INFO pytest.ini README.md setup.cfg setup.py TODO.rst tox.ini",
        "setup.py": "\"\"\"Functionality that should be in the standard library. Like\nbuiltins, but Boltons.\n\nOtherwise known as, \"everyone's util.py,\" but cleaned up and\ntested.\n\nContains over 250 BSD-licensed utility types and functions that can be\nused as a package or independently. `Extensively documented on Read\nthe Docs <http:\/\/boltons.readthedocs.org>`_.\n\"\"\"\n\nfrom setuptools import setup\n\n\n__author__ = 'Mahmoud Hashemi'\n__version__ = '21.0.0'\n__contact__ = 'mahmoud@hatnote.com'\n__url__ = 'https:\/\/github.com\/mahmoud\/boltons'\n__license__ = 'BSD'\n\n\nsetup(name='boltons',\nversion=__version__,\ndescription=\"When they're not builtins, they're boltons.\",\nlong_description=__doc__,\nauthor=__author__,\nauthor_email=__contact__,\nurl=__url__,\npackages=['boltons'],\ninclude_package_data=True,\nzip_safe=False,\nlicense=__license__,\nplatforms='any',\nclassifiers=[\n# See: https:\/\/pypi.python.org\/pypi?:action=list_classifiers\n'Topic :: Utilities',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Topic :: Software Development :: Libraries',\n'Development Status :: 5 - Production\/Stable',\n'Operating System :: OS Independent',\n# List of python versions and their support status:\n# https:\/\/en.wikipedia.org\/wiki\/CPython#Version_history\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy', ]\n)\n\n\"\"\"\nA brief checklist for release:\n\n* tox\n* git commit (if applicable)\n* Bump setup.py version off of -dev\n* git commit -a -m \"bump version for x.y.z release\"\n* python setup.py sdist bdist_wheel upload\n* bump docs\/conf.py version\n* git commit\n* git tag -a x.y.z -m \"brief summary\"\n* write CHANGELOG\n* git commit\n* bump setup.py version onto n+1 dev\n* git commit\n* git push\n\n\"\"\"\n"
    },
    {
        "package_name": "botocore-stubs-1.27.51",
        "file_list": "args.pyi auth.pyi awsrequest.pyi client.pyi compat.pyi config.pyi configloader.pyi configprovider.pyi credentials.pyi auth.pyi __init__.pyi discovery.pyi endpoint.pyi errorfactory.pyi eventstream.pyi exceptions.pyi handlers.pyi history.pyi hooks.pyi httpchecksum.pyi httpsession.pyi loaders.pyi model.pyi monitoring.pyi paginate.pyi parsers.pyi py.typed regions.pyi response.pyi adaptive.pyi base.pyi bucket.pyi quota.pyi special.pyi standard.pyi throttling.pyi __init__.pyi retryhandler.pyi serialize.pyi session.pyi signers.pyi stub.pyi translate.pyi utils.pyi validate.pyi waiter.pyi __init__.pyi LICENSE PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['botocore-stubs']\n\npackage_data = \\\n{'': ['*'], 'botocore-stubs': ['crt\/*', 'retries\/*']}\n\ninstall_requires = \\\n['types-awscrt']\n\nsetup_kwargs = {\n'name': 'botocore-stubs',\n'version': '1.27.51',\n'description': 'Type annotations and code completion for botocore',\n'long_description': '# botocore-stubs\\n\\n[![PyPI - botocore-stubs](https:\/\/img.shields.io\/pypi\/v\/botocore-stubs.svg?color=blue)](https:\/\/pypi.org\/project\/botocore-stubs)\\n[![PyPI - Python Version](https:\/\/img.shields.io\/pypi\/pyversions\/botocore-stubs.svg?color=blue)](https:\/\/pypi.org\/project\/botocore-stubs)\\n[![PyPI - Downloads](https:\/\/img.shields.io\/pypi\/dm\/botocore-stubs?color=blue)](https:\/\/pypistats.org\/packages\/botocore-stubs)\\n\\n![boto3.typed](https:\/\/github.com\/youtype\/mypy_boto3_builder\/raw\/main\/logo.png)\\n\\nType annotations and code completion for [botocore](https:\/\/pypi.org\/project\/botocore\/) package.\\nThis package is a part of [mypy_boto3_builder](https:\/\/github.com\/youtype\/mypy_boto3_builder) project.\\n\\n## Installation\\n\\n```bash\\npython -m pip install botocore-stubs\\n```\\n\\n## Usage\\n\\nUse [mypy](https:\/\/github.com\/python\/mypy) or [pyright](https:\/\/github.com\/microsoft\/pyright) for type checking.\\n\\n### Latest changes\\n\\nFull changelog can be found in [Releases](https:\/\/github.com\/youtype\/botocore-stubs\/releases).\\n\\n## Versioning\\n\\n`botocore-stubs` version is the same as related `botocore` version and follows\\n[PEP 440](https:\/\/www.python.org\/dev\/peps\/pep-0440\/) format.\\n\\n## Support and contributing\\n\\nPlease reports any bugs or request new features in\\n[botocore-stubs](https:\/\/github.com\/youtype\/botocore-stubs\/issues\/) repository.\\n',\n'author': 'Vlad Emelianov',\n'author_email': 'vlad.emelianov.nz@gmail.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/youtype.github.io\/mypy_boto3_builder\/',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "brotlicffi-1.0.9.2",
        "file_list": "HISTORY.rst constants.c constants.h context.c context.h dictionary.c dictionary.h platform.c platform.h transform.c transform.h version.h bit_reader.c bit_reader.h decode.c huffman.c huffman.h prefix.h state.c state.h backward_references.c backward_references.h backward_references_hq.c backward_references_hq.h backward_references_inc.h bit_cost.c bit_cost.h bit_cost_inc.h block_encoder_inc.h block_splitter.c block_splitter.h block_splitter_inc.h brotli_bit_stream.c brotli_bit_stream.h cluster.c cluster.h cluster_inc.h command.c command.h compress_fragment.c compress_fragment.h compress_fragment_two_pass.c compress_fragment_two_pass.h dictionary_hash.c dictionary_hash.h encode.c encoder_dict.c encoder_dict.h entropy_encode.c entropy_encode.h entropy_encode_static.h fast_log.c fast_log.h find_match_length.h hash.h hash_composite_inc.h hash_forgetful_chain_inc.h hash_longest_match64_inc.h hash_longest_match_inc.h hash_longest_match_quickly_inc.h hash_rolling_inc.h hash_to_binary_tree_inc.h histogram.c histogram.h histogram_inc.h literal_cost.c literal_cost.h memory.c memory.h metablock.c metablock.h metablock_inc.h params.h prefix.h quality.h ringbuffer.h static_dict.c static_dict.h static_dict_lut.h utf8_util.c utf8_util.h write_bits.h decode.h encode.h port.h types.h LICENSE LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py _api.py _build.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt conftest.py test_compatibility.py test_simple_compression.py test_simple_decompression.py",
        "setup.py": "#!\/usr\/bin\/env python\nimport os\nimport re\nimport platform\nimport sys\nfrom setuptools import find_packages, setup\nfrom setuptools.command.build_ext import build_ext\n\nbase_dir = os.path.dirname(os.path.abspath(__file__))\nlong_description = (\nopen(\"README.rst\").read() + '\\n\\n' + open(\"HISTORY.rst\").read()\n)\n\nwith open(os.path.join(base_dir, \"src\", \"brotlicffi\", \"__init__.py\")) as f:\n__version__ = re.search(r\"__version__ = \\\"([^\\\"]+)\\\"\", f.read()).group(1)\n\n\nclass BuildClibBeforeExt(build_ext):\n\"\"\" Setuptools `develop` command (used by `pip install -e .`) only calls\n`build_ext`, unlike `install` which calls `build` and all its related\nsub-commands. Linking the CFFI extension with the libbrotli static library\nfails since the `build_clib` command is not called in the former case.\n\nThis custom `build_ext` class ensures that `build_clib` command is run\nbefore the CFFI extension module is compiled.\n\nhttps:\/\/github.com\/pypa\/pip\/issues\/4523\n\"\"\"\n\ndef get_source_files(self):\nfilenames = build_ext.get_source_files(self)\nfilenames.extend(depends)\nreturn filenames\n\ndef run(self):\nself.run_command(\"build_clib\")\nbuild_ext.run(self)\n\n\ndepends = []\nlibraries = []\nUSE_SHARED_BROTLI = os.environ.get(\"USE_SHARED_BROTLI\")\nif USE_SHARED_BROTLI != \"1\":\nsources = []\n\nfor root, _, filenames in os.walk(\"libbrotli\/c\"):\nroot_parts = os.path.split(root)\nif \"fuzz\" in root_parts or \"tools\" in root_parts:\ncontinue\nfor filename in filenames:\nrelpath = os.path.relpath(os.path.join(root, filename), base_dir)\nif filename.endswith(\".h\"):\ndepends.append(relpath)\nelif filename.endswith(\".c\"):\nsources.append(relpath)\n\nlibraries = [\n(\"libbrotli\", {\n\"include_dirs\": [\n\"libbrotli\/c\/include\",\n\"libbrotli\/c\/common\",\n\"libbrotli\/c\",\n\"src\/brotlicffi\"\n],\n\"depends\": depends,\n\"sources\": sources,\n}),\n]\n\ncmdclass = {'build_ext': BuildClibBeforeExt}\nif sys.version_info > (3,) and platform.python_implementation() == \"CPython\":\ntry:\nimport wheel.bdist_wheel\nexcept ImportError:\npass\nelse:\nclass BDistWheel(wheel.bdist_wheel.bdist_wheel):\ndef finalize_options(self):\nself.py_limited_api = \"cp3{}\".format(sys.version_info[1])\nwheel.bdist_wheel.bdist_wheel.finalize_options(self)\ncmdclass['bdist_wheel'] = BDistWheel\n\nsetup(\nname=\"brotlicffi\",\nversion=__version__,\n\ndescription=\"Python CFFI bindings to the Brotli library\",\nlong_description=long_description,\nurl=\"https:\/\/github.com\/python-hyper\/brotlicffi\",\nlicense=\"MIT\",\n\nauthor=\"Cory Benfield\",\nauthor_email=\"cory@lukasa.co.uk\",\n\nsetup_requires=[\n\"cffi>=1.0.0\",\n],\ninstall_requires=[\n\"cffi>=1.0.0\",\n\"enum34;python_version<'3.4'\",\n],\ncffi_modules=[\"src\/brotlicffi\/_build.py:ffi\"],\npackages=find_packages('src'),\npackage_dir={'': 'src'},\next_package=\"brotlicffi\",\nlibraries=libraries,\n\nzip_safe=False,\n\ncmdclass=cmdclass,\n\nclassifiers=[\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n]\n)\n"
    },
    {
        "package_name": "bytecode-0.13.0",
        "file_list": "bytecode.py cfg.py concrete.py flags.py instr.py peephole_opt.py long_lines_example.py test_bytecode.py test_cfg.py test_code.py test_concrete.py test_flags.py test_instr.py test_misc.py test_peephole_opt.py util_annotation.py __init__.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt COPYING api.rst byteplay_codetransformer.rst cfg.rst changelog.rst conf.py index.rst make.bat Makefile peephole.rst todo.rst usage.rst MANIFEST.in PKG-INFO README.rst setup.cfg setup.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python3\n\n# Prepare a release:\n#\n# - git pull --rebase\n# - update version in setup.py, bytecode\/__init__.py and doc\/conf.py\n# - run tests: tox\n# - set release date in the changelog\n# - git commit -a\n# - git push\n# - check GHA CI status:\n# https:\/\/github.com\/MatthieuDartiailh\/bytecode\/actions\n#\n# Release a new version:\n#\n# - git tag VERSION\n# - git push --tags\n# - rm -rf dist\/\n# - python3 setup.py sdist bdist_wheel\n# - twine upload dist\/*\n#\n# After the release:\n#\n# - set version to n+1\n# - git commit -a -m \"post-release\"\n# - git push\n\nVERSION = \"0.13.0\"\n\nDESCRIPTION = \"Python module to generate and modify bytecode\"\nCLASSIFIERS = [\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Natural Language :: English\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n]\n\n# put most of the code inside main() to be able to import setup.py in\n# test_bytecode.py, to ensure that VERSION is the same than\n# bytecode.__version__.\n\n\ndef main():\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\nwith open(\"README.rst\") as fp:\nlong_description = fp.read().strip()\n\noptions = {\n\"name\": \"bytecode\",\n\"version\": VERSION,\n\"license\": \"MIT license\",\n\"description\": DESCRIPTION,\n\"long_description\": long_description,\n\"url\": \"https:\/\/github.com\/MatthieuDartiailh\/bytecode\",\n\"author\": \"Victor Stinner\",\n\"author_email\": \"victor.stinner@gmail.com\",\n\"maintainer\": \"Matthieu C. Dartiailh\",\n\"maintainer_email\": \"m.dartiailh@gmail.com\",\n\"classifiers\": CLASSIFIERS,\n\"packages\": [\"bytecode\", \"bytecode.tests\"],\n\"python_requires\": \">=3.6\",\n}\nsetup(**options)\n\n\nif __name__ == \"__main__\":\nmain()\n"
    },
    {
        "package_name": "cachepath-1.1.1",
        "file_list": "AUTHORS.rst __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe CONTRIBUTING.rst cachepath.rst conf.py contributing.rst history.rst index.rst make.bat Makefile tests.rst usage.rst HISTORY.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_cachepath.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"The setup script.\"\"\"\n\nfrom setuptools import setup, find_packages\n\nwith open('README.rst') as readme_file:\nreadme = readme_file.read()\n\nwith open('HISTORY.rst') as history_file:\nhistory = history_file.read()\n\nimport sys\nrequirements = [\"pathlib2\"] if sys.version_info[0] == 2 else []\n\nsetup_requirements = ['pytest-runner', ]\n\ntest_requirements = ['pytest', ]\n\nsetup(\nauthor=\"Hayden Flinner\",\nauthor_email='hayden@flinner.me',\nclassifiers=[\n'Development Status :: 2 - Pre-Alpha',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n\"Programming Language :: Python :: 2\",\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n],\ndescription=\"Pythonic parameterized cache paths.\",\ninstall_requires=requirements,\nlicense=\"MIT license\",\nlong_description=readme + '\\n\\n' + history,\nlong_description_type='txt\/x-rst',\ninclude_package_data=True,\nkeywords=['cachepath', 'paths', 'pathlib', 'cache', 'temp'],\nname='cachepath',\npackages=find_packages(include=['cachepath']),\nsetup_requires=setup_requirements,\ntest_suite='tests',\ntests_require=test_requirements,\nurl='https:\/\/github.com\/haydenflinner\/cachepath',\nversion='1.1.1',\nzip_safe=True,\n)\n"
    },
    {
        "package_name": "caio-0.9.8",
        "file_list": "abstract.py asyncio_base.py linux_aio.c linux_aio.pyi linux_aio_asyncio.py py.typed python_aio.py python_aio_asyncio.py README.md threadpool.c threadpool.h thread_aio.c thread_aio.pyi thread_aio_asyncio.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "import os\nimport platform\nfrom importlib.machinery import SourceFileLoader\n\nfrom setuptools import Extension, setup\n\n\nmodule_name = \"caio\"\nmodule = SourceFileLoader(\n\"version\", os.path.join(module_name, \"version.py\"),\n).load_module()\n\n\nOS_NAME = platform.system().lower()\nextensions = []\n\n\nif \"darwin\" in OS_NAME or \"linux\" in OS_NAME:\nextensions.append(\nExtension(\n\"{}.thread_aio\".format(module_name),\n[\n\"{}\/thread_aio.c\".format(module_name),\n\"{}\/src\/threadpool\/threadpool.c\".format(module_name),\n],\nextra_compile_args=[\"-g\"],\n),\n)\nif \"linux\" in OS_NAME:\nextensions.append(\nExtension(\n\"{}.linux_aio\".format(module_name),\n[\"{}\/linux_aio.c\".format(module_name)],\nextra_compile_args=[\"-g\"],\n),\n)\n\n\nsetup(\nname=module_name,\nversion=module.__version__,\next_modules=extensions,\ninclude_package_data=True,\ndescription=module.package_info,\nlong_description=open(\"README.rst\").read(),\nlicense=module.package_license,\nauthor=module.__author__,\nauthor_email=module.team_email,\npackage_data={\nmodule_name: [\n\"{}\/linux_aio.pyi\".format(module_name),\n\"{}\/thread_aio.pyi\".format(module_name),\n\"py.typed\",\n],\n},\nproject_urls={\n\"Documentation\": \"https:\/\/github.com\/mosquito\/caio\/\",\n\"Source\": \"https:\/\/github.com\/mosquito\/caio\",\n},\npackages=[module_name],\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Topic :: Software Development\",\n\"Topic :: Software Development :: Libraries\",\n\"Intended Audience :: Developers\",\n\"Natural Language :: English\",\n\"Operating System :: MacOS\",\n\"Operating System :: POSIX\",\n\"Operating System :: Microsoft\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n],\npython_requires=\">=3.5, <4\",\nextras_require={\n\"develop\": [\n\"aiomisc\",\n\"pytest\",\n\"pytest-cov\",\n],\n},\n)\n"
    },
    {
        "package_name": "cchardet-2.1.7",
        "file_list": "cchardetect CHANGES.rst COPYING MANIFEST.in PKG-INFO README.rst requirements-dev.txt setup.cfg setup.py version.py _cchardet.cpp _cchardet.pyx __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt .git .gitignore AUTHORS uchardet.cpp project.pbxproj contents.xcworkspac uchard uchardet-ios.xcs uchardet.xcschem CMakeLists.txt COPYING CMakeLists.txt README.maintainer uchardet.1 INSTALL README.md BuildLangModel.py LangArabicModel.log LangCroatianModel.log LangCzechModel.log LangDanishModel.log LangEsperantoModel.log LangEstonianModel.log LangFinnishModel.log LangFrenchModel.log LangGermanModel.log LangGreekModel.log LangHungarianModel.log LangIrishModel.log LangItalianModel.log LangLatvianModel.log LangLithuanianModel.log LangMalteseModel.log LangPolishModel.log LangPortugueseModel.log LangRomanianModel.log LangSlovakModel.log LangSloveneModel.log LangSpanishModel.log LangSwedishModel.log LangThaiModel.log LangTurkishModel.log LangVietnameseModel.log codepoints.py db.py ibm852.py iso-8859-1.py iso-8859-10.py iso-8859-11.py iso-8859-13.py iso-8859-15.py iso-8859-16.py iso-8859-2.py iso-8859-3.py iso-8859-4.py iso-8859-6.py iso-8859-7.py iso-8859-9.py mac-centraleurope.py tis-620.py viscii.py windows-1250.py windows-1252.py windows-1253.py windows-1256.py windows-1257.py windows-1258.py debug.sh gen.sh header-template.cpp ar.py cs.py da.py de.py el.py eo.py es.py et.py fi.py fr.py ga.py hr.py hu.py it.py lt.py lv.py mt.py pl.py pt.py ro.py sk.py sl.py sv.py th.py tr.py vi.py README release.sh requirements.txt win32.sh Big5Freq.tab CharDistribution.cpp CharDistribution.h CMakeLists.txt EUCKRFreq.tab EUCTWFreq.tab CMakeLists.txt uchardet_fuzzer.cpp GB2312Freq.tab JISFreq.tab JpCntx.cpp JpCntx.h LangArabicModel.cpp LangBulgarianModel.cpp LangCroatianModel.cpp LangCzechModel.cpp LangDanishModel.cpp LangEsperantoModel.cpp LangEstonianModel.cpp LangFinnishModel.cpp LangFrenchModel.cpp LangGermanModel.cpp LangGreekModel.cpp LangHebrewModel.cpp LangHungarianModel.cpp LangIrishModel.cpp LangItalianModel.cpp LangLatvianModel.cpp LangLithuanianModel.cpp LangMalteseModel.cpp LangPolishModel.cpp LangPortugueseModel.cpp LangRomanianModel.cpp LangRussianModel.cpp LangSlovakModel.cpp LangSloveneModel.cpp LangSpanishModel.cpp LangSwedishModel.cpp LangThaiModel.cpp LangTurkishModel.cpp LangVietnameseModel.cpp nsBig5Prober.cpp nsBig5Prober.h nsCharSetProber.cpp nsCharSetProber.h nsCodingStateMachine.h nscore.h nsEscCharsetProber.cpp nsEscCharsetProber.h nsEscSM.cpp nsEUCJPProber.cpp nsEUCJPProber.h nsEUCKRProber.cpp nsEUCKRProber.h nsEUCTWProber.cpp nsEUCTWProber.h nsGB2312Prober.cpp nsGB2312Prober.h nsHebrewProber.cpp nsHebrewProber.h nsLatin1Prober.cpp nsLatin1Prober.h nsMBCSGroupProber.cpp nsMBCSGroupProber.h nsMBCSSM.cpp nsPkgInt.h nsSBCharSetProber.cpp nsSBCharSetProber.h nsSBCSGroupProber.cpp nsSBCSGroupProber.h nsSJISProber.cpp nsSJISProber.h nsUniversalDetector.cpp nsUniversalDetector.h nsUTF8Prober.cpp nsUTF8Prober.h prmem.h symbols.cmake CMakeLists.txt uchardet.cpp uchardet.cpp uchardet.h iso-8859-6.txt utf-8.txt windows-1256.txt windows-1251.txt CMakeLists.txt ibm852.txt iso-8859-2.txt maccentraleurope.txt utf-8.txt windows-1250.txt iso-8859-1.txt iso-8859-15.txt utf-8.txt windows-1252.txt iso-8859-1.txt windows-1252.txt iso-8859-7.txt utf-8.txt windows-1253.txt ascii.txt iso-8859-3.txt iso-8859-1.txt iso-8859-15.txt utf-8.txt windows-1252.txt iso-8859-13.txt iso-8859-15.txt iso-8859-4.txt utf-8.txt windows-1252.txt windows-1257.txt iso-8859-1.txt utf-8.txt iso-8859-1.txt iso-8859-15.txt utf-16.be utf-32.le utf-8.txt windows-1252.txt iso-8859-1.txt utf-8.txt windows-1252.txt iso-8859-8.txt utf-8.txt windows-1255.txt ibm852.txt iso-8859-13.txt iso-8859-16.txt iso-8859-2.txt maccentraleurope.txt utf-8.txt windows-1250.txt iso-8859-2.txt windows-1250.txt iso-8859-1.txt utf-8.txt euc-jp.txt iso-2022-jp.txt shift_jis.txt utf-16be.txt utf-16le.txt utf-8.txt iso-2022-kr.txt uhc.smi utf-16.le utf-32.be utf-8.txt iso-8859-10.txt iso-8859-13.txt iso-8859-4.txt utf-8.txt iso-8859-10.txt iso-8859-13.txt iso-8859-4.txt utf-8.txt iso-8859-3.txt utf-8.txt ibm852.txt iso-8859-13.txt iso-8859-16.txt iso-8859-2.txt maccentraleurope.txt utf-8.txt windows-1250.txt iso-8859-1.txt utf-8.txt ibm852.txt iso-8859-16.txt utf-8.txt windows-1250.txt ibm855.txt ibm866.txt iso-8859-5.txt koi8-r.txt maccyrillic.txt windows-1251.txt ibm852.txt iso-8859-2.txt maccentraleurope.txt utf-8.txt windows-1250.txt ibm852.txt iso-8859-16.txt iso-8859-2.txt maccentraleurope.txt utf-8.txt windows-1250.txt iso-8859-1.txt utf-8.txt windows-1252.txt iso-8859-11.txt tis-620.txt utf-8.txt iso-8859-3.txt iso-8859-9.txt uchardet-tests.c utf-8.txt viscii.txt windows-1258.txt big5.txt euc-tw.txt gb18030.txt utf-8.txt uchardet.doap uchardet.pc.in bench.py github_issue_26_expected_windows_1252_got_ maccentraleurope.txt iso8859-2.csv wikipediaJa_Japan_SJIS.txt wikipediaJa_One_Thousand_and_One_Nights_SJIS.txt wikipediaTw_Japan_GB2312.txt wikipediaTw_One_Thousand_and_One_Nights_GB2312.txt test.py iso-8859-6.txt utf-8.txt windows-1256.txt windows-1251.txt ibm852.txt iso-8859-2.txt maccentraleurope.txt utf-8.txt windows-1250.txt iso-8859-1.txt iso-8859-15.txt utf-8.txt windows-1252.txt iso-8859-1.txt windows-1252.txt iso-8859-7.txt utf-8.txt windows-1253.txt ascii.txt iso-8859-3.txt iso-8859-1.txt iso-8859-15.txt utf-8.txt windows-1252.txt iso-8859-13.txt iso-8859-15.txt iso-8859-4.txt utf-8.txt windows-1252.txt windows-1257.txt iso-8859-1.txt utf-8.txt iso-8859-1.txt iso-8859-15.txt utf-16.be utf-32.le utf-8.txt windows-1252.txt iso-8859-1.txt utf-8.txt windows-1252.txt iso-8859-8.txt utf-8.txt windows-1255.txt ibm852.txt iso-8859-13.txt iso-8859-16.txt iso-8859-2.txt maccentraleurope.txt utf-8.txt windows-1250.txt iso-8859-2.txt windows-1250.txt iso-8859-1.txt utf-8.txt euc-jp.txt iso-2022-jp.txt shift_jis.txt utf-16be.txt utf-16le.txt utf-8.txt iso-2022-kr.txt uhc.smi utf-16.le utf-32.be utf-8.txt iso-8859-10.txt iso-8859-13.txt iso-8859-4.txt utf-8.txt iso-8859-10.txt iso-8859-13.txt iso-8859-4.txt utf-8.txt iso-8859-3.txt utf-8.txt ibm852.txt iso-8859-13.txt iso-8859-16.txt iso-8859-2.txt maccentraleurope.txt utf-8.txt windows-1250.txt iso-8859-1.txt utf-8.txt ibm852.txt iso-8859-16.txt utf-8.txt windows-1250.txt ibm855.txt ibm866.txt iso-8859-5.txt koi8-r.txt maccyrillic.txt windows-1251.txt ibm852.txt iso-8859-2.txt maccentraleurope.txt utf-8.txt windows-1250.txt ibm852.txt iso-8859-16.txt iso-8859-2.txt maccentraleurope.txt utf-8.txt windows-1250.txt iso-8859-1.txt utf-8.txt windows-1252.txt iso-8859-11.txt tis-620.txt utf-8.txt iso-8859-3.txt iso-8859-9.txt utf-8.txt viscii.txt windows-1258.txt big5.txt euc-tw.txt gb18030.txt utf-8.txt",
        "setup.py": "#!\/usr\/bin\/env python\n# coding: utf-8\n\nimport os\nimport sys\nimport glob\nimport codecs\nimport re\nfrom distutils.command.build_ext import build_ext\nfrom distutils import sysconfig\n\ntry:\nfrom setuptools import setup, Extension\nexcept ImportError:\nfrom distutils.core import setup, Extension\n\nhave_cython = True\ntry:\nimport Cython.Compiler.Main as cython_compiler\nexcept ImportError:\nhave_cython = False\n\ncchardet_dir = 'src\/cchardet\/'\nuchardet_dir = 'src\/ext\/uchardet\/src'\n\nif have_cython:\npyx_sources = glob.glob(cchardet_dir + '*.pyx')\nsys.stderr.write('cythonize: %r\\n' % (pyx_sources,))\ncython_compiler.compile(\npyx_sources, options=cython_compiler.CompilationOptions(cplus=True, compiler_directives={\"language_level\": 3}))\n\ncchardet_sources = glob.glob(cchardet_dir + '*.cpp')\nsources = cchardet_sources\n\nuchardet_sources = [\nos.path.join(uchardet_dir, 'CharDistribution.cpp'),\nos.path.join(uchardet_dir, 'JpCntx.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangArabicModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangBulgarianModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangCroatianModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangCzechModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangEsperantoModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangEstonianModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangFinnishModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangFrenchModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangDanishModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangGermanModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangGreekModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangHungarianModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangHebrewModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangIrishModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangItalianModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangLithuanianModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangLatvianModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangMalteseModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangPolishModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangPortugueseModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangRomanianModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangRussianModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangSlovakModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangSloveneModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangSwedishModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangSpanishModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangThaiModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangTurkishModel.cpp'),\nos.path.join(uchardet_dir, 'LangModels\/LangVietnameseModel.cpp'),\nos.path.join(uchardet_dir, 'nsHebrewProber.cpp'),\nos.path.join(uchardet_dir, 'nsCharSetProber.cpp'),\nos.path.join(uchardet_dir, 'nsBig5Prober.cpp'),\nos.path.join(uchardet_dir, 'nsEUCJPProber.cpp'),\nos.path.join(uchardet_dir, 'nsEUCKRProber.cpp'),\nos.path.join(uchardet_dir, 'nsEUCTWProber.cpp'),\nos.path.join(uchardet_dir, 'nsEscCharsetProber.cpp'),\nos.path.join(uchardet_dir, 'nsEscSM.cpp'),\nos.path.join(uchardet_dir, 'nsGB2312Prober.cpp'),\nos.path.join(uchardet_dir, 'nsMBCSGroupProber.cpp'),\nos.path.join(uchardet_dir, 'nsMBCSSM.cpp'),\nos.path.join(uchardet_dir, 'nsSBCSGroupProber.cpp'),\nos.path.join(uchardet_dir, 'nsSBCharSetProber.cpp'),\nos.path.join(uchardet_dir, 'nsSJISProber.cpp'),\nos.path.join(uchardet_dir, 'nsUTF8Prober.cpp'),\nos.path.join(uchardet_dir, 'nsLatin1Prober.cpp'),\nos.path.join(uchardet_dir, 'nsUniversalDetector.cpp'),\nos.path.join(uchardet_dir, 'uchardet.cpp')\n]\nsources += uchardet_sources\n\n# Remove the \"-Wstrict-prototypes\" compiler option, which isn't valid for C++.\ncfg_vars = sysconfig.get_config_vars()\nfor key, value in cfg_vars.items():\nif type(value) == str:\ncfg_vars[key] = value.replace(\"-Wstrict-prototypes\", \"\")\n# O3\u3092\u6307\u5b9a\u3057\u305f\u3068\u3053\u308d\u3067\u901f\u5ea6\u304c\u5411\u4e0a\u3059\u308b\u304b\u306f\u7591\u554f\u3067\u3042\u308b\n# cfg_vars[key] = value.replace(\"-O2\", \"-O3\")\n\ncchardet_module = Extension(\n'cchardet._cchardet',\nsources=sources,\ninclude_dirs=[uchardet_dir],\nlanguage='c++',\n)\n\n\ndef read(f):\nreturn open(os.path.join(os.path.dirname(__file__), f)).read().strip()\n\n\nwith codecs.open(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'src', 'cchardet', 'version.py'), 'r', 'latin1') as fp:\ntry:\nversion = re.findall(\nr\"^__version__ = '([^']+)'\\r?$\", fp.read(), re.M)[0]\nexcept IndexError:\nraise RuntimeError('Unable to determine version.')\n\nsetup(\nname='cchardet',\nauthor='PyYoshi',\nauthor_email='myoshi321go@gmail.com',\nurl=r'https:\/\/github.com\/PyYoshi\/cChardet',\ndescription='cChardet is high speed universal character encoding detector.',\nlong_description='\\n\\n'.join((read('README.rst'), read('CHANGES.rst'))),\nversion=version,\nlicense='Mozilla Public License',\nclassifiers=[\n'License :: OSI Approved :: Mozilla Public License 1.1 (MPL 1.1)',\n'License :: OSI Approved :: GNU General Public License (GPL)',\n'License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)',\n'Programming Language :: Cython',\n'Programming Language :: Python',\n'Topic :: Software Development :: Libraries',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n],\nkeywords=[\n'cython',\n'chardet',\n'charsetdetect'\n],\ncmdclass={'build_ext': build_ext},\npackage_dir={'': 'src'},\npackages=['cchardet', ],\nscripts=['bin\/cchardetect'],\next_modules=[\ncchardet_module\n],\n)\n"
    },
    {
        "package_name": "cfscrape-2.1.1",
        "file_list": "user_agents.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import os\nimport re\nfrom setuptools import setup\n\nbase_path = os.path.dirname(__file__)\n\n\ndef get_long_description():\nreadme_md = os.path.join(base_path, \"README.md\")\nwith open(readme_md) as f:\nreturn f.read()\n\n\nwith open(os.path.join(base_path, \"cfscrape\", \"__init__.py\")) as f:\nVERSION = re.compile(r'.*__version__ = \"(.*?)\"', re.S).match(f.read()).group(1)\n\nsetup(\nname=\"cfscrape\",\npackages=[\"cfscrape\"],\nversion=VERSION,\ndescription='A simple Python module to bypass Cloudflare\\'s anti-bot page. See https:\/\/github.com\/Anorov\/cloudflare-scrape for more information.',\nlong_description=get_long_description(),\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Anorov\",\nauthor_email=\"anorov.vorona@gmail.com\",\nurl=\"https:\/\/github.com\/Anorov\/cloudflare-scrape\",\nkeywords=[\"cloudflare\", \"scraping\"],\ninclude_package_data=True,\ninstall_requires=[\"requests >= 2.6.1\"],\n)\n"
    },
    {
        "package_name": "chart-studio-1.1.0",
        "file_list": "utils.py dashboards.py dash_apps.py files.py folders.py grids.py images.py plots.py plot_schema.py spectacle_presentations.py users.py utils.py __init__.py __init__.py config.py dashboard_objs.py __init__.py exceptions.py files.py grid_objs.py __init__.py chunked_request.py __init__.py plotly.py __init__.py presentation_objs.py __init__.py session.py tools.py utils.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup\nimport os\n\n\ndef readme():\nparent_dir = os.path.dirname(os.path.realpath(__file__))\nwith open(os.path.join(parent_dir, \"README.md\")) as f:\nreturn f.read()\n\n\nsetup(\nname=\"chart-studio\",\nversion=\"1.1.0\",\nauthor=\"Chris P\",\nauthor_email=\"chris@plot.ly\",\nmaintainer=\"Jon Mease\",\nmaintainer_email=\"jon@plot.ly\",\nurl=\"https:\/\/plot.ly\/python\/\",\nproject_urls={\"Github\": \"https:\/\/github.com\/plotly\/plotly.py\"},\ndescription=\"Utilities for interfacing with plotly's Chart Studio\",\nlong_description=readme(),\nlong_description_content_type=\"text\/markdown\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Topic :: Scientific\/Engineering :: Visualization\",\n],\nlicense=\"MIT\",\npackages=[\n\"chart_studio\",\n\"chart_studio.api\",\n\"chart_studio.api.v2\",\n\"chart_studio.dashboard_objs\",\n\"chart_studio.grid_objs\",\n\"chart_studio.plotly\",\n\"chart_studio.plotly.chunked_requests\",\n\"chart_studio.presentation_objs\",\n],\ninstall_requires=[\"plotly\", \"requests\", \"retrying>=1.3.3\", \"six\"],\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "check-manifest-0.48",
        "file_list": ".coveragerc .gitignore .pre-commit-hooks.yaml appveyor.yml CHANGES.rst dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt check_manifest.py LICENSE.rst Makefile MANIFEST.in PKG-INFO README.rst release.mk setup.cfg setup.py tests.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\nimport ast\nimport email.utils\nimport os\nimport re\n\nfrom setuptools import setup\n\n\nhere = os.path.dirname(__file__)\n\nwith open(os.path.join(here, 'README.rst')) as readme:\nwith open(os.path.join(here, 'CHANGES.rst')) as changelog:\nlong_description = readme.read() + '\\n\\n' + changelog.read()\n\nmetadata = {}\nwith open(os.path.join(here, 'check_manifest.py')) as f:\nrx = re.compile('(__version__|__author__|__url__|__licence__) = (.*)')\nfor line in f:\nm = rx.match(line)\nif m:\nmetadata[m.group(1)] = ast.literal_eval(m.group(2))\nversion = metadata['__version__']\nauthor, author_email = email.utils.parseaddr(metadata['__author__'])\nurl = metadata['__url__']\nlicence = metadata['__licence__']\n\nsetup(\nname='check-manifest',\nversion=version,\nauthor=author,\nauthor_email=author_email,\nurl=url,\ndescription='Check MANIFEST.in in a Python source package for completeness',\nlong_description=long_description,\nlong_description_content_type='text\/x-rst',\nkeywords=['distutils', 'setuptools', 'packaging', 'manifest', 'checker',\n'linter'],\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3 :: Only',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n],\nlicense=licence,\n\npy_modules=['check_manifest'],\nzip_safe=False,\npython_requires=\">=3.6\",\ninstall_requires=[\n'build>=0.1',\n'setuptools',\n'tomli',\n],\nextras_require={\n'test': [\n'mock >= 3.0.0',\n'pytest',\n],\n},\nentry_points={\n'console_scripts': [\n'check-manifest = check_manifest:main',\n],\n'zest.releaser.prereleaser.before': [\n'check-manifest = check_manifest:zest_releaser_check',\n],\n},\n)\n"
    },
    {
        "package_name": "chromedriver-binary-105.0.5195.19.0",
        "file_list": "utils.py __init__.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup\nfrom setuptools.command.build_py import build_py\nfrom chromedriver_binary.utils import get_chromedriver_filename, get_chromedriver_url, find_binary_in_path, check_version\n\nimport os\nimport zipfile\n\ntry:\nfrom io import BytesIO\nfrom urllib.request import urlopen, URLError\nexcept ImportError:\nfrom StringIO import StringIO as BytesIO\nfrom urllib2 import urlopen, URLError\n\n__author__ = 'Daniel Kaiser <d.kasier@fz-juelich.de>'\n\n\nwith open('README.md') as readme_file:\nlong_description = readme_file.read()\n\n\nclass DownloadChromedriver(build_py):\ndef run(self):\n\"\"\"\nDownloads, unzips and installs chromedriver.\nIf a chromedriver binary is found in PATH it will be copied, otherwise downloaded.\n\"\"\"\nchromedriver_version='105.0.5195.19'\nchromedriver_dir = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'chromedriver_binary')\nchromedriver_filename = find_binary_in_path(get_chromedriver_filename())\nif chromedriver_filename and check_version(chromedriver_filename, chromedriver_version):\nprint(\"\\nChromedriver already installed at {}...\\n\".format(chromedriver_filename))\nnew_filename = os.path.join(chromedriver_dir, get_chromedriver_filename())\nself.copy_file(chromedriver_filename, new_filename)\nelse:\nchromedriver_bin = get_chromedriver_filename()\nchromedriver_filename = os.path.join(chromedriver_dir, chromedriver_bin)\nif not os.path.isfile(chromedriver_filename) or not check_version(chromedriver_filename, chromedriver_version):\nprint(\"\\nDownloading Chromedriver...\\n\")\nif not os.path.isdir(chromedriver_dir):\nos.mkdir(chromedriver_dir)\nurl = get_chromedriver_url(version=chromedriver_version)\ntry:\nresponse = urlopen(url)\nif response.getcode() != 200:\nraise URLError('Not Found')\nexcept URLError:\nraise RuntimeError('Failed to download chromedriver archive: {}'.format(url))\narchive = BytesIO(response.read())\nwith zipfile.ZipFile(archive) as zip_file:\nzip_file.extract(chromedriver_bin, chromedriver_dir)\nelse:\nprint(\"\\nChromedriver already installed at {}...\\n\".format(chromedriver_filename))\nif not os.access(chromedriver_filename, os.X_OK):\nos.chmod(chromedriver_filename, 0o744)\nbuild_py.run(self)\n\n\nsetup(\nname=\"chromedriver-binary\",\nversion=\"105.0.5195.19.0\",\nauthor=\"Daniel Kaiser\",\nauthor_email=\"daniel.kaiser94@gmail.com\",\ndescription=\"Installer for chromedriver.\",\nlicense=\"MIT\",\nkeywords=\"chromedriver chrome browser selenium splinter\",\nurl=\"https:\/\/github.com\/danielkaiser\/python-chromedriver-binary\",\npackages=['chromedriver_binary'],\npackage_data={\n'chromedriver_binary': ['chromedriver*']\n},\nentry_points={\n'console_scripts': ['chromedriver-path=chromedriver_binary.utils:print_chromedriver_path'],\n},\nlong_description_content_type='text\/markdown',\nlong_description=long_description,\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Topic :: Software Development :: Testing\",\n\"Topic :: System :: Installation\/Setup\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"License :: OSI Approved :: MIT License\",\n],\ncmdclass={'build_py': DownloadChromedriver}\n)\n"
    },
    {
        "package_name": "chromedriver-py-105.0.5195.19",
        "file_list": "chromedriver_linux64 chromedriver_mac64 chromedriver_mac64_m1 chromedriver_win32.exe __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt CURRENT_VERSION.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup\n\nCURRENT_VERSION_FILE = \".\/CURRENT_VERSION.txt\"\n\nwith open(\"README.md\") as f:\nlong_description_file = f.read()\n\n\nwith open(CURRENT_VERSION_FILE) as f:\npackage_version = f.read().strip()\n\n\nsetup(\nname=\"chromedriver-py\",\nversion=package_version,\ndescription=\"chromedriver binaries for all platforms\",\nlong_description=long_description_file,\nlong_description_content_type=\"text\/markdown\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python\",\n\"Operating System :: OS Independent\",\n],\nkeywords=\"chromedriver cross-platform binaries binary\",\nurl=\"http:\/\/github.com\/scriptworld-git\/chromedriver-py\",\nauthor=\"Felix Breuer\",\nauthor_email=\"fbreuer@pm.me\",\npackages=[\"chromedriver_py\"],\ninstall_requires=[],\ninclude_package_data=True,\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "circlify-0.15.0",
        "file_list": "dependency_links.txt PKG-INFO SOURCES.txt top_level.txt circlify.py LICENSE PKG-INFO pyproject.toml README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# encoding: utf-8\n\n\"\"\"Packaging script.\"\"\"\n\nimport os\n\nfrom setuptools import setup\n\n__version__ = \"0.15.0\"\nhere = os.path.abspath(os.path.dirname(__file__))\nreadme = open(os.path.join(here, \"README.rst\")).read()\n\nsetup(\nname=\"circlify\",\ndescription=\"Circle packing algorithm for Python\",\nlong_description=readme,\nlong_description_content_type=\"text\/x-rst\",\nversion=__version__,\nauthor=\"Elmotec\",\nauthor_email=\"elmotec@gmx.com\",\nlicense=\"MIT\",\nkeywords=\"circle packing enclosure hierarchy graph display visualization\",\nurl=\"http:\/\/github.com\/elmotec\/circlify\",\npy_modules=[\"circlify\"],\ntest_suite=\"tests\",\nsetup_requires=[],\ntests_require=[],\npython_requires=\">=3.5\",\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Operating System :: OS Independent\",\n\"License :: OSI Approved :: MIT License\",\n\"Natural Language :: English\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Software Development\",\n\"Topic :: Utilities\",\n\"Topic :: Scientific\/Engineering :: Visualization\",\n\"Intended Audience :: Developers\",\n],\n)\n"
    },
    {
        "package_name": "circuitbreaker-1.4.0",
        "file_list": "dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt circuitbreaker.py LICENSE.rst MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_functional.py test_unit.py",
        "setup.py": "\"\"\"\nPython Circuit Breaker\n\"\"\"\nfrom setuptools import setup\n\n\ndef readme():\nwith open('README.rst') as f:\nreturn f.read()\n\n\ndependencies = [\"typing; python_version < '3.5'\", \"monotonic; python_version < '3.0'\"]\n\nsetup(\nname='circuitbreaker',\nversion='1.4.0',\nurl='https:\/\/github.com\/fabfuel\/circuitbreaker',\ndownload_url='https:\/\/github.com\/fabfuel\/circuitbreaker\/archive\/1.3.1.tar.gz',\nlicense='BSD-3-Clause',\nauthor='Fabian Fuelling',\nauthor_email='pypi@fabfuel.de',\ndescription='Python Circuit Breaker pattern implementation',\nlong_description=readme(),\npy_modules=['circuitbreaker'],\ninclude_package_data=True,\nzip_safe=False,\nplatforms='any',\ninstall_requires=dependencies,\nclassifiers=[\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: POSIX',\n'Operating System :: MacOS',\n'Operating System :: Unix',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 3',\n]\n)\n"
    },
    {
        "package_name": "ciso8601-2.2.0",
        "file_list": "CHANGELOG.md py.typed __init__.pyi dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in module.c PKG-INFO pyproject.toml README.rst setup.cfg setup.py timezone.c timezone.h",
        "setup.py": "import os\n\nfrom setuptools import setup, Extension\n\n# workaround for open() with encoding='' python2\/3 compatibility\nfrom io import open\n\nwith open(\"README.rst\", encoding=\"utf-8\") as file:\nlong_description = file.read()\n\n# We want to force all warnings to be considered errors. That way we get to catch potential issues during\n# development and at PR review time.\n# But since ciso8601 is a source distribution, exotic compiler configurations can cause spurious warnings that\n# would fail the installation. So we only want to treat warnings as errors during development.\nif os.environ.get(\"STRICT_WARNINGS\", \"0\") == \"1\":\n# We can't use `extra_compile_args`, since the cl.exe (Windows) and gcc compilers don't use the same flags.\n# Further, there is not an easy way to tell which compiler is being used.\n# Instead we rely on each compiler looking at their appropriate environment variable.\n\n# GCC\/Clang\ntry:\n_ = os.environ[\"CFLAGS\"]\nexcept KeyError:\nos.environ[\"CFLAGS\"] = \"\"\nos.environ[\"CFLAGS\"] += \" -Werror\"\n\n# cl.exe\ntry:\n_ = os.environ[\"_CL_\"]\nexcept KeyError:\nos.environ[\"_CL_\"] = \"\"\nos.environ[\"_CL_\"] += \" \/WX\"\n\nVERSION = \"2.2.0\"\nCISO8601_CACHING_ENABLED = int(os.environ.get('CISO8601_CACHING_ENABLED', '1') == '1')\n\nsetup(\nname=\"ciso8601\",\nversion=VERSION,\ndescription=\"Fast ISO8601 date time parser for Python written in C\",\nlong_description=long_description,\nurl=\"https:\/\/github.com\/closeio\/ciso8601\",\nlicense=\"MIT\",\next_modules=[\nExtension(\n\"ciso8601\",\nsources=[\"module.c\", \"timezone.c\"],\ndefine_macros=[\n(\"CISO8601_VERSION\", VERSION),\n(\"CISO8601_CACHING_ENABLED\", CISO8601_CACHING_ENABLED),\n],\n)\n],\npackages=[\"ciso8601\"],\npackage_data={\"ciso8601\": [\"__init__.pyi\", \"py.typed\"]},\ntest_suite=\"tests\",\ntests_require=[\n\"pytz\",\n\"unittest2 ; python_version < '3'\",\n],\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\n)\n"
    },
    {
        "package_name": "clamd-1.0.2",
        "file_list": "CHANGES.rst ez_setup.py MANIFEST.in PKG-INFO README.rst setup.cfg setup.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe",
        "setup.py": "#!\/usr\/bin\/env python\nfrom ez_setup import use_setuptools\nuse_setuptools(\"0.7.0\")\n\nfrom setuptools import setup, find_packages\n\nreadme = open('README.rst').read()\nhistory = open('CHANGES.rst').read().replace('.. :changelog:', '')\n\nsetup(\nname=\"clamd\",\nversion='1.0.2',\nauthor=\"Thomas Grainger\",\nauthor_email=\"python-clamd@graingert.co.uk\",\nmaintainer=\"Thomas Grainger\",\nmaintainer_email = \"python-clamd@graingert.co.uk\",\nkeywords = \"python, clamav, antivirus, scanner, virus, libclamav, clamd\",\ndescription = \"Clamd is a python interface to Clamd (Clamav daemon).\",\nlong_description=readme + '\\n\\n' + history,\nurl=\"https:\/\/github.com\/graingert\/python-clamd\",\npackage_dir={'': 'src'},\npackages=find_packages('src', exclude=\"tests\"),\nclassifiers = [\n\"License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)\",\n],\ntests_require = (\n\"nose==1.3.3\",\n\"six==1.7.3\",\n),\ntest_suite='nose.collector',\nzip_safe=True,\ninclude_package_data=False,\n)\n"
    },
    {
        "package_name": "libclang-14.0.6",
        "file_list": "cindex.py enumerations.py __init__.py __init__.py LICENSE.TXT PKG-INFO cindex.py enumerations.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport os\nfrom setuptools import setup, find_packages\n\n\nwith open(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'README.md'), encoding='utf-8', mode='r') as fp:\nlong_description = fp.read()\n\nsetup(\nname='libclang',\nversion='14.0.6',\ndescription='Clang Python Bindings, mirrored from the official LLVM repo: https:\/\/github.com\/llvm\/llvm-project\/tree\/main\/clang\/bindings\/python, to make the installation process easier.',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nauthor='Tao He',\nauthor_email='sighingnow@gmail.com',\nurl='https:\/\/github.com\/sighingnow\/libclang',\nlicense='Apache License 2.0',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n\"Topic :: Software Development :: Compilers\",\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: POSIX',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: 3.11',\n'Programming Language :: Python :: 3.12',\n\"License :: OSI Approved :: Apache Software License\",\n],\nplatforms='any',\nkeywords='Clang Python Bindings',\n\n\nzip_safe=False,\n\npackage_dir={'': 'python'},\npackages=find_packages('python'),\n\ntest_suite='python\/tests',\n\nproject_urls={\n'Documentation': 'https:\/\/libclang.readthedocs.io',\n'Source': 'https:\/\/github.com\/sighingnow\/libclang',\n'Tracker': 'https:\/\/github.com\/sighingnow\/libclang\/issues',\n},\n)\n"
    },
    {
        "package_name": "cleo-0.8.1",
        "file_list": "application.py base_command.py command.py templates.py __init__.py completions_command.py __init__.py application_config.py __init__.py helpers.py buffered_io.py console_io.py io_mixin.py __init__.py parser.py application_tester.py command_tester.py __init__.py _compat.py __init__.py LICENSE PKG-INFO pyproject.toml README.rst setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['cleo',\n'cleo.commands',\n'cleo.commands.completions',\n'cleo.config',\n'cleo.io',\n'cleo.testers']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['clikit>=0.6.0,<0.7.0']\n\nsetup_kwargs = {\n'name': 'cleo',\n'version': '0.8.1',\n'description': 'Cleo allows you to create beautiful and testable command-line interfaces.',\n'long_description': 'Cleo\\n####\\n\\n.. image:: https:\/\/travis-ci.org\/sdispater\/cleo.png\\n :alt: Cleo Build status\\n :target: https:\/\/travis-ci.org\/sdispater\/cleo\\n\\nCreate beautiful and testable command-line interfaces.\\n\\nCleo is mostly a higher level wrapper for `CliKit <https:\/\/github.com\/sdispater\/clikit>`_, so\\na lot of the components and utilities comes from it. Refer to its documentation for more\\ninformation.\\n\\nResources\\n=========\\n\\n* `Documentation <http:\/\/cleo.readthedocs.io>`_\\n* `Issue Tracker <https:\/\/github.com\/sdispater\/cleo\/issues>`_\\n\\n\\nUsage\\n=====\\n\\nTo make a command that greets you from the command line,\\ncreate ``greet_command.py`` and add the following to it:\\n\\n.. code-block:: python\\n\\n from cleo import Command\\n\\n\\n class GreetCommand(Command):\\n \"\"\"\\n Greets someone\\n\\n greet\\n {name? : Who do you want to greet?}\\n {--y|yell : If set, the task will yell in uppercase letters}\\n \"\"\"\\n\\n def handle(self):\\n name = self.argument(\\'name\\')\\n\\n if name:\\n text = \\'Hello {}\\'.format(name)\\n else:\\n text = \\'Hello\\'\\n\\n if self.option(\\'yell\\'):\\n text = text.upper()\\n\\n self.line(text)\\n\\n\\nYou also need to create the file to run at the command line which creates\\nan ``Application`` and adds commands to it:\\n\\n.. code-block:: python\\n\\n #!\/usr\/bin\/env python\\n\\n from greet_command import GreetCommand\\n from cleo import Application\\n\\n application = Application()\\n application.add(GreetCommand())\\n\\n if __name__ == \\'__main__\\':\\n application.run()\\n\\nTest the new command by running the following\\n\\n.. code-block:: bash\\n\\n $ python application.py greet John\\n\\nThis will print the following to the command line:\\n\\n.. code-block:: text\\n\\n Hello John\\n\\nYou can also use the ``--yell`` option to make everything uppercase:\\n\\n.. code-block:: bash\\n\\n $ python application.py greet John --yell\\n\\nThis prints:\\n\\n.. code-block:: text\\n\\n HELLO JOHN\\n\\nAs you may have already seen, Cleo uses the command docstring to determine\\nthe command definition.\\nThe docstring must be in the following form :\\n\\n.. code-block:: python\\n\\n \"\"\"\\n Command description\\n\\n Command signature\\n \"\"\"\\n\\nThe signature being in the following form:\\n\\n.. code-block:: python\\n\\n \"\"\"\\n command:name {argument : Argument description} {--option : Option description}\\n \"\"\"\\n\\nThe signature can span multiple lines.\\n\\n.. code-block:: python\\n\\n \"\"\"\\n command:name\\n {argument : Argument description}\\n {--option : Option description}\\n \"\"\"\\n\\nColoring the Output\\n-------------------\\n\\nWhenever you output text, you can surround the text with tags to color its\\noutput. For example:\\n\\n.. code-block:: python\\n\\n # green text\\n self.line(\\'<info>foo<\/info>\\')\\n\\n # yellow text\\n self.line(\\'<comment>foo<\/comment>\\')\\n\\n # black text on a cyan background\\n self.line(\\'<question>foo<\/question>\\')\\n\\n # white text on a red background\\n self.line(\\'<error>foo<\/error>\\')\\n\\nThe closing tag can be replaced by ``<\/>``, which revokes all formatting options established by the last opened tag.\\n\\nIt is possible to define your own styles using the ``add_style()`` method:\\n\\n.. code-block:: python\\n\\n self.add_style(\\'fire\\', fg=\\'red\\', bg=\\'yellow\\', options=[\\'bold\\', \\'blink\\'])\\n self.line(\\'<fire>foo<\/fire>\\')\\n\\nAvailable foreground and background colors are: ``black``, ``red``, ``green``,\\n``yellow``, ``blue``, ``magenta``, ``cyan`` and ``white``.\\n\\nAnd available options are: ``bold``, ``underscore``, ``blink``, ``reverse`` and ``conceal``.\\n\\nYou can also set these colors and options inside the tag name:\\n\\n.. code-block:: python\\n\\n # green text\\n self.line(\\'<fg=green>foo<\/>\\')\\n\\n # black text on a cyan background\\n self.line(\\'<fg=black;bg=cyan>foo<\/>\\')\\n\\n # bold text on a yellow background\\n self.line(\\'<bg=yellow;options=bold>foo<\/>\\')\\n\\n\\nVerbosity Levels\\n----------------\\n\\nCleo has four verbosity levels. These are defined in the ``Output`` class:\\n\\n======================================= ================================== ======================\\nMode Meaning Console option\\n======================================= ================================== ======================\\n``NA`` Do not output any messages ``-q`` or ``--quiet``\\n``clikit.VERBOSITY_NORMAL`` The default verbosity level (none)\\n``clikit.VERBOSITY_VERBOSE`` Increased verbosity of messages ``-v``\\n``clikit.VERBOSITY_VERY_VERBOSE`` Informative non essential messages ``-vv``\\n``clikit.VERBOSITY_DEBUG`` Debug messages ``-vvv``\\n======================================= ================================== ======================\\n\\nIt is possible to print a message in a command for only a specific verbosity\\nlevel. For example:\\n\\n.. code-block:: python\\n\\n if clikit.VERBOSITY_VERBOSE <= self.io.verbosity:\\n self.line(...)\\n\\nThere are also more semantic methods you can use to test for each of the\\nverbosity levels:\\n\\n.. code-block:: python\\n\\n if self.output.is_quiet():\\n # ...\\n\\n if self.output.is_verbose():\\n # ...\\n\\nYou can also pass the verbosity flag directly to `line()`.\\n\\n.. code-block:: python\\n\\n self.line(\"\", verbosity=clikit.VERBOSITY_VERBOSE)\\n\\nWhen the quiet level is used, all output is suppressed.\\n\\n\\nUsing Arguments\\n---------------\\n\\nThe most interesting part of the commands are the arguments and options that\\nyou can make available. Arguments are the strings - separated by spaces - that\\ncome after the command name itself. They are ordered, and can be optional\\nor required. For example, add an optional ``last_name`` argument to the command\\nand make the ``name`` argument required:\\n\\n.. code-block:: python\\n\\n class GreetCommand(Command):\\n \"\"\"\\n Greets someone\\n\\n greet\\n {name : Who do you want to greet?}\\n {last_name? : Your last name?}\\n {--y|yell : If set, the task will yell in uppercase letters}\\n \"\"\"\\n\\nYou now have access to a ``last_name`` argument in your command:\\n\\n.. code-block:: python\\n\\n last_name = self.argument(\\'last_name\\')\\n if last_name:\\n text += \\' {}\\'.format(last_name)\\n\\nThe command can now be used in either of the following ways:\\n\\n.. code-block:: bash\\n\\n $ python application.py greet John\\n $ python application.py greet John Doe\\n\\nIt is also possible to let an argument take a list of values (imagine you want\\nto greet all your friends). For this it must be specified at the end of the\\nargument list:\\n\\n.. code-block:: python\\n\\n class GreetCommand(Command):\\n \"\"\"\\n Greets someone\\n\\n greet\\n {names* : Who do you want to greet?}\\n {--y|yell : If set, the task will yell in uppercase letters}\\n \"\"\"\\n\\nTo use this, just specify as many names as you want:\\n\\n.. code-block:: bash\\n\\n $ python application.py demo:greet John Jane\\n\\nYou can access the ``names`` argument as a list:\\n\\n.. code-block:: python\\n\\n names = self.argument(\\'names\\')\\n if names:\\n text += \\' {}\\'.format(\\', \\'.join(names))\\n\\nThere are 3 argument variants you can use:\\n\\n================================ ==================================== ===============================================================================================================\\nMode Notation Value\\n================================ ==================================== ===============================================================================================================\\n``clikit.ARGUMENT_REQUIRED`` none (just write the argument name) The argument is required\\n``clikit.ARGUMENT_OPTIONAL`` ``argument?`` The argument is optional and therefore can be omitted\\n``clikit.ARGUMENT_MULTI_VALUED`` ``argument*`` The argument can contain an indefinite number of arguments and must be used at the end of the argument list\\n================================ ==================================== ===============================================================================================================\\n\\nYou can combine them like this:\\n\\n.. code-block:: python\\n\\n class GreetCommand(Command):\\n \"\"\"\\n Greets someone\\n\\n greet\\n {names?* : Who do you want to greet?}\\n {--y|yell : If set, the task will yell in uppercase letters}\\n \"\"\"\\n\\nIf you want to set a default value, you can it like so:\\n\\n.. code-block:: text\\n\\n argument=default\\n\\nThe argument will then be considered optional.\\n\\n\\nUsing Options\\n-------------\\n\\nUnlike arguments, options are not ordered (meaning you can specify them in any\\norder) and are specified with two dashes (e.g. ``--yell`` - you can also\\ndeclare a one-letter shortcut that you can call with a single dash like\\n``-y``). Options are *always* optional, and can be setup to accept a value\\n(e.g. ``--dir=src``) or simply as a boolean flag without a value (e.g.\\n``--yell``).\\n\\n.. tip::\\n\\n It is also possible to make an option *optionally* accept a value (so that\\n ``--yell`` or ``--yell=loud`` work). Options can also be configured to\\n accept a list of values.\\n\\nFor example, add a new option to the command that can be used to specify\\nhow many times in a row the message should be printed:\\n\\n.. code-block:: python\\n\\n class GreetCommand(Command):\\n \"\"\"\\n Greets someone\\n\\n greet\\n {name? : Who do you want to greet?}\\n {--y|yell : If set, the task will yell in uppercase letters}\\n {--iterations=1 : How many times should the message be printed?}\\n \"\"\"\\n\\n\\nNext, use this in the command to print the message multiple times:\\n\\n.. code-block:: python\\n\\n for _ in range(0, self.option(\\'iterations\\')):\\n self.line(text)\\n\\nNow, when you run the task, you can optionally specify a ``--iterations``\\nflag:\\n\\n.. code-block:: bash\\n\\n $ python application.py demo:greet John\\n $ python application.py demo:greet John --iterations=5\\n\\nThe first example will only print once, since ``iterations`` is empty and\\ndefaults to ``1``. The second example will print five times.\\n\\nRecall that options don\\'t care about their order. So, either of the following\\nwill work:\\n\\n.. code-block:: bash\\n\\n $ python application.py demo:greet John --iterations=5 --yell\\n $ python application.py demo:greet John --yell --iterations=5\\n\\nThere are 4 option variants you can use:\\n\\n================================ =================================== ======================================================================================\\nOption Notation Value\\n================================ =================================== ======================================================================================\\n``clikit.OPTION_MULTI_VALUED`` ``--option=*`` This option accepts multiple values (e.g. ``--dir=\/foo --dir=\/bar``)\\n``clikit.OPTION_NO_VALUE`` ``--option`` Do not accept input for this option (e.g. ``--yell``)\\n``clikit.OPTION_REQUIRED_VALUE`` ``--option=`` This value is required (e.g. ``--iterations=5``), the option itself is still optional\\n``clikit.OPTION_OPTIONAL_VALUE`` ``--option=?`` This option may or may not have a value (e.g. ``--yell`` or ``--yell=loud``)\\n================================ =================================== ======================================================================================\\n\\nYou can combine them like this:\\n\\n.. code-block:: python\\n\\n class GreetCommand(Command):\\n \"\"\"\\n Greets someone\\n\\n greet\\n {name? : Who do you want to greet?}\\n {--y|yell : If set, the task will yell in uppercase letters}\\n {--iterations=?*1 : How many times should the message be printed?}\\n \"\"\"\\n\\n\\nTesting Commands\\n----------------\\n\\nCleo provides several tools to help you test your commands. The most\\nuseful one is the ``CommandTester`` class.\\nIt uses a special IO class to ease testing without a real\\nconsole:\\n\\n.. code-block:: python\\n\\n import pytest\\n\\n from cleo import Application\\n from cleo import CommandTester\\n\\n def test_execute(self):\\n application = Application()\\n application.add(GreetCommand())\\n\\n command = application.find(\\'demo:greet\\')\\n command_tester = CommandTester(command)\\n command_tester.execute()\\n\\n assert \"...\" == tester.io.fetch_output()\\n\\nThe ``CommandTester.io.fetch_output()`` method returns what would have been displayed\\nduring a normal call from the console. ``CommandTester.io.fetch_error()`` is also available\\nto get what you have been written to the stderr.\\n\\nYou can test sending arguments and options to the command by passing them\\nas a string to the ``CommandTester.execute()`` method:\\n\\n.. code-block:: python\\n\\n import pytest\\n\\n from cleo import Application\\n from cleo import CommandTester\\n\\n def test_execute(self):\\n application = Application()\\n application.add(GreetCommand())\\n\\n command = application.find(\\'demo:greet\\')\\n command_tester = CommandTester(command)\\n command_tester.execute(\"John\")\\n\\n assert \"John\" in tester.io.fetch_output()\\n\\nYou can also test a whole console application by using the ``ApplicationTester`` class.\\n\\n\\nCalling an existing Command\\n---------------------------\\n\\nIf a command depends on another one being run before it, instead of asking the\\nuser to remember the order of execution, you can call it directly yourself.\\nThis is also useful if you want to create a \"meta\" command that just runs a\\nbunch of other commands.\\n\\nCalling a command from another one is straightforward:\\n\\n.. code-block:: python\\n\\n def handle(self):\\n return_code = self.call(\\'demo:greet\\', \"John --yell\")\\n\\n # ...\\n\\nIf you want to suppress the output of the executed command,\\nyou can use the ``call_silent()`` method instead.\\n\\n\\n\\nAutocompletion\\n--------------\\n\\nCleo supports automatic (tab) completion in ``bash``, ``zsh`` and ``fish``.\\n\\nTo activate support for autocompletion, pass a ``complete`` keyword when initializing\\nyour application:\\n\\n.. code-block:: python\\n\\n application = Application(\\'My Application\\', \\'0.1\\', complete=True)\\n\\nNow, register completion for your application by running one of the following in a terminal,\\nreplacing ``[program]`` with the command you use to run your application:\\n\\n.. code-block:: bash\\n\\n # BASH - Ubuntu \/ Debian\\n [program] completions bash | sudo tee \/etc\/bash_completion.d\/[program].bash-completion\\n\\n # BASH - Mac OSX (with Homebrew \"bash-completion\")\\n [program] completions bash > $(brew --prefix)\/etc\/bash_completion.d\/[program].bash-completion\\n\\n # ZSH - Config file\\n mkdir ~\/.zfunc\\n echo \"fpath+=~\/.zfunc\" >> ~\/.zshrc\\n [program] completions zsh > ~\/.zfunc\/_test\\n\\n # FISH\\n [program] completions fish > ~\/.config\/fish\/completions\/[program].fish\\n',\n'author': 'S\u00e9bastien Eustace',\n'author_email': 'sebastien@eustace.io',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/sdispater\/cleo',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'python_requires': '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "click-option-group-0.5.3",
        "file_list": "CHANGELOG.md _core.py _decorators.py _helpers.py _version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\n\nimport pathlib\nfrom setuptools import setup\n\n\nPACKAGE_NAME = 'click_option_group'\nROOT_DIR = pathlib.Path(__file__).parent\n\n\ndef get_version():\nversion = {}\nversion_file = ROOT_DIR \/ PACKAGE_NAME \/ '_version.py'\nexec(version_file.read_text(), version)\nreturn version['__version__']\n\n\ndef get_long_description():\nreadme = ROOT_DIR \/ 'README.md'\nchangelog = ROOT_DIR \/ 'CHANGELOG.md'\nreturn '{}\\n{}'.format(\nreadme.read_text(encoding='utf-8'),\nchangelog.read_text(encoding='utf-8')\n)\n\n\nsetup(\nname='click-option-group',\nversion=get_version(),\npackages=[PACKAGE_NAME],\npython_requires='>=3.6,<4',\ninstall_requires=[\n'Click>=7.0,<9',\n],\nextras_require={\n'docs': ['sphinx>=2.3, <3', 'Pallets-Sphinx-Themes', 'm2r'],\n'tests': ['coverage <6', 'pytest', 'pytest-cov', 'coveralls'],\n},\nurl='https:\/\/github.com\/click-contrib\/click-option-group',\nproject_urls={\n\"Code\": 'https:\/\/github.com\/click-contrib\/click-option-group',\n\"Issue tracker\": 'https:\/\/github.com\/click-contrib\/click-option-group\/issues',\n\"Documentation\": 'https:\/\/click-option-group.readthedocs.io',\n},\nlicense='BSD-3-Clause',\nauthor='Eugene Prilepin',\nauthor_email='esp.home@gmail.com',\ndescription='Option groups missing in Click',\nlong_description=get_long_description(),\nlong_description_content_type='text\/markdown',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'Environment :: Console',\n'Topic :: Software Development :: Libraries',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3 :: Only',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n],\n)\n"
    },
    {
        "package_name": "clickclick-20.10.2",
        "file_list": "console.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt contributing.rst LICENSE MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport inspect\n\nimport setuptools\nfrom setuptools.command.test import test as TestCommand\nfrom setuptools import setup\n\n__location__ = os.path.join(os.getcwd(), os.path.dirname(inspect.getfile(inspect.currentframe())))\n\n\ndef read_version(package):\nwith open(os.path.join(package, '__init__.py'), 'r') as fd:\nfor line in fd:\n# do not use \"exec\" here and do manual parsing to not require deps\nif line.startswith('__version__ = '):\nreturn line.split()[-1].strip().strip('\\'')\n\n\nNAME = 'clickclick'\nMAIN_PACKAGE = 'clickclick'\nVERSION = read_version(MAIN_PACKAGE)\nDESCRIPTION = 'Click utility functions'\nLICENSE = 'Apache License 2.0'\nURL = 'https:\/\/codeberg.org\/hjacobs\/python-clickclick'\nAUTHOR = 'Henning Jacobs'\nEMAIL = 'henning.jacobs@jacobs1.de'\n\nCOVERAGE_XML = True\nCOVERAGE_HTML = False\nJUNIT_XML = True\n\n# Add here all kinds of additional classifiers as defined under\n# https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\nCLASSIFIERS = [\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: POSIX :: Linux',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: Implementation :: CPython',\n]\n\nCONSOLE_SCRIPTS = []\n\n\nclass PyTest(TestCommand):\n\nuser_options = [('cov=', None, 'Run coverage'), ('cov-xml=', None, 'Generate junit xml report'),\n('cov-html=', None, 'Generate junit html report'),\n('junitxml=', None, 'Generate xml of test results')]\n\ndef initialize_options(self):\nTestCommand.initialize_options(self)\nself.cov = None\nself.cov_xml = False\nself.cov_html = False\nself.junitxml = None\n\ndef finalize_options(self):\nTestCommand.finalize_options(self)\nif self.cov is not None:\nself.cov = ['--cov', self.cov, '--cov-report', 'term-missing']\nif self.cov_xml:\nself.cov.extend(['--cov-report', 'xml'])\nif self.cov_html:\nself.cov.extend(['--cov-report', 'html'])\nif self.junitxml is not None:\nself.junitxml = ['--junitxml', self.junitxml]\n\ndef run_tests(self):\ntry:\nimport pytest\nexcept:\nraise RuntimeError('py.test is not installed, run: pip install pytest')\nparams = {'args': self.test_args}\nif self.cov:\nparams['args'] += self.cov\nif self.junitxml:\nparams['args'] += self.junitxml\nparams['args'] += ['--doctest-modules', MAIN_PACKAGE, '-s']\nerrno = pytest.main(**params)\nsys.exit(errno)\n\n\ndef get_install_requirements(path):\ncontent = open(os.path.join(__location__, path)).read()\nreturn [req for req in content.split('\\n') if req != '']\n\n\ndef read(fname):\nwith open(os.path.join(__location__, fname)) as readme:\nreturn readme.read()\n\n\ndef check_deps(deps):\n'''check dependency licenses'''\nfrom pkg_resources import Requirement\nimport requests\nfor dep in deps:\ndep = Requirement.parse(dep)\nurl = 'https:\/\/pypi.python.org\/pypi\/{}\/json'.format(dep.project_name)\nr = requests.get(url)\ndata = r.json()\nprint(data['info'].get('name'), data['info'].get('license'))\n\n\ndef setup_package():\n# Assemble additional setup commands\ncmdclass = {}\ncmdclass['test'] = PyTest\n\ninstall_reqs = get_install_requirements('requirements.txt')\n\n# check_deps(install_reqs)\n\ncommand_options = {'test': {'test_suite': ('setup.py', 'tests'), 'cov': ('setup.py', MAIN_PACKAGE)}}\nif JUNIT_XML:\ncommand_options['test']['junitxml'] = 'setup.py', 'junit.xml'\nif COVERAGE_XML:\ncommand_options['test']['cov_xml'] = 'setup.py', True\nif COVERAGE_HTML:\ncommand_options['test']['cov_html'] = 'setup.py', True\n\nsetup(\nname=NAME,\nversion=VERSION,\nurl=URL,\ndescription=DESCRIPTION,\nauthor=AUTHOR,\nauthor_email=EMAIL,\nlicense=LICENSE,\nkeywords='click console terminal cli',\nlong_description=read('README.rst'),\nclassifiers=CLASSIFIERS,\ntest_suite='tests',\npackages=setuptools.find_packages(exclude=['tests', 'tests.*']),\npackage_data={MAIN_PACKAGE: [\"*.json\"]},\ninstall_requires=install_reqs,\nsetup_requires=['six', 'flake8'],\ncmdclass=cmdclass,\ntests_require=['pytest-cov', 'pytest'],\ncommand_options=command_options,\nentry_points={'console_scripts': CONSOLE_SCRIPTS},\n)\n\n\nif __name__ == '__main__':\nsetup_package()\n"
    },
    {
        "package_name": "clickhouse-cityhash-1.0.2.3",
        "file_list": "__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt dev-requirements.txt city.h citycrc.h config.h LICENSE MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py city.cc cityhash.cpp cityhash.pyx",
        "setup.py": "__author__ = \"Alexander [Amper] Marshalov\"\n__email__ = \"alone.amper+cityhash@gmail.com\"\n__icq__ = \"87-555-3\"\n__jabber__ = \"alone.amper@gmail.com\"\n__twitter__ = \"amper\"\n__url__ = \"http:\/\/amper.github.com\/cityhash\"\n\nfrom setuptools import setup\nfrom setuptools.extension import Extension\nfrom setuptools.dist import Distribution\nimport sys\n\ntry:\nfrom Cython.Distutils import build_ext\nexcept ImportError:\nUSE_CYTHON = False\nelse:\nUSE_CYTHON = True\n\n\nclass BinaryDistribution(Distribution):\n\"\"\"\nSubclass the setuptools Distribution to flip the purity flag to false.\nSee http:\/\/lucumr.pocoo.org\/2014\/1\/27\/python-on-wheels\/\n\"\"\"\ndef is_pure(self):\n# TODO: check if this is still necessary with Python v2.7\nreturn False\n\nCXXFLAGS = None\n\n# We need only CityHash128 from this package.\n# Therefore -msse4.2 removed alongside with CityHashCrc256Long.\nif sys.platform != 'win32':\nCXXFLAGS = \"\"\"\n-O3\n-Wno-unused-value\n-Wno-unused-function\n\"\"\".split()\n\nINCLUDE_DIRS = ['include']\n\nCMDCLASS = {}\nEXT_MODULES = []\n\nif USE_CYTHON:\nEXT_MODULES.append(\nExtension(\"clickhouse_cityhash.cityhash\", [\"src\/city.cc\", \"src\/cityhash.pyx\"],\nlanguage=\"c++\",\nextra_compile_args=CXXFLAGS,\ninclude_dirs=INCLUDE_DIRS)\n)\nCMDCLASS['build_ext'] = build_ext\nelse:\nEXT_MODULES.append(\nExtension(\"clickhouse_cityhash.cityhash\", [\"src\/city.cc\", \"src\/cityhash.cpp\"],\nlanguage=\"c++\",\nextra_compile_args=CXXFLAGS,\ninclude_dirs=INCLUDE_DIRS)\n)\n\n\nVERSION = '1.0.2.3'\nURL = \"https:\/\/github.com\/xzkostyan\/python-cityhash\"\n\nwith open('README.rst', 'rb') as fd:\nLONG_DESCRIPTION = fd.read().decode('utf-8')\n\n\nsetup(\nversion=VERSION,\ndescription=\"Python-bindings for CityHash, a fast non-cryptographic hash algorithm\",\nauthor=\"Alexander [Amper] Marshalov\",\nauthor_email=\"alone.amper+cityhash@gmail.com\",\nurl=URL,\ndownload_url=URL + \"\/tarball\/master\/\" + VERSION,\nname='clickhouse-cityhash',\nlicense='MIT',\ncmdclass=CMDCLASS,\next_modules=EXT_MODULES,\nkeywords=['hash', 'hashing', 'cityhash'],\npackages=['clickhouse_cityhash'],\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Operating System :: OS Independent',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: C++',\n'Programming Language :: Cython',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.6',\n'Topic :: Internet',\n'Topic :: Scientific\/Engineering',\n'Topic :: Scientific\/Engineering :: Information Analysis',\n'Topic :: Software Development',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Utilities'\n],\nlong_description=LONG_DESCRIPTION,\ndistclass=BinaryDistribution,\n)\n"
    },
    {
        "package_name": "codespell-2.1.0",
        "file_list": "codespell-private.yml codespell.yml .gitignore codespell dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt dictionary.txt dictionary_code.txt dictionary_en-GB_to_en-US.txt dictionary_informal.txt dictionary_names.txt dictionary_rare.txt dictionary_usage.txt linux-kernel.exclude __init__.py test_basic.py test_dictionary.py __init__.py _codespell.py __init__.py __main__.py COPYING MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "#! \/usr\/bin\/env python\n\n# adapted from mne-python\n\nimport os\nfrom os import path as op\n\nfrom setuptools import setup\n\nfrom codespell_lib import __version__\n\nDISTNAME = 'codespell'\nDESCRIPTION = \"\"\"Codespell\"\"\"\nMAINTAINER = 'Lucas De Marchi'\nMAINTAINER_EMAIL = 'lucas.de.marchi@gmail.com'\nURL = 'https:\/\/github.com\/codespell-project\/codespell\/'\nLICENSE = 'GPL v2'\nDOWNLOAD_URL = 'https:\/\/github.com\/codespell-project\/codespell\/'\nwith open('README.rst', 'r') as f:\nLONG_DESCRIPTION = f.read()\n\nif __name__ == \"__main__\":\nif os.path.exists('MANIFEST'):\nos.remove('MANIFEST')\n\nsetup(name=DISTNAME,\nmaintainer=MAINTAINER,\ninclude_package_data=True,\nmaintainer_email=MAINTAINER_EMAIL,\ndescription=DESCRIPTION,\nlicense=LICENSE,\nurl=URL,\nversion=__version__,\ndownload_url=DOWNLOAD_URL,\nlong_description=LONG_DESCRIPTION,\nzip_safe=False,\nclassifiers=['Intended Audience :: Developers',\n'License :: OSI Approved',\n'Programming Language :: Python',\n'Topic :: Software Development',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: POSIX',\n'Operating System :: Unix',\n'Operating System :: MacOS'],\nplatforms='any',\npython_requires='>=3.5',\npackages=[\n'codespell_lib',\n'codespell_lib.data',\n],\npackage_data={'codespell_lib': [\nop.join('data', 'dictionary*.txt'),\nop.join('data', 'linux-kernel.exclude'),\n]},\nexclude_package_data={'codespell_lib': [\nop.join('tests', '*'),\n]},\nentry_points={\n'console_scripts': [\n'codespell = codespell_lib:_script_main'\n],\n},\nextras_require={\n\"dev\": [\"check-manifest\", \"flake8\", \"pytest\", \"pytest-cov\",\n\"pytest-dependency\"],\n\"hard-encoding-detection\": [\"chardet\"],\n}\n)\n"
    },
    {
        "package_name": "collections-extended-2.0.2",
        "file_list": "bags.py bijection.py indexed_dict.py range_map.py sentinel.py setlists.py _util.py _version.py __init__.py LICENSE PKG-INFO pyproject.toml README.rst setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['collections_extended']\n\npackage_data = \\\n{'': ['*']}\n\nsetup_kwargs = {\n'name': 'collections-extended',\n'version': '2.0.2',\n'description': 'Extra Python Collections - bags (multisets) and setlists (ordered sets)',\n'long_description': 'README\\n######\\n\\n.. image:: https:\/\/coveralls.io\/repos\/github\/mlenzen\/collections-extended\/badge.svg?branch=master\\n\\t:target: https:\/\/coveralls.io\/github\/mlenzen\/collections-extended?branch=master\\n\\t:alt: Coverage\\n\\n\\n.. image:: https:\/\/pepy.tech\/badge\/collections-extended\/week\\n\\t:target: https:\/\/pepy.tech\/project\/collections-extended\/\\n\\t:alt: Downloads\\n\\n\\nDocumentation:\\n\\thttp:\/\/collections-extended.lenzm.net\/\\nGitHub:\\n\\thttps:\/\/github.com\/mlenzen\/collections-extended\\nPyPI:\\n\\thttps:\/\/pypi.python.org\/pypi\/collections-extended\\n\\nOverview\\n========\\n\\n``collections_extended`` is a pure Python module with no dependencies providing:\\n\\n- a ``bag`` class, AKA **multiset**,\\n- a ``setlist`` class, which is a **unique list** or **ordered set**,\\n- a ``bijection`` class, ``RangeMap`` which is a mapping from ranges to values and\\n- a ``IndexedDict`` class, which is an ordered mapping whose elements can be accessed using index, in addition to key.\\n\\nThere are also frozen (hashable) varieties of bags and setlists.\\n\\nCompatible with and tested against Python 3.6, 3.7, 3.8, 3.9, 3.10 & PyPy3.\\n\\nGetting Started\\n===============\\n\\n.. code-block:: python\\n\\n\\t>>> from collections_extended import bag, setlist, bijection, RangeMap, IndexedDict\\n\\t>>> from datetime import date\\n\\t>>> b = bag(\\'abracadabra\\')\\n\\t>>> b.count(\\'a\\')\\n\\t5\\n\\t>>> b.remove(\\'a\\')\\n\\t>>> b.count(\\'a\\')\\n\\t4\\n\\t>>> \\'a\\' in b\\n\\tTrue\\n\\t>>> b.count(\\'d\\')\\n\\t1\\n\\t>>> b.remove(\\'d\\')\\n\\t>>> b.count(\\'d\\')\\n\\t0\\n\\t>>> \\'d\\' in b\\n\\tFalse\\n\\n\\t>>> sl = setlist(\\'abracadabra\\')\\n\\t>>> sl\\n\\tsetlist((\\'a\\', \\'b\\', \\'r\\', \\'c\\', \\'d\\'))\\n\\t>>> sl[3]\\n\\t\\'c\\'\\n\\t>>> sl[-1]\\n\\t\\'d\\'\\n\\t>>> \\'r\\' in sl # testing for inclusion is fast\\n\\tTrue\\n\\t>>> sl.index(\\'d\\') # so is finding the index of an element\\n\\t4\\n\\t>>> sl.insert(1, \\'d\\') # inserting an element already in raises a ValueError\\n\\tTraceback (most recent call last):\\n\\t...\\n\\t\\traise ValueError\\n\\tValueError\\n\\t>>> sl.index(\\'d\\')\\n\\t4\\n\\n\\t>>> bij = bijection({\\'a\\': 1, \\'b\\': 2, \\'c\\': 3})\\n\\t>>> bij.inverse[2]\\n\\t\\'b\\'\\n\\t>>> bij[\\'a\\'] = 2\\n\\t>>> bij == bijection({\\'a\\': 2, \\'c\\': 3})\\n\\tTrue\\n\\t>>> bij.inverse[1] = \\'a\\'\\n\\t>>> bij == bijection({\\'a\\': 1, \\'c\\': 3})\\n\\tTrue\\n\\n\\t>>> version = RangeMap()\\n\\t>>> version[date(2017, 10, 20): date(2017, 10, 27)] = \\'0.10.1\\'\\n\\t>>> version[date(2017, 10, 27): date(2018, 2, 14)] = \\'1.0.0\\'\\n\\t>>> version[date(2018, 2, 14):] = \\'1.0.1\\'\\n\\t>>> version[date(2017, 10, 24)]\\n\\t\\'0.10.1\\'\\n\\t>>> version[date(2018, 7, 1)]\\n\\t\\'1.0.1\\'\\n\\t>>> version[date(2018, 6, 30):] = \\'1.0.2\\'\\n\\t>>> version[date(2018, 7, 1)]\\n\\t\\'1.0.2\\'\\n\\n\\t>>> idict = IndexedDict()\\n\\t>>> idict[\\'a\\'] = \"A\"\\n\\t>>> idict[\\'b\\'] = \"B\"\\n\\t>>> idict[\\'c\\'] = \"C\"\\n\\t>>> idict.get(key=\\'a\\')\\n\\t\\'A\\'\\n\\t>>> idict.get(index=2)\\n\\t\\'C\\'\\n\\t>>> idict.index(\\'b\\')\\n\\t1\\n\\nInstallation\\n============\\n\\n``pip install collections-extended``\\n\\nUsage\\n=====\\n\\t``from collections_extended import bag, frozenbag, setlist, frozensetlist, bijection``\\n\\nClasses\\n=======\\nThere are seven new collections provided:\\n\\nBags\\n----\\nbag\\n\\tThis is a bag AKA multiset.\\nfrozenbag\\n\\tThis is a frozen (hashable) version of a bag.\\n\\nSetlists\\n--------\\nsetlist\\n\\tAn ordered set or a list of unique elements depending on how you look at it.\\nfrozensetlist\\n\\tThis is a frozen (hashable) version of a setlist.\\n\\nMappings\\n--------\\nbijection\\n\\tA one-to-one mapping.\\nRangeMap\\n\\tA mapping from ranges (of numbers\/dates\/etc)\\nIndexedDict\\n\\tA mapping that keeps insertion order and allows access by index.\\n\\nPython 2\\n--------\\n\\nThe package no longer supports Python 2. The last version to support\\nPython 2.7, 3.4 & 3.5 was 1.0. No new feature releases will be done for 1.x but\\nany significant bugs that come up may be fixed.\\n\\n:Author: Michael Lenzen\\n:Copyright: 2021 Michael Lenzen\\n:License: Apache License, Version 2.0\\n:Project Homepage: https:\/\/github.com\/mlenzen\/collections-extended\\n',\n'author': 'Michael Lenzen',\n'author_email': 'm.lenzen@gmail.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/mlenzen\/collections-extended',\n'packages': packages,\n'package_data': package_data,\n'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "colored-1.4.3",
        "file_list": "CHANGES.md back.py colored.py colors.py fore.py hex.py style.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt back.COLOR.txt colors_list.txt fore.COLOR.txt hex_list.txt style.COLOR.txt LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_1.py test_2.py test_3.py test_4.py test_5.py test_hex_1.py test_hex_2.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\nfrom colored import __version__\n\n\nsetup(\nname=\"colored\",\npackages=[\"colored\"],\nversion=__version__,\ndescription=\"Simple library for color and formatting to terminal\",\nlong_description=open(\"README.rst\").read(),\nkeywords=[\"color\", \"colour\", \"paint\", \"ansi\", \"terminal\", \"linux\",\n\"python\"],\nauthor=\"dslackw\",\nauthor_email=\"d.zlatanidis@gamil.com\",\nurl=\"https:\/\/gitlab.com\/dslackw\/colored\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Console\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: POSIX\",\n\"Operating System :: POSIX :: Linux\",\n\"Operating System :: Microsoft\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: Microsoft :: Windows :: Windows 10\",\n\"Operating System :: POSIX :: Other\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.6\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.0\",\n\"Programming Language :: Python :: 3.2\",\n\"Programming Language :: Python :: 3.3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Unix Shell\",\n\"Topic :: Terminals\"]\n)\n"
    },
    {
        "package_name": "colour-0.1.5",
        "file_list": "CHANGELOG.rst dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt colour.py LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py TODO.rst",
        "setup.py": "#!\/usr\/bin\/env python\n\n##\n## You can download latest version of this file:\n## $ wget https:\/\/gist.github.com\/vaab\/e0eae9607ae806b662d4\/raw -O setup.py\n## $ chmod +x setup.py\n##\n## This setup.py is meant to be run along with ``.\/autogen.sh`` that\n## you can also find here: https:\/\/gist.github.com\/vaab\/9118087\/raw\n##\n\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distribute_setup import use_setuptools\nuse_setuptools()\nfrom setuptools import setup\n\n##\n## Ensure that ``.\/autogen.sh`` is run prior to using ``setup.py``\n##\n\nif \"0.1.5\".startswith(\"%%\"):\nimport os.path\nimport sys\nWIN32 = sys.platform == 'win32'\nautogen = os.path.join(\".\", \"autogen.sh\")\nif not os.path.exists(autogen):\nsys.stderr.write(\n\"This source repository was not configured.\\n\"\n\"Please ensure ``.\/autogen.sh`` exists and that you are running \"\n\"``setup.py`` from the project root directory.\\n\")\nsys.exit(1)\nif os.path.exists('.autogen.sh.output'):\nsys.stderr.write(\n\"It seems that ``.\/autogen.sh`` couldn't do its job as expected.\\n\"\n\"Please try to launch ``.\/autogen.sh`` manualy, and send the \"\n\"results to the\\nmaintainer of this package.\\n\"\n\"Package will not be installed !\\n\")\nsys.exit(1)\nsys.stderr.write(\"Missing version information: \"\n\"running '.\/autogen.sh'...\\n\")\nimport os\nimport subprocess\nos.system('%s%s > .autogen.sh.output'\n% (\"bash \" if WIN32 else \"\",\nautogen))\ncmdline = sys.argv[:]\nif cmdline[0] == \"-c\":\n## for some reason, this is needed when launched from pip\ncmdline[0] = \"setup.py\"\nerrlvl = subprocess.call([\"python\", ] + cmdline)\nos.unlink(\".autogen.sh.output\")\nsys.exit(errlvl)\n\n\n##\n## Normal d2to1 setup\n##\n\nsetup(\nsetup_requires=['d2to1'],\nextras_require={'test': ['nose', ]},\nd2to1=True\n)\n"
    },
    {
        "package_name": "combat-0.3.2",
        "file_list": "exceptions.py pycombat.py test_unit.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt COPYING LICENSE PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import setuptools\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nsetuptools.setup(\ninstall_requires=[\n\"numpy>=1.18.5,<=1.19.5\",\n\"mpmath>=1.1.0\",\n\"pandas>=0.24.2,<=1.1.5\",\n\"patsy==0.5.1\"\n],\nname=\"combat\",\nversion=\"0.3.2\",\nauthor=\"Abdelkader Behdenna\",\nauthor_email=\"abdelkader@epigenelabs.com\",\ndescription=\"pyComBat, a Python tool for batch effects correction in high-throughput molecular data using empirical Bayes methods\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/epigenelabs\/pyComBat\",\npackages=setuptools.find_packages(),\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)\",\n\"Operating System :: OS Independent\",\n],\npython_requires='>=3.6',\n)\n"
    },
    {
        "package_name": "conan-1.51.2",
        "file_list": "errors.py apple.py xcodebuild.py xcodedeps.py xcodetoolchain.py __init__.py cppstd.py cpu.py cross_building.py __init__.py cmake.py cmakedeps.py config.py config_version.py macros.py targets.py target_configuration.py target_data.py __init__.py __init__.py file_api.py layout.py presets.py blocks.py toolchain.py __init__.py utils.py __init__.py environment.py virtualbuildenv.py virtualrunenv.py __init__.py conandata.py copy_pattern.py cpp_package.py files.py packager.py patches.py symlinks.py __init__.py __init__.py autotools.py autotoolsdeps.py autotoolstoolchain.py get_gnu_triplet.py gnudeps_flags.py pkgconfig.py pc_files_creator.py pc_files_templates.py pc_info_loader.py pkgconfigdeps.py __init__.py __init__.py bazel.py bazeldeps.py layout.py toolchain.py __init__.py intel_cc.py __init__.py __init__.py helpers.py meson.py mesondeps.py toolchain.py __init__.py layout.py msbuild.py msbuilddeps.py subsystems.py toolchain.py visual.py __init__.py premake.py premakedeps.py __init__.py qbs.py qbsprofile.py __init__.py git.py __init__.py package_manager.py __init__.py _check_build_profile.py _compilers.py __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt info_graph_dot.py info_graph_html.py new_v2_autotools.py new_v2_bazel.py new_v2_cmake.py new_v2_meson.py new_v2_msbuild.py search_table_html.py __init__.py __init__.py build_info.py command.py conan_build_info.py model.py __init__.py cli.py command.py exit_codes.py output.py __init__.py conan_api.py __init__.py autotools_environment.py cmake.py cmake_flags.py compiler_flags.py cppstd_flags.py meson.py msbuild.py visual_environment.py __init__.py cache.py editable.py remote_registry.py __init__.py build.py copy.py create.py download.py export.py export_pkg.py frogarian.py new.py new_ci.py profile.py search.py test.py uploader.py user.py __init__.py command.py build.py configure.py package.py __init__.py conan_api.py conan_command_output.py compiler_id.py config_installer.py detect.py required_version.py __init__.py cached_file_downloader.py download.py file_downloader.py __init__.py environment.py __init__.py file_copier.py b2.py boostbuild.py cmake.py cmake_common.py cmake_find_package.py cmake_find_package_common.py cmake_find_package_multi.py cmake_multi.py cmake_paths.py compiler_args.py deploy.py gcc.py json_generator.py make.py markdown.py pkg_config.py premake.py qbs.py qmake.py scons.py text.py virtualbuildenv.py virtualenv.py virtualenv_python.py virtualrunenv.py visualstudio.py visualstudiolegacy.py visualstudio_multi.py xcode.py ycm.py __init__.py build_mode.py compatibility.py graph.py grapher.py graph_binaries.py graph_builder.py graph_manager.py printer.py proxy.py python_requires.py range_resolver.py __init__.py hook_manager.py importer.py installer.py loader.py loader_txt.py manager.py manifest_manager.py migrations.py migrations_settings.py output.py packager.py printer.py profile_loader.py action_recorder.py search_recorder.py upload_recoder.py __init__.py remote_manager.py remover.py auth_manager.py cacert.py client_routes.py conan_requester.py file_uploader.py rest_client.py rest_client_common.py rest_client_v1.py rest_client_v2.py __init__.py runner.py run_environment.py settings_preprocessor.py source.py localdb.py __init__.py subsystems.py android.py apple.py env.py files.py intel.py net.py oss.py pkg_config.py scm.py settings.py system_pm.py version.py win.py __init__.py userio.py __init__.py conan.py conan_server.py errors.py migrations.py build_info.py conanfile_interface.py conan_file.py conan_generator.py conf.py dependencies.py editable_layout.py env_info.py graph_info.py graph_lock.py info.py layout.py lock_bundle.py manifest.py new_build_info.py options.py package_metadata.py profile.py ref.py requires.py rest_routes.py scm.py settings.py user_info.py values.py version.py workspace.py __init__.py package_cache_layout.py package_editable_layout.py __init__.py __init__.py pylint_plugin.py requirements.txt requirements_dev.txt requirements_server.txt binary_html_table.py query_parse.py search.py __init__.py default_server_conf.py __init__.py jwt_credentials_manager.py jwt_manager.py jwt_updown_manager.py __init__.py __init__.py launcher.py migrate.py migrations.py plugin_loader.py api_v1.py api_v2.py authorization_header.py http_basic_authentication.py jwt_authentication.py return_handler.py __init__.py bottle_routes.py ping.py users.py __init__.py conan.py delete.py file_upload_download.py search.py __init__.py conan.py delete.py revisions.py search.py __init__.py __init__.py server.py __init__.py revision_list.py server_launcher.py authorize.py common.py search.py __init__.py mime.py user_service.py service.py upload_download_service.py __init__.py service_v2.py __init__.py __init__.py disk_adapter.py server_store.py url_manager.py __init__.py __init__.py conftest.py artifactory.py conan_v2_tests.py mocks.py profiles.py scm.py server_launcher.py test_files.py tools.py __init__.py __init__.py tools.py conan_v2_mode.py config_parser.py dates.py encrypt.py env_reader.py fallbacks.py files.py locks.py log.py misc.py progress_bar.py runners.py sha.py templates.py tracer.py windows.py __init__.py __init__.py LICENSE.md MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "\"\"\"A setuptools based setup module.\nSee:\nhttps:\/\/packaging.python.org\/en\/latest\/distributing.html\nhttps:\/\/github.com\/pypa\/sampleproject\n\"\"\"\n\nimport os\nimport re\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\n# Always prefer setuptools over distutils\nfrom setuptools import find_packages, setup\n\nhere = path.abspath(path.dirname(__file__))\n\n\ndef get_requires(filename):\nrequirements = []\nwith open(filename, \"rt\") as req_file:\nfor line in req_file.read().splitlines():\nif not line.strip().startswith(\"#\"):\nrequirements.append(line)\nreturn requirements\n\n\nproject_requirements = get_requires(\"conans\/requirements.txt\")\nproject_requirements.extend(get_requires(\"conans\/requirements_server.txt\"))\ndev_requirements = get_requires(\"conans\/requirements_dev.txt\")\n# The tests utils are used by conan-package-tools\nexclude_test_packages = [\"conans.test.{}*\".format(d)\nfor d in os.listdir(os.path.join(here, \"conans\/test\"))\nif os.path.isdir(os.path.join(here, \"conans\/test\", d)) and d != \"utils\"]\n\n\ndef load_version():\n\"\"\" Loads a file content \"\"\"\nfilename = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\n\"conans\", \"__init__.py\"))\nwith open(filename, \"rt\") as version_file:\nconan_init = version_file.read()\nversion = re.search(r\"__version__ = '([0-9a-z.-]+)'\", conan_init).group(1)\nreturn version\n\n\ndef generate_long_description_file():\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, 'README.rst')) as f:\nlong_description = f.read()\nreturn long_description\n\nsetup(\nname='conan',\npython_requires='>=3.6',\n# Versions should comply with PEP440. For a discussion on single-sourcing\n# the version across setup.py and the project code, see\n# https:\/\/packaging.python.org\/en\/latest\/single_source_version.html\nversion=load_version(), # + \".rc1\",\n\ndescription='Conan C\/C++ package manager',\nlong_description=generate_long_description_file(),\nlong_description_content_type='text\/x-rst',\n\n# The project's main homepage.\nurl='https:\/\/conan.io',\nproject_urls={\n'Documentation': 'https:\/\/docs.conan.io',\n'Source': 'https:\/\/github.com\/conan-io\/conan',\n'Tracker': 'https:\/\/github.com\/conan-io\/conan\/issues',\n},\n\n# Author details\nauthor='JFrog LTD',\nauthor_email='luism@jfrog.com',\n\n# Choose your license\nlicense='MIT',\n\n# See https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Topic :: Software Development :: Build Tools',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8'\n],\n\n# What does your project relate to?\nkeywords=['C\/C++', 'package', 'libraries', 'developer', 'manager',\n'dependency', 'tool', 'c', 'c++', 'cpp'],\n\n# You can just specify the packages manually here if your project is\n# simple. Or you can use find_packages().\npackages=find_packages(exclude=exclude_test_packages),\n\n# Alternatively, if you want to distribute just a my_module.py, uncomment\n# this:\n# py_modules=[\"my_module\"],\n\n# List run-time dependencies here. These will be installed by pip when\n# your project is installed. For an analysis of \"install_requires\" vs pip's\n# requirements files see:\n# https:\/\/packaging.python.org\/en\/latest\/requirements.html\ninstall_requires=project_requirements,\n\n# List additional groups of dependencies here (e.g. development\n# dependencies). You can install these using the following syntax,\n# for example:\n# $ pip install -e .[dev,test]\nextras_require={\n'dev': dev_requirements,\n'test': dev_requirements,\n},\n\n# If there are data files included in your packages that need to be\n# installed, specify them here. If using Python 2.6 or less, then these\n# have to be included in MANIFEST.in as well.\npackage_data={\n'conans': ['*.txt'],\n},\n\n# Although 'package_data' is the preferred approach, in some case you may\n# need to place data files outside of your packages. See:\n# http:\/\/docs.python.org\/3.4\/distutils\/setupscript.html#installing-additional-files # noqa\n# In this case, 'data_file' will be installed into '<sys.prefix>\/my_data'\n# data_files=[('my_data', ['data\/data_file'])],\n\n# To provide executable scripts, use entry points in preference to the\n# \"scripts\" keyword. Entry points provide cross-platform support and allow\n# pip to create the appropriate form of executable for the target platform.\nentry_points={\n'console_scripts': [\n'conan=conans.conan:run',\n'conan_server=conans.conan_server:run',\n'conan_build_info=conans.build_info.command:run'\n],\n},\n)\n"
    },
    {
        "package_name": "connexion-2.14.0",
        "file_list": "ARCHITECTURE.rst abstract.py aiohttp_api.py flask_api.py flask_utils.py __init__.py abstract.py aiohttp_app.py flask_app.py __init__.py cli.py coroutine_wrappers.py decorator.py metrics.py parameter.py produces.py response.py uri_parsing.py validation.py __init__.py exceptions.py handlers.py http_facts.py jsonifier.py json_schema.py lifecycle.py mock.py abstract.py compat.py openapi.py secure.py swagger2.py __init__.py options.py problem.py resolver.py schema.json schema.json aiohttp_security_handler_factory.py async_security_handler_factory.py flask_security_handler_factory.py security_handler_factory.py __init__.py spec.py utils.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CONTRIBUTING.rst LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python3\n\nimport inspect\nimport os\nimport sys\n\nfrom setuptools import find_packages, setup\nfrom setuptools.command.test import test as TestCommand\n\n__location__ = os.path.join(os.getcwd(), os.path.dirname(inspect.getfile(inspect.currentframe())))\n\n\ndef read_version(package):\nwith open(os.path.join(package, '__init__.py')) as fd:\nfor line in fd:\nif line.startswith('__version__ = '):\nreturn line.split()[-1].strip().strip(\"'\")\n\n\nversion = read_version('connexion')\n\ninstall_requires = [\n'clickclick>=1.2,<21',\n'jsonschema>=2.5.1,<5',\n'PyYAML>=5.1,<7',\n'requests>=2.9.1,<3',\n'inflection>=0.3.1,<0.6',\n'werkzeug>=1.0,<3',\n'importlib-metadata>=1 ; python_version<\"3.8\"',\n'packaging>=20',\n]\n\nswagger_ui_require = 'swagger-ui-bundle>=0.0.2,<0.1'\n\nflask_require = [\n'flask>=1.0.4,<3',\n'itsdangerous>=0.24',\n]\naiohttp_require = [\n'aiohttp>=2.3.10,<4',\n'aiohttp-jinja2>=0.14.0,<2',\n'MarkupSafe>=0.23',\n]\n\ntests_require = [\n'decorator>=5,<6',\n'pytest>=6,<7',\n'pytest-cov>=2,<3',\n'testfixtures>=6,<7',\n*flask_require,\nswagger_ui_require\n]\n\ntests_require.extend(aiohttp_require)\ntests_require.append('pytest-aiohttp')\ntests_require.append('aiohttp-remotes')\n\ndocs_require = [\n'sphinx-autoapi==1.8.1'\n]\n\n\nclass PyTest(TestCommand):\n\nuser_options = [('cov-html=', None, 'Generate junit html report')]\n\ndef initialize_options(self):\nTestCommand.initialize_options(self)\nself.cov = None\nself.pytest_args = ['--cov', 'connexion', '--cov-report', 'term-missing', '-v']\nself.cov_html = False\n\ndef finalize_options(self):\nTestCommand.finalize_options(self)\nif self.cov_html:\nself.pytest_args.extend(['--cov-report', 'html'])\nself.pytest_args.extend(['tests'])\n\ndef run_tests(self):\nimport pytest\n\nerrno = pytest.main(self.pytest_args)\nsys.exit(errno)\n\n\ndef readme():\ntry:\nreturn open('README.rst', encoding='utf-8').read()\nexcept TypeError:\nreturn open('README.rst').read()\n\n\nsetup(\nname='connexion',\npackages=find_packages(),\nversion=version,\ndescription='Connexion - API first applications with OpenAPI\/Swagger and Flask',\nlong_description=readme(),\nauthor='Zalando SE',\nurl='https:\/\/github.com\/zalando\/connexion',\nkeywords='openapi oai swagger rest api oauth flask microservice framework',\nlicense='Apache License Version 2.0',\nsetup_requires=['flake8'],\npython_requires=\">=3.6\",\ninstall_requires=install_requires + flask_require,\ntests_require=tests_require,\nextras_require={\n'tests': tests_require,\n'flask': flask_require,\n'swagger-ui': swagger_ui_require,\n'aiohttp': aiohttp_require,\n'docs': docs_require\n},\ncmdclass={'test': PyTest},\ntest_suite='tests',\nclassifiers=[\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Operating System :: OS Independent',\n'Topic :: Internet :: WWW\/HTTP :: WSGI :: Application',\n'Topic :: Software Development :: Libraries :: Application Frameworks'\n],\ninclude_package_data=True, # needed to include swagger-ui (see MANIFEST.in)\nentry_points={'console_scripts': ['connexion = connexion.cli:main']}\n)\n"
    },
    {
        "package_name": "constantly-15.1.0",
        "file_list": "_constants.py _version.py __init__.py dependency_links.txt pbr.json PKG-INFO SOURCES.txt top_level.txt CREDITS LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py versioneer.py",
        "setup.py": "# Copyright (c) Twisted Matrix Laboratories.\n# See LICENSE for details.\n\nimport codecs\nimport os\nimport versioneer\n\nfrom setuptools import setup\n\ndef read(*parts):\n\"\"\"\nBuild an absolute path from C{parts} and and return the contents of the\nresulting file. Assume UTF-8 encoding.\n\"\"\"\nhere = os.path.abspath(os.path.dirname(__file__))\nwith codecs.open(os.path.join(here, *parts), 'r', 'utf-8') as f:\nreturn f.read()\n\nif __name__ == \"__main__\":\nsetup(\nclassifiers=[\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Software Development :: Libraries :: Python Modules'\n],\ndescription=\"Symbolic constants in Python\",\nlong_description=read('README.rst'),\nkeywords=\"constants,enum,twisted\",\nlicense=\"MIT\",\nname=\"constantly\",\npackages=[\"constantly\"],\nurl=\"https:\/\/github.com\/twisted\/constantly\",\nmaintainer='Twisted Matrix Labs Developers',\nversion=versioneer.get_version(),\ncmdclass=versioneer.get_cmdclass(),\n)\n"
    },
    {
        "package_name": "contextlib2-21.6.0",
        "file_list": "py.typed __init__.py __init__.pyi dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CONTRIBUTING.md py3_10_contextlib_pyi_to_contextlib2_pyi.patch py3_10_contextlib_rst_to_contextlib2_rst.patch py3_10_contextlib_to_contextlib2.patch conf.py contextlib2.rst index.rst make.bat Makefile LICENSE.txt MANIFEST.in NEWS.rst PKG-INFO README.rst setup.cfg setup.py os_helper.py __init__.py test_contextlib.py test_contextlib_async.py __init__.py tox.ini VERSION.txt",
        "setup.py": "#!\/usr\/bin\/env python\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\nsetup(\nname='contextlib2',\nversion=open('VERSION.txt').read().strip(),\npython_requires='>=3.6',\npackages=['contextlib2'],\ninclude_package_data=True,\nlicense='PSF License',\ndescription='Backports and enhancements for the contextlib module',\nlong_description=open('README.rst').read(),\nauthor='Nick Coghlan',\nauthor_email='ncoghlan@gmail.com',\nurl='http:\/\/contextlib2.readthedocs.org',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'License :: OSI Approved :: Apache Software License',\n'License :: OSI Approved :: Python Software Foundation License',\n# These are the Python versions tested, it may work on others\n# It definitely won't work on versions without native async support\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n],\n\n)\n"
    },
    {
        "package_name": "contractions-0.1.72",
        "file_list": ".gitignore contractions_dict.json leftovers_dict.json slang_dict.json __init__.py test___init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt deploy.py LICENSE MANIFEST.in PKG-INFO README.md README.rst setup.cfg setup.py",
        "setup.py": "from setuptools import find_packages\nfrom setuptools import setup\n\nMAJOR_VERSION = \"0\"\nMINOR_VERSION = \"1\"\nMICRO_VERSION = \"72\"\nVERSION = \"{}.{}.{}\".format(MAJOR_VERSION, MINOR_VERSION, MICRO_VERSION)\n\nsetup(\nname=\"contractions\",\nversion=VERSION,\ndescription=\"Fixes contractions such as `you're` to you `are`\",\nauthor=\"Pascal van Kooten\",\nurl=\"https:\/\/github.com\/kootenpv\/contractions\",\npackage_data={\n# If any package contains *.txt or *.rst files, include them:\n# '': ['*.txt', '*.rst'],\n\"contractions\": [\"data\/*.json\"]\n},\nauthor_email=\"kootenpv@gmail.com\",\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Customer Service\",\n\"Intended Audience :: System Administrators\",\n\"Operating System :: Microsoft\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Operating System :: Unix\",\n\"Operating System :: POSIX\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Topic :: Software Development\",\n\"Topic :: Software Development :: Libraries\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Topic :: System :: Software Distribution\",\n\"Topic :: System :: Systems Administration\",\n\"Topic :: Utilities\",\n],\nlicense=\"MIT\",\npackages=find_packages(),\nzip_safe=False,\nplatforms=\"any\",\ninstall_requires=[\"textsearch>=0.0.21\"],\n)\n"
    },
    {
        "package_name": "cookies-2.2.1",
        "file_list": "dependency_links.txt PKG-INFO SOURCES.txt top_level.txt cookies.py PKG-INFO README setup.cfg setup.py test_cookies.py",
        "setup.py": "from setuptools import setup, Command\nfrom cookies import __version__\n\nclass Test(Command):\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\ntry:\nimport pytest\nexcept ImportError:\nraise AssertionError(\"Install py.test to run the tests\")\nimport sys, subprocess\nerrno = subprocess.call([sys.executable, '-m', 'py.test'])\nraise SystemExit(errno)\n\nsetup(\nname=\"cookies\",\nversion=__version__,\nauthor=\"Sasha Hart\",\nauthor_email=\"s@sashahart.net\",\nurl=\"https:\/\/github.com\/sashahart\/cookies\",\npy_modules=['cookies', 'test_cookies'],\ndescription=\"Friendlier RFC 6265-compliant cookie parser\/renderer\",\nlong_description=open('README').read(),\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Environment :: Other Environment\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python :: 2.6\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.2\",\n\"Programming Language :: Python :: 3.3\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\ncmdclass = {'test': Test},\n)\n"
    },
    {
        "package_name": "coralogix_logger-2.0.5",
        "file_list": ".coveragerc .pylintrc AUTHORS.rst constants.py coralogix_logger.py coralogix.py debug.py __init__.py http.py manager.py case.py __init__.py test_constants.py test_coralogix.py test_debug.py test_http.py test_manager.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE LICENSE.python MANIFEST.in PKG-INFO README.rst setup.cfg setup.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nCoralogix Logger Python SDK\nAuthor: Coralogix Ltd.\nEmail: info@coralogix.com\n\"\"\"\n\nfrom setuptools import setup, find_packages\nimport coralogix\n\nsetup(\nname=coralogix.__name__,\nversion=coralogix.__version__,\nauthor=coralogix.__author__,\nauthor_email=coralogix.__email__,\nmaintainer=coralogix.__maintainer__,\nmaintainer_email=coralogix.__email__,\nurl='http:\/\/www.coralogix.com\/',\ndownload_url='https:\/\/github.com\/coralogix\/python-coralogix-sdk\/archive\/master.zip',\nlicense=coralogix.__license__,\ndescription='Coralogix Python SDK',\nlong_description=open('README.rst').read(),\npackages=find_packages(),\npython_requires='>=3.5',\ninstall_requires=[\n'requests>=2.24.0',\n],\nextras_require={\n'development': [\n'wheel>=0.31.0',\n'twine>=3.3.0',\n],\n},\ntests_require=[\n'tox',\n],\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Natural Language :: English',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: OS Independent',\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'Intended Audience :: Manufacturing',\n'Intended Audience :: Telecommunications Industry',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Internet :: Log Analysis',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: System :: Logging',\n'Topic :: System :: Monitoring',\n'Topic :: System :: Networking :: Monitoring',\n'Topic :: Utilities',\n],\nkeywords=[\n'Coralogix',\n'Logging',\n'Logger',\n],\ntest_suite='coralogix.tests',\nzip_safe=False,\ninclude_package_data=True\n)\n"
    },
    {
        "package_name": "CouchDB-1.2",
        "file_list": ".coveragerc .gitignore .travis.yml ChangeLog.rst COPYING client.py design.py http.py json.py loader.py mapping.py multipart.py client.py couchhttp.py couch_tests.py design.py loader.py mapping.py multipart.py package.py testutil.py tools.py view.py filter.js filters.xml language language.xml map.js _id __init__.py __main__.py dump.py load.py replicate.py __init__.py util.py util2.py util3.py view.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt zip-safe changes.rst client.rst conf.py getting-started.rst index.rst Makefile mapping.rst views.rst Makefile MANIFEST.in perftest.py PKG-INFO README.rst RELEASING.rst setup.cfg setup.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n#\n# Copyright (C) 2007-2009 Christopher Lenz\n# All rights reserved.\n#\n# This software is licensed as described in the file COPYING, which\n# you should have received as part of this distribution.\n\nimport sys\ntry:\nfrom setuptools import setup\nhas_setuptools = True\nexcept ImportError:\nfrom distutils.core import setup\nhas_setuptools = False\n\n\n# Build setuptools-specific options (if installed).\nif not has_setuptools:\nprint(\"WARNING: setuptools\/distribute not available. Console scripts will not be installed.\")\nsetuptools_options = {}\nelse:\nsetuptools_options = {\n'entry_points': {\n'console_scripts': [\n'couchpy = couchdb.view:main',\n'couchdb-dump = couchdb.tools.dump:main',\n'couchdb-load = couchdb.tools.load:main',\n'couchdb-replicate = couchdb.tools.replicate:main',\n'couchdb-load-design-doc = couchdb.loader:main',\n],\n},\n'install_requires': [],\n'test_suite': 'couchdb.tests.__main__.suite',\n'zip_safe': True,\n}\n\n\nsetup(\nname = 'CouchDB',\nversion = '1.2',\ndescription = 'Python library for working with CouchDB',\nlong_description = \\\n\"\"\"This is a Python library for CouchDB. It provides a convenient high level\ninterface for the CouchDB server.\"\"\",\nauthor = 'Christopher Lenz',\nauthor_email = 'cmlenz@gmx.de',\nmaintainer = 'Dirkjan Ochtman',\nmaintainer_email = 'dirkjan@ochtman.nl',\nlicense = 'BSD',\nurl = 'https:\/\/github.com\/djc\/couchdb-python\/',\nclassifiers = [\n'Development Status :: 6 - Mature',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Topic :: Database :: Front-Ends',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\npackages = ['couchdb', 'couchdb.tools', 'couchdb.tests'],\n**setuptools_options\n)\n"
    },
    {
        "package_name": "courlan-0.8.3",
        "file_list": "CONTRIBUTING.md clean.py cli.py core.py filters.py langinfo.py network.py py.typed settings.py urlstore.py urlutils.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt courlan_harns-march.jpg HISTORY.md LICENSE MANIFEST.in PKG-INFO pytest.ini README.rst setup.cfg setup.py input.txt unit_tests.py urlstore_tests.py __init__.py",
        "setup.py": "\"\"\"\nURL filter and manipulation tools\nhttps:\/\/github.com\/adbar\/courlan\n\"\"\"\n\nimport re\nimport sys\n\nfrom pathlib import Path\nfrom setuptools import setup\n\n\ndef get_version(package):\n\"Return package version as listed in `__version__` in `init.py`\"\ninitfile = Path(package, '__init__.py').read_text() # Python >= 3.5\nreturn re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", initfile)[1]\n\n\ndef get_long_description():\n\"Return the README\"\nwith open(\"README.rst\", \"r\", encoding=\"utf-8\") as filehandle:\nlong_description = filehandle.read()\n# long_description += \"\\n\\n\"\n# with open(\"CHANGELOG.md\", encoding=\"utf8\") as f:\n# long_description += f.read()\nreturn long_description\n\n\n# add argument to compile with mypyc\nif len(sys.argv) > 1 and sys.argv[1] == \"--use-mypyc\":\nsys.argv.pop(1)\nUSE_MYPYC = True\nfrom mypyc.build import mypycify\n\next_modules = mypycify(\n[\n\"courlan\/__init__.py\",\n\"courlan\/clean.py\",\n\"courlan\/core.py\",\n\"courlan\/filters.py\",\n\"courlan\/settings.py\",\n\"courlan\/urlstore.py\",\n\"courlan\/urlutils.py\",\n],\nopt_level=\"3\",\nmulti_file=True,\n)\nelse:\next_modules = []\n\n\nsetup(\nname=\"courlan\",\nversion=get_version(\"courlan\"),\ndescription=\"Clean, filter and sample URLs to optimize data collection \u2013 includes spam, content type and language filters.\",\nlong_description=get_long_description(),\nclassifiers=[\n# As from http:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n\"Development Status :: 4 - Beta\",\n#'Development Status :: 5 - Production\/Stable',\n#'Development Status :: 6 - Mature',\n\"Environment :: Console\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Education\",\n\"Intended Audience :: Information Technology\",\n\"Intended Audience :: Science\/Research\",\n\"License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: POSIX :: Linux\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3.11\",\n\"Topic :: Internet :: WWW\/HTTP\",\n\"Topic :: Scientific\/Engineering :: Information Analysis\",\n\"Topic :: Text Processing :: Filters\",\n\"Topic :: Text Processing :: Linguistic\",\n],\nkeywords=[\n\"cleaner\",\n\"crawler\",\n\"preprocessing\",\n\"url-parsing\",\n\"url-manipulation\",\n\"urls\",\n\"validation\",\n\"webcrawling\",\n],\nurl=\"https:\/\/github.com\/adbar\/courlan\",\nauthor=\"Adrien Barbaresi\",\nauthor_email=\"barbaresi@bbaw.de\",\nlicense=\"GPLv3+\",\npackages=[\"courlan\"],\nproject_urls={\n\"Blog\": \"https:\/\/adrien.barbaresi.eu\/blog\/\", # \/tag\/courlan.html\n\"Tracker\": \"https:\/\/github.com\/adbar\/courlan\/issues\",\n},\n# package_data={},\ninclude_package_data=True,\npython_requires=\">=3.6\",\ninstall_requires=[\n\"langcodes >= 3.3.0\",\n\"tld >= 0.12.6\",\n\"urllib3 >= 1.26, < 2\",\n],\n# extras_require=extras,\nentry_points={\n\"console_scripts\": [\"courlan=courlan.cli:main\"],\n},\n# platforms='any',\ntests_require=[\"pytest\"],\nzip_safe=False,\n# mypyc or not\next_modules=ext_modules,\n)\n"
    },
    {
        "package_name": "coveralls-3.3.1",
        "file_list": "CHANGELOG.md api.py cli.py exception.py git.py reporter.py version.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "import os\n\nfrom setuptools import setup\n\n\nVERSION_FILE = os.path.join(os.path.abspath(os.path.dirname(__file__)),\n'coveralls', 'version.py')\n\nwith open('README.rst') as f:\nDESCRIPTION = f.read()\n\nwith open(VERSION_FILE) as f:\nVERSION = f.read().split()[2][1:-1]\n\n\nsetup(\nname='coveralls',\nversion=VERSION,\npackages=['coveralls'],\nurl='http:\/\/github.com\/TheKevJames\/coveralls-python',\nproject_urls={\n'Changelog': ('https:\/\/github.com\/TheKevJames\/coveralls-python\/'\n'blob\/master\/CHANGELOG.md'),\n'Docs': 'https:\/\/coveralls-python.rtfd.io\/',\n},\nlicense='MIT',\nauthor='TheKevJames',\ndescription='Show coverage stats online via coveralls.io',\nlong_description=DESCRIPTION,\nentry_points={\n'console_scripts': [\n'coveralls = coveralls.cli:main',\n],\n},\npython_requires='>= 3.5',\ninstall_requires=[\n'coverage>=4.1,<7.0,!=6.0.*,!=6.1,!=6.1.1',\n'docopt>=0.6.1',\n'requests>=1.0.0',\n],\ntests_require=['mock', 'responses', 'pytest'],\nextras_require={\n'yaml': ['PyYAML>=3.10'],\n},\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Topic :: Software Development :: Testing',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n],\n)\n"
    },
    {
        "package_name": "crc32c-2.3",
        "file_list": "AUTHORS.google-crc32c checkarm.c checkarm.h checksse42.c checksse42.h common.h dependency_links.txt PKG-INFO SOURCES.txt top_level.txt crc32c.h crc32c_adler.c crc32c_arm64.c crc32c_sw.c LICENSE LICENSE.google-crc32c LICENSE.slice-by-8 MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_crc32c.py _crc32c.c",
        "setup.py": "#\n# ICRAR - International Centre for Radio Astronomy Research\n# (c) UWA - The University of Western Australia, 2014\n# Copyright by UWA (in the framework of the ICRAR)\n# All rights reserved\n#\n# This library is free software; you can redistribute it and\/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation; either\n# version 2.1 of the License, or (at your option) any later version.\n#\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place, Suite 330, Boston,\n# MA 02111-1307 USA\n#\nimport glob\nimport sysconfig\n\nimport distutils.ccompiler\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\n\n\ncrcmod_ext = Extension('crc32c',\ndefine_macros=[('NDEBUG', None)],\ndepends=glob.glob('*.h'),\nlanguage='c',\nsources=['_crc32c.c', 'checkarm.c', 'checksse42.c', 'crc32c_adler.c', 'crc32c_arm64.c', 'crc32c_sw.c'],\ninclude_dirs=['.'])\n\ndef get_extra_compile_args(is_intel, is_arm):\n# msvc is treated specially; otherwise we assume it's a unix compiler\ncomp = distutils.ccompiler.get_default_compiler()\nif comp == 'msvc':\nreturn ['\/O2']\nelif is_intel:\nreturn ['-O3', '-msse4.2', '-mpclmul']\nelif is_arm:\nreturn ['-O3', '-march=armv8-a+crc+crypto']\nelse:\nreturn ['-O3']\n\nclass _build_ext(build_ext):\n\"\"\"Custom build_ext command that includes extra compilation arguments\"\"\"\n\nuser_options = build_ext.user_options + [\n('platform=', None, 'The target platform name')]\n\ndef initialize_options(self):\nbuild_ext.initialize_options(self)\nself.platform = sysconfig.get_platform()\n\ndef run(self):\nassert(len(self.distribution.ext_modules) == 1)\nplatform = self.platform.lower()\nis_arm = any(arch in platform for arch in ('aarch64_be', 'aarch64', 'armv8b', 'armv8l', 'universal2'))\nis_intel = any(arch in platform for arch in ('x86_64', 'amd64', 'i386', 'i686', 'universal2'))\ndistutils.log.info(\"platform: %s, is_intel: %d, is_arm: %d\", platform, is_intel, is_arm)\nself.distribution.ext_modules[0].extra_compile_args = get_extra_compile_args(is_intel, is_arm)\nbuild_ext.run(self)\n\n\nclassifiers = [\n# There's no more specific classifier for LGPLv2.1+\n\"License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: C\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3.2\",\n\"Programming Language :: Python :: 3.3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n]\n\nwith open('README.rst', 'rt') as f:\nlong_description = f.read()\n\nsetup(name='crc32c',\nauthor='The ICRAR DIA Team',\nurl='https:\/\/github.com\/ICRAR\/crc32c',\nauthor_email='rtobar@icrar.org',\nversion='2.3',\nlicense=\"LGPLv2.1+\",\ndescription=('A python package implementing the crc32c algorithm'\n' in hardware and software'),\nlong_description=long_description,\nlong_description_content_type='text\/x-rst',\nclassifiers=classifiers,\next_modules=[crcmod_ext],\ncmdclass = {'build_ext': _build_ext},\ntest_suite=\"test\")\n"
    },
    {
        "package_name": "cryptg-0.3.1",
        "file_list": "Cargo.toml __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt LICENSE.txt LICENSE.grammers-crypto LICENSE.pyo3 MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py lib.rs",
        "setup.py": "#!\/usr\/bin\/env python3\n\nimport sys\nimport os\n\nfrom setuptools import find_packages, setup\nfrom setuptools_rust import RustExtension\n\nPACKAGE_NAME = \"cryptg\"\nPACKAGE_VERSION = \"0.3.1\"\nENVVAR_VERSION_SUFFIX = \"PYPI_SETUP_VERSION_SUFFIX\"\n\n\ndef main(args):\nwith open(\"README.rst\", encoding='utf-8') as f:\nlong_description = f.read()\n\nurl = \"https:\/\/github.com\/cher-nov\/\" + PACKAGE_NAME\n\nsetup(\nname=PACKAGE_NAME,\nversion=PACKAGE_VERSION+os.environ.get(ENVVAR_VERSION_SUFFIX, \"\"),\ndescription=\"Cryptographic utilities for Telegram.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/x-rst\",\n\nurl=url,\ndownload_url=url+\"\/releases\",\n\nauthor=\"Dmitry D. Chernov; Lonami E\",\nauthor_email=\"blackdoomer@yandex.ru\",\n\nlicense=\"CC0\",\n\n# https:\/\/pypi.python.org\/pypi?:action=list_classifiers\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\n\"Intended Audience :: Developers\",\n\"Topic :: Security :: Cryptography\",\n\n\"License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication\",\n\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\nkeywords=\"telegram crypto cryptography mtproto aes\",\n\npackages=find_packages(),\npython_requires=\">=3.3\",\nrust_extensions=[RustExtension(\"cryptg.cryptg\")],\nzip_safe=False,\n)\n\n\nif __name__ == '__main__':\nmain(sys.argv)\n"
    },
    {
        "package_name": "cryptography-37.0.4",
        "file_list": "CHANGELOG.rst CONTRIBUTING.rst api-stability.rst changelog.rst community.rst conf.py c-bindings.rst generate_arc4.py verify_arc4.go arc4.rst generate_cast5.py verify_cast5.go cast5.rst generate_hkdf.py verify_hkdf.go hkdf.rst generate_idea.py verify_idea.py idea.rst generate_rsa_oaep_sha2.py VerifyRSAOAEPSHA2.java rsa-oaep-sha2.rst generate_secp256k1.py verify_secp256k1.py secp256k1.rst generate_seed.py verify_seed.py seed.rst getting-started.rst index.rst reviewing-patches.rst submitting-patches.rst test-vectors.rst doing-a-release.rst exceptions.rst faq.rst fernet.rst glossary.rst aead.rst dh.rst dsa.rst ec.rst ed25519.rst ed448.rst index.rst rsa.rst serialization.rst utils.rst x25519.rst x448.rst constant-time.rst cryptographic-hashes.rst index.rst key-derivation-functions.rst keywrap.rst cmac.rst hmac.rst index.rst poly1305.rst padding.rst symmetric-encryption.rst twofactor.rst index.rst installation.rst limitations.rst make.bat Makefile openssl.rst random-numbers.rst security.rst spelling_wordlist.txt certificate-transparency.rst index.rst ocsp.rst reference.rst tutorial.rst cryptography-docs.py linkcode_res.py .keep LICENSE LICENSE.APACHE LICENSE.BSD LICENSE.PSF MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py exceptions.py fernet.py aead.py backend.py ciphers.py cmac.py decode_asn1.py dh.py dsa.py ec.py ed25519.py ed448.py encode_asn1.py hashes.py hmac.py poly1305.py rsa.py utils.py x25519.py x448.py x509.py __init__.py __init__.py binding.py _conditional.py __init__.py asn1.pyi ocsp.pyi x509.pyi __init__.pyi __init__.py dh.py dsa.py ec.py ed25519.py ed448.py padding.py rsa.py types.py utils.py x25519.py x448.py __init__.py aead.py algorithms.py base.py modes.py __init__.py cmac.py constant_time.py hashes.py hmac.py concatkdf.py hkdf.py kbkdf.py pbkdf2.py scrypt.py x963kdf.py __init__.py keywrap.py padding.py poly1305.py base.py pkcs12.py pkcs7.py ssh.py __init__.py hotp.py totp.py __init__.py _asymmetric.py _cipheralgorithm.py _serialization.py __init__.py _oid.py __init__.py py.typed utils.py base.py certificate_transparency.py extensions.py general_name.py name.py ocsp.py oid.py __init__.py __about__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt Cargo.lock Cargo.toml asn1.rs lib.rs certificate.rs common.rs crl.rs csr.rs extensions.rs mod.rs ocsp.rs ocsp_req.rs ocsp_resp.rs oid.rs sct.rs sign.rs build_openssl.py asn1.py bignum.py bio.py callbacks.py cmac.py conf.py crypto.py cryptography.py dh.py dsa.py ec.py ecdh.py ecdsa.py engine.py err.py evp.py fips.py hmac.py nid.py objects.py opensslv.py osrandom_engine.py pem.py pkcs12.py pkcs7.py provider.py rand.py rsa.py osrandom_engine.c osrandom_engine.h ssl.py x509.py x509name.py x509v3.py x509_vfy.py __init__.py utils.py __init__.py test_x509.py conftest.py deprecated_module.py doubles.py test_openssl.py test_openssl_memleak.py __init__.py test_openssl.py fixtures_dh.py fixtures_dsa.py fixtures_ec.py fixtures_rsa.py test_3des.py test_aead.py test_aes.py test_aes_gcm.py test_arc4.py test_asym_utils.py test_block.py test_blowfish.py test_camellia.py test_cast5.py test_chacha20.py test_ciphers.py test_cmac.py test_concatkdf.py test_constant_time.py test_dh.py test_dsa.py test_ec.py test_ed25519.py test_ed448.py test_hashes.py test_hash_vectors.py test_hkdf.py test_hkdf_vectors.py test_hmac.py test_hmac_vectors.py test_idea.py test_kbkdf.py test_kbkdf_vectors.py test_keywrap.py test_padding.py test_pbkdf2hmac.py test_pbkdf2hmac_vectors.py test_pkcs12.py test_pkcs7.py test_poly1305.py test_rsa.py test_scrypt.py test_seed.py test_serialization.py test_sm4.py test_x25519.py test_x448.py test_x963kdf.py test_x963_vectors.py test_hotp.py test_totp.py __init__.py utils.py __init__.py test_oid.py __init__.py test_fernet.py test_padding.py test_x509.py __init__.py test_cryptography_utils.py test_fernet.py test_interfaces.py test_meta.py test_utils.py test_warnings.py utils.py test_aes.py test_chacha20poly1305.py test_cmac.py test_dsa.py test_ecdh.py test_ecdsa.py test_eddsa.py test_hkdf.py test_hmac.py test_keywrap.py test_rsa.py test_utils.py test_x25519.py test_x448.py utils.py __init__.py test_name.py test_ocsp.py test_x509.py test_x509_crlbuilder.py test_x509_ext.py test_x509_revokedcertbuilder.py __init__.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n# This file is dual licensed under the terms of the Apache License, Version\n# 2.0, and the BSD License. See the LICENSE file in the root of this repository\n# for complete details.\n\nimport os\nimport platform\nimport sys\n\nfrom setuptools import setup\n\ntry:\nfrom setuptools_rust import RustExtension\nexcept ImportError:\nprint(\n\"\"\"\n=============================DEBUG ASSISTANCE==========================\nIf you are seeing an error here please try the following to\nsuccessfully install cryptography:\n\nUpgrade to the latest pip and try again. This will fix errors for most\nusers. See: https:\/\/pip.pypa.io\/en\/stable\/installing\/#upgrading-pip\n=============================DEBUG ASSISTANCE==========================\n\"\"\"\n)\nraise\n\n\nbase_dir = os.path.dirname(__file__)\nsrc_dir = os.path.join(base_dir, \"src\")\n\n# When executing the setup.py, we need to be able to import ourselves, this\n# means that we need to add the src\/ directory to the sys.path.\nsys.path.insert(0, src_dir)\n\ntry:\n# See setup.cfg for most of the config metadata.\nsetup(\ncffi_modules=[\n\"src\/_cffi_src\/build_openssl.py:ffi\",\n],\nrust_extensions=[\nRustExtension(\n\"_rust\",\n\"src\/rust\/Cargo.toml\",\npy_limited_api=True,\n# Enable abi3 mode if we're not using PyPy.\nfeatures=(\n[]\nif platform.python_implementation() == \"PyPy\"\nelse [\"pyo3\/abi3-py36\"]\n),\nrust_version=\">=1.41.0\",\n)\n],\n)\nexcept: # noqa: E722\n# Note: This is a bare exception that re-raises so that we don't interfere\n# with anything the installation machinery might want to do. Because we\n# print this for any exception this msg can appear (e.g. in verbose logs)\n# even if there's no failure. For example, SetupRequirementsError is raised\n# during PEP517 building and prints this text. setuptools raises SystemExit\n# when compilation fails right now, but it's possible this isn't stable\n# or a public API commitment so we'll remain ultra conservative.\n\nimport pkg_resources\n\nprint(\n\"\"\"\n=============================DEBUG ASSISTANCE=============================\nIf you are seeing a compilation error please try the following steps to\nsuccessfully install cryptography:\n1) Upgrade to the latest pip and try again. This will fix errors for most\nusers. See: https:\/\/pip.pypa.io\/en\/stable\/installing\/#upgrading-pip\n2) Read https:\/\/cryptography.io\/en\/latest\/installation\/ for specific\ninstructions for your platform.\n3) Check our frequently asked questions for more information:\nhttps:\/\/cryptography.io\/en\/latest\/faq\/\n4) Ensure you have a recent Rust toolchain installed:\nhttps:\/\/cryptography.io\/en\/latest\/installation\/#rust\n\"\"\"\n)\nprint(f\" Python: {'.'.join(str(v) for v in sys.version_info[:3])}\")\nprint(f\" platform: {platform.platform()}\")\nfor dist in [\"pip\", \"setuptools\", \"setuptools_rust\"]:\ntry:\nversion = pkg_resources.get_distribution(dist).version\nexcept pkg_resources.DistributionNotFound:\nversion = \"n\/a\"\nprint(f\" {dist}: {version}\")\nprint(\n\"\"\"\\\n=============================DEBUG ASSISTANCE=============================\n\"\"\"\n)\nraise\n"
    },
    {
        "package_name": "curatorbin-1.2.4",
        "file_list": "curator curator curator curator curator.exe __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO pyproject.toml README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python3\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nsetup(\nname=\"curatorbin\",\nversion=\"1.2.4\",\ndescription=\"install curator through pip and run it through python\",\nurl=\"https:\/\/github.com\/evergreen-ci\/curatorbin\",\nlicense=\"SSPLv1\",\nauthor=\"Harris Hoke\",\nauthor_email=\"harris.hoke@mongodb.com\",\nclassifiers=[\n\"Environment :: Console\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: POSIX :: Linux\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3.9\",\n],\npackages=[\"curatorbin\"],\npackage_data={\n\"curatorbin\": [\n\"arm\/curator\",\n\"macos\/curator\",\n\"macos-arm64\/curator\",\n\"ubuntu\/curator\",\n\"windows-64\/curator.exe\"\n]\n}\n)\n\n"
    },
    {
        "package_name": "curtsies-0.3.10",
        "file_list": "configfile_keynames.py curtsieskeys.py escseqparse.py events.py fmtfuncs.py formatstring.py formatstringarray.py input.py py.typed termformatconstants.py termhelpers.py window.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt chat.py curses_keys.py demo_fullscreen_window.py demo_fullscreen_with_input.py demo_input_paste.py demo_input_timeout.py demo_scrolling.py demo_window.py fps.py gameexample.py initial_input.py initial_input_with_cursor.py quickstart.py realtime.py simple.py snake.py sumtest.py testcache.py tictactoeexample.py tron.py tttplaybitboard.py LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py test_configfile_keynames.py test_events.py test_fmtstr.py test_input.py test_terminal.py test_window.py",
        "setup.py": "from setuptools import setup\nimport ast\nimport os\n\n\ndef version():\n\"\"\"Return version string.\"\"\"\nwith open(os.path.join(\"curtsies\", \"__init__.py\")) as input_file:\nfor line in input_file:\nif line.startswith(\"__version__\"):\nreturn ast.parse(line).body[0].value.s\n\n\nsetup(\nversion=version(),\n)\n"
    },
    {
        "package_name": "cyrtranslit-1.0",
        "file_list": "mapping.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from distutils.core import setup\nsetup(\nname='cyrtranslit',\npackages=['cyrtranslit'],\nversion='1.0',\ndescription='Bi-directional Cyrillic transliteration. Transliterate Cyrillic script to Latin script and vice versa.',\nauthor='Georges Labr\u00e8che, Open Data Kosovo',\nauthor_email='georges@tanagraspace.com',\nurl='https:\/\/github.com\/opendatakosovo\/cyrillic-transliteration',\ndownload_url='https:\/\/github.com\/opendatakosovo\/cyrillic-transliteration\/archive\/v1.0.tar.gz',\nlicense='MIT',\nlong_description='Transliteration is the conversion of a text from one script to another. Current version supports transliteration for Bulgarian, Montenegrin, Macedonian, Russian, Serbian, Tajik, and Ukrainian.',\nkeywords=['cyrillic', 'latin', 'transliteration', 'transliterate', 'cyrtranslit', 'bulgarian', 'montenegrin', 'macedonian', 'russian', 'serbian', 'tajik', 'ukrainian'],\nclassifiers=['Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8'],\n)\n"
    },
    {
        "package_name": "daemonize-2.5.0",
        "file_list": "dependency_links.txt PKG-INFO SOURCES.txt top_level.txt daemonize.py conf.py index.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/python\n\nimport re\nimport ast\n\nfrom setuptools import setup, find_packages\n\n_version_re = re.compile(r'__version__\\s+=\\s+(.*)')\n\n\nwith open('daemonize.py', 'rb') as f:\nversion = str(ast.literal_eval(_version_re.search(\nf.read().decode('utf-8')).group(1)))\n\nsetup(\nname=\"daemonize\",\nversion=version,\npy_modules=[\"daemonize\"],\nauthor=\"Ilya Otyutskiy\",\nauthor_email=\"ilya.otyutskiy@icloud.com\",\nmaintainer=\"Ilya Otyutskiy\",\nurl=\"https:\/\/github.com\/thesharp\/daemonize\",\ndescription=\"Library to enable your code run as a daemon process on Unix-like systems.\",\nlicense=\"MIT\",\nclassifiers=[\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Console\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Operating System :: POSIX :: Linux\",\n\"Operating System :: POSIX :: BSD :: FreeBSD\",\n\"Operating System :: POSIX :: BSD :: OpenBSD\",\n\"Operating System :: POSIX :: BSD :: NetBSD\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2.6\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Topic :: Software Development\"]\n)\n"
    },
    {
        "package_name": "dag-factory-0.13.0",
        "file_list": "dagbuilder.py dagfactory.py utils.py __init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n# $ pip install twine\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\n\nfrom setuptools import find_packages, setup, Command\n\n# Package meta-data.\nNAME = \"dag-factory\"\nPKG_NAME = \"dagfactory\"\nDESCRIPTION = \"Dynamically build Airflow DAGs from YAML files\"\nURL = \"https:\/\/github.com\/ajbosco\/dag-factory\"\nEMAIL = \"adam@boscarino.me\"\nAUTHOR = \"Adam Boscarino\"\nREQUIRES_PYTHON = \">=3.6.0\"\nVERSION = None\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nREQUIRED = [\"apache-airflow[http,kubernetes]>=1.10.0\", \"pyyaml\", \"packaging\"]\nDEV_REQUIRED = [\"black\", \"pytest\", \"pylint\", \"pytest-cov\", \"tox\"]\n\ntry:\nwith io.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\nlong_description = \"\\n\" + f.read()\nexcept FileNotFoundError:\nlong_description = DESCRIPTION\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nif not VERSION:\nwith open(os.path.join(here, PKG_NAME, \"__version__.py\")) as f:\nexec(f.read(), about)\nelse:\nabout[\"__version__\"] = VERSION\n\n\nclass UploadCommand(Command):\n\"\"\"Support setup.py upload.\"\"\"\n\ndescription = \"Build and publish the package.\"\nuser_options = []\n\n@staticmethod\ndef status(s):\n\"\"\"Prints things in bold.\"\"\"\nprint(\"\\033[1m{0}\\033[0m\".format(s))\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\ntry:\nself.status(\"Removing previous builds\u2026\")\nrmtree(os.path.join(here, \"dist\"))\nexcept OSError:\npass\n\nself.status(\"Building Source and Wheel (universal) distribution\u2026\")\nos.system(\"{0} setup.py sdist bdist_wheel --universal\".format(sys.executable))\n\nself.status(\"Uploading the package to PyPI via Twine\u2026\")\nos.system(\"twine upload dist\/*\")\n\nself.status(\"Pushing git tags\u2026\")\nos.system(\"git tag v{0}\".format(about[\"__version__\"]))\nos.system(\"git push --tags\")\n\nsys.exit()\n\n\nsetup(\nname=NAME,\nversion=about[\"__version__\"],\ndescription=DESCRIPTION,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nauthor=AUTHOR,\nauthor_email=EMAIL,\npython_requires=REQUIRES_PYTHON,\nurl=URL,\npackages=find_packages(exclude=(\"tests\",)),\ninstall_requires=REQUIRED,\nextras_require={\"dev\": DEV_REQUIRED},\ninclude_package_data=True,\nlicense=\"MIT\",\nkeywords=\"airflow\",\nclassifiers=[\n# Trove classifiers\n# Full list: https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n],\n# $ setup.py publish support.\ncmdclass={\"upload\": UploadCommand},\n)\n"
    },
    {
        "package_name": "dagster_cloud_cli-1.0.3",
        "file_list": "__init__.py config.py commands.py config_schema.py __init__.py __init__.py __init__.py commands.py __init__.py __init__.py sync_method.py utils.py __init__.py Dockerfile __init__.py __init__.py __init__.py config_utils.py errors.py graphql_client.py auth.py impl.py constants.py __init__.py __init__.py workspace.py _utils.py __init__.py entrypoint.py gql.py ui.py utils.py version.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt __init__.py MANIFEST.in PKG-INFO setup.cfg setup.py",
        "setup.py": "from typing import Dict\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version() -> str:\nversion: Dict[str, str] = {}\nwith open(\"dagster_cloud_cli\/version.py\", encoding=\"utf8\") as fp:\nexec(fp.read(), version) # pylint: disable=W0122\n\nreturn version[\"__version__\"]\n\n\nsetup(\nname=\"dagster_cloud_cli\",\nversion=get_version(),\nauthor_email=\"hello@elementl.com\",\npackages=find_packages(exclude=[\"dagster_cloud.cli_tests*\"]),\ninclude_package_data=True,\ninstall_requires=[\n\"packaging>=20.9\",\n\"questionary\",\n\"requests\",\n\"typer[all]\",\n\"PyYAML>=5.1\",\n],\nextras_require={},\nauthor=\"Elementl\",\nlicense=\"Apache-2.0\",\nclassifiers=[\n\"Programming Language :: Python :: 3.8\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: OS Independent\",\n],\nentry_points={\n\"console_scripts\": [\n\"dagster-cloud = dagster_cloud_cli.entrypoint:app\",\n]\n},\n)\n"
    },
    {
        "package_name": "dagster-postgres-0.16.3",
        "file_list": "alembic.ini event_log.py event_watcher.py __init__.py py.typed pynotify.py run_storage.py __init__.py schedule_storage.py __init__.py storage.py utils.py version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from typing import Dict\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version() -> str:\nversion: Dict[str, str] = {}\nwith open(\"dagster_postgres\/version.py\", encoding=\"utf8\") as fp:\nexec(fp.read(), version) # pylint: disable=W0122\n\nreturn version[\"__version__\"]\n\n\nif __name__ == \"__main__\":\nver = get_version()\n# dont pin dev installs to avoid pip dep resolver issues\npin = \"\" if ver == \"0+dev\" else f\"=={ver}\"\nsetup(\nname=\"dagster-postgres\",\nversion=ver,\nauthor=\"Elementl\",\nauthor_email=\"hello@elementl.com\",\nlicense=\"Apache-2.0\",\ndescription=\"A Dagster integration for postgres\",\nurl=\"https:\/\/github.com\/dagster-io\/dagster\/tree\/master\/python_modules\/libraries\/dagster-postgres\",\nclassifiers=[\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: OS Independent\",\n],\npackages=find_packages(exclude=[\"dagster_postgres_tests*\"]),\npackage_data={\n\"dagster-postgres\": [\n\"dagster_postgres\/alembic\/*\",\n]\n},\ninclude_package_data=True,\ninstall_requires=[\"dagster==1.0.3\", \"psycopg2-binary\"],\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "dash_cytoscape-0.3.0",
        "file_list": "Cytoscape.py dash_cytoscape.dev.js dash_cytoscape.min.js dash_cytoscape_extra.dev.js dash_cytoscape_extra.min.js metadata.json package.json Tree.py __init__.py _imports_.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import io\nimport json\nimport os\nfrom setuptools import setup, find_packages\n\n\nwith open('package.json') as f:\npackage = json.load(f)\n\npackage_name = package[\"name\"].replace(\" \", \"_\").replace(\"-\", \"_\")\n\nsetup(\nname=package_name,\nversion=package[\"version\"],\nauthor=package['author'],\nauthor_email=package['author-email'],\npackages=find_packages(include=[package_name, package_name + \".*\"]),\ninclude_package_data=True,\nlicense=package['license'],\ndescription=package['description'] if 'description' in package else package_name,\nlong_description=io.open('README.md', encoding='utf-8').read(),\nlong_description_content_type='text\/markdown',\nurl='https:\/\/dash.plotly.com\/cytoscape',\ninstall_requires=[\n'dash',\n],\nclassifiers=[\n'Environment :: Web Environment',\n'Framework :: Flask',\n'Intended Audience :: Developers',\n'Intended Audience :: Education',\n'Intended Audience :: Financial and Insurance Industry',\n'Intended Audience :: Healthcare Industry',\n'Intended Audience :: Manufacturing',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Topic :: Database :: Front-Ends',\n'Topic :: Scientific\/Engineering :: Visualization',\n'Topic :: Software Development :: Libraries :: Application Frameworks',\n]\n)\n"
    },
    {
        "package_name": "dask-glm-0.2.0",
        "file_list": ".coverage .coveragerc .flake8 .gitignore .travis.yml algorithms.py datasets.py estimators.py families.py regularizers.py test_admm.py test_algos_families.py test_estimators.py test_regularizers.py test_utils.py utils.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt api.rst conf.py estimators.rst AccuracyBook.ipynb basic_api.ipynb ElasticNetProximalOperatorDerivation.ipynb sigmoid.ipynb examples.rst index.rst make.bat Makefile requirements_all.txt environment.yml LICENSE.txt MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom os.path import exists\nfrom setuptools import setup\n\n\nsetup(name='dask-glm',\ndescription='Generalized Linear Models with Dask',\nurl='http:\/\/github.com\/dask\/dask-glm\/',\nmaintainer='Matthew Rocklin',\nmaintainer_email='mrocklin@gmail.com',\nlicense='BSD',\nkeywords='dask,glm',\npackages=['dask_glm'],\nlong_description=(open('README.rst').read() if exists('README.rst')\nelse ''),\ninstall_requires=list(open('requirements.txt').read().strip().split('\\n')),\nuse_scm_version=True,\nsetup_requires=['setuptools_scm'],\nextras_require={\n'docs': [\n'jupyter',\n'nbsphinx',\n'notebook',\n'numpydoc',\n'sphinx',\n'sphinx_rtd_theme',\n]\n},\nzip_safe=False)\n"
    },
    {
        "package_name": "dataclasses-0.8",
        "file_list": "dependency_links.txt PKG-INFO SOURCES.txt top_level.txt dataclasses.py dataclass_tools.py LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py dataclass_module_1.py dataclass_module_1_str.py dataclass_module_2.py dataclass_module_2_str.py test_dataclasses.py",
        "setup.py": "from setuptools import setup\n\nwith open(\"README.rst\") as readme:\nREADME = readme.read()\n\nsetup(\nname=\"dataclasses\",\nversion=\"0.8\",\ndescription=\"A backport of the dataclasses module for Python 3.6\",\nlong_description=README,\nurl=\"https:\/\/github.com\/ericvsmith\/dataclasses\",\nauthor=\"Eric V. Smith\",\nauthor_email=\"eric@python.org\",\nlicense=\"Apache\",\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3.6\",\n],\npy_modules=[\"dataclasses\"],\npython_requires=\">=3.6, <3.7\",\n)\n"
    },
    {
        "package_name": "dataclasses-0.5.7",
        "file_list": null,
        "setup.py": null
    },
    {
        "package_name": "datadog-logger-0.3.0",
        "file_list": "handler.py __init__.py PKG-INFO setup.py",
        "setup.py": "from distutils.core import setup\n\n\nsetup(name=\"datadog-logger\",\nversion=\"0.3.0\",\ndescription=\"Python logging handler for DataDog events\",\nurl=\"https:\/\/github.com\/ustudio\/datadog-logger\",\npackages=[\"datadog_logger\"],\ninstall_requires=[\"datadog\"])\n"
    },
    {
        "package_name": "datasets-2.4.0",
        "file_list": ".DS_Store acronym_identification.py acronym_identification.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md ade_corpus_v2.py ade_corpus_v2.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip README.md aeslc.py aeslc.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock afrikaans_ner_corpus.py afrikaans_ner_corpus.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md ag_news.py ag_news.py.lock dataset_infos.json .DS_Store .DS_Store dummy_data.zip dummy_data.zip.lock ai2_arc.py ai2_arc.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip air_dialogue.py air_dialogue.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip README.md ajgt_twitter_ar.py ajgt_twitter_ar.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md allegro_reviews.py allegro_reviews.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md allocine.py allocine.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md alt.py alt.py.lock dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip.lock README.md amazon_polarity.py amazon_polarity.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md amazon_reviews_multi.py amazon_reviews_multi.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip README.md amazon_us_reviews.py amazon_us_reviews.py.lock dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip.lock ambig_qa.py ambig_qa.py.lock dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip.lock README.md amttl.py amttl.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md anli.py anli.py.lock dataset_infos.json .DS_Store .DS_Store .DS_Store dummy_data.zip dummy_data.zip.lock .DS_Store .DS_Store app_reviews.py app_reviews.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md aquamuse.py aquamuse.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip README.md aqua_rat.py aqua_rat.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip README.md arabic_billion_words.py arabic_billion_words.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip README.md arabic_pos_dialect.py arabic_pos_dialect.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip README.md arcd.py arcd.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock arsentd_lev.py arsentd_lev.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md art.py art.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock arxiv_dataset.py arxiv_dataset.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md ar_cov19.py ar_cov19.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md ar_res_reviews.py ar_res_reviews.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md aslg_pc12.py aslg_pc12.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock asnq.py asnq.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock asset.py asset.py.lock dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip.lock README.md assin.py assin.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip README.md assin2.py assin2.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md atomic.py atomic.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md autshumato.py autshumato.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip README.md bc2gm_corpus.py bc2gm_corpus.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md best2009.py best2009.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md bianet.py bianet.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip README.md bible_para.py bible_para.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip README.md big_patent.py big_patent.py.lock dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip README.md billsum.py billsum.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock bing_coronavirus_query_set.py bing_coronavirus_query_set.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md biomrc.py biomrc.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip blended_skill_talk.py blended_skill_talk.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock blimp.py blimp.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip blog_authorship_corpus.py blog_authorship_corpus.py.lock dataset_infos.json dummy_data.zip.lock bn_hate_speech.py bn_hate_speech.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md bookcorpus.py bookcorpus.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock bookcorpusopen.py bookcorpusopen.py.lock dataset_infos.json .DS_Store .DS_Store .DS_Store dummy_data.zip dummy_data.zip.lock boolq.py boolq.py.lock dataset_infos.json dev.jsonl train.jsonl dummy_data.zip dummy_data.zip.lock bprec.py bprec.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip README.md break_data.py break_data.py.lock dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip brwac.py brwac.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md bsd_ja_en.py bsd_ja_en.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md bswac.py bswac.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md c3.py c3.py.lock dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip.lock README.md c4.py c4.py.lock cail2018.py cail2018.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md capes.py capes.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md catalonia_independence.py catalonia_independence.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip README.md cawac.py cawac.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md cc100.py cc100.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip README.md cdsc.py cdsc.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip README.md cdt.py cdt.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md cfq.py cfq.py.lock dataset_infos.json copy.sh dummy_data_copy.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip chr_en.py chr_en.py.lock dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip README.md cifar10.py cifar10.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md circa.py circa.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md civil_comments.py civil_comments.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock clickbait_news_bg.py clickbait_news_bg.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md climate_fever.py climate_fever.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md clinc_oos.py clinc_oos.py.lock dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip.lock README.md clue.py clue.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip cmrc2018.py cmrc2018.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock .DS_Store cnn_dailymail.py cnn_dailymail.py.lock dataset_infos.json .DS_Store .DS_Store dummy_data.zip .DS_Store dummy_data.zip .DS_Store .DS_Store dummy_data.zip dummy_data.zip.lock README.md coached_conv_pref.py coached_conv_pref.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md coarse_discourse.py coarse_discourse.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock codah.py codah.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip README.md code_search_net.py code_search_net.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip README.md commonsense_qa.py commonsense_qa.py.lock dataset_infos.json dummy_data.zip.lock common_gen.py common_gen.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock compguesswhat.py compguesswhat.py.lock create_dummy_data.py dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip com_qa.py com_qa.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock conceptnet5.py conceptnet5.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip README.md conll2000.py conll2000.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock conll2002.py conll2002.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock .DS_Store dummy_data.zip dummy_data.zip.lock README.md conll2003.py conll2003.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock conv_ai.py conv_ai.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md conv_ai_2.py conv_ai_2.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md conv_ai_3.py conv_ai_3.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md coqa.py coqa.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock cornell_movie_dialog.py cornell_movie_dialog.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock cosmos_qa.py cosmos_qa.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock cos_e.py cos_e.py.lock dataset_infos.json dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip counter.py counter.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md covid_qa_castorini.py covid_qa_castorini.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md covid_qa_deepset.py covid_qa_deepset.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md covid_qa_ucsd.py covid_qa_ucsd.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip README.md covid_tweets_japanese.py covid_tweets_japanese.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md craigslist_bargains.py craigslist_bargains.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md crawl_domain.py crawl_domain.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md crd3.py crd3.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock crime_and_punish.py crime_and_punish.py.lock dataset_infos.json .DS_Store .DS_Store .DS_Store dummy_data.zip dummy_data.zip.lock crows_pairs.py crows_pairs.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md csv.py.lock dev.csv test.csv train.csv dummy_data.zip dummy_data.zip.lock cs_restaurants.py cs_restaurants.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md curiosity_dialogs.py curiosity_dialogs.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md daily_dialog.py daily_dialog.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dane.py dane.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md danish_political_comments.py danish_political_comments.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md dart.py dart.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock README.md datacommons_factcheck.py datacommons_factcheck.py.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip README.md dataset_infos.json dbpedia_14.py dbpedia_14.py.lock dummy_data.zip dummy_data.zip.lock README.md dataset_infos.json dbrd.py dbrd.py.lock dummy_data.zip dummy_data.zip.lock README.md dataset_infos.json deal_or_no_dialog.py deal_or_no_dialog.py.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip README.md dataset_infos.json definite_pronoun_resolution.py definite_pronoun_resolution.py.lock dummy_data.zip dummy_data.zip.lock dataset_infos.json dengue_filipino.py dengue_filipino.py.lock dummy_data.zip dummy_data.zip.lock README.md dataset_infos.json dialog_re.py dialog_re.py.lock dummy_data.zip dummy_data.zip.lock README.md dataset_infos.json diplomacy_detection.py diplomacy_detection.py.lock dummy_data.zip dummy_data.zip.lock README.md dataset_infos.json disaster_response_messages.py disaster_response_messages.py.lock dummy_data.zip dummy_data.zip.lock README.md dataset_infos.json discofuse.py discofuse.py.lock dev.tsv dev_balanced.tsv test.tsv test_balanced.tsv train.tsv train_balanced.tsv dummy_data.zip dummy_data.zip.lock dummy_data.zip dataset_infos.json discovery.py discovery.py.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip README.md dataset_infos.json doc2dial.py doc2dial.py.lock dummy_data.zip.lock dummy_data.zip README.md dataset_infos.json docred.py docred.py.lock dummy_data.zip dummy_data.zip.lock dataset_infos.json doqa.py doqa.py.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dataset_infos.json dream.py dream.py.lock dummy_data.zip dummy_data.zip.lock README.md dataset_infos.json drop.py drop.py.lock dummy_data.zip dummy_data.zip.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dutch_social.py dutch_social.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock dyk.py dyk.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock e2e_nlg.py e2e_nlg.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock e2e_nlg_cleaned.py e2e_nlg_cleaned.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip ecb.py ecb.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock ehealth_kd.py ehealth_kd.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock eitb_parcc.py eitb_parcc.py.lock README.md dataset_infos.json eli5.py eli5.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip emea.py emea.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock emo.py emo.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock emotion.py emotion.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock emotone_ar.py emotone_ar.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock empathetic_dialogues.py empathetic_dialogues.py.lock dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip.lock enriched_web_nlg.py enriched_web_nlg.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock eraser_multi_rc.py eraser_multi_rc.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock esnli.py esnli.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip ethos.py ethos.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock eth_py150_open.py eth_py150_open.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip euronews.py euronews.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip europa_eac_tm.py europa_eac_tm.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip europa_ecdc_tm.py europa_ecdc_tm.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock event2Mind.py event2Mind.py.lock dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip.lock evidence_infer_treatment.py evidence_infer_treatment.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip exams.py exams.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock factckbr.py factckbr.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock fake_news_english.py fake_news_english.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock fake_news_filipino.py fake_news_filipino.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock farsi_news.py farsi_news.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip fever.py fever.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock finer.py finer.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock wikipedia.dev.si-en.en wikipedia.dev.si-en.si wikipedia.devtest.si-en.en wikipedia.devtest.si-en.si dummy_data.zip dummy_data.zip.lock flores.py flores.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip flue.py flue.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock fquad.py fquad.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock gap.py gap.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock generated_reviews_enth.py generated_reviews_enth.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip generics_kb.py generics_kb.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock germaner.py germaner.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip german_legal_entity_recognition.py german_legal_entity_recognition.py.lock README.md .DS_Store dataset_infos.json .DS_Store .DS_Store .DS_Store dummy_data.zip dummy_data.zip.lock germeval_14.py germeval_14.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock gigaword.py gigaword.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock giga_fren.py giga_fren.py.lock README.md dummy_data.zip dummy_data.zip.lock glucose.py glucose.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip glue.py glue.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock gnad10.py gnad10.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock google_wellformed_query.py google_wellformed_query.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip go_emotions.py go_emotions.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock grail_qa.py grail_qa.py.lock README.md .DS_Store dataset_infos.json .DS_Store .DS_Store dummy_data.zip dummy_data.zip.lock great_code.py great_code.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip guardian_authorship.py guardian_authorship.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock gutenberg_time.py gutenberg_time.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hans.py hans.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip hansards.py hansards.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock hard.py hard.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip harem.py harem.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock has_part.py has_part.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hate_offensive.py hate_offensive.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hate_speech18.py hate_speech18.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hate_speech_filipino.py hate_speech_filipino.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hate_speech_offensive.py hate_speech_offensive.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hate_speech_pl.py hate_speech_pl.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hate_speech_portuguese.py hate_speech_portuguese.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hausa_voa_ner.py hausa_voa_ner.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hausa_voa_topics.py hausa_voa_topics.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip.lock head_qa.py head_qa.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock health_fact.py health_fact.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hebrew_projectbenyehuda.py hebrew_projectbenyehuda.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip.lock hebrew_sentiment.py hebrew_sentiment.py.lock README.md .DS_Store dataset_infos.json .DS_Store .DS_Store dummy_data.zip dummy_data.zip.lock hebrew_this_world.py hebrew_this_world.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hellaswag.py hellaswag.py.lock .DS_Store dataset_infos.json .DS_Store .DS_Store dummy_data.zip dummy_data.zip.lock hindi_discourse.py hindi_discourse.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hind_encorp.py hind_encorp.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hippocorpus.py hippocorpus.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hkcancor.py hkcancor.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip hope_edi.py hope_edi.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip hotpot_qa.py hotpot_qa.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock hover.py hover.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hrenwac_para.py hrenwac_para.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hrwac.py hrwac.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip humicroedit.py humicroedit.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock hybrid_qa.py hybrid_qa.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip hyperpartisan_news_detection.py hyperpartisan_news_detection.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip id_clickbait.py id_clickbait.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip id_nergrit_corpus.py id_nergrit_corpus.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock id_newspapers_2018.py id_newspapers_2018.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock id_panl_bppt.py id_panl_bppt.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock id_puisi.py id_puisi.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock igbo_english_machine_translation.py igbo_english_machine_translation.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip igbo_monolingual.py igbo_monolingual.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip.lock igbo_ner.py igbo_ner.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock ilist.py ilist.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock imdb.py imdb.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock imdb_urdu_reviews.py imdb_urdu_reviews.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip imppres.py imppres.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip indic_glue.py indic_glue.py.lock dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip indonlu.py indonlu.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock inquisitive_qg.py inquisitive_qg.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock interpress_news_category_tr.py interpress_news_category_tr.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock isixhosa_ner_corpus.py isixhosa_ner_corpus.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock isizulu_ner_corpus.py isizulu_ner_corpus.py.lock README.md dataset_infos.json .DS_Store .DS_Store dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock .DS_Store .DS_Store dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock .DS_Store .DS_Store dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock .DS_Store .DS_Store dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip.lock iwslt2017.py iwslt2017.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock jeopardy.py jeopardy.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock jfleg.py jfleg.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock jigsaw_toxicity_pred.py jigsaw_toxicity_pred.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock jnlpba.py jnlpba.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock journalists_questions.py journalists_questions.py.lock README.md .DS_Store .DS_Store .DS_Store dummy_data.zip dummy_data.zip.lock json.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock kannada_news.py kannada_news.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip kde4.py kde4.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip kd_conv.py kd_conv.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock kelm.py kelm.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip kilt_tasks.py kilt_tasks.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock kilt_wikipedia.py kilt_wikipedia.py.lock dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip kinnews_kirnews.py kinnews_kirnews.py.lock README.md dataset_infos.json dummy_data.zip kor_3i4k.py README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock kor_hate.py kor_hate.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock kor_ner.py kor_ner.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip kor_nli.py kor_nli.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock dummy_data.zip kor_nlu.py kor_nlu.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock kor_qpair.py kor_qpair.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock kor_sarcasm.py kor_sarcasm.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock labr.py labr.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip.lock lama.py lama.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock lambada.py lambada.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip.lock dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip dummy_data.zip large_spanish_corpus.py large_spanish_corpus.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock lc_quad.py lc_quad.py.lock dataset_infos.json dummy_data.zip dummy_data.zip.lock lener_br.py lener_br.py.lock README.md dataset_infos.json dummy_data.zip dummy_data.zip.lock liar.py liar.py.lock README.md da",
        "setup.py": "# Lint as: python3\n\"\"\" HuggingFace\/Datasets is an open library of datasets.\n\nNote:\n\nVERSION needs to be formatted following the MAJOR.MINOR.PATCH convention\n(we need to follow this convention to be able to retrieve versioned scripts)\n\nSimple check list for release from AllenNLP repo: https:\/\/github.com\/allenai\/allennlp\/blob\/master\/setup.py\n\nTo create the package for pypi.\n\n0. Prerequisites:\n- Dependencies:\n- twine: \"pip install twine\"\n- Create an account in (and join the 'datasets' project):\n- PyPI: https:\/\/pypi.org\/\n- Test PyPI: https:\/\/test.pypi.org\/\n\n1. Change the version in:\n- __init__.py\n- setup.py\n\n2. Commit these changes: \"git commit -m 'Release: VERSION'\"\n\n3. Add a tag in git to mark the release: \"git tag VERSION -m 'Add tag VERSION for pypi'\"\nPush the tag to remote: git push --tags origin main\n\n4. Build both the sources and the wheel. Do not change anything in setup.py between\ncreating the wheel and the source distribution (obviously).\n\nFirst, delete any \"build\" directory that may exist from previous builds.\n\nFor the wheel, run: \"python setup.py bdist_wheel\" in the top level directory.\n(this will build a wheel for the python version you use to build it).\n\nFor the sources, run: \"python setup.py sdist\"\nYou should now have a \/dist directory with both .whl and .tar.gz source versions.\n\n5. Check that everything looks correct by uploading the package to the pypi test server:\n\ntwine upload dist\/* -r pypitest --repository-url=https:\/\/test.pypi.org\/legacy\/\n\nCheck that you can install it in a virtualenv\/notebook by running:\npip install huggingface_hub fsspec aiohttp\npip install -U tqdm\npip install -i https:\/\/testpypi.python.org\/pypi datasets\n\n6. Upload the final version to actual pypi:\ntwine upload dist\/* -r pypi\n\n7. Fill release notes in the tag in github once everything is looking hunky-dory.\n\n8. Change the version in __init__.py and setup.py to X.X.X+1.dev0 (e.g. VERSION=1.18.3 -> 1.18.4.dev0).\nThen push the change with a message 'set dev version'\n\"\"\"\n\nimport os\n\nfrom setuptools import find_packages, setup\n\n\nREQUIRED_PKGS = [\n# We use numpy>=1.17 to have np.random.Generator (Dataset shuffling)\n\"numpy>=1.17\",\n# Backend and serialization.\n# Minimum 6.0.0 to support wrap_array which is needed for ArrayND features\n\"pyarrow>=6.0.0\",\n# For smart caching dataset processing\n\"dill<0.3.6\", # tmp pin until 0.3.6 release: see https:\/\/github.com\/huggingface\/datasets\/pull\/4397\n# For performance gains with apache arrow\n\"pandas\",\n# for downloading datasets over HTTPS\n\"requests>=2.19.0\",\n# progress bars in download and scripts\n\"tqdm>=4.62.1\",\n# dataclasses for Python versions that don't have it\n\"dataclasses;python_version<'3.7'\",\n# for fast hashing\n\"xxhash\",\n# for better multiprocessing\n\"multiprocess\",\n# to get metadata of optional dependencies such as torch or tensorflow for Python versions that don't have it\n\"importlib_metadata;python_version<'3.8'\",\n# to save datasets locally or on any filesystem\n# minimum 2021.11.1 so that BlockSizeError is fixed: see https:\/\/github.com\/fsspec\/filesystem_spec\/pull\/830\n\"fsspec[http]>=2021.11.1\", # aligned s3fs with this\n# for data streaming via http\n\"aiohttp\",\n# To get datasets from the Datasets Hub on huggingface.co\n\"huggingface-hub>=0.1.0,<1.0.0\",\n# Utilities from PyPA to e.g., compare versions\n\"packaging\",\n\"responses<0.19\",\n]\n\nAUDIO_REQUIRE = [\n\"librosa\",\n]\n\nVISION_REQURE = [\n\"Pillow>=6.2.1\",\n]\n\nBENCHMARKS_REQUIRE = [\n\"numpy==1.18.5\",\n\"tensorflow==2.3.0\",\n\"torch==1.6.0\",\n\"transformers==3.0.2\",\n]\n\nTESTS_REQUIRE = [\n# test dependencies\n\"absl-py\",\n\"pytest\",\n\"pytest-datadir\",\n\"pytest-xdist\",\n# optional dependencies\n\"apache-beam>=2.26.0\",\n\"elasticsearch<8.0.0\", # 8.0 asks users to provide hosts or cloud_id when instantiating ElastictSearch()\n\"aiobotocore>=2.0.1\", # required by s3fs>=2021.11.1\n\"boto3>=1.19.8\", # to be compatible with aiobotocore>=2.0.1 - both have strong dependencies on botocore\n\"botocore>=1.22.8\", # to be compatible with aiobotocore and boto3\n\"faiss-cpu>=1.6.4\",\n\"fsspec[s3]\",\n\"moto[s3,server]==2.0.4\",\n\"rarfile>=4.0\",\n\"s3fs>=2021.11.1\", # aligned with fsspec[http]>=2021.11.1\n\"tensorflow>=2.3,!=2.6.0,!=2.6.1\",\n\"torch\",\n\"torchaudio\",\n\"soundfile\",\n\"transformers\",\n# datasets dependencies\n\"bs4\",\n\"conllu\",\n\"h5py\",\n\"langdetect\",\n\"lxml\",\n\"lz4\",\n\"mwparserfromhell\",\n\"nltk\",\n\"openpyxl\",\n\"py7zr\",\n\"tldextract\",\n\"zstandard\",\n# \"bigbench @ https:\/\/storage.googleapis.com\/public_research_data\/bigbench\/bigbench-0.0.1.tar.gz\",\n\"sentencepiece\", # bigbench requires t5 which requires seqio which requires sentencepiece\n\"sacremoses\",\n# metrics dependencies\n\"bert_score>=0.3.6\",\n\"jiwer\",\n\"mauve-text\",\n\"rouge_score<0.0.7\",\n\"sacrebleu\",\n\"sacremoses\",\n\"scikit-learn\",\n\"scipy\",\n\"sentencepiece\", # for bleurt\n\"seqeval\",\n# to speed up pip backtracking\n\"toml>=0.10.1\",\n\"requests_file>=1.5.1\",\n\"tldextract>=3.1.0\",\n\"texttable>=1.6.3\",\n\"Werkzeug>=1.0.1\",\n\"six~=1.15.0\",\n# metadata validation\n\"importlib_resources;python_version<'3.7'\",\n]\n\nTESTS_REQUIRE.extend(VISION_REQURE)\nTESTS_REQUIRE.extend(AUDIO_REQUIRE)\n\nQUALITY_REQUIRE = [\"black~=22.0\", \"flake8>=3.8.3\", \"isort>=5.0.0\", \"pyyaml>=5.3.1\"]\n\n\nEXTRAS_REQUIRE = {\n\"audio\": AUDIO_REQUIRE,\n\"vision\": VISION_REQURE,\n\"apache-beam\": [\"apache-beam>=2.26.0\"],\n\"tensorflow\": [\"tensorflow>=2.2.0,!=2.6.0,!=2.6.1\"],\n\"tensorflow_gpu\": [\"tensorflow-gpu>=2.2.0,!=2.6.0,!=2.6.1\"],\n\"torch\": [\"torch\"],\n\"s3\": [\n\"fsspec\",\n\"boto3\",\n\"botocore\",\n\"s3fs\",\n],\n\"streaming\": [], # for backward compatibility\n\"dev\": TESTS_REQUIRE + QUALITY_REQUIRE,\n\"tests\": TESTS_REQUIRE,\n\"quality\": QUALITY_REQUIRE,\n\"benchmarks\": BENCHMARKS_REQUIRE,\n\"docs\": [\n# Might need to add doc-builder and some specific deps in the future\n\"s3fs\",\n],\n}\n\nsetup(\nname=\"datasets\",\nversion=\"2.4.0\", # expected format is one of x.y.z.dev0, or x.y.z.rc1 or x.y.z (no to dashes, yes to dots)\ndescription=\"HuggingFace community-driven open-source library of datasets\",\nlong_description=open(\"README.md\", encoding=\"utf-8\").read(),\nlong_description_content_type=\"text\/markdown\",\nauthor=\"HuggingFace Inc.\",\nauthor_email=\"thomas@huggingface.co\",\nurl=\"https:\/\/github.com\/huggingface\/datasets\",\ndownload_url=\"https:\/\/github.com\/huggingface\/datasets\/tags\",\nlicense=\"Apache 2.0\",\npackage_dir={\"\": \"src\"},\npackages=find_packages(\"src\"),\npackage_data={\"datasets\": [\"py.typed\", \"scripts\/templates\/*\"], \"datasets.utils.resources\": [\"*.json\", \"*.yaml\", \"*.tsv\"]},\nentry_points={\"console_scripts\": [\"datasets-cli=datasets.commands.datasets_cli:main\"]},\ninstall_requires=REQUIRED_PKGS,\nextras_require=EXTRAS_REQUIRE,\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Education\",\n\"Intended Audience :: Science\/Research\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Scientific\/Engineering :: Artificial Intelligence\",\n],\nkeywords=\"datasets machine learning datasets metrics\",\nzip_safe=False, # Required for mypy to find the py.typed file\n)\n"
    },
    {
        "package_name": "datasketch-1.5.7",
        "file_list": "b_bit_minhash.py lsh.py storage.py __init__.py __init__.py hashfunc.py hyperloglog.py hyperloglog_const.py lean_minhash.py lsh.py lshensemble.py lshensemble_partition.py lshforest.py minhash.py storage.py version.py weighted_minhash.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.rst setup.cfg setup.py test_hyperloglog.py test_lean_minhash.py test_lsh.py test_lshensemble.py test_lshforest.py test_lsh_cassandra.py test_minhash.py test_weighted_minhash.py",
        "setup.py": "\"\"\"\nSetup script for datasketch package\n\"\"\"\n\n# Always prefer setuptools over distutils\nfrom setuptools import setup, find_packages\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the relevant file\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\nlong_description = f.read()\n\n# Get the code version\nversion = {}\nwith open(path.join(here, \"datasketch\/version.py\")) as fp:\nexec(fp.read(), version)\n__version__ = version['__version__']\n# now we have a `__version__` variable\n\nsetup(\nname='datasketch',\nversion=__version__,\ndescription='Probabilistic data structures for processing and searching very large datasets',\nlong_description=long_description,\nurl='https:\/\/ekzhu.github.io\/datasketch',\nauthor='ekzhu',\nauthor_email='ekzhu@cs.toronto.edu',\nlicense='MIT',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Topic :: Database',\n'Topic :: Scientific\/Engineering :: Information Analysis',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n],\nkeywords='database datamining',\npackages=find_packages(include=['datasketch*']),\ninstall_requires=[\n'numpy>=1.11',\n'scipy>=1.0.0',\n],\nextras_require={\n'cassandra': [\n'cassandra-driver>=3.20',\n],\n'redis': [\n'redis>=2.10.0',\n],\n'benchmark': [\n'pyhash>=0.9.3',\n'matplotlib>=3.1.2',\n'scikit-learn>=0.21.3',\n'scipy>=1.3.3',\n'pandas>=0.25.3',\n'SetSimilaritySearch>=0.1.7',\n'pyfarmhash>=0.2.2',\n'nltk>=3.4.5',\n],\n'test': [\n'cassandra-driver>=3.20',\n'redis>=2.10.0',\n'mock>=2.0.0',\n'mockredispy',\n'coverage',\n'pymongo>=3.9.0',\n'nose>=1.3.7',\n'nose-exclude>=0.5.0',\n],\n'experimental_aio': [\n\"aiounittest ; python_version>='3.6'\",\n\"motor ; python_version>='3.6'\",\n],\n},\n)\n"
    },
    {
        "package_name": "db-contrib-tool-0.4.6",
        "file_list": "PKG-INFO pyproject.toml README.md setup.py cli.py download_client.py file_service.py git_client.py io_client.py platform_details.py resmoke_proxy.py __init__.py setup_repro_env_config.yml config.py run_user_script.sh setup_test_env.sh teardown_test_env.sh __init__.py plugin.py evergreen_service.py git_service.py platform_service.py __init__.py artifact_discovery_service.py download_service.py README.md setup_repro_env.py __init__.py mongosymb.py mongo_log_parser_service.py README.md __init__.py usage_analytics.py build_system_options.py evergreen_conn.py filesystem.py oauth.py __init__.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackage_dir = \\\n{'': 'src'}\n\npackages = \\\n['db_contrib_tool',\n'db_contrib_tool.clients',\n'db_contrib_tool.evg_aware_bisect',\n'db_contrib_tool.services',\n'db_contrib_tool.setup_repro_env',\n'db_contrib_tool.symbolizer',\n'db_contrib_tool.utils']\n\npackage_data = \\\n{'': ['*'], 'db_contrib_tool': ['config\/*']}\n\ninstall_requires = \\\n['Inject>=4.3.1,<5.0.0',\n'PyGithub==1.55',\n'PyYAML==6.0',\n'analytics-python==1.4.0',\n'distro==1.6.0',\n'evergreen.py==3.4.5',\n'oauthlib==3.1.1',\n'pkce==1.0.3',\n'pydantic==1.8.2',\n'requests-oauthlib==1.3.0',\n'requests==2.26.0',\n'structlog==21.4.0',\n'tenacity>=8.0.1,<9.0.0']\n\nentry_points = \\\n{'console_scripts': ['db-contrib-tool = db_contrib_tool.cli:main']}\n\nsetup_kwargs = {\n'name': 'db-contrib-tool',\n'version': '0.4.6',\n'description': \"The `db-contrib-tool` - MongoDB's tool for contributors.\",\n'long_description': '# db-contrib-tool\\n\\nThe `db-contrib-tool` - MongoDB\\'s tools for contributors.\\n\\n## Table of contents\\n\\n- [db-contrib-tool](#db-contrib-tool)\\n - [Table of contents](#table-of-contents)\\n - [Description](#description)\\n - [Dependencies](#dependencies)\\n - [Installation](#installation)\\n - [Usage](#usage)\\n - [Contributor\\'s Guide (local development)](#contributors-guide-local-development)\\n - [Install project dependencies](#install-project-dependencies)\\n - [Run command line tool (local development)](#run-command-line-tool-local-development)\\n - [Run linters](#run-linters)\\n - [Run tests](#run-tests)\\n - [Pre-commit](#pre-commit)\\n - [Testing changes in mongo](#testing-changes-in-mongo)\\n - [Test pipx package](#test-pipx-package)\\n - [Versioning](#versioning)\\n - [Code Review](#code-review)\\n - [Deployment](#deployment)\\n\\n## Description\\n\\nThe command line tool with various subcommands:\\n- `bisect` - performs an evergreen-aware git-bisect to find the \\'last passing version\\' and \\'first failing version\\' of mongo\\n- `setup-repro-env`\\n - [README.md](https:\/\/github.com\/10gen\/db-contrib-tool\/blob\/main\/src\/db_contrib_tool\/setup_repro_env\/README.md)\\n - downloads and installs:\\n - particular MongoDB versions\\n - debug symbols\\n - artifacts (including resmoke, python scripts etc)\\n - python venv for resmoke, python scripts etc\\n- `symbolize`\\n - [README.md](https:\/\/github.com\/10gen\/db-contrib-tool\/blob\/main\/src\/db_contrib_tool\/symbolizer\/README.md)\\n - Symbolizes stacktraces from recent `mongod` and `mongos` binaries compiled in Evergreen, including patch builds, mainline builds, and release\/production builds.\\n - Requires authenticating to an internal MongoDB symbol mapping service.\\n\\n## Dependencies\\n\\n- Python 3.7 or later (python3 from the [MongoDB Toolchain](https:\/\/github.com\/10gen\/toolchain-builder\/blob\/master\/INSTALL.md) is highly recommended)\\n\\n## Installation\\n\\nMake sure [dependencies](#dependencies) are installed.\\nUse [pipx](https:\/\/pypa.github.io\/pipx\/) to install db-contrib-tool that will be available globally on your machine:\\n```bash\\n$ python3 -m pip install pipx\\n$ python3 -m pipx ensurepath\\n```\\n\\nInstalling db-contrib-tool:\\n```bash\\n$ python3 -m pipx install db-contrib-tool\\n```\\n\\nUpgrading db-contrib-tool:\\n```bash\\n$ python3 -m pipx upgrade db-contrib-tool\\n```\\n\\n## Usage\\n\\nPrint out help message:\\n```bash\\n$ db-contrib-tool -h\\n```\\nMore information on the usage of `setup-repro-env` can be found [here](https:\/\/github.com\/10gen\/db-contrib-tool\/blob\/main\/src\/db_contrib_tool\/setup_repro_env\/README.md).\\n\\n## Contributor\\'s Guide (local development)\\n\\n### Install project dependencies\\n\\nThis project uses [poetry](https:\/\/python-poetry.org\/) for dependency management.\\n```bash\\n$ poetry install\\n```\\n\\n### Run command line tool (local development)\\n\\n```bash\\n$ ENV=DEV poetry run db-contrib-tool -h\\n```\\n\\n### Run linters\\n\\n```bash\\n$ poetry run isort src tests\\n$ poetry run black src tests\\n```\\n\\n### Run tests\\n\\n```bash\\n$ poetry run pytest\\n```\\n\\n### Pre-commit\\n\\nThis project has [pre-commit](https:\/\/pre-commit.com\/) configured. Pre-commit will run\\nconfigured checks at git commit time.<br>\\nTo enable pre-commit on your local repository run:\\n```bash\\n$ poetry run pre-commit install\\n```\\n\\nTo run pre-commit manually:\\n```bash\\n$ poetry run pre-commit run\\n```\\n\\n### Testing changes in mongo\\n\\nThis tool is used to help run tests in the mongodb\/mongo repository. On occasion, it may be\\ndesirable to run a mongodb-mongo-* patch build with in-flight changes to this repository. The\\nfollowing steps can be take to accomplish that.\\n\\n- Create a branch with the changes you wish to test.\\n- Push the branch to the origin repository: `git push -u origin <branch_name>`.\\n- In the \"mongo\" repository, edit the [evergreen\/prelude_db_contrib_tool.sh](https:\/\/github.com\/10gen\/mongo\/blob\/750f2cabe28900e86950695b7711c860a4165c94\/evergreen\/prelude_db_contrib_tool.sh#L16)\\n to install from the git repository instead of from pypi:\\n\\n ```bash\\n python -m pip --disable-pip-version-check install \"git+ssh:\/\/git@github.com\/10gen\/db-contrib-tool.git@<branch_name>\" || exit 1\\n ```\\n\\n- Create a patch build.\\n\\nThe patch build should now pull down the changes from your branch instead of using the published\\ndb-contrib-tool.\\n\\n**Note**: Since the db-contrib-tool is pulled from your branch, if you need to make additional\\nchanges to the tool, you can just push to the branch and then restart the desired tasks. There is\\nno need to create an additional patch build unless you also need to make updates to the mongo\\nrepository.\\n\\n### Test pipx package\\n\\nPipx installation recommendations can be found in [installation](#installation) section.<br>\\nThe tool can be installed via pipx from your local repo:\\n```bash\\n$ python3 -m pipx install \/path\/to\/db-contrib-tool\\n```\\n\\n### Versioning\\n\\nThis project uses [semver](https:\/\/semver.org\/) for versioning.\\nPlease include a description what is added for each new version in `CHANGELOG.md`.\\n\\n### Code Review\\n\\nPlease open a Github Pull Request for code review.\\nThis project uses the [Evergreen Commit Queue](https:\/\/github.com\/evergreen-ci\/evergreen\/wiki\/Commit-Queue#pr).\\nAdd a PR comment with `evergreen merge` to trigger a merge.\\n\\n### Deployment\\n\\nDeployment to pypi is automatically triggered on merges to main.\\n',\n'author': 'STM team',\n'author_email': 'dev-prod-stm@10gen.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/10gen\/db-contrib-tool',\n'package_dir': package_dir,\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'entry_points': entry_points,\n'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "dbt-postgres-1.2.0",
        "file_list": "connections.py impl.py relation.py __init__.py __version__.py __init__.py dbt_project.yml adapters.sql catalog.sql snapshot_merge.sql relations.sql any_value.sql dateadd.sql datediff.sql last_day.sql listagg.sql split_part.sql sample_profiles.yml __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nimport os\nimport sys\n\nif sys.version_info < (3, 7):\nprint(\"Error: dbt does not support this version of Python.\")\nprint(\"Please upgrade to Python 3.7 or higher.\")\nsys.exit(1)\n\n\nfrom setuptools import setup\n\ntry:\nfrom setuptools import find_namespace_packages\nexcept ImportError:\n# the user has a downlevel version of setuptools.\nprint(\"Error: dbt requires setuptools v40.1.0 or higher.\")\nprint('Please upgrade setuptools with \"pip install --upgrade setuptools\" ' \"and try again\")\nsys.exit(1)\n\n\nPSYCOPG2_MESSAGE = \"\"\"\nNo package name override was set.\nUsing 'psycopg2-binary' package to satisfy 'psycopg2'\n\nIf you experience segmentation faults, silent crashes, or installation errors,\nconsider retrying with the 'DBT_PSYCOPG2_NAME' environment variable set to\n'psycopg2'. It may require a compiler toolchain and development libraries!\n\"\"\".strip()\n\n\ndef _dbt_psycopg2_name():\n# if the user chose something, use that\npackage_name = os.getenv(\"DBT_PSYCOPG2_NAME\", \"\")\nif package_name:\nreturn package_name\n\n# default to psycopg2-binary for all OSes\/versions\nprint(PSYCOPG2_MESSAGE)\nreturn \"psycopg2-binary\"\n\n\npackage_name = \"dbt-postgres\"\npackage_version = \"1.2.0\"\ndescription = \"\"\"The postgres adapter plugin for dbt (data build tool)\"\"\"\n\nthis_directory = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(this_directory, \"README.md\")) as f:\nlong_description = f.read()\n\nDBT_PSYCOPG2_NAME = _dbt_psycopg2_name()\n\nsetup(\nname=package_name,\nversion=package_version,\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nauthor=\"dbt Labs\",\nauthor_email=\"info@dbtlabs.com\",\nurl=\"https:\/\/github.com\/dbt-labs\/dbt-core\",\npackages=find_namespace_packages(include=[\"dbt\", \"dbt.*\"]),\npackage_data={\n\"dbt\": [\n\"include\/postgres\/dbt_project.yml\",\n\"include\/postgres\/sample_profiles.yml\",\n\"include\/postgres\/macros\/*.sql\",\n\"include\/postgres\/macros\/**\/*.sql\",\n]\n},\ninstall_requires=[\n\"dbt-core=={}\".format(package_version),\n\"{}~=2.8\".format(DBT_PSYCOPG2_NAME),\n],\nzip_safe=False,\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Operating System :: POSIX :: Linux\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\npython_requires=\">=3.7\",\n)\n"
    },
    {
        "package_name": "dbt-snowflake-1.2.0",
        "file_list": "column.py connections.py impl.py relation.py __init__.py __version__.py dbt_project.yml adapters.sql catalog.sql incremental.sql merge.sql seed.sql snapshot.sql table.sql view.sql bool_or.sql escape_single_quotes.sql right.sql safe_cast.sql profile_template.yml __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.md MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nimport os\nimport sys\nimport re\n\n# require python 3.7 or newer\nif sys.version_info < (3, 7):\nprint(\"Error: dbt does not support this version of Python.\")\nprint(\"Please upgrade to Python 3.7 or higher.\")\nsys.exit(1)\n\n\n# require version of setuptools that supports find_namespace_packages\nfrom setuptools import setup\n\ntry:\nfrom setuptools import find_namespace_packages\nexcept ImportError:\n# the user has a downlevel version of setuptools.\nprint(\"Error: dbt requires setuptools v40.1.0 or higher.\")\nprint('Please upgrade setuptools with \"pip install --upgrade setuptools\" ' \"and try again\")\nsys.exit(1)\n\n\n# pull long description from README\nthis_directory = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(this_directory, \"README.md\")) as f:\nlong_description = f.read()\n\n\n# get this package's version from dbt\/adapters\/<name>\/__version__.py\ndef _get_plugin_version_dict():\n_version_path = os.path.join(this_directory, \"dbt\", \"adapters\", \"snowflake\", \"__version__.py\")\n_semver = r\"\"\"(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)\"\"\"\n_pre = r\"\"\"((?P<prekind>a|b|rc)(?P<pre>\\d+))?\"\"\"\n_version_pattern = fr\"\"\"version\\s*=\\s*[\"']{_semver}{_pre}[\"']\"\"\"\nwith open(_version_path) as f:\nmatch = re.search(_version_pattern, f.read().strip())\nif match is None:\nraise ValueError(f\"invalid version at {_version_path}\")\nreturn match.groupdict()\n\n\n# require a compatible minor version (~=), prerelease if this is a prerelease\ndef _get_dbt_core_version():\nparts = _get_plugin_version_dict()\nminor = \"{major}.{minor}.0\".format(**parts)\npre = parts[\"prekind\"] + \"1\" if parts[\"prekind\"] else \"\"\nreturn f\"{minor}{pre}\"\n\n\npackage_name = \"dbt-snowflake\"\npackage_version = \"1.2.0\"\ndbt_core_version = _get_dbt_core_version()\ndescription = \"\"\"The Snowflake adapter plugin for dbt\"\"\"\n\nsetup(\nname=package_name,\nversion=package_version,\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nauthor=\"dbt Labs\",\nauthor_email=\"info@dbtlabs.com\",\nurl=\"https:\/\/github.com\/dbt-labs\/dbt-snowflake\",\npackages=find_namespace_packages(include=[\"dbt\", \"dbt.*\"]),\ninclude_package_data=True,\ninstall_requires=[\n\"dbt-core~={}\".format(dbt_core_version),\n\"snowflake-connector-python[secure-local-storage]>=2.4.1,<2.8.0\",\n\"requests<3.0.0\",\n\"cryptography>=3.2,<37.0.0\",\n],\nzip_safe=False,\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Operating System :: POSIX :: Linux\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\npython_requires=\">=3.7\",\n)\n"
    },
    {
        "package_name": "dbus-python-1.2.18",
        "file_list": ".version aclocal.m4 AUTHORS compile config.guess config.sub depcomp install-sh ltmain.sh missing py-compile tap-driver.sh test-driver ChangeLog config.h.in configure configure.ac CONTRIBUTING.md COPYING bus.py connection.py decorators.py exceptions.py gi_service.py glib.py gobject_service.py lowlevel.py glib.py __init__.py proxies.py server.py service.py types.py _compat.py _dbus.py _expat_introspect_parser.py __init__.py AUTHORS CONTRIBUTING.md COPYING dbus-gmain.c dbus-gmain.h Makefile.am Makefile.in README.md 30574.c test-thread-client.c test-thread-server.c test-thread.h util.c util.h dbus-python.pc.in abstract.c bus.c bytes.c compat-internal.h conn-internal.h conn-methods.c conn.c containers.c dbus_bindings-internal.h debug.c exceptions.c float.c generic.c int.c libdbusconn.c mainloop.c message-append.c message-get-args.c message-internal.h message.c module.c pending-call.c server.c signature.c string.c types-internal.h unixfd.c validation.c module.c dependency_links.txt PKG-INFO SOURCES.txt top_level.txt API_CHANGES.txt conf.py dbus.bus.rst dbus.connection.rst dbus.decorators.rst dbus.exceptions.rst dbus.gi_service.rst dbus.glib.rst dbus.gobject_service.rst dbus.lowlevel.rst dbus.mainloop.rst dbus.proxies.rst dbus.rst dbus.server.rst dbus.service.rst dbus.types.rst index.rst news.rst PY3PORT.txt redirects redirects.py tutorial.txt .gitignore example-async-client.py example-client.py example-service.py example-signal-emitter.py example-signal-recipient.py gconf-proxy-client.py gconf-proxy-service2.py list-system-services.py unix-fd-client.py unix-fd-service.py dbus-python.h ax_append_compile_flags.m4 ax_append_flag.m4 ax_append_link_flags.m4 ax_check_compile_flag.m4 ax_check_link_flag.m4 ax_compiler_flags.m4 ax_compiler_flags_cflags.m4 ax_compiler_flags_gir.m4 ax_compiler_flags_ldflags.m4 ax_is_release.m4 ax_python_devel.m4 ax_python_module.m4 ax_require_defined.m4 libtool.m4 ltoptions.m4 ltsugar.m4 ltversion.m4 lt~obsolete.m4 pkg.m4 Makefile.am Makefile.in MANIFEST MANIFEST.in NEWS PKG-INFO README setup.py cross-test-client.py cross-test-server.py crosstest.py dbus_py_test.c dbus_test_utils.py import-repeatedly.c run-test.sh test-client.py test-exception-py2.py test-exception-py3.py test-p2p.py test-service.py test-signals.py test-standalone.py test-unusable-main-loop.py TestSuitePythonService.service.in tmp-session-bus.conf.in wait-for-name.py check-c-style.sh check-coding-style.mk check-py-style.sh check-whitespace.sh",
        "setup.py": "#!\/usr\/bin\/env python\n# encoding: utf-8\n\n# Copyright \u00a9 2016 Collabora Ltd. <http:\/\/www.collabora.co.uk\/>\n#\n# SPDX-License-Identifier: MIT\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without\n# restriction, including without limitation the rights to use, copy,\n# modify, merge, publish, distribute, sublicense, and\/or sell copies\n# of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be\n# included in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\nfrom distutils.dir_util import copy_tree, mkpath\nfrom distutils.file_util import copy_file\nfrom setuptools.dist import Distribution\nfrom setuptools import setup, Extension\nimport os\nimport subprocess\nimport sys\n\nif os.path.exists('.version'):\nversion = open('.version').read().strip()\nelse:\nversion = subprocess.check_output(['autoconf', '--trace', 'AC_INIT:$2',\n'configure.ac']).decode('utf-8').strip()\n\nclass Build(Distribution().get_command_class('build')):\n\"\"\"Dummy version of distutils build which runs an Autotools build system\ninstead.\n\"\"\"\n\ndef run(self):\nsrcdir = os.getcwd()\nbuilddir = os.path.join(srcdir, self.build_temp)\nconfigure = os.path.join(srcdir, 'configure')\nmkpath(builddir)\n\nif not os.path.exists(configure):\nconfigure = os.path.join(srcdir, 'autogen.sh')\n\nsubprocess.check_call([\nconfigure,\n'--disable-maintainer-mode',\n'PYTHON=' + sys.executable,\n# Put the documentation, etc. out of the way: we only want\n# the Python code and extensions\n'--prefix=' + os.path.join(builddir, 'prefix'),\n],\ncwd=builddir)\nmake_args = [\n'pythondir=' + os.path.join(srcdir, self.build_lib),\n'pyexecdir=' + os.path.join(srcdir, self.build_lib),\n]\nsubprocess.check_call(['make', '-C', builddir] + make_args)\nsubprocess.check_call(['make', '-C', builddir, 'install'] + make_args)\n\nclass BuildExt(Distribution().get_command_class('build_ext')):\ndef run(self):\npass\n\nclass BuildPy(Distribution().get_command_class('build_py')):\ndef run(self):\npass\n\ndbus_bindings = Extension('_dbus_bindings',\nsources=['dbus_bindings\/module.c'])\ndbus_glib_bindings = Extension('_dbus_glib_bindings',\nsources=['dbus_glib_bindings\/module.c'])\n\nsetup(\nname='dbus-python',\nversion=version,\ndescription='Python bindings for libdbus',\nlong_description=open('README').read(),\nmaintainer='The D-Bus maintainers',\nmaintainer_email='dbus@lists.freedesktop.org',\ndownload_url='http:\/\/dbus.freedesktop.org\/releases\/dbus-python\/',\nurl='http:\/\/www.freedesktop.org\/wiki\/Software\/DBusBindings\/#python',\npackages=['dbus'],\next_modules=[dbus_bindings, dbus_glib_bindings],\nlicense='Expat (MIT\/X11)',\nclassifiers=[\n'Development Status :: 7 - Inactive',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: C',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: Implementation :: CPython',\n'Topic :: Software Development :: Object Brokering',\n],\ncmdclass={\n'build': Build,\n'build_py': BuildPy,\n'build_ext': BuildExt,\n},\ntests_require=['tap.py'],\n)\n"
    },
    {
        "package_name": "ddtrace-1.3.2",
        "file_list": "config.yml .coveragerc CODEOWNERS dependabot.yml ISSUE_TEMPLATE.md PULL_REQUEST_TEMPLATE.md apm-transport-stress-test.yml build_deploy.yml changelog.yml codeql-analysis.yml django-overhead-profile.yml encoders-profile.yml pr-name.yml set-target-milestone.yml stale.yml system-tests.yml test_frameworks.yml .gitignore .gitlab-ci.yml .mergify.yml .readthedocs.yml benchmark entrypoint requirements.txt requirements_scenario.txt run.py _scenario.py _to_bool.py __init__.py config.yaml scenario.py app.py config.yaml gunicorn.conf.py install.sh requirements_scenario.txt scenario.py utils.py Dockerfile config.yaml scenario.py utils.py app.py config.yaml gunicorn.conf.py requirements_scenario.txt scenario.py utils.py config.yaml scenario.py config.yaml scenario.py README.rst config.yaml scenario.py config.yaml scenario.py utils.py config.yaml README.rst scenario.py config.yaml scenario.py __init__.py CHANGELOG.md commitlint.config.js conftest.py CMakeLists.txt processor.py rules.json _ddwaf.cpp _ddwaf.pyx _libddwaf.pxd __init__.py sitecustomize.py __init__.py ddtrace_run.py __init__.py constants.py context.py patch.py __init__.py middlewares.py patch.py __init__.py patch.py __init__.py patch.py __init__.py connection.py patch.py __init__.py patch.py __init__.py patch.py __init__.py patch.py __init__.py middleware.py utils.py __init__.py compat.py helpers.py patch.py provider.py wrappers.py __init__.py patch.py __init__.py patch.py __init__.py patch.py __init__.py patch.py trace.py __init__.py patch.py session.py __init__.py app.py constants.py patch.py signals.py utils.py __init__.py middleware.py __init__.py patch.py __init__.py __init__.py compat.py patch.py restframework.py utils.py _asgi.py __init__.py lock.py patch.py region.py __init__.py patch.py quantize.py __init__.py middleware.py patch.py __init__.py patch.py __init__.py helpers.py patch.py wrappers.py __init__.py tracers.py utils.py __init__.py patch.py threading.py __init__.py greenlet.py patch.py provider.py __init__.py aio_client_interceptor.py aio_server_interceptor.py client_interceptor.py constants.py patch.py server_interceptor.py utils.py __init__.py patch.py __init__.py patch.py __init__.py constants.py patch.py __init__.py constants.py patch.py utils.py __init__.py patch.py __init__.py constants.py patch.py __init__.py patch.py __init__.py patch.py wrappers.py __init__.py patch.py trace.py __init__.py patch.py __init__.py patch.py __init__.py connection.py patch.py __init__.py addrs.py client.py patch.py __init__.py compat.py constants.py middleware.py patch.py renderer.py __init__.py client.py patch.py __init__.py client.py parse.py patch.py __init__.py patch.py __init__.py patch.py __init__.py patch.py __init__.py constants.py patch.py trace.py __init__.py constants.py plugin.py __init__.py constants.py plugin.py __init__.py asyncio_patch.py patch.py util.py __init__.py patch.py __init__.py connection.py constants.py patch.py session.py __init__.py __init__.py patch.py __init__.py patch.py __init__.py engine.py patch.py __init__.py patch.py __init__.py patch.py __init__.py application.py compat.py constants.py decorators.py handlers.py patch.py stack_context.py template.py __init__.py trace_utils.py trace_utils_async.py patch.py __init__.py patch.py __init__.py wsgi.py __init__.py patch.py __init__.py __init__.py _config.py _encoding.py _expressions.py discovery.py store.py __init__.py _metrics.py model.py status.py __init__.py model.py __init__.py _uploader.py __init__.py aws.py cassandra.py ci.py consul.py db.py elasticsearch.py git.py http.py kombu.py memcached.py mongo.py net.py redis.py sql.py test.py __init__.py filters.py agent.py atexit.py buff_converter.h codeowners.py compat.py constants.py debug.py dogstatsd.py encoding.py forksafe.py glob_matching.py hostname.py http.py injection.py logger.py metrics.py module.py nogevent.py pack.h packages.py pack_template.h periodic.py stats.py trace.py truncator.py __init__.py rate_limiter.py README.md collector.py constants.py container.py metric_collectors.py runtime_metrics.py tag_collectors.py __init__.py safety.py sampling.py service.py sma.py sysdep.h data.py writer.py __init__.py uds.py attr.py attrdict.py cache.py config.py deprecations.py formats.py http.py importlib.py inspection.py time.py version.py wrappers.py __init__.py uwsgi.py wrapping.py writer.py _context.py _encoding.c _encoding.pyi _encoding.pyx _rand.c _rand.pyi _rand.pyx _stdint.h _tagset.c _tagset.pyi _tagset.pyx _utils.h _utils.pxd __init__.py helpers.py binary.py http.py propagator.py text.py __init__.py settings.py span.py span_context.py tags.py tracer.py utils.py __init__.py pin.py auto.py sitecustomize.py __init__.py asyncio.py memalloc.py stack.c stack.pyi stack.pyx stack_event.py threading.py _lock.py _memalloc.c _memalloc.pyi _memalloc_heap.c _memalloc_heap.h _memalloc_tb.c _memalloc_tb.h _pymacro.h _task.c _task.pyi _task.pyx _traceback.c _traceback.pyi _traceback.pyx _utils.h __init__.py event.py file.py http.py pprof.c pprof.proto pprof.pyi pprof.pyx pprof_pb2.py pprof_pre312_pb2.py pprof_pre319_pb2.py __init__.py profiler.py recorder.py scheduler.py _asyncio.py _build.c _build.pyi _build.pyx _threading.c _threading.pyi _threading.pyx _traceback.py __init__.py http.py _utils.py __init__.py provider.py py.typed __init__.py sampler.py config.py exceptions.py http.py integration.py __init__.py span.py tracer.py __init__.py moves.py removals.py renames.py updating.py _utils.py __init__.py base.py compat.py context.py context_async.py format.py route.py __init__.py __init__.py common.c common.h ifaddrs.c ifaddrs.h net_connections.c net_connections.h net_kernel_structs.h proc_socks.c proc_socks.h specific.c specific.h sys_socks.c sys_socks.h socks.c socks.h specific.c specific.h specific.c specific.h process_info.c process_info.h environ.c environ.h ifaddrs.c ifaddrs.h global.c global.h inet_ntop.c inet_ntop.h ntextapi.h process_handles.c process_handles.h process_info.c process_info.h security.c security.h services.c services.h wmi.c wmi.h setup.py _common.py _compat.py _psaix.py _psbsd.py _pslinux.py _psosx.py _psposix.py _pssunos.py _psutil_aix.c _psutil_bsd.c _psutil_common.c _psutil_common.h _psutil_linux.c _psutil_osx.c _psutil_posix.c _psutil_posix.h _psutil_sunos.c _psutil_windows.c _pswindows.py __init__.py arguments.py decorators.py importer.py LICENSE setup.py wrappers.py _wrappers.c __init__.py __init__.py version.py _hooks.py _logger.py _monkey.py _version.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt ddtrace_gevent_check.py .python-version Dockerfile.buster docker-compose.yml advanced_usage.rst api.rst basic_usage.rst benchmarks.rst conf.py configuration.rst contributing.rst index.rst installation_quickstart.rst integrations.rst release_notes.rst requirements.txt shared.rst spelling_wordlist.txt troubleshooting.rst upgrading.rst versioning.rst _release_notes_all.rst navigation.html autohook.sh 01-run-black 02-run-mypy 03-run-flake8 04-run-codespell run-slotscheck.sh run-black.sh run-codespell.sh run-flake8.sh run-mypy.sh run-slotscheck.sh LICENSE LICENSE.Apache LICENSE.BSD3 mypy.ini NOTICE PKG-INFO pyproject.toml README.md config.yaml 1.0-remove-default-sampler-d1f6bcb2b23ca8a7.yaml add-aiomysql-d7803bcb9a1b1777.yaml add-aredis-support-416f890073cc7113.yaml add-automatic-dogstatsd-uds-detection-9a3cb9a833b3e95b.yaml add-automatic-trace-uds-detection-7c7602c6a06f03d2.yaml add-back-starlette-fastapi-aggregate-resources-21855734c8b45d45.yaml add-datadog-trace-tag-propagation-f69736976107f1c2.yaml add-dd-trace-agent-timeout-seconds-env-844b53ff0ccc7c9f.yaml add-dd_call_basic_config-env-15570281d176f438.yaml add-django-channels-support-44aefaa21961adff.yaml add-django-disable-templates-af5bdf524f27156f.yaml add-dm-trace-tag-471f5ee0303a8497.yaml add-grpc-aio-support-c59efa5557aeea8f.yaml add-httpx-integration-6e2493b2ea605203.yaml add-option-for-ddtrace-file-logs-d87104ec7cdfb6fd.yaml add-py27-windows-support-a624cbc63b8f90de.yaml add-pytest-bdd-integration-ce14f6be6d63ba01.yaml add-runtime-and-sampling-rules-to-startup-logs-18a8a8236d4131f5.yaml add-sampling-rule-environment-variable-2fe72140f8395b86.yaml add-snowflake-9fdedcd5058de2f7.yaml add-span-get-tags-metrics-7969ba7843dcc24d.yaml add-trace-injector-for-botocore-eventbridge-7dd2e56134b9472f.yaml add-warning-after-shutdown-tracer-dd8799467c4d29c8.yaml add-writer-env-config-7c0916dff4f7f80c.yaml adds-support-for-DD_DJANGO_INSTRUMENT_DATABASES-and-DD_DJANGO_INSTRUMENT_CACHES-env-variables-6e072e130d2433f5.yaml agent-url-path-f48aa4949b954dd5.yaml aiohttp-98ae9ce70dda1dbc.yaml aiohttp-remove-1.x-7a899e50dff73357.yaml aiohttp_jinja2-25d9a7b4e621fad2.yaml aiopg-0160-67bac7e073e4bbf9.yaml aioredis-integration-65c72aefff9d814c.yaml asgi-bc983a8dfffe823e.yaml asgi-span-19e772cb2f09ef4d.yaml asm_fix_headers-9bd1585200be8a2a.yaml asyncio-lock-14b10fa0f1e43ed3.yaml asyncpg-45cdf83efdf9270d.yaml botocore-46f5bf04f64777b4.yaml botocore-distributed-tracing-config-cd37b439d6d77dc6.yaml botocore-error-statuses-fd69f83dfd2eac4e.yaml botocore-exclude-records--74ac3e5d4d4fdc95.yaml botocore-no-body-params-a440cd8b7fb9bd68.yaml bottle-int-config-6772ca40a3954399.yaml build-deploy-py39-wheels-6524f77277e3c788.yaml cherrypy-first-version-89893f512b2fa083.yaml ci-error-79b5f3fae44269bb.yaml ci-providers-git-metadata-6229ff3cf9a347d9.yaml configure-6973c2ed2105a1c0.yaml configure-a39313ef4fed9028.yaml context-3467ab87a70c601e.yaml context-d43f1c79c78cb923.yaml context-df929fc8dfe148ba.yaml correct-type-annotations-2ee30779966960b6.yaml current-span-reset-a860bbbad3acda5c.yaml datadog-lambda-extension-6ae77025f24a82cc.yaml dbapi-ctx-manager-008915d487d9f50d.yaml dbapi2-deprecate-analytics-config-ececae6e9274f852.yaml ddtags-space-82407d0d3f0426cd.yaml ddtrace-1.0-disable-basic-config-call-by-default-b677844e4a13a794.yaml ddtrace-run-enhancements-eb156e6722164894.yaml ddtracerun-gevent-928b4050fd96f142.yaml depends-on-attrs-19687d5b7a597744.yaml depends-on-six-e9b79edbf0d169a2.yaml deprecate-additional-datadog-env-4077d12f08f91bed.yaml deprecate-aiohttp_jinja2-patching-from-aiohttp-be87600f308ca87a.yaml deprecate-compat-c70f99dc038bc947.yaml deprecate-constants-e6ea6706d38b186f.yaml deprecate-datadog-env-3011aafe83b66e37.yaml deprecate-datadogsampler-default_sampler-7f4a8f9923cd3c7b.yaml deprecate-dbapi-config-0fc5b1acfc4aded2.yaml deprecate-dd-tracer-configs-b05936f5ab56d128.yaml deprecate-ddtrace-encoding-84ffb8a36694161f.yaml deprecate-ddtrace-http-ce198e779de69237.yaml deprecate-http-server-config-82e5e9b9c7ac0024.yaml deprecate-monkey-functions-01f8080ab711ae74.yaml deprecate-pin-app-de153348b61a9905.yaml deprecate-pyddprofile-41de3d099775ee0c.yaml deprecate-span-get-set-meta-c6fb2528d198414c.yaml deprecate-span-meta-ad1c96ba55acaac9.yaml deprecate-span-metrics-89e72fb008a567d6.yaml deprecate-span-pprint-master-101afa039a6bbaee.yaml deprecate-span-tracer-master-6c8666cf49ee4f4a.yaml deprecate-tracer-log-attribute-a7fb4c9c23d5b7b4.yaml deprecate-tracer-sampler-attribute-c7c9d0523a8162a7.yaml deprecate-tracer-tags-attribute-e1b3706820110a09.yaml deprecate-tracer-writer-b4921987ad47a832.yaml deprecate_external_ddtrace.propagation.utils-e5106df5b4723310.yaml disable-internal-tag-propagation-dff3e799fb056584.yaml django-2ebd5565ee27d4d1.yaml django-4-support-eadd627959b9344e.yaml django-404-214280e31b72571c.yaml django-9ce233836fca5d93.yaml django-asgi-69a53398d9596679.yaml django-key-error-be8812133f0ef920.yaml django-multiple-function-middleware-54999c787cf003a0.yaml django-request-uri-safe-guards-fdd8bd664374ded1.yaml django-view-mro-check-782374fb9c427305.yaml docs-gunicorn-bd0db8c3c25c7deb.yaml dogpile-cc205f8abf149360.yaml dogpile.cache-1d03e088872ca747.yaml drop-gevent-10-438387fecc241e60.yaml elastic-integration-service-name-fix-72f7bfffb835cc5d.yaml elasticsearch-0a97722c93d66016.yaml enable-aredis-default-ec2280b4681392b8.yaml encode-sns-msg-attributes-as-b64-7818aec10f533534.yaml encoding-strict-types-b2bbd0844b28168a.yaml es-92a00e4a03a65da6.yaml falcon-int-config-a85b605cac4a7dbc.yaml fastapi-trace-serialize-response-7aa66e459cceb26c.yaml feat-runtime-distribution-e27687432f7ee4a5.yaml feature-aiohttp-23084fcf8e34ad0a.yaml feature-bottle-44cadc4aabaa750d.yaml feature-ciapp-detect-code-owners-for-PyTest-tests-f8f66db2dc02ae91.yaml feature-fastapi-ccce6171c5e1ccde.yaml feature-flask-4bdb2b839fada0fb.yaml feature-flask-6744ed2003376d74.yaml feature-inject-trace-lambda-invoke-818866a5de2015a9.yaml feature-injectr-trace-sqs-send-message-035dc3300db0cad0.yaml feature-molten-041abc52f37eed37.yaml feature-pyodbc-52e513ccf4c6a03c.yaml feature-pyramid-aa3d4c3361861753.yaml feature-service-mapping-b1c6cf37a5ad6417.yaml feature-starlette-e5171e4b2b2646c3.yaml feature-urllib3-integration-ab30709c8a39934c.yaml fix-aiobotocore-9eeac808a3bf0f63.yaml fix-aiohttp-jinja2-import-2b7e29a14a58efdc.yaml fix-aiohttp_jinja2-failed-imports-sev2 fix-aiomysql-async-with-usage-ac6510f48ed0e6fe.yaml fix-aioredis-13-parenting-6b03cc692ac639ce.yaml fix-aioredis-async-with-pipeline-805966300810edf8.yaml fix-aioredis-coroutine-execute-10fc849a7123b456.yaml fix-aioredis-unicodedecodeerror-b861b199e8757950.yaml fix-appsec-deprecated-import-8e834665d0b1e5d5.yaml fix-asgi-durations-include-background-tasks-4add6b50712608b2.yaml fix-asgi-middleware-url-tags-06051605794f88f7.yaml fix-attribute-error-in-flask-2.2.0-94524c33b005d48a.yaml fix-botocore-env-vars-89b106aadf2bba1d.yaml fix-botocore-missing-response-meta-e80c1cfb34ec0881.yaml fix-botocore-omit-secretstring-secretbinary-743a1780c86db384.yaml fix-container-id-cgroup-parsing-28790e02a2ac0adc.yaml fix-dbapi-rowcount-guard-6c6455278f15d262.yaml fix-dd-origin-py2-7bb39ed9e45e2131.yaml fix-ddtrace-file-logs-bytes-env-var-ed690ffe3fb96f7e.yaml fix-ddtrace-run-url-envs-087ab03d4f25a732.yaml fix-deprecate-tracer-reuse-6d989d4acb538013.yaml Fix-deprecation-warning-for-asyncio.coroutine-on-tracer.wrap-373af979c39dfcd9.yaml fix-disabled-memory-leak-c793801e11c45bfe.yaml fix-django-cache-unicode-5777a6775fa312c4.yaml fix-django-correct-legacy-resource-c27c7402b6b0be37.yaml fix-django-db-connections-b9b98a7b49f27c5f.yaml fix-django-db-postgres-7aa62a1c3aff647d.yaml fix-django-empty-middleware-056f9c75ad963f1f.yaml fix-django-resource-name-when-urlconf-changes-3daea582df79fcb6.yaml fix-django-resource-override-135d9ad7a668a51d.yaml fix-django-str-tags-ad4f0b9e2d0eff12.yaml fix-elasticsearch-a3f89a915ccc36c4.yaml fix-encode-tagset-value-2b8bb877a88bc75a.yaml fix-encoder-thread-safe-5c6924013c51d4f6.yaml fix-encoding-exceptions-c12900b38741d2bf.yaml fix-fargate-cgroup-parsing-9ba690fc7e2e57f4.yaml fix-flask-non-string-view-args-ed0283ddb1541e27.yaml fix-flask-werkzeug-ignore-server-error-5131cbe28afca03a.yaml fix-forksafe-after-in-child-f13fb133563c7b53.yaml fix-futures-args-a206048e19889ad7.yaml fix-gevent-autopatching-7d77beebd4698da2.yaml fix-grpc-client-meta-1145db1fec07255f.yaml fix-grpc-intercept-channel-not-unpatched-5a4252256801ad09.yaml fix-grpc-method-93038a476c9e95aa.yaml fix-grpc-streaming-next-5acf03fec7056a48.yaml fix-grpc-streaming-prefetch-95e816bd0fd85723.yaml fix-grpc-target-0a1daf38516be79f.yaml fix-jinja2-non-str-template-name-4cb2aa7cda15828a.yaml fix-json-encoder-bytes-d35121d00f2b8caf.yaml fix-log-correlation-service-ce734c2134125124.yaml fix-logger-standard-logging-rate-envvar-155e113deea71e85.yaml fix-logging-strformatstyle-9c02e1d024961c0f.yaml fix-mako-template-filename-31efcdb8592758c6.yaml fix-manual-runtime-metrics-0873e17de485f8b0.yaml fix-monkey-patch-on-import-7bbf81bcd2a86f11.yaml fix-monkey-patch-typing-ab13fc458c90a260.yaml fix-mypy-py2-redis-4c8d3b4e461c6074.yaml fix-profiler-allocation-metrics-96b88193d7810065.yaml fix-profiler-gevent-dummy-threads-bfef39da4976aa4b.yaml fix-profilier-unicode-py27-170d078ba5712f2d.yaml fix-psutil-macos-0cd7d0f93b34e3e4.yaml fix-pyston-memalloc-e8f4002e5c11df8c.yaml fix-pytest-bdd-6-88421928af50dc42.yaml fix-pytest-doctest-4918b724f736ef88.yaml fix-pytest-parameterize-encoding-b8711d2d7dbb282a.yaml fix-pytest-parameterized-606fbc3a574c67c6.yaml fix-pytest-test-status-dcdef93ac5b988d7.yaml fix-pytest-xfail-skip-module-20028429433b47d4.yaml fix-resource-name-when-fastapi-starlette-use-subapps-95ac82b038e6cbf9.yaml fix-runtime-default-interval-e3afb49f45296877.yaml fix-sampler_sample_rate_bug-b93ffc6036982ba8.yaml fix-sanic-21-2d24b817e010ed84.yaml fix-sanic-dont-send-error-traces-on-non-500s-b194927b887ad9d9.yaml fix-sanic-non-str-args-4d1b0f506bee3436.yaml fix-sanic-resource-name-e9f5b0417f3cda13.yaml fix-span-finish-signature-b0c1073b56c3b559.yaml fix-span-type-web-20122b5c57c50341.yaml fix-starlette-fastapi-api-2f72701e2b179f02.yaml fix-starlette-unpatch-24829144874afc6d.yaml fix-tornado-set-span-error-2e82f62e94e31791.yaml fix-trace-tag-config-e1bc9c83f066eb51.yaml fix-tracer-logging-init-25e8de1dd9d09ac9.yaml fix-trace_id_lock-profiling-585779e8713144f3.yaml fix-unwrap-silent-error-2de7513089b6ccfe.yaml fix-utils-import-c0f574d76de77261.yaml fix-writer-recreate-8780a0713812efeb.yaml fix.urllib3.integration-610312498fcdce86.yaml fix_pyramid_caller_package_level-220f67c8063c2d25.yaml flask-241a6dd8c17e2c12.yaml flask-caching-c23ec5c1218a8bf3.yaml flask-codes-f0841d78ec847807.yaml flask-fix-query-encoding-ef177f8c9c7a679a.yaml flask-http-helpers-0167071f46a36e00.yaml flask_caching-dc23b94171041b4f.yaml flask_improve_resource_naming_when_error_occurs-ea094145551e4ec7.yaml fork-leak-74288f3ce2a2bc28.yaml futures-f485da98a50c9d50.yaml gevent-pynamodb-fix-72ac7017e51fd4f9.yaml gevent-warning-f91ed0e6cac71a21.yaml grpc-client-measured-span-aa043d35bfe71238.yaml grpc-future-callback-a3cc27b11df34eef.yaml httplib-3b8917c90d162170.yaml httpx-service-ensure-text-03dbf31d2ff29fc2.yaml internalize-ddtrace-utils-357b623ac04acbf2.yaml internalize-monkey-1d84ea8cab7b9977.yaml internalize_http_server-06721b67e63dde1d.yaml jinja2-3-ec7df3666745f29b.yaml keep-alive-b5ec5febb435daad.yaml libddwaf-1.0.18-update-61c1513f3e632195.yaml log-correlation-context-0ca54b5caf687b2d.yaml log-correlation-context-22d56ee0b5cc9cfa.yaml make-more-informative-info-command-cbd96b1099e01792.yaml mariadb-8e7bc94a0d1b8f02.yaml metrics-api-5fb1d572d7f7137e.yaml mongo-2f086c64dbbc8be1.yaml moved-error-constants-97c7278a381b56d0.yaml moved-priority-constants-316d6b3b791d6b3e.yaml moved-system-constants-7894698d5734235a.yaml mysql-python-removal-f0578e89590aaf2f.yaml mysqldb-trace-connect-53686ab262bf37d5.yaml null-trace-propagation-95ca602d2cc05ea1.yaml opentracer-config-4b0422f49f325584.yaml opentracer-span-1abe3738df78d3c1.yaml os-runtime-metadata-98845c31e21f6ea2.yaml parent-id-abd4f7776f54399c.yaml perf-celery-reduced-overheads-6afe03acf1af703f.yaml perf-improve-header-extraction-30f575d5034b7e20.yaml pin-protobuf-v4-357193706afd46e6.yaml pin-protobuf-version-e06dd99a8fa47196.yaml pin-setuptools_scm-version-68118597b691b41c.yaml prof-proto4-391ce18af277ec54.yaml profielr-heap-iterate-freezer-frees-a366cc6dbeadd188.yaml profiler-gevent-warns-on-late-patch-3f4f897c8904591c.yaml profiler-heap-max-alloc-bugfix-646423cdd7f7811f.yaml profiler-stack-greenlet-tracer-6f960c1557fd39c4.yaml profiler-uds-108b876bdab8a151.yaml profiler-url-c61885c7d1fd5ea6.yaml profiling-add-asyncio-locks-support-fc556221de2e0d34.yaml profiling-agentless-feb211ee5e1f454f.yaml profiling-asyncio-fix-missing-main-thread-dec4b0759094c571.yaml profiling-asyncio-less-clear-threads-33d3436ab76ea158.yaml profiling-asyncio-tasks-ada2014dc47fdf7a.yaml profiling-default-timeout-agent-43b19237a21fd337.yaml profiling-disable-memory-option-c6f3765b020f4bcb.yaml profiling-enable-new-memalloc-profiler-default-fac01a6d596b6404.yaml profiling-export-tags-fixed-9d383890c8e5c4c1.yaml profiling-fix-deadlock-gevent-1e6192828238def3.yaml profiling-fix-ignore-profiler-gevent-stack-collector-3270d81c84080ccb.yaml profiling-fix-memory-alloc-numbers-a280c751c8f250ba.yaml profiling-fix-newline-error-8d4d10ed61143e16.yaml profiling-fix-profiler-copy-6d775a134ec2233f.yaml profiling-fix-uds-ebf0ea0587c8a23c.yaml profiling-fix-uwsgi-empty-profiles-7dbd5fdd93dea47f.yaml profiling-gevent-support-older-8e1eb89e36ba8c14.yaml profiling-gevent-task-inject-86c14864ca018dfa.yaml profiling-heap-enabled-c755d2c42871e930.yaml profiling-heap-fix-iteration-a117269849514c5e.yaml profiling-heap-profiler-enabling-186ae7679b84d39a.yaml profiling-ignore-profiler-daa056f8384008dc.yaml profiling-lower-max-cpu-usage-default-59458d90e0d6d33d.yaml profiling-no-flush-on-fork-c6c2b3c2d27a9a32.yaml profiling-option-to-disable-endpoint-collection-48ab251acb0d9b4e.yaml profiling-remove-profile-fbf8e32388899b05.yaml profiling-remove-pyddprofile-1a699c195d9d3ab0.yaml profiling-remove-tracemalloc-memory-collector-7a98634e0d9672a6.yaml profiling-remove-uncaught-exception-be09cc1bca6b7af6.yaml profiling-resource-name-fix-5f73526a307e8b40.yaml profiling-smaller-defaults-93481e676688930f.yaml profiling-stack-exception-sample-trace-49228a2ce81b32ca.yaml profiling-tags-api-f4d732d3c31ee2cf.yaml profiling-task-pprof-3afb83e36a63aeaf.yaml profiling-threading-tracing-6877348333bbaa80.yaml profiling-timeout-10s-a2468ce1444887b5.yaml profiling-track-task-gevent-threading-lock-313ac1db779e624a.yaml profiling-update-trace-resource-after-finish-3ec59fa98d3eded8.yaml profiling-use-tracer-config-83aa0ae0c2c53086.yaml profiling-uwsgi-faaeb38f11bd287b.yaml psycopg-before-27-removal-d6e551e47038abde.yaml psycopg-trace-connect-option-0893f5b2d2745ed0.yaml py39-5a422b73ba563189.yaml pylons-http-3d542b80b3fc4b48.yaml pylons-int-config-b500a59f78297b88.yaml pymemcache-update-c6d830daa541b3c8.yaml pymongo-4.0.2-1f5d2b6af5c158d2.yaml pymongo-config-6e4495f0be97e288.yaml pymongo-disabled-tracer-bug-fix-d7782296afe5c1a9.yaml pymongo-double-patching-topology-dd90eda48daa051c.yaml pyramid-config-7db0cb8f089c9417.yaml pyramid-init-ea34d2717aab6aab.yaml pytest-add-test-framework-version-adfb7fb30f7b304b.yaml pytest-d174e595f0c8abd0.yaml pytest-disable-note-dababc18228d1f85.yaml pytest-filter-out-non-test-traces-5864d681dd4d7017.yaml pytest-fix-xfail-unsafe-access-f579fef50d5bd4fa.yaml pytest-parameters-7d6acf4ca1419be0.yaml pytest-patch-all-05b2c812bf6ce0c2.yaml pytest-service-name-8c9d0f37b159a561.yaml pytest-xfail-c15914f8ae3281c9.yaml python310-cd0cbde016d9dced.yaml redis-asyncio-4b0b6a2a9d8f58c0.yaml redis-asyncio-fix-f74f07b715b007d1.yaml release-1.0-758fc917e40d7eb3.yaml remove-apptypes-76c78d46c1792863.yaml remove-cassandra-traced-1b3211d1f9071e6f.yaml remove-celery-patch-task-3ad91299e26259d0.yaml remove-clone-context-3cc6f3d73f15345e.yaml remove-constants-deprecations-023fbd010e7c767c.yaml remove-contrib-util-e4a33ee4684b457a.yaml remove-ddtrace-compat-4146d5adc293bf17.yaml remove-ddtrace-encoding-5e35232cc5b3f855.yaml remove-ddtrace-http-affe61bc13f9c613.yaml remove-ddtrace-install-excepthooks-8107b679a9f51ef3.yaml remove-ddtrace-monkey-16e56038dc409769.yaml remove-ddtrace-propagation-utils-171fa44d0479028f.yaml remove-ddtrace-utils-ae7231d2e4f130b2.yaml remove-deprecated-collect-metrics-82d9bbff853a6704.yaml remove-deprecated-dbapi-config-b25bc1b236672fed.yaml remove-deprecated-tracer-attributes-4bb24b794a1aacb9.yaml remove-ext-errors-43d7aca3e1765807.yaml remove-ext-priority-be59e69e52c65ec9.yaml remove-ext-system-a70c1fbbec3b32ff.yaml remove-helpers-f3c274e83104ff2a.yaml remove-legacy-service-name-365da3952e073dd5.yaml remove-mongoengine-traced-4e00b1175e6e5ca0.yaml remove-mysql-legacy-c09206695dcaf541.yaml remove-payload-submodule-58fac4aaf3d4f5da.yaml remove-pin-app-apptype-8d0addd243deb7f9.yaml remove-psycopg-factory-98769b2b2e040dd8.yaml remove-requests-legacy-distributed-302154022c58186a.yaml remove-span-deprecated-51fa2f55f53aebd5.yaml remove-span-get-set-meta-c6fb2528d198414d.yaml remove-span-todict-98117485031335cd.yaml remove-span-tracer-ddtrace-1-0-bc0ced48b2806e3c.yaml remove-sqlite3-connection-f641a48c5fa90e1f.yaml remove-tracer-deprecations-c0abaecda9c24b79.yaml remove-tracer-writer-b1875a1fa3230236.yaml remove-v1deprecationwarning-2c251ca219182b97.yaml removed_ddtrace.util.py-0d0f48aefa6d9779.yaml remove_deprecated_environment_variables-3ed446513ab21409.yaml requests-b06e324e36e03ae5.yaml restart-profiler-fork-9bfaec1942112026.yaml rq-98bc7f540452e948.yaml runtime-metrics-runtime-error-33e2d4cc17cf4aca.yaml runtimeid-39dfdf1e0c1af45d.yaml span-22c2917b9580c0e6.yaml span-pprint-json-855d32f50798fd8d.yaml span-types-enum-5ca7cb35031a199e.yaml startup-logs-4d7acd6fa6b34074.yaml support-b3-headers-25f8fc24ca4f7233.yaml support-flask-2-659163726a5f66aa.yaml support-sanic-21.9.0-6c5de52c832f9dcc.yaml tornado-int-config-a8900a60201d4d61.yaml tornado-none-bug-85faed75c859f5e5.yaml trace-58c201a4a5f38002.yaml trace-header-tags-88711cc9a4466d8e.yaml traced-session-1f2134ac99449b91.yaml tracer-200a66ebb04f6cb0.yaml tracer-toplevel-a1600adc84be9039.yaml tracer-upload-retry-d60310aa6c91059d.yaml tracer-write-dc2f9d95c0e4d11f.yaml update-ci-metadata-extraction-1f5c1b2b0da14287.yaml update-ci-metadata-extraction-7f5259a18a60fa83.yaml update-deprecated-contrib-removal-version-ca920d9e1d91b6e0.yaml url-7d1cb4e659ebca31.yaml url-sanitizer-26c7078e37f395c0.yaml user-defined-git-metadata-c333300e16662551.yaml utils-remove-merge-dicts-9252805c864677f8.yaml uwsgi-workaround-6fbfde6c19691d8b.yaml wsgi-30613a9c30834225.yaml wsgi-73cf1d35043e7fef.yaml yaaredis-integration-9cf0d99f0261a209.yaml riotfile.py build-dist build-dist-cp27 build-docs cformat.sh check-releasenotes cppcheck.sh ddtest diff.py get-target-milestone.py mkwheelhouse perf-build-push perf-build-scenario perf-run-scenario k6-load.js run.sh setup.sh run.py run.sh setup.sh README.md run-tox-scenario stubgen.sh tested_pythons validate-version setup.cfg setup.py patch.py __init__.py rules-bad.json rules-good.json test_ddwaf_fuzz.py test_processor.py __init__.py test_encoding.py test_glob_matching.py test_span_id.py test_tracer.py __init__.py conftest.py __init__.py sitecustomize.py __init__.py ddtrace_minimal.py ddtrace_run_app_name.py ddtrace_run_argv.py ddtrace_run_debug.py ddtrace_run_disabled.py ddtrace_run_dogstatsd.py ddtrace_run_enabled.py ddtrace_run_env.py ddtrace_run_gevent.py ddtrace_run_global_tags.py ddtrace_run_hostname.py ddtrace_run_integration.py ddtrace_run_logs_injection.py ddtrace_run_no_debug.py ddtrace_run_patched_modules.py ddtrace_run_priority_sampling.py ddtrace_run_profiling.py ddtrace_run_service.py ddtrace_run_sitecustomize.py test_runner.py __init__.py conftest.py test.py utils.py __init__.py empty.txt template.jinja2 __init__.py web.py __init__.py conftest.py test_aiohttp_client.py test_middleware.py test_request.py test_request_safety.py __init__.py conftest.py test_aiohttp_jinja2.py __init__.py test_aiomysql.py __init__.py test.py __init__.py test.py __init__.py test.py __init__.py test_aioredis.py __init__.py test.py __init__.py test_aredis.py __init__.py test_asgi.py __init__.py test_helpers.py test_patch.py test_propagation.py test_tracer.py test_tracer_safety.py utils.py __init__.py test_asyncpg.py __init__.py test.py __init__.py test.py __init__.py test.py test_autopatch.py test_distributed.py __init__.py test.py __init__.py autopatch.py base.py test_app.py test_autopatch.py test_integration.py test_old_style_task.py test_patch.py test_utils.py __init__.py test.conf test_middleware.py web.py __init__.py config.py test.py __init__.py test_dbapi.py __init__.py asgi.py compat.py conftest.py settings.py urls.py __init__.py extra_urls.py settings.py urls.py __init__.py middleware.py basic.html cached_list.html custom_dispatch.html users_list.html test_django.py test_django_appsec.py test_django_patch.py test_django_snapshots.py views.py __init__.py exceptions.py settings.py views.py __init__.py conftest.py test_djangorestframework.py __init__.py conftest.py app_urls.py extra_urls.py hosts.py settings.py urls.py __init__.py test_django.py views.py __init__.py test_tracing.py __init__.py test_elasticsearch.py test_elasticsearch_multi.py __init__.py app.py resources.py __init__.py test_distributed_tracing.py test_middleware.py test_suite.py __init__.py app.py test_fastapi.py test_fastapi_patch.py __init__.py test.txt test_blueprint.py test_errorhandler.py test_flask_appsec.py test_flask_helpers.py test_hooks.py test_idempotency.py test_request.py test_signals.py test_static.py test_template.py err.html render_err.html test.html test_views.py web.py __init__.py test_flask_autopatch.py err.html test.html __init__.py test.py test_utils.py test_wrapper_safety.py __init__.py test_propagation.py __init__.py monkeypatch.py test_monkeypatch.py test_provider.py test_tracer.py utils.py wrong_program_gevent.py __init__.py hello.proto hello_pb2.py hello_pb2_grpc.py test_grpc.py test_grpc_patch.py test_grpc_utils.py __init__.py test_grpc_aio.py __init__.py test_httplib.py test_httplib_distributed.py __init__.py test_httpx.py __init__.py base.html template.html test_jinja2.py __init__.py test.py __init__.py test_logging.py test_tracer_logging.py __init__.py template.html test_mako.py __init__.py test_mariadb.py __init__.py test_molten.py test_molten_di.py __init__.py test.py __init__.py test_mysql.py __init__.py test_mysqldb.py __init__.py patch.py test_psycopg.py test_psycopg_snapshot.py __init__.py test.py __init__.py root.py __init__.py base.py helpers.py __init__.py middleware.py router.py exception.mako template.mako web.py __init__.py test.ini test_pylons.py __init__.py test.py __init__.py test_client.py test_client_mixin.py utils.py __init__.py test.py test_spec.py __init__.py test_pymysql.py __init__.py test_pynamodb.py __init__.py test_pyodbc.py __init__.py app.py web.py __init__.py routes.py __init__.py development.ini setup.py test_pyramid.py utils.py __init__.py test_pytest.py __init__.py test_pytest_bdd.py __init__.py test_redis.py test_redis_asyncio.py __init__.py test.py __init__.py test_requests.py test_requests_distributed.py __init__.py jobs.py test_rq.py __init__.py conftest.py run_server.py test_sanic.py test_sanic_server.py __init__.py test_snowflake.py test_snowflake_patch.py __init__.py mixins.py test_mysql.py test_patch.py test_postgres.py test_sqlite.py __init__.py test_sqlite3.py __init__.py app.py test_starlette.py test_starlette_patch.py __init__.py test_config.py test_executor_decorator.py test_safety.py test_stack_context.py test_tornado_template.py test_tornado_web.py test_wrap_decorator.py utils.py app.py compat.py empty.txt exception.html item.html list.html page.html uimodules.py __init__.py __init__.py test_urllib3.py test_urllib3_patch.py __init__.py __init__.py test_vertica.py __init__.py test_wsgi.py __init__.py test_yaaredis.py __init__.py __init__.py ddtrace_run.py conftest.py test_discovery.py test_store.py __init__.py test_status.py __init__.py test_config.py test_encoding.py test_expressions.py test_uploader.py __init__.py hello.py test_debug.py test_encoding.py test_integration.py test_integration_snapshots.py test_propagation.py test_trace_stats.py __init__.py asyncstuff.py test_wrapping.py __init__.py test_wrapping.py __init__.py sitecustomize.py test_codeowners.py test_glob_matcher.py test_injection.py test_metrics.py test_module.py test_packages.py test_safety.py test_utils_http.py test_wrapping.py __init__.py conftest.py test_dd_compatibility.py test_span.py test_span_context.py test_tracer.py test_utils.py __init__.py test_tracer_asyncio.py test_tracer_gevent.py test_tracer_tornado.py utils.py __init__.py conftest.py test_asyncio.py test_collector.py test_memalloc.py test_stack.py test_stack_asyncio.py test_task.py test_threading.py test_threading_asyncio.py test_traceback.py _asyncio_compat.py __init__.py conftest.py test-pprof-exporter-py2.txt test-pprof-exporter.txt test_file.py test_http.py test_pprof.py __init__.py gevent_fork.py recorder_fork.py run.py simple_program.py simple_program_fork.py simple_program_gevent.py test_accuracy.py test_main.py test_profiler.py test_recorder.py test_scheduler.py test_traceback.py test_uwsgi.py utils.py uwsgi-app.py _test_multiprocessing.py _wrong_file __init__.py test_runtime_metrics_api.py __init__.py smoke_test.py tests.appsec.test_processor.test_appsec_span_tags_snapshot.json tests.contrib.aiohttp.test_aiohttp_client.test_200_request.json tests.contrib.aiohttp.test_aiohttp_client.test_200_request_post.json tests.contrib.aiohttp.test_aiohttp_client.test_500_request.json tests.contrib.aiohttp.test_aiohttp_client.test_configure_global_service_name_env.json tests.contrib.aiohttp.test_aiohttp_client.test_configure_service_name_pin.json tests.contrib.aiohttp.test_aiohttp_client.test_trace_multiple.json tests.contrib.aiohttp.test_aiohttp_client.test_trace_parenting.json tests.contrib.aiohttp.test_aiohttp_client.test_trace_query_string",
        "setup.py": "__all__ = [\"get_extensions\"]\n\nimport contextlib\nimport io\nimport os\nimport platform\nfrom setuptools import Extension\nimport shutil\nimport sys\nimport tempfile\n\nPOSIX = os.name == \"posix\"\nWINDOWS = os.name == \"nt\"\nLINUX = sys.platform.startswith(\"linux\")\nMACOS = sys.platform.startswith(\"darwin\")\nOSX = MACOS # deprecated alias\nFREEBSD = sys.platform.startswith(\"freebsd\")\nOPENBSD = sys.platform.startswith(\"openbsd\")\nNETBSD = sys.platform.startswith(\"netbsd\")\nBSD = FREEBSD or OPENBSD or NETBSD\nSUNOS = sys.platform.startswith((\"sunos\", \"solaris\"))\nAIX = sys.platform.startswith(\"aix\")\n\n\n@contextlib.contextmanager\ndef silenced_output(stream_name):\nclass DummyFile(io.BytesIO):\n# see: https:\/\/github.com\/giampaolo\/psutil\/issues\/678\nerrors = \"ignore\"\n\ndef write(self, s):\npass\n\norig = getattr(sys, stream_name)\ntry:\nsetattr(sys, stream_name, DummyFile())\nyield\nfinally:\nsetattr(sys, stream_name, orig)\n\n\ndef get_extensions():\nmacros = [(\"PSUTIL_VERSION\", 567)]\nif POSIX:\nmacros.append((\"PSUTIL_POSIX\", 1))\nif BSD:\nmacros.append((\"PSUTIL_BSD\", 1))\n\nsources = [\"ddtrace\/vendor\/psutil\/_psutil_common.c\"]\nif POSIX:\nsources.append(\"ddtrace\/vendor\/psutil\/_psutil_posix.c\")\n\nif WINDOWS:\n\ndef get_winver():\nwin_maj, win_min = sys.getwindowsversion()[0:2]\nreturn \"0x0%s\" % ((win_maj * 100) + win_min)\n\nif sys.getwindowsversion()[0] < 6:\nmsg = \"this Windows version is too old (< Windows Vista); \"\nmsg += \"psutil 3.4.2 is the latest version which supports Windows \"\nmsg += \"2000, XP and 2003 server\"\nraise RuntimeError(msg)\n\nmacros.append((\"PSUTIL_WINDOWS\", 1))\nmacros.extend(\n[\n# be nice to mingw, see:\n# http:\/\/www.mingw.org\/wiki\/Use_more_recent_defined_functions\n(\"_WIN32_WINNT\", get_winver()),\n(\"_AVAIL_WINVER_\", get_winver()),\n(\"_CRT_SECURE_NO_WARNINGS\", None),\n# see: https:\/\/github.com\/giampaolo\/psutil\/issues\/348\n(\"PSAPI_VERSION\", 1),\n]\n)\n\nsources += [\n\"ddtrace\/vendor\/psutil\/_psutil_windows.c\",\n\"ddtrace\/vendor\/psutil\/arch\/windows\/process_info.c\",\n\"ddtrace\/vendor\/psutil\/arch\/windows\/process_handles.c\",\n\"ddtrace\/vendor\/psutil\/arch\/windows\/security.c\",\n\"ddtrace\/vendor\/psutil\/arch\/windows\/inet_ntop.c\",\n\"ddtrace\/vendor\/psutil\/arch\/windows\/services.c\",\n\"ddtrace\/vendor\/psutil\/arch\/windows\/global.c\",\n\"ddtrace\/vendor\/psutil\/arch\/windows\/wmi.c\",\n]\next = Extension(\n\"ddtrace.vendor.psutil._psutil_windows\",\nsources=sources,\ndefine_macros=macros,\nlibraries=[\n\"psapi\",\n\"kernel32\",\n\"advapi32\",\n\"shell32\",\n\"netapi32\",\n\"wtsapi32\",\n\"ws2_32\",\n\"PowrProf\",\n\"pdh\",\n],\n# extra_compile_args=[\"\/Z7\"],\n# extra_link_args=[\"\/DEBUG\"]\n)\n\nelif MACOS:\nmacros.append((\"PSUTIL_OSX\", 1))\nsources += [\n\"ddtrace\/vendor\/psutil\/_psutil_osx.c\",\n\"ddtrace\/vendor\/psutil\/arch\/osx\/process_info.c\",\n]\next = Extension(\n\"ddtrace.vendor.psutil._psutil_osx\",\nsources=sources,\ndefine_macros=macros,\nextra_link_args=[\"-framework\", \"CoreFoundation\", \"-framework\", \"IOKit\"],\n)\n\nelif FREEBSD:\nmacros.append((\"PSUTIL_FREEBSD\", 1))\nsources += [\n\"ddtrace\/vendor\/psutil\/_psutil_bsd.c\",\n\"ddtrace\/vendor\/psutil\/arch\/freebsd\/specific.c\",\n\"ddtrace\/vendor\/psutil\/arch\/freebsd\/sys_socks.c\",\n\"ddtrace\/vendor\/psutil\/arch\/freebsd\/proc_socks.c\",\n]\next = Extension(\n\"ddtrace.vendor.psutil._psutil_bsd\", sources=sources, define_macros=macros, libraries=[\"devstat\"],\n)\n\nelif OPENBSD:\nmacros.append((\"PSUTIL_OPENBSD\", 1))\next = Extension(\n\"ddtrace.vendor.psutil._psutil_bsd\",\nsources=sources + [\"ddtrace\/vendor\/psutil\/_psutil_bsd.c\", \"ddtrace\/vendor\/psutil\/arch\/openbsd\/specific.c\"],\ndefine_macros=macros,\nlibraries=[\"kvm\"],\n)\n\nelif NETBSD:\nmacros.append((\"PSUTIL_NETBSD\", 1))\nsources += [\n\"ddtrace\/vendor\/psutil\/_psutil_bsd.c\",\n\"ddtrace\/vendor\/psutil\/arch\/netbsd\/specific.c\",\n\"ddtrace\/vendor\/psutil\/arch\/netbsd\/socks.c\",\n]\next = Extension(\"ddtrace.vendor.psutil._psutil_bsd\", sources=sources, define_macros=macros, libraries=[\"kvm\"],)\n\nelif LINUX:\n\ndef get_ethtool_macro():\n# see: https:\/\/github.com\/giampaolo\/ddtrace\/vendor\/psutil\/issues\/659\nfrom distutils.unixccompiler import UnixCCompiler\nfrom distutils.errors import CompileError\n\nwith tempfile.NamedTemporaryFile(suffix=\".c\", delete=False, mode=\"wt\") as f:\nf.write(\"#include <linux\/ethtool.h>\")\n\noutput_dir = tempfile.mkdtemp()\ntry:\ncompiler = UnixCCompiler()\n# https:\/\/github.com\/giampaolo\/ddtrace\/vendor\/psutil\/pull\/1568\nif os.getenv(\"CC\"):\ncompiler.set_executable(\"compiler_so\", os.getenv(\"CC\"))\nwith silenced_output(\"stderr\"):\nwith silenced_output(\"stdout\"):\ncompiler.compile([f.name], output_dir=output_dir)\nexcept CompileError:\nreturn (\"PSUTIL_ETHTOOL_MISSING_TYPES\", 1)\nelse:\nreturn None\nfinally:\nos.remove(f.name)\nshutil.rmtree(output_dir)\n\nmacros.append((\"PSUTIL_LINUX\", 1))\nETHTOOL_MACRO = get_ethtool_macro()\nif ETHTOOL_MACRO is not None:\nmacros.append(ETHTOOL_MACRO)\next = Extension(\n\"ddtrace.vendor.psutil._psutil_linux\",\nsources=sources + [\"ddtrace\/vendor\/psutil\/_psutil_linux.c\"],\ndefine_macros=macros,\n)\n\nelif SUNOS:\nmacros.append((\"PSUTIL_SUNOS\", 1))\nsources += [\n\"ddtrace\/vendor\/psutil\/_psutil_sunos.c\",\n\"ddtrace\/vendor\/psutil\/arch\/solaris\/v10\/ifaddrs.c\",\n\"ddtrace\/vendor\/psutil\/arch\/solaris\/environ.c\",\n]\next = Extension(\n\"ddtrace.vendor.psutil._psutil_sunos\",\nsources=sources,\ndefine_macros=macros,\nlibraries=[\"kstat\", \"nsl\", \"socket\"],\n)\n\nelif AIX:\nmacros.append((\"PSUTIL_AIX\", 1))\nsources += [\n\"ddtrace\/vendor\/psutil\/_psutil_aix.c\",\n\"ddtrace\/vendor\/psutil\/arch\/aix\/net_connections.c\",\n\"ddtrace\/vendor\/psutil\/arch\/aix\/common.c\",\n\"ddtrace\/vendor\/psutil\/arch\/aix\/ifaddrs.c\",\n]\next = Extension(\n\"ddtrace.vendor.psutil._psutil_aix\", sources=sources, libraries=[\"perfstat\"], define_macros=macros,\n)\nelse:\nraise RuntimeError(\"platform %s is not supported\" % sys.platform)\n\nif POSIX:\nposix_extension = Extension(\"ddtrace.vendor.psutil._psutil_posix\", define_macros=macros, sources=sources)\nif SUNOS:\nposix_extension.libraries.append(\"socket\")\nif platform.release() == \"5.10\":\nposix_extension.sources.append(\"ddtrace\/vendor\/psutil\/arch\/solaris\/v10\/ifaddrs.c\")\nposix_extension.define_macros.append((\"PSUTIL_SUNOS10\", 1))\nelif AIX:\nposix_extension.sources.append(\"ddtrace\/vendor\/psutil\/arch\/aix\/ifaddrs.c\")\n\nreturn [ext, posix_extension]\nelse:\nreturn [ext]\n"
    },
    {
        "package_name": "decopatch-1.4.10",
        "file_list": "base.yml .gitignore .travis.yml .pylintrc check_python_version.py flake8-requirements.txt github_release.py nox_utils.py changelog.md disambiguation.md index.md long_description.md motivation.md pep_proposal.md usage_details.md LICENSE mkdocs.yml noxfile-requirements.txt noxfile.py PKG-INFO pyproject.toml README.md setup.cfg setup.py main.py main.pyi py.typed utils_calls.py utils_disambiguation.py utils_modes.py _version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt test_doc.py test_doc_advanced.py test_doc_disambiguation.py test_introspection.py test_introspection_base.py test_issues.py test_main2.py test_main2_parametrizers.py test_so.py test_typing.py _test_doc_py3.py _test_issues_py3.py __init__.py",
        "setup.py": "\"\"\"\nTo understand this project's build structure\n\n- This project uses setuptools, so it is declared as the build system in the pyproject.toml file\n- We use as much as possible `setup.cfg` to store the information so that it can be read by other tools such as `tox`\nand `nox`. So `setup.py` contains **almost nothing** (see below)\nThis philosophy was found after trying all other possible combinations in other projects :)\nA reference project that was inspiring to make this move : https:\/\/github.com\/Kinto\/kinto\/blob\/master\/setup.cfg\n\nSee also:\nhttps:\/\/setuptools.readthedocs.io\/en\/latest\/setuptools.html#configuring-setup-using-setup-cfg-files\nhttps:\/\/packaging.python.org\/en\/latest\/distributing.html\nhttps:\/\/github.com\/pypa\/sampleproject\n\"\"\"\nfrom setuptools import setup\n\n\n# (1) check required versions (from https:\/\/medium.com\/@daveshawley\/safely-using-setup-cfg-for-metadata-1babbe54c108)\nimport pkg_resources\n\npkg_resources.require(\"setuptools>=39.2\")\npkg_resources.require(\"setuptools_scm\")\n\n\n# (2) Generate download url using git version\nfrom setuptools_scm import get_version # noqa: E402\n\nURL = \"https:\/\/github.com\/smarie\/python-decopatch\"\nDOWNLOAD_URL = URL + \"\/tarball\/\" + get_version()\n\n\n# (3) Call setup() with as little args as possible\nsetup(\ndownload_url=DOWNLOAD_URL,\nuse_scm_version={\n\"write_to\": \"src\/decopatch\/_version.py\"\n}, # we can't put `use_scm_version` in setup.cfg yet unfortunately\n)\n"
    },
    {
        "package_name": "deep-translator-1.8.3",
        "file_list": "base.py cli.py constants.py deepl.py detection.py engines.py exceptions.py google.py libre.py linguee.py microsoft.py mymemory.py papago.py pons.py qcri.py validate.py yandex.py __init__.py __main__.py README.rst PKG-INFO pyproject.toml setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['deep_translator']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['beautifulsoup4>=4.9.1,<5.0.0', 'requests>=2.23.0,<3.0.0']\n\nentry_points = \\\n{'console_scripts': ['deep-translator = deep_translator.__main__:main',\n'dt = deep_translator.__main__:main']}\n\nsetup_kwargs = {\n'name': 'deep-translator',\n'version': '1.8.3',\n'description': 'A flexible free and unlimited python tool to translate between different languages in a simple way using multiple translators',\n'long_description': '##################\\ndeep-translator\\n##################\\n\\n.. image:: ..\/assets\/icon.jpg\\n :width: 100\\n :align: center\\n :alt: deep-translator-icon\\n\\n|\\n\\n\\n.. image:: https:\/\/img.shields.io\/pypi\/v\/deep-translator.svg\\n :target: https:\/\/pypi.python.org\/pypi\/deep-translator\\n.. image:: https:\/\/img.shields.io\/travis\/nidhaloff\/deep-translator.svg\\n :target: https:\/\/github.com\/nidhaloff\/deep-translator\/actions\/workflows\/build.yml\\n.. image:: https:\/\/readthedocs.org\/projects\/deep-translator\/badge\/?version=latest\\n :target: https:\/\/deep-translator.readthedocs.io\/en\/latest\/?badge=latest\\n :alt: Documentation Status\\n.. image:: https:\/\/img.shields.io\/pypi\/l\/deep-translator\\n :target: https:\/\/pypi.python.org\/pypi\/deep-translator\\n\\n.. image:: https:\/\/img.shields.io\/pypi\/status\/deep-translator\\n :target: https:\/\/pypi.python.org\/pypi\/deep-translator\\n\\n.. image:: https:\/\/pepy.tech\/badge\/deep-translator\\n :target: https:\/\/pepy.tech\/project\/deep-translator\\n\\n\\n.. image:: https:\/\/img.shields.io\/pypi\/wheel\/deep-translator\\n :target: https:\/\/pypi.python.org\/pypi\/deep-translator\\n\\n.. image:: https:\/\/img.shields.io\/twitter\/url?url=https%3A%2F%2Ftwitter.com%2FNidhalBaccouri\\n :alt: Twitter URL\\n :target: https:\/\/twitter.com\/NidhalBaccouri\\n\\n\\n=======================\\nTranslation for humans\\n=======================\\n\\nA flexible **FREE** and **UNLIMITED** tool to translate between different languages in a simple way using multiple translators.\\n\\n\\n* Free software: MIT license\\n* Documentation: https:\/\/deep-translator.readthedocs.io.\\n* Swagger API: https:\/\/deep-translator-api.azurewebsites.net\/docs.\\n\\n|\\n|\\n\\n.. contents:: Table of Contents\\n :depth: 3\\n\\n|\\n|\\n\\n\\n==========\\nMotivation\\n==========\\n\\nI needed to translate a text using python. It was hard to find a simple way to do it.\\nThere are other libraries that can be used for this task, but most of them\\nare **buggy, not free, limited, not supported anymore or complex to use.**\\n\\nTherefore, I decided to build this simple tool. It is 100% free, unlimited, easy to use and provide\\nsupport for all languages.\\n\\nBasically, my goal was to integrate support for multiple famous translators\\nin this tool.\\n\\n======================\\nWhen you should use it\\n======================\\n\\n- If you want to translate text using python\\n- If you want to translate from a file\\n- If you want to get translations from many sources and not only one\\n- If you want to automate translations\\n- If you want to compare different translations\\n- If you want to detect language automatically\\n\\n======================\\nWhy you should use it\\n======================\\n\\n- It\\'s the only python tool that integrates many translators\\n- multi language support\\n- supports batch translation\\n- High level of abstraction\\n- Automatic language detection\\n- Easy to use and extend\\n- Support for most famous universal translators\\n- Stable and maintained regularly\\n- The API is very easy to use\\n- Proxy integration is supported\\n\\n========\\nFeatures\\n========\\n\\n* Support for `google translate <https:\/\/translate.google.com\/>`_\\n* Support for the `microsoft translator <https:\/\/www.microsoft.com\/en-us\/translator\/\/>`_ (version >= 1.3.5)\\n* Support for `Pons translator <https:\/\/de.pons.com\/>`_\\n* Support for the `Linguee translator <https:\/\/www.linguee.com\/>`_\\n* Support for the `Mymemory translator <https:\/\/mymemory.translated.net\/>`_\\n* Support for the `Yandex translator <https:\/\/yandex.com\/>`_ (version >= 1.2.1)\\n* Support for the `QcriTranslator translator <https:\/\/mt.qcri.org\/api\/>`_ (version >= 1.2.4)\\n* Support for the `DeeplTranslator translator <https:\/\/www.deepl.com\/en\/translator\/>`_ (version >= 1.2.5)\\n* Support for the `Papago translator <https:\/\/papago.naver.com\/>`_ (version >= 1.4.4)\\n* Support for the `Libre translator <https:\/\/libretranslate.com\/>`_\\n* Support for proxy usage\\n* Automatic single language detection\\n* Batch language detection\\n* Translate directly from a text file\\n* Get multiple translation for a word\\n* Automate the translation of different paragraphs in different languages\\n* Translate directly from terminal (version >= 1.1.0)\\n\\n=============\\nInstallation\\n=============\\n\\nInstall the stable release:\\n\\n.. code-block:: console\\n\\n $ pip install -U deep-translator\\n\\ntake a look at the docs if you want to install from source.\\n\\n============\\nQuick Start\\n============\\n\\n.. code-block:: python\\n\\n from deep_translator import GoogleTranslator\\n translated = GoogleTranslator(source=\\'auto\\', target=\\'de\\').translate(\"keep it up, you are awesome\") # output -> Weiter so, du bist gro\u00dfartig\\n\\nor using proxies:\\n\\n.. code-block:: python\\n\\n from deep_translator import GoogleTranslator\\n\\n proxies_example = {\\n \"https\": \"34.195.196.27:8080\",\\n \"http\": \"34.195.196.27:8080\"\\n }\\n translated = GoogleTranslator(source=\\'auto\\', target=\\'de\\', proxies=proxies_example).translate(\"keep it up, you are awesome\") # output -> Weiter so, du bist gro\u00dfartig\\n\\n\\nor even directly from terminal:\\n\\n.. code-block:: console\\n\\n $ deep-translator --source \"en\" --target \"de\" --text \"hello world\"\\n\\n or shorter\\n\\n $ dt -tg de -txt \"hello world\"\\n\\n\\n=====\\nUsage\\n=====\\n\\nIn this section, demos on how to use all different integrated translators in this tool are provided.\\n\\n.. note::\\n\\n You can always pass the languages by the name or by abbreviation.\\n\\n *Example*: If you want to use english as a source or target language, you can pass **english** or **en** as an argument\\n\\nImports\\n--------\\n\\n.. code-block:: python\\n\\n from deep_translator import (GoogleTranslator,\\n MicrosoftTranslator,\\n PonsTranslator,\\n LingueeTranslator,\\n MyMemoryTranslator,\\n YandexTranslator,\\n PapagoTranslator,\\n DeeplTranslator,\\n QcriTranslator,\\n single_detection,\\n batch_detection)\\n\\n\\nCheck Supported Languages\\n---------------------------\\n\\n.. note::\\n\\n You can check the supported languages of each translator by calling the\\n get_supported_languages function as a static method.\\n\\n.. code-block:: python\\n\\n # default return type is a list\\n langs_list = GoogleTranslator.get_supported_languages() # output: [arabic, french, english etc...]\\n\\n # alternatively, you can the dictionary containing languages mapped to their abbreviation\\n langs_dict = GoogleTranslator.get_supported_languages(as_dict=True) # output: {arabic: ar, french: fr, english:en etc...}\\n\\nLanguage Detection\\n------------------\\n\\n.. note::\\n\\n You can also detect language automatically. Notice that this package is free and my goal is to keep it free.\\n Therefore, you will need to get your own api_key if you want to use the language detection function.\\n I figured out you can get one for free here: https:\/\/detectlanguage.com\/documentation\\n\\n- Single Text Detection\\n\\n.. code-block:: python\\n\\n lang = single_detection(\\'bonjour la vie\\', api_key=\\'your_api_key\\')\\n print(lang) # output: fr\\n\\n- Batch Detection\\n\\n.. code-block:: python\\n\\n lang = batch_detection([\\'bonjour la vie\\', \\'hello world\\'], api_key=\\'your_api_key\\')\\n print(lang) # output: [fr, en]\\n\\n\\n\\nGoogle Translate\\n-----------------\\n\\n.. code-block:: python\\n\\n text = \\'happy coding\\'\\n\\n- You can use automatic language detection to detect the source language:\\n\\n.. code-block:: python\\n\\n translated = GoogleTranslator(source=\\'auto\\', target=\\'de\\').translate(text=text)\\n\\n- You can pass languages by name or by abbreviation:\\n\\n.. code-block:: python\\n\\n translated = GoogleTranslator(source=\\'auto\\', target=\\'german\\').translate(text=text)\\n\\n # Alternatively, you can pass languages by their abbreviation:\\n translated = GoogleTranslator(source=\\'en\\', target=\\'de\\').translate(text=text)\\n\\n- You can also reuse the Translator class and change\/update its properties.\\n\\n(Notice that this is important for performance too since instantiating new objects is expensive)\\n\\n\\n.. code-block:: python\\n\\n # let\\'s say first you need to translate from auto to german\\n my_translator = GoogleTranslator(source=\\'auto\\', target=\\'german\\')\\n result = my_translator.translate(text=text)\\n print(f\"Translation using source = {my_translator.source} and target = {my_translator.target} -> {result}\")\\n\\n # let\\'s say later you want to reuse the class but your target is french now\\n # This is the best practice and how you should use deep-translator.\\n # Please don\\'t over-instantiate translator objects without a good reason, otherwise you will run into performance issues\\n my_translator.target = \\'fr\\' # this will override the target \\'german\\' passed previously\\n result = my_translator.translate(text=text)\\n print(f\"Translation using source = {my_translator.source} and target = {my_translator.target} -> {result}\")\\n\\n # you can also update the source language as well\\n my_translator.source = \\'en\\' # this will override the source \\'auto\\' passed previously\\n result = my_translator.translate(text=text)\\n print(f\"Translation using source = {my_translator.source} and target = {my_translator.target} -> {result}\")\\n\\n\\n- Translate batch of texts\\n\\n.. code-block:: python\\n\\n texts = [\"hallo welt\", \"guten morgen\"]\\n\\n # the translate_sentences function is deprecated, use the translate_batch function instead\\n translated = GoogleTranslator(\\'de\\', \\'en\\').translate_batch(texts)\\n\\n- Translate from a file:\\n\\n.. code-block:: python\\n\\n translated = GoogleTranslator(source=\\'auto\\', target=\\'german\\').translate_file(\\'path\/to\/file\\')\\n\\nMymemory Translator\\n--------------------\\n\\n.. note::\\n\\n As in google translate, you can use the automatic language detection with mymemory by using \"auto\" as an\\n argument for the source language. However, this feature in the mymemory translator is not so powerful as\\n in google translate.\\n\\n- Simple translation\\n\\n.. code-block:: python\\n\\n text = \\'Keep it up. You are awesome\\'\\n\\n translated = MyMemoryTranslator(source=\\'auto\\', target=\\'french\\').translate(text)\\n\\n- Translate batch of texts\\n\\n.. code-block:: python\\n\\n texts = [\"hallo welt\", \"guten morgen\"]\\n\\n # the translate_sentences function is deprecated, use the translate_batch function instead\\n translated = MyMemoryTranslator(\\'de\\', \\'en\\').translate_batch(texts)\\n\\n- Translate from file\\n\\n.. code-block:: python\\n\\n path = \"your_file.txt\"\\n\\n translated = MyMemoryTranslator(source=\\'en\\', target=\\'fr\\').translate_file(path)\\n\\n\\nDeeplTranslator\\n-----------------\\n\\n.. note::\\n\\n In order to use the DeeplTranslator translator, you need to generate an api key. Deepl offers a Pro and a free API.\\n deep-translator supports both Pro and free APIs. Just check the examples below.\\n Visit https:\/\/www.deepl.com\/en\/docs-api\/ for more information on how to generate your Deepl api key\\n\\n- Simple translation\\n\\n.. code-block:: python\\n\\n text = \\'Keep it up. You are awesome\\'\\n\\n translated = DeeplTranslator(api_key=\"your_api_key\", source=\"en\", target=\"en\", use_free_api=True).translate(text)\\n\\n.. note::\\n deep-translator uses free deepl api by default. If you have the pro version then simply set the use_free_api to false.\\n\\n\\n- Translate batch of texts\\n\\n.. code-block:: python\\n\\n texts = [\"hallo welt\", \"guten morgen\"]\\n\\n # the translate_sentences function is deprecated, use the translate_batch function instead\\n translated = DeeplTranslator(\"your_api_key\").translate_batch(texts)\\n\\nQcriTranslator\\n--------------------\\n\\n.. note::\\n\\n In order to use the QcriTranslator translator, you need to generate a free api key. Visit https:\/\/mt.qcri.org\/api\/\\n for more information\\n\\n- Check languages\\n\\n.. code-block:: python\\n\\n # as a property\\n print(\"language pairs: \", QcriTranslator(\"your_api_key\").languages)\\n\\n- Check domains\\n\\n.. code-block:: python\\n\\n # as a property\\n print(\"domains: \", QcriTranslator(\"your_api_key\").domains)\\n\\n- Text translation\\n\\n.. code-block:: python\\n\\n text = \\'Education is great\\'\\n\\n translated = QcriTranslator(\"your_api_key\").translate(source=\\'en\\', target=\\'ar\\', domain=\"news\", text=text)\\n # output -> \u0627\u0644\u062a\u0639\u0644\u064a\u0645 \u0647\u0648 \u0639\u0638\u064a\u0645\\n\\n # see docs for batch translation and more.\\n\\nLinguee Translator\\n-------------------\\n\\n.. code-block:: python\\n\\n word = \\'good\\'\\n\\n- Simple Translation\\n\\n.. code-block:: python\\n\\n translated_word = LingueeTranslator(source=\\'english\\', target=\\'french\\').translate(word)\\n\\n # pass language by their abbreviation\\n translated_word = LingueeTranslator(source=\\'en\\', target=\\'fr\\').translate(word)\\n\\n- Return all synonyms or words that matches\\n\\n.. code-block:: python\\n\\n # set the argument return_all to True if you want to get all synonyms of the word to translate\\n translated_word = LingueeTranslator(source=\\'english\\', target=\\'french\\').translate(word, return_all=True)\\n\\n- Translate a batch of words\\n\\n.. code-block:: python\\n\\n translated_words = LingueeTranslator(source=\\'english\\', target=\\'french\\').translate_words([\"good\", \"awesome\"])\\n\\nPONS Translator\\n----------------\\n\\n.. note::\\n\\n You can pass the languages by the name or by abbreviation just like\\n previous examples using GoogleTranslate\\n\\n.. code-block:: python\\n\\n word = \\'awesome\\'\\n\\n- Simple Translation\\n\\n.. code-block:: python\\n\\n translated_word = PonsTranslator(source=\\'english\\', target=\\'french\\').translate(word)\\n\\n # pass language by their abbreviation\\n translated_word = PonsTranslator(source=\\'en\\', target=\\'fr\\').translate(word)\\n\\n- Return all synonyms or words that matches\\n\\n.. code-block:: python\\n\\n # set the argument return_all to True if you want to get all synonyms of the word to translate\\n translated_word = PonsTranslator(source=\\'english\\', target=\\'french\\').translate(word, return_all=True)\\n\\n- Translate a batch of words\\n\\n.. code-block:: python\\n\\n translated_words = LingueeTranslator(source=\\'english\\', target=\\'french\\').translate_words([\"good\", \"awesome\"])\\n\\nYandex Translator\\n------------------\\n\\n.. note::\\n\\n You need to require an **private api key** if you want to use the yandex translator.\\n visit the official website for more information about how to get one\\n\\n- Language detection\\n\\n.. code-block:: python\\n\\n lang = YandexTranslator(\\'your_api_key\\').detect(\\'Hallo, Welt\\')\\n print(f\"language detected: {lang}\") # output -> language detected: \\'de\\'\\n\\n- Text translation\\n\\n.. code-block:: python\\n\\n # with auto detection | meaning provide only the target language and let yandex detect the source\\n translated = YandexTranslator(\\'your_api_key\\').translate(source=\"auto\", target=\"en\", text=\\'Hallo, Welt\\')\\n print(f\"translated text: {translated}\") # output -> translated text: Hello world\\n\\n # provide source and target language explicitly\\n translated = YandexTranslator(\\'your_api_key\\').translate(source=\"de\", target=\"en\", text=\\'Hallo, Welt\\')\\n print(f\"translated text: {translated}\") # output -> translated text: Hello world\\n\\n- File translation\\n\\n.. code-block:: python\\n\\n translated = YandexTranslator(\\'your_api_key\\').translate_file(source=\"auto\", target=\"en\", path=\"path_to_your_file\")\\n\\n- Batch translation\\n\\n.. code-block:: python\\n\\n translated = YandexTranslator(\\'your_api_key\\').translate_batch(source=\"auto\", target=\"de\", batch=[\"hello world\", \"happy coding\"])\\n\\n\\nMicrosoft Translator\\n---------------------\\n\\n.. note::\\n\\n You need to require an **api key** if you want to use the microsoft translator.\\n visit the official website for more information about how to get one.\\n Microsoft offers a free tier 0 subscription (2 million characters per month).\\n\\n- Required and optional attributes\\n\\n There are two required attributes, namely \"api_key\" (string) and \"target\" (string or list).\\n Attribute \"source\" is optional.\\n Also, Microsoft API accepts a number of other optional attributes, you can find them here: https:\/\/docs.microsoft.com\/azure\/cognitive-services\/translator\/reference\/v3-0-translate\\n You can simply add them after the required attributes, see the example.\\n\\n.. code-block:: python\\n\\n text = \\'happy coding\\'\\n translated = MicrosoftTranslator(api_key=\\'some-key\\', target=\\'de\\').translate(text=text)\\n translated_two_targets = MicrosoftTranslator(api_key=\\'some-key\\', target=[\\'de\\', \\'ru\\']).translate(text=text)\\n translated_with_optional_attr = MicrosoftTranslator(api_key=\\'some-key\\', target=\\'de\\', textType=\\'html\\']).translate(text=text)\\n\\n- You can pass languages by name or by abbreviation:\\n\\n.. code-block:: python\\n\\n translated = MicrosoftTranslator(api_key=\\'some-key\\', target=\\'german\\').translate(text=text)\\n\\n # Alternatively, you can pass languages by their abbreviation:\\n translated = MicrosoftTranslator(api_key=\\'some-key\\', target=\\'de\\').translate(text=text)\\n\\n- Translate batch of texts\\n\\n.. code-block:: python\\n\\n texts = [\"hallo welt\", \"guten morgen\"]\\n translated = MicrosoftTranslator(api_key=\\'some-key\\', target=\\'english\\').translate_batch(texts)\\n\\n- Translate from a file:\\n\\n.. code-block:: python\\n\\n translated = MicrosoftTranslator(api_key=\\'some-key\\', target=\\'german\\').translate_file(\\'path\/to\/file\\')\\n\\n\\nPapago Translator\\n---------------------\\n\\n.. note::\\n\\n You need to require a **client id** and **client secret key** if you want to use the papago translator.\\n visit the official website for more information about how to get one.\\n\\n.. code-block:: python\\n\\n text = \\'happy coding\\'\\n translated = PapagoTranslator(client_id=\\'your_client_id\\', secret_key=\\'your_secret_key\\', source=\\'en\\', target=\\'ko\\').translate(text=text) # output: \ud589\ubcf5\ud55c \ubd80\ud638\ud654\\n\\n\\nLibre Translator\\n---------------------\\n\\n.. note::\\n\\n Libre translate has multiple `mirrors <https:\/\/github.com\/LibreTranslate\/LibreTranslate#mirrors>`_ which can be used for the API endpoint.\\n Some require an API key to be used. By default the base url is set to `libretranslate.de <https:\/\/libretranslate.de\/>`_ .\\n This can be set using the \"base_url\" input parameter.\\n\\n.. code-block:: python\\n\\n text = \\'laufen\\'\\n translated = LibreTranslator(source=\\'auto\\', target=\\'en\\', base_url = \\'https:\/\/libretranslate.com\/\\', api_key = \\'your_api_key\\').translate(text=text) # output: run\\n\\n\\n- You can pass languages by name or by abbreviation:\\n\\n.. code-block:: python\\n\\n translated = LibreTranslator(source=\\'german\\', target=\\'english\\').translate(text=text)\\n\\n # Alternatively, you can pass languages by their abbreviation:\\n translated = LibreTranslator(source=\\'de\\', target=\\'en\\').translate(text=text)\\n\\n\\n- Translate batch of texts\\n\\n.. code-block:: python\\n\\n texts = [\"hallo welt\", \"guten morgen\"]\\n translated = LibreTranslator(source=\\'auto\\', target=\\'en\\').translate_batch(texts)\\n\\n- Translate from a file:\\n\\n.. code-block:: python\\n\\n translated = LibreTranslator(source=\\'auto\\', target=\\'en\\').translate_file(\\'path\/to\/file\\')\\n\\n\\n\\nProxy usage\\n-------------\\n\\ndeep-translator provide out of the box usage of proxies. Just define your proxies config as a dictionary\\nand pass it to the corresponding translator. Below is an example using the GoogleTranslator but this feature\\ncan be used with all supported translators.\\n\\n.. code-block:: python\\n\\n from deep_translator import GoogleTranslator\\n\\n # define your proxy configs:\\n proxies_example = {\\n \"https\": \"your https proxy\", # example: 34.195.196.27:8080\\n \"http\": \"your http proxy if available\"\\n }\\n translated = GoogleTranslator(source=\\'auto\\', target=\\'de\\', proxies=proxies_example).translate(\"this package is awesome\")\\n\\n\\n\\n\\nUsage from Terminal\\n--------------------\\n\\nDeep-translator supports a series of command line arguments for quick and simple access to the translators directly in your console.\\n\\n.. note::\\n\\n The program accepts ``deep-translator`` or ``dt`` as a command, feel free to substitute whichever you prefer.\\n\\nFor a list of available translators:\\n\\n.. code-block:: console\\n\\n $ deep-translator list\\n\\nTo translate a string or line of text:\\n\\n.. code-block:: console\\n\\n $ deep_translator google --source \"english\" --target \"german\" --text \"happy coding\"\\n\\nAlternate short option names, along with using language abbreviations:\\n\\n.. code-block:: console\\n\\n $ deep_translator google -src \"en\" -tgt \"de\" -txt \"happy coding\"\\n\\n\\nFinally, to retrieve a list of available languages for a given translator:\\n\\n.. code-block:: console\\n\\n $ deep-translator languages google\\n\\n======\\nTests\\n======\\n\\nDevelopers can install the development version of deep-translator and execute unit tests to verify functionality. For more information on doing this, see `the contribution guidelines <https:\/\/deep-translator.readthedocs.io\/en\/latest\/contributing.html\/>`_\\n\\n========\\nLinks\\n========\\nCheck this article on medium to know why you should use the deep-translator package and how to translate text using python.\\nhttps:\/\/medium.com\/@nidhalbacc\/how-to-translate-text-with-python-9d203139dcf5\\n\\n======\\nHelp\\n======\\n\\nIf you are facing any problems, please feel free to open an issue.\\nAdditionally, you can make contact with the author for further information\/questions.\\n\\nDo you like deep-translator?\\nYou can always help the development of this project by:\\n\\n- Following on github and\/or twitter\\n- Promote the project (ex: by giving it a star on github)\\n- Watch the github repo for new releases\\n- Tweet about the package\\n- Help others with issues on github\\n- Create issues and pull requests\\n- Sponsor the project\\n\\n===========\\nNext Steps\\n===========\\n\\nTake a look in the examples folder for more :)\\nContributions are always welcome.\\nRead the Contribution guidelines `Here <https:\/\/deep-translator.readthedocs.io\/en\/latest\/contributing.html\/>`_\\n\\n==========\\nCredits\\n==========\\n\\nMany thanks to @KirillSklyarenko for his work on integrating the microsoft translator\\n\\n==========\\nLicense\\n==========\\n\\nMIT license\\n\\nCopyright (c) 2020-present, Nidhal Baccouri\\n\\n===========\\nSwagger UI\\n===========\\n\\ndeep-translator offers an api server for easy integration with other applications. Non python applications\\ncan communicate with the api directly and leverage the features of deep-translator\\n\\nAccess the api here: https:\/\/deep-translator-api.azurewebsites.net\/docs\\n\\n\\n\\n===========================\\nThe Translator++ mobile app\\n===========================\\n\\n.. image:: ..\/assets\/app-icon.png\\n :width: 100\\n :alt: Icon of the app\\n\\nYou can download and try the app on play store https:\/\/play.google.com\/store\/apps\/details?id=org.translator.translator&hl=en_US&gl=US\\n\\nAfter developing the deep-translator, I realized how cool this would be if I can use it as an app on my mobile phone.\\nSure, there is google translate, pons and linguee apps etc.. but isn\\'t it cooler to make an app where all these\\ntranslators are integrated?\\n\\nLong story short, I started working on the app. I decided to use the `kivy framework <https:\/\/kivy.org\/#home\/>`_ since\\nI wanted to code in python and to develop a cross platform app.\\nI open sourced the `Translator++ app <https:\/\/github.com\/nidhaloff\/deep-translator-app\/>`_ on my github too.\\nFeel free to take a look at the code or make a pull request ;)\\n\\n.. note::\\n The Translator++ app is based on the deep-translator package. I just built the app to prove the capabilities\\n of the deep-translator package ;)\\n\\nI published the first release on google play store on 02-08-2020\\n\\nHere are some screenshots:\\n\\n- Phone\\n\\n.. image:: ..\/assets\/translator1.jpg\\n :width: 30%\\n :height: 200\\n :alt: screenshot1\\n.. image:: ..\/assets\/translator2.jpg\\n :width: 30%\\n :height: 200\\n :alt: screenshot2\\n.. image:: ..\/assets\/spinner.jpg\\n :width: 30%\\n :height: 200\\n :alt: spinner\\n\\n- Tablet:\\n\\n.. image:: ..\/assets\/hz_view.png\\n :width: 100%\\n :height: 300\\n :alt: screenshot3\\n\\n===========================\\nWebsite & Desktop app\\n===========================\\n\\nCurrently, there are propositions for a website and\/or dekstop app based on deep-translator.\\nYou can follow the issue here: https:\/\/github.com\/nidhaloff\/deep-translator\/issues\/144\\n',\n'author': 'Nidhal Baccouri',\n'author_email': 'nidhalbacc@gmail.com',\n'maintainer': 'Nidhal Baccouri',\n'maintainer_email': 'nidhalbacc@gmail.com',\n'url': 'https:\/\/github.com\/nidhaloff\/deep_translator',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'entry_points': entry_points,\n'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "deepdiff-5.8.1",
        "file_list": "AUTHORS.md conftest.py anyset.py base.py commands.py deephash.py delta.py diff.py distance.py helper.py lfucache.py model.py operator.py path.py search.py serialization.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe authors.rst basics.rst changelog.rst commandline.rst custom.rst deephash.rst deephash_doc.rst deep_distance.rst delta.rst diff.rst diff_doc.rst dsearch.rst exclude_paths.rst extract.rst faq.rst ignore_order.rst ignore_types_or_values.rst index.rst numbers.rst optimizations.rst other.rst search_doc.rst serialization.rst stats.rst support.rst troubleshoot.rst view.rst benchmark_array_no_numpy__3.8__ignore_order=True__cache_size=0__cache_tu benchmark_array_no_numpy__3.8__ignore_order=True__cache_size=10000__cach benchmark_big_jsons__3.8__ignore_order=True__cache_size=0__cache_tuning_ benchmark_big_jsons__pypy3.6__ignore_order=True__cache_size=0__cache_tun benchmark_deeply_nested_a__3.8__ignore_order=True__cache_size=0__cache_t benchmark_deeply_nested_a__3.8__ignore_order=True__cache_size=5000__cach benchmark_deeply_nested_a__3.8__ignore_order=True__cache_size=500__cache benchmark_numpy_array__3.8__ignore_order=True__cache_size=0__cache_tunin LICENSE MANIFEST.in PKG-INFO pytest.ini README.md requirements-cli.txt requirements-dev.txt requirements.txt run_tests.sh setup.cfg setup.py compare_func_result1.json compare_func_t1.json compare_func_t2.json nested_a_result.json nested_a_t1.json nested_a_t2.json nested_b_result.json nested_b_t1.json nested_b_t2.json t1.json t1_corrupt.json t2.json test_anyset.py test_cache.py test_command.py test_delta.py test_diff_math.py test_diff_numpy.py test_diff_other.py test_diff_text.py test_diff_tree.py test_distance.py test_hash.py test_helper.py test_ignore_order.py test_lfucache.py test_model.py test_operators.py test_path.py test_search.py test_serialization.py __init__.py",
        "setup.py": "import os\nimport sys\nfrom setuptools import setup\n\nif sys.version_info.major == 2: # pragma: no cover\nsys.exit('Python 2 is not supported anymore. The last version of DeepDiff that supported Py2 was 3.3.0')\n\n# if you are not using vagrant, just delete os.link directly,\n# The hard link only saves a little disk space, so you should not care\nif os.environ.get('USER', '') == 'vagrant':\ndel os.link\n\nversion = '5.8.1'\n\n\ndef get_reqs(filename):\nwith open(filename, \"r\") as reqs_file:\nreqs = reqs_file.readlines()\nreturn reqs\n\n\nreqs = get_reqs(\"requirements.txt\")\ncli_reqs = get_reqs(\"requirements-cli.txt\")\n\nwith open('README.md') as file:\nlong_description = file.read()\n\n\nsetup(name='deepdiff',\nversion=version,\ndescription='Deep Difference and Search of any Python object\/data.',\nurl='https:\/\/github.com\/seperman\/deepdiff',\ndownload_url='https:\/\/github.com\/seperman\/deepdiff\/tarball\/master',\nauthor='Seperman',\nauthor_email='sep@zepworks.com',\nlicense='MIT',\npackages=['deepdiff'],\nzip_safe=True,\ntest_suite=\"tests\",\ninclude_package_data=True,\ntests_require=['mock'], # 'numpy==1.11.2' numpy is needed but comes already installed with travis\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\ninstall_requires=reqs,\npython_requires='>=3.6',\nextras_require={\n\"cli\": cli_reqs,\n},\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"Operating System :: OS Independent\",\n\"Topic :: Software Development\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Development Status :: 5 - Production\/Stable\",\n\"License :: OSI Approved :: MIT License\"\n],\nentry_points={\n'console_scripts': [\n'deep=deepdiff.commands:cli',\n],\n},\n)\n"
    },
    {
        "package_name": "deepspeed-0.7.0",
        "file_list": ".ignore-words.txt all_gather.py all_reduce.py all_to_all.py broadcast.py constants.py pt2pt.py run_all.py utils.py __init__.py __init__.py deepspeed deepspeed.pt ds dsr ds_bench ds_elastic ds_report ds_ssh build.txt cpu_adagrad.cpp cpu_adam.cpp fused_adam_frontend.cpp multi_tensor_adam.cu multi_tensor_apply.cuh deepspeed_aio_common.cpp deepspeed_aio_common.h deepspeed_aio_types.cpp deepspeed_aio_types.h deepspeed_aio_utils.cpp deepspeed_aio_utils.h deepspeed_aio_thread.cpp deepspeed_aio_thread.h deepspeed_py_aio.cpp deepspeed_py_aio.h deepspeed_py_aio_handle.cpp deepspeed_py_aio_handle.h deepspeed_py_copy.cpp deepspeed_py_copy.h py_ds_aio.cpp custom_cuda_kernel.cu compat.h context.h cpu_adagrad.h cpu_adam.h cublas_wrappers.h custom_cuda_layers.h dropout.h ds_transformer_cuda.h feed_forward.h gelu.h gemm_test.h general_kernels.h normalize_layer.h quantizer.h simd.h softmax.h StopWatch.h strided_batch_gemm.h Timer.h type_shim.h fused_lamb_cuda.cpp fused_lamb_cuda_kernel.cu pt_binding.cpp quantizer.cu utils.cpp cublas_wrappers.cu dropout_kernels.cu ds_transformer_cuda.cpp gelu_kernels.cu general_kernels.cu apply_rotary_pos_emb.cu dequantize.cu gelu.cu normalize.cu pt_binding.cpp softmax.cu transform.cu context.h cublas_wrappers.h custom_cuda_layers.h normalize_kernels.cu softmax_kernels.cu transform_kernels.cu flatten_unflatten.cpp autotuner.py config.py template_zero0.json template_zero1.json template_zero2.json template_zero3.json constants.py scheduler.py base_tuner.py cost_model.py index_based_tuner.py model_based_tuner.py utils.py __init__.py utils.py __init__.py constants.py deepspeed_checkpoint.py reshape_3d_utils.py reshape_meg_2d.py reshape_utils.py utils.py zero_checkpoint.py __init__.py backend.py comm.py config.py constants.py torch.py utils.py __init__.py basic_layer.py compress.py config.py constants.py helper.py scheduler.py utils.py __init__.py constants.py config.py constants.py elasticity.py elastic_agent.py utils.py __init__.py env_report.py git_version_info.py git_version_info_installed.py engine.py __init__.py constants.py launch.py multinode_runner.py runner.py __init__.py inject.py layers.py load_checkpoint.py module_quantize.py replace_module.py replace_policy.py __init__.py experts.py layer.py mappings.py sharded_moe.py utils.py __init__.py config.py constants.py csv_monitor.py monitor.py tensorboard.py utils.py wandb.py __init__.py config.py constants.py __init__.py cpu_adagrad.py __init__.py cpu_adam.py fused_adam.py multi_tensor_apply.py __init__.py __init__.py cpu_adagrad.cpp cpu_adam.cpp fused_adam_frontend.cpp multi_tensor_adam.cu multi_tensor_apply.cuh deepspeed_aio_common.cpp deepspeed_aio_common.h deepspeed_aio_types.cpp deepspeed_aio_types.h deepspeed_aio_utils.cpp deepspeed_aio_utils.h deepspeed_aio_thread.cpp deepspeed_aio_thread.h deepspeed_py_aio.cpp deepspeed_py_aio.h deepspeed_py_aio_handle.cpp deepspeed_py_aio_handle.h deepspeed_py_copy.cpp deepspeed_py_copy.h py_ds_aio.cpp single_process_config.json custom_cuda_kernel.cu compat.h context.h cpu_adagrad.h cpu_adam.h cublas_wrappers.h custom_cuda_layers.h dropout.h ds_transformer_cuda.h feed_forward.h gelu.h gemm_test.h general_kernels.h normalize_layer.h quantizer.h simd.h softmax.h StopWatch.h strided_batch_gemm.h Timer.h type_shim.h fused_lamb_cuda.cpp fused_lamb_cuda_kernel.cu pt_binding.cpp quantizer.cu utils.cpp cublas_wrappers.cu dropout_kernels.cu ds_transformer_cuda.cpp gelu_kernels.cu general_kernels.cu apply_rotary_pos_emb.cu dequantize.cu gelu.cu normalize.cu pt_binding.cpp softmax.cu transform.cu context.h cublas_wrappers.h custom_cuda_layers.h normalize_kernels.cu softmax_kernels.cu transform_kernels.cu flatten_unflatten.cpp fused_lamb.py __init__.py async_io.py builder.py cpu_adagrad.py cpu_adam.py fused_adam.py fused_lamb.py quantizer.py sparse_attn.py stochastic_transformer.py transformer.py transformer_inference.py utils.py __init__.py quantizer.py __init__.py bert_sparse_self_attention.py matmul.py softmax.py sparse_attention_utils.py sparse_self_attention.py sparsity_config.py matmul.tr softmax_bwd.tr softmax_fwd.tr __init__.py __init__.py moe_inference.py transformer_inference.py __init__.py transformer.py __init__.py __init__.py __init__.py config.py constants.py profiler.py __init__.py __init__.py checkpointing.py config.py __init__.py bf16_optimizer.py checkpoint_engine.py nebula_checkpoint_engine.py torch_checkpoint_engine.py __init__.py coalesced_collectives.py mpi.py nccl.py __init__.py cupy.py __init__.py config.py config_utils.py constants.py dataloader.py curriculum_scheduler.py __init__.py eigenvalue.py engine.py fused_optimizer.py loss_scaler.py adam.py lamb.py zoadam.py __init__.py unfused_optimizer.py __init__.py lr_schedules.py engine.py module.py p2p.py schedule.py topology.py __init__.py progressive_layer_drop.py quantize.py sparse_tensor.py state_dict_factory.py aio_config.py async_swapper.py constants.py optimizer_utils.py partitioned_optimizer_swapper.py partitioned_param_swapper.py pipelined_optimizer_swapper.py utils.py __init__.py utils.py weight_quantizer.py config.py contiguous_memory_allocator.py linear.py offload_config.py parameter_offload.py partitioned_param_coordinator.py partition_parameters.py stage3.py stage_1_and_2.py test.py tiling.py utils.py __init__.py __init__.py comms_logging.py debug.py exceptions.py groups.py init_on_device.py logging.py nvtx.py timer.py zero_to_fp32.py __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in async_io.py builder.py cpu_adagrad.py cpu_adam.py fused_adam.py fused_lamb.py quantizer.py sparse_attn.py stochastic_transformer.py transformer.py transformer_inference.py utils.py __init__.py PKG-INFO README.md requirements-1bit-mpi.txt requirements-autotuning-ml.txt requirements-autotuning.txt requirements-dev.txt requirements-inf.txt requirements-readthedocs.txt requirements-sparse_attn.txt requirements.txt setup.cfg setup.py version.txt",
        "setup.py": "\"\"\"\nCopyright 2020 The Microsoft DeepSpeed Team\n\nDeepSpeed library\n\nTo build wheel on Windows:\n1. Install pytorch, such as pytorch 1.8 + cuda 11.1\n2. Install visual cpp build tool\n3. Launch cmd console with Administrator privilege for creating required symlink folders\n\nCreate a new wheel via the following command:\npython setup.py bdist_wheel\n\nThe wheel will be located at: dist\/*.whl\n\"\"\"\n\nimport os\nimport sys\nimport subprocess\nfrom setuptools import setup, find_packages\nfrom setuptools.command import egg_info\nimport time\n\ntorch_available = True\ntry:\nimport torch\nfrom torch.utils.cpp_extension import BuildExtension\nexcept ImportError:\ntorch_available = False\nprint('[WARNING] Unable to import torch, pre-compiling ops will be disabled. ' \\\n'Please visit https:\/\/pytorch.org\/ to see how to properly install torch on your system.')\n\nfrom op_builder import ALL_OPS, get_default_compute_capabilities, OpBuilder\n\n# fetch rocm state\nis_rocm_pytorch = OpBuilder.is_rocm_pytorch()\nrocm_version = OpBuilder.installed_rocm_version()\n\nRED_START = '\\033[31m'\nRED_END = '\\033[0m'\nERROR = f\"{RED_START} [ERROR] {RED_END}\"\n\n\ndef abort(msg):\nprint(f\"{ERROR} {msg}\")\nassert False, msg\n\n\ndef fetch_requirements(path):\nwith open(path, 'r') as fd:\nreturn [r.strip() for r in fd.readlines()]\n\n\ninstall_requires = fetch_requirements('requirements\/requirements.txt')\nextras_require = {\n'1bit': [], # add cupy based on cuda\/rocm version\n'1bit_mpi': fetch_requirements('requirements\/requirements-1bit-mpi.txt'),\n'readthedocs': fetch_requirements('requirements\/requirements-readthedocs.txt'),\n'dev': fetch_requirements('requirements\/requirements-dev.txt'),\n'autotuning': fetch_requirements('requirements\/requirements-autotuning.txt'),\n'autotuning_ml': fetch_requirements('requirements\/requirements-autotuning-ml.txt'),\n'sparse_attn': fetch_requirements('requirements\/requirements-sparse_attn.txt'),\n'inf': fetch_requirements('requirements\/requirements-inf.txt')\n}\n\n# Add specific cupy version to both onebit extension variants\nif torch_available and torch.cuda.is_available():\ncupy = None\nif is_rocm_pytorch:\nrocm_major, rocm_minor = rocm_version\n# XXX cupy support for rocm 5 is not available yet\nif rocm_major <= 4:\ncupy = f\"cupy-rocm-{rocm_major}-{rocm_minor}\"\nelse:\ncupy = f\"cupy-cuda{torch.version.cuda.replace('.','')[:3]}\"\nif cupy:\nextras_require['1bit'].append(cupy)\nextras_require['1bit_mpi'].append(cupy)\n\n# Make an [all] extra that installs all needed dependencies\nall_extras = set()\nfor extra in extras_require.items():\nfor req in extra[1]:\nall_extras.add(req)\nextras_require['all'] = list(all_extras)\n\ncmdclass = {}\n\n# For any pre-installed ops force disable ninja\nif torch_available:\ncmdclass['build_ext'] = BuildExtension.with_options(use_ninja=False)\n\nif torch_available:\nTORCH_MAJOR = torch.__version__.split('.')[0]\nTORCH_MINOR = torch.__version__.split('.')[1]\nelse:\nTORCH_MAJOR = \"0\"\nTORCH_MINOR = \"0\"\n\nif torch_available and not torch.cuda.is_available():\n# Fix to allow docker builds, similar to https:\/\/github.com\/NVIDIA\/apex\/issues\/486\nprint(\n\"[WARNING] Torch did not find cuda available, if cross-compiling or running with cpu only \"\n\"you can ignore this message. Adding compute capability for Pascal, Volta, and Turing \"\n\"(compute capabilities 6.0, 6.1, 6.2)\")\nif os.environ.get(\"TORCH_CUDA_ARCH_LIST\", None) is None:\nos.environ[\"TORCH_CUDA_ARCH_LIST\"] = get_default_compute_capabilities()\n\next_modules = []\n\n# Default to pre-install kernels to false so we rely on JIT on Linux, opposite on Windows.\nBUILD_OP_PLATFORM = 1 if sys.platform == \"win32\" else 0\nBUILD_OP_DEFAULT = int(os.environ.get('DS_BUILD_OPS', BUILD_OP_PLATFORM))\nprint(f\"DS_BUILD_OPS={BUILD_OP_DEFAULT}\")\n\nif BUILD_OP_DEFAULT:\nassert torch_available, \"Unable to pre-compile ops without torch installed. Please install torch before attempting to pre-compile ops.\"\n\n\ndef command_exists(cmd):\nif sys.platform == \"win32\":\nresult = subprocess.Popen(f'{cmd}', stdout=subprocess.PIPE, shell=True)\nreturn result.wait() == 1\nelse:\nresult = subprocess.Popen(f'type {cmd}', stdout=subprocess.PIPE, shell=True)\nreturn result.wait() == 0\n\n\ndef op_envvar(op_name):\nassert hasattr(ALL_OPS[op_name], 'BUILD_VAR'), \\\nf\"{op_name} is missing BUILD_VAR field\"\nreturn ALL_OPS[op_name].BUILD_VAR\n\n\ndef op_enabled(op_name):\nenv_var = op_envvar(op_name)\nreturn int(os.environ.get(env_var, BUILD_OP_DEFAULT))\n\n\ncompatible_ops = dict.fromkeys(ALL_OPS.keys(), False)\ninstall_ops = dict.fromkeys(ALL_OPS.keys(), False)\nfor op_name, builder in ALL_OPS.items():\nop_compatible = builder.is_compatible()\ncompatible_ops[op_name] = op_compatible\n\n# If op is requested but not available, throw an error\nif op_enabled(op_name) and not op_compatible:\nenv_var = op_envvar(op_name)\nif env_var not in os.environ:\nbuilder.warning(f\"One can disable {op_name} with {env_var}=0\")\nabort(f\"Unable to pre-compile {op_name}\")\n\n# If op is compatible update install reqs so it can potentially build\/run later\nif op_compatible:\nreqs = builder.python_requirements()\ninstall_requires += builder.python_requirements()\n\n# if op is compatible but install is not enabled (JIT mode)\nif is_rocm_pytorch and op_compatible and not op_enabled(op_name):\nbuilder.hipify_extension()\n\n# If op install enabled, add builder to extensions\nif op_enabled(op_name) and op_compatible:\nassert torch_available, f\"Unable to pre-compile {op_name}, please first install torch\"\ninstall_ops[op_name] = op_enabled(op_name)\next_modules.append(builder.builder())\n\nprint(f'Install Ops={install_ops}')\n\n# Write out version\/git info\ngit_hash_cmd = \"git rev-parse --short HEAD\"\ngit_branch_cmd = \"git rev-parse --abbrev-ref HEAD\"\nif command_exists('git') and 'DS_BUILD_STRING' not in os.environ:\ntry:\nresult = subprocess.check_output(git_hash_cmd, shell=True)\ngit_hash = result.decode('utf-8').strip()\nresult = subprocess.check_output(git_branch_cmd, shell=True)\ngit_branch = result.decode('utf-8').strip()\nexcept subprocess.CalledProcessError:\ngit_hash = \"unknown\"\ngit_branch = \"unknown\"\nelse:\ngit_hash = \"unknown\"\ngit_branch = \"unknown\"\n\n\ndef create_dir_symlink(src, dest):\nif not os.path.islink(dest):\nif os.path.exists(dest):\nos.remove(dest)\nassert not os.path.exists(dest)\nos.symlink(src, dest)\n\n\nif sys.platform == \"win32\":\n# This creates a symbolic links on Windows.\n# It needs Administrator privilege to create symlinks on Windows.\ncreate_dir_symlink('..\\\\..\\\\csrc', '.\\\\deepspeed\\\\ops\\\\csrc')\ncreate_dir_symlink('..\\\\..\\\\op_builder', '.\\\\deepspeed\\\\ops\\\\op_builder')\negg_info.manifest_maker.template = 'MANIFEST_win.in'\n\n# Parse the DeepSpeed version string from version.txt\nversion_str = open('version.txt', 'r').read().strip()\n\n# Build specifiers like .devX can be added at install time. Otherwise, add the git hash.\n# example: DS_BUILD_STR=\".dev20201022\" python setup.py sdist bdist_wheel\n\n# Building wheel for distribution, update version file\nif 'DS_BUILD_STRING' in os.environ:\n# Build string env specified, probably building for distribution\nwith open('build.txt', 'w') as fd:\nfd.write(os.environ.get('DS_BUILD_STRING'))\nversion_str += os.environ.get('DS_BUILD_STRING')\nelif os.path.isfile('build.txt'):\n# build.txt exists, probably installing from distribution\nwith open('build.txt', 'r') as fd:\nversion_str += fd.read().strip()\nelse:\n# None of the above, probably installing from source\nversion_str += f'+{git_hash}'\n\ntorch_version = \".\".join([TORCH_MAJOR, TORCH_MINOR])\nbf16_support = False\n# Set cuda_version to 0.0 if cpu-only\ncuda_version = \"0.0\"\nnccl_version = \"0.0\"\n# Set hip_version to 0.0 if cpu-only\nhip_version = \"0.0\"\nif torch_available and torch.version.cuda is not None:\ncuda_version = \".\".join(torch.version.cuda.split('.')[:2])\nif isinstance(torch.cuda.nccl.version(), int):\n# This will break if minor version > 9\nnccl_version = \".\".join(str(torch.cuda.nccl.version())[:2])\nelse:\nnccl_version = \".\".join(map(str, torch.cuda.nccl.version()[:2]))\nif hasattr(torch.cuda, 'is_bf16_supported') and torch.cuda.is_available():\nbf16_support = torch.cuda.is_bf16_supported()\nif torch_available and hasattr(torch.version, 'hip') and torch.version.hip is not None:\nhip_version = \".\".join(torch.version.hip.split('.')[:2])\ntorch_info = {\n\"version\": torch_version,\n\"bf16_support\": bf16_support,\n\"cuda_version\": cuda_version,\n\"nccl_version\": nccl_version,\n\"hip_version\": hip_version\n}\n\nprint(f\"version={version_str}, git_hash={git_hash}, git_branch={git_branch}\")\nwith open('deepspeed\/git_version_info_installed.py', 'w') as fd:\nfd.write(f\"version='{version_str}'\\n\")\nfd.write(f\"git_hash='{git_hash}'\\n\")\nfd.write(f\"git_branch='{git_branch}'\\n\")\nfd.write(f\"installed_ops={install_ops}\\n\")\nfd.write(f\"compatible_ops={compatible_ops}\\n\")\nfd.write(f\"torch_info={torch_info}\\n\")\n\nprint(f'install_requires={install_requires}')\nprint(f'compatible_ops={compatible_ops}')\nprint(f'ext_modules={ext_modules}')\n\n# Parse README.md to make long_description for PyPI page.\nthisdir = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(thisdir, 'README.md'), encoding='utf-8') as fin:\nreadme_text = fin.read()\n\nstart_time = time.time()\n\nsetup(name='deepspeed',\nversion=version_str,\ndescription='DeepSpeed library',\nlong_description=readme_text,\nlong_description_content_type='text\/markdown',\nauthor='DeepSpeed Team',\nauthor_email='deepspeed@microsoft.com',\nurl='http:\/\/deepspeed.ai',\nproject_urls={\n'Documentation': 'https:\/\/deepspeed.readthedocs.io',\n'Source': 'https:\/\/github.com\/microsoft\/DeepSpeed',\n},\ninstall_requires=install_requires,\nextras_require=extras_require,\npackages=find_packages(exclude=[\n\"azure\",\n\"csrc\",\n\"docker\",\n\"docs\",\n\"examples\",\n\"op_builder\",\n\"release\",\n\"requirements\",\n\"scripts\",\n\"tests\"\n]),\ninclude_package_data=True,\nscripts=[\n'bin\/deepspeed',\n'bin\/deepspeed.pt',\n'bin\/ds',\n'bin\/ds_ssh',\n'bin\/ds_report',\n'bin\/ds_bench',\n'bin\/dsr',\n'bin\/ds_elastic'\n],\nclassifiers=[\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9'\n],\nlicense='MIT',\next_modules=ext_modules,\ncmdclass=cmdclass)\n\nend_time = time.time()\nprint(f'deepspeed build time = {end_time - start_time} secs')\n"
    },
    {
        "package_name": "delayed_assert-0.3.6",
        "file_list": "delayed_assert.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import os\nimport io\nfrom setuptools import setup\n\n\nsetup(\nname='delayed_assert',\nversion='0.3.6',\ndescription='Delayed\/soft assertions for python',\nlong_description=io.open(os.path.join(os.path.dirname('__file__'), 'README.md'), encoding='utf-8').read(),\nlong_description_content_type='text\/markdown',\nauthor='pr4bh4sh',\nurl='https:\/\/github.com\/pr4bh4sh\/python-delayed-assert',\npackages=['delayed_assert'],\n)\n"
    },
    {
        "package_name": "Delorean-1.0.0",
        "file_list": "CHANGES.rst dates.py exceptions.py interface.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt dev-requirements.txt contribution.rst index.rst install.rst interface.rst license.rst quickstart.rst LICENSE.txt MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py delorean_tests.py version.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\nfrom version import __version__\n\ndependencies = [\n'babel>=2.1.1',\n'humanize>=0.5.1',\n'python-dateutil>=2.4.2',\n'pytz>=2015.7',\n'tzlocal>=1.2']\n\nsetup(\nname='Delorean',\nversion='.'.join(str(x) for x in __version__),\ndescription='library for manipulating datetimes with ease and clarity',\nurl='https:\/\/github.com\/myusuf3\/delorean',\nauthor='Mahdi Yusuf',\nauthor_email=\"yusuf.mahdi@gmail.com\",\npackages=[\n'delorean',\n],\nlicense='MIT license',\ninstall_requires=dependencies,\ntest_suite = 'tests.test_data',\nlong_description=open('README.rst').read(),\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'Natural Language :: English',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.1',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n],\n)\n"
    },
    {
        "package_name": "DendroPy-4.5.2",
        "file_list": "dendropy-format sumlabels.py sumtrees.py CHANGES.rst LICENSE.rst MANIFEST.in PKG-INFO README.rst setup.cfg setup.py combinatorics.py mathfn.py phylogeneticdistance.py popgenstat.py probability.py profiledistance.py statistics.py treecompare.py treemeasure.py treescore.py treesum.py __init__.py fastareader.py fastawriter.py ioservice.py multiphylipreader.py newick.py newickreader.py newickwriter.py newickyielder.py nexmlreader.py nexmlwriter.py nexmlyielder.py nexusprocessing.py nexusreader.py nexuswriter.py nexusyielder.py phylipreader.py phylipwriter.py tokenizer.py xmlprocessing.py __init__.py basemodel.py charmatrixmodel.py charstatemodel.py datasetmodel.py taxonmodel.py treecollectionmodel.py treemodel.py __init__.py ape.py biopython.py entrez.py ete.py gbif.py genbank.py itol.py muscle.py paup.py raxml.py rspr.py rstats.py seqgen.py __init__.py coalescent.py continuous.py ncbi.py popgensim.py popgenstat.py reconcile.py seqmodel.py seqsim.py treecalc.py treemanip.py treesim.py treesplit.py treesum.py __init__.py mathfn.py probability.py statistics.py __init__.py birthdeath.py coalescent.py continuous.py discrete.py multispeciescoalescent.py parsimony.py protractedspeciation.py reconcile.py treeshape.py __init__.py charsim.py popgensim.py treesim.py __init__.py bibtex.py bitprocessing.py cli.py constants.py container.py debug.py deprecate.py error.py filesys.py __init__.py messaging.py metavar.py processio.py terminal.py textprocessing.py timeprocessing.py urlio.py vcsinfo.py __init__.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe actinopterygii.chars.nexus angiosperms.chars.nexus angiosperms.chars.txt apternodus.chars.hacked-for-tests.txt apternodus.chars.interleaved.nexus apternodus.chars.nexml apternodus.chars.nexus avian-ovomucoids.chars.nexus avian-ovomucoids.chars.txt bad_names.fasta caenophidia_mos.chars.fasta caenophidia_mos.chars.nexus caenophidia_mos.chars.txt cetaceans.nex codons.nexml COII_Apes.nex community.data.tsv crotaphytus_bicinctores.cytb.aligned.nexml crotaphytus_bicinctores.nd2.aligned.nexml GEBA.chars.nexus interleaved-charsets-all.nex interleaved-charsets-c1.nex interleaved-charsets-c2.nex interleaved-charsets-c3.nex orti.nex primates.chars.csv primates.chars.fasta primates.chars.interleaved.nexus primates.chars.nexus primates.chars.simple.interleaved.nexus primates.chars.simple.nexus primates.chars.subsets-1stpos.nexus primates.chars.subsets-2ndpos.nexus primates.chars.subsets-3rdpos.nexus primates.chars.subsets-all.nexus primates.chars.subsets-coding.nexus primates.chars.subsets-noncoding.nexus pythonidae.chars.beast.calibrated.xml pythonidae.chars.beast.uncalibrated.xml pythonidae.chars.fasta pythonidae.chars.interleaved.nexus pythonidae.chars.nexus pythonidae.chars.phylip pythonidae.chars.txt pythonidae_continuous.chars.nexml pythonidae_continuous.chars.nexus pythonidae_continuous.chars.txt sfs_test_single_pop_100x500_01.data.dna.fasta sfs_test_single_pop_100x500_01.data.std.fasta sfs_test_single_pop_100x500_01.sfs.folded.txt sfs_test_single_pop_100x500_01.sfs.unfolded.txt sfs_test_single_pop_100x500_02.data.dna.fasta sfs_test_single_pop_100x500_02.data.std.fasta sfs_test_single_pop_100x500_02.sfs.folded.txt sfs_test_single_pop_100x500_02.sfs.unfolded.txt sfs_test_single_pop_100x500_03.data.dna.fasta sfs_test_single_pop_100x500_03.data.std.fasta sfs_test_single_pop_100x500_03.sfs.folded.txt sfs_test_single_pop_100x500_03.sfs.unfolded.txt sfs_test_single_pop_100x500_04.data.dna.fasta sfs_test_single_pop_100x500_04.data.std.fasta sfs_test_single_pop_100x500_04.sfs.folded.txt sfs_test_single_pop_100x500_04.sfs.unfolded.txt sfs_test_single_pop_100x500_05.data.dna.fasta sfs_test_single_pop_100x500_05.data.std.fasta sfs_test_single_pop_100x500_05.sfs.folded.txt sfs_test_single_pop_100x500_05.sfs.unfolded.txt sfs_test_single_pop_100x500_06.data.dna.fasta sfs_test_single_pop_100x500_06.data.std.fasta sfs_test_single_pop_100x500_06.sfs.folded.txt sfs_test_single_pop_100x500_06.sfs.unfolded.txt sfs_test_single_pop_100x500_07.data.dna.fasta sfs_test_single_pop_100x500_07.data.std.fasta sfs_test_single_pop_100x500_07.sfs.folded.txt sfs_test_single_pop_100x500_07.sfs.unfolded.txt sfs_test_single_pop_100x500_08.data.dna.fasta sfs_test_single_pop_100x500_08.data.std.fasta sfs_test_single_pop_100x500_08.sfs.folded.txt sfs_test_single_pop_100x500_08.sfs.unfolded.txt sfs_test_single_pop_100x500_09.data.dna.fasta sfs_test_single_pop_100x500_09.data.std.fasta sfs_test_single_pop_100x500_09.sfs.folded.txt sfs_test_single_pop_100x500_09.sfs.unfolded.txt sfs_test_single_pop_100x500_10.data.dna.fasta sfs_test_single_pop_100x500_10.data.std.fasta sfs_test_single_pop_100x500_10.sfs.folded.txt sfs_test_single_pop_100x500_10.sfs.unfolded.txt sfs_test_single_pop_10x10.data.dna.fasta sfs_test_single_pop_10x10.data.std.fasta sfs_test_single_pop_10x10.sfs.folded.txt sfs_test_single_pop_10x10.sfs.unfolded.txt standard-test-chars-continuous.as_cells.nexml standard-test-chars-continuous.as_seqs.nexml standard-test-chars-continuous.interleaved.phylip standard-test-chars-continuous.mesquite.interleaved.nexus standard-test-chars-continuous.mesquite.nexus standard-test-chars-continuous.relaxed.phylip standard-test-chars-dna.as_cells.nexml standard-test-chars-dna.as_seqs.nexml standard-test-chars-dna.basic.nexus standard-test-chars-dna.fasta standard-test-chars-dna.interleaved.nexus standard-test-chars-dna.matchchar.nexus standard-test-chars-dna.multi.nexus standard-test-chars-dna.relaxed.phylip standard-test-chars-dna.simple.nexus standard-test-chars-generic.as_cells.nexml standard-test-chars-generic.as_seqs.nexml standard-test-chars-generic.basic.nexus standard-test-chars-generic.dotted.nexus standard-test-chars-generic.interleaved.nexus standard-test-chars-generic.relaxed.phylip standard-test-chars-generic.simple.nexus standard-test-chars-multiple-char-blocks.1.basic.nexus standard-test-chars-multiple.as_cells.nexml standard-test-chars-multiple.as_seqs.nexml standard-test-chars-protein.as_cells.nexml standard-test-chars-protein.as_seqs.nexml standard-test-chars-protein.basic.nexus standard-test-chars-protein.fasta standard-test-chars-protein.interleaved.nexus standard-test-chars-protein.matchchar.nexus standard-test-chars-protein.multi.nexus standard-test-chars-protein.relaxed.phylip standard-test-chars-protein.simple.nexus standard-test-chars-rna.as_cells.nexml standard-test-chars-rna.as_seqs.nexml standard-test-chars-rna.basic.nexus standard-test-chars-rna.fasta standard-test-chars-rna.interleaved.nexus standard-test-chars-rna.matchchar.nexus standard-test-chars-rna.multi.nexus standard-test-chars-rna.relaxed.phylip standard-test-chars-rna.simple.nexus GEBA.mixed.nexus geospiza.nex multitaxa_mesquite.nex reference_single_taxonset_dataset.nex standard-test-mixed.1.basic.nexus birth-death-test-data1.json community.data.tsv community.data.weighted.unnormalized.ses.mntd.csv community.data.weighted.unnormalized.ses.mpd.csv hiv1.distances.csv hiv1.node-to-node-dists.csv hiv1.unweighted.node-to-node-dists.csv laurasiatherian.distances.ml.csv multispecies_coalescent_test_data.json protracted_speciation_process.json pythonidae.mle.node-to-node-dists.csv pythonidae.mle.unweighted.node-to-node-dists.csv pythonidae.mle.unweighted.pdm.csv pythonidae.mle.weighted.pdm.csv saitou_and_nei_1987_table1.csv wpnjex.csv wpupgmaex.csv cetaceans.mb.no-clock.mcmc.trees.is-rooted-False.use-tree-weights-F cetaceans.mb.no-clock.mcmc.trees.is-rooted-False.use-tree-weights-N cetaceans.mb.no-clock.mcmc.trees.is-rooted-False.use-tree-weights-T cetaceans.mb.no-clock.mcmc.trees.is-rooted-None.use-tree-weights-Fa cetaceans.mb.no-clock.mcmc.trees.is-rooted-None.use-tree-weights-No cetaceans.mb.no-clock.mcmc.trees.is-rooted-None.use-tree-weights-Tr cetaceans.mb.no-clock.mcmc.trees.is-rooted-True.use-tree-weights-Fa cetaceans.mb.no-clock.mcmc.trees.is-rooted-True.use-tree-weights-No cetaceans.mb.no-clock.mcmc.trees.is-rooted-True.use-tree-weights-Tr cetaceans.mb.no-clock.mcmc.weighted-01.trees.is-rooted-False.use-tr cetaceans.mb.no-clock.mcmc.weighted-01.trees.is-rooted-None.use-tre cetaceans.mb.no-clock.mcmc.weighted-01.trees.is-rooted-True.use-tre cetaceans.mb.no-clock.mcmc.weighted-02.trees.is-rooted-False.use-tr cetaceans.mb.no-clock.mcmc.weighted-02.trees.is-rooted-None.use-tre cetaceans.mb.no-clock.mcmc.weighted-02.trees.is-rooted-True.use-tre cetaceans.mb.no-clock.mcmc.weighted-03.trees.is-rooted-False.use-tr cetaceans.mb.no-clock.mcmc.weighted-03.trees.is-rooted-None.use-tre cetaceans.mb.no-clock.mcmc.weighted-03.trees.is-rooted-True.use-tre cetaceans.mb.strict-clock.mcmc.trees.is-rooted-False.use-tree-weigh cetaceans.mb.strict-clock.mcmc.trees.is-rooted-None.use-tree-weight cetaceans.mb.strict-clock.mcmc.trees.is-rooted-True.use-tree-weight cetaceans.mb.strict-clock.mcmc.weighted-01.trees.is-rooted-False.us cetaceans.mb.strict-clock.mcmc.weighted-01.trees.is-rooted-None.use cetaceans.mb.strict-clock.mcmc.weighted-01.trees.is-rooted-True.use cetaceans.mb.strict-clock.mcmc.weighted-02.trees.is-rooted-False.us cetaceans.mb.strict-clock.mcmc.weighted-02.trees.is-rooted-None.use cetaceans.mb.strict-clock.mcmc.weighted-02.trees.is-rooted-True.use cetaceans.mb.strict-clock.mcmc.weighted-03.trees.is-rooted-False.us cetaceans.mb.strict-clock.mcmc.weighted-03.trees.is-rooted-None.use cetaceans.mb.strict-clock.mcmc.weighted-03.trees.is-rooted-True.use cetaceans.raxml.bootstraps.trees.is-rooted-False.use-tree-weights-F cetaceans.raxml.bootstraps.trees.is-rooted-False.use-tree-weights-N cetaceans.raxml.bootstraps.trees.is-rooted-False.use-tree-weights-T cetaceans.raxml.bootstraps.trees.is-rooted-None.use-tree-weights-Fa cetaceans.raxml.bootstraps.trees.is-rooted-None.use-tree-weights-No cetaceans.raxml.bootstraps.trees.is-rooted-None.use-tree-weights-Tr cetaceans.raxml.bootstraps.trees.is-rooted-True.use-tree-weights-Fa cetaceans.raxml.bootstraps.trees.is-rooted-True.use-tree-weights-No cetaceans.raxml.bootstraps.trees.is-rooted-True.use-tree-weights-Tr cetaceans.raxml.bootstraps.weighted-01.trees.is-rooted-False.use-tr cetaceans.raxml.bootstraps.weighted-01.trees.is-rooted-None.use-tre cetaceans.raxml.bootstraps.weighted-01.trees.is-rooted-True.use-tre cetaceans.raxml.bootstraps.weighted-02.trees.is-rooted-False.use-tr cetaceans.raxml.bootstraps.weighted-02.trees.is-rooted-None.use-tre cetaceans.raxml.bootstraps.weighted-02.trees.is-rooted-True.use-tre cetaceans.raxml.bootstraps.weighted-03.trees.is-rooted-False.use-tr cetaceans.raxml.bootstraps.weighted-03.trees.is-rooted-None.use-tre cetaceans.raxml.bootstraps.weighted-03.trees.is-rooted-True.use-tre issue_mth_2009-02-03.rooted.nexus.is-rooted-False.use-tree-weights- issue_mth_2009-02-03.rooted.nexus.is-rooted-None.use-tree-weights-F issue_mth_2009-02-03.rooted.nexus.is-rooted-None.use-tree-weights-N issue_mth_2009-02-03.rooted.nexus.is-rooted-None.use-tree-weights-T issue_mth_2009-02-03.rooted.nexus.is-rooted-True.use-tree-weights-F issue_mth_2009-02-03.rooted.nexus.is-rooted-True.use-tree-weights-N issue_mth_2009-02-03.rooted.nexus.is-rooted-True.use-tree-weights-T issue_mth_2009-02-03.unrooted.nexus.is-rooted-False.use-tree-weight issue_mth_2009-02-03.unrooted.nexus.is-rooted-None.use-tree-weights issue_mth_2009-02-03.unrooted.nexus.is-rooted-True.use-tree-weights APG_Angiosperms.newick APG_Angiosperms.nexus apternodus.tre Bininda-emonds_2007_mammals.newick Bininda-emonds_2007_mammals.nexus bipartition_encoding_fixture.json bird_orders.newick bird_orders.nex cetaceans.mb.no-clock.mcmc.trees cetaceans.mb.no-clock.mcmc.weighted-01.trees cetaceans.mb.no-clock.mcmc.weighted-02.trees cetaceans.mb.no-clock.mcmc.weighted-03.trees cetaceans.mb.strict-clock.mcmc.trees cetaceans.mb.strict-clock.mcmc.weighted-01.trees cetaceans.mb.strict-clock.mcmc.weighted-02.trees cetaceans.mb.strict-clock.mcmc.weighted-03.trees cetaceans.raxml.bootstraps.trees cetaceans.raxml.bootstraps.weighted-01.trees cetaceans.raxml.bootstraps.weighted-02.trees cetaceans.raxml.bootstraps.weighted-03.trees cetaceans.taxa.nex community.tree.newick curated-with-translate-block-and-internal-taxa.nex curated-with-translate-block-and-no-taxa-block-and-untranslated-inte curated-with-translate-block-and-no-taxa-block.nex curated-with-translate-block-and-untranslated-internal-taxa.nex deepcoal1.nex dendropy-test-trees-multifurcating-rooted-annotated.json dendropy-test-trees-multifurcating-rooted-annotated.newick dendropy-test-trees-multifurcating-rooted-annotated.nexml dendropy-test-trees-multifurcating-rooted-annotated.nexus dendropy-test-trees-multifurcating-rooted-annotated.nexus-metadata-c dendropy-test-trees-multifurcating-rooted.json dendropy-test-trees-multifurcating-rooted.newick dendropy-test-trees-multifurcating-rooted.nexml dendropy-test-trees-multifurcating-rooted.nexus dendropy-test-trees-multifurcating-unrooted.json dendropy-test-trees-multifurcating-unrooted.newick dendropy-test-trees-multifurcating-unrooted.nexml dendropy-test-trees-multifurcating-unrooted.nexus dendropy-test-trees-n10-rooted-treeshapes.json dendropy-test-trees-n10-rooted-treeshapes.newick dendropy-test-trees-n10-rooted-treeshapes.nexml dendropy-test-trees-n10-rooted-treeshapes.nexus dendropy-test-trees-n12-x2.json dendropy-test-trees-n12-x2.newick dendropy-test-trees-n12-x2.nexml dendropy-test-trees-n12-x2.nexus dendropy-test-trees-n14-unrooted-treeshapes.json dendropy-test-trees-n14-unrooted-treeshapes.newick dendropy-test-trees-n14-unrooted-treeshapes.nexml dendropy-test-trees-n14-unrooted-treeshapes.nexus dendropy-test-trees-n33-unrooted-annotated-x10a.json dendropy-test-trees-n33-unrooted-annotated-x10a.newick dendropy-test-trees-n33-unrooted-annotated-x10a.nexml dendropy-test-trees-n33-unrooted-annotated-x10a.nexus dendropy-test-trees-n33-unrooted-annotated-x10a.nexus-metadata-comme dendropy-test-trees-n33-unrooted-x100a.json dendropy-test-trees-n33-unrooted-x100a.newick dendropy-test-trees-n33-unrooted-x100a.nexml dendropy-test-trees-n33-unrooted-x100a.nexus dendropy-test-trees-n33-unrooted-x10a.json dendropy-test-trees-n33-unrooted-x10a.newick dendropy-test-trees-n33-unrooted-x10a.nexml dendropy-test-trees-n33-unrooted-x10a.nexus dendropy-test-trees-n33-unrooted-x10b.json dendropy-test-trees-n33-unrooted-x10b.newick dendropy-test-trees-n33-unrooted-x10b.nexml dendropy-test-trees-n33-unrooted-x10b.nexus feb032009.splits.csv feb032009.trees.newick feb032009.trees.nexus GEBA.tree.newick GEBA.tree.nexus hiv1.newick hiv1.nexus incomplete_leaves_rooted.dendropy-pruned.nex incomplete_leaves_rooted.paup-pruned.nex incomplete_leaves_rooted.pre-pruned.nex incomplete_leaves_rooted.pruned_taxa.txt incomplete_leaves_rooted.retained_taxa.txt incomplete_leaves_unrooted.dendropy-pruned.nex incomplete_leaves_unrooted.paup-pruned.nex incomplete_leaves_unrooted.pre-pruned.nex incomplete_leaves_unrooted.pruned_taxa.txt incomplete_leaves_unrooted.retained_taxa.txt issue_mth_2009-02-03.rooted.nexus issue_mth_2009-02-03.unrooted.nexus Jetz_et_al_2012_Aves.sample.tree.newick Jetz_et_al_2012_Aves.sample.tree.nexus maj-rule-bug1.trees.nexus maj-rule-bug2.trees.nexus multitreeblocks.nex multitreeblocks2.nex primates.beast.mcct.meanh.tre primates.beast.mcct.medianh.tre primates.beast.mcct.noedgelens.tree primates.beast.mcmc.trees primates.trees.nexus prune_rooted.dendropy-pruned.nex prune_rooted.paup-pruned.nex prune_rooted.pre-pruned.nex prune_rooted.pruned_taxa.txt prune_rooted.retained_taxa.txt prune_unrooted.dendropy-pruned.nex prune_unrooted.paup-pruned.nex prune_unrooted.pre-pruned.nex prune_unrooted.pruned_taxa.txt prune_unrooted.retained_taxa.txt pythonidae.annotated.bad.nexml pythonidae.annotated.nexml pythonidae.beast.mcmc.trees pythonidae.beast.summary.tre pythonidae.lower.mle.nex pythonidae.mb.con pythonidae.mb.run1.t pythonidae.mb.run2.t pythonidae.mb.run3.t pythonidae.mb.run4.t pythonidae.mlboots.newick.tre pythonidae.mlboots.nexus.tre pythonidae.mle.newick pythonidae.mle.nex pythonidae.mle.numbered-nodes.newick pythonidae.random.bd0301.midpoint-rooted.tre pythonidae.random.bd0301.randomly-rooted.tre pythonidae.random.bd0301.tre pythonidae.reference-trees.newick pythonidae.reference-trees.nexus pythonidae.reference-trees.no-taxa-block.nexus pythonidae.reference-trees.no-taxa-no-translate-block.nexus pythonidae.reference-trees.taxon-numbers-only.newick pythonidae.upper.mle.nex rana.trees.nexus Smith_2001_angiosperms.newick Smith_2001_angiosperms.nexus treebase_s373.xml",
        "setup.py": "#! \/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n##############################################################################\n## DendroPy Phylogenetic Computing Library.\n##\n## Copyright 2010-2015 Jeet Sukumaran and Mark T. Holder.\n## All rights reserved.\n##\n## See \"LICENSE.rst\" for terms and conditions of usage.\n##\n## If you use this work or any portion thereof in published work,\n## please cite it as:\n##\n## Sukumaran, J. and M. T. Holder. 2010. DendroPy: a Python library\n## for phylogenetic computing. Bioinformatics 26: 1569-1571.\n##\n##############################################################################\n\n\"\"\"\nPackage setup and installation.\n\"\"\"\n\nimport sys\nimport re\nimport os\nimport io\n\n###############################################################################\n### \"highly-discouraged\" workaround to deal with Python 2.8+ and 3.4+ verifying\n### certificates by default; this breaks PyPI uploads ...\nimport ssl\nif hasattr(ssl, '_create_unverified_context'):\nssl._create_default_https_context = ssl._create_unverified_context\n\n###############################################################################\n## Utility\n\ndef _read(names, **kwargs):\npath = os.path.join(os.path.dirname(__file__), *names)\nif sys.version_info.major < 3:\nreturn open(path, \"rU\").read()\nelse:\nwith open(path, encoding=kwargs.get('encoding', 'utf8')) as src:\ns = src.read()\nreturn s\n\ndef _compose_list(values, prefix=None):\nif prefix is None:\nprefix = \"\"\ns = []\nmax_len = max(len(i) for i in values)\ntemplate = \"{}{{value:<{}}}\".format(prefix,max_len)\nfor v in values:\ns.append(template.format(value=v))\nreturn \"\\n\".join(s)\n\n###############################################################################\n# Identification\n\n__version__ = re.match(r\".*^__version__\\s*=\\s*['\\\"](.*?)['\\\"]\\s*$.*\", _read([\"src\", \"dendropy\", \"__init__.py\"]), re.S | re.M).group(1)\nsys.stderr.write(\"-setup.py: DendroPy version {}\\n\".format(__version__))\n\n###############################################################################\n# setuptools\/distutils\/etc. import and configuration\n\ntry:\nimport setuptools\ntry:\nsetuptools_path = \" ('\" + os.path.abspath(setuptools.__file__) + \"')\"\nexcept OSError:\nsetuptools_path = \"\"\nsys.stderr.write(\"-setup.py: using setuptools{}\\n\".format(setuptools_path))\nfrom setuptools import setup, find_packages\nexcept ImportError as e:\nsys.stderr.write(\"-setup.py: using distutils\\n\")\nfrom distutils.core import setup\nsys.stderr.write(\"-setup.py: using canned package list\\n\")\nPACKAGES = [\n\"dendropy\",\n\"dendropy.calculate\",\n\"dendropy.dataio\",\n\"dendropy.datamodel\",\n\"dendropy.interop\",\n\"dendropy.legacy\",\n\"dendropy.mathlib\",\n\"dendropy.model\",\n\"dendropy.simulate\",\n\"dendropy.utility\",\n\"dendropy.utility.libexec\",\n]\nelse:\nsys.stderr.write(\"-setup.py: searching for packages\\n\")\nPACKAGES = find_packages(\"src\")\nEXTRA_KWARGS = dict(\ninstall_requires = ['setuptools'],\ninclude_package_data = True,\ntest_suite = \"tests\",\nzip_safe = True,\n)\n\nsys.stderr.write(\"-setup.py: packages identified:\\n{}\\n\".format(_compose_list(PACKAGES, prefix=\" - \")))\nENTRY_POINTS = {}\n\n###############################################################################\n# Script paths\n\nSCRIPT_SUBPATHS = [\n['applications', 'sumtrees', 'sumtrees.py'],\n['applications', 'sumlabels', 'sumlabels.py'],\n['applications', 'dendropy-format', 'dendropy-format'],\n# ['scripts', 'sumtrees', 'cattrees.py'],\n# ['scripts', 'calculators', 'strict_consensus_merge.py'],\n# ['scripts', 'calculators', 'long_branch_symmdiff.py'],\n]\nSCRIPTS = [os.path.join(*i) for i in SCRIPT_SUBPATHS]\nsys.stderr.write(\"-setup.py: scripts identified:\\n{}\\n\".format(_compose_list(SCRIPTS, prefix=\" - \")))\n\n###############################################################################\n# setuptools\/distuils command extensions\n\ntry:\nfrom setuptools import Command\nexcept ImportError:\nsys.stderr.write(\"-setup.py: setuptools.Command could not be imported: setuptools extensions not available\\n\")\nelse:\nsys.stderr.write(\"-setup.py: setuptools command extensions are available\\n\")\ncommand_hook = \"distutils.commands\"\nENTRY_POINTS[command_hook] = []\n\n###########################################################################\n# coverage\n# from dendropy.test.support import coverage_analysis\n# if coverage_analysis.DENDROPY_COVERAGE_ANALYSIS_AVAILABLE:\n# sys.stderr.write(\"-setup.py: coverage analysis available ('python setup.py coverage')\\n\")\n# ENTRY_POINTS[command_hook].append(\"coverage = dendropy.test.support.coverage_analysis:CoverageAnalysis\")\n# else:\n# sys.stderr.write(\"-setup.py: coverage analysis not available\\n\")\n\n\n###############################################################################\n# Main setup\n\n### compose long description ###\nlong_description = _read([\"README.rst\"])\nlong_description = long_description.replace(\"DendroPy-4.x.x\", \"DendroPy-{}\".format(__version__))\nlong_description = long_description.replace(\"\"\"download the source code archive\"\"\",\n\"\"\"`download the source code archive <http:\/\/pypi.python.org\/packages\/source\/D\/DendroPy\/DendroPy-{}.tar.gz>`_\"\"\".format(__version__))\n\nlong_description = long_description + (\"\"\"\\\n\nCurrent Release\n===============\n\nThe current release of DendroPy is version {}.\n\n\"\"\".format(__version__))\n\nsetup(name='DendroPy',\nversion=__version__,\nauthor='Jeet Sukumaran and Mark T. Holder',\nauthor_email='jeetsukumaran@gmail.com, mtholder@ku.edu',\nurl='http:\/\/packages.python.org\/DendroPy\/',\ndescription=\"A Python library for phylogenetics and phylogenetic computing: reading, writing, simulation, processing and manipulation of phylogenetic trees (phylogenies) and characters.\",\nlicense='BSD',\npackages=PACKAGES,\npackage_dir={\"\": \"src\"},\n# not needed?\n# package_data={\n# # \"dendropy.utility\" : [\"libexec\/*\"],\n# },\nscripts = SCRIPTS,\nlong_description=long_description,\nentry_points = ENTRY_POINTS,\nclassifiers = [\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Science\/Research\",\n\"License :: OSI Approved :: BSD License\",\n\"Natural Language :: English\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.1\",\n\"Programming Language :: Python :: 3.2\",\n\"Programming Language :: Python :: 3.3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python\",\n\"Topic :: Scientific\/Engineering :: Bio-Informatics\",\n],\nkeywords='phylogenetics phylogeny phylogenies phylogeography evolution evolutionary biology systematics coalescent population genetics phyloinformatics bioinformatics',\n**EXTRA_KWARGS\n)\n"
    },
    {
        "package_name": "descartes-1.1.0",
        "file_list": "patch.py tests.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.txt setup.cfg setup.py",
        "setup.py": "import os\nimport sys\nimport warnings\n\nfrom setuptools import setup, find_packages\n\nversion = '1.1.0'\ndescription = open('README.txt', 'r').read()\n\n\nsetup(name='descartes',\nversion=version,\ndescription=\"Use geometric objects as matplotlib paths and patches\",\nlong_description=description,\nclassifiers=['Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 3',\n'Topic :: Scientific\/Engineering :: GIS'],\nkeywords='matplotlib gis geojson geometry',\nauthor='Sean Gillies',\nauthor_email='sean.gillies@gmail.com',\nurl='http:\/\/bitbucket.org\/sgillies\/descartes\/',\nlicense='BSD',\npackages=find_packages(exclude=['ez_setup', 'examples', 'tests']),\ninclude_package_data=True,\ninstall_requires=['matplotlib'],\nzip_safe=False)\n"
    },
    {
        "package_name": "detect_secrets-1.3.0",
        "file_list": "analytics.py audit.py common.py compare.py io.py iterator.py report.py __init__.py constants.py baseline.py log.py initialize.py util.py __init__.py potential_secret.py scan.py secrets_collection.py v0_12.py v1_0.py v1_1.py __init__.py audit.py baseline.py common.py filters.py plugins.py scan.py __init__.py __init__.py exceptions.py allowlist.py common.py rfc.model __init__.py heuristic.py regex.py util.py wordlist.py __init__.py main.py artifactory.py aws.py azure_storage_key.py base.py basic_auth.py cloudant.py github_token.py high_entropy_strings.py ibm_cloud_iam.py ibm_cos_hmac.py jwt.py keyword.py mailchimp.py npm.py private_key.py sendgrid.py slack.py softlayer.py square_oauth.py stripe.py twilio.py __init__.py pre_commit_hook.py settings.py base.py config.py exceptions.py yaml.py __init__.py types.py code_snippet.py color.py filetype.py git.py importlib.py inject.py path.py semver.py __init__.py __init__.py __main__.py __version__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from pathlib import Path\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef get_version():\n\"\"\"Parse package __version__.py to get version.\"\"\"\nversionpy = (Path('detect_secrets') \/ '__version__.py').read_text()\nreturn versionpy.split(\"'\")[1]\n\n\nVERSION = get_version()\n\n\nwith open('README.md', encoding='utf-8') as f:\nlong_description = f.read()\n\n\nsetup(\nname='detect_secrets',\npackages=find_packages(exclude=(['test*', 'tmp*'])),\nversion=VERSION,\ndescription='Tool for detecting secrets in the codebase',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nlicense='Copyright Yelp, Inc. 2020',\nauthor='Aaron Loo',\nauthor_email='aaronloo@yelp.com',\nurl='https:\/\/github.com\/Yelp\/detect-secrets',\ndownload_url='https:\/\/github.com\/Yelp\/detect-secrets\/archive\/{}.tar.gz'.format(VERSION),\nkeywords=['secret-management', 'pre-commit', 'security', 'entropy-checks'],\ninstall_requires=[\n'pyyaml',\n'requests',\n],\ninclude_package_data=True,\npackage_data={\n'detect_secrets': [\n'py.typed',\n],\n},\nextras_require={\n'word_list': [\n'pyahocorasick',\n],\n'gibberish': [\n'gibberish-detector',\n],\n},\nentry_points={\n'console_scripts': [\n'detect-secrets = detect_secrets.main:main',\n'detect-secrets-hook = detect_secrets.pre_commit_hook:main',\n],\n},\nclassifiers=[\n'Programming Language :: Python :: 3',\n'License :: OSI Approved :: Apache Software License',\n'Intended Audience :: Developers',\n'Topic :: Software Development',\n'Topic :: Utilities',\n'Environment :: Console',\n'Operating System :: OS Independent',\n'Development Status :: 5 - Production\/Stable',\n'Typing :: Typed',\n],\n)\n"
    },
    {
        "package_name": "df2gspread-1.0.4",
        "file_list": "csv2gspread df2gspread.py gfiles.py gspread2df.py utils.py _version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n# @Author: Eduard Trott\n# @Date: 2015-09-04 14:04:46\n# @Email: etrott@redhat.com\n# @Last modified by: etrott\n# @Last Modified time: 2016-01-19 14:54:20\n\n\n# python-2.7 setup.py build\n\n\n\nfrom setuptools import setup\n\nVERSION_FILE = \"df2gspread\/_version.py\"\nVERSION_EXEC = ''.join(open(VERSION_FILE).readlines())\n__version__ = ''\nexec(str(VERSION_EXEC)) # update __version__\nif not __version__:\nraise RuntimeError(\"Unable to find version string in %s.\" % VERSION_FILE)\n\n# acceptable version schema: major.minor[.patch][-sub[ab]]\n__pkg__ = 'df2gspread'\n__pkgdir__ = {'df2gspread': 'df2gspread'}\n__pkgs__ = ['df2gspread']\n__desc__ = 'Export tables to Google Spreadsheets.'\n__scripts__ = ['bin\/csv2gspread']\n__irequires__ = [\n# CORE DEPENDENCIES\n'argparse>=1.3.0',\n'google-api-python-client==1.6.7',\n'gspread>=2.1.1',\n'oauth2client>=1.5.0,<5.0.0dev',\n'pandas'\n]\n__xrequires__ = {\n'tests': [\n'pytest==2.7.2',\n# 'instructions',\n# 'pytest-pep8==1.0.6', # run with `py.test --pep8 ...`\n],\n# 'docs': ['sphinx==1.3.1', ],\n# 'github': ['PyGithub==1.25.2', ],\n# 'invoke': ['invoke==0.10.1', ],\n}\n\npip_src = 'https:\/\/pypi.python.org\/packages\/src'\n__deplinks__ = []\n\n# README is in the parent directory\nreadme_pth = 'README.rst'\nwith open(readme_pth) as _file:\nreadme = _file.read()\n\ngithub = 'https:\/\/github.com\/maybelinot\/df2gspread'\ndownload_url = '%s\/archive\/master.zip' % github\n\ndefault_setup = dict(\nurl=github,\nlicense='GPLv3',\nauthor='Eduard Trott',\nauthor_email='etrott@redhat.com',\nmaintainer='Chris Ward',\nmaintainer_email='cward@redhat.com',\ndownload_url=download_url,\nlong_description=readme,\ndata_files=[],\nclassifiers=[\n'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n'Natural Language :: English',\n'Programming Language :: Python :: 2.7',\n'Topic :: Office\/Business',\n'Topic :: Utilities',\n],\nkeywords=['information'],\ndependency_links=__deplinks__,\ndescription=__desc__,\ninstall_requires=__irequires__,\nextras_require=__xrequires__,\nname=__pkg__,\npackage_dir=__pkgdir__,\npackages=__pkgs__,\nscripts=__scripts__,\nversion=__version__,\nzip_safe=False,\n)\n\nsetup(**default_setup)\n"
    },
    {
        "package_name": "dict2xml-1.7.1",
        "file_list": "logic.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py",
        "setup.py": "from dict2xml import VERSION\nfrom setuptools import setup\n\n# fmt: off\n\n# Setup the project\nsetup(\nname = \"dict2xml\"\n, version = VERSION\n, packages = ['dict2xml']\n\n, python_requires = \">= 3.5\"\n\n, extras_require =\n{ 'tests' :\n[ \"noseOfYeti==2.1.0\"\n, \"pytest==6.2.5\"\n]\n}\n\n, classifiers =\n[ \"Development Status :: 5 - Production\/Stable\"\n, \"License :: OSI Approved :: MIT License\"\n, \"Operating System :: OS Independent\"\n, \"Programming Language :: Python\"\n, \"Programming Language :: Python :: 3\"\n, \"Topic :: Software Development :: Libraries :: Python Modules\"\n, \"Topic :: Text Processing :: Markup :: XML\"\n]\n\n# metadata\n, url = \"http:\/\/github.com\/delfick\/python-dict2xml\"\n, author = \"Stephen Moore\"\n, author_email = \"stephen@delfick.com\"\n, description = \"Small utility to convert a python dictionary into an XML string\"\n, long_description = open(\"README.rst\").read()\n, license = \"MIT\"\n)\n\n# fmt: on\n"
    },
    {
        "package_name": "diskcache-5.4.0",
        "file_list": "cli.py core.py djangocache.py fanout.py persistent.py recipes.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "from io import open\n\nfrom setuptools import setup\nfrom setuptools.command.test import test as TestCommand\n\nimport diskcache\n\n\nclass Tox(TestCommand):\ndef finalize_options(self):\nTestCommand.finalize_options(self)\nself.test_args = []\nself.test_suite = True\n\ndef run_tests(self):\nimport tox\n\nerrno = tox.cmdline(self.test_args)\nexit(errno)\n\n\nwith open('README.rst', encoding='utf-8') as reader:\nreadme = reader.read()\n\nsetup(\nname=diskcache.__title__,\nversion=diskcache.__version__,\ndescription='Disk Cache -- Disk and file backed persistent cache.',\nlong_description=readme,\nauthor='Grant Jenks',\nauthor_email='contact@grantjenks.com',\nurl='http:\/\/www.grantjenks.com\/docs\/diskcache\/',\nproject_urls={\n'Documentation': 'http:\/\/www.grantjenks.com\/docs\/diskcache\/',\n'Funding': 'https:\/\/gum.co\/diskcache',\n'Source': 'https:\/\/github.com\/grantjenks\/python-diskcache',\n'Tracker': 'https:\/\/github.com\/grantjenks\/python-diskcache\/issues',\n},\nlicense='Apache 2.0',\npackages=['diskcache'],\ntests_require=['tox'],\ncmdclass={'test': Tox},\npython_requires='>=3',\ninstall_requires=[],\nclassifiers=(\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n'Natural Language :: English',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: Implementation :: CPython',\n),\n)\n"
    },
    {
        "package_name": "dj-database-url-1.0.0",
        "file_list": "dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt dj_database_url.py LICENSE PKG-INFO pyproject.toml README.rst setup.cfg setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\nwith open(\"README.rst\") as readme_rst:\nreadme = readme_rst.read()\n\nsetup(\nname=\"dj-database-url\",\nversion=\"1.0.0\",\nurl=\"https:\/\/github.com\/jazzband\/dj-database-url\",\nlicense=\"BSD\",\nauthor=\"Original Author: Kenneth Reitz, Maintained by: JazzBand Community\",\ndescription=\"Use Database URLs in your Django Application.\",\nlong_description=readme,\nlong_description_content_type=\"text\/x-rst\",\npy_modules=[\"dj_database_url\"],\ninstall_requires=[\"Django>3.2\"],\nzip_safe=False,\ninclude_package_data=True,\nplatforms=\"any\",\nclassifiers=[\n\"Environment :: Web Environment\",\n\"Framework :: Django\",\n\"Framework :: Django :: 3.2\",\n\"Framework :: Django :: 4.0\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: BSD License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Topic :: Internet :: WWW\/HTTP :: Dynamic Content\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\n)\n"
    },
    {
        "package_name": "dj-rest-auth-2.2.5",
        "file_list": "AUTHORS admin.py app_settings.py forms.py jwt_auth.py .!63502!django.mo .!64462!django.mo .!64600!django.mo .!64760!django.mo .!65418!django.mo .!65616!django.mo .!65791!django.mo .!65995!django.mo .!69818!django.mo django.mo django.po .!65618!django.mo .!65793!django.mo .!65997!django.mo .!69820!django.mo django.mo django.po .!65620!django.mo .!65795!django.mo .!65999!django.mo .!69822!django.mo django.mo django.po django.po .!65622!django.mo .!65797!django.mo .!66001!django.mo .!69824!django.mo django.mo django.po django.po django.mo django.po django.po .!65624!django.mo .!65799!django.mo .!66003!django.mo .!69826!django.mo django.mo django.po django.mo django.po .!65626!django.mo .!65801!django.mo .!66005!django.mo .!69828!django.mo django.mo django.po django.mo django.po django.mo django.po .!65629!django.mo .!65804!django.mo .!66008!django.mo .!69831!django.mo django.mo django.po django.mo django.po django.mo django.po django.po .!65632!django.mo .!65807!django.mo .!66011!django.mo .!69834!django.mo django.mo django.po .!65634!django.mo .!65809!django.mo .!66013!django.mo .!69836!django.mo django.mo django.po models.py app_settings.py serializers.py urls.py views.py __init__.py app_settings.cpython-38.pyc serializers.cpython-38.pyc urls.cpython-38.pyc views.cpython-38.pyc __init__.cpython-38.pyc serializers.py social_serializers.py django_urls.py mixins.py requirements.pip settings.py test_api.py test_serializers.py test_social.py urls.py __init__.py django_urls.cpython-38.pyc mixins.cpython-38.pyc settings.cpython-38.pyc test_api.cpython-38.pyc test_serializers.cpython-38.pyc test_social.cpython-38.pyc urls.cpython-38.pyc __init__.cpython-38.pyc urls.py utils.py views.py __init__.py admin.cpython-38.pyc app_settings.cpython-38.pyc forms.cpython-38.pyc jwt_auth.cpython-38.pyc models.cpython-38.pyc serializers.cpython-38.pyc social_serializers.cpython-38.pyc urls.cpython-38.pyc utils.cpython-38.pyc views.cpython-38.pyc __init__.cpython-38.pyc __version__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport os\n\nfrom setuptools import find_packages, setup\n\nhere = os.path.dirname(os.path.abspath(__file__))\nf = open(os.path.join(here, 'README.md'))\nlong_description = f.read().strip()\nf.close()\n\n\nabout = {}\nwith open('dj_rest_auth\/__version__.py', 'r', encoding=\"utf8\") as f:\nexec(f.read(), about)\n\nsetup(\nname='dj-rest-auth',\nversion=about['__version__'],\nauthor='iMerica',\nauthor_email='imichael@pm.me',\nurl='http:\/\/github.com\/iMerica\/dj-rest-auth',\ndescription='Authentication and Registration in Django Rest Framework',\nlicense='MIT',\npackages=find_packages(),\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nkeywords='django rest auth registration rest-framework django-registration api',\nzip_safe=False,\ninstall_requires=[\n'Django>=2.0',\n'djangorestframework>=3.7.0',\n],\nextras_require={\n'with_social': ['django-allauth>=0.40.0,<0.51.0'],\n},\ntests_require=[\n'coveralls>=1.11.1',\n'django-allauth==0.50.0',\n'djangorestframework-simplejwt==4.6.0',\n'responses==0.12.1',\n'unittest-xml-reporting==3.0.4',\n],\ntest_suite='runtests.runtests',\ninclude_package_data=True,\npython_requires='>=3.5',\nclassifiers=[\n'Framework :: Django',\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'Operating System :: OS Independent',\n'Topic :: Software Development'\n],\n)\n"
    },
    {
        "package_name": "dj-static-0.0.6",
        "file_list": "dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt dj_static.py PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\ndj-static\n~~~~~~~~~\n\nThis is a simple Django middleware utility that allows you to properly\nserve static assets from production with a WSGI server like Gunicorn.\n\nDjango `doesn't recommend <https:\/\/docs.djangoproject.com\/en\/1.5\/howto\/static-files\/#admonition-serving-the-files>`_\nthe production use of its static file server for a number of reasons.\nThere exists, however, a lovely WSGI application aptly named `Static <http:\/\/lukearno.com\/projects\/static\/>`_.\n\nIt is suitable for the production use of static file serving, unlike Django.\n\nUsage\n-----\n\nConfigure your static assets in ``settings.py``::\n\nSTATIC_ROOT = 'staticfiles'\nSTATIC_URL = '\/static\/'\n\nThen, update your ``wsgi.py`` file to use dj-static::\n\nfrom django.core.wsgi import get_wsgi_application\nfrom dj_static import Cling\n\napplication = Cling(get_wsgi_application())\n\n\"\"\"\n\nfrom setuptools import setup\n\nsetup(\nname='dj-static',\nversion='0.0.6',\nurl='https:\/\/github.com\/kennethreitz\/dj-static',\nlicense='BSD',\nauthor='Kenneth Reitz',\nauthor_email='me@kennethreitz.com',\ndescription='Serve production static files with Django.',\nlong_description=__doc__,\npy_modules=['dj_static'],\nzip_safe=False,\ninstall_requires=['static3'],\ninclude_package_data=True,\nplatforms='any',\nclassifiers=[\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n'Topic :: Software Development :: Libraries :: Python Modules'\n]\n)\n"
    },
    {
        "package_name": "django-bootstrap4-22.2",
        "file_list": "AUTHORS authors.rst changelog.rst conf.py example_template.rst index.rst installation.rst migrate.rst quickstart.rst requirements.txt settings.rst templates.rst templatetags.rst widgets.rst LICENSE manage.py MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py bootstrap.py components.py exceptions.py forms.py models.py renderers.py bootstrap4.html field_errors.html field_help_text.html form_errors.html messages.html pagination.html radio_select_button_group.html bootstrap4.py __init__.py text.py utils.py widgets.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt settings.py urls.py __init__.py settings.cpython-310.pyc settings.cpython-36.pyc settings.cpython-37.pyc settings.cpython-38.pyc settings.cpython-39.pyc urls.cpython-310.pyc urls.cpython-36.pyc urls.cpython-37.pyc urls.cpython-38.pyc urls.cpython-39.pyc __init__.cpython-310.pyc __init__.cpython-36.pyc __init__.cpython-37.pyc __init__.cpython-38.pyc __init__.cpython-39.pyc forms.py test_alerts.py test_buttons.py test_forms.py test_formsets.py test_media.py test_messages.py test_paginator.py test_settings.py test_templates.py test_utils.py test_version.py utils.py __init__.py forms.cpython-310.pyc forms.cpython-37.pyc forms.cpython-38.pyc forms.cpython-39.pyc test_alerts.cpython-310.pyc test_alerts.cpython-37.pyc test_alerts.cpython-38.pyc test_alerts.cpython-39.pyc test_buttons.cpython-310.pyc test_buttons.cpython-37.pyc test_buttons.cpython-38.pyc test_buttons.cpython-39.pyc test_components.cpython-310.pyc test_components.cpython-36.pyc test_components.cpython-37.pyc test_components.cpython-38.pyc test_components.cpython-39.pyc test_forms.cpython-310.pyc test_forms.cpython-37.pyc test_forms.cpython-38.pyc test_forms.cpython-39.pyc test_formsets.cpython-310.pyc test_formsets.cpython-37.pyc test_formsets.cpython-38.pyc test_formsets.cpython-39.pyc test_media.cpython-310.pyc test_media.cpython-37.pyc test_media.cpython-38.pyc test_media.cpython-39.pyc test_messages.cpython-310.pyc test_messages.cpython-37.pyc test_messages.cpython-38.pyc test_messages.cpython-39.pyc test_paginator.cpython-310.pyc test_paginator.cpython-37.pyc test_paginator.cpython-38.pyc test_paginator.cpython-39.pyc test_settings.cpython-310.pyc test_settings.cpython-36.pyc test_settings.cpython-37.pyc test_settings.cpython-38.pyc test_settings.cpython-39.pyc test_templates.cpython-310.pyc test_templates.cpython-36.pyc test_templates.cpython-37.pyc test_templates.cpython-38.pyc test_templates.cpython-39.pyc test_templatetags.cpython-310.pyc test_templatetags.cpython-36.pyc test_templatetags.cpython-37.pyc test_templatetags.cpython-38.pyc test_templatetags.cpython-39.pyc test_utils.cpython-310.pyc test_utils.cpython-37.pyc test_utils.cpython-38.pyc test_utils.cpython-39.pyc test_version.cpython-310.pyc test_version.cpython-36.pyc test_version.cpython-37.pyc test_version.cpython-38.pyc test_version.cpython-39.pyc utils.cpython-310.pyc utils.cpython-36.pyc utils.cpython-37.pyc utils.cpython-38.pyc utils.cpython-39.pyc __init__.cpython-310.pyc __init__.cpython-36.pyc __init__.cpython-37.pyc __init__.cpython-38.pyc __init__.cpython-39.pyc tox.ini",
        "setup.py": "import pathlib\n\nfrom setuptools import find_packages, setup\n\n# The directory containing this file\nHERE = pathlib.Path(__file__).parent\n\n# The text of the README file\nREADME = (HERE \/ \"README.md\").read_text()\n\n\n# This call to setup() does all the work\nsetup(\nname=\"django-bootstrap4\",\nzip_safe=False,\nversion=\"22.2\",\ndescription=\"Bootstrap 4 for Django\",\nlong_description=README,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/zostera\/django-bootstrap4\",\nauthor=\"Dylan Verheul\",\nauthor_email=\"dylan@dyve.net\",\nlicense=\"BSD-3-Clause\",\npackages=find_packages(where=\"src\"),\npackage_dir={\"\": \"src\"},\ninclude_package_data=True,\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Web Environment\",\n\"Framework :: Django\",\n\"Framework :: Django :: 3.2\",\n\"Framework :: Django :: 4.0\",\n\"Framework :: Django :: 4.1\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: BSD License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Software Development :: Libraries\",\n\"Topic :: Utilities\",\n],\npython_requires=\">=3.7\",\ninstall_requires=[\n\"Django>=3.2\",\n\"beautifulsoup4>=4.8.0\",\n'importlib-metadata<3; python_version<\"3.8\"',\n],\n)\n"
    },
    {
        "package_name": "django-braces-1.15.0",
        "file_list": "forms.py _access.py _ajax.py _forms.py _other.py _queries.py __init__.py __init__.py conftest.py CONTRIBUTORS.txt dependency_links.txt not-zip-safe pbr.json PKG-INFO requires.txt SOURCES.txt top_level.txt access.rst changelog.rst conf.py contributing.rst form.rst index.rst Makefile other.rst LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md requirements.txt setup.cfg setup.py factories.py forms.py helpers.py models.py settings.py 404.html blank.html form.html test_access_mixins.py test_ajax_mixins.py test_forms.py test_other_mixins.py urls.py urls_namespaced.py views.py __init__.py",
        "setup.py": "import os\nimport re\nfrom setuptools import setup\n\nNAME = \"braces\"\n\n\ndef _add_default(m):\nattr_name, attr_value = m.groups()\nreturn ((attr_name, attr_value.strip(\"\\\"'\")),)\n\n\ndef parse_dist_meta():\n\"\"\"Extract metadata information from ``$dist\/__init__.py``.\"\"\"\n\nre_meta = re.compile(r\"__(\\w+?)__\\s*=\\s*(.*)\")\nre_doc = re.compile(r'^\"\"\"(.+?)\"\"\"')\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, NAME, \"__init__.py\")) as meta_fh:\ndistmeta = {}\nfor line in meta_fh:\nif line.strip() == \"# -eof meta-\":\nbreak\nmatch = re_meta.match(line.strip())\nif match:\ndistmeta.update(_add_default(match))\nreturn distmeta\n\n\nmeta = parse_dist_meta()\n\nsetup(\nname=\"django-braces\",\nversion=meta[\"version\"],\ndescription=\"Reusable, generic mixins for Django\",\nlong_description=\"Mixins to add easy functionality to Django class-based views, forms, and models.\",\nkeywords=\"django, views, forms, mixins\",\nauthor=\"Kenneth Love <kenneth@brack3t.com>, Chris Jones <chris@brack3t.com>\",\nauthor_email=\"devs@brack3t.com\",\nurl=\"https:\/\/github.com\/brack3t\/django-braces\/\",\nlicense=\"BSD\",\npackages=[\"braces\"],\nzip_safe=False,\ninclude_package_data=True,\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Development Status :: 6 - Mature\",\n\"Environment :: Web Environment\",\n\"Framework :: Django\",\n\"Framework :: Django :: 2.2\",\n\"Framework :: Django :: 3.2\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: BSD License\",\n\"Natural Language :: English\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\ninstall_requires=[\"Django>=2.2\"],\n)\n"
    },
    {
        "package_name": "django-cacheops-6.1",
        "file_list": "bench.py apps.py conf.py invalidation.py jinja2.py cache_thing.lua invalidate.lua cleanfilecache.py invalidate.py __init__.py __init__.py query.py redis.py serializers.py sharding.py signals.py simple.py cacheops.py __init__.py transaction.py tree.py utils.py __init__.py CHANGELOG dependency_links.txt not-zip-safe pbr.json PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE manage.py MANIFEST.in PKG-INFO README.rst requirements-test.txt run_tests.py setup.cfg setup.py bench.py basic.json models.py settings.py tests.py tests_sharding.py tests_transactions.py test_extras.py urls.py utils.py __init__.py tox.ini",
        "setup.py": "from setuptools import setup\n\n\n# Remove build status\nREADME = open('README.rst').read().replace('|Build Status|', '', 1)\n\n\nsetup(\nname='django-cacheops',\nversion='6.1',\nauthor='Alexander Schepanovski',\nauthor_email='suor.web@gmail.com',\n\ndescription='A slick ORM cache with automatic granular event-driven invalidation for Django.',\nlong_description=README,\nurl='http:\/\/github.com\/Suor\/django-cacheops',\nlicense='BSD',\n\npackages=[\n'cacheops',\n'cacheops.management',\n'cacheops.management.commands',\n'cacheops.templatetags'\n],\npython_requires='>=3.5',\ninstall_requires=[\n'django>=2.1',\n'redis>=3.0.0',\n'funcy>=1.8,<2.0',\n'six>=1.4.0',\n],\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Framework :: Django',\n'Framework :: Django :: 2.1',\n'Framework :: Django :: 2.2',\n'Framework :: Django :: 3.0',\n'Framework :: Django :: 3.1',\n'Framework :: Django :: 3.2',\n'Framework :: Django :: 4.0',\n\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'Topic :: Internet :: WWW\/HTTP',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\n\nzip_safe=False,\ninclude_package_data=True,\n)\n"
    },
    {
        "package_name": "django-celery-3.3.1",
        "file_list": "AUTHORS Changelog dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt admin.py admin_utils.py app.py cache.py database.py __init__.py common.py compat.py test_runner.py __init__.py db.py humanize.py loaders.py base.py celery.py celerybeat.py celerycam.py celeryd.py celeryd_detach.py celeryd_multi.py celerymon.py djcelerymon.py __init__.py __init__.py managers.py 0001_initial.py __init__.py models.py mon.py urls.py __init__.py picklefield.py schedulers.py snapshot.py style.css change_list.html confirm_rate_limit.html req.py test_admin.py test_cache.py test_database.py __init__.py test_commands.py test_discovery.py test_loaders.py test_models.py test_schedulers.py test_snapshot.py test_views.py test_worker_job.py utils.py _compat.py __init__.py __init__.py urls.py utils.py views.py __init__.py .keep page.html sidebarintro.html sidebarlogo.html changelog.rst conf.py index.rst unit-testing.rst faq.rst first-steps-with-django.rst index.rst index.rst introduction.rst Makefile djcelery.app.rst djcelery.backends.cache.rst djcelery.backends.database.rst djcelery.common.rst djcelery.compat.rst djcelery.contrib.test_runner.rst djcelery.db.rst djcelery.humanize.rst djcelery.loaders.rst djcelery.managers.rst djcelery.models.rst djcelery.schedulers.rst djcelery.snapshot.rst djcelery.urls.rst djcelery.utils.rst djcelery.views.rst index.rst settings.py applyxrefs.py literals_to_xrefs.py celery.css_t theme.conf __init__.py doc4allmods removepyc.sh sphinx-to-rst.py verify-reference-index.sh default.txt docs.txt test.txt FAQ INSTALL LICENSE django.po django.mo django.po MANIFEST.in PKG-INFO README README.rst default.txt docs.txt test.txt setup.cfg setup.py manage.py settings.py models.py tasks.py tests.py views.py __init__.py models.py views.py __init__.py urls.py __init__.py THANKS",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nimport os\nimport re\nimport sys\nimport codecs\n\ntry:\nfrom setuptools import setup, Command\nexcept ImportError:\nfrom ez_setup import use_setuptools\nuse_setuptools()\nfrom setuptools import setup, Command # noqa\n\nextra = {}\n\n# -*- Python 3 -*-\nis_py3k = sys.version_info[0] == 3\n\n# -*- Distribution Meta -*-\nNAME = 'django-celery'\n\nre_meta = re.compile(r'__(\\w+?)__\\s*=\\s*(.*)')\nre_vers = re.compile(r'VERSION\\s*=\\s*\\((.*?)\\)')\nre_doc = re.compile(r'^\"\"\"(.+?)\"\"\"')\n\n\ndef rq(s):\nreturn s.strip(\"\\\"'\")\n\n\ndef add_default(m):\nattr_name, attr_value = m.groups()\nreturn ((attr_name, rq(attr_value)), )\n\n\ndef add_version(m):\nv = list(map(rq, m.groups()[0].split(', ')))\nreturn (('VERSION', '.'.join(v[0:3]) + ''.join(v[3:])), )\n\n\ndef add_doc(m):\nreturn (('doc', m.groups()[0]), )\n\npats = {re_meta: add_default,\nre_vers: add_version,\nre_doc: add_doc}\nhere = os.path.abspath(os.path.dirname(__file__))\nmeta_fh = open(os.path.join(here, 'djcelery\/__init__.py'))\ntry:\nmeta = {}\nfor line in meta_fh:\nif line.strip() == '# -eof meta-':\nbreak\nfor pattern, handler in pats.items():\nm = pattern.match(line.strip())\nif m:\nmeta.update(handler(m))\nfinally:\nmeta_fh.close()\n\n\npackages, package_data = [], {}\nroot_dir = os.path.dirname(__file__)\nif root_dir != '':\nos.chdir(root_dir)\nsrc_dir = 'djcelery'\n\n\ndef fullsplit(path, result=None):\nif result is None:\nresult = []\nhead, tail = os.path.split(path)\nif head == '':\nreturn [tail] + result\nif head == path:\nreturn result\nreturn fullsplit(head, [tail] + result)\n\n\nSKIP_EXTENSIONS = ['.pyc', '.pyo', '.swp', '.swo']\n\n\ndef is_unwanted_file(filename):\nfor skip_ext in SKIP_EXTENSIONS:\nif filename.endswith(skip_ext):\nreturn True\nreturn False\n\nfor dirpath, dirnames, filenames in os.walk(src_dir):\n# Ignore dirnames that start with '.'\nfor i, dirname in enumerate(dirnames):\nif dirname.startswith('.'):\ndel dirnames[i]\nparts = fullsplit(dirpath)\npackage_name = '.'.join(parts)\nfor filename in filenames:\nif filename.endswith('.py'):\npackages.append(package_name)\nelif is_unwanted_file(filename):\npass\nelse:\nrelative_path = []\nwhile '.'.join(parts) not in packages:\nrelative_path.append(parts.pop())\nrelative_path.reverse()\npath = os.path.join(*relative_path)\npackage_files = package_data.setdefault('.'.join(parts), [])\npackage_files.extend([os.path.join(path, f) for f in filenames])\n\n\nclass RunTests(Command):\ndescription = 'Run the django test suite from the tests dir.'\nuser_options = []\nextra_env = {}\nextra_args = []\n\ndef run(self):\nfor env_name, env_value in self.extra_env.items():\nos.environ[env_name] = str(env_value)\n\nthis_dir = os.getcwd()\ntestproj_dir = os.path.join(this_dir, 'tests')\nos.chdir(testproj_dir)\nsys.path.append(testproj_dir)\nfrom django.core.management import execute_from_command_line\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')\nprev_argv = list(sys.argv)\ntry:\nsys.argv = [__file__, 'test'] + self.extra_args\nexecute_from_command_line(argv=sys.argv)\nfinally:\nsys.argv = prev_argv\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\n\nclass QuickRunTests(RunTests):\nextra_env = dict(SKIP_RLIMITS=1, QUICKTEST=1)\n\n\nclass CIRunTests(RunTests):\n\n@property\ndef extra_args(self):\ntoxinidir = os.environ.get('TOXINIDIR', '')\nreturn [\n'--with-coverage3',\n'--cover3-xml',\n'--cover3-xml-file=%s' % (\nos.path.join(toxinidir, 'coverage.xml'), ),\n'--with-xunit',\n'--xunit-file=%s' % (\nos.path.join(toxinidir, 'nosetests.xml'), ),\n'--cover3-html',\n'--cover3-html-dir=%s' % (\nos.path.join(toxinidir, 'cover'), ),\n]\n\n\nif os.path.exists('README.rst'):\nlong_description = codecs.open('README.rst', 'r', 'utf-8').read()\nelse:\nlong_description = 'See http:\/\/github.com\/celery\/django-celery'\n\n\nsetup(\nname=NAME,\nversion=meta['VERSION'],\ndescription=meta['doc'],\nauthor=meta['author'],\nauthor_email=meta['contact'],\nurl=meta['homepage'],\nplatforms=['any'],\nlicense='BSD',\npackages=packages,\npackage_data=package_data,\nzip_safe=False,\ninstall_requires=[\n'celery>=3.1.15,<4.0',\n'django>=1.8',\n],\ncmdclass={'test': RunTests,\n'quicktest': QuickRunTests,\n'citest': CIRunTests},\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Framework :: Django',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: POSIX',\n'Topic :: Communications',\n'Topic :: System :: Distributed Computing',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Programming Language :: Python :: Implementation :: Jython',\n],\nlong_description=long_description,\n**extra\n)\n"
    },
    {
        "package_name": "django-cleanup-6.0.0",
        "file_list": "CHANGELOG.md apps.py cache.py cleanup.py handlers.py signals.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2012 Ilya Shalyapin\n#\n# django-cleanup is free software under terms of the MIT License.\n#\n\nimport os\nimport re\nfrom codecs import open as codecs_open\n\nfrom setuptools import find_packages, setup\n\n\ndef read(*parts):\nfile_path = os.path.join(os.path.dirname(__file__), *parts)\nreturn codecs_open(file_path, encoding='utf-8').read()\n\n\ndef find_version(*parts):\nversion_file = read(*parts)\nversion_match = re.search(\nr'''^__version__ = ['\"]([^'\"]*)['\"]''', version_file, re.M)\nif version_match:\nreturn str(version_match.group(1))\nraise RuntimeError('Unable to find version string.')\n\n\nsetup(\nname='django-cleanup',\nversion=find_version('django_cleanup', '__init__.py'),\npackages=['django_cleanup'],\ninclude_package_data=True,\nrequires=['python (>=3.5)', 'django (>=2.2)'],\ndescription='Deletes old files.',\nlong_description=read('README.rst'),\nlong_description_content_type='text\/x-rst',\nauthor='Ilya Shalyapin',\nauthor_email='ishalyapin@gmail.com',\nurl='https:\/\/github.com\/un1t\/django-cleanup',\ndownload_url='https:\/\/github.com\/un1t\/django-cleanup\/tarball\/master',\nlicense='MIT License',\nkeywords='django',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Framework :: Django',\n'Framework :: Django :: 2.2',\n'Framework :: Django :: 3.2',\n'Framework :: Django :: 4.0',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Utilities',\n],\n)\n"
    },
    {
        "package_name": "django-configurations-2.3.2",
        "file_list": "release.yml test.yml .gitignore .pre-commit-config.yaml .readthedocs.yaml AUTHORS CODE_OF_CONDUCT.md asgi.py base.py decorators.py fastcgi.py importer.py management.py sphinx.py utils.py values.py version.py wsgi.py __init__.py __main__.py CONTRIBUTING.md dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt changes.rst conf.py cookbook.rst index.rst patterns.rst requirements.txt values.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py base.py dot_env.py main.py mixin_inheritance.py multiple_inheritance.py single_inheritance.py __init__.py setup_test.py test_env.py test_inheritance.py test_main.py test_values.py urls.py __init__.py .env manage.py settings.py urls.py wsgi.py __init__.py tox.ini",
        "setup.py": "import os\nimport codecs\nfrom setuptools import setup\n\n\ndef read(*parts):\nfilename = os.path.join(os.path.dirname(__file__), *parts)\nwith codecs.open(filename, encoding='utf-8') as fp:\nreturn fp.read()\n\n\nsetup(\nname=\"django-configurations\",\nuse_scm_version={\"version_scheme\": \"post-release\", \"local_scheme\": \"dirty-tag\"},\nsetup_requires=[\"setuptools_scm\"],\nurl='https:\/\/django-configurations.readthedocs.io\/',\nlicense='BSD',\ndescription=\"A helper for organizing Django settings.\",\nlong_description=read('README.rst'),\nlong_description_content_type='text\/x-rst',\nauthor='Jannis Leidel',\nauthor_email='jannis@leidel.info',\npackages=['configurations'],\nentry_points={\n'console_scripts': [\n'django-cadmin = configurations.management:execute_from_command_line',\n],\n},\ninstall_requires=[\n'django>=2.2',\n'importlib-metadata;python_version<\"3.8\"',\n],\npython_requires='>=3.6, <4.0',\nextras_require={\n'cache': ['django-cache-url'],\n'database': ['dj-database-url'],\n'email': ['dj-email-url'],\n'search': ['dj-search-url'],\n'testing': [\n'django-cache-url>=1.0.0',\n'dj-database-url',\n'dj-email-url',\n'dj-search-url',\n],\n},\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Framework :: Django',\n'Framework :: Django :: 2.2',\n'Framework :: Django :: 3.1',\n'Framework :: Django :: 3.2',\n'Framework :: Django :: 4.0',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3 :: Only',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Utilities',\n],\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "django-crontab-0.7.1",
        "file_list": "app_settings.py crontab.py crontab.py __init__.py __init__.py models.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nfrom setuptools import setup\n\n\nsetup(\nname='django-crontab',\ndescription='dead simple crontab powered job scheduling for django',\nversion='0.7.1',\nauthor='Lars Kreisz',\nauthor_email='lars.kreisz@gmail.com',\nlicense='MIT',\nurl='https:\/\/github.com\/kraiz\/django-crontab',\nlong_description=open('README.rst').read(),\npackages=[\n'django_crontab',\n'django_crontab.management',\n'django_crontab.management.commands'],\ninstall_requires=[\n'Django>=1.8'\n],\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Framework :: Django',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Operating System :: POSIX :: Linux',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Topic :: System :: Installation\/Setup'\n]\n)\n"
    },
    {
        "package_name": "django-filter-22.1",
        "file_list": "AUTHORS CHANGES.rst dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt compat.py conf.py constants.py exceptions.py fields.py filters.py filterset.py django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po backends.py filters.py filterset.py __init__.py crispy_form.html form.html multiwidget.html utils.py views.py widgets.py __init__.py form.png conf.py tests.txt install.txt migration.txt rest_framework.txt tips.txt usage.txt index.txt make.bat Makefile fields.txt filters.txt filterset.txt settings.txt widgets.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst maintainer.txt test-ci.txt test.txt runshell.py runtests.py setup.cfg setup.py models.py apps.py models.py filter_template.html test_backends.py test_filters.py test_filterset.py test_integration.py __init__.py settings.py book_filter.html test_conf.py test_fields.py test_filtering.py test_filters.py test_filterset.py test_forms.py test_utils.py test_views.py test_widgets.py urls.py utils.py __init__.py",
        "setup.py": "import os\nimport sys\n\nfrom setuptools import find_packages, setup\n\n# FIXME: Main module requires django to be present, so cannot run setup.py in\n# clean environment.\n# from django_filters import __version__\n__version__ = \"22.1\"\n\nf = open(\"README.rst\")\nreadme = f.read()\nf.close()\n\nif sys.argv[-1] == \"publish\":\nif os.system(\"pip freeze | grep wheel\"):\nprint(\"wheel not installed.\\nUse `pip install wheel`.\\nExiting.\")\nsys.exit()\nif os.system(\"pip freeze | grep twine\"):\nprint(\"twine not installed.\\nUse `pip install twine`.\\nExiting.\")\nsys.exit()\nos.system(\"python setup.py sdist bdist_wheel\")\nos.system(\"twine upload dist\/*\")\nprint(\"You probably want to also tag the version now:\")\nprint(\" git tag -a %s -m 'version %s'\" % (__version__, __version__))\nprint(\" git push --tags\")\nsys.exit()\n\nsetup(\nname=\"django-filter\",\nversion=__version__,\ndescription=(\n\"Django-filter is a reusable Django application for allowing\"\n\" users to filter querysets dynamically.\"\n),\nlong_description=readme,\nauthor=\"Alex Gaynor\",\nauthor_email=\"alex.gaynor@gmail.com\",\nmaintainer=\"Carlton Gibson\",\nmaintainer_email=\"carlton.gibson@noumenal.es\",\nurl=\"https:\/\/github.com\/carltongibson\/django-filter\/tree\/main\",\npackages=find_packages(exclude=[\"tests*\"]),\nproject_urls={\n\"Documentation\": \"https:\/\/django-filter.readthedocs.io\/en\/main\/\",\n\"Changelog\": \"https:\/\/github.com\/carltongibson\/django-filter\/blob\/main\/CHANGES.rst\",\n\"Bug Tracker\": \"https:\/\/github.com\/carltongibson\/django-filter\/issues\",\n\"Source Code\": \"https:\/\/github.com\/carltongibson\/django-filter\",\n},\ninclude_package_data=True,\nlicense=\"BSD\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Web Environment\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: BSD License\",\n\"Operating System :: OS Independent\",\n\"Framework :: Django\",\n\"Framework :: Django :: 3.2\",\n\"Framework :: Django :: 4.0\",\n\"Framework :: Django :: 4.1\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\nzip_safe=False,\npython_requires=\">=3.7\",\ninstall_requires=[\n\"Django>=3.2\",\n],\n)\n"
    },
    {
        "package_name": "django-graphql-jwt-0.3.4",
        "file_list": "backends.py compat.py decorators.py exceptions.py django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.po middleware.py mixins.py mutations.py path.py filters.py __init__.py apps.py decorators.py django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.po cleartokens.py __init__.py __init__.py managers.py 0001_initial.py 0002_auto_20190130_0900.py __init__.py mixins.py models.py mutations.py relay.py shortcuts.py signals.py utils.py __init__.py relay.py settings.py shortcuts.py signals.py testcases.py utils.py __init__.py LICENSE PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['graphql_jwt',\n'graphql_jwt.refresh_token',\n'graphql_jwt.refresh_token.admin',\n'graphql_jwt.refresh_token.management',\n'graphql_jwt.refresh_token.management.commands',\n'graphql_jwt.refresh_token.migrations']\n\npackage_data = \\\n{'': ['*'],\n'graphql_jwt': ['locale\/ar\/LC_MESSAGES\/*',\n'locale\/es\/LC_MESSAGES\/*',\n'locale\/fr\/LC_MESSAGES\/*',\n'locale\/nl\/LC_MESSAGES\/*',\n'locale\/pt_BR\/LC_MESSAGES\/*',\n'locale\/zh_Hans\/LC_MESSAGES\/*'],\n'graphql_jwt.refresh_token': ['locale\/ar\/LC_MESSAGES\/*',\n'locale\/es\/LC_MESSAGES\/*',\n'locale\/fr\/LC_MESSAGES\/*',\n'locale\/nl\/LC_MESSAGES\/*',\n'locale\/pt_BR\/LC_MESSAGES\/*',\n'locale\/zh_Hans\/LC_MESSAGES\/*']}\n\ninstall_requires = \\\n['Django>=2.0', 'PyJWT>=2,<3', 'graphene-django>=2.0.0', 'graphene>=2.1.5']\n\nsetup_kwargs = {\n'name': 'django-graphql-jwt',\n'version': '0.3.4',\n'description': 'JSON Web Token for Django GraphQL.',\n'long_description': '<p align=\"center\">\\n <a href=\"https:\/\/django-graphql-jwt.domake.io\/\"><img width=\"420px\" src=\"https:\/\/django-graphql-jwt.domake.io\/_static\/logo.png\" alt=\\'Django GraphQL JWT\\'><\/a>\\n<\/p>\\n\\n<p align=\"center\">\\n JSON Web Token authentication for Django GraphQL.\\n <br>Fantastic <strong>documentation<\/strong> is available at <a href=\"https:\/\/django-graphql-jwt.domake.io\">https:\/\/django-graphql-jwt.domake.io<\/a>.\\n<\/p>\\n<p align=\"center\">\\n <a href=\"https:\/\/github.com\/flavors\/django-graphql-jwt\/actions\">\\n <img src=\"https:\/\/github.com\/flavors\/django-graphql-jwt\/actions\/workflows\/test-suite.yml\/badge.svg\" alt=\"Test\">\\n <\/a>\\n <a href=\"https:\/\/codecov.io\/gh\/flavors\/django-graphql-jwt\">\\n <img src=\"https:\/\/img.shields.io\/codecov\/c\/github\/flavors\/django-graphql-jwt?color=%2334D058\" alt=\"Coverage\">\\n <\/a>\\n <a href=\"https:\/\/www.codacy.com\/gh\/flavors\/django-graphql-jwt\/dashboard\">\\n <img src=\"https:\/\/app.codacy.com\/project\/badge\/Grade\/4f9fd439fbc74be88a215b9ed2abfcf9\" alt=\"Codacy\">\\n <\/a>\\n <a href=\"https:\/\/pypi.python.org\/pypi\/django-graphql-jwt\">\\n <img src=\"https:\/\/img.shields.io\/pypi\/v\/django-graphql-jwt.svg\" alt=\"Package version\">\\n <\/a>\\n<\/p>\\n\\n## Installation\\n\\nInstall last stable version from Pypi:\\n\\n```sh\\npip install django-graphql-jwt\\n```\\n\\nAdd `AuthenticationMiddleware` middleware to your *MIDDLEWARE* settings:\\n\\n\\n```py\\nMIDDLEWARE = [\\n # ...\\n \"django.contrib.auth.middleware.AuthenticationMiddleware\",\\n # ...\\n]\\n```\\n\\nAdd `JSONWebTokenMiddleware` middleware to your *GRAPHENE* settings:\\n\\n```py\\nGRAPHENE = {\\n \"SCHEMA\": \"mysite.myschema.schema\",\\n \"MIDDLEWARE\": [\\n \"graphql_jwt.middleware.JSONWebTokenMiddleware\",\\n ],\\n}\\n```\\n\\nAdd `JSONWebTokenBackend` backend to your *AUTHENTICATION_BACKENDS*:\\n\\n```py\\nAUTHENTICATION_BACKENDS = [\\n \"graphql_jwt.backends.JSONWebTokenBackend\",\\n \"django.contrib.auth.backends.ModelBackend\",\\n]\\n```\\n\\n## Schema\\n\\nAdd *django-graphql-jwt* mutations to the root schema:\\n\\n```py\\nimport graphene\\nimport graphql_jwt\\n\\n\\nclass Mutation(graphene.ObjectType):\\n token_auth = graphql_jwt.ObtainJSONWebToken.Field()\\n verify_token = graphql_jwt.Verify.Field()\\n refresh_token = graphql_jwt.Refresh.Field()\\n\\n\\nschema = graphene.Schema(mutation=Mutation)\\n```\\n',\n'author': 'mongkok',\n'author_email': 'dani@domake.io',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/flavors\/django-graphql-jwt',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "django-impersonate-1.8.2",
        "file_list": "CHANGELOG admin.py apps.py decorators.py helpers.py middleware.py 0001_initial.py __init__.py models.py settings.py signals.py list_users.html search_users.html tests.py urls.py views.py __init__.py PKG-INFO README.rst setup.py",
        "setup.py": "import os\nfrom distutils.core import setup\n\nproject_name = 'impersonate'\nlong_description = open('README.rst').read()\n\n# Idea from django-registration setup.py\npackages, data_files = [], []\nroot_dir = os.path.dirname(__file__)\nif root_dir:\nos.chdir(root_dir)\n\nfor dirpath, dirnames, filenames in os.walk(project_name):\n# Ignore dirnames that start with '.'\nfor i, dirname in enumerate(dirnames):\nif dirname.startswith('.') or dirname == '__pycache__':\ndel dirnames[i]\nif '__init__.py' in filenames:\npkg = dirpath.replace(os.path.sep, '.')\nif os.path.altsep:\npkg = pkg.replace(os.path.altsep, '.')\npackages.append(pkg)\nelif filenames:\nprefix = dirpath[(len(project_name) + 1) :]\nfor f in filenames:\ndata_files.append(os.path.join(prefix, f))\n\nsetup(\nname='django-impersonate',\nversion=__import__(project_name).get_version(),\npackage_dir={project_name: project_name},\npackages=packages,\npackage_data={project_name: data_files},\ndescription='Django app to allow superusers to impersonate other users.',\nauthor='Peter Sanchez',\nauthor_email='pjs@petersanchez.com',\nlicense='BSD License',\nurl='https:\/\/code.netlandish.com\/~petersanchez\/django-impersonate',\nlong_description=long_description,\nplatforms=['any'],\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Natural Language :: English',\n'Operating System :: OS Independent',\n'Framework :: Django',\n'Framework :: Django :: 2.2',\n'Framework :: Django :: 3.2',\n'Framework :: Django :: 4.0',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Environment :: Web Environment',\n],\n)\n"
    },
    {
        "package_name": "django-model-utils-4.2.0",
        "file_list": ".coveragerc .editorconfig ISSUE_TEMPLATE.md PULL_REQUEST_TEMPLATE.md release.yml test.yml .gitignore AUTHORS.rst CHANGES.rst CONTRIBUTING.rst dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt changelog.rst conf.py fields.rst index.rst make.bat Makefile managers.rst models.rst setup.rst utilities.rst LICENSE.txt Makefile MANIFEST.in choices.py fields.py django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po managers.py models.py tracker.py __init__.py PKG-INFO README.rst requirements-test.txt requirements.txt setup.cfg setup.py fields.py managers.py models.py settings.py signals.py test_choices.py test_field_tracker.py test_monitor_field.py test_split_field.py test_status_field.py test_urlsafe_token_field.py test_uuid_field.py __init__.py test_inheritance_iterable.py test_inheritance_manager.py test_join_manager.py test_query_manager.py test_softdelete_manager.py test_status_manager.py __init__.py test_miscellaneous.py test_deferred_fields.py test_savesignalhandling_model.py test_softdeletable_model.py test_status_model.py test_timeframed_model.py test_timestamped_model.py test_uuid_model.py __init__.py __init__.py tox.ini translations.py",
        "setup.py": "import os\n\nfrom setuptools import find_packages, setup\n\n\ndef long_desc(root_path):\nFILES = ['README.rst', 'CHANGES.rst']\nfor filename in FILES:\nfilepath = os.path.realpath(os.path.join(root_path, filename))\nif os.path.isfile(filepath):\nwith open(filepath, mode='r') as f:\nyield f.read()\n\n\nHERE = os.path.abspath(os.path.dirname(__file__))\nlong_description = \"\\n\\n\".join(long_desc(HERE))\n\n\nsetup(\nname='django-model-utils',\nuse_scm_version={\"version_scheme\": \"post-release\"},\nsetup_requires=[\"setuptools_scm\"],\nlicense=\"BSD\",\ndescription='Django model mixins and utilities',\nlong_description=long_description,\nlong_description_content_type='text\/x-rst',\nauthor='Carl Meyer',\nauthor_email='carl@oddbird.net',\nmaintainer='JazzBand',\nurl='https:\/\/github.com\/jazzband\/django-model-utils',\npackages=find_packages(exclude=['tests*']),\ninstall_requires=['Django>=2.0.1'],\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Framework :: Django',\n'Framework :: Django :: 2.2',\n'Framework :: Django :: 3.1',\n'Framework :: Django :: 3.2',\n],\nzip_safe=False,\ntests_require=['Django>=2.2'],\npackage_data={\n'model_utils': [\n'locale\/*\/LC_MESSAGES\/django.po', 'locale\/*\/LC_MESSAGES\/django.mo'\n],\n},\n)\n"
    },
    {
        "package_name": "django-multiselectfield-0.1.12",
        "file_list": "CHANGES.rst COPYING.LGPLv3 dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in apps.py fields.py __init__.py fields.py __init__.py django.mo django.po utils.py validators.py __init__.py PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\n# Copyright (c) 2012 by Pablo Mart\u00edn <goinnn@gmail.com>\n#\n# This program is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU Lesser General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with this programe. If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\n# Initial code got from http:\/\/djangosnippets.org\/users\/danielroseman\/\n\nimport codecs\nimport os\nfrom setuptools import setup, find_packages\n\n\ndef read(*rnames):\nwith codecs.open(\nos.path.join(os.path.dirname(__file__), *rnames),\n'r', 'utf-8',\n) as f:\nreturn f.read()\n\n\nsetup(\nname=\"django-multiselectfield\",\nversion=\"0.1.12\",\nauthor=\"Pablo Martin\",\nauthor_email=\"goinnn@gmail.com\",\ndescription=\"Django multiple select field\",\nlong_description=(read('README.rst') + '\\n\\n' + read('CHANGES.rst')),\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Framework :: Django',\n'License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n],\nlicense=\"LGPL 3\",\nkeywords=\"django,multiple,select,field,choices\",\nurl='https:\/\/github.com\/goinnn\/django-multiselectfield',\npackages=find_packages(),\ninclude_package_data=True,\ntests_require=[\n'django>=1.4',\n'tox',\n'coverage',\n'flake8',\n],\ninstall_requires=[\n'django>=1.4',\n],\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "django-nose-1.4.7",
        "file_list": "AUTHORS.rst changelog.rst contribute.json CONTRIBUTING.rst fixture_tables.py test.py __init__.py __init__.py plugin.py runner.py testcases.py tools.py utils.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt authors.rst changelog.rst conf.py contributing.rst index.rst installation.rst make.bat Makefile upgrading.rst usage.rst .keep LICENSE Makefile manage.py MANIFEST.in PKG-INFO README.rst requirements-rtd.txt requirements.txt runtests.sh setup.cfg setup.py custom_runner.py testdata.json 0001_initial.py __init__.py models.py plugins.py test_with_plugins.py runtests.py settings.py tests.py test_for_nose.py test_only_this.py __init__.py test_databases.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\"\"\"django-nose packaging.\"\"\"\nfrom __future__ import unicode_literals\nimport os\nfrom codecs import open\nfrom setuptools import setup, find_packages\n\n\ndef get_long_description(title):\n\"\"\"Create the long_description from other files.\"\"\"\nROOT = os.path.abspath(os.path.dirname(__file__))\n\nreadme = open(os.path.join(ROOT, 'README.rst'), 'r', 'utf8').read()\nbody_tag = \".. Omit badges from docs\"\nreadme_body_start = readme.index(body_tag)\nassert readme_body_start\nreadme_body = readme[readme_body_start + len(body_tag):]\n\nchangelog = open(os.path.join(ROOT, 'changelog.rst'), 'r', 'utf8').read()\nold_tag = \".. Omit older changes from package\"\nchangelog_body_end = changelog.index(old_tag)\nassert changelog_body_end\nchangelog_body = changelog[:changelog_body_end]\n\nbars = '=' * len(title)\nlong_description = \"\"\"\n%(bars)s\n%(title)s\n%(bars)s\n%(readme_body)s\n\n%(changelog_body)s\n\n_(Older changes can be found in the full documentation)._\n\"\"\" % locals()\nreturn long_description\n\n\nsetup(\nname='django-nose',\nversion='1.4.7',\ndescription='Makes your Django tests simple and snappy',\nlong_description=get_long_description('django-nose'),\nauthor='Jeff Balogh',\nauthor_email='me@jeffbalogh.org',\nmaintainer='John Whitlock',\nmaintainer_email='jwhitlock@mozilla.com',\nurl='http:\/\/github.com\/jazzband\/django-nose',\nlicense='BSD',\npackages=find_packages(exclude=['testapp', 'testapp\/*']),\ninclude_package_data=True,\nzip_safe=False,\ninstall_requires=['nose>=1.2.1'],\ntest_suite='testapp.runtests.runtests',\n# This blows up tox runs that install django-nose into a virtualenv,\n# because it causes Nose to import django_nose.runner before the Django\n# settings are initialized, leading to a mess of errors. There's no reason\n# we need FixtureBundlingPlugin declared as an entrypoint anyway, since you\n# need to be using django-nose to find the it useful, and django-nose knows\n# about it intrinsically.\n# entry_points=\"\"\"\n# [nose.plugins.0.10]\n# fixture_bundler = django_nose.fixture_bundling:FixtureBundlingPlugin\n# \"\"\",\nkeywords='django nose django-nose',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Framework :: Django',\n'Framework :: Django :: 1.8',\n'Framework :: Django :: 1.9',\n'Framework :: Django :: 1.10',\n'Framework :: Django :: 1.11',\n'Framework :: Django :: 2.0',\n'Framework :: Django :: 2.1',\n'Framework :: Django :: 2.2',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Topic :: Software Development :: Testing'\n]\n)\n"
    },
    {
        "package_name": "django-rest-auth-0.9.5",
        "file_list": "AUTHORS dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst admin.py admin.pyc app_settings.py app_settings.pyc django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.po django.mo django.po django.mo django.po models.py models.pyc app_settings.py app_settings.pyc serializers.py serializers.pyc urls.py urls.pyc views.py views.pyc __init__.py __init__.pyc serializers.py serializers.pyc social_serializers.py social_serializers.pyc django_urls.py django_urls.pyc mixins.py mixins.pyc requirements.pip settings.py settings.pyc test_api.py test_api.pyc test_base.pyc test_social.py test_social.pyc urls.py urls.pyc __init__.py __init__.pyc urls.py urls.pyc utils.py utils.pyc views.py views.pyc __init__.py __init__.pyc setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport os\nfrom setuptools import setup, find_packages\n\n\nhere = os.path.dirname(os.path.abspath(__file__))\nf = open(os.path.join(here, 'README.rst'))\nlong_description = f.read().strip()\nf.close()\n\n\nsetup(\nname='django-rest-auth',\nversion='0.9.5',\nauthor='Sumit Chachra',\nauthor_email='chachra@tivix.com',\nurl='http:\/\/github.com\/Tivix\/django-rest-auth',\ndescription='Create a set of REST API endpoints for Authentication and Registration',\npackages=find_packages(),\nlong_description=long_description,\nkeywords='django rest auth registration rest-framework django-registration api',\nzip_safe=False,\ninstall_requires=[\n'Django>=1.8.0',\n'djangorestframework>=3.1.3',\n'six>=1.9.0',\n],\nextras_require={\n'with_social': ['django-allauth>=0.25.0'],\n},\ntests_require=[\n'responses>=0.5.0',\n'django-allauth>=0.25.0',\n'djangorestframework-jwt>=1.9.0',\n],\ntest_suite='runtests.runtests',\ninclude_package_data=True,\nclassifiers=[\n'Framework :: Django',\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'Operating System :: OS Independent',\n'Topic :: Software Development'\n],\n)\n"
    },
    {
        "package_name": "django-rest-swagger-2.2.0",
        "file_list": "dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md renderers.py settings.py app.bundle.css app.bundle.js vendors.bundle.css vendors.bundle.js favicon-16x16.png favicon-32x32.png logo_small.png index.html views.py __init__.py setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/python\nimport os\nimport sys\nimport shutil\nfrom setuptools import setup\nfrom rest_framework_swagger import __version__ as VERSION\n\nif sys.argv[-1] == 'publish':\nif os.system(\"wheel version\"):\nprint(\"wheel not installed.\\nUse `pip install wheel`.\\nExiting.\")\nsys.exit()\nif os.system(\"pip freeze | grep twine\"):\nprint(\"twine not installed.\\nUse `pip install twine`.\\nExiting.\")\nsys.exit()\nos.system(\"python setup.py sdist bdist_wheel\")\nos.system(\"twine upload -r pypi dist\/*\")\nprint(\"You probably want to also tag the version now:\")\nprint(\" git tag -a %s -m 'version %s'\" % (VERSION, VERSION))\nprint(\" git push --tags\")\nshutil.rmtree('dist')\nshutil.rmtree('build')\nshutil.rmtree('django_rest_swagger.egg-info')\nsys.exit()\n\nREADME = \"\"\"\nDjango REST Swagger\n\nAn API documentation generator for Swagger UI and Django REST Framework.\n\nInstallation\nFrom pip:\n\npip install django-rest-swagger\n\nProject @ https:\/\/github.com\/marcgibbons\/django-rest-swagger\nDocs @ https:\/\/django-rest-swagger.readthedocs.io\/\n\"\"\"\n\n# allow setup.py to be run from any path\nos.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))\n\nsetup(\nname='django-rest-swagger',\nversion=VERSION,\ninstall_requires=[\n'coreapi>=2.3.0',\n'openapi-codec>=1.3.1',\n'djangorestframework>=3.5.4',\n'simplejson'\n],\npackages=['rest_framework_swagger'],\ninclude_package_data=True,\nlicense='FreeBSD License',\ndescription='Swagger UI for Django REST Framework 3.5+',\nlong_description=README,\ntest_suite='tests',\nauthor='Marc Gibbons',\nauthor_email='marc_gibbons@rogers.com',\nurl='https:\/\/github.com\/marcgibbons\/django-rest-swagger',\nclassifiers=[\n'Environment :: Web Environment',\n'Framework :: Django',\n'Framework :: Django :: 1.8',\n'Framework :: Django :: 1.9',\n'Framework :: Django :: 1.10',\n'Framework :: Django :: 1.11',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Topic :: Internet :: WWW\/HTTP',\n'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n],\nzip_safe=False\n)\n"
    },
    {
        "package_name": "django-safedelete-1.2.2",
        "file_list": "AUTHORS CHANGES dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst admin.py apps.py config.py django.po django.po managers.py models.py query.py queryset.py signals.py admin.css undelete_selected_confirmation.html models.py settings.py testcase.py test_admin.py test_custom_queryset.py test_foreignkey.py test_hard_delete.py test_invisible.py test_lookups.py test_many2many.py test_no_cascade.py test_no_delete.py test_prefetch_related.py test_queryset.py test_refresh_from_db.py test_single_delete_call_on_inheritance.py test_soft_delete.py test_soft_delete_cascade.py test_subquery.py test_visible_by_pk.py urls.py __init__.py utils.py __init__.py setup.cfg setup.py",
        "setup.py": "import codecs\nimport os\nimport re\n\nfrom setuptools import find_packages, setup\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith open('README.rst', 'r') as f_readme:\nwith open('CHANGES', 'r') as f_changes:\nlong_description = f_readme.read() + '\\n\\n' + f_changes.read()\n\n\ndef get_version(package_name):\nversion_re = re.compile(r\"^__version__ = [\\\"']([\\w_.-]+)[\\\"']$\")\npackage_components = package_name.split('.')\ninit_path = os.path.join(here, *(package_components + ['__init__.py']))\nwith codecs.open(init_path, 'r', 'utf-8') as f:\nfor line in f:\nmatch = version_re.match(line.strip())\nif match:\nreturn match.groups()[0]\nraise RuntimeError(\"Unable to find version string.\")\n\n\nversion = get_version('safedelete')\n\nsetup(\nname='django-safedelete',\npackages=find_packages(),\nversion=version,\ndescription='Mask your objects instead of deleting them from your database.',\nlong_description=long_description,\nauthor='Korantin Auguste',\nauthor_email='contact@palkeo.com',\nurl='https:\/\/github.com\/makinacorpus\/django-safedelete',\ndownload_url='https:\/\/github.com\/makinacorpus\/django-safedelete\/tarball\/%s' % version,\nkeywords=['django', 'delete', 'safedelete', 'softdelete'],\nclassifiers=[\n'Framework :: Django',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Development Status :: 4 - Beta',\n],\nlicense='BSD',\ninstall_requires=['Django'],\ninclude_package_data=True,\n)\n"
    },
    {
        "package_name": "django-ses-3.1.0",
        "file_list": "admin.py apps.py deprecation.py get_ses_statistics.py ses_email_address.py __init__.py __init__.py 0001_initial.py __init__.py models.py settings.py signals.py send_stats.html urls.py utils.py views.py __init__.py local_settings.template.py middleware.py settings.py base.html index.html send-email.html urls.py views.py __init__.py LICENSE PKG-INFO pyproject.toml README.rst setup.py test_backend.py test_commands.py test_settings.py test_stats.py test_urls.py test_verifier.py test_views.py utils.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['django_ses',\n'django_ses.management',\n'django_ses.management.commands',\n'django_ses.migrations']\n\npackage_data = \\\n{'': ['*'], 'django_ses': ['templates\/django_ses\/*']}\n\ninstall_requires = \\\n['boto3>=1.0.0', 'django>=2.2', 'pytz>=2016.10']\n\nextras_require = \\\n{':python_version < \"3.8\"': ['importlib-metadata>=1.0,<2.0'],\n'bounce': ['cryptography>=36.0.2,<37.0.0', 'requests>=2.27.1,<3.0.0'],\n'events': ['cryptography>=36.0.2,<37.0.0', 'requests>=2.27.1,<3.0.0']}\n\nsetup_kwargs = {\n'name': 'django-ses',\n'version': '3.1.0',\n'description': \"A Django email backend for Amazon's Simple Email Service\",\n'long_description': '==========\\nDjango-SES\\n==========\\n:Info: A Django email backend for Amazon\\'s Simple Email Service\\n:Author: Harry Marr (http:\/\/github.com\/hmarr, http:\/\/twitter.com\/harrymarr)\\n:Collaborators: Paul Craciunoiu (http:\/\/github.com\/pcraciunoiu, http:\/\/twitter.com\/embrangler)\\n\\n|pypi| |build| |python| |django|\\n\\nA bird\\'s eye view\\n=================\\nDjango-SES is a drop-in mail backend for Django_. Instead of sending emails\\nthrough a traditional SMTP mail server, Django-SES routes email through\\nAmazon Web Services\\' excellent Simple Email Service (SES_).\\n\\n\\nPlease Contribute!\\n==================\\nThis project is maintained, but not actively used by the maintainer. Interested\\nin helping maintain this project? Reach out via GitHub Issues if you\\'re actively\\nusing `django-ses` and would be interested in contributing to it.\\n\\n\\nChangelog\\n=========\\n\\nFor details about each release, see the GitHub releases page: https:\/\/github.com\/django-ses\/django-ses\/releases or CHANGES.md.\\n\\n\\nUsing Django directly\\n=====================\\n\\nAmazon SES allows you to also setup usernames and passwords. If you do configure\\nthings that way, you do not need this package. The Django default email backend\\nis capable of authenticating with Amazon SES and correctly sending email.\\n\\nUsing django-ses gives you additional features like deliverability reports that\\ncan be hard and\/or cumbersome to obtain when using the SMTP interface.\\n\\n\\nWhy SES instead of SMTP?\\n========================\\nConfiguring, maintaining, and dealing with some complicated edge cases can be\\ntime-consuming. Sending emails with Django-SES might be attractive to you if:\\n\\n* You don\\'t want to maintain mail servers.\\n* You are already deployed on EC2 (In-bound traffic to SES is free from EC2\\n instances).\\n* You need to send a high volume of email.\\n* You don\\'t want to have to worry about PTR records, Reverse DNS, email\\n whitelist\/blacklist services.\\n* You want to improve delivery rate and inbox cosmetics by DKIM signing\\n your messages using SES\\'s Easy DKIM feature.\\n* Django-SES is a truely drop-in replacement for the default mail backend.\\n Your code should require no changes.\\n\\nGetting going\\n=============\\nAssuming you\\'ve got Django_ installed, you\\'ll just need to install django-ses::\\n\\n pip install django-ses\\n\\n\\nTo receive bounces or webhook events install the events \"extra\"::\\n\\n pip install django-ses[events]\\n\\nAdd the following to your settings.py::\\n\\n EMAIL_BACKEND = \\'django_ses.SESBackend\\'\\n\\n # These are optional -- if they\\'re set as environment variables they won\\'t\\n # need to be set here as well\\n AWS_ACCESS_KEY_ID = \\'YOUR-ACCESS-KEY-ID\\'\\n AWS_SECRET_ACCESS_KEY = \\'YOUR-SECRET-ACCESS-KEY\\'\\n\\n # Additionally, if you are not using the default AWS region of us-east-1,\\n # you need to specify a region, like so:\\n AWS_SES_REGION_NAME = \\'us-west-2\\'\\n AWS_SES_REGION_ENDPOINT = \\'email.us-west-2.amazonaws.com\\'\\n\\nAlternatively, instead of `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`, you\\ncan include the following two settings values. This is useful in situations\\nwhere you would like to use a separate access key to send emails via SES than\\nyou would to upload files via S3::\\n\\n AWS_SES_ACCESS_KEY_ID = \\'YOUR-ACCESS-KEY-ID\\'\\n AWS_SES_SECRET_ACCESS_KEY = \\'YOUR-SECRET-ACCESS-KEY\\'\\n\\nNow, when you use ``django.core.mail.send_mail``, Simple Email Service will\\nsend the messages by default.\\n\\nSince SES imposes a rate limit and will reject emails after the limit has been\\nreached, django-ses will attempt to conform to the rate limit by querying the\\nAPI for your current limit and then sending no more than that number of\\nmessages in a two-second period (which is half of the rate limit, just to\\nbe sure to stay clear of the limit). This is controlled by the following setting:\\n\\n AWS_SES_AUTO_THROTTLE = 0.5 # (default; safety factor applied to rate limit)\\n\\nTo turn off automatic throttling, set this to None.\\n\\nCheck out the ``example`` directory for more information.\\n\\nMonitoring email status using Amazon Simple Notification Service (Amazon SNS)\\n=============================================================================\\nTo set this up, install `django-ses` with the `events` extra::\\n\\n pip install django-ses[events]\\n\\nThen add a event url handler in your `urls.py`::\\n\\n from django_ses.views import SESEventWebhookView\\n from django.views.decorators.csrf import csrf_exempt\\n urlpatterns = [ ...\\n url(r\\'^ses\/event-webhook\/$\\', SESEventWebhookView.as_view(), name=\\'handle-event-webhook\\'),\\n ...\\n ]\\n\\nSESEventWebhookView handles bounce, complaint, send, delivery, open and click events.\\nIt is also capable of auto confirming subscriptions, it handles `SubscriptionConfirmation` notification.\\n\\nOn AWS\\n-------\\n1. Add an SNS topic.\\n\\n2. In SES setup an SNS destination in \"Configuration Sets\". Use this\\nconfiguration set by setting ``AWS_SES_CONFIGURATION_SET``. Set the topic\\nto what you created in 1.\\n\\n3. Add an https subscriber to the topic. (eg. https:\/\/www.yourdomain.com\/ses\/event-webhook\/)\\nDo not check \"Enable raw message delivery\".\\n\\n\\nBounces\\n-------\\nUsing signal \\'bounce_received\\' for manager bounce email. For example::\\n\\n from django_ses.signals import bounce_received\\n from django.dispatch import receiver\\n\\n\\n @receiver(bounce_received)\\n def bounce_handler(sender, mail_obj, bounce_obj, raw_message, *args, **kwargs):\\n # you can then use the message ID and\/or recipient_list(email address) to identify any problematic email messages that you have sent\\n message_id = mail_obj[\\'messageId\\']\\n recipient_list = mail_obj[\\'destination\\']\\n ...\\n print(\"This is bounce email object\")\\n print(mail_obj)\\n\\nComplaint\\n---------\\nUsing signal \\'complaint_received\\' for manager complaint email. For example::\\n\\n from django_ses.signals import complaint_received\\n from django.dispatch import receiver\\n\\n\\n @receiver(complaint_received)\\n def complaint_handler(sender, mail_obj, complaint_obj, raw_message, *args, **kwargs):\\n ...\\n\\nSend\\n----\\nUsing signal \\'send_received\\' for manager send email. For example::\\n\\n from django_ses.signals import send_received\\n from django.dispatch import receiver\\n\\n\\n @receiver(send_received)\\n def send_handler(sender, mail_obj, raw_message, *args, **kwargs):\\n ...\\n\\nDelivery\\n--------\\nUsing signal \\'delivery_received\\' for manager delivery email. For example::\\n\\n from django_ses.signals import delivery_received\\n from django.dispatch import receiver\\n\\n\\n @receiver(delivery_received)\\n def delivery_handler(sender, mail_obj, delivery_obj, raw_message, *args, **kwargs):\\n ...\\n\\nOpen\\n----\\nUsing signal \\'open_received\\' for manager open email. For example::\\n\\n from django_ses.signals import open_received\\n from django.dispatch import receiver\\n\\n\\n @receiver(open_received)\\n def open_handler(sender, mail_obj, raw_message, *args, **kwargs):\\n ...\\n\\nClick\\n-----\\nUsing signal \\'click_received\\' for manager send email. For example::\\n\\n from django_ses.signals import click_received\\n from django.dispatch import receiver\\n\\n\\n @receiver(click_received)\\n def click_handler(sender, mail_obj, raw_message, *args, **kwargs):\\n ...\\n \\nTesting Signals\\n===============\\n\\nIf you would like to test your signals, you can optionally disable `AWS_SES_VERIFY_EVENT_SIGNATURES` in settings. Examples for the JSON object AWS SNS sends can be found here: https:\/\/docs.aws.amazon.com\/sns\/latest\/dg\/sns-message-and-json-formats.html#http-subscription-confirmation-json\\n\\nSES Event Monitoring with Configuration Sets\\n============================================\\n\\nYou can track your SES email sending at a granular level using `SES Event Publishing`_.\\nTo do this, you set up an SES Configuration Set and add event\\nhandlers to it to send your events on to a destination within AWS (SNS,\\nCloudwatch or Kinesis Firehose) for further processing and analysis.\\n\\nTo ensure that emails you send via `django-ses` will be tagged with your\\nSES Configuration Set, set the `AWS_SES_CONFIGURATION_SET` setting in your\\nsettings.py to the name of the configuration set::\\n\\n AWS_SES_CONFIGURATION_SET = \\'my-configuration-set-name\\'\\n\\nThis will add the `X-SES-CONFIGURATION-SET` header to all your outgoing\\ne-mails.\\n\\nIf you want to set the SES Configuration Set on a per message basis, set\\n`AWS_SES_CONFIGURATION_SET` to a callable. The callable should conform to the\\nfollowing prototype::\\n\\n def ses_configuration_set(message, dkim_domain=None, dkim_key=None,\\n dkim_selector=None, dkim_headers=()):\\n configuration_set = \\'my-default-set\\'\\n # use message and dkim_* to modify configuration_set\\n return configuration_set\\n\\n AWS_SES_CONFIGURATION_SET = ses_configuration_set\\n\\nwhere\\n\\n* `message` is a `django.core.mail.EmailMessage` object (or subclass)\\n* `dkim_domain` is a string containing the DKIM domain for this message\\n* `dkim_key` is a string containing the DKIM private key for this message\\n* `dkim_selector` is a string containing the DKIM selector (see DKIM, below for\\n explanation)\\n* `dkim_headers` is a list of strings containing the names of the headers to\\n be DKIM signed (see DKIM, below for explanation)\\n\\nDKIM\\n====\\n\\nUsing DomainKeys_ is entirely optional, however it is recommended by Amazon for\\nauthenticating your email address and improving delivery success rate. See\\nhttp:\/\/docs.amazonwebservices.com\/ses\/latest\/DeveloperGuide\/DKIM.html.\\nBesides authentication, you might also want to consider using DKIM in order to\\nremove the `via email-bounces.amazonses.com` message shown to gmail users -\\nsee http:\/\/support.google.com\/mail\/bin\/answer.py?hl=en&answer=1311182.\\n\\nCurrently there are two methods to use DKIM with Django-SES: traditional Manual\\nSigning and the more recently introduced Amazon Easy DKIM feature.\\n\\nEasy DKIM\\n---------\\nEasy DKIM is a feature of Amazon SES that automatically signs every message\\nthat you send from a verified email address or domain with a DKIM signature.\\n\\nYou can enable Easy DKIM in the AWS Management Console for SES. There you can\\nalso add the required domain verification and DKIM records to Route 53 (or\\ncopy them to your alternate DNS).\\n\\nOnce enabled and verified Easy DKIM needs no additional dependencies or\\nDKIM specific settings to work with Django-SES.\\n\\nFor more information and a setup guide see:\\nhttp:\/\/docs.aws.amazon.com\/ses\/latest\/DeveloperGuide\/easy-dkim.html\\n\\nManual DKIM Signing\\n-------------------\\nTo enable Manual DKIM Signing you should install the pydkim_ package and specify values\\nfor the ``DKIM_PRIVATE_KEY`` and ``DKIM_DOMAIN`` settings. You can generate a\\nprivate key with a command such as ``openssl genrsa 512`` and get the public key\\nportion with ``openssl rsa -pubout <private.key``. The public key should be\\npublished to ``ses._domainkey.example.com`` if your domain is example.com. You\\ncan use a different name instead of ``ses`` by changing the ``DKIM_SELECTOR``\\nsetting.\\n\\nThe SES relay will modify email headers such as `Date` and `Message-Id` so by\\ndefault only the `From`, `To`, `Cc`, `Subject` headers are signed, not the full\\nset of headers. This is sufficient for most DKIM validators but can be overridden\\nwith the ``DKIM_HEADERS`` setting.\\n\\n\\nExample settings.py::\\n\\n DKIM_DOMAIN = \\'example.com\\'\\n DKIM_PRIVATE_KEY = \\'\\'\\'\\n -----BEGIN RSA PRIVATE KEY-----\\n xxxxxxxxxxx\\n -----END RSA PRIVATE KEY-----\\n \\'\\'\\'\\n\\nExample DNS record published to Route53 with boto:\\n\\n route53 add_record ZONEID ses._domainkey.example.com. TXT \\'\"v=DKIM1; p=xxx\"\\' 86400\\n\\n\\n.. _DomainKeys: http:\/\/dkim.org\/\\n\\n\\nIdentity Owners\\n===============\\n\\nWith Identity owners, you can use validated SES-domains across multiple accounts:\\nhttps:\/\/docs.aws.amazon.com\/ses\/latest\/DeveloperGuide\/sending-authorization-delegate-sender-tasks-email.html\\n\\nThis is useful if you got multiple environments in different accounts and still want to send mails via the same domain.\\n\\nYou can configure the following environment variables to use them as described in boto3-docs_::\\n\\n AWS_SES_SOURCE_ARN=arn:aws:ses:eu-central-1:012345678910:identity\/example.com\\n AWS_SES_FROM_ARN=arn:aws:ses:eu-central-1:012345678910:identity\/example.com\\n AWS_SES_RETURN_PATH_ARN=arn:aws:ses:eu-central-1:012345678910:identity\/example.com\\n\\n.. _boto3-docs: https:\/\/boto3.amazonaws.com\/v1\/documentation\/api\/latest\/reference\/services\/ses.html#SES.Client.send_raw_email\\n\\n\\nSES Sending Stats\\n=================\\n\\nDjango SES comes with two ways of viewing sending statistics.\\n\\nThe first one is a simple read-only report on your 24 hour sending quota,\\nverified email addresses and bi-weekly sending statistics.\\n\\nTo generate and view SES sending statistics reports, include, update\\n``INSTALLED_APPS``::\\n\\n INSTALLED_APPS = (\\n # ...\\n \\'django.contrib.admin\\',\\n \\'django_ses\\',\\n # ...\\n )\\n\\n... and ``urls.py``::\\n\\n urlpatterns += (url(r\\'^admin\/django-ses\/\\', include(\\'django_ses.urls\\')),)\\n\\n*Optional enhancements to stats:*\\n\\nOverride the dashboard view\\n---------------------------\\nYou can override the Dashboard view, for example, to add more context data::\\n\\n class CustomSESDashboardView(DashboardView):\\n def get_context_data(self, **kwargs):\\n context = super().get_context_data(**kwargs)\\n context.update(**admin.site.each_context(self.request))\\n return context\\n\\nThen update your urls::\\n\\n urlpatterns += path(\\'admin\/django-ses\/\\', CustomSESDashboardView.as_view(), name=\\'django_ses_stats\\'),\\n\\n\\nLink the dashboard from the admin\\n---------------------------------\\nYou can use adminplus for this (https:\/\/github.com\/jsocol\/django-adminplus)::\\n\\n from django_ses.views import DashboardView\\n admin.site.register_view(\\'django-ses\\', DashboardView.as_view(), \\'Django SES Stats\\')\\n\\n\\n\\nStore daily stats\\n-----------------\\nIf you need to keep send statistics around for longer than two weeks,\\ndjango-ses also comes with a model that lets you store these. To use this\\nfeature you\\'ll need to run::\\n\\n python manage.py migrate\\n\\nTo collect the statistics, run the ``get_ses_statistics`` management command\\n(refer to next section for details). After running this command the statistics\\nwill be viewable via ``\/admin\/django_ses\/``.\\n\\nDjango SES Management Commands\\n==============================\\n\\nTo use these you must include ``django_ses`` in your INSTALLED_APPS.\\n\\nManaging Verified Email Addresses\\n---------------------------------\\n\\nManage verified email addresses through the management command.\\n\\n python manage.py ses_email_address --list\\n\\nAdd emails to the verified email list through:\\n\\n python manage.py ses_email_address --add john.doe@example.com\\n\\nRemove emails from the verified email list through:\\n\\n python manage.py ses_email_address --delete john.doe@example.com\\n\\nYou can toggle the console output through setting the verbosity level.\\n\\n python manage.py ses_email_address --list --verbosity 0\\n\\n\\nCollecting Sending Statistics\\n-----------------------------\\n\\nTo collect and store SES sending statistics in the database, run:\\n\\n python manage.py get_ses_statistics\\n\\nSending statistics are aggregated daily (UTC time). Stats for the latest day\\n(when you run the command) may be inaccurate if run before end of day (UTC).\\nIf you want to keep your statistics up to date, setup ``cron`` to run this\\ncommand a short time after midnight (UTC) daily.\\n\\n\\nDjango Builtin-in Error Emails\\n==============================\\n\\nIf you\\'d like Django\\'s `Builtin Email Error Reporting`_ to function properly\\n(actually send working emails), you\\'ll have to explicitly set the\\n``SERVER_EMAIL`` setting to one of your SES-verified addresses. Otherwise, your\\nerror emails will all fail and you\\'ll be blissfully unaware of a problem.\\n\\n*Note:* You will need to sign up for SES_ and verify any emails you\\'re going\\nto use in the `from_email` argument to `django.core.mail.send_email()`. Boto_\\nhas a `verify_email_address()` method: https:\/\/github.com\/boto\/boto\/blob\/master\/boto\/ses\/connection.py\\n\\n.. _Builtin Email Error Reporting: https:\/\/docs.djangoproject.com\/en\/dev\/howto\/error-reporting\/\\n.. _Django: http:\/\/djangoproject.com\\n.. _Boto: http:\/\/boto.cloudhackers.com\/\\n.. _SES: http:\/\/aws.amazon.com\/ses\/\\n.. _SES Event Publishing: https:\/\/docs.aws.amazon.com\/ses\/latest\/DeveloperGuide\/monitor-using-event-publishing.html\\n\\n\\nRequirements\\n============\\ndjango-ses requires supported version of Django or Python.\\n\\n\\nFull List of Settings\\n=====================\\n\\n``AWS_ACCESS_KEY_ID``, ``AWS_SECRET_ACCESS_KEY``\\n *Required.* Your API keys for Amazon SES.\\n\\n``AWS_SES_ACCESS_KEY_ID``, ``AWS_SES_SECRET_ACCESS_KEY``\\n *Required.* Alternative API keys for Amazon SES. This is useful in situations\\n where you would like to use separate access keys for different AWS services.\\n\\n``AWS_SES_SESSION_TOKEN``, ``AWS_SES_SECRET_ACCESS_KEY``\\n Optional. Use `AWS_SES_SESSION_TOKEN` to provide session token\\n when temporary credentials are used. Details:\\n https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/id_credentials_temp.html\\n https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/id_credentials_temp_use-resources.html\\n\\n``AWS_SES_REGION_NAME``, ``AWS_SES_REGION_ENDPOINT``\\n Optionally specify what region your SES service is using. Note that this is\\n required if your SES service is not using us-east-1, as omitting these settings\\n implies this region. Details:\\n http:\/\/readthedocs.org\/docs\/boto\/en\/latest\/ref\/ses.html#boto.ses.regions\\n http:\/\/docs.aws.amazon.com\/general\/latest\/gr\/rande.html\\n\\n``AWS_SES_RETURN_PATH``\\n Instruct Amazon SES to forward bounced emails and complaints to this email.\\n For more information please refer to http:\/\/aws.amazon.com\/ses\/faqs\/#38\\n\\n``AWS_SES_CONFIGURATION_SET``\\n Optional. Use this to mark your e-mails as from being from a particular SES\\n Configuration Set. Set this to a string if you want all messages to have the\\n same configuration set. Set this to a callable if you want to set\\n configuration set on a per message basis.\\n\\n``TIME_ZONE``\\n Default Django setting, optionally set this. Details:\\n https:\/\/docs.djangoproject.com\/en\/dev\/ref\/settings\/#time-zone\\n\\n``DKIM_DOMAIN``, ``DKIM_PRIVATE_KEY``\\n Optional. If these settings are defined and the pydkim_ module is installed\\n then email messages will be signed with the specified key. You will also\\n need to publish your public key on DNS; the selector is set to ``ses`` by\\n default. See http:\/\/dkim.org\/ for further detail.\\n\\n``AWS_SES_SOURCE_ARN``\\n Instruct Amazon SES to use a domain from another account.\\n For more information please refer to https:\/\/docs.aws.amazon.com\/ses\/latest\/DeveloperGuide\/sending-authorization-delegate-sender-tasks-email.html\\n\\n``AWS_SES_FROM_ARN``\\n Instruct Amazon SES to use a domain from another account.\\n For more information please refer to https:\/\/docs.aws.amazon.com\/ses\/latest\/DeveloperGuide\/sending-authorization-delegate-sender-tasks-email.html\\n\\n``AWS_SES_RETURN_PATH_ARN``\\n Instruct Amazon SES to use a domain from another account.\\n For more information please refer to https:\/\/docs.aws.amazon.com\/ses\/latest\/DeveloperGuide\/sending-authorization-delegate-sender-tasks-email.html\\n\\n``AWS_SES_VERIFY_EVENT_SIGNATURES``, ``AWS_SES_VERIFY_BOUNCE_SIGNATURES``\\n Optional. Default is True. Verify the contents of the message by matching the signature\\n you recreated from the message contents with the signature that Amazon SNS sent with the message.\\n See https:\/\/docs.aws.amazon.com\/sns\/latest\/dg\/sns-verify-signature-of-message.html for further detail.\\n\\n``EVENT_CERT_DOMAINS``, ``BOUNCE_CERT_DOMAINS``\\n Optional. Default is \\'amazonaws.com\\' and \\'amazon.com\\'.\\n\\n.. _pydkim: http:\/\/hewgill.com\/pydkim\/\\n\\nProxy\\n=====\\n\\nIf you are using a proxy, please enable it via the env variables.\\n\\nIf your proxy server does not have a password try the following:\\n\\n.. code-block:: python\\n\\n import os\\n os.environ[\"HTTP_PROXY\"] = \"http:\/\/proxy.com:port\"\\n os.environ[\"HTTPS_PROXY\"] = \"https:\/\/proxy.com:port\"\\n\\nif your proxy server has a password try the following:\\n\\n.. code-block:: python\\n\\n import os\\n os.environ[\"HTTP_PROXY\"] = \"http:\/\/user:password@proxy.com:port\"\\n os.environ[\"HTTPS_PROXY\"] = \"https:\/\/user:password@proxy.com:port\"\\n\\nSource: https:\/\/stackoverflow.com\/a\/33501223\/1331671\\n\\nContributing\\n============\\nIf you\\'d like to fix a bug, add a feature, etc\\n\\n#. Start by opening an issue.\\n Be explicit so that project collaborators can understand and reproduce the\\n issue, or decide whether the feature falls within the project\\'s goals.\\n Code examples can be useful, too.\\n\\n#. File a pull request.\\n You may write a prototype or suggested fix.\\n\\n#. Check your code for errors, complaints.\\n Use `check.py <https:\/\/github.com\/jbalogh\/check>`_\\n\\n#. Write and run tests.\\n Write your own test showing the issue has been resolved, or the feature\\n works as intended.\\n\\nRunning Tests\\n=============\\nTo run the tests::\\n\\n python runtests.py\\n\\nIf you want to debug the tests, just add this file as a python script to your IDE run configuration.\\n\\nCreating a Release\\n==================\\n\\nTo create a release:\\n\\n* Run ``poetry version {patch|minor|major}`` as explained in `the docs <https:\/\/python-poetry.org\/docs\/cli\/#version>`_. This will update the version in pyproject.toml.\\n* Commit that change and use git to tag that commit with a version that matches the pattern ``v*.*.*``.\\n* Push the tag and the commit (note some IDEs don\\'t push tags by default).\\n\\n\\n.. |pypi| image:: https:\/\/badge.fury.io\/py\/django-ses.svg\\n :target: http:\/\/badge.fury.io\/py\/django-ses\\n.. |build| image:: https:\/\/github.com\/django-ses\/django-ses\/actions\/workflows\/ci.yml\/badge.svg\\n :target: https:\/\/github.com\/django-ses\/django-ses\/actions\/workflows\/ci.yml\\n.. |python| image:: https:\/\/img.shields.io\/badge\/python-3.7+-blue.svg\\n :target: https:\/\/pypi.org\/project\/django-ses\/\\n.. |django| image:: https:\/\/img.shields.io\/badge\/django-2.2%7C%203.2+-blue.svg\\n :target: https:\/\/www.djangoproject.com\/\\n',\n'author': 'Harry Marr',\n'author_email': 'harry@hmarr.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/django-ses\/django-ses',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'extras_require': extras_require,\n'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "django-silk-5.0.1",
        "file_list": ".coveragerc release.yml test.yml .gitignore .pre-commit-config.yaml CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt conf.py configuration.rst 1.png 2.png 3.png 4.png 5.png 6.png 7.png 8.png 9.png meta.png index.rst Makefile profiling.rst quickstart.rst troubleshooting.rst gulpfile.js LICENSE MANIFEST.in package.json PKG-INFO admin.py 0001_initial.py 0002_alter_blind_photo.py __init__.py models.py index.html login.html tests.py urls.py views.py __init__.py manage.py settings.py urls.py __init__.py dynamic.py __init__.py factories.py test_app_config.py test_code.py test_code_gen_django.py test_collector.py test_command_garbage_collect.py test_compat.py test_config_auth.py test_config_long_urls.py test_config_max_body_size.py test_config_meta.py test_db.py test_dynamic_profiling.py test_encoding.py test_end_points.py test_execute_sql.py test_filters.py assertion.py mock_suite.py __init__.py test_models.py test_profile_dot.py test_profile_parser.py test_response_assumptions.py test_sensitive_data_in_request.py test_silky_middleware.py test_silky_profiler.py test_view_clear_db.py test_view_profiling.py test_view_requests.py test_view_sql_detail.py test_view_summary_view.py urlconf_without_silk.py util.py __init__.py wsgi.py pyproject.toml pytest.ini README.md requirements.txt 1.png 10.png 2.png 3.png 4.png 5.png 6.png 7.png 8.png 9.png meta.png cell.scss colors.scss fonts.scss heading.scss numeric.scss row.scss summary.scss setup.cfg setup.py apps.py auth.py curl.py django_test_client.py __init__.py collector.py config.py errors.py silk_clear_request_log.py silk_request_garbage_collect.py __init__.py __init__.py middleware.py 0001_initial.py 0002_auto_update_uuid4_id_field.py 0003_request_prof_file.py 0004_request_prof_file_storage.py 0005_increase_request_prof_file_length.py 0006_fix_request_prof_file_blank.py 0007_sqlquery_identifier.py 0008_sqlquery_analysis.py __init__.py models.py model_factory.py dynamic.py profiler.py __init__.py request_filters.py singleton.py sql.py cell.css colors.css fonts.css heading.css numeric.css row.css summary.css favicon-16x16.png favicon-32x32.png filter.png filter2.png FantasqueSansMono-Bold.woff FantasqueSansMono-BoldItalic.woff FantasqueSansMono-RegItalic.woff FantasqueSansMono-Regular.woff FiraSans-Bold.woff FiraSans-BoldItalic.woff FiraSans-Light.woff FiraSans-LightItalic.woff FiraSans-Medium.woff FiraSans-MediumItalic.woff FiraSans-Regular.woff FiraSans-RegularItalic.woff glyphicons-halflings-regular.eot glyphicons-halflings-regular.svg glyphicons-halflings-regular.ttf glyphicons-halflings-regular.woff glyphicons-halflings-regular.woff2 cell.js filters.js bootstrap-datetimepicker.min.css bootstrap-datetimepicker.min.js bootstrap-theme.min.css bootstrap.min.css bootstrap.min.js foundation.css highlight.pack.js animated-overlay.gif ui-bg_diagonals-thick_18_b81900_40x40.png ui-bg_diagonals-thick_20_666666_40x40.png ui-bg_flat_10_000000_40x100.png ui-bg_glass_100_f6f6f6_1x400.png ui-bg_glass_100_fdf5ce_1x400.png ui-bg_glass_65_ffffff_1x400.png ui-bg_gloss-wave_35_f6a828_500x100.png ui-bg_highlight-soft_100_eeeeee_1x100.png ui-bg_highlight-soft_75_ffe45c_1x100.png ui-icons_222222_256x240.png ui-icons_228ef1_256x240.png ui-icons_444444_256x240.png ui-icons_555555_256x240.png ui-icons_777620_256x240.png ui-icons_777777_256x240.png ui-icons_cc0000_256x240.png ui-icons_ef8c08_256x240.png ui-icons_ffd27a_256x240.png ui-icons_ffffff_256x240.png jquery-3.6.0.min.js jquery-ui-1.13.1.min.css jquery-ui-1.13.1.min.js jquery.datetimepicker.css jquery.datetimepicker.js sortable.js svg-pan-zoom.min.js viz-lite.js storage.py base.html detail_base.html root_base.html clear_db.html cprofile.html code.html heading.html profile_menu.html profile_summary.html request_menu.html request_summary.html request_summary_row.html root_menu.html profile_detail.html profiling.html raw.html request.html requests.html sql.html sql_detail.html summary.html silk_filters.py silk_inclusion.py silk_nav.py __init__.py urls.py data_deletion.py pagination.py profile_parser.py __init__.py clear_db.py code.py cprofile.py profile_detail.py profile_dot.py profile_download.py profiling.py raw.py requests.py request_detail.py sql.py sql_detail.py summary.py __init__.py __init__.py silk.sublime-project tox.ini Vagrantfile web.psd",
        "setup.py": "import os\n\nfrom setuptools import setup\n\n# allow setup.py to be run from any path\nos.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))\n\nsetup(\nname='django-silk',\nuse_scm_version=True,\npackages=['silk'],\ninclude_package_data=True,\nlicense='MIT License',\ndescription='Silky smooth profiling for the Django Framework',\nlong_description=open('README.md').read(),\nlong_description_content_type='text\/markdown',\nurl='https:\/\/github.com\/jazzband\/django-silk',\nauthor='Michael Ford',\nauthor_email='mtford@gmail.com',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Framework :: Django',\n'Framework :: Django :: 3.2',\n'Framework :: Django :: 4.0',\n'Intended Audience :: Developers',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Topic :: Internet :: WWW\/HTTP',\n'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n],\ninstall_requires=[\n'Django>=3.2',\n'python-dateutil',\n'requests',\n'sqlparse',\n'Jinja2',\n'autopep8',\n'pytz',\n'gprof2dot>=2017.09.19',\n],\npython_requires='>=3.7',\nsetup_requires=['setuptools_scm'],\n)\n"
    },
    {
        "package_name": "django-stubs-ext-0.5.0",
        "file_list": "aliases.py annotations.py patch.py py.typed types.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from distutils.core import setup\n\nfrom setuptools import find_packages\n\nwith open(\"README.md\") as f:\nreadme = f.read()\n\ndependencies = [\n\"django\",\n\"typing-extensions\",\n]\n\nsetup(\nname=\"django-stubs-ext\",\nversion=\"0.5.0\",\ndescription=\"Monkey-patching and extensions for django-stubs\",\nlong_description=readme,\nlong_description_content_type=\"text\/markdown\",\nlicense=\"MIT\",\nurl=\"https:\/\/github.com\/typeddjango\/django-stubs\",\nauthor=\"Simula Proxy\",\nauthor_email=\"3nki.nam.shub@gmail.com\",\nmaintainer=\"Nikita Sobolev\",\nmaintainer_email=\"mail@sobolevn.me\",\npy_modules=[],\npython_requires=\">=3.6\",\ninstall_requires=dependencies,\npackages=[\"django_stubs_ext\", *find_packages(exclude=[\"scripts\"])],\npackage_data={\"django_stubs_ext\": [\"py.typed\"]},\nclassifiers=[\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Typing :: Typed\",\n\"Framework :: Django\",\n\"Framework :: Django :: 2.2\",\n\"Framework :: Django :: 3.0\",\n\"Framework :: Django :: 3.1\",\n\"Framework :: Django :: 3.2\",\n\"Framework :: Django :: 4.0\",\n],\nproject_urls={\n\"Release notes\": \"https:\/\/github.com\/typeddjango\/django-stubs\/releases\",\n},\n)\n"
    },
    {
        "package_name": "django-timezone-field-5.0",
        "file_list": "LICENSE.txt PKG-INFO pyproject.toml README.md setup.py choices.py compat.py fields.py forms.py models.py rest_framework.py utils.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['timezone_field']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['pytz']\n\nextras_require = \\\n{':python_version < \"3.9\"': ['backports.zoneinfo>=0.2.1,<0.3.0']}\n\nsetup_kwargs = {\n'name': 'django-timezone-field',\n'version': '5.0',\n'description': 'A Django app providing DB, form, and REST framework fields for zoneinfo and pytz timezone objects.',\n'long_description': '# django-timezone-field\\n\\n[![CI](https:\/\/github.com\/mfogel\/django-timezone-field\/actions\/workflows\/ci.yml\/badge.svg?branch=main)](https:\/\/github.com\/mfogel\/django-timezone-field\/actions)\\n[![codecov](https:\/\/codecov.io\/gh\/mfogel\/django-timezone-field\/branch\/main\/graph\/badge.svg?token=Rwekzmim3l)](https:\/\/codecov.io\/gh\/mfogel\/django-timezone-field)\\n[![pypi downloads](https:\/\/img.shields.io\/pypi\/dm\/django-timezone-field.svg)](https:\/\/pypi.python.org\/pypi\/django-timezone-field\/)\\n[![pypi python support](https:\/\/img.shields.io\/pypi\/pyversions\/django-timezone-field.svg)](https:\/\/pypi.python.org\/pypi\/django-timezone-field\/)\\n[![pypi django support](https:\/\/img.shields.io\/pypi\/djversions\/django-timezone-field.svg)](https:\/\/pypi.python.org\/pypi\/django-timezone-field\/)\\n\\nA Django app providing DB, form, and REST framework fields for\\n[`zoneinfo`](https:\/\/docs.python.org\/3\/library\/zoneinfo.html) and [`pytz`](http:\/\/pypi.python.org\/pypi\/pytz\/) timezone\\nobjects.\\n\\n## The transition from `pytz` to `zoneinfo`\\n\\nLike Django, this app supports both `pytz` and `zoneinfo` objects while the community transitions away from `pytz` to\\n`zoneinfo`. All exposed fields and functions that return a timezone object accept an optional boolean kwarg `use_pytz`.\\n\\nIf not explicitly specified, the default value used for `use_pytz` matches Django\\'s behavior:\\n\\n- Django <= 3.X: `use_pytz` defaults to `True`\\n- Django == 4.X: `use_pytz` defaults to the value of\\n [`django.conf.settings.USE_DEPRECATED_PYTZ`](https:\/\/docs.djangoproject.com\/en\/4.0\/ref\/settings\/#use-deprecated-pytz),\\n which itself defaults to `False`\\n- Django >= 5.X: django plans to\\n [drop support for `pytz` altogether](https:\/\/docs.djangoproject.com\/en\/4.0\/releases\/4.0\/#zoneinfo-default-timezone-implementation),\\n and this app will likely do the same.\\n\\nWhen switching between `pytz` and `zoneinfo`, in general a\\n[data migration](https:\/\/docs.djangoproject.com\/en\/4.0\/topics\/migrations\/#data-migrations) is _not_ needed, as both\\nlibraries recognize the same set of strings as valid timezones. Exceptions to that include if your local system has an\\nunusual set of time zones installed, or if you are using the `Factory` timezone which `zoneinfo` recognizes but `pytz`\\ndoes not.\\n\\n## Examples\\n\\n### Database Field\\n\\n```python\\nimport zoneinfo\\nimport pytz\\nfrom django.db import models\\nfrom timezone_field import TimeZoneField\\n\\nclass MyModel(models.Model):\\n tz1 = TimeZoneField(default=\"Asia\/Dubai\") # defaults supported, in ModelForm renders like \"Asia\/Dubai\"\\n tz2 = TimeZoneField(choices_display=\"WITH_GMT_OFFSET\") # in ModelForm renders like \"GMT+04:00 Asia\/Dubai\"\\n tz3 = TimeZoneField(use_pytz=True) # returns pytz timezone objects\\n tz4 = TimeZoneField(use_pytz=False) # returns zoneinfo objects\\n\\nmy_model = MyModel(\\n tz2=\"America\/Vancouver\", # assignment of a string\\n tz3=pytz.timezone(\"America\/Vancouver\"), # assignment of a pytz timezone\\n tz4=zoneinfo.ZoneInfo(\"America\/Vancouver\"), # assignment of a zoneinfo\\n)\\nmy_model.full_clean() # validates against pytz.common_timezones by default\\nmy_model.save() # values stored in DB as strings\\nmy_model.tz3 # value returned as pytz timezone: <DstTzInfo \\'America\/Vancouver\\' LMT-1 day, 15:48:00 STD>\\nmy_model.tz4 # value returned as zoneinfo: zoneinfo.ZoneInfo(key=\\'America\/Vancouver\\')\\n```\\n\\n### Form Field\\n\\n```python\\nfrom django import forms\\nfrom timezone_field import TimeZoneFormField\\n\\nclass MyForm(forms.Form):\\n tz1 = TimeZoneFormField() # renders like \"Asia\/Dubai\"\\n tz2 = TimeZoneFormField(choices_display=\"WITH_GMT_OFFSET\") # renders like \"GMT+04:00 Asia\/Dubai\"\\n tz3 = TimeZoneFormField(use_pytz=True) # returns pytz timezone objects\\n tz4 = TimeZoneFormField(use_pytz=False) # returns zoneinfo objects\\n\\nmy_form = MyForm({\"tz3\": \"Europe\/Berlin\", \"tz4\": \"Europe\/Berlin\"})\\nmy_form.full_clean() # validates against pytz.common_timezones by default\\nmy_form.cleaned_data[\"tz3\"] # value returned as pytz timezone: <DstTzInfo \\'Europe\/Berlin\\' LMT+0:53:00 STD>\\nmy_form.cleaned_data[\"tz4\"] # value returned as zoneinfo: zoneinfo.ZoneInfo(key=\\'Europe\/Berlin\\')\\n```\\n\\n### REST Framework Serializer Field\\n\\n```python\\nfrom rest_framework import serializers\\nfrom timezone_field.rest_framework import TimeZoneSerializerField\\n\\nclass MySerializer(serializers.Serializer):\\n tz1 = TimeZoneSerializerField(use_pytz=True)\\n tz2 = TimeZoneSerializerField(use_pytz=False)\\n\\nmy_serializer = MySerializer(data={\\n \"tz1\": \"America\/Argentina\/Buenos_Aires\",\\n \"tz2\": \"America\/Argentina\/Buenos_Aires\",\\n})\\nmy_serializer.is_valid()\\nmy_serializer.validated_data[\"tz1\"] # <DstTzInfo \\'America\/Argentina\/Buenos_Aires\\' LMT-1 day, 20:06:00 STD>\\nmy_serializer.validated_data[\"tz2\"] # zoneinfo.ZoneInfo(key=\\'America\/Argentina\/Buenos_Aires\\')\\n```\\n\\n## Installation\\n\\nReleases are hosted on [`pypi`](https:\/\/pypi.org\/project\/django-timezone-field\/) and can be installed using various\\npython packaging tools.\\n\\n```bash\\n# with poetry\\npoetry add django-timezone-field\\n\\n# with pip\\npip install django-timezone-field\\n```\\n\\n## Running the tests\\n\\nFrom the repository root, with [`poetry`](https:\/\/python-poetry.org\/):\\n\\n```bash\\npoetry install\\npoetry run pytest\\n```\\n\\n## Changelog\\n\\n#### 5.0 (2022-02-08)\\n\\n- Add support for `zoneinfo` objects ([#79](https:\/\/github.com\/mfogel\/django-timezone-field\/issues\/79))\\n- Add support for django 4.0\\n- Remove `display_GMT_offset` kwarg (use `choices_display` instead)\\n- Drop support for django 3.0, 3.1\\n- Drop support for python 3.5, 3.6\\n\\n#### 4.2.3 (2022-01-13)\\n\\n- Fix sdist installs ([#78](https:\/\/github.com\/mfogel\/django-timezone-field\/issues\/78))\\n- Officially support python 3.10\\n\\n#### 4.2.1 (2021-07-07)\\n\\n- Reinstate `TimeZoneField.default_choices` ([#76](https:\/\/github.com\/mfogel\/django-timezone-field\/issues\/76))\\n\\n#### 4.2 (2021-07-07)\\n\\n- Officially support django 3.2, python 3.9\\n- Fix bug with field deconstruction ([#74](https:\/\/github.com\/mfogel\/django-timezone-field\/issues\/74))\\n- Housekeeping: use poetry, github actions, pytest\\n\\n#### 4.1.2 (2021-03-17)\\n\\n- Avoid `NonExistentTimeError` during DST transition ([#70](https:\/\/github.com\/mfogel\/django-timezone-field\/issues\/70))\\n\\n#### 4.1.1 (2020-11-28)\\n\\n- Don\\'t import `rest_framework` from package root ([#67](https:\/\/github.com\/mfogel\/django-timezone-field\/issues\/67))\\n\\n#### 4.1 (2020-11-28)\\n\\n- Add Django REST Framework serializer field\\n- Add new `choices_display` kwarg with supported values `WITH_GMT_OFFSET` and `STANDARD`\\n- Deprecate `display_GMT_offset` kwarg\\n\\n#### 4.0 (2019-12-03)\\n\\n- Add support for django 3.0, python 3.8\\n- Drop support for django 1.11, 2.0, 2.1, python 2.7, 3.4\\n\\n#### 3.1 (2019-10-02)\\n\\n- Officially support django 2.2 (already worked)\\n- Add option to display TZ offsets in form field ([#46](https:\/\/github.com\/mfogel\/django-timezone-field\/issues\/46))\\n\\n#### 3.0 (2018-09-15)\\n\\n- Support django 1.11, 2.0, 2.1\\n- Add support for python 3.7\\n- Change default human-readable timezone names to exclude underscores\\n ([#32](https:\/\/github.com\/mfogel\/django-timezone-field\/issues\/32) &\\n [#37](https:\/\/github.com\/mfogel\/django-timezone-field\/issues\/37))\\n\\n#### 2.1 (2018-03-01)\\n\\n- Add support for django 1.10, 1.11\\n- Add support for python 3.6\\n- Add wheel support\\n- Support bytes in DB fields ([#38](https:\/\/github.com\/mfogel\/django-timezone-field\/issues\/38) &\\n [#39](https:\/\/github.com\/mfogel\/django-timezone-field\/issues\/39))\\n\\n#### 2.0 (2016-01-31)\\n\\n- Drop support for django 1.7, add support for django 1.9\\n- Drop support for python 3.2, 3.3, add support for python 3.5\\n- Remove tests from source distribution\\n\\n#### 1.3 (2015-10-12)\\n\\n- Drop support for django 1.6, add support for django 1.8\\n- Various [bug fixes](https:\/\/github.com\/mfogel\/django-timezone-field\/issues?q=milestone%3A1.3)\\n\\n#### 1.2 (2015-02-05)\\n\\n- For form field, changed default list of accepted timezones from `pytz.all_timezones` to `pytz.common_timezones`, to\\n match DB field behavior.\\n\\n#### 1.1 (2014-10-05)\\n\\n- Django 1.7 compatibility\\n- Added support for formatting `choices` kwarg as `[[<str>, <str>], ...]`, in addition to previous format of\\n `[[<pytz.timezone>, <str>], ...]`.\\n- Changed default list of accepted timezones from `pytz.all_timezones` to `pytz.common_timezones`. If you have timezones\\n in your DB that are in `pytz.all_timezones` but not in `pytz.common_timezones`, this is a backward-incompatible\\n change. Old behavior can be restored by specifying `choices=[(tz, tz) for tz in pytz.all_timezones]` in your model\\n definition.\\n\\n#### 1.0 (2013-08-04)\\n\\n- Initial release as `timezone_field`.\\n\\n## Credits\\n\\nOriginally adapted from [Brian Rosner\\'s django-timezones](https:\/\/github.com\/brosner\/django-timezones).\\n\\nMade possible thanks to the work of the\\n[contributors](https:\/\/github.com\/mfogel\/django-timezone-field\/graphs\/contributors).\\n',\n'author': 'Mike Fogel',\n'author_email': 'mike@fogel.ca',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/mfogel\/django-timezone-field\/',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'extras_require': extras_require,\n'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "django-waffle-2.6.0",
        "file_list": "dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py 0001_initial.py 0002_auto_20220717_1934.py __init__.py admin.py apps.py decorators.py defaults.py jinja.py django.mo django.mo django.mo waffle_delete.py waffle_flag.py waffle_sample.py waffle_switch.py __init__.py __init__.py managers.py middleware.py 0001_initial.py 0002_auto_20161201_0958.py 0003_update_strings_for_i18n.py 0004_update_everyone_nullbooleanfield.py __init__.py mixins.py models.py signals.py waffle.js waffle_tags.py __init__.py base.py test_admin.py test_decorators.py test_management.py test_middleware.py test_mixin.py test_models.py test_templates.py test_testutils.py test_utils.py test_views.py test_waffle.py __init__.py testutils.py urls.py utils.py views.py __init__.py",
        "setup.py": "from setuptools import setup, find_packages\n\nsetup(\nname='django-waffle',\nversion='2.6.0',\ndescription='A feature flipper for Django.',\nlong_description=open('README.rst').read(),\nauthor='James Socol',\nauthor_email='me@jamessocol.com',\nurl='http:\/\/github.com\/django-waffle\/django-waffle',\nlicense='BSD',\npackages=find_packages(exclude=['test_app', 'test_settings']),\ninclude_package_data=True,\npackage_data={'': ['README.rst']},\nzip_safe=False,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Framework :: Django',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Framework :: Django',\n'Framework :: Django :: 2.2',\n'Framework :: Django :: 3.0',\n'Framework :: Django :: 3.1',\n'Framework :: Django :: 3.2',\n'Framework :: Django :: 4.0',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3 :: Only',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\n)\n"
    },
    {
        "package_name": "djangocms-text-ckeditor-5.1.1",
        "file_list": "apps.py attribute_parsers.py cms_plugins.py cms_toolbars.py compat.py fields.py forms.py html.py django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po 0001_initial.py 0002_remove_related_name_for_cmsplu 0002_remove_related_name_for_cmsplugin_ptr.py 0003_set_related_name_for_cmsplugin 0003_set_related_name_for_cmsplugin_ptr.py 0004_auto_20160706_1339.py __init__.py models.py picture_save.py sanitizer.py settings.py jquery.js build- build-config.js CHANGE CHANGES.md ckedit ckeditor.js config config.js conten contents.css a af.js ar.js az.js b bg.js bn.js bs.js c ca.js cs.js cy.js d da.js de-ch.js de.js e el.js en-au.js en-ca.js en-gb.js en.js eo.js es.js et.js eu.js f fa.js fi.js fo.js fr-ca.js fr.js g gl.js gu.js h he.js hi.js hr.js hu.js i id.js is.js it.js j ja.js k ka.js km.js ko.js ku.js l lt.js lv.js m mk.js mn.js ms.js n nb.js nl.js no.js o oc.js p pl.js pt-br.js pt.js r ro.js ru.js s si.js sk.js sl.js sq.js sr-latn.js sr.js sv.js t th.js tr.js tt.js u ug.js uk.js v vi.js z zh-cn.js zh.js LICENS LICENSE.md a11yhelp.js af.js ar.js az.js bg.js ca.js cs.js cy.js da.js de-ch.js de.js el.js en-au.js en-gb.js en.js eo.js es-mx.js es.js et.js eu.js fa.js fi.js fo.js fr-ca.js fr.js gl.js gu.js he.js hi.js hr.js hu.js id.js it.js ja.js km.js ko.js ku.js lt.js lv.js mk.js mn.js nb.js nl.js no.js oc.js pl.js pt-br.js pt.js ro.js ru.js si.js sk.js sl.js sq.js sr-latn.js sr.js sv.js th.js tr.js tt.js ug.js uk.js vi.js zh-cn.js zh.js _translationstatus.txt about.js logo_ckeditor.png logo_ckeditor.png paste.js colordialog.css colordialog.js cursor-disabled.svg cursor.svg copyformatting.css dialogDefinition.js dialog.css div.js find.js button.js checkbox.js form.js hiddenfield.js radio.js select.js textarea.js textfield.js hiddenfield.gif icons.png icons_hidpi.png iframe.js placeholder.png image.js noimage.png anchor.js link.js anchor.png anchor.png liststyle.js icon-rtl.png icon.png icon-rtl.png icon.png pagebreak.gif default.js common.js image.js pagebreak.gif preview.html screen.css CHANGELOG.md dialog.css options.js toolbar.css LICENSE.md README.md scayt.css block_address.png block_blockquote.png block_div.png block_h1.png block_h2.png block_h3.png block_h4.png block_h5.png block_h6.png block_p.png block_pre.png smiley.js angel_smile.gif angel_smile.png angry_smile.gif angry_smile.png broken_heart.gif broken_heart.png confused_smile.gif confused_smile.png cry_smile.gif cry_smile.png devil_smile.gif devil_smile.png embaressed_smile.gif embarrassed_smile.gif embarrassed_smile.png envelope.gif envelope.png heart.gif heart.png kiss.gif kiss.png lightbulb.gif lightbulb.png omg_smile.gif omg_smile.png regular_smile.gif regular_smile.png sad_smile.gif sad_smile.png shades_smile.gif shades_smile.png teeth_smile.gif teeth_smile.png thumbs_down.gif thumbs_down.png thumbs_up.gif thumbs_up.png tongue_smile.gif tongue_smile.png tounge_smile.gif whatchutalkingabout_smile.gif whatchutalkingabout_smile.png wink_smile.gif wink_smile.png af.js ar.js az.js bg.js ca.js cs.js cy.js da.js de-ch.js de.js el.js en-au.js en-ca.js en-gb.js en.js eo.js es-mx.js es.js et.js eu.js fa.js fi.js fr-ca.js fr.js gl.js he.js hr.js hu.js id.js it.js ja.js km.js ko.js ku.js lt.js lv.js nb.js nl.js no.js oc.js pl.js pt-br.js pt.js ro.js ru.js si.js sk.js sl.js sq.js sr-latn.js sr.js sv.js th.js tr.js tt.js ug.js uk.js vi.js zh-cn.js zh.js _translationstatus.txt specialchar.js table.js tableCell.js templates.css templates.js templatedefinition.js default.js template1.gif template2.gif template3.gif handle.png ciframe.html tmpFrameset.html wsc.css wsc.js wsc_ie.js LICENSE.md README.md wsc.css README README.md samples.css github-top.png header-bg.png header-separator.png logo.png logo.svg navigation-tip.png index.html sample.js sf.js ajax.html api.html appendto.html logo.png outputxhtml.css posteddata.php sample.jpg languages.js datafiltering.html my_dialog.js dialog.html divreplace.html enterkey.html outputhtml.html index.html inlineall.html inlinebycode.html inlinetextarea.html jquery.html magicline.html readonly.html replacebyclass.html replacebycode.html sample.css sample.js sample_posteddata.php tabindex.html toolbar.html uicolor.html uilanguages.html fullpage.html xhtmlstyle.html fontello.css config.json fontello.eot fontello.svg fontello.ttf fontello.woff LICENSE.txt index.html abstracttoolbarmodifier.js fulltoolbareditor.js toolbarmodifier.js toolbartextmodifier.js codemirror.css codemirror.js javascript.js LICENSE neo.css show-hint.css show-hint.js dialog.css dialog_ie.css dialog_ie8.css dialog_iequirks.css editor.css editor_gecko.css editor_ie.css editor_ie8.css editor_iequirks.css icons.png icons_hidpi.png arrow.png close.png close.png lock-open.png lock.png refresh.png lock-open.png lock.png refresh.png spinner.gif readme.md styles.js promise.js .editorconfig plugin.js cmsplugins.svg plugin.js plugin.js plugin.js cms.ckeditor.css cms.inline-ckeditor.css cms.ckeditor.js bundle-5f73f48756.cms.ckeditor.min.js post.js pre.js inline.html render_plugin_preview.html text.html text_plugin_change_form.html ckeditor.html icon-button.html djangocms_text_ckeditor_tags.py __init__.py utils.py widgets.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO icons16.png icons16.svg icons32.png icons32.svg locations.json dialog.css dialog_ie.css dialog_ie8.css dialog_iequirks.css editor.css editor_gecko.css editor_ie.css editor_ie8.css editor_iequirks.css arrow.png close.png close.png lock-open.png lock.png refresh.png lock-open.png lock.png refresh.png readme.md skin.js patch_moono_lisa.py readme.md README.rst setup.cfg setup.py base.py .eslintrc casperjs.conf.js externalMissing.js loadFailures.js missingPages.js pageErrors.js suiteFailures.js setup.js smoke.js base.txt dj22_cms37.txt dj22_cms38.txt dj31_cms38.txt dj32_cms310.txt dj32_cms39.txt settings.py admin.py cms_plugins.py forms.py models.py base.html dummy_child_plugin.html dummy_parent_plugin.html page.html plugin_with_sekizai.html __init__.py test_field.py test_html.py test_migrations.py test_plugin.py test_sanitizer.py test_widget.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\nfrom pathlib import Path\n\nfrom setuptools import find_packages, setup\n\nfrom djangocms_text_ckeditor import __version__\n\n\nREQUIREMENTS = [\n'django-cms>=3.6',\n'html5lib>=1',\n'Pillow',\n]\n\n\nCLASSIFIERS = [\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Framework :: Django',\n'Framework :: Django :: 2.2',\n'Framework :: Django :: 3.1',\n'Framework :: Django :: 3.2',\n'Framework :: Django CMS',\n'Framework :: Django CMS :: 3.6',\n'Framework :: Django CMS :: 3.7',\n'Framework :: Django CMS :: 3.8',\n'Framework :: Django CMS :: 3.9',\n'Framework :: Django CMS :: 3.10',\n'Topic :: Internet :: WWW\/HTTP',\n'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n'Topic :: Software Development',\n'Topic :: Software Development :: Libraries',\n]\n\nthis_directory = Path(__file__).parent\nlong_description = (this_directory \/ 'README.rst').read_text()\n\nsetup(\nname='djangocms-text-ckeditor',\nversion=__version__,\nauthor='Divio AG',\nauthor_email='info@divio.ch',\nmaintainer='Django CMS Association and contributors',\nmaintainer_email='info@django-cms.org',\nurl='https:\/\/github.com\/django-cms\/djangocms-text-ckeditor',\nlicense='BSD-3-Clause',\ndescription='Text Plugin for django CMS with CKEditor support',\nlong_description=long_description,\nlong_description_content_type='text\/x-rst',\npackages=find_packages(exclude=['tests']),\ninclude_package_data=True,\nzip_safe=False,\ninstall_requires=REQUIREMENTS,\nclassifiers=CLASSIFIERS,\npython_requires='>=3.7',\ntest_suite='tests.settings.test',\n)\n"
    },
    {
        "package_name": "djangorestframework-api-key-2.2.0",
        "file_list": "CHANGELOG.md LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt admin.py apps.py crypto.py 0001_initial.py 0002_auto_20190529_2243.py 0003_auto_20190623_1952.py 0004_prefix_hashed_key.py 0005_auto_20220110_1102.py __init__.py models.py permissions.py py.typed __init__.py __version__.py",
        "setup.py": "import re\nfrom pathlib import Path\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version(package: str) -> str:\nversion = (Path(\"src\") \/ package \/ \"__version__.py\").read_text()\nmatch = re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", version)\nassert match is not None\nreturn match.group(1)\n\n\ndef get_long_description() -> str:\nwith open(\"README.md\", encoding=\"utf8\") as readme:\nwith open(\"CHANGELOG.md\", encoding=\"utf8\") as changelog:\nreturn readme.read() + \"\\n\\n\" + changelog.read()\n\n\nsetup(\nname=\"djangorestframework-api-key\",\nversion=get_version(\"rest_framework_api_key\"),\ndescription=\"API key permissions for the Django REST Framework\",\nlong_description=get_long_description(),\nlong_description_content_type=\"text\/markdown\",\nurl=\"http:\/\/github.com\/florimondmanca\/djangorestframework-api-key\",\nproject_urls={\n\"Documentation\": \"https:\/\/florimondmanca.github.io\/djangorestframework-api-key\/\"\n},\nauthor=\"Florimond Manca\",\nauthor_email=\"florimond.manca@gmail.com\",\npackages=find_packages(\"src\"),\npackage_dir={\"\": \"src\"},\ninclude_package_data=True,\nzip_safe=False,\ninstall_requires=[],\npython_requires=\">=3.6\",\nlicense=\"MIT\",\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Operating System :: OS Independent\",\n\"Intended Audience :: Developers\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Environment :: Web Environment\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Framework :: Django\",\n\"Framework :: Django :: 2.2\",\n\"Framework :: Django :: 3.2\",\n],\n)\n"
    },
    {
        "package_name": "djangorestframework-queryfields-1.0.0",
        "file_list": "dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt mixins.py __init__.py PKG-INFO README.rst setup.cfg setup.py data.py models.py serializers.py urls.py views.py __init__.py",
        "setup.py": "from setuptools import setup, find_packages\n\n\nclassifiers = [\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 3',\n'Topic :: Software Development :: Libraries',\n'Intended Audience :: Developers',\n'Framework :: Django',\n]\n\nwith open(\"README.rst\") as f:\nlong_description = f.read()\n\nsetup(\nname='djangorestframework-queryfields',\nversion='1.0.0',\ndescription='Serialize a partial subset of fields in the API',\nlong_description=long_description,\npackages=find_packages(exclude=['tests']),\nauthor='Wim Glenn',\nauthor_email='hey@wimglenn.com',\nurl='https:\/\/github.com\/wimglenn\/djangorestframework-queryfields',\nclassifiers=classifiers,\nextras_require={\n'dev': ['setuptools', 'wheel', 'pytest-django', 'djangorestframework', 'django', 'mock_django']\n},\n)\n"
    },
    {
        "package_name": "dnspython-2.2.1",
        "file_list": "asyncbackend.py asyncbackend.pyi asyncquery.py asyncquery.pyi asyncresolver.py asyncresolver.pyi dnssec.py dnssec.pyi e164.py e164.pyi edns.py entropy.py entropy.pyi enum.py exception.py exception.pyi flags.py grange.py immutable.py inet.py inet.pyi ipv4.py ipv6.py message.py message.pyi name.py name.pyi namedict.py node.py node.pyi opcode.py py.typed query.py query.pyi rcode.py rdata.py rdata.pyi rdataclass.py rdataset.py rdataset.pyi rdatatype.py AFSDB.py AMTRELAY.py AVC.py CAA.py CDNSKEY.py CDS.py CERT.py CNAME.py CSYNC.py DLV.py DNAME.py DNSKEY.py DS.py EUI48.py EUI64.py GPOS.py HINFO.py HIP.py ISDN.py L32.py L64.py LOC.py LP.py MX.py NID.py NINFO.py NS.py NSEC.py NSEC3.py NSEC3PARAM.py OPENPGPKEY.py OPT.py PTR.py RP.py RRSIG.py RT.py SMIMEA.py SOA.py SPF.py SSHFP.py TKEY.py TLSA.py TSIG.py TXT.py URI.py X25.py ZONEMD.py __init__.py A.py __init__.py dnskeybase.py dnskeybase.pyi dsbase.py euibase.py A.py AAAA.py APL.py DHCID.py HTTPS.py IPSECKEY.py KX.py NAPTR.py NSAP.py NSAP_PTR.py PX.py SRV.py SVCB.py WKS.py __init__.py mxbase.py nsbase.py svcbbase.py tlsabase.py txtbase.py txtbase.pyi util.py __init__.py renderer.py resolver.py resolver.pyi reversename.py reversename.pyi rrset.py rrset.pyi serial.py set.py tokenizer.py transaction.py tsig.py tsigkeyring.py tsigkeyring.pyi ttl.py update.py update.pyi version.py versioned.py win32util.py wire.py xfr.py zone.py zone.pyi zonefile.py _asyncbackend.py _asyncio_backend.py _curio_backend.py _immutable_attr.py _immutable_ctx.py _trio_backend.py __init__.py async_dns.py ddns.py doh-json.py doh.py e164.py ecs.py edns.py mx.py name.py query_specific.py receive_notify.py reverse.py reverse_name.py xfr.py zonediff.py LICENSE PKG-INFO pyproject.toml README.md setup.cfg setup.py example example1.good example2.good example3.good example4.good md_module.py mx-2-0.pickle nanonameserver.py query stxt_module.py svcb_test_vectors.generic svcb_test_vectors.text test_address.py test_async.py test_bugs.py test_constants.py test_dnssec.py test_doh.py test_edns.py test_entropy.py test_exceptions.py test_flags.py test_generate.py test_grange.py test_immutable.py test_message.py test_name.py test_namedict.py test_nsec3.py test_nsec3_hash.py test_ntoaaton.py test_processing_order.py test_query.py test_rdata.py test_rdataset.py test_rdtypeandclass.py test_rdtypeanydnskey.py test_rdtypeanyeui.py test_rdtypeanyloc.py test_rdtypeanytkey.py test_renderer.py test_resolution.py test_resolver.py test_resolver_override.py test_rrset.py test_rrset_reader.py test_serial.py test_set.py test_svcb.py test_tokenizer.py test_transaction.py test_tsig.py test_tsigkeyring.py test_ttl.py test_update.py test_wire.py test_xfr.py test_zone.py test_zonedigest.py ttxt_module.py utest.py util.py __init__.py constants-tool generate-mx-pickle.py generate-rdatatype-doc.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['dns', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.CH', 'dns.rdtypes.IN']\n\npackage_data = \\\n{'': ['*']}\n\nextras_require = \\\n{'curio': ['curio>=1.2,<2.0', 'sniffio>=1.1,<2.0'],\n'dnssec': ['cryptography>=2.6,<37.0'],\n'doh': ['requests-toolbelt>=0.9.1,<0.10.0', 'requests>=2.23.0,<3.0.0'],\n'doh:python_full_version >= \"3.6.2\"': ['httpx>=0.21.1', 'h2>=4.1.0'],\n'idna': ['idna>=2.1,<4.0'],\n'trio': ['trio>=0.14,<0.20'],\n'wmi': ['wmi>=1.5.1,<2.0.0']}\n\nsetup_kwargs = {\n'name': 'dnspython',\n'version': '2.2.1',\n'description': 'DNS toolkit',\n'long_description': \"# dnspython\\n\\n[![Build Status](https:\/\/github.com\/rthalley\/dnspython\/actions\/workflows\/python-package.yml\/badge.svg)](https:\/\/github.com\/rthalley\/dnspython\/actions\/)\\n[![Documentation Status](https:\/\/readthedocs.org\/projects\/dnspython\/badge\/?version=latest)](https:\/\/dnspython.readthedocs.io\/en\/latest\/?badge=latest)\\n[![PyPI version](https:\/\/badge.fury.io\/py\/dnspython.svg)](https:\/\/badge.fury.io\/py\/dnspython)\\n[![License: ISC](https:\/\/img.shields.io\/badge\/License-ISC-brightgreen.svg)](https:\/\/opensource.org\/licenses\/ISC)\\n\\n## INTRODUCTION\\n\\ndnspython is a DNS toolkit for Python. It supports almost all record types. It\\ncan be used for queries, zone transfers, and dynamic updates. It supports TSIG\\nauthenticated messages and EDNS0.\\n\\ndnspython provides both high and low level access to DNS. The high level classes\\nperform queries for data of a given name, type, and class, and return an answer\\nset. The low level classes allow direct manipulation of DNS zones, messages,\\nnames, and records.\\n\\nTo see a few of the ways dnspython can be used, look in the `examples\/`\\ndirectory.\\n\\ndnspython is a utility to work with DNS, `\/etc\/hosts` is thus not used. For\\nsimple forward DNS lookups, it's better to use `socket.getaddrinfo()` or\\n`socket.gethostbyname()`.\\n\\ndnspython originated at Nominum where it was developed\\nto facilitate the testing of DNS software.\\n\\n## ABOUT THIS RELEASE\\n\\nThis is dnspython 2.2.1\\nPlease read\\n[What's New](https:\/\/dnspython.readthedocs.io\/en\/stable\/whatsnew.html) for\\ninformation about the changes in this release.\\n\\n## INSTALLATION\\n\\n* Many distributions have dnspython packaged for you, so you should\\n check there first.\\n* If you have pip installed, you can do `pip install dnspython`\\n* If not just download the source file and unzip it, then run\\n `sudo python setup.py install`\\n* To install the latest from the master branch, run `pip install git+https:\/\/github.com\/rthalley\/dnspython.git`\\n\\nDnspython's default installation does not depend on any modules other than\\nthose in the Python standard library. To use some features, additional modules\\nmust be installed. For convenience, pip options are defined for the requirements.\\n\\nIf you want to use DNS-over-HTTPS, run\\n`pip install dnspython[doh]`.\\n\\nIf you want to use DNSSEC functionality, run\\n`pip install dnspython[dnssec]`.\\n\\nIf you want to use internationalized domain names (IDNA)\\nfunctionality, you must run\\n`pip install dnspython[idna]`\\n\\nIf you want to use the Trio asynchronous I\/O package, run\\n`pip install dnspython[trio]`.\\n\\nIf you want to use the Curio asynchronous I\/O package, run\\n`pip install dnspython[curio]`.\\n\\nIf you want to use WMI on Windows to determine the active DNS settings\\ninstead of the default registry scanning method, run\\n`pip install dnspython[wmi]`.\\n\\nNote that you can install any combination of the above, e.g.:\\n`pip install dnspython[doh,dnssec,idna]`\\n\\n### Notices\\n\\nPython 2.x support ended with the release of 1.16.0. Dnspython 2.0.0 through\\n2.2.x support Python 3.6 and later. As of dnspython 2.3.0, the minimum\\nsupported Python version will be 3.7. We plan to align future support with the\\nlifetime of the Python 3 versions.\\n\\nDocumentation has moved to\\n[dnspython.readthedocs.io](https:\/\/dnspython.readthedocs.io).\\n\\nThe ChangeLog has been discontinued. Please see the github project page\\nand git history for detailed change information.\\n\",\n'author': 'Bob Halley',\n'author_email': 'halley@dnspython.org',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/www.dnspython.org',\n'packages': packages,\n'package_data': package_data,\n'extras_require': extras_require,\n'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "dockerpty-0.4.1",
        "file_list": "io.py pty.py tty.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# dockerpty.\n#\n# Copyright 2014 Chris Corbyn <chris@w3style.co.uk>\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import setup\nimport os\n\n\ndef fopen(filename):\nreturn open(os.path.join(os.path.dirname(__file__), filename))\n\n\ndef read(filename):\nreturn fopen(filename).read()\n\nsetup(\nname='dockerpty',\nversion='0.4.1',\ndescription='Python library to use the pseudo-tty of a docker container',\nlong_description=read('README.md'),\nurl='https:\/\/github.com\/d11wtq\/dockerpty',\nauthor='Chris Corbyn',\nauthor_email='chris@w3style.co.uk',\ninstall_requires=['six >= 1.3.0'],\nlicense='Apache 2.0',\nkeywords='docker, tty, pty, terminal',\npackages=['dockerpty'],\nclassifiers=[\n'Development Status :: 4 - Beta',\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'Topic :: Terminals',\n'Topic :: Terminals :: Terminal Emulators\/X Terminals',\n'Topic :: Software Development :: Libraries',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\n)\n"
    },
    {
        "package_name": "types-docutils-0.19.0",
        "file_list": "CHANGELOG.md core.pyi examples.pyi frontend.pyi io.pyi __init__.pyi METADATA.toml nodes.pyi null.pyi recommonmark_wrapper.pyi admonitions.pyi body.pyi html.pyi images.pyi misc.pyi parts.pyi references.pyi tables.pyi __init__.pyi roles.pyi states.pyi __init__.pyi __init__.pyi doctree.pyi pep.pyi standalone.pyi __init__.pyi statemachine.pyi __init__.pyi __init__.pyi docutils_xml.pyi html4css1.pyi html5_polyglot.pyi latex2e.pyi manpage.pyi null.pyi odf_odt.pyi pep_html.pyi pseudoxml.pyi s5_html.pyi xetex.pyi __init__.pyi __init__.pyi MANIFEST.in PKG-INFO setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-docutils\"\ndescription = \"Typing stubs for docutils\"\nlong_description = '''\n## Typing stubs for docutils\n\nThis is a PEP 561 type stub package for the `docutils` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `docutils`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/docutils. All fixes for\ntypes and metadata should be contributed there.\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `ee09a67c5cf61effaae1bdb894571eac4fc9ac6b`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"0.19.0\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/docutils.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=[],\npackages=['docutils-stubs'],\npackage_data={'docutils-stubs': ['__init__.pyi', 'core.pyi', 'examples.pyi', 'frontend.pyi', 'io.pyi', 'languages\/__init__.pyi', 'nodes.pyi', 'parsers\/__init__.pyi', 'parsers\/null.pyi', 'parsers\/recommonmark_wrapper.pyi', 'parsers\/rst\/__init__.pyi', 'parsers\/rst\/directives\/__init__.pyi', 'parsers\/rst\/directives\/admonitions.pyi', 'parsers\/rst\/directives\/body.pyi', 'parsers\/rst\/directives\/html.pyi', 'parsers\/rst\/directives\/images.pyi', 'parsers\/rst\/directives\/misc.pyi', 'parsers\/rst\/directives\/parts.pyi', 'parsers\/rst\/directives\/references.pyi', 'parsers\/rst\/directives\/tables.pyi', 'parsers\/rst\/roles.pyi', 'parsers\/rst\/states.pyi', 'readers\/__init__.pyi', 'readers\/doctree.pyi', 'readers\/pep.pyi', 'readers\/standalone.pyi', 'statemachine.pyi', 'transforms\/__init__.pyi', 'utils\/__init__.pyi', 'writers\/__init__.pyi', 'writers\/docutils_xml.pyi', 'writers\/html4css1.pyi', 'writers\/html5_polyglot.pyi', 'writers\/latex2e.pyi', 'writers\/manpage.pyi', 'writers\/null.pyi', 'writers\/odf_odt.pyi', 'writers\/pep_html.pyi', 'writers\/pseudoxml.pyi', 'writers\/s5_html.pyi', 'writers\/xetex.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "docx2txt-0.8",
        "file_list": "docx2txt docx2txt.py __init__.py LICENSE.txt PKG-INFO setup.cfg setup.py",
        "setup.py": "import glob\nfrom distutils.core import setup\n\n# get all of the scripts\nscripts = glob.glob('bin\/*')\n\nsetup(\nname='docx2txt',\npackages=['docx2txt'],\nversion='0.8',\ndescription='A pure python-based utility to extract text and images '\n'from docx files.',\nauthor='Ankush Shah',\nauthor_email='ankush.shah.nitk@gmail.com',\nurl='https:\/\/github.com\/ankushshah89\/python-docx2txt',\ndownload_url='https:\/\/github.com\/ankushshah89\/python-docx2txt\/tarball\/0.8',\nkeywords=['python', 'docx', 'text', 'images', 'extract'],\nscripts=scripts,\nclassifiers=[],\n)\n"
    },
    {
        "package_name": "dodgy-0.2.1",
        "file_list": "checks.py run.py __init__.py __main__.py __pkginfo__.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# -*- coding: UTF-8 -*-\nfrom distutils.core import setup\n\nfrom setuptools import find_packages\n\nfrom dodgy import __pkginfo__\n\n_packages = find_packages(exclude=[\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"])\n\n_short_description = \"Dodgy: Searches for dodgy looking lines in Python code\"\n\n_install_requires = []\n\n_classifiers = (\n'Development Status :: 7 - Inactive',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: Unix',\n'Topic :: Software Development :: Quality Assurance',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n)\n\nsetup(\nname='dodgy',\nurl='https:\/\/github.com\/landscapeio\/dodgy',\nauthor='landscape.io',\nauthor_email='code@landscape.io',\ndescription=_short_description,\ninstall_requires=_install_requires,\nentry_points={\n'console_scripts': [\n'dodgy = dodgy.run:main',\n],\n},\nversion=__pkginfo__.get_version(),\npackages=_packages,\nlicense='MIT',\nkeywords='check for suspicious code',\nclassifiers=_classifiers\n)\n"
    },
    {
        "package_name": "dohq-teamcity-1.0.8",
        "file_list": "agent_api.py agent_pool_api.py build_api.py build_queue_api.py build_type_api.py change_api.py debug_api.py default_api.py federation_api.py group_api.py investigation_api.py mute_api.py problem_api.py problem_occurrence_api.py project_api.py server_api.py test_api.py test_occurrence_api.py user_api.py vcs_root_api.py vcs_root_instance_api.py __init__.py api_client.py configuration.py api.py base_model.py client.py models.py __init__.py agent.py agents.py agent_pool.py agent_pools.py agent_requirement.py agent_requirements.py artifact_dependencies.py artifact_dependency.py authorized_info.py backup_process.py backup_process_info.py backup_process_manager.py branch.py branches.py branch_version.py build.py builds.py build_cancel_request.py build_change.py build_changes.py build_triggering_options.py build_type.py build_types.py change.py changes.py comment.py compatibilities.py compatibility.py datas.py enabled_info.py entries.py entry.py environment.py exception.py feature.py features.py federation_server.py file.py files.py file_change.py file_changes.py group.py groups.py href.py investigation.py investigations.py issue.py issues.py issues_usages.py issue_usage.py items.py license_key.py license_keys.py licensing_data.py link.py links.py meta_data.py model_property.py mute.py mutes.py new_build_type_description.py new_project_description.py permission.py permission_assignment.py permission_assignments.py plugin.py plugins.py problem.py problems.py problem_occurrence.py problem_occurrences.py problem_scope.py problem_target.py progress_info.py project.py projects.py project_feature.py project_features.py properties.py related.py repository_state.py requirements.py resolution.py revision.py revisions.py role.py roles.py server.py servers.py session.py sessions.py snapshot_dependencies.py snapshot_dependency.py stack_trace_element.py state_field.py step.py steps.py tag.py tags.py test.py tests.py test_occurrence.py test_occurrences.py throwable.py trigger.py triggered_by.py triggers.py type.py user.py users.py vcs_check_status.py vcs_labeling.py vcs_root.py vcs_roots.py vcs_root_entries.py vcs_root_entry.py vcs_root_instance.py vcs_root_instances.py vcs_status.py __init__.py rest.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py test_agent.py test_agents.py test_agent_api.py test_agent_pool.py test_agent_pools.py test_agent_pool_api.py test_agent_requirement.py test_agent_requirements.py test_artifact_dependencies.py test_artifact_dependency.py test_authorized_info.py test_backup_process.py test_backup_process_info.py test_backup_process_manager.py test_branch.py test_branches.py test_branch_version.py test_build.py test_builds.py test_build_api.py test_build_cancel_request.py test_build_change.py test_build_changes.py test_build_queue_api.py test_build_triggering_options.py test_build_type.py test_build_types.py test_build_type_api.py test_change.py test_changes.py test_change_api.py test_comment.py test_compatibilities.py test_compatibility.py test_datas.py test_debug_api.py test_default_api.py test_enabled_info.py test_entries.py test_entry.py test_environment.py test_exception.py test_feature.py test_features.py test_federation_api.py test_federation_server.py test_file.py test_files.py test_file_change.py test_file_changes.py test_group.py test_groups.py test_group_api.py test_href.py test_investigation.py test_investigations.py test_investigation_api.py test_issue.py test_issues.py test_issues_usages.py test_issue_usage.py test_items.py test_license_key.py test_license_keys.py test_licensing_data.py test_link.py test_links.py test_meta_data.py test_model_property.py test_mute.py test_mutes.py test_mute_api.py test_new_build_type_description.py test_new_project_description.py test_permission.py test_permission_assignment.py test_permission_assignments.py test_plugin.py test_plugins.py test_problem.py test_problems.py test_problem_api.py test_problem_occurrence.py test_problem_occurrences.py test_problem_occurrence_api.py test_problem_scope.py test_problem_target.py test_progress_info.py test_project.py test_projects.py test_project_api.py test_project_feature.py test_project_features.py test_properties.py test_related.py test_repository_state.py test_requirements.py test_resolution.py test_revision.py test_revisions.py test_role.py test_roles.py test_server.py test_servers.py test_server_api.py test_session.py test_sessions.py test_snapshot_dependencies.py test_snapshot_dependency.py test_stack_trace_element.py test_state_field.py test_step.py test_steps.py test_tag.py test_tags.py test_test.py test_tests.py test_test_api.py test_test_occurrence.py test_test_occurrences.py test_test_occurrence_api.py test_throwable.py test_trigger.py test_triggered_by.py test_triggers.py test_type.py test_user.py test_users.py test_user_api.py test_vcs_check_status.py test_vcs_labeling.py test_vcs_root.py test_vcs_roots.py test_vcs_root_api.py test_vcs_root_entries.py test_vcs_root_entry.py test_vcs_root_instance.py test_vcs_root_instances.py test_vcs_root_instance_api.py test_vcs_status.py",
        "setup.py": "# coding: utf-8\n\nfrom setuptools import setup # noqa: H301\n\nfrom dohq_teamcity.version import __version__ as VERSION\n\nNAME = \"dohq-teamcity\"\nREQUIRES = [\"urllib3 >= 1.15\", \"six >= 1.10\", \"certifi\", \"python-dateutil\"]\n\nsetup(\nname=NAME,\nversion=VERSION,\ndescription=\"Python JetBrains TeamCity REST API library\",\nlicense='MIT',\nauthor='Alexey Burov',\nauthor_email='allburov@gmail.com',\nurl=\"https:\/\/github.com\/devopshq\/teamcity\",\nkeywords=[\"JetBrains\", \"TeamCity REST API\", \"DevOpsHQ\"],\ninstall_requires=REQUIRES,\npackages=[\n'dohq_teamcity',\n'dohq_teamcity.api',\n'dohq_teamcity.custom',\n'dohq_teamcity.models',\n],\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Programming Language :: Python :: 3.4',\n],\ninclude_package_data=True,\nlong_description=\"\"\"\ndohq_teamcity is a Python package providing access to the JetBrains TeamCity server API.\n\nYou can see detailed user manual here: https:\/\/devopshq.github.io\/teamcity\n\"\"\"\n)\n"
    },
    {
        "package_name": "domain2idna-1.12.0",
        "file_list": ".coveragerc code.rst conf.py index.rst installation.rst issues.rst make.bat Makefile usage.rst cli.py converter.py helpers.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py test_cli.py test_converter.py test_helpers.py test_init.py __init__.py",
        "setup.py": "\"\"\"\ndomain2idna - The tool to convert a domain or a file with a list of domain to\nthe famous IDNA format.\n\nAuthor:\nNissar Chababy, @funilrys, contactTATAfunilrysTODTODcom\n\nContributors:\nLet's contribute to domains2idna!!\n\nRepository:\nhttps:\/\/github.com\/PyFunceble\/domain2idna\n\nLicense:\nMIT License\n\nCopyright (c) 2018-2019 Nissar Chababy\nCopyright (c) 2019 PyFunceble\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"\nfrom re import compile as comp\nfrom unittest import TestLoader\n\nfrom setuptools import setup\n\n\ndef test_suite():\n\"\"\"\nThis method will discover and run all the test\n\"\"\"\n\ntest_loader = TestLoader()\ntests = test_loader.discover(\"tests\", pattern=\"test_*.py\")\nreturn tests\n\n\ndef get_requirements():\n\"\"\"\nThis function extract all requirements from requirements.txt.\n\"\"\"\n\ntry:\nwith open(\"requirements.txt\") as file:\nrequirements = file.read().splitlines()\nexcept FileNotFoundError:\nwith open(\"..\/requirements.txt\") as file:\nrequirements = file.read().splitlines()\n\nreturn requirements\n\n\ndef get_version():\n\"\"\"\nThis function will extract the version from domain2idna\/__init__.py\n\"\"\"\n\nto_match = comp(r'VERSION\\s=\\s\"(.*)\"\\n')\n\ntry:\nextracted = to_match.findall(\nopen(\"domain2idna\/__init__.py\", encoding=\"utf-8\").read()\n)[0]\nexcept FileNotFoundError:\nextracted = to_match.findall(\nopen(\"..\/domain2idna\/__init__.py\", encoding=\"utf-8\").read()\n)[0]\n\nreturn \".\".join([x for x in extracted.split(\".\") if x.isdigit()])\n\n\ndef get_long_description():\n\"\"\"\nThis function return the long description.\n\"\"\"\n\ntry:\nreturn open(\"README.rst\", encoding=\"utf-8\").read()\nexcept FileNotFoundError:\nreturn open(\"..\/README.rst\", encoding=\"utf-8\").read()\n\n\nif __name__ == \"__main__\":\nsetup(\nname=\"domain2idna\",\nversion=get_version(),\npython_requires=\">=3.6.2, <4\",\ndescription=\"The tool to convert a domain or a file with a list of domain to the \"\n\"famous IDNA format.\",\nlong_description=get_long_description(),\ninstall_requires=get_requirements(),\nauthor=\"funilrys\",\nauthor_email=\"contact@funilrys.com\",\nlicense=\"MIT https:\/\/raw.githubusercontent.com\/PyFunceble\/domain2idna\/master\/LICENSE\",\nurl=\"https:\/\/github.com\/PyFunceble\/domain2idna\",\nplatforms=[\"any\"],\npackages=[\"domain2idna\"],\nkeywords=[\"Python\", \"domain\", \"idna\"],\nclassifiers=[\n\"Environment :: Console\",\n\"Topic :: Internet\",\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"License :: OSI Approved :: MIT License\",\n],\ntest_suite=\"setup.test_suite\",\nentry_points={\"console_scripts\": [\"domain2idna=domain2idna.cli:tool\"]},\n)\n"
    },
    {
        "package_name": "drf-nested-routers-0.93.4",
        "file_list": "dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md README.rst requirements.txt relations.py routers.py runcoverage.py runtests.py settings.py urls.py __init__.py serializers.py viewsets.py __init__.py setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nimport re\nimport os\nimport sys\nfrom setuptools import setup\n\n\nname = 'drf-nested-routers'\npackage = 'rest_framework_nested'\ndescription = 'Nested resources for the Django Rest Framework'\nurl = 'https:\/\/github.com\/alanjds\/drf-nested-routers'\nauthor = 'Alan Justino et al.'\nauthor_email = 'alan.justino@yahoo.com.br'\nlicense = 'Apache'\n\n\ndef get_version(package):\n\"\"\"\nReturn package version as listed in `__version__` in `init.py`.\n\"\"\"\ninit_py = open(os.path.join(package, '__init__.py')).read()\nreturn re.search(\"^__version__ = ['\\\"]([^'\\\"]+)['\\\"]\",\ninit_py, re.MULTILINE).group(1)\n\n\ndef get_packages(package):\n\"\"\"\nReturn root package and all sub-packages.\n\"\"\"\nreturn [dirpath\nfor dirpath, dirnames, filenames in os.walk(package)\nif os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n\ndef get_package_data(package):\n\"\"\"\nReturn all files under the root package, that are not in a\npackage themselves.\n\"\"\"\nwalk = [(dirpath.replace(package + os.sep, '', 1), filenames)\nfor dirpath, dirnames, filenames in os.walk(package)\nif not os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\nfilepaths = []\nfor base, filenames in walk:\nfilepaths.extend([os.path.join(base, filename)\nfor filename in filenames])\nreturn {package: filepaths}\n\n\nversion = get_version(package)\n\n\nif sys.argv[-1] == 'publish':\nif os.system(\"pip freeze | grep wheel\"):\nprint(\"wheel not installed.\\nUse `pip install wheel`.\\nPress <Enter> to continue or <Ctrl+C> to abort.\")\ninput()\nos.system(\"python setup.py sdist bdist_wheel\")\nos.system(\"twine upload dist\/*\")\nprint(\"You probably want to also tag the version now:\")\nprint(\" git tag -a v{0} -m 'version {0}'\".format(version))\nprint(\" git push origin v{0}\".format(version))\nsys.exit()\n\n\nsetup(\nname=name,\nversion=version,\nurl=url,\nlicense=license,\ndescription=description,\nlong_description=open('README.md').read(),\nlong_description_content_type='text\/markdown',\nauthor=author,\nauthor_email=author_email,\npackages=get_packages(package),\npackage_data=get_package_data(package),\ninstall_requires=[\n'djangorestframework>=3.6.0',\n'Django>=1.11',\n],\npython_requires=\">=3.5\",\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Framework :: Django',\n'Framework :: Django :: 2.2',\n'Framework :: Django :: 3.0',\n'Framework :: Django :: 3.1',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: OS Independent',\n'Natural Language :: English',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Topic :: Internet :: WWW\/HTTP',\n]\n)\n"
    },
    {
        "package_name": "drf-spectacular-0.23.1",
        "file_list": "CHANGELOG.rst django_auth_adfs.py djstripe.py drf_extra_fields.py drf_rw_serializers.py oscarapi.py rapidoc.html rapidoc.py rollup.py blueprints.rst changelog.rst client_generation.rst conf.py customization.rst drf_spectacular.rst drf_yasg.rst extensions.py faq.rst index.rst license.rst make.bat Makefile readme.rst settings.rst apps.py authentication.py checks.py djangorestframework_camel_case.py django_filters.py django_oauth_toolkit.py rest_auth.py rest_framework_dataclasses.py rest_framework_gis.py rest_framework_jwt.py rest_framework_recursive.py rest_framework_simplejwt.py rest_polymorphic.py __init__.py drainage.py extensions.py generators.py helpers.py hooks.py spectacular.py __init__.py __init__.py openapi.py plumbing.py py.typed renderers.py serializers.py settings.py redoc.html swagger_ui.html swagger_ui.js types.py utils.py openapi3_schema.json __init__.py views.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst base.txt docs.txt optionals.txt packaging.txt testing.txt runtests.py setup.cfg setup.py conftest.py test_djangorestframework_camel_case.py test_djangorestframework_camel_case.yml test_django_filters.py test_django_filters.yml test_drf_jwt.py test_drf_jwt.yml test_drf_nested_routers.py test_drf_nested_routers.yml test_drf_spectacular_sidecar.py test_oauth_toolkit.py test_oauth_toolkit.yml test_rest_auth.py test_rest_auth.yml test_rest_auth_token.yml test_rest_framework_dataclasses.py test_rest_framework_dataclasses.yml test_rest_framework_gis.py test_rest_framework_gis.yml test_rest_framework_recursive.py test_rest_framework_recursive.yml test_rest_polymorphic.py test_rest_polymorphic.yml test_simplejwt.py test_simplejwt.yml __init__.py django.mo django.po models.py settings.py test_basic.py test_basic.yml test_callbacks.py test_callbacks.yml test_callbacks_split_request.yml test_command.py test_custom_settings.py test_examples.py test_examples.yml test_extend_schema.py test_extend_schema.yml test_extend_schema_view.py test_extend_schema_view.yml test_extensions.py test_fields.py test_fields.yml test_fields_response.json test_generator_stats.py test_i18n.py test_i18n.yml test_meta.py test_mock_request.py test_plumbing.py test_polymorphic.py test_polymorphic.yml test_postprocessing.py test_postprocessing.yml test_recursion.py test_recursion.yml test_regressions.py test_specification_extensions.py test_split.py test_split_request_false.yml test_split_request_true.yml test_validators.py test_validators.yml test_versioning.py test_versioning_accept_v1.yml test_versioning_accept_v2.yml test_versioning_v1.yml test_versioning_v2.yml test_view.py test_warnings.py urls.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nimport os\nimport re\nimport shutil\nimport sys\n\nfrom setuptools import setup\n\nname = 'drf-spectacular'\npackage = 'drf_spectacular'\ndescription = 'Sane and flexible OpenAPI 3 schema generation for Django REST framework'\nurl = 'https:\/\/github.com\/tfranzel\/drf-spectacular'\nauthor = 'T. Franzel'\nauthor_email = 'tfranzel@gmail.com'\nlicense = 'BSD'\n\nwith open('README.rst') as readme:\nlong_description = readme.read()\n\nwith open('requirements\/base.txt') as fh:\nrequirements = [r for r in fh.read().split('\\n') if not r.startswith('#')]\n\n\ndef get_version(package):\n\"\"\"\nReturn package version as listed in `__version__` in `init.py`.\n\"\"\"\ninit_py = open(os.path.join(package, '__init__.py')).read()\nreturn re.search(\"^__version__ = ['\\\"]([^'\\\"]+)['\\\"]\",\ninit_py, re.MULTILINE).group(1)\n\n\ndef get_packages(package):\n\"\"\"\nReturn root package and all sub-packages.\n\"\"\"\nreturn [\ndirpath for dirpath, dirnames, filenames in os.walk(package)\nif os.path.exists(os.path.join(dirpath, '__init__.py'))\n]\n\n\nversion = get_version(package)\n\n\nif sys.argv[-1] == 'publish':\nif os.system(\"pip freeze | grep twine\"):\nprint(\"twine not installed.\\nUse `pip install twine`.\\nExiting.\")\nsys.exit(1)\nos.system(\"python setup.py sdist bdist_wheel\")\nif os.system(\"twine check dist\/*\"):\nprint(\"twine check failed. Packages might be outdated.\")\nprint(\"Try using `pip install -U twine wheel`.\\nExiting.\")\nsys.exit(1)\nif os.system(\"twine upload dist\/*\"):\nprint(\"failed to upload package\")\nsys.exit(1)\nif os.environ.get('CI'):\nos.system(\"git config user.name github-actions\")\nos.system(\"git config user.email github-actions@github.com\")\nos.system(f\"git tag -a {version} -m 'version {version}'\")\nif os.system(\"git push --tags\"):\nprint(\"failed pushing release tag\")\nsys.exit(1)\nshutil.rmtree('dist')\nshutil.rmtree('build')\nshutil.rmtree('drf_spectacular.egg-info')\nsys.exit()\n\n\nsetup(\nname=name,\nversion=version,\nurl=url,\nlicense=license,\ndescription=description,\nlong_description=long_description,\nlong_description_content_type='text\/x-rst',\nauthor=author,\nauthor_email=author_email,\npackages=get_packages(package),\ninclude_package_data=True,\npython_requires=\">=3.6\",\ninstall_requires=requirements,\nextras_require={\n\"offline\": [\"drf-spectacular-sidecar\"],\n\"sidecar\": [\"drf-spectacular-sidecar\"],\n},\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Framework :: Django',\n'Framework :: Django :: 2.2',\n'Framework :: Django :: 3.2',\n'Framework :: Django :: 4.0',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Natural Language :: English',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Topic :: Internet :: WWW\/HTTP',\n'Topic :: Documentation',\n'Topic :: Software Development :: Code Generators',\n],\nproject_urls={\n'Source': 'https:\/\/github.com\/tfranzel\/drf-spectacular',\n'Documentation': 'https:\/\/drf-spectacular.readthedocs.io',\n},\n)\n"
    },
    {
        "package_name": "drift-python-1.1.1",
        "file_list": "api.py contacts.py conversations.py errors.py users.py utils.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup\nfrom drift import __version__\n\n\npackages = ['drift']\n\nrequires = [\n'requests>=2.20.0'\n]\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\nlong_description = fh.read()\n\nsetup(name='drift-python',\nversion=__version__,\ndescription=\"A Simple Drift API Wrapper.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nauthor='Drift Engineering',\nauthor_email='driftintegrations@drift.com',\npackages=packages,\nurl='https:\/\/github.com\/Driftt\/drift-python',\ninclude_package_data=True,\nzip_safe=False,\nlicense='MIT',\ninstall_requires=requires\n)\n"
    },
    {
        "package_name": "dropbox-11.33.0",
        "file_list": "account.py async.py async_.py auth.py base.py base_team.py check.py common.py contacts.py dropbox_client.py exceptions.py files.py file_properties.py file_requests.py oauth.py openid.py paper.py secondary_emails.py seen_state.py session.py sharing.py stone_base.py stone_serializers.py stone_validators.py team.py team_common.py team_log.py team_policies.py trusted-certs.crt users.py users_common.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt ez_setup.py LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py requirements.txt",
        "setup.py": "# Don't import unicode_literals because of a bug in py2 setuptools\n# where package_data is expected to be str and not unicode.\nfrom __future__ import absolute_import, division, print_function\n\nimport codecs\nimport os\nimport sys\n\n# Ensure setuptools is available\ntry:\nfrom ez_setup import use_setuptools\nuse_setuptools()\nexcept ImportError:\n# Try to use ez_setup, but if not, continue anyway. The import is known\n# to fail when installing from a tar.gz.\nprint('Could not import ez_setup', file=sys.stderr)\n\nfrom setuptools import setup\n\ndbx_mod_path = os.path.join(os.path.dirname(__file__), 'dropbox\/dropbox_client.py')\nline = '= \"UNKNOWN\"'\nfor line in open(dbx_mod_path):\nif line.startswith('__version__'):\nbreak\nversion = eval(line.split('=', 1)[1].strip()) # pylint: disable=eval-used\n\ninstall_reqs = [\n'requests >= 2.16.2',\n'six >= 1.12.0',\n'stone >= 2.*',\n]\n\nsetup_requires = [\n# Pin pytest-runner to 5.2.0, since 5.3.0 uses `find_namespaces` directive, not supported in\n# Python 2.7\n'pytest-runner == 5.2.0',\n]\n\n# WARNING: This imposes limitations on test\/requirements.txt such that the\n# full Pip syntax is not supported. See also\n# <http:\/\/stackoverflow.com\/questions\/14399534\/>.\ntest_reqs = []\nwith open('test\/requirements.txt') as f:\ntest_reqs += f.read().splitlines()\n\nwith codecs.open('README.rst', encoding='utf-8') as f:\nREADME = f.read()\n\ndist = setup(\nname='dropbox',\nversion=version,\ninstall_requires=install_reqs,\nsetup_requires=setup_requires,\ntests_require=test_reqs,\npackages=['dropbox'],\npackage_data={'dropbox': ['trusted-certs.crt']},\nzip_safe=False,\nauthor_email='dev-platform@dropbox.com',\nauthor='Dropbox',\ndescription='Official Dropbox API Client',\nlicense='MIT License',\nlong_description=README,\nurl='http:\/\/www.dropbox.com\/developers',\nproject_urls={\n'Source': 'https:\/\/github.com\/dropbox\/dropbox-sdk-python',\n},\n# From <https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers>\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\n)\n"
    },
    {
        "package_name": "dulwich-0.20.45",
        "file_list": ".coveragerc .deepsource.toml .flake8 FUNDING.yml pythonpackage.yml pythonwheels.yml .gitignore .mailmap .stestr.conf .testr.conf AUTHORS dul-receive-pack dul-upload-pack dulwich CODE_OF_CONDUCT.md CONTRIBUTING.rst COPYING PREAMBLE.c PREAMBLE.py replace-preamble.sh index.txt conf.py index.txt make.bat Makefile performance.txt protocol.txt .gitignore conclusion.txt encoding.txt file-format.txt index.txt introduction.txt Makefile object-store.txt porcelain.txt remote.txt repo.txt tag.txt archive.py bundle.py cli.py client.py gcs.py __init__.py config.py diffstat.py paramiko_vendor.py README.md release_robot.py requests_vendor.py swift.py test_paramiko_vendor.py test_release_robot.py test_swift.py test_swift_smoke.py __init__.py diff_tree.py errors.py fastexport.py file.py graph.py greenthreads.py hooks.py ignore.py index.py lfs.py line_ending.py log_utils.py lru_cache.py mailmap.py objects.py objectspec.py object_store.py pack.py patch.py porcelain.py protocol.py py.typed reflog.py refs.py repo.py server.py stash.py stdint.h submodule.py server_utils.py test_client.py test_pack.py test_patch.py test_porcelain.py test_repository.py test_server.py test_utils.py test_web.py utils.py __init__.py test_archive.py test_blackbox.py test_bundle.py test_client.py test_config.py test_diff_tree.py test_fastexport.py test_file.py test_grafts.py test_graph.py test_greenthreads.py test_hooks.py test_ignore.py test_index.py test_lfs.py test_line_ending.py test_lru_cache.py test_mailmap.py test_missing_obj_finder.py test_objects.py test_objectspec.py test_object_store.py test_pack.py test_patch.py test_porcelain.py test_protocol.py test_reflog.py test_refs.py test_repository.py test_server.py test_stash.py test_utils.py test_walk.py test_web.py utils.py __init__.py walk.py web.py _diff_tree.c _objects.c _pack.c __init__.py __main__.py dulwich.cfg dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt clone.py config.py diff.py gcs.py latest_change.py memoryrepo.py rename-branch.py Makefile MANIFEST.in NEWS PKG-INFO README.rst README.swift.rst releaser.conf requirements.txt SECURITY.md setup.cfg setup.py status.yaml 11111111111111111111111111111111111111 670c0fb53f9463760b7295fbb814e965fb20c8 4a536f7819d40e6f637f849ee187dd10066349 9de29bb2d1d6434b8b29ae775ad8c2e48c5391 89f20333fbb1d2f3a94da77f4981373d8f4310 ac377bdded4c9aeb8dff595f0faeebcc8498cc dacdc733de308bb77bb76ce0fb0f9b44c9769e index pack-bc63ddad95e7321ee734ea11a7a62d314e0d7481.idx pack-bc63ddad95e7321ee734ea11a7a62d314e0d7481.pack .gitattributes HEAD 237f4dc30d0d462658d6b937b08a0f0b6ef55a 72d929692c41d8554c07f6301757ba18a65d91 f30bbfe26431a69c3820d3a683df54d688f2ec 2e6529203aa6d44b5af6e3292c837ceda003f9 9a07d797595ef11344549b8d08198e48c15364 96d0bb611188cabb256919f36bc30117cca005 0fa2d900a17e99b433217e988c4eb4a2e9a097 931cadc54336e78a1d980420e3268903b57a50 d47d45845a8f6576491e1edb97e3fe6a850e7f packed-refs master mytag config HEAD .gitignore .gitignore .gitignore .gitignore issue88_expect_ack_nak_client.export issue88_expect_ack_nak_other.export issue88_expect_ack_nak_server.export HEAD 69be3e8ee1c0222396a5611407e4769f14e54b 74e9c60a6d149c44c928140f250d81e6381520 670c0fb53f9463760b7295fbb814e965fb20c8 c190eb48fa8bbb50ddc692a17b44cb781af7f6 01d7f6231db6a57f7bbb79ee52e4d462fd44d1 182552c4a85a45ec2a835cadc3451bebdfe870 4a536f7819d40e6f637f849ee187dd10066349 a2766a2879c209ab1176e7e778b81ae422eeaa 07291b64138b875c28e03469025b1ea20bc614 e39b120c68182a4ba35349f832d0e4e61f485c 5b0425c7ce46959bec94d54b9a157645e114f5 master HEAD 9e5457140e738c2dcd39bf6d7acf88379b90d1 c9c43c84ff242e3ef4a9fc5bc111fd780a76a8 d06bd4b77fed026b154d16493e5deab78f02ec 8114c31713746a33a2e70d9914d1ef3e781425 a609072918d7b70057b6bef9f4c2537843fcfe 6800012397fb85c56e7418dd4eb9405dee075c packed-refs 40-char-ref-aaaaaaaaaaaaaaaaaa loop master refs-0.2 server_new.export server_old.export HEAD 89f20333fbb1d2f3a94da77f4981373d8f4310 6318f651a534b38f9c7aedeebbd56c1e896853 69be3e8ee1c0222396a5611407e4769f14e54b ffe90e0a41ad3f5190079d7c8f036bde29cbe6 ac377bdded4c9aeb8dff595f0faeebcc8498cc dacdc733de308bb77bb76ce0fb0f9b44c9769e 670c0fb53f9463760b7295fbb814e965fb20c8 c190eb48fa8bbb50ddc692a17b44cb781af7f6 182552c4a85a45ec2a835cadc3451bebdfe870 4a536f7819d40e6f637f849ee187dd10066349 64bbdcc51b170d21588e5c5d391ee5c0c96dfd bdad6549dfedf25d3b89d21f506aff575b28a7 0c186a03f423a81b39df39dc87fd269736ca86 9de29bb2d1d6434b8b29ae775ad8c2e48c5391 master dotgit 033db03a03c6a36721efcf1968dd8f8e0cf023 c190eb48fa8bbb50ddc692a17b44cb781af7f6 TODO tox.ini",
        "setup.py": "#!\/usr\/bin\/python3\n# encoding: utf-8\n# Setup file for dulwich\n# Copyright (C) 2008-2016 Jelmer Vernoo\u0133 <jelmer@jelmer.uk>\n\ntry:\nfrom setuptools import setup, Extension\nexcept ImportError:\nfrom distutils.core import setup, Extension\nhas_setuptools = False\nelse:\nhas_setuptools = True\nfrom distutils.core import Distribution\nimport io\nimport os\nimport sys\nfrom typing import Dict, Any\n\n\nif sys.version_info < (3, 6):\nraise Exception(\n'Dulwich only supports Python 3.6 and later. '\n'For 2.7 support, please install a version prior to 0.20')\n\n\ndulwich_version_string = '0.20.45'\n\n\nclass DulwichDistribution(Distribution):\n\ndef is_pure(self):\nif self.pure:\nreturn True\n\ndef has_ext_modules(self):\nreturn not self.pure\n\nglobal_options = Distribution.global_options + [\n('pure', None, \"use pure Python code instead of C \"\n\"extensions (slower on CPython)\")]\n\npure = False\n\n\nif sys.platform == 'darwin' and os.path.exists('\/usr\/bin\/xcodebuild'):\n# XCode 4.0 dropped support for ppc architecture, which is hardcoded in\n# distutils.sysconfig\nimport subprocess\np = subprocess.Popen(\n['\/usr\/bin\/xcodebuild', '-version'], stdout=subprocess.PIPE,\nstderr=subprocess.PIPE, env={})\nout, err = p.communicate()\nfor line in out.splitlines():\nline = line.decode(\"utf8\")\n# Also parse only first digit, because 3.2.1 can't be parsed nicely\nif (line.startswith('Xcode') and\nint(line.split()[1].split('.')[0]) >= 4):\nos.environ['ARCHFLAGS'] = ''\n\ntests_require = ['fastimport']\n\n\nif '__pypy__' not in sys.modules and sys.platform != 'win32':\ntests_require.extend([\n'gevent', 'geventhttpclient', 'setuptools>=17.1'])\n\n\next_modules = [\nExtension('dulwich._objects', ['dulwich\/_objects.c']),\nExtension('dulwich._pack', ['dulwich\/_pack.c']),\nExtension('dulwich._diff_tree', ['dulwich\/_diff_tree.c']),\n]\n\nsetup_kwargs = {} # type: Dict[str, Any]\nscripts = ['bin\/dul-receive-pack', 'bin\/dul-upload-pack']\nif has_setuptools:\nsetup_kwargs['extras_require'] = {\n'fastimport': ['fastimport'],\n'https': ['urllib3[secure]>=1.24.1'],\n'pgp': ['gpg'],\n'paramiko': ['paramiko'],\n}\nsetup_kwargs['install_requires'] = ['urllib3>=1.24.1', 'certifi']\nsetup_kwargs['include_package_data'] = True\nsetup_kwargs['test_suite'] = 'dulwich.tests.test_suite'\nsetup_kwargs['tests_require'] = tests_require\nsetup_kwargs['entry_points'] = {\n\"console_scripts\": [\n\"dulwich=dulwich.cli:main\",\n]}\nsetup_kwargs['python_requires'] = '>=3.6'\nelse:\nscripts.append('bin\/dulwich')\n\n\nwith io.open(os.path.join(os.path.dirname(__file__), \"README.rst\"),\nencoding=\"utf-8\") as f:\ndescription = f.read()\n\nsetup(name='dulwich',\nauthor=\"Jelmer Vernooij\",\nauthor_email=\"jelmer@jelmer.uk\",\nurl=\"https:\/\/www.dulwich.io\/\",\nlong_description=description,\ndescription=\"Python Git Library\",\nversion=dulwich_version_string,\nlicense='Apachev2 or later or GPLv2',\nproject_urls={\n\"Bug Tracker\": \"https:\/\/github.com\/dulwich\/dulwich\/issues\",\n\"Repository\": \"https:\/\/www.dulwich.io\/code\/\",\n\"GitHub\": \"https:\/\/github.com\/dulwich\/dulwich\",\n},\nkeywords=\"git vcs\",\npackages=['dulwich', 'dulwich.tests', 'dulwich.tests.compat',\n'dulwich.contrib'],\npackage_data={'': ['..\/docs\/tutorial\/*.txt', 'py.typed']},\nscripts=scripts,\next_modules=ext_modules,\nzip_safe=False,\ndistclass=DulwichDistribution,\nclassifiers=[\n'Development Status :: 4 - Beta',\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Operating System :: POSIX',\n'Operating System :: Microsoft :: Windows',\n'Topic :: Software Development :: Version Control',\n],\n**setup_kwargs\n)\n"
    },
    {
        "package_name": "dunamai-1.12.0",
        "file_list": "py.typed __init__.py __main__.py LICENSE PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['dunamai']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['packaging>=20.9']\n\nextras_require = \\\n{':python_version < \"3.8\"': ['importlib-metadata>=1.6.0']}\n\nentry_points = \\\n{'console_scripts': ['dunamai = dunamai.__main__:main']}\n\nsetup_kwargs = {\n'name': 'dunamai',\n'version': '1.12.0',\n'description': 'Dynamic version generation',\n'long_description': '\\n# Dunamai\\n[![Version](https:\/\/img.shields.io\/pypi\/v\/dunamai)](https:\/\/pypi.org\/project\/dunamai)\\n[![License: MIT](https:\/\/img.shields.io\/badge\/license-MIT-yellow.svg)](https:\/\/opensource.org\/licenses\/MIT)\\n\\nDunamai is a Python 3.5+ library and command line tool for producing dynamic,\\nstandards-compliant version strings, derived from tags in your version\\ncontrol system. This facilitates uniquely identifying nightly or per-commit\\nbuilds in continuous integration and releasing new versions of your software\\nsimply by creating a tag.\\n\\nDunamai is also available as a [GitHub Action](https:\/\/github.com\/marketplace\/actions\/run-dunamai).\\n\\n## Features\\n* Version control system support:\\n * [Git](https:\/\/git-scm.com) (minimum version: 2.7.0)\\n * [Mercurial](https:\/\/www.mercurial-scm.org)\\n * [Darcs](http:\/\/darcs.net)\\n * [Subversion](https:\/\/subversion.apache.org)\\n * [Bazaar](https:\/\/bazaar.canonical.com\/en)\\n * [Fossil](https:\/\/www.fossil-scm.org\/home\/doc\/trunk\/www\/index.wiki)\\n* Version styles:\\n * [PEP 440](https:\/\/www.python.org\/dev\/peps\/pep-0440)\\n * [Semantic Versioning](https:\/\/semver.org)\\n * [Haskell Package Versioning Policy](https:\/\/pvp.haskell.org)\\n * Custom output formats\\n* Can be used for projects written in any programming language.\\n For Python, this means you do not need a setup.py.\\n\\n## Usage\\n### Installation\\n```\\npip install dunamai\\n```\\n\\n### CLI\\n```console\\n# Suppose you are on commit g29045e8, 7 commits after the v0.2.0 tag.\\n\\n# Auto-detect the version control system and generate a version:\\n$ dunamai from any\\n0.2.0.post7.dev0+g29045e8\\n\\n# Or use an explicit VCS and style:\\n$ dunamai from git --no-metadata --style semver\\n0.2.0-post.7\\n\\n# Custom formats:\\n$ dunamai from any --format \"v{base}+{distance}.{commit}\"\\nv0.2.0+7.g29045e8\\n\\n# If you\\'d prefer to frame the version in terms of progress toward the next\\n# release rather than distance from the latest one, you can bump it:\\n$ dunamai from any --bump\\n0.2.1.dev7+g29045e8\\n\\n# Validation of custom formats:\\n$ dunamai from any --format \"v{base}\" --style pep440\\nVersion \\'v0.2.0\\' does not conform to the PEP 440 style\\n\\n# Validate your own freeform versions:\\n$ dunamai check 0.01.0 --style semver\\nVersion \\'0.01.0\\' does not conform to the Semantic Versioning style\\n\\n# More info:\\n$ dunamai --help\\n$ dunamai from --help\\n$ dunamai from git --help\\n```\\n\\n### Library\\n\\n```python\\nfrom dunamai import Version, Style\\n\\n# Let\\'s say you\\'re on commit g644252b, which is tagged as v0.1.0.\\nversion = Version.from_git()\\nassert version.serialize() == \"0.1.0\"\\n\\n# Let\\'s say there was a v0.1.0rc5 tag 44 commits ago\\n# and you have some uncommitted changes.\\nversion = Version.from_any_vcs()\\nassert version.serialize() == \"0.1.0rc5.post44.dev0+g644252b\"\\nassert version.serialize(metadata=False) == \"0.1.0rc5.post44.dev0\"\\nassert version.serialize(dirty=True) == \"0.1.0rc5.post44.dev0+g644252b.dirty\"\\nassert version.serialize(style=Style.SemVer) == \"0.1.0-rc.5.post.44+g644252b\"\\n```\\n\\nThe `serialize()` method gives you an opinionated, PEP 440-compliant default\\nthat ensures that versions for untagged commits are compatible with Pip\\'s\\n`--pre` flag. The individual parts of the version are also available for you\\nto use and inspect as you please:\\n\\n```python\\nassert version.base == \"0.1.0\"\\nassert version.stage == \"rc\"\\nassert version.revision == 5\\nassert version.distance == 44\\nassert version.commit == \"g644252b\"\\nassert version.dirty is True\\n\\n# Available if the latest tag includes metadata, like v0.1.0+linux:\\nassert version.tagged_metadata == \"linux\"\\n```\\n\\n### Tips\\nBy default, the \"v\" prefix on the tag is required, unless you specify\\na custom tag pattern. You can either write a regular expression:\\n\\n```console\\n$ dunamai from any --pattern \"(?P<base>\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\"\\n```\\n\\n```python\\nfrom dunamai import Version\\n\\nversion = Version.from_any_vcs(pattern=r\"(?P<base>\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\")\\n```\\n\\n...or use a named preset:\\n\\n```console\\n$ dunamai from any --pattern default-unprefixed\\n```\\n\\n```python\\nfrom dunamai import Version, Pattern\\n\\nversion = Version.from_any_vcs(pattern=Pattern.DefaultUnprefixed)\\n```\\n\\n## Comparison to Versioneer\\n[Versioneer](https:\/\/github.com\/warner\/python-versioneer) is another great\\nlibrary for dynamic versions, but there are some design decisions that\\nprompted the creation of Dunamai as an alternative:\\n\\n* Versioneer requires a setup.py file to exist, or else `versioneer install`\\n will fail, rendering it incompatible with non-setuptools-based projects\\n such as those using Poetry or Flit. Dunamai can be used regardless of the\\n project\\'s build system.\\n* Versioneer has a CLI that generates Python code which needs to be committed\\n into your repository, whereas Dunamai is just a normal importable library\\n with an optional CLI to help statically include your version string.\\n* Versioneer produces the version as an opaque string, whereas Dunamai provides\\n a Version class with discrete parts that can then be inspected and serialized\\n separately.\\n* Versioneer provides customizability through a config file, whereas Dunamai\\n aims to offer customizability through its library API and CLI for both\\n scripting support and use in other libraries.\\n\\n## Integration\\n* Setting a `__version__` statically:\\n\\n ```console\\n $ echo \"__version__ = \\'$(dunamai from any)\\'\" > your_library\/_version.py\\n ```\\n ```python\\n # your_library\/__init__.py\\n from your_library._version import __version__\\n ```\\n\\n Or dynamically (but Dunamai becomes a runtime dependency):\\n\\n ```python\\n # your_library\/__init__.py\\n import dunamai as _dunamai\\n __version__ = _dunamai.get_version(\"your-library\", third_choice=_dunamai.Version.from_any_vcs).serialize()\\n ```\\n\\n* setup.py (no install-time dependency on Dunamai as long as you use wheels):\\n\\n ```python\\n from setuptools import setup\\n from dunamai import Version\\n\\n setup(\\n name=\"your-library\",\\n version=Version.from_any_vcs().serialize(),\\n )\\n ```\\n\\n Or you could use a static inclusion approach as in the prior example.\\n\\n* [Poetry](https:\/\/poetry.eustace.io):\\n\\n ```console\\n $ poetry version $(dunamai from any)\\n ```\\n\\n Or you can use the [poetry-dynamic-versioning](https:\/\/github.com\/mtkennerly\/poetry-dynamic-versioning) plugin.\\n\\n## Other notes\\n* When using Git, the initial commit must **not** be both tagged and empty\\n (i.e., created with `--allow-empty`). This is related to a reporting issue\\n in Git. For more info, [click here](https:\/\/github.com\/mtkennerly\/dunamai\/issues\/14).\\n\\n## Development\\nThis project is managed using [Poetry](https:\/\/poetry.eustace.io).\\nDevelopment requires Python 3.6+ because of [Black](https:\/\/github.com\/ambv\/black).\\n\\n* If you want to take advantage of the default VSCode integration, then first\\n configure Poetry to make its virtual environment in the repository:\\n ```\\n poetry config virtualenvs.in-project true\\n ```\\n* After cloning the repository, activate the tooling:\\n ```\\n poetry install\\n poetry run pre-commit install\\n ```\\n* Run unit tests:\\n ```\\n poetry run pytest --cov\\n poetry run tox\\n ```\\n',\n'author': 'Matthew T. Kennerly',\n'author_email': 'mtkennerly@gmail.com',\n'maintainer': 'None',\n'maintainer_email': 'None',\n'url': 'https:\/\/github.com\/mtkennerly\/dunamai',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'extras_require': extras_require,\n'entry_points': entry_points,\n'python_requires': '>=3.5,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "earthengine-api-0.1.319",
        "file_list": "dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt apifunction.py apitestcase.py batch.py commands.py eecli.py eecli_wrapper.py licenses.txt utils.py __init__.py collection.py computedobject.py customfunction.py data.py deprecation.py deserializer.py dictionary.py ee_date.py ee_exception.py ee_list.py ee_number.py ee_string.py ee_types.py element.py encodable.py feature.py featurecollection.py filter.py function.py geometry.py image.py imagecollection.py mapclient.py oauth.py serializer.py terrain.py algorithms.json apifunction_test.py batch_test.py cloud_api_discovery_document.json collection_test.py computedobject_test.py data_test.py date_test.py deserializer_test.py dictionary_test.py ee_test.py element_test.py featurecollection_test.py feature_test.py filter_test.py function_test.py geometry_test.py imagecollection_test.py image_test.py list_test.py number_test.py oauth_test.py serializer_test.py string_test.py _cloud_api_utils_test.py _helpers_test.py _cloud_api_utils.py _helpers.py __init__.py LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n#\n# Copyright 2012 Google Inc. All Rights Reserved.\n\n\"\"\"Setup file for Earth Engine Python API package.\"\"\"\n\nimport re\n\ntry:\n# if setuptools is available, use it to take advantage of its dependency\n# handling\nfrom setuptools import setup # pylint: disable=g-import-not-at-top\nexcept ImportError:\n# if setuptools is not available, use distutils (standard library). Users\n# will receive errors for missing packages\nfrom distutils.core import setup # pylint: disable=g-import-not-at-top\n\n\ndef GetVersion():\nwith open('ee\/__init__.py') as f:\nreturn re.findall(r'__version__\\s*=\\s*\\'([.\\d]+)\\'', f.read())[0]\n\n\nsetup(\nname='earthengine-api',\nversion=GetVersion(),\ndescription='Earth Engine Python API',\nurl='http:\/\/code.google.com\/p\/earthengine-api\/', # home page for package\ndownload_url='', # package download URL\npackages=['ee', 'ee.cli'],\npackage_data={\n'ee': ['tests\/*.py', 'tests\/*.json',],\n'ee.cli': ['licenses.txt'],\n},\ntest_suite='ee\/tests',\ninstall_requires=[\n# Note we omit TensorFlow (used by the CLI) here on purpose to avoid\n# an extra 0.5GiB of deps compared to our current 26MiB; Use of TF\n# functionality requires a manual install of TensorFlow.\n'future',\n'google-cloud-storage',\n'google-api-python-client>=1.12.1,<2',\n'google-auth>=1.4.1',\n'google-auth-httplib2>=0.0.3',\n'httplib2>=0.9.2,<1dev',\n'httplib2shim',\n'six'\n],\nentry_points={\n'console_scripts': ['earthengine = ee.cli.eecli:main',],\n},\nclassifiers=[\n# Get strings from\n# http:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n'Programming Language :: Python',\n'Operating System :: OS Independent',\n'Development Status :: 2 - Pre-Alpha',\n'Intended Audience :: Science\/Research',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n'Topic :: Multimedia :: Graphics :: Viewers',\n'Topic :: Scientific\/Engineering :: GIS',\n'Topic :: Scientific\/Engineering :: Visualization',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\nkeywords='earth engine image analysis',\nauthor='Noel Gorelick',\nauthor_email='gorelick@google.com',\nlong_description=\"\"\"\\\n=======================\nEarth Engine Python API\n=======================\nThis package allows developers to interact with Google Earth Engine using the\nPython programming language.\n\"\"\",\n)\n"
    },
    {
        "package_name": "easydev-0.12.0",
        "file_list": "COPYING appdirs.py browser.py chunks.py codecs.py config_tools.py console.py copybutton.py decorators.py dependencies.py doc.py easytest.py logging_tools.py md5tools.py misc.py multicore.py options.py paths.py platform.py profiler.py progressbar.py copybutton.js google_footer.html google_head.html index.html indexsidebar.html layout.html bgfooter.png bgtop.png software.css_t warning.jpg theme.conf google_footer.html google_head.html index.html indexsidebar.html layout.html bgfooter.png bgtop.png software.css_t warning.jpg theme.conf __init__.py sphinx_themes.py timer.py tools.py url.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.rst requirements_dev.txt setup.cfg setup.py test_appdirs.py test_browse.py test_chunks.py test_cnolab_sphinx.py test_codecs.py test_config.py test_console.py test_copybutton.py test_decorators.py test_dependencies.py test_doc.py test_easytest.py test_logging_tools.py test_md5.py test_misc.py test_multicore.py test_options.py test_paths.py test_platform.py test_profiler.py test_progressbar.py test_timer.py test_tools.py test_url.py",
        "setup.py": "import sys\nimport os\nfrom setuptools import setup, find_packages\nimport glob\n\n_MAJOR = 0\n_MINOR = 12\n_MICRO = 0\nversion = '%d.%d.%d' % (_MAJOR, _MINOR, _MICRO)\nrelease = '%d.%d' % (_MAJOR, _MINOR)\n\nmetainfo = {\n'authors': {'Cokelaer':('Thomas Cokelaer','thomas.cokelaer@pasteur.fr')},\n'version': version,\n'license' : 'new BSD',\n'download_url' :'http:\/\/github.com\/cokelaer\/easydev',\n'url' : \"http:\/\/github.com\/cokelaer\/easydev\",\n'description':'Common utilities to ease the development of Python packages' ,\n'platforms' : ['Linux', 'Unix', 'MacOsX', 'Windows'],\n'keywords' : [\"multisetup\", \"logging\", \"config\", \"decorators\",\n\"multigit\", \"progressbar\"],\n'classifiers' : [\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Topic :: Software Development :: Libraries :: Python Modules'\n]\n}\n\n\nsetup(\nname = 'easydev',\nversion = version,\nmaintainer = metainfo['authors']['Cokelaer'][0],\nmaintainer_email = metainfo['authors']['Cokelaer'][1],\nauthor = metainfo['authors']['Cokelaer'][0],\nauthor_email = metainfo['authors']['Cokelaer'][1],\nlong_description = open(\"README.rst\").read(),\nkeywords = metainfo['keywords'],\ndescription = metainfo['description'],\nlicense = metainfo['license'],\nplatforms = metainfo['platforms'],\nurl = metainfo['url'],\ndownload_url = metainfo['download_url'],\nclassifiers = metainfo['classifiers'],\n\n# package installation\npackages = ['easydev', \"easydev.share\" ],\n# using pip, files inside .\/easydev\/share that are non Python will be\n# included as well. For a distribution (using setup sdist), the MANIFEST\n# must be updated accordingly\ninclude_package_data = True,\npackage_data = {\"easydev.share\": [\n\"themes\/standard\/*html\",\n\"themes\/standard\/static\/*\",\n\"themes\/cno\/*html\",\n\"themes\/cno\/static\/*\",\n\"copybutton.js\"]},\n\ninstall_requires = ['colorama', 'pexpect', \"colorlog\"],\nextras_require = {\n'profiler': [\"line_profiler_test\"]\n},\ntests_require=['pytest'],\n# somehow, the google_head.html is found in themes\/standard and themese\/cno\n# directories thanks to the contents of datafiles variable but the ones from\n# themes\/standard directory are not copied inside the distribution ?\n# using the MANIFEST.in solve the issue. However, data_files=datafiles is\n# still required for python setup.py install or pip install to copy the\n# share directory in the proper place. sure there will be a neat solution\n# one day\nzip_safe = False,\nentry_points = {\n'console_scripts': [\n'browse=easydev.browser:main',\n]\n},\n\n)\n\n\n\n\n"
    },
    {
        "package_name": "EasyProcess-1.1",
        "file_list": "about.py cmd.py hello.py log.py timeout.py ver.py with.py __init__.py py.typed unicodeutil.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py test_deadlock.py test_env.py test_examples.py test_proc.py test_returncode.py test_started.py test_timeout.py test_unicode.py test_stress.py test_stress2.py",
        "setup.py": "import os\n\nfrom setuptools import setup\n\nNAME = \"easyprocess\"\n\n# get __version__\n__version__ = None\nexec(open(os.path.join(NAME, \"about.py\")).read())\nVERSION = __version__\n\nPYPI_NAME = \"EasyProcess\"\nURL = \"https:\/\/github.com\/ponty\/easyprocess\"\nDESCRIPTION = \"Easy to use Python subprocess interface.\"\nLONG_DESCRIPTION = \"\"\"Easy to use Python subprocess interface.\n\nDocumentation: https:\/\/github.com\/ponty\/easyprocess\/tree\/\"\"\"\nLONG_DESCRIPTION += VERSION\nPACKAGES = [\nNAME,\nNAME + \".examples\",\n]\n\n\nclassifiers = [\n# Get more strings from\n# https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n\"License :: OSI Approved :: BSD License\",\n\"Natural Language :: English\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n]\n\n\nsetup(\nname=PYPI_NAME,\nversion=VERSION,\ndescription=DESCRIPTION,\nlong_description=LONG_DESCRIPTION,\nlong_description_content_type=\"text\/x-rst\",\nclassifiers=classifiers,\nkeywords=\"subprocess interface\",\nauthor=\"ponty\",\n# author_email='',\nurl=URL,\nlicense=\"BSD\",\npackages=PACKAGES,\npackage_data={\nNAME: [\"py.typed\"],\n},\n)\n"
    },
    {
        "package_name": "ebaysdk-2.2.0",
        "file_list": "Changes ebay.yaml config.py connection.py exception.py __init__.py __init__.py __init__.py __init__.py parallel.py __init__.py orders.py __init__.py response.py __init__.py finditem.py __init__.py __init__.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt INSTALL MANIFEST.in PKG-INFO README.rst calls_with_unicode.py common.py finding.py finditem.py merchandising.py parallel.py parallel_gevent.py policies.py poller.py request_dictionary.py shopping.py storeMeta.py test_perf.py trading.py t_http.py __init__.py setup.cfg setup.py test_base.py test_errors.py test_request.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n#from distutils.core import setup\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import setup, find_packages\nimport re\nimport os\n\nPKG = 'ebaysdk'\n\nversion = __import__(PKG).get_version()\n\nlong_desc = \"\"\"This SDK is a programatic inteface into the eBay\nAPIs. It simplifies development and cuts development time by standerizing\ncalls, response processing, error handling, debugging across the Finding,\nShopping, Merchandising, & Trading APIs. \"\"\"\n\ndef requirements_file_to_list(fn=\"requirements.txt\"):\n\"\"\"read a requirements file and create a list that can be used in setup.\n\"\"\"\n\nwith open(fn, 'r') as f:\nreturn [x.rstrip() for x in list(f) if x and not x.startswith('#')]\n\nsetup(\nname=PKG,\nversion=version,\ndescription=\"eBay SDK for Python\",\nauthor=\"Tim Keefer\",\nauthor_email=\"tkeefer@gmail.com\",\nurl=\"https:\/\/github.com\/timotheus\/ebaysdk-python\",\nlicense=\"COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\",\npackages=find_packages(),\nprovides=[PKG],\ninstall_requires=['lxml', 'requests'], #requirements_file_to_list(),\ntest_suite='tests',\nlong_description=long_desc,\nclassifiers=[\n'Topic :: Internet :: WWW\/HTTP',\n'Intended Audience :: Developers',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n]\n)\n"
    },
    {
        "package_name": "EbookLib-0.17.1",
        "file_list": "AUTHORS.txt CHANGES.txt conf.py ebooklib.plugins.rst ebooklib.rst faq.rst index.rst Makefile plugins.rst tutorial.rst epub.py base.py booktype.py sourcecode.py standard.py tidyhtml.py __init__.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.md create.py README.md cover.jpg create.py README.md create.py README.md epub2markdown.py README.md create.py README.md parse.py README.md create.py README.md create.py parse.py README.md setup.cfg setup.py VERSION.txt",
        "setup.py": "import io\nimport re\n\nfrom setuptools import setup\n\n\ndef read(path):\nwith io.open(path, mode=\"r\", encoding=\"utf-8\") as fd:\ncontent = fd.read()\n# Convert Markdown links to reStructuredText links\nreturn re.sub(r\"\\[([^]]+)\\]\\(([^)]+)\\)\", r\"`\\1 <\\2>`_\", content)\n\n\nsetup(\nname = 'EbookLib',\nversion = '0.17.1',\nauthor = 'Aleksandar Erkalovic',\nauthor_email = 'aerkalov@gmail.com',\npackages = ['ebooklib', 'ebooklib.plugins'],\nurl = 'https:\/\/github.com\/aerkalov\/ebooklib',\nlicense = 'GNU Affero General Public License',\ndescription = 'Ebook library which can handle EPUB2\/EPUB3 and Kindle format',\nlong_description = read('README.md'),\nkeywords = ['ebook', 'epub', 'kindle'],\nclassifiers = [\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3.3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Topic :: Software Development :: Libraries :: Python Modules\"\n],\ninstall_requires = [\n\"lxml\", \"six\"\n]\n)\n\n"
    },
    {
        "package_name": "econml-0.13.1",
        "file_list": "_automated_ml.py __init__.py bootstrap.py _interpreters.py __init__.py causal_forest.py dgps.py dynamic_panel_dgp.py example.csv example_full.csv sim.csv cov_new.jbl gm_0.jbl gm_1.jbl gm_2.jbl gm_3.jbl gm_4.jbl gm_5.jbl gm_6.jbl lognorm_neg_0.jbl lognorm_neg_1.jbl lognorm_neg_2.jbl lognorm_neg_3.jbl lognorm_neg_4.jbl lognorm_neg_5.jbl lognorm_pos_0.jbl lognorm_pos_1.jbl lognorm_pos_2.jbl lognorm_pos_3.jbl lognorm_pos_4.jbl lognorm_pos_5.jbl lognorm_pos_6.jbl n_0.jbl n_1.jbl n_2.jbl n_3.jbl n_4.jbl n_5.jbl n_6.jbl __init__.py deepiv.py causal_forest.py dml.py _rlearner.py __init__.py dowhy.py _drlearner.py __init__.py drlearner.py _dml.py __init__.py __init__.py classes.py _base_grf.py _base_grftree.py _criterion.c _utils.c __init__.py _bootstrap.py _inference.py __init__.py _dml.py __init__.py _dr.py __init__.py _deepiv.py __init__.py _tsls.py __init__.py __init__.py _metalearners.py __init__.py _causal_tree.py _ortho_forest.py __init__.py ortho_forest.py ortho_iv.py _base.py _drlearner.py _criterion.c _forest.py _tree.py __init__.py __init__.py ensemble_cate.py rscorer.py __init__.py ensemble.py linear_model.py model_selection.py __init__.py _causal_analysis.py __init__.py _criterion.c _splitter.c _tree.c _tree_classes.py _utils.c __init__.py two_stage_least_squares.py utilities.py _cate_estimator.py _ensemble.py _utilities.py __init__.py _ortho_learner.py _shap.py _tree_exporter.py _version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO pyproject.toml README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup\nfrom setuptools.extension import Extension\nimport numpy as np\nimport os\nimport re\nfrom glob import glob\nfrom pathlib import Path\n\nwith open(os.path.join(os.path.dirname(__file__), \"econml\", \"_version.py\")) as file:\nfor line in file:\nm = re.fullmatch(\"__version__ = '([^']+)'\\n\", line)\nif m:\nversion = m.group(1)\n\npyx_files = glob(\"econml\/**\/*.pyx\", recursive=True)\nc_files = glob(\"econml\/**\/*.c\", recursive=True)\n\n# If both a .pyx and a .c file exist, we assume the .c file is up to date and don't force a recompile\npyx_files = [file for file in pyx_files if (os.path.splitext(file)[0] + \".c\") not in c_files]\n\nc_extensions = [Extension(os.path.splitext(file)[0].replace(os.sep, '.'),\n[file],\ninclude_dirs=[np.get_include()])\nfor file in c_files]\n\nif pyx_files:\nfrom Cython.Build import cythonize\npyx_extensions = cythonize([Extension(\"*\",\npyx_files,\ninclude_dirs=[np.get_include()])],\nlanguage_level=\"3\")\nelse:\npyx_extensions = []\n# configuration is all pulled from setup.cfg\nsetup(ext_modules=c_extensions + pyx_extensions,\nzip_safe=False,\nversion=version)\n"
    },
    {
        "package_name": "editdistance-0.6.0",
        "file_list": "bycython.cpp def.h _editdistance.cpp _editdistance.h __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE PKG-INFO README.rst setup.cfg setup.py test_editdistance.py",
        "setup.py": "\"\"\"\n-------\nLicense\n-------\n\nIt is released under the MIT license.\n\nCopyright (c) 2013 Hiroyuki Tanaka\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\"\"\"\n\n\ntry:\nfrom setuptools import Extension, setup\nexcept:\nfrom distutils import Extension, setup\n# for development\n# from Cython.Build import cythonize\n# ext_modules = cythonize('editdistance\/bycython.pyx')\n\next_modules = [\nExtension(\n\"editdistance.bycython\",\n[\"editdistance\/_editdistance.cpp\", \"editdistance\/bycython.cpp\"],\ninclude_dirs=[\".\/editdistance\"],\n)\n]\n\nwith open(\"README.rst\") as readme_file:\nreadme = readme_file.read()\n\nsetup(\nname=\"editdistance\",\nversion=\"0.6.0\",\npython_requires=\">=3.5\",\ndescription=\"Fast implementation of the edit distance(Levenshtein distance)\",\nlong_description=readme,\nlong_description_content_type=\"text\/x-rst\",\nauthor=\"Hiroyuki Tanaka\",\nauthor_email=\"aflc0x@gmail.com\",\nurl=\"https:\/\/www.github.com\/roy-ht\/editdistance\",\next_modules=ext_modules,\npackages=[\"editdistance\"],\npackage_data={\"editdistance\": [\"_editdistance.h\", \"def.h\"]},\nclassifiers=[\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n],\n)\n"
    },
    {
        "package_name": "eight-1.0.1",
        "file_list": "utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py test.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport os\nfrom setuptools import setup, find_packages\n\ninstall_requires = [line.rstrip() for line in open(os.path.join(os.path.dirname(__file__), \"requirements.txt\"))]\n\nsetup(\nname='eight',\nversion='1.0.1',\nurl='https:\/\/github.com\/kislyuk\/eight',\nlicense='Apache Software License',\nauthor='Andrey Kislyuk',\nauthor_email='kislyuk@gmail.com',\ndescription='Python 2 to the power of 3. A lightweight porting helper library.',\nlong_description=open('README.rst').read(),\ninstall_requires=install_requires,\npackages=find_packages(exclude=['test']),\ninclude_package_data=True,\nplatforms=['MacOS X', 'Posix'],\nclassifiers=[\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: POSIX',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Development Status :: 4 - Beta',\n'Topic :: Software Development :: Libraries :: Python Modules'\n]\n)\n"
    },
    {
        "package_name": "einops-0.4.1",
        "file_list": "einops.py chainer.py gluon.py keras.py tensorflow.py torch.py _einmix.py __init__.py parsing.py _backends.py _torch_specific.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "__author__ = 'Alex Rogozhnikov'\n\nfrom setuptools import setup\n\nsetup(\nname=\"einops\",\nversion='0.4.1',\ndescription=\"A new flavour of deep learning operations\",\nlong_description=open('README.md', encoding='utf-8').read(),\nlong_description_content_type='text\/markdown',\nurl='https:\/\/github.com\/arogozhnikov\/einops',\nauthor='Alex Rogozhnikov',\n\npackages=['einops', 'einops.layers'],\n\nclassifiers=[\n'Intended Audience :: Science\/Research',\n'Programming Language :: Python :: 3 ',\n],\nkeywords='deep learning, neural networks, tensor manipulation, machine learning, '\n'scientific computations, einops',\ninstall_requires=[\n# no run-time or installation-time dependencies\n],\n)\n"
    },
    {
        "package_name": "elastic-apm-6.11.0",
        "file_list": "base.py constants.py __init__.py base.py contextvars.py threadlocal.py __init__.py middleware.py utils.py __init__.py traces.py __init__.py __init__.py apps.py models.py __init__.py client.py context_processors.py handlers.py elasticapm.py __init__.py __init__.py wsgi.py __init__.py utils.py __init__.py utils.py __init__.py context.py span.py trace.py utils.py __init__.py span.py tracer.py __init__.py paste.py __init__.py __init__.py patch.py sanic_types.py utils.py __init__.py aws.py __init__.py utils.py __init__.py utils.py __init__.py __init__.py __init__.py __init__.py events.py logbook.py logging.py structlog.py __init__.py control.py aiobotocore.py aiohttp_client.py aiomysql.py aiopg.py aioredis.py asyncpg.py base.py elasticsearch.py sleep.py __init__.py azure.py base.py botocore.py cassandra.py dbapi2.py template.py __init__.py elasticsearch.py graphql.py httplib2.py httpcore.py httpx.py __init__.py httpcore.py httpx.py __init__.py utils.py __init__.py jinja2.py kafka.py mysql.py mysql_connector.py psycopg2.py pylibmc.py pymemcache.py pymongo.py pymssql.py pymysql.py pyodbc.py python_memcached.py redis.py requests.py sqlite.py tornado.py urllib.py urllib3.py zlib.py __init__.py register.py __init__.py base_metrics.py breakdown.py cpu.py cpu_linux.py cpu_psutil.py prometheus.py __init__.py __init__.py middleware.py processors.py traces.py base.py exceptions.py http.py http_base.py http_urllib3.py __init__.py cgroup.py cloud.py compat.py deprecation.py disttracing.py encoding.py json_encoder.py logging.py module_import.py stacks.py threading.py time.py arguments.py decorators.py importer.py wrappers.py _wrappers.c __init__.py wsgi.py __init__.py version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\"\"\"\nelasticapm\n======\n\nelastic-apm is a Python client for `Elastic APM <https:\/\/elastic.co\/apm>`_. It provides\nfull out-of-the-box support for many of the popular frameworks, including\n`Django <djangoproject.com>`_, `Flask <http:\/\/flask.pocoo.org\/>`_, and `Pylons\n<http:\/\/www.pylonsproject.org\/>`_. elastic-apm also includes drop-in support for any\n`WSGI <http:\/\/wsgi.readthedocs.org\/>`_-compatible web application.\n\"\"\"\n\n# BSD 3-Clause License\n#\n# Copyright (c) 2019, Elasticsearch BV\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# * Redistributions of source code must retain the above copyright notice, this\n# list of conditions and the following disclaimer.\n#\n# * Redistributions in binary form must reproduce the above copyright notice,\n# this list of conditions and the following disclaimer in the documentation\n# and\/or other materials provided with the distribution.\n#\n# * Neither the name of the copyright holder nor the names of its\n# contributors may be used to endorse or promote products derived from\n# this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# Hack to prevent stupid \"TypeError: 'NoneType' object is not callable\" error\n# in multiprocessing\/util.py _exit_function when running `python\n# setup.py test` (see\n# http:\/\/www.eby-sarna.com\/pipermail\/peak\/2010-May\/003357.html)\nfor m in (\"multiprocessing\", \"billiard\"):\ntry:\n__import__(m)\nexcept ImportError:\npass\n\nimport ast\nimport codecs\nimport os\nimport sys\nfrom distutils.command.build_ext import build_ext\nfrom distutils.errors import CCompilerError, DistutilsExecError, DistutilsPlatformError\n\nimport pkg_resources\nfrom setuptools import Extension, setup\nfrom setuptools.command.test import test as TestCommand\n\npkg_resources.require(\"setuptools>=39.2\")\n\nif sys.platform == \"win32\":\nbuild_ext_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError, IOError)\nelse:\nbuild_ext_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError)\n\n\nclass BuildExtFailed(Exception):\npass\n\n\nclass optional_build_ext(build_ext):\ndef run(self):\ntry:\nbuild_ext.run(self)\nexcept DistutilsPlatformError:\nraise BuildExtFailed()\n\ndef build_extension(self, ext):\ntry:\nbuild_ext.build_extension(self, ext)\nexcept build_ext_errors:\nraise BuildExtFailed()\n\n\nclass PyTest(TestCommand):\nuser_options = [(\"pytest-args=\", \"a\", \"Arguments to pass to py.test\")]\n\ndef initialize_options(self):\nTestCommand.initialize_options(self)\nself.pytest_args = []\n\ndef finalize_options(self):\nTestCommand.finalize_options(self)\nself.test_args = []\nself.test_suite = True\n\ndef run_tests(self):\n# import here, cause outside the eggs aren't loaded\nimport pytest\n\nerrno = pytest.main(self.pytest_args)\nsys.exit(errno)\n\n\ndef get_version():\n\"\"\"\nGet version without importing from elasticapm. This avoids any side effects\nfrom importing while installing and\/or building the module\n\nOnce Python 3.8 is the lowest supported version, we could consider hardcoding\nthe version in setup.cfg instead. 3.8 comes with importlib.metadata, which makes\nit trivial to find the version of a package, making it unnecessary to\nhave the version available in code.\n\n:return: a string, indicating the version\n\"\"\"\nversion_file = codecs.open(os.path.join(\"elasticapm\", \"version.py\"), encoding=\"utf-8\")\nfor line in version_file:\nif line.startswith(\"__version__\"):\nversion_tuple = ast.literal_eval(line.split(\" = \")[1])\nreturn \".\".join(map(str, version_tuple))\nreturn \"unknown\"\n\n\nsetup_kwargs = dict(cmdclass={\"test\": PyTest}, version=get_version())\n\n\ndef run_setup(with_extensions):\nsetup_kwargs_tmp = dict(setup_kwargs)\n\nif with_extensions:\nsetup_kwargs_tmp[\"ext_modules\"] = [\nExtension(\"elasticapm.utils.wrapt._wrappers\", [\"elasticapm\/utils\/wrapt\/_wrappers.c\"])\n]\nsetup_kwargs_tmp[\"cmdclass\"][\"build_ext\"] = optional_build_ext\n\nsetup(**setup_kwargs_tmp)\n\n\n# Figure out if we should build the wrapt C extensions\n\nwith_extensions = os.environ.get(\"ELASTIC_APM_WRAPT_EXTENSIONS\", None)\n\nif with_extensions:\nif with_extensions.lower() == \"true\":\nwith_extensions = True\nelif with_extensions.lower() == \"false\":\nwith_extensions = False\nelse:\nwith_extensions = None\n\nif hasattr(sys, \"pypy_version_info\"):\nwith_extensions = False\n\nif with_extensions is None:\nwith_extensions = True\n\ntry:\nrun_setup(with_extensions=with_extensions)\nexcept BuildExtFailed:\nrun_setup(with_extensions=False)\n"
    },
    {
        "package_name": "environs-9.5.0",
        "file_list": "CHANGELOG.md CONTRIBUTING.md py.typed __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py",
        "setup.py": "import re\nfrom setuptools import setup\n\nINSTALL_REQUIRES = [\"marshmallow>=3.0.0\", \"python-dotenv\"]\nDJANGO_REQUIRES = [\"dj-database-url\", \"dj-email-url\", \"django-cache-url\"]\nEXTRAS_REQUIRE = {\n\"django\": DJANGO_REQUIRES,\n\"tests\": [\"pytest\"] + DJANGO_REQUIRES,\n\"lint\": [\"flake8==4.0.1\", \"flake8-bugbear==21.9.2\", \"mypy==0.910\", \"pre-commit~=2.4\"],\n}\nEXTRAS_REQUIRE[\"dev\"] = EXTRAS_REQUIRE[\"tests\"] + EXTRAS_REQUIRE[\"lint\"] + [\"tox\"]\nPYTHON_REQUIRES = \">=3.6\"\n\n\ndef find_version(fname):\nversion = \"\"\nwith open(fname) as fp:\nreg = re.compile(r'__version__ = [\\'\"]([^\\'\"]*)[\\'\"]')\nfor line in fp:\nm = reg.match(line)\nif m:\nversion = m.group(1)\nbreak\nif not version:\nraise RuntimeError(\"Cannot find version information\")\nreturn version\n\n\ndef read(fname):\nwith open(fname) as fp:\ncontent = fp.read()\nreturn content\n\n\nsetup(\nname=\"environs\",\npackages=[\"environs\"],\npackage_data={\"environs\": [\"py.typed\"]},\nversion=find_version(\"environs\/__init__.py\"),\ndescription=\"simplified environment variable parsing\",\nlong_description=read(\"README.md\"),\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Steven Loria\",\nauthor_email=\"sloria1@gmail.com\",\nurl=\"https:\/\/github.com\/sloria\/environs\",\ninstall_requires=INSTALL_REQUIRES,\nextras_require=EXTRAS_REQUIRE,\nlicense=\"MIT\",\nzip_safe=False,\npython_requires=PYTHON_REQUIRES,\nkeywords=\"environment variables parsing config configuration 12factor envvars\",\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Natural Language :: English\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Typing :: Typed\",\n],\nproject_urls={\n\"Issues\": \"https:\/\/github.com\/sloria\/environs\/issues\",\n\"Changelog\": \"https:\/\/github.com\/sloria\/environs\/blob\/master\/CHANGELOG.md\",\n},\n)\n"
    },
    {
        "package_name": "execnet-1.9.0",
        "file_list": "main.yml .gitignore .pre-commit-config.yaml CHANGELOG.rst basics.rst changelog.rst conf.py conftest.py funcmultiplier.py hybridpython.rst popen_read_multiple.py py3topy2.py redirect_remote_output.py remote1.py remotecmd.py servefiles.py svn-sync-repo.py sysinfo.py taskserver.py test_debug.rst test_funcmultiplier.py test_group.rst test_info.rst test_multi.rst test_proxy.rst test_ssh_fileserver.rst examples.rst implnotes.rst index.rst install.rst Makefile support.rst basic1.png codespeak.png execnet.png pythonring.png indexsidebar.html layout.html __init__.py deprecated.py gateway.py gateway_base.py gateway_bootstrap.py gateway_io.py gateway_socket.py multi.py rsync.py rsync_remote.py loop_socketserver.py quitserver.py shell.py socketserver.py socketserverservice.py xx.py __init__.py xspec.py _version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt ISSUES.txt LICENSE PKG-INFO README.rst RELEASING.rst install-pypy.bat setup.cfg setup.py conftest.py test_basics.py test_channel.py test_compatibility_regressions.py test_gateway.py test_multi.py test_rsync.py test_serializer.py test_termination.py test_threadpool.py test_xspec.py tox.ini",
        "setup.py": "# -*- coding: utf-8 -*-\ndef main():\nfrom setuptools import setup\n\nwith open(\"README.rst\") as fp:\nreadme = fp.read()\nsetup(\nname=\"execnet\",\ndescription=\"execnet: rapid multi-Python deployment\",\nlong_description=readme,\nuse_scm_version={\"write_to\": \"execnet\/_version.py\"},\nurl=\"https:\/\/execnet.readthedocs.io\/en\/latest\/\",\nlicense=\"MIT\",\nplatforms=[\"unix\", \"linux\", \"osx\", \"cygwin\", \"win32\"],\nauthor=\"holger krekel and others\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: POSIX\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Topic :: Software Development :: Libraries\",\n\"Topic :: System :: Distributed Computing\",\n\"Topic :: System :: Networking\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n],\npackages=[\"execnet\", \"execnet.script\"],\npython_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\",\nextras_require={\"testing\": [\"pre-commit\"]},\nsetup_requires=[\"setuptools_scm\"],\n)\n\n\nif __name__ == \"__main__\":\nmain()\n"
    },
    {
        "package_name": "executor-23.2",
        "file_list": "CHANGELOG.rst api.rst changelog.rst conf.py index.rst readme.rst chroot.py cli.py concurrent.py contexts.py process.py schroot.py client.py server.py __init__.py tcp.py tests.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.rst requirements-checks.txt requirements-tests.txt requirements-travis.txt requirements.txt setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n# Programmer friendly subprocess wrapper.\n#\n# Author: Peter Odding <peter@peterodding.com>\n# Last Change: February 29, 2020\n# URL: https:\/\/executor.readthedocs.io\n\n\"\"\"\nSetup script for the `executor` package.\n\n**python setup.py install**\nInstall from the working directory into the current Python environment.\n\n**python setup.py sdist**\nBuild a source distribution archive.\n\n**python setup.py bdist_wheel**\nBuild a wheel distribution archive.\n\"\"\"\n\n# Standard library modules.\nimport codecs\nimport os\nimport re\n\n# De-facto standard solution for Python packaging.\nfrom setuptools import setup, find_packages\n\n\ndef get_contents(*args):\n\"\"\"Get the contents of a file relative to the source distribution directory.\"\"\"\nwith codecs.open(get_absolute_path(*args), 'r', 'UTF-8') as handle:\nreturn handle.read()\n\n\ndef get_version(*args):\n\"\"\"Extract the version number from a Python module.\"\"\"\ncontents = get_contents(*args)\nmetadata = dict(re.findall('__([a-z]+)__ = [\\'\"]([^\\'\"]+)', contents))\nreturn metadata['version']\n\n\ndef get_requirements(*args):\n\"\"\"Get requirements from pip requirement files.\"\"\"\nrequirements = set()\nwith open(get_absolute_path(*args)) as handle:\nfor line in handle:\n# Strip comments.\nline = re.sub(r'^#.*|\\s#.*', '', line)\n# Ignore empty lines\nif line and not line.isspace():\nrequirements.add(re.sub(r'\\s+', '', line))\nreturn sorted(requirements)\n\n\ndef get_absolute_path(*args):\n\"\"\"Transform relative pathnames into absolute pathnames.\"\"\"\nreturn os.path.join(os.path.dirname(os.path.abspath(__file__)), *args)\n\n\nsetup(name='executor',\nversion=get_version('executor', '__init__.py'),\ndescription='Programmer friendly subprocess wrapper',\nlong_description=get_contents('README.rst'),\nurl='https:\/\/executor.readthedocs.io',\nauthor=\"Peter Odding\",\nauthor_email='peter@peterodding.com',\nlicense='MIT',\npackages=find_packages(),\nentry_points=dict(console_scripts=[\n'executor = executor.cli:main',\n]),\ninstall_requires=get_requirements('requirements.txt'),\ntest_suite='executor.tests',\ntests_require=[\n'virtualenv',\n],\npython_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'Intended Audience :: Information Technology',\n'Intended Audience :: System Administrators',\n'License :: OSI Approved :: MIT License',\n'Operating System :: POSIX',\n'Operating System :: POSIX :: Linux',\n'Operating System :: Unix',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Internet',\n'Topic :: Software Development',\n'Topic :: Software Development :: Libraries',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: System :: Networking',\n'Topic :: System :: Shells',\n'Topic :: System :: Systems Administration',\n'Topic :: Utilities',\n])\n"
    },
    {
        "package_name": "ExifRead-3.0.0",
        "file_list": "ChangeLog.rst CONTRIBUTING.rst EXIF.py classes.py exceptions.py exif_log.py heic.py jpeg.py exif.py apple.py canon.py casio.py fujifilm.py nikon.py olympus.py __init__.py __init__.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "from setuptools import setup, find_packages\nimport exifread\n\nreadme_file = open(\"README.rst\", \"rt\").read()\n\ndev_requirements = [\n\"mypy==0.950\",\n\"pylint==2.13.8\",\n]\n\nsetup(\nname=\"ExifRead\",\nversion=exifread.__version__,\nauthor=\"Ianar\u00e9 S\u00e9vi\",\nauthor_email=\"ianare@gmail.com\",\npackages=find_packages(),\nscripts=[\"EXIF.py\"],\nurl=\"https:\/\/github.com\/ianare\/exif-py\",\nlicense=\"BSD\",\nkeywords=\"exif image metadata photo\",\ndescription=\" \".join(exifread.__doc__.splitlines()).strip(),\nlong_description=readme_file,\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Console\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: End Users\/Desktop\",\n\"License :: OSI Approved :: BSD License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Topic :: Utilities\",\n],\nextras_require={\n\"dev\": dev_requirements,\n},\n)\n"
    },
    {
        "package_name": "exit_codes-1.3.0",
        "file_list": "exit_codes.py exit_code_error.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "import io\nimport os\nimport re\nfrom setuptools import setup, find_packages\n\n\ndef read(*names, **kwargs):\nwith io.open(\nos.path.join(os.path.dirname(__file__), *names),\nencoding=kwargs.get(\"encoding\", \"utf8\")\n) as fp:\nreturn fp.read()\n\n\ndef find_version(*file_paths):\nversion_file = read(*file_paths)\nversion_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\nversion_file, re.M)\nif version_match:\nreturn version_match.group(1)\nraise RuntimeError(\"Unable to find version string.\")\n\n\nlong_description = read('README.rst', mode='rt')\n\nsetup(\nname='exit_codes',\nversion=find_version('exit_codes\/version.py'),\npackages=find_packages(exclude=['tests']),\n\nauthor='Sixty North AS',\nauthor_email='austin@sixty-north.com',\ndescription='Platform-independent exit codes.',\nlicense='MIT',\nkeywords='',\nurl='http:\/\/github.com\/sixty-north\/exit-codes',\nclassifiers=[\n'Development Status :: 3 - Alpha',\n'Operating System :: OS Independent',\n'Programming Language :: Python'\n],\nplatforms='any',\ninclude_package_data=True,\ninstall_requires=[],\n# List additional groups of dependencies here (e.g. development\n# dependencies). You can install these using the following syntax, for\n# example: $ pip install -e .[dev,test]\nextras_require={\n'test': ['pytest', 'tox'],\n},\nlong_description=long_description,\n)\n"
    },
    {
        "package_name": "expandvars-0.9.0",
        "file_list": "expandvars.py LICENSE PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\nmodules = \\\n['expandvars']\nsetup_kwargs = {\n'name': 'expandvars',\n'version': '0.9.0',\n'description': 'Expand system variables Unix style',\n'long_description': 'expandvars\\n==========\\nExpand system variables Unix style\\n\\n[![PyPI version](https:\/\/img.shields.io\/pypi\/v\/expandvars.svg)](https:\/\/pypi.org\/project\/expandvars)\\n[![codecov](https:\/\/codecov.io\/gh\/sayanarijit\/expandvars\/branch\/master\/graph\/badge.svg)](https:\/\/codecov.io\/gh\/sayanarijit\/expandvars)\\n\\n\\nInspiration\\n-----------\\nThis module is inspired by [GNU bash\\'s variable expansion features](https:\/\/www.gnu.org\/software\/bash\/manual\/html_node\/Shell-Parameter-Expansion.html). It can be used as an alternative to Python\\'s [os.path.expandvars](https:\/\/docs.python.org\/3\/library\/os.path.html#os.path.expandvars) function.\\n\\nA good use case is reading config files with the flexibility of reading values from environment variables using advanced features like returning a default value if some variable is not defined.\\nFor example:\\n\\n```toml\\n[default]\\nmy_secret_access_code = \"${ACCESS_CODE:-default_access_code}\"\\nmy_important_variable = \"${IMPORTANT_VARIABLE:?}\"\\nmy_updated_path = \"$PATH:$HOME\/.bin\"\\nmy_process_id = \"$$\"\\nmy_nested_variable = \"${!NESTED}\"\\n```\\n\\n> NOTE: Although this module copies most of the common behaviours of bash,\\n> it doesn\\'t follow bash strictly. For example, it doesn\\'t work with arrays.\\n\\n\\nUsage\\n-----\\n\\n```python\\nfrom expandvars import expandvars\\n\\nprint(expandvars(\"$PATH:${HOME:?}\/bin:${SOME_UNDEFINED_PATH:-\/default\/path}\"))\\n# \/bin:\/sbin:\/usr\/bin:\/usr\/sbin:\/home\/you\/bin:\/default\/path\\n```\\n\\n\\nExamples\\n--------\\nFor now, [refer to the test cases](https:\/\/github.com\/sayanarijit\/expandvars\/blob\/master\/tests) to see how it behaves.\\n\\n\\nTIPs\\n----\\n\\n### nounset=True\\n\\nIf you want to enable strict parsing by default, (similar to `set -u` \/ `set -o nounset` in bash), pass `nounset=True`.\\n\\n```python\\n# All the variables must be defined.\\nexpandvars(\"$VAR1:${VAR2}:$VAR3\", nounset=True)\\n\\n# Raises UnboundVariable error.\\n```\\n\\n> NOTE: Another way is to use the `${VAR?}` or `${VAR:?}` syntax. See the examples in tests.\\n\\n### EXPANDVARS_RECOVER_NULL=\"foo\"\\n\\nIf you want to temporarily disable strict parsing both for `nounset=True` and the `${VAR:?}` syntax, set environment variable `EXPANDVARS_RECOVER_NULL=somevalue`.\\nThis helps with certain use cases where you need to temporarily disable strict parsing of critical env vars, e.g. in testing environment, without modifying the code.\\n\\ne.g.\\n\\n```bash\\nEXPANDVARS_RECOVER_NULL=foo myapp --config production.ini && echo \"All fine.\"\\n```\\n\\n> WARNING: Try to avoid `export EXPANDVARS_RECOVER_NULL` because that will disable strict parsing permanently until you log out.\\n\\n### Customization\\n\\nYou can customize the variable symbol and data used for the expansion by using the more general `expand` function.\\n\\n```python\\nfrom expandvars import expand\\n\\nprint(expand(\"%PATH:$HOME\/bin:%{SOME_UNDEFINED_PATH:-\/default\/path}\", environ={\"PATH\": \"\/example\"}, var_symbol=\"%\"))\\n# \/example:$HOME\/bin:\/default\/path\\n```\\n\\nContributing\\n------------\\nTo contribute, setup environment following way:\\n\\nFirst you need to [install poetry](https:\/\/python-poetry.org\/docs\/#installation).\\n\\nThen\\n\\n```bash\\n# Clone repo\\ngit clone https:\/\/github.com\/sayanarijit\/expandvars && cd expandvars\\n\\n# Install poetry dependencies\\npoetry install\\n```\\n\\n- Follow [general git guidelines](https:\/\/git-scm.com\/book\/en\/v2\/Distributed-Git-Contributing-to-a-Project).\\n- Keep it simple. Run `poetry run black` to auto format the code.\\n- Test your changes locally by running `poetry run pytest` (pass `--cov --cov-report html` for browsable coverage report).\\n- If you are familiar with [tox](https:\/\/tox.readthedocs.io), you may want to use it for testing in different python versions.\\n\\nAlternatives\\n------------\\n\\n- [environs](https:\/\/github.com\/sloria\/environs) - simplified environment variable parsing.\\n',\n'author': 'Arijit Basu',\n'author_email': 'sayanarijit@gmail.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/sayanarijit\/expandvars',\n'py_modules': modules,\n'python_requires': '>=3.4',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "exponent_server_sdk-2.0.0",
        "file_list": "__init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from setuptools import find_packages\nfrom setuptools import setup\nimport os\nimport re\n\n\nHERE = os.path.abspath(os.path.dirname(__file__))\n\n\nREADME_PATH = os.path.join(HERE, 'README.md')\ntry:\nwith open(README_PATH) as fd:\nREADME = fd.read()\nexcept IOError:\nREADME = ''\n\n\nsetup(\nname='exponent_server_sdk',\nversion='2.0.0',\ndescription='Expo Server SDK for Python',\nlong_description=README,\nlong_description_content_type='text\/markdown',\nurl='https:\/\/github.com\/expo\/exponent-server-sdk-python',\nauthor='Expo Team',\nauthor_email='exponent.team@gmail.com',\nlicense='MIT',\ninstall_requires=[\n'requests',\n'six',\n],\npackages=find_packages(),\nzip_safe=False\n)\n"
    },
    {
        "package_name": "exrex-0.10.5",
        "file_list": "dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt exrex.py PKG-INFO setup.cfg setup.py",
        "setup.py": "from setuptools import setup, find_packages\n\nsetup(\nname='exrex',\nversion='0.10.5',\nauthor='Adam Tauber',\nauthor_email='asciimoo@gmail.com',\ndescription='Irregular methods for regular expressions',\nlicense='AGPLv3+',\nkeywords=\"regexp generators string generation regex simplification\",\nurl='https:\/\/github.com\/asciimoo\/exrex',\nscripts=['exrex.py'],\npy_modules=['exrex'],\npackages=find_packages(),\ninstall_requires=[],\ndownload_url='https:\/\/github.com\/asciimoo\/exrex\/tarball\/master',\nentry_points={\n\"console_scripts\": [\"exrex=exrex:__main__\"]\n},\nclassifiers=[\n# As from http:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n\"Development Status :: 4 - Beta\",\n\"Topic :: Utilities\",\n'Environment :: Console',\n'License :: OSI Approved :: GNU Affero General Public License v3',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n]\n)\n"
    },
    {
        "package_name": "facebook-sdk-3.1.0",
        "file_list": "models.py style.css base.html index.html login.html views.py __init__.py config.py requirements.txt run.py get_posts.py example.html example.py schema.sql version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_facebook.py",
        "setup.py": "#!\/usr\/bin\/env python\nfrom setuptools import setup\n\nexec(open(\"facebook\/version.py\").read())\n\nsetup(\nname='facebook-sdk',\nversion=__version__, # noqa: F821\ndescription='This client library is designed to support the Facebook '\n'Graph API and the official Facebook JavaScript SDK, which '\n'is the canonical way to implement Facebook authentication.',\nauthor='Facebook',\nmaintainer='Martey Dodoo',\nmaintainer_email='martey+facebook-sdk@mobolic.com',\nurl='https:\/\/github.com\/mobolic\/facebook-sdk',\nlicense='Apache',\npackages=[\"facebook\"],\nlong_description=open(\"README.rst\").read(),\nclassifiers=[\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n],\ninstall_requires=[\n'requests',\n],\n)\n"
    },
    {
        "package_name": "factor_analyzer-0.4.0",
        "file_list": "confirmatory_factor_analyzer.py factor_analyzer.py rotator.py test_utils.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe LICENSE MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom setuptools import find_packages, setup\n\n\ndef readme():\nwith open('README.rst') as f:\nreturn f.read()\n\n\ndef requirements():\nreq_path = 'requirements.txt'\nwith open(req_path) as f:\nreqs = f.read().splitlines()\nreturn reqs\n\n\nsetup(name='factor_analyzer',\nversion='0.4.0',\ndescription='A Factor Analysis class',\nlong_description=readme(),\nkeywords='factor analysis',\npackages=find_packages(),\nauthor=\"Jeremy Biggs\",\nauthor_email=\"jbiggs@ets.org\",\nurl=\"https:\/\/github.com\/EducationalTestingService\/factor_analyzer\",\ninstall_requires=requirements(),\ninclude_package_data=True,\nclassifiers=['Intended Audience :: Science\/Research',\n'Intended Audience :: Developers',\n'Programming Language :: Python',\n'Topic :: Scientific\/Engineering',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: POSIX',\n'Operating System :: Unix',\n'Operating System :: MacOS',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n],\nzip_safe=True)\n"
    },
    {
        "package_name": "fairscale-0.4.8",
        "file_list": "mnist.py wikitext2_data.py __init__.py fsdp.py lm_wikitext2.py oss_mnist.py __init__.py transformer_lm.py __init__.py moe.py oss.py pipe.py utils.py __init__.py compat.h multi_tensor_apply.cuh ampnet.py pipe.py __init__.py auto_shard.py distributed.py gossiper.py graph_manager.py mixing_manager.py cuda_metering.py helpers.py __init__.py __init__.py __init__.py data.py graph.py loss.py partition_handler.py pipeline.py trace.py __init__.py mevo.py offload.py ssd_offload.py sync_batchnorm.py __init__.py dynamic_loss_scaler.py __init__.py layer_memory_tracker.py __init__.py cli.py pygit.py repo.py sha1_store.py signal_sparsity.py utils.py version.py __init__.py __main__.py __init__.py containers.py object.py parallel.py params.py reduce_scatter_bucketer.py state_dict.py version.py __init__.py checkpoint_activations.py checkpoint_utils.py __init__.py fsdp_optim_utils.py fully_sharded_data_parallel.py sharded_ddp.py __init__.py flatten_params_wrapper.py param_bucket.py __init__.py cross_entropy.py initialize.py layers.py mappings.py random.py utils.py __init__.py moe_layer.py top2gate.py __init__.py async_pipe.py async_pipeline.py async_schedule.py blockpartition.py profile.py __init__.py batchnorm.py checkpoint.py copy.py dependency.py messages.py microbatch.py phony.py pipe.py pipeline.py rpc.py layout.py namespace.py portal.py skippable.py tracker.py __init__.py stream.py types.py worker.py __init__.py auto_wrap.py __init__.py __init__.py adam.py adascale.py grad_scaler.py layerwise_gradient_scaler.py oss.py __init__.py version.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md requirements.txt setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python3\n\n# Copyright (c) Facebook, Inc. and its affiliates. All rights reserved.\n#\n# This source code is licensed under the BSD license found in the\n# LICENSE file in the root directory of this source tree.\n\nimport os\nimport re\n\nimport setuptools\n\nthis_dir = os.path.dirname(os.path.abspath(__file__))\n\n\ndef fetch_requirements():\nwith open(\"requirements.txt\") as f:\nreqs = f.read().strip().split(\"\\n\")\nreturn reqs\n\n\n# https:\/\/packaging.python.org\/guides\/single-sourcing-package-version\/\ndef find_version(version_file_path) -> str:\nwith open(version_file_path) as version_file:\nversion_match = re.search(r\"^__version_tuple__ = (.*)\", version_file.read(), re.M)\nif version_match:\nver_tup = eval(version_match.group(1))\nver_str = \".\".join([str(x) for x in ver_tup])\nreturn ver_str\nraise RuntimeError(\"Unable to find version tuple.\")\n\n\nextensions = []\ncmdclass = {}\n\nif os.getenv(\"BUILD_CUDA_EXTENSIONS\", \"0\") == \"1\":\nfrom torch.utils.cpp_extension import BuildExtension, CUDAExtension\n\nextensions.extend(\n[\nCUDAExtension(\nname=\"fairscale.fused_adam_cuda\",\ninclude_dirs=[os.path.join(this_dir, \"fairscale\/clib\/fused_adam_cuda\")],\nsources=[\n\"fairscale\/clib\/fused_adam_cuda\/fused_adam_cuda.cpp\",\n\"fairscale\/clib\/fused_adam_cuda\/fused_adam_cuda_kernel.cu\",\n],\nextra_compile_args={\"cxx\": [\"-O3\"], \"nvcc\": [\"-O3\", \"--use_fast_math\"]},\n)\n]\n)\n\ncmdclass[\"build_ext\"] = BuildExtension\n\n\nif __name__ == \"__main__\":\nsetuptools.setup(\nname=\"fairscale\",\ndescription=\"FairScale: A PyTorch library for large-scale and high-performance training.\",\nversion=find_version(\"fairscale\/version.py\"),\nsetup_requires=[\"ninja\"], # ninja is required to build extensions\ninstall_requires=fetch_requirements(),\ninclude_package_data=True,\npackages=setuptools.find_packages(exclude=(\"tests\", \"tests.*\")),\next_modules=extensions,\ncmdclass=cmdclass,\npython_requires=\">=3.8\",\nauthor=\"Foundational AI Research @ Meta AI\",\nauthor_email=\"todo@fb.com\",\nlong_description=\"FairScale is a PyTorch extension library for high performance and large scale training on one or multiple machines\/nodes. This library extends basic PyTorch capabilities while adding new experimental ones.\",\nlong_description_content_type=\"text\/markdown\",\nentry_points={\"console_scripts\": [\"wgit = fairscale.experimental.wgit.__main__:main\"]},\nclassifiers=[\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"License :: OSI Approved :: BSD License\",\n\"Topic :: Scientific\/Engineering :: Artificial Intelligence\",\n\"Operating System :: OS Independent\",\n],\n)\n"
    },
    {
        "package_name": "fake-factory-9999.9.9",
        "file_list": "__init__.py dependency_links.txt pbr.json PKG-INFO SOURCES.txt top_level.txt zip-safe LICENSE.txt MANIFEST.in PKG-INFO setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# coding=utf-8\n\nfrom setuptools import setup, find_packages\n\n\nversion = '9999.9.9'\n\npackage_name = 'fake-factory'\n\nerror = \"\"\"ERROR:\nThe `fake-factory` package was deprecated on December 15th, 2016.\nUse the `Faker` package instead.\"\"\"\n\nprint(error)\n\n\nsetup(\nname=package_name,\nversion=version,\ndescription=\"The `fake-factory` package was deprecated on December 15th, 2016. Use the `Faker` package instead.\",\nlong_description=error,\nclassifiers=[\n# See https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n'Development Status :: 7 - Inactive',\n'License :: OSI Approved :: MIT License'\n],\nauthor='joke2k',\nauthor_email='joke2k@gmail.com',\nurl='https:\/\/github.com\/joke2k\/faker',\nlicense='MIT License',\npackages=find_packages(),\nplatforms=[\"any\"],\nzip_safe=True,\n)\n"
    },
    {
        "package_name": "fakeredis-1.9.0",
        "file_list": "aioredis.py _aioredis1.py _aioredis2.py _async.py _commands.py _fakesocket.py _helpers.py _msgs.py _server.py _zset.py __init__.py LICENSE PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['fakeredis']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['redis<4.4', 'six>=1.16.0,<2.0.0', 'sortedcontainers>=2.4.0,<3.0.0']\n\nextras_require = \\\n{'aioredis': ['aioredis>=2.0.1,<3.0.0'], 'lua': ['lupa>=1.13,<2.0']}\n\nsetup_kwargs = {\n'name': 'fakeredis',\n'version': '1.9.0',\n'description': 'Fake implementation of redis API for testing purposes.',\n'long_description': 'fakeredis: A fake version of a redis-py\\n=======================================\\n\\n![badge](https:\/\/img.shields.io\/endpoint?url=https:\/\/gist.githubusercontent.com\/cunla\/b756396efb895f0e34558c980f1ca0c7\/raw\/fakeredis-py.json)\\n\\n- [fakeredis: A fake version of a redis-py](#fakeredis--a-fake-version-of-a-redis-py)\\n- [How to Use](#how-to-use)\\n - [Use to test django-rq](#use-to-test-django-rq)\\n- [Other limitations](#other-limitations)\\n- [Support for redis-py <4.2 with aioredis](#support-for-redis-py--42-with-aioredis)\\n + [aioredis 1.x](#aioredis-1x)\\n + [aioredis 2.x](#aioredis-2x)\\n- [Running the Tests](#running-the-tests)\\n- [Contributing](#contributing)\\n- [Alternatives](#alternatives)\\n\\nfakeredis is a pure-Python implementation of the redis-py python client\\nthat simulates talking to a redis server. This was created for a single\\npurpose: **to write unittests**. Setting up redis is not hard, but\\nmany times you want to write unittests that do not talk to an external server\\n(such as redis). This module now allows tests to simply use this\\nmodule as a reasonable substitute for redis.\\n\\nAlthough fakeredis is pure Python, you will need [lupa](https:\/\/pypi.org\/project\/lupa\/) if you want to run Lua\\nscripts (this includes features like ``redis.lock.Lock``, which are implemented\\nin Lua). If you install fakeredis with ``pip install fakeredis[lua]`` it will\\nbe automatically installed.\\n\\nFor a list of supported\/unsupported redis commands, see [REDIS_COMMANDS.md](REDIS_COMMANDS.md)\\n\\n# How to Use\\nFakeRedis can imitate Redis server version 6.x or 7.x - There are a few minor behavior differences. \\nIf you do not specify the version, version 7 is used by default.\\n\\nThe intent is for fakeredis to act as though you\\'re talking to a real\\nredis server. It does this by storing state internally.\\nFor example:\\n\\n```\\n>>> import fakeredis\\n>>> r = fakeredis.FakeStrictRedis(version=6)\\n>>> r.set(\\'foo\\', \\'bar\\')\\nTrue\\n>>> r.get(\\'foo\\')\\n\\'bar\\'\\n>>> r.lpush(\\'bar\\', 1)\\n1\\n>>> r.lpush(\\'bar\\', 2)\\n2\\n>>> r.lrange(\\'bar\\', 0, -1)\\n[2, 1]\\n```\\n\\nThe state is stored in an instance of `FakeServer`. If one is not provided at\\nconstruction, a new instance is automatically created for you, but you can\\nexplicitly create one to share state:\\n\\n```\\n>>> import fakeredis\\n>>> server = fakeredis.FakeServer()\\n>>> r1 = fakeredis.FakeStrictRedis(server=server)\\n>>> r1.set(\\'foo\\', \\'bar\\')\\nTrue\\n>>> r2 = fakeredis.FakeStrictRedis(server=server)\\n>>> r2.get(\\'foo\\')\\n\\'bar\\'\\n>>> r2.set(\\'bar\\', \\'baz\\')\\nTrue\\n>>> r1.get(\\'bar\\')\\n\\'baz\\'\\n>>> r2.get(\\'bar\\')\\n\\'baz\\'\\n```\\n\\nIt is also possible to mock connection errors so you can effectively test\\nyour error handling. Simply set the connected attribute of the server to\\n`False` after initialization.\\n\\n```\\n>>> import fakeredis\\n>>> server = fakeredis.FakeServer()\\n>>> server.connected = False\\n>>> r = fakeredis.FakeStrictRedis(server=server)\\n>>> r.set(\\'foo\\', \\'bar\\')\\nConnectionError: FakeRedis is emulating a connection error.\\n>>> server.connected = True\\n>>> r.set(\\'foo\\', \\'bar\\')\\nTrue\\n```\\n\\nFakeredis implements the same interface as `redis-py`, the\\npopular redis client for python, and models the responses\\nof redis 6.2 (although most new features are not supported).\\n\\n## Use to test django-rq\\n\\nThere is a need to override `django_rq.queues.get_redis_connection` with\\na method returning the same connection.\\n\\n```python\\nfrom fakeredis import FakeRedisConnSingleton\\n\\ndjango_rq.queues.get_redis_connection = FakeRedisConnSingleton()\\n```\\n\\n# Other limitations\\n\\nApart from unimplemented commands, there are a number of cases where fakeredis\\nwon\\'t give identical results to real redis. The following are differences that\\nare unlikely to ever be fixed; there are also differences that are fixable\\n(such as commands that do not support all features) which should be filed as\\nbugs in Github.\\n\\n1. Hyperloglogs are implemented using sets underneath. This means that the\\n `type` command will return the wrong answer, you can\\'t use `get` to retrieve\\n the encoded value, and counts will be slightly different (they will in fact be\\n exact).\\n\\n2. When a command has multiple error conditions, such as operating on a key of\\n the wrong type and an integer argument is not well-formed, the choice of\\n error to return may not match redis.\\n\\n3. The `incrbyfloat` and `hincrbyfloat` commands in redis use the C `long\\n double` type, which typically has more precision than Python\\'s `float`\\n type.\\n\\n4. Redis makes guarantees about the order in which clients blocked on blocking\\n commands are woken up. Fakeredis does not honour these guarantees.\\n\\n5. Where redis contains bugs, fakeredis generally does not try to provide exact\\n bug-compatibility. It\\'s not practical for fakeredis to try to match the set\\n of bugs in your specific version of redis.\\n\\n6. There are a number of cases where the behaviour of redis is undefined, such\\n as the order of elements returned by set and hash commands. Fakeredis will\\n generally not produce the same results, and in Python versions before 3.6\\n may produce different results each time the process is re-run.\\n\\n7. SCAN\/ZSCAN\/HSCAN\/SSCAN will not necessarily iterate all items if items are\\n deleted or renamed during iteration. They also won\\'t necessarily iterate in\\n the same chunk sizes or the same order as redis.\\n\\n8. DUMP\/RESTORE will not return or expect data in the RDB format. Instead the\\n `pickle` module is used to mimic an opaque and non-standard format.\\n **WARNING**: Do not use RESTORE with untrusted data, as a malicious pickle\\n can execute arbitrary code.\\n\\n# Support for redis-py <4.2 with aioredis\\n\\nAioredis is now in redis-py 4.2.0. But support is maintained until fakeredis 2 for older version of redis-py.\\n\\nYou can also use fakeredis to mock out [aioredis](https:\/\/aioredis.readthedocs.io\/). This is a much newer\\naddition to fakeredis (added in 1.4.0) with less testing, so your mileage may\\nvary. Both version 1 and version 2 (which have very different APIs) are\\nsupported. The API provided by fakeredis depends on the version of aioredis that is\\ninstalled.\\n\\n### aioredis 1.x\\n\\nExample:\\n\\n```\\n>>> import fakeredis.aioredis\\n>>> r = await fakeredis.aioredis.create_redis_pool()\\n>>> await r.set(\\'foo\\', \\'bar\\')\\nTrue\\n>>> await r.get(\\'foo\\')\\nb\\'bar\\'\\n```\\n\\nYou can pass a `FakeServer` as the first argument to `create_redis` or\\n`create_redis_pool` to share state (you can even share state with a\\n`fakeredis.FakeRedis`). It should even be safe to do this state sharing between\\nthreads (as long as each connection\/pool is only used in one thread).\\n\\nIt is highly recommended that you only use the aioredis support with\\nPython 3.5.3 or higher. Earlier versions will not work correctly with\\nnon-default event loops.\\n\\n### aioredis 2.x\\n\\nExample:\\n\\n```\\n>>> import fakeredis.aioredis\\n>>> r = fakeredis.aioredis.FakeRedis()\\n>>> await r.set(\\'foo\\', \\'bar\\')\\nTrue\\n>>> await r.get(\\'foo\\')\\nb\\'bar\\'\\n```\\n\\nThe support is essentially the same as for redis-py e.g., you can pass a\\n`server` keyword argument to the `FakeRedis` constructor.\\n\\n# Running the Tests\\n\\nTo ensure parity with the real redis, there are a set of integration tests\\nthat mirror the unittests. For every unittest that is written, the same\\ntest is run against a real redis instance using a real redis-py client\\ninstance. In order to run these tests you must have a redis server running\\non localhost, port 6379 (the default settings). **WARNING**: the tests will\\ncompletely wipe your database!\\n\\nFirst install poetry if you don\\'t have it, and then install all the dependencies:\\n\\n``` \\npip install poetry\\npoetry install\\n``` \\n\\nTo run all the tests:\\n\\n```\\npoetry run pytest -v\\n```\\n\\nIf you only want to run tests against fake redis, without a real redis::\\n\\n```\\npoetry run pytest -m fake\\n```\\n\\nBecause this module is attempting to provide the same interface as `redis-py`,\\nthe python bindings to redis, a reasonable way to test this to to take each\\nunittest and run it against a real redis server. fakeredis and the real redis\\nserver should give the same result. To run tests against a real redis instance\\ninstead::\\n\\n```\\npoetry run pytest -m real\\n```\\n\\nIf redis is not running and you try to run tests against a real redis server,\\nthese tests will have a result of \\'s\\' for skipped.\\n\\nThere are some tests that test redis blocking operations that are somewhat\\nslow. If you want to skip these tests during day to day development,\\nthey have all been tagged as \\'slow\\' so you can skip them by running::\\n\\n```\\npoetry run pytest -m \"not slow\"\\n```\\n\\n# Contributing\\n\\nContributions are welcome. Please see the\\n[contributing guide](.github\/CONTRIBUTING.md) for more details.\\nThe maintainer generally has very little time to work on fakeredis, so the\\nbest way to get a bug fixed is to contribute a pull request.\\n\\nIf you\\'d like to help out, you can start with any of the issues\\nlabeled with `Help wanted`.\\n\\n# Alternatives\\n\\nConsider using [redislite](https:\/\/redislite.readthedocs.io\/en\/latest\/) instead of fakeredis.\\nIt runs a real redis server and connects to it over a UNIX domain socket, so it will behave just like a real\\nserver. Another alternative is [birdisle](https:\/\/birdisle.readthedocs.io\/en\/latest\/), which\\nruns the redis code as a Python extension (no separate process), but which is currently unmaintained.\\n',\n'author': 'James Saryerwinnie',\n'author_email': 'js@jamesls.com',\n'maintainer': 'Daniel Moran',\n'maintainer_email': 'daniel.maruani@gmail.com',\n'url': 'https:\/\/github.com\/cunla\/fakeredis-py',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'extras_require': extras_require,\n'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "fastparquet-0.8.1",
        "file_list": ".gitignore .pylintrc api.py cencoding.c cencoding.pyx compression.py converted_types.py core.py dataframe.py encoding.py parquet.thrift ttypes.py __init__.py __init__.py schema.py speedups.c speedups.pyx thrift_structures.py util.py writer.py __init__.py dependency_links.txt pbr.json PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE Makefile MANIFEST.in PKG-INFO pyproject.toml README.rst readthedocs.yml requirements.txt setup.cfg setup.py",
        "setup.py": "\"\"\"setup.py - build script for parquet-python.\"\"\"\n\nimport os\nimport sys\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext as _build_ext\n\n\nclass build_ext(_build_ext):\n# Kudos to https:\/\/stackoverflow.com\/questions\/19919905\/how-to-bootstrap-numpy-installation-in-setup-py\/21621689\ndef finalize_options(self):\nimport builtins\n_build_ext.finalize_options(self)\n# Prevent numpy from thinking it is still in its setup process:\nbuiltins.__NUMPY_SETUP__ = False\nimport numpy\nself.include_dirs.append(numpy.get_include())\n\n\nallowed = ('--help-commands', '--version', 'egg_info', 'clean')\nif len(sys.argv) >= 2 and ('--help' in sys.argv[1:] or sys.argv[1] in allowed):\n# NumPy and cython are not required for these actions. They must succeed\n# so pip can install fastparquet when these requirements are not available.\nextra = {}\nelse:\nmodules_to_build = {\n'fastparquet.speedups': ['fastparquet\/speedups.pyx'],\n'fastparquet.cencoding': ['fastparquet\/cencoding.pyx']\n}\ntry:\nfrom Cython.Build import cythonize\ndef fix_exts(sources):\nreturn sources\nexcept ImportError:\ndef cythonize(modules, language_level):\nreturn modules\ndef fix_exts(sources):\nreturn [s.replace('.pyx', '.c') for s in sources]\n\nmodules = [\nExtension(mod, fix_exts(sources))\nfor mod, sources in modules_to_build.items()]\nextra = {'ext_modules': cythonize(modules, language_level=3)}\n\ninstall_requires = open('requirements.txt').read().strip().split('\\n')\n\nsetup(\nname='fastparquet',\nversion='0.8.1',\ndescription='Python support for Parquet file format',\nauthor='Martin Durant',\nauthor_email='mdurant@canaconda.com',\nurl='https:\/\/github.com\/dask\/fastparquet\/',\nlicense='Apache License 2.0',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: Implementation :: CPython',\n],\npackages=['fastparquet'],\ncmdclass={'build_ext': build_ext},\ninstall_requires=install_requires,\nsetup_requires=[\n'pytest-runner',\n'oldest-supported-numpy'\n],\nextras_require={\n'lzo': ['python-lzo'],\n},\ntests_require=[\n'pytest',\n],\nlong_description=(open('README.rst').read() if os.path.exists('README.rst')\nelse ''),\ninclude_package_data=True,\nexclude_package_data={'fastparquet': ['test\/*']},\npython_requires=\">=3.7,\",\n**extra\n)\n"
    },
    {
        "package_name": "fastprogress-1.0.3",
        "file_list": "CONTRIBUTING.md core.py fastprogress.py version.py _nbdev.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md settings.ini setup.cfg setup.py",
        "setup.py": "from pkg_resources import parse_version\nfrom configparser import ConfigParser\nimport setuptools\nassert parse_version(setuptools.__version__)>=parse_version('36.2')\n\n# note: all settings are in settings.ini; edit there, not here\nconfig = ConfigParser(delimiters=['='])\nconfig.read('settings.ini')\ncfg = config['DEFAULT']\n\ncfg_keys = 'version description keywords author author_email'.split()\nexpected = cfg_keys + \"lib_name user branch license status min_python audience language\".split()\nfor o in expected: assert o in cfg, \"missing expected setting: {}\".format(o)\nsetup_cfg = {o:cfg[o] for o in cfg_keys}\n\nlicenses = {\n'apache2': ('Apache Software License 2.0','OSI Approved :: Apache Software License'),\n}\nstatuses = [ '1 - Planning', '2 - Pre-Alpha', '3 - Alpha',\n'4 - Beta', '5 - Production\/Stable', '6 - Mature', '7 - Inactive' ]\npy_versions = '2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 3.10'.split()\n\nrequirements = cfg.get('requirements','').split()\nlic = licenses[cfg['license']]\nmin_python = cfg['min_python']\n\nsetuptools.setup(\nname = cfg['lib_name'],\nlicense = lic[0],\nclassifiers = [\n'Development Status :: ' + statuses[int(cfg['status'])],\n'Intended Audience :: ' + cfg['audience'].title(),\n'License :: ' + lic[1],\n'Natural Language :: ' + cfg['language'].title(),\n] + ['Programming Language :: Python :: '+o for o in py_versions[py_versions.index(min_python):]],\nurl = 'https:\/\/github.com\/{}\/{}'.format(cfg['user'],cfg['lib_name']),\npackages = setuptools.find_packages(),\ninclude_package_data = True,\ninstall_requires = requirements,\npython_requires = '>=' + cfg['min_python'],\nlong_description = open('README.md').read(),\nlong_description_content_type = 'text\/markdown',\nzip_safe = False,\nentry_points = { 'console_scripts': cfg.get('console_scripts','').split() },\n**setup_cfg)\n\n"
    },
    {
        "package_name": "faust-streaming-0.8.8",
        "file_list": "AUTHORS.md CHANGELOG.md CODE_OF_CONDUCT.md actor.py agent.py manager.py models.py replies.py __init__.py base.py router.py _attached.py __init__.py client_assignment.py cluster_assignment.py copartitioned_assignor.py leader_assignor.py partition_assignor.py __init__.py auth.py channels.py agents.py base.py clean_versions.py completion.py faust.py livecheck.py model.py models.py params.py reset.py send.py tables.py worker.py __init__.py sentry.py __init__.py events.py exceptions.py base.py django.py __init__.py joins.py app.py case.py exceptions.py locals.py models.py aiohttp.py __init__.py runners.py signals.py __init__.py base.py fields.py record.py tags.py typing.py __init__.py py.typed base.py datadog.py monitor.py prometheus.py statsd.py __init__.py codecs.py registry.py schemas.py __init__.py aerospike.py base.py memory.py rocksdb.py __init__.py streams.py base.py globaltable.py manager.py objects.py recovery.py sets.py table.py wrappers.py __init__.py topics.py base.py conductor.py consumer.py aiokafka.py __init__.py producer.py utils.py conductor.pyx __init__.py __init__.py agents.py app.py assignor.py auth.py channels.py codecs.py core.py enums.py events.py fixups.py joins.py models.py router.py sensors.py serializers.py base.py params.py sections.py settings.py __init__.py stores.py streams.py tables.py topics.py transports.py tuples.py web.py windows.py _env.py __init__.py codegen.py cron.py functional.py iso8601.py json.py admin.py api.py __init__.py __init__.py platforms.py spinners.py tables.py __init__.py tracing.py urls.py venusian.py _iso8601_python.py __init__.py graph.py production_index.py router.py stats.py tables.py __init__.py base.py blueprints.py base.py memory.py redis.py __init__.py cache.py exceptions.py __init__.py aiohttp.py __init__.py exceptions.py views.py __init__.py windows.py worker.py streams.pyx windows.pyx __init__.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md ci.txt dist.txt docs.txt aerospike.txt aiodns.txt aiomonitor.txt cchardet.txt ciso8601.txt cython.txt datadog.txt debug.txt eventlet.txt fast.txt orjson.txt prometheus.txt redis.txt rocksdb.txt sentry.txt setproctitle.txt statsd.txt uvloop.txt yaml.txt requirements.txt test.txt typecheck.txt setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\nimport os\nimport re\nimport sys\nfrom distutils.command.build_ext import build_ext\nfrom distutils.errors import CCompilerError, DistutilsExecError, DistutilsPlatformError\n\nfrom setuptools import Extension, find_packages, setup\n\ntry:\nfrom Cython.Build import cythonize\nexcept ImportError:\nUSE_CYTHON = False\nelse:\nUSE_CYTHON = os.environ.get(\"USE_CYTHON\", True)\n\n\nif os.environ.get(\"NO_CYTHON\"):\nUSE_CYTHON = False\n\nNAME = \"faust\"\nBUNDLES = {\n\"aiodns\",\n\"aiomonitor\",\n\"cchardet\",\n\"ciso8601\",\n\"cython\",\n\"datadog\",\n\"debug\",\n\"fast\",\n\"orjson\",\n\"prometheus\",\n\"redis\",\n\"rocksdb\",\n\"sentry\",\n\"setproctitle\",\n\"statsd\",\n\"uvloop\",\n\"eventlet\",\n\"yaml\",\n}\nCFLAGS = [\"-O2\"]\nLDFLAGS = []\nLIBRARIES = []\nE_UNSUPPORTED_PYTHON = NAME + \" 1.0 requires Python %%s or later!\"\n\nif sys.version_info < (3, 6):\nraise Exception(E_UNSUPPORTED_PYTHON % (\"3.6\",)) # NOQA\n\nfrom pathlib import Path # noqa\n\nREADME = Path(\"README.rst\")\n\n# -*- Compiler Flags -*-\n\nif sys.platform == \"win32\":\nLDFLAGS.append(\"ws2_32.lib\")\nelse:\nCFLAGS.extend([\"-Wall\", \"-Wsign-compare\", \"-Wconversion\"])\nLIBRARIES.append(\"z\")\n\n# -*- C Extensions -*-\next = \".pyx\" if USE_CYTHON else \".c\"\n\nextensions = [\nExtension(\n\"faust._cython.windows\",\n[\"faust\/_cython\/windows\" + ext],\nlibraries=LIBRARIES,\nextra_compile_args=CFLAGS,\nextra_link_args=LDFLAGS,\n),\nExtension(\n\"faust._cython.streams\",\n[\"faust\/_cython\/streams\" + ext],\nlibraries=LIBRARIES,\nextra_compile_args=CFLAGS,\nextra_link_args=LDFLAGS,\n),\nExtension(\n\"faust.transport._cython.conductor\",\n[\"faust\/transport\/_cython\/conductor\" + ext],\nlibraries=LIBRARIES,\nextra_compile_args=CFLAGS,\nextra_link_args=LDFLAGS,\n),\n]\n\n\nif USE_CYTHON:\nprint(\"---*--- USING CYTHON ---*---\")\nextensions = cythonize(extensions)\n\n\nclass BuildFailed(Exception):\npass\n\n\nclass ve_build_ext(build_ext):\n# This class allows C extension building to fail.\n\ndef run(self):\ntry:\nbuild_ext.run(self)\nexcept (DistutilsPlatformError, FileNotFoundError):\nraise BuildFailed()\n\ndef build_extension(self, ext):\ntry:\nbuild_ext.build_extension(self, ext)\nexcept (CCompilerError, DistutilsExecError, DistutilsPlatformError, ValueError):\nraise BuildFailed()\n\n\n# -*- Distribution Meta -*-\n\nre_meta = re.compile(r\"__(\\w+?)__\\s*=\\s*(.*)\")\nre_doc = re.compile(r'^\"\"\"(.+?)\"\"\"')\n\n\ndef add_default(m):\nattr_name, attr_value = m.groups()\nreturn ((attr_name, attr_value.strip(\"\\\"'\")),)\n\n\ndef add_doc(m):\nreturn ((\"doc\", m.groups()[0]),)\n\n\npats = {re_meta: add_default, re_doc: add_doc}\nhere = Path(__file__).parent.absolute()\nwith open(here \/ NAME \/ \"__init__.py\") as meta_fh:\nmeta = {}\nfor line in meta_fh:\nif line.strip() == \"# -eof meta-\":\nbreak\nfor pattern, handler in pats.items():\nm = pattern.match(line.strip())\nif m:\nmeta.update(handler(m))\n\n# -*- Installation Requires -*-\n\n\ndef strip_comments(comment):\nreturn comment.split(\"#\", 1)[0].strip()\n\n\ndef _pip_requirement(req, *root):\nif req.startswith(\"-r \"):\n_, path = req.split()\nreturn reqs(*root, *path.split(\"\/\"))\nreturn [req]\n\n\ndef _reqs(*f):\npath = (Path.cwd() \/ \"requirements\").joinpath(*f)\nwith path.open() as fh:\nreqs = [strip_comments(line) for line in fh.readlines()]\nreturn [_pip_requirement(r, *f[:-1]) for r in reqs if r]\n\n\ndef reqs(*f):\nreturn [req for subreq in _reqs(*f) for req in subreq]\n\n\ndef extras(*p):\n\"\"\"Parse requirement in the requirements\/extras\/ directory.\"\"\"\nreturn reqs(\"extras\", *p)\n\n\ndef extras_require():\n\"\"\"Get map of all extra requirements.\"\"\"\nreturn {x: extras(x + \".txt\") for x in BUNDLES}\n\n\nwith open(\"README.md\") as readme_file:\nlong_description = readme_file.read()\n\n\ndef do_setup(**kwargs):\nsetup(\nname=\"faust-streaming\",\nversion=meta[\"version\"],\ndescription=meta[\"doc\"],\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nauthor=meta[\"author\"],\nauthor_email=meta[\"contact\"],\nurl=meta[\"homepage\"],\nplatforms=[\"any\"],\nlicense=\"BSD 3-Clause\",\npackages=find_packages(exclude=[\"examples\", \"ez_setup\", \"tests\", \"tests.*\"]),\n# PEP-561: https:\/\/www.python.org\/dev\/peps\/pep-0561\/\npackage_data={\"faust\": [\"py.typed\"]},\ninclude_package_data=True,\npython_requires=\">=3.6.0\",\nzip_safe=False,\ninstall_requires=reqs(\"requirements.txt\"),\ntests_require=reqs(\"test.txt\"),\nextras_require=extras_require(),\nentry_points={\n\"console_scripts\": [\n\"faust = faust.cli.faust:cli\",\n],\n},\nproject_urls={\n\"Bug Reports\": \"https:\/\/github.com\/faust-streaming\/faust\/issues\",\n\"Source\": \"https:\/\/github.com\/faust-streaming\/faust\",\n\"Documentation\": \"https:\/\/fauststream.com\/en\/latest\",\n},\nkeywords=[\n\"stream\",\n\"processing\",\n\"asyncio\",\n\"distributed\",\n\"queue\",\n\"kafka\",\n],\nclassifiers=[\n\"Framework :: AsyncIO\",\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Natural Language :: English\",\n\"License :: OSI Approved :: BSD License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Operating System :: POSIX\",\n\"Operating System :: POSIX :: Linux\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Operating System :: POSIX :: BSD\",\n\"Operating System :: Microsoft :: Windows\",\n\"Topic :: System :: Networking\",\n\"Topic :: System :: Distributed Computing\",\n],\n**kwargs\n)\n\n\ntry:\ndo_setup(cmdclass={\"build_ext\": ve_build_ext}, ext_modules=extensions)\nexcept BuildFailed:\nprint(\"************************************************************\")\nprint(\"Cannot compile C accelerated modules, using pure python\")\nprint(\"************************************************************\")\ndo_setup()\n"
    },
    {
        "package_name": "fbprophet-0.7.1",
        "file_list": "diagnostics.py forecaster.py hdays.py make_holidays.py models.py plot.py serialize.py data.csv data2.csv serialized_model_v0.6.1.dev0.json test_diagnostics.py test_prophet.py test_serialize.py test_utilities.py __init__.py utilities.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md requirements.txt generate_holidays_file.py setup.cfg setup.py prophet.stan prophet.stan",
        "setup.py": "# Copyright (c) Facebook, Inc. and its affiliates.\n\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\nimport os.path\nimport platform\nimport sys\nimport os\nfrom pkg_resources import (\nnormalize_path,\nworking_set,\nadd_activation_listener,\nrequire,\n)\nfrom setuptools import setup, find_packages\nfrom setuptools.command.build_py import build_py\nfrom setuptools.command.develop import develop\nfrom setuptools.command.test import test as test_command\nfrom typing import List\n\nPLATFORM = 'unix'\nif platform.platform().startswith('Win'):\nPLATFORM = 'win'\n\nMODEL_DIR = os.path.join('stan', PLATFORM)\nMODEL_TARGET_DIR = os.path.join('fbprophet', 'stan_model')\n\n\ndef get_backends_from_env() -> List[str]:\nfrom fbprophet.models import StanBackendEnum\nreturn os.environ.get(\"STAN_BACKEND\", StanBackendEnum.PYSTAN.name).split(\",\")\n\n\ndef build_models(target_dir):\nfrom fbprophet.models import StanBackendEnum\nfor backend in get_backends_from_env():\nStanBackendEnum.get_backend_class(backend).build_model(target_dir, MODEL_DIR)\n\n\nclass BuildPyCommand(build_py):\n\"\"\"Custom build command to pre-compile Stan models.\"\"\"\n\ndef run(self):\nif not self.dry_run:\ntarget_dir = os.path.join(self.build_lib, MODEL_TARGET_DIR)\nself.mkpath(target_dir)\nbuild_models(target_dir)\n\nbuild_py.run(self)\n\n\nclass DevelopCommand(develop):\n\"\"\"Custom develop command to pre-compile Stan models in-place.\"\"\"\n\ndef run(self):\nif not self.dry_run:\ntarget_dir = os.path.join(self.setup_path, MODEL_TARGET_DIR)\nself.mkpath(target_dir)\nbuild_models(target_dir)\n\ndevelop.run(self)\n\n\nclass TestCommand(test_command):\nuser_options = [\n('test-module=', 'm', \"Run 'test_suite' in specified module\"),\n('test-suite=', 's',\n\"Run single test, case or suite (e.g. 'module.test_suite')\"),\n('test-runner=', 'r', \"Test runner to use\"),\n('test-slow', 'w', \"Test slow suites (default off)\"),\n]\n\ndef initialize_options(self):\nsuper(TestCommand, self).initialize_options()\nself.test_slow = False\n\ndef finalize_options(self):\nsuper(TestCommand, self).finalize_options()\nif self.test_slow is None:\nself.test_slow = getattr(self.distribution, 'test_slow', False)\n\n\"\"\"We must run tests on the build directory, not source.\"\"\"\n\ndef with_project_on_sys_path(self, func):\n# Ensure metadata is up-to-date\nself.reinitialize_command('build_py', inplace=0)\nself.run_command('build_py')\nbpy_cmd = self.get_finalized_command(\"build_py\")\nbuild_path = normalize_path(bpy_cmd.build_lib)\n\n# Build extensions\nself.reinitialize_command('egg_info', egg_base=build_path)\nself.run_command('egg_info')\n\nself.reinitialize_command('build_ext', inplace=0)\nself.run_command('build_ext')\n\nei_cmd = self.get_finalized_command(\"egg_info\")\n\nold_path = sys.path[:]\nold_modules = sys.modules.copy()\n\ntry:\nsys.path.insert(0, normalize_path(ei_cmd.egg_base))\nworking_set.__init__()\nadd_activation_listener(lambda dist: dist.activate())\nrequire('%s==%s' % (ei_cmd.egg_name, ei_cmd.egg_version))\nfunc()\nfinally:\nsys.path[:] = old_path\nsys.modules.clear()\nsys.modules.update(old_modules)\nworking_set.__init__()\n\nwith open('README.md', 'r', encoding='utf-8') as f:\nlong_description = f.read()\n\nwith open('requirements.txt', 'r') as f:\ninstall_requires = f.read().splitlines()\n\nsetup(\nname='fbprophet',\nversion='0.7.1',\ndescription='Automatic Forecasting Procedure',\nurl='https:\/\/facebook.github.io\/prophet\/',\nauthor='Sean J. Taylor <sjtz@pm.me>, Ben Letham <bletham@fb.com>',\nauthor_email='sjtz@pm.me',\nlicense='MIT',\npackages=find_packages(),\nsetup_requires=[\n],\ninstall_requires=install_requires,\npython_requires='>=3',\nzip_safe=False,\ninclude_package_data=True,\ncmdclass={\n'build_py': BuildPyCommand,\n'develop': DevelopCommand,\n'test': TestCommand,\n},\ntest_suite='fbprophet.tests',\nclassifiers=[\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n],\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\n)\n"
    },
    {
        "package_name": "ffmpy-0.3.0",
        "file_list": "dependency_links.txt PKG-INFO SOURCES.txt top_level.txt ffmpy.py PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "from setuptools import setup\nfrom setuptools.command.test import test as TestCommand # noqa\n\nfrom ffmpy import __version__\n\nsetup(\nname=\"ffmpy\",\nversion=__version__,\ndescription=\"A simple Python wrapper for ffmpeg\",\nlong_description=open(\"README.rst\").read(),\nauthor=\"Andrii Yurchuk\",\nauthor_email=\"ay@mntw.re\",\nlicense=\"MIT\",\nurl=\"https:\/\/github.com\/Ch00k\/ffmpy\",\npy_modules=[\"ffmpy\"],\nclassifiers=[\n\"Topic :: Multimedia :: Sound\/Audio\",\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Natural Language :: English\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: POSIX\",\n\"Operating System :: POSIX :: BSD\",\n\"Operating System :: POSIX :: Linux\",\n\"Operating System :: MacOS :: MacOS X\",\n],\nkeywords=\"ffmpeg ffprobe wrapper audio video transcoding\",\n)\n"
    },
    {
        "package_name": "findspark-2.0.1",
        "file_list": "CHANGELOG.md dependency_links.txt PKG-INFO SOURCES.txt top_level.txt findspark.py LICENSE.md MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport sys\n\nfrom distutils.core import setup\n\nif any(arg.startswith('bdist') for arg in sys.argv):\nimport setuptools\n\nversion_ns = {}\nwith open('findspark.py') as f:\nfor line in f:\nif line.startswith('__version__'):\nexec(line, version_ns)\nbreak\n\nsetup(\nname='findspark',\nversion=version_ns['__version__'],\npy_modules=['findspark'],\ndescription=\"Find pyspark to make it importable.\",\nlong_description=\"\"\"\nProvides findspark.init() to make pyspark importable as a regular library.\n\"\"\",\nlicense=\"BSD (3-clause)\",\nauthor=\"Min RK\",\nauthor_email=\"benjaminrk@gmail.com\",\nurl=\"https:\/\/github.com\/minrk\/findspark\",\n)"
    },
    {
        "package_name": "firebase_admin-5.2.0",
        "file_list": "auth.py credentials.py db.py exceptions.py firestore.py instance_id.py messaging.py ml.py project_management.py storage.py tenant_mgt.py _auth_client.py _auth_providers.py _auth_utils.py _gapic_utils.py _http_client.py _messaging_encoder.py _messaging_utils.py _rfc3339.py _sseclient.py _token_gen.py _user_identifier.py _user_import.py _user_mgt.py _utils.py __about__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# Copyright 2017 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Setup file for distribution artifacts.\"\"\"\nfrom __future__ import print_function\n\nfrom os import path\nimport sys\n\nfrom setuptools import setup\n\n\n(major, minor) = (sys.version_info.major, sys.version_info.minor)\nif major != 3 or minor < 6:\nprint('firebase_admin requires python >= 3.6', file=sys.stderr)\nsys.exit(1)\n\n# Read in the package metadata per recommendations from:\n# https:\/\/packaging.python.org\/guides\/single-sourcing-package-version\/\nabout_path = path.join(path.dirname(path.abspath(__file__)), 'firebase_admin', '__about__.py')\nabout = {}\nwith open(about_path) as fp:\nexec(fp.read(), about) # pylint: disable=exec-used\n\n\nlong_description = ('The Firebase Admin Python SDK enables server-side (backend) Python developers '\n'to integrate Firebase into their services and applications.')\ninstall_requires = [\n'cachecontrol>=0.12.6',\n'google-api-core[grpc] >= 1.22.1, < 3.0.0dev; platform.python_implementation != \"PyPy\"',\n'google-api-python-client >= 1.7.8',\n'google-cloud-firestore>=2.1.0; platform.python_implementation != \"PyPy\"',\n'google-cloud-storage>=1.37.1',\n]\n\nsetup(\nname=about['__title__'],\nversion=about['__version__'],\ndescription='Firebase Admin Python SDK',\nlong_description=long_description,\nurl=about['__url__'],\nauthor=about['__author__'],\nlicense=about['__license__'],\nkeywords='firebase cloud development',\ninstall_requires=install_requires,\npackages=['firebase_admin'],\npython_requires='>=3.6',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Topic :: Software Development :: Build Tools',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'License :: OSI Approved :: Apache Software License',\n],\n)\n"
    },
    {
        "package_name": "fireblocks_sdk-1.17.0",
        "file_list": "api_types.py sdk.py sdk_token_provider.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from distutils.core import setup\nsetup(\nname = 'fireblocks_sdk',\npackages = ['fireblocks_sdk'],\nversion = '1.17.0',\nlicense='MIT',\ndescription = 'Fireblocks python SDK',\nlong_description=\"\"\"Fireblocks python SDK\"\"\",\nlong_description_content_type='text\/markdown',\nurl = 'https:\/\/github.com\/fireblocks\/fireblocks-sdk-py',\ndownload_url = 'https:\/\/github.com\/fireblocks\/fireblocks-sdk-py\/archive\/v1.17.0.tar.gz',\nkeywords = ['Fireblocks', 'SDK'],\ninstall_requires=[\n'PyJWT>=2.3.0',\n'cryptography>=2.7',\n'requests>=2.22.0',\n],\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'Topic :: Software Development',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 3.6',\n],\n)\n"
    },
    {
        "package_name": "flake8-5.0.4",
        "file_list": "CONTRIBUTING.rst CONTRIBUTORS.txt conf.py faq.rst glossary.rst index.rst checker.rst cli.rst contributing.rst formatters.rst index.rst option_handling.rst plugin_handling.rst releases.rst start-to-finish.rst utils.rst writing-code.rst writing-documentation.rst formatters.rst index.rst plugin-parameters.rst registering-plugins.rst 0.6.0.rst 0.7.0.rst 0.8.0.rst 0.9.0.rst 1.0.0.rst 1.1.0.rst 1.2.0.rst 1.3.0.rst 1.3.1.rst 1.4.0.rst 1.5.0.rst 1.6.0.rst 1.6.1.rst 1.6.2.rst 1.7.0.rst 2.0.0.rst 2.1.0.rst 2.2.0.rst 2.2.1.rst 2.2.2.rst 2.2.3.rst 2.2.4.rst 2.2.5.rst 2.3.0.rst 2.4.0.rst 2.4.1.rst 2.5.0.rst 2.5.1.rst 2.5.2.rst 2.5.3.rst 2.5.4.rst 2.5.5.rst 2.6.0.rst 2.6.1.rst 2.6.2.rst 3.0.0.rst 3.0.1.rst 3.0.2.rst 3.0.3.rst 3.0.4.rst 3.1.0.rst 3.1.1.rst 3.2.0.rst 3.2.1.rst 3.3.0.rst 3.4.0.rst 3.4.1.rst 3.5.0.rst 3.6.0.rst 3.7.0.rst 3.7.1.rst 3.7.2.rst 3.7.3.rst 3.7.4.rst 3.7.5.rst 3.7.6.rst 3.7.7.rst 3.7.8.rst 3.7.9.rst 3.8.0.rst 3.8.1.rst 3.8.2.rst 3.8.3.rst 3.8.4.rst 3.9.0.rst 3.9.1.rst 3.9.2.rst 4.0.0.rst 4.0.1.rst 5.0.0.rst 5.0.1.rst 5.0.2.rst 5.0.3.rst 5.0.4.rst index.rst configuration.rst error-codes.rst index.rst invocation.rst options.rst python-api.rst using-hooks.rst using-plugins.rst violations.rst LICENSE MANIFEST.in PKG-INFO pytest.ini README.rst setup.cfg setup.py legacy.py __init__.py checker.py defaults.py discover_files.py exceptions.py base.py default.py _windows_color.py __init__.py application.py cli.py debug.py options.py __init__.py aggregator.py config.py manager.py __init__.py finder.py pycodestyle.py pyflakes.py reporter.py __init__.py processor.py statistics.py style_guide.py utils.py violation.py _compat.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt conftest.py multi_file_diff single_file_diff two_file_diff aplugin.py __init__.py test_aggregator.py test_api_legacy.py test_checker.py test_main.py test_plugins.py __init__.py conftest.py finder_test.py pycodestyle_test.py reporter_test.py __init__.py test_application.py test_base_formatter.py test_checker_manager.py test_debug.py test_decision_engine.py test_discover_files.py test_exceptions.py test_filenameonly_formatter.py test_file_checker.py test_file_processor.py test_legacy_api.py test_main_options.py test_nothing_formatter.py test_option.py test_options_config.py test_option_manager.py test_pyflakes_codes.py test_statistics.py test_style_guide.py test_utils.py test_violation.py __init__.py __init__.py tox.ini",
        "setup.py": "\"\"\"Packaging logic for Flake8.\"\"\"\nimport os\nimport sys\n\nimport setuptools\n\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), \"src\"))\n\nsetuptools.setup()\n"
    },
    {
        "package_name": "flake8-aaa-0.12.2",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py act_node.py block.py checker.py command_line.py exceptions.py function.py helpers.py line_markers.py multi_node_block.py types.py __about__.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "import os\n\nfrom setuptools import find_packages, setup\n\nbasedir = os.path.dirname(__file__)\n\n\ndef readme():\nwith open(os.path.join(basedir, 'README.rst')) as f:\nreturn f.read()\n\n\nabout = {}\nwith open(os.path.join(basedir, 'src', 'flake8_aaa', '__about__.py')) as f:\nexec(f.read(), about) # yapf: disable\n\nsetup(\n# --- META ---\nname=about['__iam__'],\nversion=about['__version__'],\ndescription=about['__description__'],\nlicense='MIT',\nlong_description=readme(),\nauthor='James Cooke',\nauthor_email='github@jamescooke.info',\nurl='https:\/\/github.com\/jamescooke\/flake8-aaa',\n\n# --- Python ---\npackages=find_packages('src'),\npackage_dir={'': 'src'},\npython_requires='>=3.7, <4',\ninstall_requires=[\n'asttokens >= 2',\n],\nentry_points={\n'flake8.extension': [\n'AAA = flake8_aaa:Checker',\n],\n},\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Framework :: Flake8',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 3 :: Only',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python',\n],\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "flake8-breakpoint-1.1.0",
        "file_list": "errors.py plugin.py visitors.py __init__.py LICENSE PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom distutils.core import setup\n\npackages = \\\n['flake8_breakpoint']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['flake8-plugin-utils>=1.0,<2.0']\n\nentry_points = \\\n{u'flake8.extension': ['B60 = flake8_breakpoint.plugin:BreakpointPlugin']}\n\nsetup_kwargs = {\n'name': 'flake8-breakpoint',\n'version': '1.1.0',\n'description': 'Flake8 plugin that check forgotten breakpoints',\n'long_description': '# flake8-breakpoint\\n\\n[![pypi](https:\/\/badge.fury.io\/py\/flake8-breakpoint.svg)](https:\/\/pypi.org\/project\/flake8-breakpoint)\\n[![Python: 3.6+](https:\/\/img.shields.io\/badge\/Python-3.6+-blue.svg)](https:\/\/pypi.org\/project\/flake8-breakpoint)\\n[![Downloads](https:\/\/img.shields.io\/pypi\/dm\/flake8-breakpoint.svg)](https:\/\/pypistats.org\/packages\/flake8-breakpoint)\\n[![Build Status](https:\/\/travis-ci.org\/Afonasev\/flake8-breakpoint.svg?branch=master)](https:\/\/travis-ci.org\/Afonasev\/flake8-breakpoint)\\n[![Code coverage](https:\/\/codecov.io\/gh\/afonasev\/flake8-breakpoint\/branch\/master\/graph\/badge.svg)](https:\/\/codecov.io\/gh\/afonasev\/flake8-breakpoint)\\n[![License: MIT](https:\/\/img.shields.io\/badge\/License-MIT-green.svg)](https:\/\/en.wikipedia.org\/wiki\/MIT_License)\\n[![Code style: black](https:\/\/img.shields.io\/badge\/code%20style-black-000000.svg)](https:\/\/github.com\/ambv\/black)\\n\\nFlake8 plugin that check forgotten breakpoints.\\n\\n## Installation\\n\\n```bash\\npip install flake8-breakpoint\\n```\\n\\n## Errors\\n\\n* B601 builtin function \"breakpoint\" found\\n\\n```python\\ndef function():\\n breakpoint() # error!\\n```\\n\\n* B602 import of debug module found\\n\\n```python\\ndef function():\\n import pdb # error! or ipdb\/pudb\\n```\\n\\n## License\\n\\nMIT\\n\\n## Change Log\\n\\nUnreleased\\n-----\\n\\n* ...\\n\\n1.1.0 - 2019-05-23\\n-----\\n\\n* update flask_plugin_utils version to 1.0\\n\\n1.0.0 - 2019-04-02\\n-----\\n\\n* initial\\n',\n'author': 'Evgeniy Afonasev',\n'author_email': 'ea.afonasev@gmail.com',\n'url': 'https:\/\/pypi.org\/project\/flake8-breakpoint',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'entry_points': entry_points,\n'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "flake8-debugger-4.1.2",
        "file_list": "flake8_debugger.py LICENCE PKG-INFO pyproject.toml README.md setup.py test_linter.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\nmodules = \\\n['flake8_debugger']\ninstall_requires = \\\n['flake8>=3.0', 'pycodestyle']\n\nentry_points = \\\n{'flake8.extension': ['T100 = flake8_debugger:DebuggerChecker']}\n\nsetup_kwargs = {\n'name': 'flake8-debugger',\n'version': '4.1.2',\n'description': 'ipdb\/pdb statement checker plugin for flake8',\n'long_description': 'Flake8 debugger plugin\\n======================\\n\\nCheck for pdb;idbp imports and set traces, as well as `from IPython.terminal.embed import InteractiveShellEmbed` and `InteractiveShellEmbed()()`.\\n\\nThis module provides a plugin for ``flake8``, the Python code checker.\\n\\n\\nInstallation\\n------------\\n\\nYou can install or upgrade ``flake8-debugger`` with these commands::\\n\\n $ pip install flake8-debugger\\n $ pip install --upgrade flake8-debugger\\n\\n\\nPlugin for Flake8\\n-----------------\\n\\nWhen both ``flake8 2.2`` and ``flake8-debugger`` are installed, the plugin is\\navailable in ``flake8``::\\n\\n $ flake8 --version\\n 2.0 (pep8: 1.4.5, flake8-debugger: 1.0, pyflakes: 0.6.1)\\n\\n\\nChanges\\n-------\\n\\n##### 4.1.2 - 2022-04-30\\n\\n* Add tests to bundle.\\n\\n##### 4.1.1 - 2022-04-30\\n\\n* Add tests to bundle.\\n\\n##### 4.1.0 - 2022-04-30\\n\\n* Drop support for python 3.6 and remove special handling code.\\n* bundle licence file.\\n\\n##### 4.0.0 - 2020-11-29\\n\\n* Opted back into using Poetry now that the existing issues have been fixed.\\n* Python 2.7 support was no officially dropped.\\n\\n##### 3.2.1 - 2019-10-31\\n\\n* Swapped back from poetry to setup.py :(....python ecosystem issues....\\n\\n##### 3.2.0 - 2019-10-15\\n\\n* Forgot to add `breakpoint` support to the last changelog entry as well as fixing a bug introduced into that version that flagged `import builtins` as noteworthy.\\n\\n\\n##### 3.1.1 - 2019-10-12\\n\\n* Fix reading from stdin when it is closed (requires flake8 > 2.1).\\n* Swapped to poetry from setup.py\\n* Ran black on the repository\\n\\n##### 3.1.0 - 2018-02-11\\n* Add a framework classifier for use in pypi.org\\n* Fix entry_point in setup.py leaving it off by default again\\n* Detect __import__ debugger statements\\n* Add support for `pudb` detection\\n\\n##### 3.0.0 - 2017-05-11\\n* fix the refactor of the detector in 2.0.0 that was removed from pypi.\\n* fix a flake8 issue that had it turned off by default.\\n\\n\\n##### 2.0.0 - 2016-09-19\\n* refactor detector\\n* drop official support for python 2.6 and 3.3\\n\\n\\n##### 1.4.0 - 2015-05-18\\n* refactor detector, run tests in python 2.6, 2.7 and 3.4 as well as adding a check for InteractiveShellEmbed.\\n\\n##### 1.3.2 - 2014-11-04\\n* more tests, fix edge case and debugger identification.\\n\\n##### 1.3.1 - 2014-11-04\\n* more tests, a little refactoring and improvements in catching.\\n\\n##### 1.3 - 2014-11-04\\n* using ast instead of regular expressions\\n\\n##### 1.2 - 2014-06-30\\n* Added a few simple tests\\n\\n##### 1.1 - 2014-06-30\\n* First release\\n\\n##### 1.0 - 2014-06-30\\n* Whoops\\n',\n'author': 'Joseph Kahn',\n'author_email': 'josephbkahn@gmail.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/jbkahn\/flake8-debugger',\n'py_modules': modules,\n'install_requires': install_requires,\n'entry_points': entry_points,\n'python_requires': '>=3.7',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "flake8-fixme-1.1.1",
        "file_list": "metadata.py utils.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# coding: utf-8\n\nfrom __future__ import with_statement\n\nfrom setuptools import setup\n\nfrom flake8_fixme.metadata import CODE_STEM, NAME, VERSION\n\n\ndef get_readme() -> str:\nwith open(\"README.md\") as readme_handle:\nreturn readme_handle.read()\n\n\nsetup(\nname=NAME,\nversion=VERSION,\ndescription=\"Check for FIXME, TODO and other temporary developer notes. Plugin for flake8.\", # noqa: T\nlong_description=get_readme(),\nlong_description_content_type=\"text\/markdown\",\nkeywords=\"flake8 plugin fixme todo xxx hack\",\nauthor=\"Tom Milligan\",\nauthor_email=\"tommilligan@users.noreply.github.com\",\nurl=\"https:\/\/github.com\/tommilligan\/flake8-fixme\",\nlicense=\"Apache-2.0\",\npackages=[\"flake8_fixme\"],\ninstall_requires=[],\nzip_safe=False,\nentry_points={\"flake8.extension\": [\"{} = flake8_fixme:check\".format(CODE_STEM)]},\nclassifiers=[\n\"Framework :: Flake8\",\n\"Intended Audience :: Developers\",\n\"Development Status :: 5 - Production\/Stable\",\n\"Operating System :: OS Independent\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Topic :: Software Development :: Quality Assurance\",\n],\n)\n"
    },
    {
        "package_name": "flake8-literal-1.2.6",
        "file_list": "checker.py quote_checker.py raw_checker.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "\"\"\"Define PyPI package.\"\"\"\n\nimport flake8_literal\n\nimport setuptools\n\n\nwith open('README.md', 'r') as readme_file:\nlong_description = readme_file.read()\n\nsetuptools.setup(\nname='flake8-literal',\nversion='1.2.6',\nauthor='Peter Linss',\nauthor_email='pypi@linss.com',\ndescription='Flake8 string literal validation',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nurl='https:\/\/github.com\/plinss\/flake8-literal\/',\n\npackages=['flake8_literal'],\npackage_data={'flake8_literal': ['py.typed']},\n\ninstall_requires=[\n'flake8>=3.8.0,<6.0',\n'importlib_metadata>=4.0.0,<5.0.0;python_version<\"3.8.0\"',\n'typing_extensions>=3.7.4.2',\n],\nextras_require={\n'dev': [\n'mypy',\n'flake8<5.0',\n'flake8-annotations',\n'flake8-bandit',\n'flake8-bugbear',\n'flake8-commas',\n'flake8-comprehensions',\n'flake8-continuation',\n'flake8-datetimez',\n'flake8-docstrings',\n'flake8-import-order',\n'flake8-literal',\n'flake8-noqa',\n'flake8-polyfill',\n'flake8-postponed-annotations',\n'flake8-requirements',\n# 'flake8-smart-tabs',\n'flake8-tabs',\n'flake8-typechecking-import',\n'flake8-use-fstring',\n'pep8-naming',\n],\n'test': [],\n},\nclassifiers=[\n'Framework :: Flake8',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Software Development :: Quality Assurance',\n],\npython_requires='>=3.7',\nentry_points={\n'flake8.extension': [\nf'{flake8_literal.quote_checker_prefix} = flake8_literal.quote_checker:QuoteChecker',\nf'{flake8_literal.raw_checker_prefix} = flake8_literal.raw_checker:RawChecker',\n],\n},\n)\n"
    },
    {
        "package_name": "flake8-print-5.0.0",
        "file_list": "flake8_print.py LICENCE PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\nmodules = \\\n['flake8_print']\ninstall_requires = \\\n['flake8>=3.0', 'pycodestyle']\n\nentry_points = \\\n{'flake8.extension': ['T20 = flake8_print:PrintChecker']}\n\nsetup_kwargs = {\n'name': 'flake8-print',\n'version': '5.0.0',\n'description': 'print statement checker plugin for flake8',\n'long_description': \"Flake8 print plugin\\n===================\\n\\nCheck for Print statements in python files.\\n\\nThis module provides a plugin for ``flake8``, the Python code checker.\\n\\n\\nInstallation\\n------------\\n\\nYou can install or upgrade ``flake8-print`` with these commands::\\n\\n $ pip install flake8-print\\n $ pip install --upgrade flake8-print\\n\\n\\nPlugin for Flake8\\n-----------------\\n\\nWhen both ``flake8 2.4.1`` and ``flake8-print`` are installed, the plugin is\\navailable in ``flake8``::\\n\\n $ flake8 --version\\n 2.4.1 (pep8: 1.5.7, flake8-print: 2.0.0, mccabe: 0.3.1, pyflakes: 0.8.1)\\n\\nFlake8 allows disabling some tests based on the folder:\\n\\n```\\n[flake8]\\nper-file-ignores =\\n scripts\/*: T20\\n cli.py: T20\\n```\\n\\nError codes\\n-----------\\n\\n| Error Code | Description |\\n| ----------- | ------------------------------------ |\\n| T201 | print found |\\n| T203 | pprint found |\\n| T204 | pprint declared |\\n\\n\\nChanges\\n-------\\n\\n##### 5.0.0 - 2022-04-30\\n\\n* Move namespace from T0* to T2* to avoid collision with other library using same error code.\\n* Remove python 2 specific code paths, error messages and six usage.\\n\\n##### 4.0.1 - 2022-04-30\\n\\n* Fixing bug with noqa detection by removing manual detection and relying on flake8 itself.\\n\\n##### 4.0.0 - 2020-11-29\\n\\n* Opted back into using Poetry now that the existing issues have been fixed.\\n* Python 2.7 support was now officially dropped.\\n\\n##### 3.1.4 - 2019-1-11\\n\\n* Fix bug introduced in 3.1.3\\n* Support for `nopep8` comments\\n\\n##### 3.1.3 - 2019-31-10\\n\\n* Swapped back from poetry to setup.py :(....python ecosystem issues....\\n* single function refactor code\\n\\n##### 3.1.1 - 2019-03-12\\n\\n* Fix reading from stdin when it is closed (requires flake8 > 2.1).\\n* Add error codes to ReadMe.\\n* Swapped to poetry from setup.py\\n* Ran black on the repository\\n\\n##### 3.1.0 - 2018-02-11\\n* Add a framework classifier for use in pypi.org\\n* Fix entry_point in setup.py leaving it off by default again.\\n\\n##### 3.0.1 - 2017-11-06\\n* Fix conflict in setup.py leaving it off by default again.\\n* Fix bug in name code.\\n\\n##### 3.0.0 - 2017-11-05\\n* Remove some of the python 2\/3 message differentiation.\\n* Use an AST rather than a logical line checker with a regex.\\n* pprint support.\\n* Loss of multiline noqa support, until there is a way to use both the AST and have flake8 provide the noqa lines.\\n\\n\\n##### 2.0.2 - 2016-02-29\\n* Fix ReadMe for pipy\\n* Refactor, DRY it up.\\n* Update python 2 vs python 3 print statement styles.\\n\\n##### 2.0.1 - 2015-11-21\\n* Add back the decorator to fix the `flake8 --version` call.\\n\\n##### 2.0 - 2015-11-10\\n* Support noqa at end of multiline print statement\\n* Performance improvements\\n* Removed PrintStatementChecker class and other functions\\n* Added T101 for 'Python 2.x reserved word print used.'\\n* Added testing for Python 3.3 and 3.5, and different flake8 versions\\n\\n##### 1.6.1 - 2015-05-22\\n* Fix bug introduced in 1.6.\\n\\n##### 1.6 - 2015-05-18\\n* Added proper support for python3 and testing for python 2.6, 2.7 and 3.4\\n\\n##### 1.5 - 2014-11-04\\n* Added python2.6 support. Thanks @zoidbergwill\\n\\n##### 1.4 - 2014-10-06\\n* Apped noqa support\\n\\n##### 1.3 - 2014-09-27\\n* Dropped noqa support\\n* Support for multiline comments and less false positives\\n\\n##### 1.2 - 2014-06-30\\n* Does not catch the word print in single line strings\\n* Does not catch inline comments with print in it\\n* Added tests\\n\\n##### 1.1 - 2014-06-30\\n* First release\\n\\n##### 1.0 - 2014-06-30\\n* Whoops\\n\",\n'author': 'Joseph Kahn',\n'author_email': 'josephbkahn@gmail.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/jbkahn\/flake8-print',\n'py_modules': modules,\n'install_requires': install_requires,\n'entry_points': entry_points,\n'python_requires': '>=3.7',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "flake8-pyi-22.8.1",
        "file_list": ".flake8 CHANGELOG.md CONTRIBUTING.md dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyi.py pyproject.toml README.md setup.cfg setup.py aliases.pyi attribute_annotations.pyi calls.pyi classdefs.pyi comparisons.pyi defaults.pyi del.pyi emptyclasses.pyi emptyfunctions.pyi exit_methods.pyi forward_refs.pyi forward_refs_annassign.pyi imports.pyi names_requiring_values.pyi pep604_union_types.pyi quotes.pyi sysplatform.pyi sysversioninfo.pyi test_pyi_files.py typevar.pyi type_comments.pyi union_duplicates.pyi unused_protocols.pyi vanilla_flake8_not_clean_forward_refs.pyi",
        "setup.py": "# Copyright (C) 2016 \u0141ukasz Langa\n\nimport ast\nimport os\nimport re\nimport sys\n\nfrom setuptools import setup\n\nassert sys.version_info >= (3, 7, 0), \"flake8-pyi requires Python 3.7+\"\n\n\ncurrent_dir = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(current_dir, \"README.md\"), encoding=\"utf8\") as ld_file:\nlong_description = ld_file.read()\n\n\n_version_re = re.compile(r\"__version__\\s+=\\s+(?P<version>.*)\")\n\n\nwith open(os.path.join(current_dir, \"pyi.py\"), \"r\") as f:\nversion = _version_re.search(f.read()).group(\"version\")\nversion = str(ast.literal_eval(version))\n\n\nsetup(\nname=\"flake8-pyi\",\nversion=version,\ndescription=\"A plugin for flake8 to enable linting .pyi files.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nkeywords=\"flake8 pyi bugs pyflakes pylint linter qa\",\nauthor=\"\u0141ukasz Langa\",\nauthor_email=\"lukasz@langa.pl\",\nurl=\"https:\/\/github.com\/ambv\/flake8-pyi\",\nlicense=\"MIT\",\npy_modules=[\"pyi\"],\nzip_safe=False,\npython_requires=\">=3.7\",\ninstall_requires=[\n\"flake8 >= 3.2.1, < 6.0.0\",\n\"pyflakes >= 2.1.1\",\n'ast-decompiler <1.0; python_version < \"3.9\"',\n],\ntest_suite=\"tests.test_pyi\",\nclassifiers=[\n\"Development Status :: 3 - Alpha\",\n\"Environment :: Console\",\n\"Framework :: Flake8\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3.11\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Topic :: Software Development :: Quality Assurance\",\n],\nentry_points={\"flake8.extension\": [\"Y0 = pyi:PyiTreeChecker\"]},\n)\n"
    },
    {
        "package_name": "flake8-pytest-style-1.6.0",
        "file_list": "config.py errors.py plugin.py py.typed utils.py assertion.py fail.py fixtures.py imports.py marks.py parametrize.py patch.py raises.py __init__.py __init__.py LICENSE PKG-INFO pyproject.toml README-pypi.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['flake8_pytest_style', 'flake8_pytest_style.visitors']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['flake8-plugin-utils>=1.3.2,<2.0.0']\n\nentry_points = \\\n{'flake8.extension': ['PT = flake8_pytest_style.plugin:PytestStylePlugin']}\n\nsetup_kwargs = {\n'name': 'flake8-pytest-style',\n'version': '1.6.0',\n'description': 'A flake8 plugin checking common style issues or inconsistencies with pytest-based tests.',\n'long_description': \"# flake8-pytest-style\\n\\n[![pypi](https:\/\/badge.fury.io\/py\/flake8-pytest-style.svg)](https:\/\/pypi.org\/project\/flake8-pytest-style)\\n[![Python: 3.6+](https:\/\/img.shields.io\/badge\/Python-3.6+-blue.svg)](https:\/\/pypi.org\/project\/flake8-pytest-style)\\n[![Downloads](https:\/\/img.shields.io\/pypi\/dm\/flake8-pytest-style.svg)](https:\/\/pypistats.org\/packages\/flake8-pytest-style)\\n[![Build Status](https:\/\/github.com\/m-burst\/flake8-pytest-style\/actions\/workflows\/ci.yml\/badge.svg?branch=master)](https:\/\/github.com\/m-burst\/flake8-pytest-style\/actions\/workflows\/ci.yml)\\n[![Code coverage](https:\/\/codecov.io\/gh\/m-burst\/flake8-pytest-style\/branch\/master\/graph\/badge.svg)](https:\/\/codecov.io\/gh\/m-burst\/flake8-pytest-style)\\n[![License: MIT](https:\/\/img.shields.io\/badge\/License-MIT-green.svg)](https:\/\/en.wikipedia.org\/wiki\/MIT_License)\\n[![Code style: black](https:\/\/img.shields.io\/badge\/code%20style-black-000000.svg)](https:\/\/github.com\/ambv\/black)\\n\\n## Description\\n\\nA `flake8` plugin checking common style issues or inconsistencies with `pytest`-based tests.\\n\\nCurrently the following errors are reported:\\n\\n| Code | Description |\\n| ------- | ----------- |\\n| [PT001] | use @pytest.fixture() over @pytest.fixture <br> (configurable by `pytest-fixture-no-parentheses`) |\\n| [PT002] | configuration for fixture '{name}' specified via positional args, use kwargs |\\n| [PT003] | scope='function' is implied in @pytest.fixture() |\\n| [PT004] | fixture '{name}' does not return anything, add leading underscore |\\n| [PT005] | fixture '{name}' returns a value, remove leading underscore |\\n| [PT006] | wrong name(s) type in @pytest.mark.parametrize, expected {expected_type} <br> (configurable by `pytest-parametrize-names-type`) |\\n| [PT007] | wrong values type in @pytest.mark.parametrize, expected {expected_type} <br> (configurable by `pytest-parametrize-values-type` and `pytest-parametrize-values-row-type`) |\\n| [PT008] | use return_value= instead of patching with lambda |\\n| [PT009] | use a regular assert instead of unittest-style '{assertion}' |\\n| [PT010] | set the expected exception in pytest.raises() |\\n| [PT011] | pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception <br> (configurable by `pytest-raises-require-match-for`) |\\n| [PT012] | pytest.raises() block should contain a single simple statement |\\n| [PT013] | found incorrect import of pytest, use simple 'import pytest' instead |\\n| [PT014] | found duplicate test cases {indexes} in @pytest.mark.parametrize |\\n| [PT015] | assertion always fails, replace with pytest.fail() |\\n| [PT016] | no message passed to pytest.fail() |\\n| [PT017] | found assertion on exception {name} in except block, use pytest.raises() instead |\\n| [PT018] | assertion should be broken down into multiple parts |\\n| [PT019] | fixture {name} without value is injected as parameter, use @pytest.mark.usefixtures instead |\\n| [PT020] | @pytest.yield_fixture is deprecated, use @pytest.fixture |\\n| [PT021] | use yield instead of request.addfinalizer |\\n| [PT022] | no teardown in fixture {name}, use return instead of yield |\\n| [PT023] | use @pytest.mark.foo() over @pytest.mark.foo <br> (configurable by `pytest-mark-no-parentheses`) |\\n| [PT024] | pytest.mark.asyncio is unnecessary for fixtures |\\n| [PT025] | pytest.mark.usefixtures has no effect on fixtures |\\n| [PT026] | useless pytest.mark.usefixtures without parameters | \\n\\n## Installation\\n\\n pip install flake8-pytest-style\\n\\n## Configuration\\n\\nThe plugin has the following configuration options:\\n\\n* `pytest-fixture-no-parentheses` &mdash; see [PT001]\\n* `pytest-parametrize-names-type` &mdash; see [PT006]\\n* `pytest-parametrize-values-type` &mdash; see [PT007]\\n* `pytest-parametrize-values-row-type` &mdash; see [PT007]\\n* `pytest-raises-require-match-for` &mdash; see [PT011]\\n* `pytest-mark-no-parentheses` &mdash; see [PT023]\\n\\n## For developers\\n\\n### Install deps and setup pre-commit hook\\n\\n make init\\n\\n### Run linters, autoformat, tests etc.\\n\\n make format lint test\\n\\n### Bump new version\\n\\n make bump_major\\n make bump_minor\\n make bump_patch\\n\\n## License\\n\\nMIT\\n\\n## Change Log\\n\\n**Unreleased**\\n\\n...\\n\\n**1.6.0 - 2021-12-23**\\n\\n* require at least Python 3.6.2\\n* expose `py.typed` file\\n\\n**1.5.1 - 2021-11-05**\\n\\n* better wording for [PT011]\\n* support Python 3.10\\n\\n**1.5.0 - 2021-06-18**\\n\\n* add [PT025] (checks for erroneous `pytest.mark.usefixtures` on fixtures)\\n* add [PT026] (checks for `pytest.mark.usefixtures` without parameters)\\n\\n**1.4.4 - 2021-06-17**\\n\\n* fix [PT023] not checking marks in classes\\n* fix [PT004] incorrectly firing on fixtures with `yield from`\\n\\n**1.4.2 - 2021-05-24**\\n\\n* update `flake8-plugin-utils` version to improve stability\\n\\n**1.4.1 - 2021-04-01**\\n\\n* fix argparse-related warnings\\n\\n**1.4.0 - 2021-03-14**\\n\\n* add [PT023] (checks for parentheses consistency in `pytest.mark` usage)\\n* add [PT024] (checks for unnecessary `pytest.mark.asyncio` on fixtures)\\n* fix [PT004], [PT005] firing on abstract fixtures\\n* fix [PT012] firing on `with` statements containing a single `pass`\\n\\n**1.3.0 - 2020-08-30**\\n\\n* add [PT022] (checks for `yield` fixtures without teardown)\\n\\n**1.2.3 - 2020-08-06**\\n\\n* update `flake8-plugin-utils` dependency to fix encoding problems on Windows\\n\\n**1.2.2 - 2020-07-23**\\n\\n* fix [PT004]\/[PT005] inspecting returns of nested functions\\n\\n**1.2.1 - 2020-06-15**\\n\\n* fix [PT021] for factory fixtures (#46)\\n\\n**1.2.0 - 2020-06-12**\\n\\n* support scoped `mocker` fixtures from `pytest-mock` for [PT008]\\n* check for positional-only lambda arguments in [PT008]\\n* add [PT020] (checks for `pytest.yield_fixture`)\\n* add [PT021] (checks for `request.addfinalizer`)\\n* add documentation pages for all rules\\n\\n**1.1.1 - 2020-04-17**\\n\\n* fix [PT011] not reporting `match=''` as a violation\\n\\n**1.1.0 - 2020-04-14**\\n\\n* add [PT015] (checks for `assert False`)\\n* add [PT016] (checks for `pytest.fail()` without message)\\n* add [PT017] (checks for assertions on exceptions in `except` blocks)\\n* add [PT018] (checks for composite assertions)\\n* add [PT019] (checks for fixtures without value injected as parameters)\\n\\n**1.0.0 - 2020-03-26**\\n\\n* add [PT014] (checks for duplicate test cases in `@pytest.mark.parametrize`)\\n\\n**0.6.0 - 2020-03-21**\\n\\n* add configuration option `pytest-parametrize-names-type` for [PT006]\\n* add configuration options `pytest-parametrize-values-type` and\\n`pytest-parametrize-values-row-type` for [PT007]\\n\\n**0.5.0 - 2020-03-09**\\n\\n* add configuration option `pytest-fixture-no-parentheses` for [PT001]\\n* add [PT013] (checks for `from`-imports from `pytest`)\\n\\n**0.4.0 - 2020-03-09**\\n\\n* add [PT012] (checks for multiple statements in `with pytest.raises()`)\\n\\n**0.3.1 - 2020-03-09**\\n\\n* fix default value of `pytest-raises-require-match-for` config option\\n\\n**0.3.0 - 2020-03-09**\\n\\n* add [PT010] and [PT011] (checks for `pytest.raises` parameters)\\n\\n**0.2.0 - 2020-03-01**\\n\\n* add [PT009] (ported from [flake8-pytest](https:\/\/github.com\/vikingco\/flake8-pytest))\\n\\n**0.1.3 - 2019-05-24**\\n\\n* add `yield` fixtures support\\n* fix changelog entry for 0.1.2\\n\\n**0.1.2 - 2019-05-23**\\n\\n* fix parametrize checkers not working in decorators\\n\\n**0.1.1 - 2019-05-23**\\n\\n* update PyPI description\\n\\n**0.1.0 - 2019-05-23**\\n\\n* initial\\n\\n[PT001]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT001.md\\n[PT002]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT002.md\\n[PT003]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT003.md\\n[PT004]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT004.md\\n[PT005]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT005.md\\n[PT006]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT006.md\\n[PT007]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT007.md\\n[PT008]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT008.md\\n[PT009]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT009.md\\n[PT010]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT010.md\\n[PT011]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT011.md\\n[PT012]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT012.md\\n[PT013]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT013.md\\n[PT014]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT014.md\\n[PT015]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT015.md\\n[PT016]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT016.md\\n[PT017]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT017.md\\n[PT018]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT018.md\\n[PT019]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT019.md\\n[PT020]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT020.md\\n[PT021]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT021.md\\n[PT022]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT022.md\\n[PT023]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT023.md\\n[PT024]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT024.md\\n[PT025]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT025.md\\n[PT026]: https:\/\/github.com\/m-burst\/flake8-pytest-style\/blob\/v1.6.0\/docs\/rules\/PT026.md\\n\",\n'author': 'Mikhail Burshteyn',\n'author_email': 'mdburshteyn@gmail.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/pypi.org\/project\/flake8-pytest-style',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'entry_points': entry_points,\n'python_requires': '>=3.6.2,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "flake8-rst-docstrings-0.2.7",
        "file_list": ".flake8 .gitignore dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt flake8_rst_docstrings.py LICENSE.rst MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py blocks.py bullets.py def_list.py enumerated.py explicit_markup.py field_lists.py literal.py option_list.py strong.py short_underline.py emphasis.py literal.py backticks.py roles.py roles.py no_literal_block.py bad_sub_ref.py nesting.py table.py sphinx-directives.py sphinx-roles.py __init__.py unknown_target.py code_invalid_arg.py sub_title.py example_unicode.py field_list_at_end.py hello_world.py not_utf8.py",
        "setup.py": "\"\"\"Setup file for building\/installing flake8-rst-docstrings.\"\"\"\nfrom __future__ import print_function\nfrom __future__ import with_statement\n\nfrom setuptools import setup\n\n\ndef get_version(fname=\"flake8_rst_docstrings.py\"):\n\"\"\"Parse our source code to get the current version number.\"\"\"\nwith open(fname) as f:\nfor line in f:\nif line.startswith(\"__version__\"):\nreturn eval(line.split(\"=\")[-1])\n\n\nsetup(\nname=\"flake8-rst-docstrings\",\nversion=get_version(),\ndescription=\"Python docstring reStructuredText (RST) validator\",\nlong_description=open(\"README.rst\").read(),\nlicense=\"MIT\",\nauthor=\"Peter J. A. Cock\",\nauthor_email=\"p.j.a.cock@googlemail.com\",\nurl=\"https:\/\/github.com\/peterjc\/flake8-rst-docstrings\",\nproject_urls={\n\"Documentation\": (\n\"https:\/\/github.com\/peterjc\/flake8-rst-docstrings\/blob\/master\/README.rst\"\n),\n\"Source\": \"https:\/\/github.com\/peterjc\/flake8-rst-docstrings\/\",\n\"Tracker\": \"https:\/\/github.com\/peterjc\/flake8-rst-docstrings\/issues\",\n},\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"Framework :: Flake8\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Operating System :: OS Independent\",\n\"License :: OSI Approved :: MIT License\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Topic :: Software Development :: Quality Assurance\",\n],\nkeywords=\"PEP 287, pep287, docstrings, rst, reStructuredText\",\npy_modules=[\"flake8_rst_docstrings\"],\npython_requires=\">=3.7\",\ninstall_requires=[\n\"flake8 >= 3.0.0\",\n\"restructuredtext_lint\",\n\"pygments\",\n],\nentry_points={\n\"flake8.extension\": [\"RST = flake8_rst_docstrings:reStructuredTextChecker\"]\n},\n)\n"
    },
    {
        "package_name": "flake8-string-format-0.3.0",
        "file_list": "dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt flake8_string_format.py PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nimport codecs\n\nfrom setuptools import setup\n\n\ndef get_version():\nwith open('flake8_string_format.py') as f:\nfor line in f:\nif line.startswith('__version__'):\nreturn eval(line.split('=')[-1])\n\n\ndef get_long_description():\nwith codecs.open('README.rst', 'r', 'utf-8') as f:\nreturn f.read()\n\n\nsetup(\nname='flake8-string-format',\nversion=get_version(),\ndescription='string format checker, plugin for flake8',\nlong_description=get_long_description(),\nkeywords='flake8 format',\ninstall_requires=['flake8'],\nmaintainer='Fabian Neundorf',\nmaintainer_email='CommodoreFabianus@gmx.de',\nurl='https:\/\/github.com\/xZise\/flake8-string-format',\nlicense='MIT License',\npy_modules=['flake8_string_format'],\nzip_safe=False,\nentry_points={\n'flake8.extension': [\n'P = flake8_string_format:StringFormatChecker',\n],\n},\ntests_require=['six'],\ntest_suite='test_flake8_string_format',\nclassifiers=[\n'Development Status :: 3 - Alpha',\n'Environment :: Console',\n'Framework :: Flake8',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Software Development :: Quality Assurance',\n],\n)\n"
    },
    {
        "package_name": "flake8-use-pathlib-0.3.0",
        "file_list": "checker.py __init__.py LICENSE.txt PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['flake8_use_pathlib']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['flake8>=3.6']\n\nentry_points = \\\n{'flake8.extension': ['PL = flake8_use_pathlib:PathlibChecker']}\n\nsetup_kwargs = {\n'name': 'flake8-use-pathlib',\n'version': '0.3.0',\n'description': 'A plugin for flake8 finding use of functions that can be replaced by pathlib module.',\n'long_description': '# flake8-use-pathlib\\n\\n[![pypi][pypi-badge]](https:\/\/pypi.org\/project\/flake8-use-pathlib\/)\\n[![black][black-badge]](https:\/\/github.com\/psf\/black)\\n\\nA plugin for flake8 finding use of functions that can be replaced by pathlib module.\\n\\n[pypi-badge]: https:\/\/badgen.net\/pypi\/v\/flake8-use-pathlib\\n[black-badge]: https:\/\/badgen.net\/badge\/code%20style\/black\/black\/\\n\\n## Installation\\n\\nInstall from `pip` with:\\n\\n`pip install flake8-use-pathlib`\\n\\n## Rules\\n\\n| Code | Rule |\\n| ----- | -------------------------------------------------------------------------------------------- |\\n| PL100 | os.path.abspath(\"foo\") should be replaced by foo_path.resolve() |\\n| PL101 | os.chmod(\"foo\", 0o444) should be replaced by foo_path.chmod(0o444) |\\n| PL102 | os.mkdir(\"foo\") should be replaced by foo_path.mkdir() |\\n| PL103 | os.makedirs(\"foo\/bar\") should be replaced by bar_path.mkdir(parents=True) |\\n| PL104 | os.rename(\"foo\", \"bar\") should be replaced by foo_path.rename(Path(\"bar\")) |\\n| PL105 | os.replace(\"foo\", \"bar\") should be replaced by foo_path.replace(Path(\"bar\")) |\\n| PL106 | os.rmdir(\"foo\") should be replaced by foo_path.rmdir() |\\n| PL107 | os.remove(\"foo\") should be replaced by foo_path.unlink() |\\n| PL108 | os.unlink(\"foo\") should be replaced by foo_path.unlink() |\\n| PL109 | os.getcwd() should be replaced by Path.cwd() |\\n| PL110 | os.path.exists(\"foo\") should be replaced by foo_path.exists() |\\n| PL111 | os.path.expanduser(\"~\/foo\") should be replaced by foo_path.expanduser() |\\n| PL112 | os.path.isdir(\"foo\") should be replaced by foo_path.is_dir() |\\n| PL113 | os.path.isfile(\"foo\") should be replaced by foo_path.is_file() |\\n| PL114 | os.path.islink(\"foo\") should be replaced by foo_path.is_symlink() |\\n| PL115 | os.readlink(\"foo\") should be replaced by foo_path.readlink() |\\n| PL116 | os.stat(\"foo\") should be replaced by foo_path.stat() or foo_path.owner() or foo_path.group() |\\n| PL117 | os.path.isabs should be replaced by foo_path.is_absolute() |\\n| PL118 | os.path.join(\"foo\", \"bar\") should be replaced by foo_path \/ \"bar\" |\\n| PL119 | os.path.basename(\"foo\/bar\") should be replaced by bar_path.name |\\n| PL120 | os.path.dirname(\"foo\/bar\") should be replaced by bar_path.parent |\\n| PL121 | os.path.samefile(\"foo\", \"bar\") should be replaced by foo_path.samefile(bar_path) |\\n| PL122 | os.path.splitext(\"foo.bar\") should be replaced by foo_path.suffix |\\n| PL123 | open(\"foo\") should be replaced by Path(\"foo\").open() |\\n| PL124 | py.path.local is in maintenance mode, use pathlib instead |\\n',\n'author': 'Rodolphe Pelloux-Prayer',\n'author_email': 'rodolphe@damsy.net',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/gitlab.com\/RoPP\/flake8-use-pathlib',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'entry_points': entry_points,\n'python_requires': '>=3.7',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "Flask-API-3.0.post1",
        "file_list": "app.py compat.py decorators.py exceptions.py mediatypes.py negotiation.py parsers.py renderers.py request.py response.py settings.py bootstrap-tweaks.css bootstrap.min.css default.css prettify.css glyphicons-halflings-white.png glyphicons-halflings.png grid.png bootstrap.min.js default.js jquery-1.8.1-min.js prettify-min.js status.py base.html test_app.py test_exceptions.py test_mediatypes.py test_negotiation.py test_parsers.py test_renderers.py test_request.py test_settings.py test_status.py __init__.py __init__.py app.cpython-39.pyc compat.cpython-39.pyc exceptions.cpython-39.pyc mediatypes.cpython-39.pyc negotiation.cpython-39.pyc parsers.cpython-39.pyc renderers.cpython-39.pyc request.cpython-39.pyc response.cpython-39.pyc settings.cpython-39.pyc status.cpython-39.pyc __init__.cpython-39.pyc dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.md PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import print_function\nfrom setuptools import setup\nimport re\nimport os\nimport sys\n\n\nname = 'Flask-API'\npackage = 'flask_api'\ndescription = 'Browsable web APIs for Flask.'\nurl = 'https:\/\/flask-api.github.io\/flask-api\/'\nauthor = 'Tom Christie'\nauthor_email = 'tom@tomchristie.com'\nlicense = 'BSD'\ninstall_requires = ['Flask >= 2.0']\n\nlong_description = \"\"\"Browsable web APIs for Flask.\"\"\"\n\n\ndef get_version(package):\n\"\"\"\nReturn package version as listed in `__version__` in `init.py`.\n\"\"\"\ninit_py = open(os.path.join(package, '__init__.py')).read()\nreturn re.search(\"^__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", init_py, re.MULTILINE).group(1)\n\n\ndef get_packages(package):\n\"\"\"\nReturn root package and all sub-packages.\n\"\"\"\nreturn [dirpath\nfor dirpath, dirnames, filenames in os.walk(package)\nif os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n\ndef get_package_data(package):\n\"\"\"\nReturn all files under the root package, that are not in a\npackage themselves.\n\"\"\"\nwalk = [(dirpath.replace(package + os.sep, '', 1), filenames)\nfor dirpath, dirnames, filenames in os.walk(package)\nif not os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\nfilepaths = []\nfor base, filenames in walk:\nfilepaths.extend([os.path.join(base, filename)\nfor filename in filenames])\nreturn {package: filepaths}\n\nsetup(\nname=name,\nversion=get_version(package),\nurl=url,\nlicense=license,\ndescription=description,\nlong_description=long_description,\nauthor=author,\nauthor_email=author_email,\npackages=get_packages(package),\npackage_data=get_package_data(package),\ninstall_requires=install_requires,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Framework :: Flask',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Natural Language :: English',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Topic :: Internet :: WWW\/HTTP',\n]\n)\n"
    },
    {
        "package_name": "flask-apispec-0.11.4",
        "file_list": "CHANGELOG.rst annotations.py apidoc.py extension.py paths.py absolute-path.js favicon-16x16.png favicon-32x32.png index.html index.js oauth2-redirect.html package.json README.md swagger-ui-bundle.js swagger-ui-bundle.js.map swagger-ui-standalone-preset.js swagger-ui-standalone-preset.js.map swagger-ui.css swagger-ui.css.map swagger-ui.js swagger-ui.js.map swagger-ui.html utils.py views.py wrapper.py __init__.py annotations.cpython-38.pyc apidoc.cpython-38.pyc extension.cpython-38.pyc paths.cpython-38.pyc utils.cpython-38.pyc views.cpython-38.pyc wrapper.cpython-38.pyc __init__.cpython-38.pyc dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "import re\nfrom setuptools import setup\nfrom setuptools import find_packages\n\nREQUIRES = [\n'flask>=0.10.1',\n'marshmallow>=3.0.0',\n'webargs>=6.0.0',\n'apispec>=4.0.0',\n]\n\n\ndef find_version(fname):\n\"\"\"Attempts to find the version number in the file names fname.\nRaises RuntimeError if not found.\n\"\"\"\nversion = ''\nwith open(fname) as fp:\nreg = re.compile(r'__version__ = [\\'\"]([^\\'\"]*)[\\'\"]')\nfor line in fp:\nm = reg.match(line)\nif m:\nversion = m.group(1)\nbreak\nif not version:\nraise RuntimeError('Cannot find version information')\nreturn version\n\n\ndef read(fname):\nwith open(fname) as fp:\ncontent = fp.read()\nreturn content\n\n\nsetup(\nname='flask-apispec',\nversion=find_version('flask_apispec\/__init__.py'),\ndescription='Build and document REST APIs with Flask and apispec',\nlong_description=read('README.rst'),\nauthor='Joshua Carp',\nauthor_email='jm.carp@gmail.com',\nurl='https:\/\/github.com\/jmcarp\/flask-apispec',\npackages=find_packages(exclude=('test*', )),\npackage_dir={'flask_apispec': 'flask_apispec'},\ninclude_package_data=True,\ninstall_requires=REQUIRES,\nlicense='MIT',\nzip_safe=False,\nkeywords='flask marshmallow webargs apispec',\npython_requires=\">=3.6\",\ntest_suite='tests',\nproject_urls={\n'Bug Reports': 'https:\/\/github.com\/jmcarp\/flask-apispec\/issues',\n'Changelog': 'https:\/\/flask-apispec.readthedocs.io\/en\/latest\/changelog.html',\n},\n)\n"
    },
    {
        "package_name": "flask-azure-oauth-0.7.0",
        "file_list": "LICENSE.md PKG-INFO pyproject.toml README.md setup.py errors.py keys.py tokens.py __init__.py resource_protector.py tokens.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackage_dir = \\\n{'': 'src'}\n\npackages = \\\n['flask_azure_oauth', 'flask_azure_oauth.mocks']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['Flask>=2.0.2,<3.0.0', 'authlib==0.14.3', 'requests>=2.23.0,<3.0.0']\n\nsetup_kwargs = {\n'name': 'flask-azure-oauth',\n'version': '0.7.0',\n'description': 'Python Flask extension for using Azure Active Directory with OAuth to protect applications',\n'long_description': '# Flask Azure AD OAuth Provider\\n\\nPython Flask extension for securing apps with Azure Active Directory OAuth\\n\\n## Purpose\\n\\nProvide an [AuthLib](https:\/\/authlib.org)\\n[Resource Protector\/Server](https:\/\/docs.authlib.org\/en\/latest\/flask\/2\/resource-server.html) to authenticate and\\nauthorise users and applications using a Flask application with OAuth functionality offered by\\n[Azure Active Directory](https:\/\/azure.microsoft.com\/en-us\/services\/active-directory\/), as part of the\\n[Microsoft identity platform](https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/develop\/about-microsoft-identity-platform).\\n\\nAzure Active Directory, acting as an identity provider, issues\\n[OAuth access tokens](https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/develop\/access-tokens), the claims of\\nwhich are validated by this provider. These claims include the identity of the user and client application (used for\\nauthentication), and any permissions\/scopes assigned or delegated to the user or application (used for authorisation).\\n\\nThis provider supports these scenarios:\\n\\n1. *application to application*\\n * supports authentication and authorisation\\n * used to allow a client application access to some functionality or resources provided by another application\\n * can be used for non-interactive, machine-to-machine, processes (using the OAuth Client Credentials Grant)\\n * optionally, uses the identity of the client application for authentication\\n * optionally, uses permissions assigned directly to the client application for authorisation\\n2. *user to application*\\n * supports authentication and authorisation\\n * used to allow users access to some functionality or resources provided by another application\\n * can be used for interactive console (using the Device Authorization Grant) or web application (using the OAuth\\n Authorization Code Grant) processes\\n * uses the identity of the user, and optionally, the client application they are using, for authentication\\n * optionally, uses permissions assigned to the user, permissions delegated by the user to the client application,\\n and\/or permissions assigned directly to the client application for authorisation\\n\\nOther scenarios may work but are not officially supported, this may change in the future.\\n\\n**Note:** This provider does not support client applications requesting tokens from Azure. See the\\n[Microsoft Authentication Library (MSAL) for Python](https:\/\/github.com\/AzureAD\/microsoft-authentication-library-for-python)\\npackage if you need to do this.\\n\\n**Note:** This provider has been written to solve an internal need within applications used by the British Antarctic\\nSurvey. It is offered to others in the hope that\\'s useful for your needs as well, however it does not (and cannot)\\ncover every option available.\\n\\n## Installation\\n\\nThis package can be installed using Pip from [PyPi](https:\/\/pypi.org\/project\/flask-azure-oauth):\\n\\n```\\n$ pip install flask-azure-oauth\\n```\\n\\n**Note:** Since version 0.6.0, this package requires Flask 2.0 or greater.\\n\\n## Usage\\n\\nThis provider provides an [AuthLib](https:\/\/authlib.org)\\n[Resource Protector](https:\/\/docs.authlib.org\/en\/latest\/flask\/2\/resource-server.html) which can be used as a decorator\\non Flask routes.\\n\\nA minimal application would look like this:\\n\\n```python\\nfrom flask import Flask\\n\\nfrom flask_azure_oauth import FlaskAzureOauth\\n\\napp = Flask(__name__)\\n\\napp.config[\\'AZURE_OAUTH_TENANCY\\'] = \\'xxx\\'\\napp.config[\\'AZURE_OAUTH_APPLICATION_ID\\'] = \\'xxx\\'\\n\\nauth = FlaskAzureOauth()\\nauth.init_app(app)\\n\\n@app.route(\\'\/unprotected\\')\\ndef unprotected():\\n return \\'hello world\\'\\n\\n@app.route(\\'\/protected\\')\\n@auth()\\ndef protected():\\n return \\'hello authenticated entity\\'\\n\\n@app.route(\\'\/protected-with-single-scope\\')\\n@auth(\\'required-scope\\')\\ndef protected_with_scope():\\n return \\'hello authenticated and authorised entity\\'\\n\\n@app.route(\\'\/protected-with-multiple-scopes\\')\\n@auth(\\'required-scope1 required-scope2\\')\\ndef protected_with_multiple_scopes():\\n return \\'hello authenticated and authorised entity\\'\\n```\\n\\nTo restrict a route to any valid user or client application (authentication):\\n\\n* add the resource protector as a decorator (`auth` in this example) - for example the `\/protected` route\\n\\nTo restrict a route to specific users (authorisation):\\n\\n* add any required [Scopes](#permissions-roles-and-scopes) to the decorator - for example the `\/projected-with-*` routes\\n\\nIndependently of these options, it\\'s possible to require specific, trusted, client applications, regardless of the user\\nusing them. This is useful in circumstances where a user may be authorised but the client can\\'t be trusted:\\n\\n* set the `AZURE_OAUTH_CLIENT_APPLICATION_IDS` config option to a list of Azure application identifiers\\n\\nFor example:\\n\\n```\\napp.config[\\'AZURE_OAUTH_CLIENT_APPLICATION_IDS\\'] = [\\'xxx\\']`\\n```\\n\\n### Configuration options\\n\\nThe resource protector requires two configuration options to validate tokens correctly. These are read from the Flask\\n[config object](http:\/\/flask.pocoo.org\/docs\/1.0\/config\/) through the `init_app()` method.\\n\\n| Configuration Option | Data Type | Required | Description |\\n| ------------------------------------ | --------- | -------- | -------------------------------------------------------------------------------------------------------------------------- |\\n| `AZURE_OAUTH_TENANCY` | Str | Yes | ID of the Azure AD tenancy all applications and users are registered within |\\n| `AZURE_OAUTH_APPLICATION_ID` | Str | Yes | ID of the Azure AD application registration for the application being protected |\\n| `AZURE_OAUTH_CLIENT_APPLICATION_IDS` | List[Str] | No | ID(s) of the Azure AD application registration(s) for the application(s) granted access to the application being protected |\\n\\n**Note:** If the `AZURE_OAUTH_CLIENT_APPLICATION_IDS` option is not set, all client applications will be trusted and the\\n`azp` claim, if present, is ignored.\\n\\nBefore these options can be set you will need to:\\n\\n1. [register the application to be protected](#registering-an-application-in-azure)\\n2. [define the permissions and roles this application supports](#defining-permissions-and-roles-within-an-application)\\n3. [register the application(s) that will use the protected application](#registering-an-application-in-azure)\\n4. [assign permissions to users and\/or client application(s)](#assigning-permissions-and-roles-to-users-and-applications)\\n\\n### Flask session support\\n\\nThis provider extends the AuthLib ResourceProtector to support detecting access tokens stored in the Flask session.\\n\\nThis is intended for browser based applications where the `Authorization` header cannot be easily set to include the\\naccess token. This support will be enabled automatically if an `access_token` session key is set.\\n\\n### Access token versions\\n\\nSince version 0.5.0, this provider is compatible with Azure access token versions 1.0 and 2.0. Prior to version 0.5.0\\nonly version 2.0 tokens could be used. See\\n[Microsoft\\'s documentation](https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/develop\/access-tokens) for the\\ndifferences between token versions.\\n\\n**Note:** If you use version 1.0 tokens, this provider expects at least one of the `identifierUris` property values to\\nbe `api:\/\/{protected_application_id}`, where `{protected_application_id}` is the application ID of the app registration\\nrepresenting the application being protected by this provider. Without this, you will receive errors for an invalid\\naudience.\\n\\n### Applications, users, groups and tenancies\\n\\nAzure Active Directory has a number of different concepts for agents that represent things being protected and things\\nthat want to interact with protected things:\\n\\n* [applications](https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/develop\/authentication-scenarios#application-model) -\\n represent services that offer, or wish to use, functionality that should be restricted:\\n * services offering functionality are *protected applications*, e.g. an API\\n * services wishing to use functionality interactively or non-interactively, are *client applications*:\\n * interactive client applications include self-service portals for example\\n * non-interactive client applications include nightly synchronisation tasks for example\\n* [users](https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/users-groups-roles\/directory-overview-user-model) -\\n represent individuals that wish to use functionality offered by protected applications, through one or more\\n client applications (e.g. a user may use a self-service portal to access information)\\n* [groups](https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/users-groups-roles\/directory-overview-user-model) -\\n represent multiple users, for ease of managing permissions to similar users (e.g. administrative users)\\n\\nFor management purposes, all agents are scoped to an Azure tenancy (with the exception of users that can be used across\\ntenancies).\\n\\nIn the Azure management portal:\\n\\n* applications are represented by *Application registrations*\\n* users are represented by *users*, or optionally *groups* of users\\n\\n### Permissions, roles and scopes\\n\\nAzure Active Directory has a number of mechanisms for controlling how agents can interact with each other:\\n\\n* [roles](https:\/\/docs.microsoft.com\/en-us\/azure\/architecture\/multitenant-identity\/app-roles) - functions, designations\\n or labels conferred on users and\/or groups (e.g. `admins`, `staff`)\\n* [direct permissions](https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/develop\/v2-permissions-and-consent) -\\n capabilities of a protected application client applications can use themselves or without the consent of the current\\n user (e.g. machine-to-machine access to, or modification of, data from all users)\\n* [delegated permissions](https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/develop\/v2-permissions-and-consent) -\\n capabilities of a protected application the current user allows a client application to use (e.g. interactive access\\n to, or modification of, their data)\\n\\nGenerally, and in terms of the OAuth ecosystem, all of these can be considered as\\n[scopes](https:\/\/tools.ietf.org\/html\/rfc6749#section-3.3). As discussed in the [Usage](#usage) section, scopes can be\\nused to control who and\/or what can use features within protected applications.\\n\\nScopes are included the access token generated by a client application (possibly interactively by a user) and presented\\nto the projected application as a bearer token. Azure encodes different mechanisms in different claims:\\n\\n* `roles` - for roles assigned to users and permissions directly assigned to client applications\\n* `scp` - for permissions delegated by the user to a client application\\n\\nFor ease of use, this extension abstracts these two claims into a single set of `scopes` that can be required for a\\ngiven route. Multiple scopes can be required (as a logical AND) to allow scopes to be used more flexibly.\\n\\n#### Defining permissions and roles within an application\\n\\nPermissions and roles are defined in the\\n[application manifest](https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/develop\/reference-app-manifest) of each\\napplication being protected. They can then be [assigned](#assigning-permissions-and-roles-to-users-and-applications) to\\nusers, groups and client applications.\\n\\n1. [register](#registering-an-application-in-azure) the application to be protected\\n2. [add permissions to application manifest](https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/develop\/howto-add-app-roles-in-azure-ad-apps)\\n\\nFor example:\\n\\n```json\\n\"appRoles\": [\\n {\\n \"allowedMemberTypes\": [\\n \"Application\"\\n ],\\n \"displayName\": \"List all Foo resources\",\\n \"id\": \"112b3a76-2dd0-4d09-9976-9f94b2ed965d\",\\n \"isEnabled\": true,\\n \"description\": \"Allows access to basic information for all Foo resources\",\\n \"value\": \"Foo.List.All\"\\n }\\n],\\n```\\n\\n#### Assigning permissions and roles to users and applications\\n\\nPermissions and roles (collectively, application roles) are assigned through the Azure portal:\\n\\n1. [define roles and permissions in the protected application](#defining-permissions-and-roles-within-an-application)\\n2. [register](#registering-an-application-in-azure) the client application(s)\\n3. assign:\\n * [roles to users\/groups](https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/develop\/howto-add-app-roles-in-azure-ad-apps)\\n * [permissions to client applications](https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/develop\/v2-oauth2-client-creds-grant-flow#request-the-permissions-in-the-app-registration-portal)\\n\\nFor assigning permissions:\\n\\n* permissions can be delegated to client applications, with the agreement of the current user\\n* permissions can be directly assigned to client applications, with the agreement of a tenancy administrator\\n\\n**Note:** Direct assignment is needed for non-interactive applications, such as daemons.\\n\\n#### Registering an application in Azure\\n\\n[Follow these instructions](https:\/\/docs.microsoft.com\/en-us\/azure\/active-directory\/develop\/quickstart-register-app).\\n\\n**Note:** These instructions apply both to applications that protected by this provider (protected applications), and\\nthose that will be granted access to use such applications, possibly by a user (client applications).\\n\\n### Testing support\\n\\nFor testing applications, a local\/test JSON Web Key Set (JWKS) can be used to sign local\/test JSON Web Tokens (JWTs)\\nwithout relying on Azure. Local tokens can include, or not include, arbitrary scopes\/roles, which can ensure\\nrequirements for specific scopes are properly enforced by this provider.\\n\\nThis requires using local tokens signed by the test keys, and patching the `FlaskAzureOauth._get_jwks` method to\\nvalidate tokens using the same test keys.\\n\\nFor example:\\n\\n```python\\nimport unittest\\n\\nfrom http import HTTPStatus\\nfrom unittest.mock import patch\\n\\nfrom flask_azure_oauth import FlaskAzureOauth\\nfrom flask_azure_oauth.mocks.keys import TestJwk\\nfrom flask_azure_oauth.mocks.tokens import TestJwt\\n\\nfrom examples import create_app\\n\\n\\nclass AppTestCase(unittest.TestCase):\\n def setUp(self):\\n self.test_jwks = TestJwk()\\n\\n with patch.object(FlaskAzureOauth, \"_get_jwks\") as mocked_get_jwks:\\n mocked_get_jwks.return_value = self.test_jwks.jwks()\\n\\n # `self.app` should be set to a Flask application, either by direct import, or by calling an app factory\\n self.app = create_app()\\n\\n self.app.config[\"TEST_JWKS\"] = self.test_jwks\\n self.app_context = self.app.app_context()\\n self.app_context.push()\\n self.client = self.app.test_client()\\n\\n def test_protected_route_with_multiple_scopes_authorised(self):\\n # Generate token with required roles\\n token = TestJwt(\\n app=self.app, roles=[\"BAS.MAGIC.ADD.Records.Publish.All\", \"BAS.MAGIC.ADD.Records.ReadWrite.All\"]\\n )\\n\\n # Make request to protected route with token\\n response = self.client.get(\\n \"\/protected-with-multiple-scopes\", headers={\"authorization\": f\"bearer { token.dumps() }\"}\\n )\\n self.assertEqual(HTTPStatus.OK, response.status_code)\\n self.app_context.pop()\\n\\n def test_protected_route_with_multiple_scopes_unauthorised(self):\\n # Generate token with no scopes\\n token = TestJwt(app=self.app)\\n\\n # Make request to protected route with token\\n response = self.client.get(\\n \"\/protected-with-multiple-scopes\", headers={\"authorization\": f\"bearer { token.dumps() }\"}\\n )\\n self.assertEqual(HTTPStatus.FORBIDDEN, response.status_code)\\n self.app_context.pop()\\n```\\n\\n## Developing\\n\\nThis provider is developed as a Python library. A bundled Flask application is used to simulate its usage and act as\\nframework for running tests etc.\\n\\n### Development environment\\n\\nGit and [Poetry](https:\/\/python-poetry.org) are required to set up a local development environment of this project.\\n\\n**Note:** If you use [Pyenv](https:\/\/github.com\/pyenv\/pyenv), this project sets a local Python version for consistency.\\n\\n```shell\\n# clone from the BAS GitLab instance if possible\\n$ git clone https:\/\/gitlab.data.bas.ac.uk\/web-apps\/flask-extensions\/flask-azure-oauth.git\\n\\n# alternatively, clone from the GitHub mirror\\n$ git clone https:\/\/github.com\/antarctica\/flask-azure-oauth.git\\n\\n# setup virtual environment\\n$ cd flask-azure-oauth\\n$ poetry install\\n```\\n\\n### Code Style\\n\\nPEP-8 style and formatting guidelines must be used for this project, except the 80 character line limit.\\n[Black](https:\/\/github.com\/psf\/black) is used for formatting, configured in `pyproject.toml` and enforced as part of\\n[Python code linting](#code-linting).\\n\\nBlack can be integrated with a range of editors, such as\\n[PyCharm](https:\/\/black.readthedocs.io\/en\/stable\/integrations\/editors.html#pycharm-intellij-idea), to apply formatting\\nautomatically when saving files.\\n\\nTo apply formatting manually:\\n\\n```shell\\n$ poetry run black src\/ tests\/\\n```\\n\\n### Code Linting\\n\\n[Flake8](https:\/\/flake8.pycqa.org) and various extensions are used to lint Python files. Specific checks, and any\\nconfiguration options, are documented in the `.\/.flake8` config file.\\n\\nTo check files manually:\\n\\n```shell\\n$ poetry run flake8 src\/ examples\/\\n```\\n\\nChecks are run automatically in [Continuous Integration](#continuous-integration).\\n\\n### Dependencies\\n\\nPython dependencies for this project are managed with [Poetry](https:\/\/python-poetry.org) in `pyproject.toml`.\\n\\nNon-code files, such as static files, can also be included in the [Python package](#python-package) using the\\n`include` key in `pyproject.toml`.\\n\\n#### Adding new dependencies\\n\\nTo add a new (development) dependency:\\n\\n```shell\\n$ poetry add [dependency] (--dev)\\n```\\n\\nThen update the Docker image used for CI\/CD builds and push to the BAS Docker Registry (which is provided by GitLab):\\n\\n```shell\\n$ docker build -f gitlab-ci.Dockerfile -t docker-registry.data.bas.ac.uk\/web-apps\/flask-extensions\/flask-azure-oauth:latest .\\n$ docker push docker-registry.data.bas.ac.uk\/web-apps\/flask-extensions\/flask-azure-oauth:latest\\n```\\n\\n#### Updating dependencies\\n\\n```shell\\n$ poetry update\\n```\\n\\nSee the instructions above to update the Docker image used in CI\/CD.\\n\\n#### Dependency vulnerability checks\\n\\nThe [Safety](https:\/\/pypi.org\/project\/safety\/) package is used to check dependencies against known vulnerabilities.\\n\\n**IMPORTANT!** As with all security tools, Safety is an aid for spotting common mistakes, not a guarantee of secure\\ncode. In particular this is using the free vulnerability database, which is updated less frequently than paid options.\\n\\nThis is a good tool for spotting low-hanging fruit in terms of vulnerabilities. It isn\\'t a substitute for proper\\nvetting of dependencies, or a proper audit of potential issues by security professionals. If in any doubt you MUST seek\\nproper advice.\\n\\nChecks are run automatically in [Continuous Integration](#continuous-integration).\\n\\nTo check locally:\\n\\n```shell\\n$ poetry export --without-hashes -f requirements.txt | poetry run safety check --full-report --stdin\\n```\\n\\n#### `authlib` package\\n\\nThe `authlib` dependency is locked to version `0.14.3` as the `0.15.x` release series contains a bug that prevents the\\n`kid` claim from being accessed from Jason Web Key (JWK) instances. This is a known issue and will be resolved in the\\n`1.x` release. See https:\/\/github.com\/lepture\/authlib\/issues\/314 for more information.\\n\\n### Static security scanning\\n\\nTo ensure the security of this API, source code is checked against [Bandit](https:\/\/github.com\/PyCQA\/bandit)\\nand enforced as part of [Python code linting](#code-linting-python).\\n\\n**Warning:** Bandit is a static analysis tool and can\\'t check for issues that are only be detectable when running the\\napplication. As with all security tools, Bandit is an aid for spotting common mistakes, not a guarantee of secure code.\\n\\nTo check manually:\\n\\n```shell\\n$ poetry run bandit -r src\/ examples\/\\n```\\n\\n**Note:** This package contains a number of testing methods that deliberately do insecure or nonsensical things. These\\nare necessary to test failure modes and error handling, they are not a risk when using this package as intended. These\\nworkarounds have been exempted from these security checks where they apply.\\n\\nChecks are run automatically in [Continuous Integration](#continuous-integration).\\n\\n## Testing\\n\\n### Integration tests\\n\\nThis project uses integration tests to ensure features work as expected and to guard against regressions and\\nvulnerabilities.\\n\\nThe Python [UnitTest](https:\/\/docs.python.org\/3\/library\/unittest.html) library is used for running tests using Flask\\'s\\ntest framework. Test cases are defined in files within `tests\/` and are automatically loaded when using the `test`\\nFlask CLI command included in the local Flask application in the development environment.\\n\\nTo run tests manually using PyCharm, use the included *App (tests)* run\/debug configuration.\\n\\nTo run tests manually:\\n\\n```shell\\n$ FLASK_APP=examples FLASK_ENV=testing poetry run python -m unittest discover\\n```\\n\\nTests are ran automatically in [Continuous Integration](#continuous-integration).\\n\\n### Continuous Integration\\n\\nAll commits will trigger a Continuous Integration process using GitLab\\'s CI\/CD platform, configured in `.gitlab-ci.yml`.\\n\\n### Test\/Example applications\\n\\nFor verifying this provider works for real-world use-cases, a test Flask application is included in\\n`examples\/__init__.py`. This test application acts as both an application providing access to, and accessing, protected\\nresources. It can use a number of application registrations registered in the BAS Web & Applications Test Azure AD.\\n\\nThese applications allow testing different versions of access tokens for example. These applications are intended for\\ntesting only. They do not represent real applications, or contain any sensitive or protected information.\\n\\nTo test requesting resources from protected resources as an API, set the appropriate config options and run the\\napplication container:\\n\\n```shell\\n$ FLASK_APP=examples poetry run flask\\n```\\n\\nTo test requesting resources from protected resources as a browser application, set the appropriate config options and\\nstart the application container:\\n\\n```shell\\n$ FLASK_APP=examples poetry run flask run\\n```\\n\\nTerraform is used to provision the application registrations used:\\n\\n```\\n$ cd provisioning\/terraform\\n$ docker-compose run terraform\\n$ az login --allow-no-subscriptions\\n$ terraform init\\n$ terraform validate\\n$ terraform apply\\n```\\n\\n**Note:** Several properties in the application registration resources require setting once the registration has been\\ninitially made (identifiers for example). These will need commenting out before use.\\n\\nSome properties, such as client secrets, can only be set once applications have been registered in the Azure Portal.\\n\\nTerraform state information is held in the BAS Terraform Remote State project (internal).\\n\\n## Deployment\\n\\n### Python package\\n\\nThis project is distributed as a Python package, hosted in [PyPi](https:\/\/pypi.org\/project\/flask-azure-oauth).\\n\\nSource and binary packages are built and published automatically using\\n[Poetry](https:\/\/python-poetry.org) in [Continuous Deployment](#continuous-deployment).\\n\\n**Note:** Except for tagged releases, Python packages built in CD will use `0.0.0` as a version to indicate they are\\nnot formal releases.\\n\\n### Continuous Deployment\\n\\nA Continuous Deployment process using GitLab\\'s CI\/CD platform is configured in `.gitlab-ci.yml`.\\n\\n## Release procedure\\n\\nFor all releases:\\n\\n1. create a `release` branch\\n2. bump the version as appropriate in `pyproject.toml`\\n3. close release in `CHANGELOG.md`\\n4. push changes, merge the `release` branch into `main`, and tag with version\\n\\nThe project will be built and published to PyPi automatically through [Continuous Deployment](#continuous-deployment).\\n\\n## Feedback\\n\\nThe maintainer of this project is the BAS Web & Applications Team, they can be contacted at:\\n[servicedesk@bas.ac.uk](mailto:servicedesk@bas.ac.uk).\\n\\n## Issue tracking\\n\\nThis project uses issue tracking, see the\\n[Issue tracker](https:\/\/gitlab.data.bas.ac.uk\/web-apps\/flask-extensions\/flask-azure-oauth\/issues) for more information.\\n\\n**Note:** Read & write access to this issue tracker is restricted. Contact the project maintainer to request access.\\n\\n## License\\n\\nCopyright (c) 2019-2022 UK Research and Innovation (UKRI), British Antarctic Survey.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n',\n'author': 'Felix Fennell',\n'author_email': 'felnne@bas.ac.uk',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/antarctica\/flask-azure-oauth',\n'package_dir': package_dir,\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'python_requires': '>=3.6.2,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "Flask-Babel-2.0.0",
        "file_list": "conf.py index.rst make.bat Makefile speaklater.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py babel.cfg messages.mo messages.po myapp.mo myapp.po messages.pot test_date_formatting.py test_gettext.py test_integration.py test_number_formatting.py messages.mo messages.po test.mo test.po messages.pot myapp.mo myapp.po myapp.pot",
        "setup.py": "from setuptools import setup\n\nfrom os import path\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, 'README.md'), 'rb') as f:\nlong_description = f.read().decode('utf-8')\n\n\nsetup(\nname='Flask-Babel',\nversion='2.0.0',\nurl='http:\/\/github.com\/python-babel\/flask-babel',\nlicense='BSD',\nauthor='Armin Ronacher',\nauthor_email='armin.ronacher@active-4.com',\nmaintainer='Tyler Kennedy',\nmaintainer_email='tk@tkte.ch',\ndescription='Adds i18n\/l10n support to Flask applications',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\npackages=['flask_babel'],\nzip_safe=False,\ninstall_requires=[\n'pytz',\n'Flask',\n'Babel>=2.3',\n'Jinja2>=2.5'\n],\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n'Topic :: Software Development :: Libraries :: Python Modules'\n],\nextras_require={\n'dev': [\n'pytest',\n'pytest-mock',\n'bumpversion',\n'ghp-import',\n'sphinx',\n'Pallets-Sphinx-Themes'\n]\n}\n)\n"
    },
    {
        "package_name": "Flask-Jsonpify-1.5.0",
        "file_list": "dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt flask_jsonpify.py PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "from setuptools import setup\n\n\nsetup(\nname='Flask-Jsonpify',\nversion='1.5.0',\nurl='https:\/\/github.com\/CoryDolphin\/flask-jsonpify',\nlicense='MIT',\nauthor='Cory Dolphin',\nauthor_email='corydolph.in@gmail.com',\ndescription=\"A Flask extension adding a decorator for JSONP support\",\nlong_description=open('README.rst').read(),\npy_modules=['flask_jsonpify'],\n# if you would be using a package instead use packages instead\n# of py_modules:\n# packages=['flask_sqlite3'],\nzip_safe=False,\ninclude_package_data=True,\nplatforms='any',\ninstall_requires=[\n'Flask'\n],\ntests_require=['Flask-Testing', 'nose'],\ntest_suite='nose.collector',\nclassifiers=[\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n'Topic :: Software Development :: Libraries :: Python Modules'\n]\n)"
    },
    {
        "package_name": "Flask-Limiter-2.6.0",
        "file_list": "CLASSIFIERS CONTRIBUTIONS.rst Makefile api.rst changelog.rst cli.rst conf.py configuration.rst development.rst index.rst misc.rst recipes.rst strategies.rst theme_config.py colors.css custom.css limiter.css logo.png logo.svg tap-icon.ico tap-icon.png tap-icon.svg tap-logo.png commands.py constants.py util.py __init__.py errors.py extension.py manager.py py.typed typing.py util.py version.py wrappers.py _compat.py _version.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt HISTORY.rst LICENSE.txt MANIFEST.in PKG-INFO README.rst ci.txt dev.txt docs.txt main.txt test.txt setup.cfg setup.py versioneer.py",
        "setup.py": "\"\"\"\nsetup.py for Flask-Limiter\n\n\n\"\"\"\n__author__ = \"Ali-Akber Saifee\"\n__email__ = \"ali@indydevs.org\"\n__copyright__ = \"Copyright 2022, Ali-Akber Saifee\"\n\nfrom setuptools import setup, find_packages\nimport os\nimport versioneer\n\nthis_dir = os.path.abspath(os.path.dirname(__file__))\nREQUIREMENTS = filter(\nNone, open(os.path.join(this_dir, \"requirements\", \"main.txt\")).read().splitlines()\n)\nEXTRA_REQUIREMENTS = {\n\"redis\": [\"limits[redis]\"],\n\"memcached\": [\"limits[memcached]\"],\n\"mongodb\": [\"limits[mongodb]\"],\n}\n\nsetup(\nname=\"Flask-Limiter\",\nauthor=__author__,\nauthor_email=__email__,\nlicense=\"MIT\",\nurl=\"https:\/\/flask-limiter.readthedocs.org\",\nproject_urls={\n\"Source\": \"https:\/\/github.com\/alisaifee\/flask-limiter\",\n},\nzip_safe=False,\nversion=versioneer.get_version(),\ncmdclass=versioneer.get_cmdclass(),\ninstall_requires=list(REQUIREMENTS),\nclassifiers=[k for k in open(\"CLASSIFIERS\").read().split(\"\\n\") if k],\ndescription=\"Rate limiting for flask applications\",\nlong_description=open(\"README.rst\").read(),\npackages=find_packages(exclude=[\"tests*\"]),\npython_requires=\">=3.7\",\nextras_require=EXTRA_REQUIREMENTS,\ninclude_package_data=True,\npackage_data={\n\"flask_limiter\": [\"py.typed\"],\n},\nentry_points={\n'flask.commands': [\n'limiter=flask_limiter.commands:cli'\n],\n},\n)\n"
    },
    {
        "package_name": "flask-swagger-0.2.14",
        "file_list": "build_swagger_spec.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt flask_swagger.py LICENSE MANIFEST.in PKG-INFO README README.md setup.cfg setup.py",
        "setup.py": "try:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\nwith open('README') as file:\nlong_description = file.read()\n\nsetup(name='flask-swagger',\nversion='0.2.14',\nurl='https:\/\/github.com\/gangverk\/flask-swagger',\ndescription='Extract swagger specs from your flask project',\nauthor='Atli Thorbjornsson',\nlicense='MIT',\npy_modules=['flask_swagger', 'build_swagger_spec'],\nlong_description=long_description,\ninstall_requires=['Flask>=0.10', 'PyYAML>=5.1'],\nclassifiers=[\n'Intended Audience :: Developers',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\nentry_points = \"\"\"\n[console_scripts]\nflaskswagger = build_swagger_spec:run\n\"\"\",\noptions={\n'bdist_rpm':{\n'build_requires':[\n'python',\n'python-setuptools',\n'python-itsdangerous',\n'python-flask',\n'python-markupsafe',\n'PyYAML',\n],\n'requires':[\n'python',\n'python-setuptools',\n'python-itsdangerous',\n'python-flask',\n'python-markupsafe',\n'PyYAML',\n],\n},\n},\n)\n"
    },
    {
        "package_name": "flaskoidc-1.1.2",
        "file_list": "config.py models.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from os import path\n\nfrom setuptools import setup, find_packages\n\nrequirements = [\n\"Flask>=1.0.2\",\n\"Authlib>=1.0.0,<2.0.0\",\n\"requests>=2.25.1\",\n\"Flask-SQLAlchemy>=2.5.1\",\n]\n\n# read the contents of your README file\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, \"README.md\"), encoding=\"utf-8\") as f:\nlong_description = f.read()\n\n__version__ = \"1.1.2\"\n\nsetup(\nname=\"flaskoidc\",\nversion=__version__,\ndescription=\"Flask wrapper with pre-configured OAuth2 and OIDC support\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/verdan\/flaskoidc.git\",\nauthor=\"Verdan Mahmood\",\nauthor_email=\"verdan.mahmood@gmail.com\",\npackages=find_packages(exclude=[\"tests*\"]),\ninclude_package_data=True,\ndependency_links=[],\ninstall_requires=requirements,\npython_requires=\">=3.6\",\n)\n"
    },
    {
        "package_name": "flax-0.5.3",
        "file_list": "AUTHORS config.py axes_scan.py frozen_dict.py lift.py attention.py linear.py normalization.py stochastic.py __init__.py scope.py tracers.py variables.py __init__.py errors.py ids.py jax_utils.py activation.py attention.py combinators.py dotgetter.py dtypes.py initializers.py linear.py module.py normalization.py partitioning.py pooling.py recurrent.py stochastic.py summary.py transforms.py __init__.py tensorboard.py __init__.py adabelief.py adadelta.py adafactor.py adagrad.py adam.py base.py dynamic_scale.py lamb.py lars.py momentum.py rmsprop.py sgd.py weight_norm.py __init__.py py.typed serialization.py struct.py benchmark.py __init__.py traceback_util.py checkpoints.py common_utils.py early_stopping.py lr_schedule.py prefetch_iterator.py train_state.py __init__.py traverse_util.py version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# Copyright 2022 The Flax Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"setup.py for Flax.\"\"\"\n\nimport os\nfrom setuptools import find_packages\nfrom setuptools import setup\n\nhere = os.path.abspath(os.path.dirname(__file__))\ntry:\nREADME = open(os.path.join(here, \"README.md\"), encoding=\"utf-8\").read()\nexcept OSError:\nREADME = \"\"\n\ninstall_requires = [\n\"numpy>=1.12\",\n\"jax>=0.3.2\",\n\"matplotlib\", # only needed for tensorboard export\n\"msgpack\",\n\"optax\",\n\"rich~=11.1\",\n\"tensorstore\",\n\"typing_extensions>=4.1.1\",\n\"PyYAML>=5.4.1\",\n]\n\ntests_require = [\n\"atari-py==0.2.5\", # Last version does not have the ROMs we test on pre-packaged\n\"clu\", # All examples.\n\"gym==0.18.3\",\n\"jaxlib\",\n\"jraph\",\n\"ml-collections\",\n\"opencv-python\",\n\"pytest\",\n\"pytest-cov\",\n\"pytest-xdist==1.34.0\", # upgrading to 2.0 broke tests, need to investigate\n\"pytype\",\n\"sentencepiece\", # WMT example.\n\"svn\",\n\"tensorflow_text>=2.4.0\", # WMT example.\n\"tensorflow_datasets\",\n\"tensorflow\",\n\"torch\",\n\"pandas\", # get_repo_metrics script\n]\n\n__version__ = None\n\nwith open(\"flax\/version.py\") as f:\nexec(f.read(), globals())\n\nsetup(\nname=\"flax\",\nversion=__version__,\ndescription=\"Flax: A neural network library for JAX designed for flexibility\",\nlong_description=\"\\n\\n\".join([README]),\nlong_description_content_type=\"text\/markdown\",\nclassifiers=[\n\"Development Status :: 3 - Alpha\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Science\/Research\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3.7\",\n\"Topic :: Scientific\/Engineering :: Artificial Intelligence\",\n],\nkeywords=\"\",\nauthor=\"Flax team\",\nauthor_email=\"flax-dev@google.com\",\nurl=\"https:\/\/github.com\/google\/flax\",\npackages=find_packages(),\npackage_data={\"flax\": [\"py.typed\"]},\nzip_safe=False,\ninstall_requires=install_requires,\nextras_require={\n\"testing\": tests_require,\n},\n)\n"
    },
    {
        "package_name": "flower-1.2.0",
        "file_list": "api.ipynb api.rst auth.rst conf.py config.rst docker.rst features.rst index.rst install.rst Makefile man.rst prometheus-integration.rst reverse-proxy.rst broker.png config.png dashboard.png flower-metrics-in-prometheus.png grafana-add-data-source.png grafana-add-prometheus-data-source.png grafana-configure-imported-dashboard.png grafana-configure-prometheus-data-source.png grafana-dashboard.png grafana-import-celery-monitoring-dashboard.png grafana-import-dashboard.png grafana-test-prometheus-data-source.png limits.png pool.png queues.png task.png tasks.png worker-tasks.png screenshots.rst tasks.py tasks_filter.rst .keep localtoc.html page.html sidebarintro.html sidebarlogo.html celery.css_t theme.conf control.py tasks.py workers.py __init__.py app.py command.py events.py inspector.py options.py bootstrap-datetimepicker.min.css bootstrap-responsive.css bootstrap-responsive.min.css bootstrap.css bootstrap.min.css flower.css ui-bg_flat_0_aaaaaa_40x100.png ui-bg_flat_75_ffffff_40x100.png ui-bg_glass_55_fbf9ee_1x400.png ui-bg_glass_65_ffffff_1x400.png ui-bg_glass_75_dadada_1x400.png ui-bg_glass_75_e6e6e6_1x400.png ui-bg_glass_95_fef1ec_1x400.png ui-bg_highlight-soft_75_cccccc_1x100.png ui-icons_222222_256x240.png ui-icons_2e83ff_256x240.png ui-icons_454545_256x240.png ui-icons_888888_256x240.png ui-icons_cd0a0a_256x240.png jquery-ui.css jquery.dataTables.buttons.min.css jquery.dataTables.colReorder.min.css jquery.dataTables.css jquery.dataTables.min.css jquery.dataTables.select.min.css favicon.ico apple-touch-icon-114-precomposed.png apple-touch-icon-144-precomposed.png apple-touch-icon-57-precomposed.png apple-touch-icon-72-precomposed.png datatable_sort_asc.png datatable_sort_asc_disabled.png datatable_sort_both.png datatable_sort_desc.png datatable_sort_desc_disabled.png glyphicons-halflings-white.png glyphicons-halflings.png bootstrap-alert.js bootstrap-button.js bootstrap-carousel.js bootstrap-collapse.js bootstrap-datetimepicker.min.js bootstrap-dropdown.js bootstrap-modal.js bootstrap-popover.js bootstrap-scrollspy.js bootstrap-tab.js bootstrap-tooltip.js bootstrap-transition.js bootstrap-typeahead.js bootstrap.js bootstrap.min.js flower.js jquery-1.7.2.min.js jquery-ui-1-8-15.min.js jquery.dataTables.buttons.min.js jquery.dataTables.colReorder.min.js jquery.dataTables.min.js jquery.dataTables.select.min.js jquery.dataTables.sorting.natural.js moment-timezone-with-data.min.js moment.min.js swagger.json 404.html base.html broker.html dashboard.html error.html navbar.html task.html tasks.html worker.html urls.py broker.py search.py tasks.py template.py __init__.py auth.py broker.py dashboard.py error.py monitor.py tasks.py workers.py __init__.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst default.txt dev.txt docs.txt test.txt setup.cfg setup.py call-tasks.sh load.py run-unit-tests.sh test_control.py test_tasks.py test_workers.py __init__.py test_command.py test_broker.py test_search.py test_template.py test_utils.py __init__.py test_auth.py test_dashboard.py test_error.py test_monitor.py test_tasks.py test_url_handlers.py __init__.py __init__.py __main__.py __init__.cpython-38.pyc __init__.py __init__.cpython-38.pyc",
        "setup.py": "#!\/usr\/bin\/env python\nimport os\nimport re\n\nfrom setuptools import setup, find_packages\n\n\nversion = re.compile(r'VERSION\\s*=\\s*\\((.*?)\\)')\n\n\ndef get_package_version():\n\"returns package version without importing it\"\nbase = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(base, \"flower\/__init__.py\")) as initf:\nfor line in initf:\nm = version.match(line.strip())\nif not m:\ncontinue\nreturn \".\".join(m.groups()[0].split(\", \"))\n\n\ndef get_requirements(filename):\nreturn open('requirements\/' + filename).read().splitlines()\n\n\nclasses = \"\"\"\nDevelopment Status :: 4 - Beta\nIntended Audience :: Developers\nLicense :: OSI Approved :: BSD License\nTopic :: System :: Distributed Computing\nProgramming Language :: Python\nProgramming Language :: Python :: 3\nProgramming Language :: Python :: 3 :: Only\nProgramming Language :: Python :: 3.6\nProgramming Language :: Python :: 3.7\nProgramming Language :: Python :: 3.8\nProgramming Language :: Python :: 3.9\nProgramming Language :: Python :: Implementation :: CPython\nProgramming Language :: Python :: Implementation :: PyPy\nOperating System :: OS Independent\n\"\"\"\nclassifiers = [s.strip() for s in classes.split('\\n') if s]\n\n\nsetup(\nname='flower',\nversion=get_package_version(),\ndescription='Celery Flower',\nlong_description_content_type=\"text\/markdown\",\nlong_description=open('README.rst').read(),\nauthor='Mher Movsisyan',\nurl='https:\/\/github.com\/mher\/flower',\nlicense='BSD',\nclassifiers=classifiers,\npackages=find_packages(exclude=['tests', 'tests.*']),\ninstall_requires=get_requirements('default.txt'),\ntest_suite=\"tests\",\ntests_require=get_requirements('test.txt'),\npackage_data={'flower': ['templates\/*', 'static\/*.*',\n'static\/**\/*.*', 'static\/**\/**\/*.*']},\nentry_points={\n'celery.commands': [\n'flower = flower.command:flower',\n],\n},\n)\n"
    },
    {
        "package_name": "fnvhash-0.1.0",
        "file_list": "__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "from setuptools import setup\n\nsetup(\nname='fnvhash',\nversion='0.1.0',\ndescription='Pure Python FNV hash implementation',\nauthor='Lorenz Schori',\nauthor_email='lo@znerol.ch',\nurl='https:\/\/github.com\/znerol\/py-fnvhash',\npackages=['fnvhash'],\ntest_suite=\"fnvhash.test\",\nzip_safe=True,\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Topic :: Internet',\n'Topic :: Software Development',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Utilities'\n]\n)\n"
    },
    {
        "package_name": "focal-loss-0.0.7",
        "file_list": "PKG-INFO README.rst setup.cfg setup.py validation.py __init__.py _binary_focal_loss.py _categorical_focal_loss.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "\"\"\"Setup script.\"\"\"\n\nimport os\nimport pathlib\nimport re\n\nfrom setuptools import setup, find_packages\n\n# Set the environment variable TF_CPU (to anything) to use tensorflow-cpu\n_TENSORFLOW_CPU = os.environ.get('TF_CPU', None)\n\n# TensorFlow package name and version\n_TENSORFLOW = 'tensorflow' if _TENSORFLOW_CPU is None else 'tensorflow-cpu'\n_MIN_TENSORFLOW_VERSION = '2.2'\n_TENSORFLOW += f'>={_MIN_TENSORFLOW_VERSION}'\n\n# Directory of this setup.py file\n_HERE = pathlib.Path(__file__).parent\n\n\ndef _resolve_path(*parts):\n\"\"\"Get a filename from a list of path components, relative to this file.\"\"\"\nreturn _HERE.joinpath(*parts).absolute()\n\n\ndef _read(*parts):\n\"\"\"Read a file's contents into a string.\"\"\"\nfilename = _resolve_path(*parts)\nreturn filename.read_text()\n\n\n__INIT__ = _read('src', 'focal_loss', '__init__.py')\n\n\ndef _get_package_variable(name):\npattern = rf'^{name} = [\\'\"](?P<value>[^\\'\"]*)[\\'\"]'\nmatch = re.search(pattern, __INIT__, flags=re.M)\nif match:\nreturn match.group('value')\nraise RuntimeError(f'Cannot find variable {name}')\n\n\nsetup(\nname=_get_package_variable('__package__'),\nversion=_get_package_variable('__version__'),\ndescription=_get_package_variable('__description__'),\nurl=_get_package_variable('__url__'),\nauthor=_get_package_variable('__author__'),\nauthor_email=_get_package_variable('__author_email__'),\nlong_description=_read('README.rst'),\nlong_description_content_type='text\/x-rst',\npackages=find_packages('src', exclude=['*.tests']),\npackage_dir={'': 'src'},\nlicense='Apache 2.0',\nclassifiers=[\n'Development Status :: 1 - Planning',\n'Intended Audience :: Developers',\n'Intended Audience :: Education',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Topic :: Scientific\/Engineering',\n'Topic :: Scientific\/Engineering :: Artificial Intelligence',\n'Topic :: Scientific\/Engineering :: Mathematics',\n'Topic :: Software Development',\n'Topic :: Software Development :: Libraries',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\ninstall_requires=[\n_TENSORFLOW,\n],\nextras_require={\n# The 'dev' extra is for development, including running tests and\n# generating documentation\n'dev': [\n'numpy',\n'scipy',\n'matplotlib',\n'seaborn',\n'pytest',\n'coverage',\n'sphinx',\n'sphinx_rtd_theme',\n],\n},\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "fpdf2-2.5.5",
        "file_list": "actions.py deprecation.py drawing.py enums.py errors.py fonts.py fpdf.py graphics_state.py html.py image_parsing.py line_break.py outline.py prefs.py recorder.py structure_tree.py svg.py syntax.py template.py transitions.py ttfonts.py util.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport re\nfrom pathlib import Path\n\nfrom setuptools import find_packages, setup\n\n\nif __name__ == \"__main__\":\nversion = re.findall(\nr'FPDF_VERSION = \"(\\d+.\\d+.\\d+[^\"]*)\"',\nPath(\"fpdf\/fpdf.py\").read_text(encoding=\"utf-8\"),\n)[0]\nsetup(\nname=\"fpdf2\",\nversion=version,\ndescription=\"Simple & fast PDF generation for Python\",\nlong_description=Path(\"README.md\").read_text(encoding=\"utf-8\"),\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Olivier PLATHEY ported by Max\",\nmaintainer=\"Lucas Cimon\",\nurl=\"https:\/\/pyfpdf.github.io\/fpdf2\/\",\ndownload_url=f\"https:\/\/github.com\/PyFPDF\/fpdf2\/tarball\/{version}\",\nproject_urls={\n\"Documentation\": \"https:\/\/pyfpdf.github.io\/fpdf2\/\",\n\"Code\": \"https:\/\/github.com\/PyFPDF\/fpdf2\",\n\"Issue tracker\": \"https:\/\/github.com\/PyFPDF\/fpdf2\/issues\",\n},\nlicense=\"LGPLv3+\",\npackages=find_packages(),\npackage_dir={\"fpdf\": \"fpdf\"},\ninstall_requires=[\n\"defusedxml\",\n\"Pillow>=6.2.2\", # minimum version tested there: https:\/\/github.com\/PyFPDF\/fpdf2\/actions\/runs\/2295868575\n],\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Operating System :: OS Independent\",\n\"Topic :: Printing\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Topic :: Text Processing :: Markup\",\n\"Topic :: Multimedia :: Graphics\",\n\"Topic :: Multimedia :: Graphics :: Presentation\",\n],\nkeywords=[\"pdf\", \"unicode\", \"png\", \"jpg\", \"ttf\", \"barcode\"],\n)\n"
    },
    {
        "package_name": "frictionless-4.40.6",
        "file_list": "AUTHORS.md describe.py extract.py transform.py validate.py __init__.py general.json topojson.json inquiry.json fiscal.json general.json tabular.json pipeline.json report.json general.json tabular.json general.json status.json field.html graph.html primary_key_field.html table.html field-table.md field.md package-table.md package.md resource-table.md resource.md schema-table.md schema.md VERSION check.py baseline.py ascii_value.py deviated_cell.py deviated_value.py forbidden_value.py sequential_value.py truncated_value.py __init__.py duplicate_row.py row_constraint.py __init__.py table_dimensions.py __init__.py __init__.py control.py detector.py validate.py __init__.py dialect.py validate.py __init__.py error.py cell.py file.py general.py header.py label.py row.py table.py __init__.py exception.py field.py file.py header.py helpers.py inquiry.py validate.py __init__.py layout.py loader.py metadata.py analyze.py describe.py extract.py package.py transform.py validate.py __init__.py parser.py pipeline.py transform.py validate.py __init__.py plugin.py dialect.py parser.py plugin.py settings.py storage.py __init__.py control.py loader.py plugin.py __init__.py dialect.py parser.py plugin.py storage.py __init__.py dialect.py parser.py plugin.py settings.py __init__.py dialect.py xls.py xlsx.py __init__.py plugin.py settings.py __init__.py dialect.py parser.py plugin.py __init__.py dialect.py parser.py plugin.py __init__.py dialect.py parser.py plugin.py __init__.py dialect.py json.py jsonl.py __init__.py plugin.py __init__.py control.py loader.py plugin.py __init__.py control.py loader.py plugin.py settings.py __init__.py dialect.py parser.py plugin.py __init__.py dialect.py parser.py plugin.py __init__.py control.py loader.py plugin.py settings.py __init__.py control.py loader.py plugin.py settings.py __init__.py plugin.py server.py __init__.py dialect.py parser.py plugin.py settings.py __init__.py dialect.py parser.py plugin.py settings.py storage.py __init__.py control.py loader.py plugin.py __init__.py __init__.py api.py common.py describe.py extract.py main.py summary.py transform.py validate.py __init__.py report.py validate.py __init__.py analyze.py describe.py extract.py resource.py transform.py validate.py __init__.py row.py describe.py schema.py validate.py __init__.py server.py settings.py status.py validate.py __init__.py step.py cell_convert.py cell_fill.py cell_format.py cell_interpolate.py cell_replace.py cell_set.py __init__.py field_add.py field_filter.py field_merge.py field_move.py field_pack.py field_remove.py field_split.py field_unpack.py field_update.py __init__.py resource_add.py resource_remove.py resource_transform.py resource_update.py __init__.py row_filter.py row_search.py row_slice.py row_sort.py row_split.py row_subset.py row_ungroup.py __init__.py table_aggregate.py table_attach.py table_debug.py table_diff.py table_intersect.py table_join.py table_melt.py table_merge.py table_normalize.py table_pivot.py table_print.py table_recast.py table_transpose.py table_validate.py table_write.py __init__.py __init__.py storage.py system.py type.py any.py array.py boolean.py date.py datetime.py duration.py geojson.py geopoint.py integer.py number.py object.py string.py time.py year.py yearmonth.py __init__.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.md Makefile MANIFEST.in PKG-INFO pylama.ini pyproject.toml pytest.ini README.md setup.cfg setup.py test_dialect.py test_main.py test_package.py test_resource.py test_schema.py __init__.py test_main.py test_package.py test_resource.py __init__.py test_main.py test_package.py test_pipeline.py test_resource.py __init__.py test_inquiry.py test_main.py test_package.py test_resource.py test_schema.py __init__.py __init__.py test_general.py __init__.py __init__.py test_general.py test_general.py __init__.py __init__.py test_general.py __init__.py test_general.py __init__.py test_general.py __init__.py test_compression.py test_expand.py test_export.py test_general.py test_infer.py test_metadata.py test_onerror.py test_resources.py test_schema.py test_general.py __init__.py test_general.py test_parallel.py test_schema.py test_stats.py __init__.py __init__.py test_general.py test_general.py __init__.py test_general.py __init__.py __init__.py conftest.py test_parser.py test_storage.py __init__.py test_loader.py __init__.py conftest.py test_parser.py test_storage.py __init__.py test_parser.py __init__.py test_dialect.py __init__.py test_parser.py __init__.py test_parser.py __init__.py test_parser.py __init__.py test_json.py test_jsonl.py __init__.py test_dialect.py __init__.py test_loader.py __init__.py test_loader.py __init__.py test_parser.py __init__.py test_parser.py __init__.py test_loader.py __init__.py test_loader.py __init__.py test_server.py __init__.py test_parser.py __init__.py test_mysql.py test_postgres.py test_sqlite.py __init__.py test_mysql.py test_postgres.py test_sqlite.py __init__.py __init__.py test_loader.py __init__.py __init__.py test_general.py test_report.py test_reporttask.py __init__.py test_general.py __init__.py test_general.py __init__.py test_compression.py test_control.py test_detector.py test_dialect.py test_encoding.py test_expand.py test_export.py test_format.py test_general.py test_hashing.py test_infer.py test_innerpath.py test_layout.py test_onerror.py test_open.py test_read.py test_schema.py test_scheme.py test_stats.py test_write.py test_general.py __init__.py test_compression.py test_detector.py test_dialect.py test_encoding.py test_format.py test_general.py test_layout.py test_schema.py test_scheme.py test_stats.py __init__.py __init__.py test_general.py __init__.py test_expand.py test_export.py test_general.py test_metadata.py test_general.py __init__.py __init__.py __init__.py",
        "setup.py": "import os\nimport io\nfrom setuptools import setup, find_packages\n\n\n# Helpers\n\n\ndef read(*paths):\n\"\"\"Read a text file.\"\"\"\nbasedir = os.path.dirname(__file__)\nfullpath = os.path.join(basedir, *paths)\ncontents = io.open(fullpath, encoding=\"utf-8\").read().strip()\nreturn contents\n\n\n# Prepare\n\n\nPACKAGE = \"frictionless\"\nNAME = PACKAGE.replace(\"_\", \"-\")\nTESTS_REQUIRE = [\n\"mypy\",\n\"moto\",\n\"black\",\n# TODO: remove after the fix\n# https:\/\/github.com\/klen\/pylama\/issues\/224\n\"pyflakes==2.4.0\",\n\"pylama\",\n\"pytest\",\n\"ipython\",\n\"pymysql\",\n\"livemark\",\n\"psycopg2\",\n\"pytest-cov\",\n\"pytest-vcr\",\n\"pytest-only\",\n\"oauth2client\",\n\"requests-mock\",\n\"python-dotenv\",\n\"pytest-timeout\",\n\"pydoc-markdown\",\n\"docstring-parser\",\n\"yattag\",\n]\nEXTRAS_REQUIRE = {\n\"bigquery\": [\"google-api-python-client>=1.12.1\"],\n\"ckan\": [\"ckanapi>=4.3\"],\n\"excel\": [\n\"openpyxl>=3.0\",\n\"xlrd>=1.2\",\n\"xlwt>=1.2\",\n\"tableschema-to-template>=0.0.12\",\n],\n\"gsheets\": [\"pygsheets>=2.0\"],\n\"html\": [\"pyquery>=1.4\"],\n\"json\": [\"ijson>=3.0\", \"jsonlines>=1.2\"],\n\"ods\": [\"ezodf>=0.3\", \"lxml>=4.0\"],\n\"pandas\": [\"pandas>=1.0\"],\n\"s3\": [\"boto3>=1.9\"],\n\"server\": [\"gunicorn>=20.0\", \"flask>=1.1\"],\n\"spss\": [\"savReaderWriter>=3.0\"],\n\"sql\": [\"sqlalchemy>=1.3\"],\n\"dev\": TESTS_REQUIRE,\n}\nINSTALL_REQUIRES = [\n\"petl>=1.6\",\n\"marko>=1.0\",\n\"pyyaml>=5.3\",\n\"isodate>=0.6\",\n\"rfc3986>=1.4\",\n\"chardet>=3.0\",\n\"requests>=2.10\",\n\"jsonschema>=2.5\",\n\"simpleeval>=0.9.11\",\n\"stringcase>=1.2\",\n\"typer[all]==0.5.0\",\n\"validators>=0.18\",\n\"python-slugify>=1.2\",\n\"python-dateutil>=2.8\",\n\"tableschema-to-template>=0.0.12\",\n\"tabulate>=0.8.10\",\n\"jinja2>=3.0.3\",\n]\nREADME = read(\"README.md\")\nVERSION = read(PACKAGE, \"assets\", \"VERSION\")\nPACKAGES = find_packages(exclude=[\"tests\"])\nENTRY_POINTS = {\"console_scripts\": [\"frictionless = frictionless.__main__:program\"]}\n\n\n# Run\n\n\nsetup(\nname=NAME,\nversion=VERSION,\npackages=PACKAGES,\ninclude_package_data=True,\ninstall_requires=INSTALL_REQUIRES,\ntests_require=TESTS_REQUIRE,\nextras_require=EXTRAS_REQUIRE,\nentry_points=ENTRY_POINTS,\nzip_safe=False,\nlong_description=README,\nlong_description_content_type=\"text\/markdown\",\ndescription=\"Data management framework for Python that provides functionality to describe, extract, validate, and transform tabular data\",\nauthor=\"Open Knowledge Foundation\",\nauthor_email=\"info@okfn.org\",\nurl=\"https:\/\/github.com\/frictionlessdata\/frictionless-py\",\nlicense=\"MIT\",\nkeywords=[\n\"data validation\",\n\"frictionless data\",\n\"open data\",\n\"json schema\",\n\"json table schema\",\n\"data package\",\n\"tabular data package\",\n],\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Environment :: Console\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\n)\n"
    },
    {
        "package_name": "frozenlist-1.3.1",
        "file_list": "CHANGES.rst CONTRIBUTORS.txt conf.py index.rst make.bat Makefile spelling_wordlist.txt py.typed _frozenlist.c _frozenlist.pyx __init__.py __init__.pyi dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py conftest.py test_frozenlist.py",
        "setup.py": "import os\nimport sys\n\nfrom setuptools import Extension, setup\n\nNO_EXTENSIONS = (\nbool(os.environ.get(\"FROZENLIST_NO_EXTENSIONS\"))\nor sys.implementation.name != \"cpython\"\n)\n\nif NO_EXTENSIONS:\nprint(\"*********************\")\nprint(\"* Pure Python build *\")\nprint(\"*********************\")\next_modules = None\nelse:\nprint(\"*********************\")\nprint(\"* Accelerated build *\")\nprint(\"*********************\")\next_modules = [Extension(\"frozenlist._frozenlist\", [\"frozenlist\/_frozenlist.c\"])]\n\n\nsetup(\next_modules=ext_modules,\n)\n"
    },
    {
        "package_name": "funcparserlib-1.0.0",
        "file_list": "lexer.py lexer.pyi parser.py parser.pyi py.typed util.py util.pyi __init__.py LICENSE PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['funcparserlib']\n\npackage_data = \\\n{'': ['*']}\n\nsetup_kwargs = {\n'name': 'funcparserlib',\n'version': '1.0.0',\n'description': 'Recursive descent parsing library based on functional combinators',\n'long_description': 'Funcparserlib\\n=============\\n\\nRecursive descent parsing library for Python based on functional combinators.\\n\\n[![PyPI](https:\/\/img.shields.io\/pypi\/v\/funcparserlib)](https:\/\/pypi.org\/project\/funcparserlib\/)\\n[![PyPI - Downloads](https:\/\/img.shields.io\/pypi\/dm\/funcparserlib)](https:\/\/pypi.org\/project\/funcparserlib\/)\\n\\n\\nDescription\\n-----------\\n\\nThe primary focus of `funcparserlib` is **parsing little languages** or **external DSLs** (domain specific languages).\\n\\nParsers made with `funcparserlib` are pure-Python LL(\\\\*) parsers. It means that it\\'s **very easy to write parsers** without thinking about lookaheads and other hardcore parsing stuff. However, recursive descent parsing is a rather slow method compared to LL(k) or LR(k) algorithms. Still, parsing with `funcparserlib` is **at least twice faster than PyParsing**, a very popular library for Python.\\n\\nThe source code of `funcparserlib` is only 1.2K lines of code, with lots of comments. Its API is fully type hinted. It features the longest parsed prefix error reporting, as well as a tiny lexer generator for token position tracking.\\n\\nThe idea of parser combinators used in `funcparserlib` comes from the [Introduction to Functional Programming](https:\/\/www.cl.cam.ac.uk\/teaching\/Lectures\/funprog-jrh-1996\/) course. We have converted it from ML into Python.\\n\\n\\nInstallation\\n------------\\n\\nYou can install `funcparserlib` from [PyPI](https:\/\/pypi.org\/project\/funcparserlib\/):\\n\\n```shell\\n$ pip install funcparserlib\\n```\\n\\nThere are no dependencies on other libraries.\\n\\n\\nDocumentation\\n-------------\\n\\n* [Getting Started](https:\/\/funcparserlib.pirx.ru\/getting-started\/)\\n * Your **starting point** with `funcparserlib`\\n* [API Reference](https:\/\/funcparserlib.pirx.ru\/api\/)\\n * Learn the details of the API\\n\\nThere are several examples available in the `tests\/` directory:\\n\\n* [GraphViz DOT parser](https:\/\/github.com\/vlasovskikh\/funcparserlib\/blob\/master\/tests\/dot.py)\\n* [JSON parser](https:\/\/github.com\/vlasovskikh\/funcparserlib\/blob\/master\/tests\/json.py)\\n\\nSee also [the changelog](https:\/\/funcparserlib.pirx.ru\/changes\/).\\n\\n\\nExample\\n-------\\n\\nLet\\'s consider a little language of **numeric expressions** with a syntax similar to Python expressions. Here are some expression strings in this language:\\n\\n```\\n0\\n1 + 2 + 3\\n-1 + 2 ** 32\\n3.1415926 * (2 + 7.18281828e-1) * 42\\n```\\n\\n\\nHere is **the complete source code** of the tokenizer and the parser for this language written using `funcparserlib`:\\n\\n```python\\nfrom typing import List, Tuple, Union\\nfrom dataclasses import dataclass\\n\\nfrom funcparserlib.lexer import make_tokenizer, TokenSpec, Token\\nfrom funcparserlib.parser import tok, Parser, many, forward_decl, finished\\n\\n\\n@dataclass\\nclass BinaryExpr:\\n op: str\\n left: \"Expr\"\\n right: \"Expr\"\\n\\n\\nExpr = Union[BinaryExpr, int, float]\\n\\n\\ndef tokenize(s: str) -> List[Token]:\\n specs = [\\n TokenSpec(\"whitespace\", r\"\\\\s+\"),\\n TokenSpec(\"float\", r\"[+\\\\-]?\\\\d+\\\\.\\\\d*([Ee][+\\\\-]?\\\\d+)*\"),\\n TokenSpec(\"int\", r\"[+\\\\-]?\\\\d+\"),\\n TokenSpec(\"op\", r\"(\\\\*\\\\*)|[+\\\\-*\/()]\"),\\n ]\\n tokenizer = make_tokenizer(specs)\\n return [t for t in tokenizer(s) if t.type != \"whitespace\"]\\n\\n\\ndef parse(tokens: List[Token]) -> Expr:\\n int_num = tok(\"int\") >> int\\n float_num = tok(\"float\") >> float\\n number = int_num | float_num\\n\\n expr: Parser[Token, Expr] = forward_decl()\\n parenthesized = -op(\"(\") + expr + -op(\")\")\\n primary = number | parenthesized\\n power = primary + many(op(\"**\") + primary) >> to_expr\\n term = power + many((op(\"*\") | op(\"\/\")) + power) >> to_expr\\n sum = term + many((op(\"+\") | op(\"-\")) + term) >> to_expr\\n expr.define(sum)\\n\\n document = expr + -finished\\n\\n return document.parse(tokens)\\n\\n\\ndef op(name: str) -> Parser[Token, str]:\\n return tok(\"op\", name)\\n\\n\\ndef to_expr(args: Tuple[Expr, List[Tuple[str, Expr]]]) -> Expr:\\n first, rest = args\\n result = first\\n for op, expr in rest:\\n result = BinaryExpr(op, result, expr)\\n return result\\n```\\n\\nNow, consider this numeric expression: `3.1415926 * (2 + 7.18281828e-1) * 42`.\\n\\nLet\\'s `tokenize()` it using the tokenizer we\\'ve created with `funcparserlib.lexer`:\\n\\n```\\n[\\n Token(\\'float\\', \\'3.1415926\\'),\\n Token(\\'op\\', \\'*\\'),\\n Token(\\'op\\', \\'(\\'),\\n Token(\\'int\\', \\'2\\'),\\n Token(\\'op\\', \\'+\\'),\\n Token(\\'float\\', \\'7.18281828e-1\\'),\\n Token(\\'op\\', \\')\\'),\\n Token(\\'op\\', \\'*\\'),\\n Token(\\'int\\', \\'42\\'),\\n]\\n```\\n\\nLet\\'s `parse()` these tokens into an expression tree using our parser created with `funcparserlib.parser`:\\n\\n```\\nBinaryExpr(\\n op=\\'*\\',\\n left=BinaryExpr(\\n op=\\'*\\',\\n left=3.1415926,\\n right=BinaryExpr(op=\\'+\\', left=2, right=0.718281828),\\n ),\\n right=42,\\n)\\n```\\n\\nLearn how to write this parser using `funcparserlib` in the [Getting Started](https:\/\/funcparserlib.pirx.ru\/getting-started\/) guide!\\n\\n\\nUsed By\\n-------\\n\\nSome open-source projects that use `funcparserlib` as an explicit dependency:\\n\\n* [Hy](https:\/\/github.com\/hylang\/hy), a Lisp dialect that\\'s embedded in Python\\n * 4.2K stars, version `>= 1.0.0a0`, Python 3.7+\\n* [Splash](https:\/\/github.com\/scrapinghub\/splash), a JavaScript rendering service with HTTP API, by Scrapinghub\\n * 3.6K stars, version `*`. Python 3 in Docker\\n* [graphite-beacon](https:\/\/github.com\/klen\/graphite-beacon), a simple alerting system for Graphite metrics\\n * 459 stars, version `==0.3.6`, Python 2 and 3\\n* [blockdiag](https:\/\/github.com\/blockdiag\/blockdiag), generates block-diagram image file from spec-text file\\n * 148 stars, version `>= 1.0.0a0`, Python 3.7+\\n* [kll](https:\/\/github.com\/kiibohd\/kll), Keyboard Layout Language (KLL) compiler\\n * 109 stars, copied source code, Python 3.5+\\n\\n\\nNext\\n----\\n\\nRead the [Getting Started](https:\/\/funcparserlib.pirx.ru\/getting-started\/) guide to start learning `funcparserlib`.\\n',\n'author': 'Andrey Vlasovskikh',\n'author_email': 'andrey.vlasovskikh@gmail.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/funcparserlib.pirx.ru',\n'packages': packages,\n'package_data': package_data,\n'python_requires': '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "functions-framework-3.1.0",
        "file_list": "LICENSE PKG-INFO README.md setup.cfg setup.py background_event.py event_conversion.py exceptions.py _cli.py _function_registry.py flask.py gunicorn.py __init__.py __init__.py __main__.py dependency_links.txt entry_points.txt namespace_packages.txt PKG-INFO requires.txt SOURCES.txt top_level.txt context.py __init__.py context.py __init__.py context.py __init__.py __init__.py __init__.py",
        "setup.py": "# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom io import open\nfrom os import path\n\nfrom setuptools import find_packages, setup\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\nlong_description = f.read()\n\nsetup(\nname=\"functions-framework\",\nversion=\"3.1.0\",\ndescription=\"An open source FaaS (Function as a service) framework for writing portable Python functions -- brought to you by the Google Cloud Functions team.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/googlecloudplatform\/functions-framework-python\",\nauthor=\"Google LLC\",\nauthor_email=\"googleapis-packages@google.com\",\nclassifiers=[\n\"Development Status :: 3 - Alpha\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\nkeywords=\"functions-framework\",\npackages=find_packages(where=\"src\"),\nnamespace_packages=[\"google\", \"google.cloud\"],\npackage_dir={\"\": \"src\"},\npython_requires=\">=3.5, <4\",\ninstall_requires=[\n\"flask>=1.0,<3.0\",\n\"click>=7.0,<9.0\",\n\"watchdog>=1.0.0\",\n\"gunicorn>=19.2.0,<21.0; platform_system!='Windows'\",\n\"cloudevents>=1.2.0,<2.0.0\",\n],\nentry_points={\n\"console_scripts\": [\n\"ff=functions_framework._cli:_cli\",\n\"functions-framework=functions_framework._cli:_cli\",\n\"functions_framework=functions_framework._cli:_cli\",\n\"functions-framework-python=functions_framework._cli:_cli\",\n\"functions_framework_python=functions_framework._cli:_cli\",\n]\n},\n)\n"
    },
    {
        "package_name": "funcx-endpoint-0.3.10",
        "file_list": "config.py default_config.py endpoint.py endpoint_manager.py interchange.py register_endpoint.py results_ack.py taskqueue.py config.py __init__.py __init__.py container_sched.py executor.py funcx_manager.py funcx_worker.py global_config.py interchange.py interchange_task_dispatch.py mac_safe_queue.py messages.py worker_map.py zmq_pipes.py __init__.py __init__.py logging_config.py kube.py template.py __init__.py __init__.py base.py kube_simple.py simple.py test.py __init__.py version.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO setup.cfg setup.py",
        "setup.py": "import os\n\nfrom setuptools import find_packages, setup\n\nREQUIRES = [\n\"requests>=2.20.0,<3\",\n\"globus-sdk\", # version will be bounded by `funcx`\n\"funcx>=0.3.6,<0.4.0\",\n# table printing used in list-endpoints\n\"texttable>=1.6.4,<2\",\n# although psutil does not declare itself to use semver, it appears to offer\n# strong backwards-compatibility promises based on its changelog, usage, and\n# history\n#\n# TODO: re-evaluate bound after we have an answer of some kind from psutil\n# see:\n# https:\/\/github.com\/giampaolo\/psutil\/issues\/2002\n\"psutil<6\",\n# provides easy daemonization of the endpoint\n\"python-daemon>=2,<3\",\n# TODO: replace use of `typer` with `click` because\n# 1. `typer` is a thin wrapper over `click` offering very minimal additional\n# functionality\n# 2. `click` follows semver and releases new major versions when known\n# backwards-incompatible changes are introduced, making our application\n# safer to distribute\n\"typer==0.4.0\",\n\"click==8.0.4\", # pin `click` because typer uses `click` internals\n# disallow use of 22.3.0; the whl package on some platforms causes ZMQ issues\n#\n# NOTE: 22.3.0 introduced a patched version of libzmq.so to the wheel packaging\n# which may be the source of the problems , the problem can be fixed by\n# building from source, which may mean there's an issue in the packaged library\n# further investigation may be needed if the issue persists in the next pyzmq\n# release. 23.0.0 is also causing issues.\n\"pyzmq==22.2.1\",\n# TODO: evaluate removal of the 'retry' library after the update to\n# globus-sdk v3, which provides automatic retries on all API calls\n\"retry==0.9.2\",\n# 'parsl' is a core requirement of the funcx-endpoint, essential to a range\n# of different features and functions\n# pin exact versions because it does not use semver\n\"parsl==1.1.0\",\n]\n\nTEST_REQUIRES = [\n\"pytest>=5.2\",\n\"coverage>=5.2\",\n\"codecov==2.1.8\",\n\"pytest-mock==3.2.0\",\n\"flake8>=3.8\",\n]\n\n\nversion_ns = {}\nwith open(os.path.join(\"funcx_endpoint\", \"version.py\")) as f:\nexec(f.read(), version_ns)\nversion = version_ns[\"VERSION\"]\n\nsetup(\nname=\"funcx-endpoint\",\nversion=version,\npackages=find_packages(),\ndescription=\"funcX: High Performance Function Serving for Science\",\ninstall_requires=REQUIRES,\nextras_require={\n\"test\": TEST_REQUIRES,\n},\npython_requires=\">=3.6.0\",\nclassifiers=[\n\"Development Status :: 3 - Alpha\",\n\"Intended Audience :: Science\/Research\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Natural Language :: English\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Topic :: Scientific\/Engineering\",\n],\nkeywords=[\"funcX\", \"FaaS\", \"Function Serving\"],\nentry_points={\n\"console_scripts\": [\n\"funcx-endpoint=funcx_endpoint.endpoint.endpoint:cli_run\",\n\"funcx-interchange\"\n\"=funcx_endpoint.executors.high_throughput.interchange:cli_run\",\n\"funcx-manager\"\n\"=funcx_endpoint.executors.high_throughput.funcx_manager:cli_run\",\n\"funcx-worker\"\n\"=funcx_endpoint.executors.high_throughput.funcx_worker:cli_run\",\n]\n},\ninclude_package_data=True,\nauthor=\"funcX team\",\nauthor_email=\"labs@globus.org\",\nlicense=\"Apache License, Version 2.0\",\nurl=\"https:\/\/github.com\/funcx-faas\/funcx\",\n)\n"
    },
    {
        "package_name": "furl-2.1.3",
        "file_list": "common.py compat.py furl.py omdict1D.py __init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.md MANIFEST.in PKG-INFO README.md setup.cfg setup.py test_furl.py test_omdict1D.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n#\n# furl - URL manipulation made simple.\n#\n# Ansgar Grunseid\n# grunseid.com\n# grunseid@gmail.com\n#\n# License: Build Amazing Things (Unlicense)\n#\n\nimport os\nimport sys\nfrom os.path import dirname, join as pjoin\nfrom setuptools import setup, find_packages, Command\nfrom setuptools.command.test import test as TestCommand\n\n\nmeta = {}\nwith open(pjoin('furl', '__version__.py')) as f:\nexec(f.read(), meta)\n\n\nclass Publish(Command):\n\"\"\"Publish to PyPI with twine.\"\"\"\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nos.system('python setup.py sdist bdist_wheel')\n\nsdist = 'dist\/furl-%s.tar.gz' % meta['__version__']\nwheel = 'dist\/furl-%s-py2.py3-none-any.whl' % meta['__version__']\nrc = os.system('twine upload \"%s\" \"%s\"' % (sdist, wheel))\n\nsys.exit(rc)\n\n\nclass RunTests(TestCommand):\n\"\"\"\nRun the unit tests.\n\nTo test all supported Python versions (as specified in tox.ini) in\nparallel, run\n\n$ tox -p\n\nBy default, `python setup.py test` fails if tests\/ isn't a Python\nmodule; i.e. if the tests\/ directory doesn't contain an __init__.py\nfile). But the tests\/ directory shouldn't contain an __init__.py\nfile and tests\/ shouldn't be a Python module. See\n\nhttp:\/\/doc.pytest.org\/en\/latest\/goodpractices.html\n\nRunning the unit tests manually here enables `python setup.py test`\nwithout tests\/ being a Python module.\n\"\"\"\ndef run_tests(self):\nfrom unittest import TestLoader, TextTestRunner\ntests_dir = pjoin(dirname(__file__), 'tests\/')\nsuite = TestLoader().discover(tests_dir)\nresult = TextTestRunner().run(suite)\nsys.exit(0 if result.wasSuccessful() else -1)\n\n\nsetup(\nname=meta['__title__'],\nlicense=meta['__license__'],\nversion=meta['__version__'],\nauthor=meta['__author__'],\nauthor_email=meta['__contact__'],\nurl=meta['__url__'],\ndescription=meta['__description__'],\nlong_description=(\n'Information and documentation can be found at ' + meta['__url__']),\npackages=find_packages(),\ninclude_package_data=True,\nplatforms=['any'],\nclassifiers=[\n'License :: Public Domain',\n'Natural Language :: English',\n'Intended Audience :: Developers',\n'Topic :: Software Development :: Libraries',\n'Development Status :: 5 - Production\/Stable',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Programming Language :: Python :: Implementation :: CPython',\n],\ntests_require=[\n'flake8',\n'six>=1.8.0',\n],\ninstall_requires=[\n'six>=1.8.0',\n'orderedmultidict>=1.0.1',\n],\ncmdclass={\n'test': RunTests,\n'publish': Publish,\n},\n)\n"
    },
    {
        "package_name": "fusepy-3.0.1",
        "file_list": "fuse.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom __future__ import with_statement\n\nfrom setuptools import setup\n\nwith open('README') as readme:\ndocumentation = readme.read()\n\nsetup(\nname = 'fusepy',\nversion = '3.0.1',\n\ndescription = 'Simple ctypes bindings for FUSE',\nlong_description = documentation,\nauthor = 'Giorgos Verigakis',\nauthor_email = 'verigak@gmail.com',\nmaintainer = 'Terence Honles',\nmaintainer_email = 'terence@honles.com',\nlicense = 'ISC',\npy_modules=['fuse'],\nurl = 'http:\/\/github.com\/fusepy\/fusepy',\n\nclassifiers = [\n'Intended Audience :: Developers',\n'License :: OSI Approved :: ISC License (ISCL)',\n'Operating System :: MacOS',\n'Operating System :: POSIX',\n'Operating System :: Unix',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 3',\n'Topic :: System :: Filesystems',\n]\n)\n"
    },
    {
        "package_name": "future-0.18.2",
        "file_list": ".travis.yml check_rst.sh astropy_py3compat.py django_utils_encoding.py gevent_py3k.py ipython_py3compat.py jinja2_compat.py numpy_py3k.py pandas_py3k.py pycrypto_py3compat.py statsmodels_py3k.py automatic_conversion.rst bind_method.rst bytes_object.rst changelog.rst compatible_idioms.rst conf.py contents.rst.inc conversion_limitations.rst credits.rst custom_iterators.rst custom_str_methods.rst development.rst dev_notes.rst dict_object.rst faq.rst func_annotations.rst future-builtins.rst futureext.py futurize.rst futurize_cheatsheet.rst futurize_overview.rst hindsight.rst imports.rst index.rst int_object.rst isinstance.rst limitations.rst Makefile metaclasses.rst bytes object.ipynb object special methods (next, bool, ...).ipynb Writing Python 2-3 compatible code.ipynb older_interfaces.rst open_function.rst auto2to3.py find_pattern.py fix_notebook_html_colour.py lessons.txt todo.txt upload_future_docs.sh useful_links.txt overview.rst pasteurize.rst quickstart.rst reference.rst roadmap.rst standard_library_imports.rst stdlib_incompatibilities.rst str_object.rst translation.rst unicode_literals.rst upgrading.rst utilities.rst whatsnew.rst what_else.rst why_python3.rst python-future-icon-32.ico python-future-icon-white-32.ico python-future-logo-textless-transparent.png python-future-logo.png python-future-logo.tiff layout.html navbar.html sidebarintro.html sidebarlogo.html sidebartoc.html layout.html relations.html future.css_t theme.conf LICENSE README futurize.py LICENSE.txt MANIFEST.in pasteurize.py PKG-INFO pytest.ini README.rst setup.cfg setup.py __init__.py __init__.py datetime.py base64mime.py charset.py encoders.py errors.py feedparser.py generator.py header.py headerregistry.py iterators.py message.py application.py audio.py base.py image.py message.py multipart.py nonmultipart.py text.py __init__.py parser.py policy.py quoprimime.py utils.py _encoded_words.py _header_value_parser.py _parseaddr.py _policybase.py __init__.py entities.py parser.py __init__.py client.py cookiejar.py cookies.py server.py __init__.py misc.py socket.py socketserver.py badcert.pem badkey.pem dh512.pem https_svn_python_org_root.pem keycert.passwd.pem keycert.pem keycert2.pem nokia.pem nullbytecert.pem nullcert.pem pystone.py sha256.pem ssl_cert.pem ssl_key.passwd.pem ssl_key.pem ssl_servers.py support.py __init__.py total_ordering.py error.py parse.py request.py response.py robotparser.py __init__.py client.py server.py __init__.py _markupbase.py __init__.py disabled.py iterators.py misc.py newnext.py newround.py newsuper.py new_min_max.py __init__.py builtins.py collections.py configparser.py copyreg.py dumb.py gnu.py ndbm.py __init__.py entities.py parser.py __init__.py client.py cookiejar.py cookies.py server.py __init__.py itertools.py pickle.py queue.py reprlib.py socketserver.py subprocess.py sys.py support.py __init__.py colorchooser.py commondialog.py constants.py dialog.py dnd.py filedialog.py font.py messagebox.py scrolledtext.py simpledialog.py tix.py ttk.py __init__.py error.py parse.py request.py response.py robotparser.py __init__.py winreg.py client.py server.py __init__.py _dummy_thread.py _markupbase.py _thread.py __init__.py __init__.py base.py __init__.py newbytes.py newdict.py newint.py newlist.py newmemoryview.py newobject.py newopen.py newrange.py newstr.py __init__.py surrogateescape.py __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt entities.py parser.py __init__.py client.py cookiejar.py cookies.py server.py __init__.py fixer_util.py fix_absolute_import.py fix_add__future__imports_except_unicode_literals.py fix_basestring.py fix_bytes.py fix_cmp.py fix_division.py fix_division_safe.py fix_execfile.py fix_future_builtins.py fix_future_standard_library.py fix_future_standard_library_urllib.py fix_input.py fix_metaclass.py fix_next_call.py fix_object.py fix_oldstr_wrap.py fix_order___future__imports.py fix_print.py fix_print_with_import.py fix_raise.py fix_remove_old__future__imports.py fix_unicode_keep_u.py fix_unicode_literals_import.py fix_UserDict.py fix_xrange_with_import.py __init__.py main.py __init__.py feature_base.py fix_add_all_future_builtins.py fix_add_all__future__imports.py fix_add_future_standard_library_import.py fix_annotations.py fix_division.py fix_features.py fix_fullargspec.py fix_future_builtins.py fix_getcwd.py fix_imports.py fix_imports2.py fix_kwargs.py fix_memoryview.py fix_metaclass.py fix_newstyle.py fix_next.py fix_printfunction.py fix_raise.py fix_raise_.py fix_throw.py fix_unpacking.py __init__.py main.py __init__.py misc.py noniterators.py __init__.py __init__.py basestring.py olddict.py oldstr.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py colorchooser.py commondialog.py constants.py dialog.py dnd.py filedialog.py font.py messagebox.py scrolledtext.py simpledialog.py tix.py ttk.py __init__.py __init__.py client.py server.py __init__.py __init__.py __init__.py __init__.py __init__.py TESTING.txt test_backports.py test_buffer.py test_builtins.py test_builtins_explicit_import.py test_bytes.py test_chainmap.py test_common_iterators.py test_decorators.py test_dict.py test_email_multipart.py test_explicit_imports.py test_futurize.py test_html.py test_htmlparser.py test_httplib.py test_http_cookiejar.py test_imports_httplib.py test_imports_urllib.py test_import_star.py test_int.py test_int_old_division.py test_isinstance.py test_libfuturize_fixers.py test_list.py test_magicsuper.py test_object.py test_pasteurize.py test_py2_str_literals_to_bytes.py test_range.py test_requests.py test_standard_library.py test_str.py test_super.py test_surrogateescape.py test_urllib.py test_urllib2.py test_urllibnet.py test_urllib_response.py test_urllib_toplevel.py test_urlparse.py test_utils.py __init__.py test_basestring.py test_builtins.py test_noniterators.py test_olddict.py test_oldstr.py test_translation.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom __future__ import absolute_import, print_function\n\nimport os\nimport os.path\nimport sys\n\n\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\n\nif sys.argv[-1] == 'publish':\nos.system('python setup.py sdist upload')\nsys.exit()\n\n\nNAME = \"future\"\nPACKAGES = [\"future\",\n\"future.builtins\",\n\"future.types\",\n\"future.standard_library\",\n\"future.backports\",\n\"future.backports.email\",\n\"future.backports.email.mime\",\n\"future.backports.html\",\n\"future.backports.http\",\n\"future.backports.test\",\n\"future.backports.urllib\",\n\"future.backports.xmlrpc\",\n\"future.moves\",\n\"future.moves.dbm\",\n\"future.moves.html\",\n\"future.moves.http\",\n\"future.moves.test\",\n\"future.moves.tkinter\",\n\"future.moves.urllib\",\n\"future.moves.xmlrpc\",\n\"future.tests\", # for future.tests.base\n# \"future.tests.test_email\",\n\"future.utils\",\n\"past\",\n\"past.builtins\",\n\"past.types\",\n\"past.utils\",\n\"past.translation\",\n\"libfuturize\",\n\"libfuturize.fixes\",\n\"libpasteurize\",\n\"libpasteurize.fixes\",\n]\n\n# PEP 3108 stdlib moves:\nif sys.version_info[:2] < (3, 0):\nPACKAGES += [\n\"builtins\",\n# \"configparser\", # removed in v0.16.0\n\"copyreg\",\n\"html\",\n\"http\",\n\"queue\",\n\"reprlib\",\n\"socketserver\",\n\"tkinter\",\n\"winreg\",\n\"xmlrpc\",\n\"_dummy_thread\",\n\"_markupbase\",\n\"_thread\",\n]\n\nPACKAGE_DATA = {'': [\n'README.rst',\n'LICENSE.txt',\n'futurize.py',\n'pasteurize.py',\n'check_rst.sh',\n'TESTING.txt',\n],\n'tests': ['*.py'],\n}\n\nimport src.future\nVERSION = src.future.__version__\nDESCRIPTION = \"Clean single-source support for Python 3 and 2\"\nLONG_DESC = src.future.__doc__\nAUTHOR = \"Ed Schofield\"\nAUTHOR_EMAIL = \"ed@pythoncharmers.com\"\nURL=\"https:\/\/python-future.org\"\nLICENSE = \"MIT\"\nKEYWORDS = \"future past python3 migration futurize backport six 2to3 modernize pasteurize 3to2\"\nCLASSIFIERS = [\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.6\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"License :: OSI Approved\",\n\"License :: OSI Approved :: MIT License\",\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n]\n\nsetup_kwds = {}\n\n\n# * Important *\n# We forcibly remove the build folder to avoid breaking the\n# user's Py3 installation if they run \"python2 setup.py\n# build\" and then \"python3 setup.py install\".\n\ntry:\n# If the user happens to run:\n# python2 setup.py build\n# python3 setup.py install\n# then folders like \"copyreg\" will be in build\/lib.\n# If so, we CANNOT let the user install this, because\n# this may break his\/her Python 3 install, depending on the folder order in\n# sys.path. (Running \"import html\" etc. may pick up our Py2\n# substitute packages, instead of the intended system stdlib modules.)\nSYSTEM_MODULES = set([\n'_dummy_thread',\n'_markupbase',\n'_thread',\n'builtins',\n# Catch the case that configparser is in the build folder\n# from a previous version of `future`:\n'configparser',\n'copyreg',\n'html',\n'http',\n'queue',\n'reprlib',\n'socketserver',\n'tkinter',\n'winreg',\n'xmlrpc'\n])\n\nif sys.version_info[0] >= 3:\n# Do any of the above folders exist in build\/lib?\nfiles = os.listdir(os.path.join('build', 'lib'))\nif len(set(files) & set(SYSTEM_MODULES)) > 0:\nprint('ERROR: Your build folder is in an inconsistent state for '\n'a Python 3.x install. Please remove it manually and run '\n'setup.py again.', file=sys.stderr)\nsys.exit(1)\nexcept OSError:\npass\n\nsetup(name=NAME,\nversion=VERSION,\nauthor=AUTHOR,\nauthor_email=AUTHOR_EMAIL,\nurl=URL,\ndescription=DESCRIPTION,\nlong_description=LONG_DESC,\nlicense=LICENSE,\nkeywords=KEYWORDS,\nentry_points={\n'console_scripts': [\n'futurize = libfuturize.main:main',\n'pasteurize = libpasteurize.main:main'\n]\n},\npackage_dir={'': 'src'},\npackages=PACKAGES,\npackage_data=PACKAGE_DATA,\ninclude_package_data=True,\npython_requires=\">=2.6, !=3.0.*, !=3.1.*, !=3.2.*\",\nclassifiers=CLASSIFIERS,\n**setup_kwds\n)\n"
    },
    {
        "package_name": "futures-3.3.0",
        "file_list": "process.py thread.py _base.py __init__.py __init__.py crawl.py conf.py index.rst make.bat Makefile dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO primes.py README.rst setup.cfg setup.py test_futures.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\n# coding: utf-8\nfrom __future__ import print_function\n\nimport os.path\nimport sys\n\nif sys.version_info[0] > 2:\nprint('This backport is meant only for Python 2.\\n'\n'It does not work on Python 3, and Python 3 users do not need it '\n'as the concurrent.futures package is available in the standard library.\\n'\n'For projects that work on both Python 2 and 3, the dependency needs to be conditional '\n'on the Python version, like so:\\n'\n\"extras_require={':python_version == \\\"2.7\\\"': ['futures']}\",\nfile=sys.stderr)\nsys.exit(1)\n\nextras = {}\ntry:\nfrom setuptools import setup\nextras['zip_safe'] = False\nexcept ImportError:\nfrom distutils.core import setup\n\nhere = os.path.dirname(__file__)\nwith open(os.path.join(here, 'README.rst')) as f:\nreadme = f.read()\n\nsetup(name='futures',\nversion='3.3.0',\ndescription='Backport of the concurrent.futures package from Python 3',\nlong_description=readme,\nauthor='Brian Quinlan',\nauthor_email='brian@sweetapp.com',\nmaintainer=u'Alex Gr\u00f6nholm',\nmaintainer_email='alex.gronholm@nextday.fi',\nurl='https:\/\/github.com\/agronholm\/pythonfutures',\npackages=['concurrent', 'concurrent.futures'],\npython_requires='>=2.6, <3',\nlicense='PSF',\nclassifiers=['License :: OSI Approved :: Python Software Foundation License',\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 2 :: Only'],\n**extras\n)\n"
    },
    {
        "package_name": "fuzzysearch-0.7.3",
        "file_list": "AUTHORS.rst CONTRIBUTING.rst HISTORY.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py common.py compat.py generic_search.py levenshtein.py levenshtein_ngram.py memmem.c memmem.h no_deletions.py search_exact.py substitutions_only.py wordlen_memmem.c wordlen_memmem.h _common.c _c_ext_base.h _generic_search.c _levenshtein_ngrams.c _pymemmem.c _substitutions_only.c _substitutions_only_lp_template.h _substitutions_only_ngrams_template.h __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import with_statement\n\nimport os\nimport sys\n\nfrom setuptools import setup, Extension\nfrom distutils.command.build_ext import build_ext\nfrom distutils.errors import CCompilerError, DistutilsExecError, \\\nDistutilsPlatformError\n\n# --noexts: don't try building the C extensions\nif '--noexts' in sys.argv[1:]:\ndel sys.argv[sys.argv[1:].index('--noexts') + 1]\nnoexts = True\nelse:\nnoexts = False\n\n\ndef readfile(file_path):\ndir_path = os.path.dirname(os.path.abspath(__file__))\nwith open(os.path.join(dir_path, file_path), 'r') as f:\nreturn f.read()\n\nreadme = readfile('README.rst')\nhistory = readfile('HISTORY.rst').replace('.. :changelog:', '')\n\n\n# Fail safe compilation based on markupsafe's, which in turn was shamelessly\n# stolen from the simplejson setup.py file. Original author: Bob Ippolito\n\nis_jython = 'java' in sys.platform\nis_pypy = hasattr(sys, 'pypy_version_info')\n\next_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError)\nif sys.platform == 'win32' and sys.version_info > (2, 6):\n# 2.6's distutils.msvc9compiler can raise an IOError when failing to\n# find the compiler\n# It can also raise ValueError http:\/\/bugs.python.org\/issue7511\next_errors += (IOError, ValueError)\n\n\nclass BuildFailed(Exception):\npass\n\n\nclass ve_build_ext(build_ext):\n\"\"\"This class allows C extension building to fail.\"\"\"\n\ndef run(self):\ntry:\nbuild_ext.run(self)\nexcept DistutilsPlatformError:\nraise BuildFailed()\n\ndef build_extension(self, ext):\ntry:\nbuild_ext.build_extension(self, ext)\nexcept ext_errors:\nraise BuildFailed()\nexcept ValueError:\n# this can happen on Windows 64 bit, see Python issue 7511\nif \"'path'\" in str(sys.exc_info()[1]): # works with Python 2 and 3\nraise BuildFailed()\nraise\n\n\n_substitutions_only_module = Extension(\n'fuzzysearch._substitutions_only',\nsources=['src\/fuzzysearch\/_substitutions_only.c',\n'src\/fuzzysearch\/memmem.c'],\ninclude_dirs=['.'],\n)\n_common_module = Extension(\n'fuzzysearch._common',\nsources=['src\/fuzzysearch\/_common.c',\n'src\/fuzzysearch\/memmem.c'],\ninclude_dirs=['.'],\n)\n_generic_search_module = Extension(\n'fuzzysearch._generic_search',\nsources=['src\/fuzzysearch\/_generic_search.c',\n'src\/fuzzysearch\/memmem.c'],\ninclude_dirs=['.'],\n)\n_levenshtein_ngrams_module = Extension(\n'fuzzysearch._levenshtein_ngrams',\nsources=['src\/fuzzysearch\/_levenshtein_ngrams.c'],\ninclude_dirs=['.'],\n)\n# pymemmem_module = Extension(\n# 'fuzzysearch._pymemmem',\n# sources=['src\/fuzzysearch\/_pymemmem.c',\n# 'src\/fuzzysearch\/memmem.c',\n# 'src\/fuzzysearch\/wordlen_memmem.c'],\n# include_dirs=['.'],\n# )\n\n\ndef run_setup(with_binary=True):\next_modules = [\n_substitutions_only_module,\n_common_module,\n_generic_search_module,\n_levenshtein_ngrams_module,\n# pymemmem_module,\n]\nif not with_binary:\next_modules = []\n\nsetup(\nname='fuzzysearch',\nversion='0.7.3',\ndescription='fuzzysearch is useful for finding approximate subsequence matches',\nlong_description=readme + '\\n\\n' + history,\nauthor='Tal Einat',\nauthor_email='taleinat@gmail.com',\nurl='https:\/\/github.com\/taleinat\/fuzzysearch',\npackages=['fuzzysearch'],\npackage_dir={'': 'src'},\next_modules=ext_modules,\ninstall_requires=['attrs>=19.3'],\nlicense='MIT',\nkeywords='fuzzysearch',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\ncmdclass={'build_ext': ve_build_ext},\n)\n\n\ndef try_building_extension():\ntry:\nrun_setup(True)\nexcept BuildFailed:\nline = '=' * 74\nbuild_ext_warning = 'WARNING: The C extensions could not be ' \\\n'compiled; speedups are not enabled.'\n\nprint(line)\nprint(build_ext_warning)\nprint('Failure information, if any, is above.')\nprint('Retrying the build without the C extension now.')\nprint('')\n\nrun_setup(False)\n\nprint(line)\nprint(build_ext_warning)\nprint('Plain-Python installation succeeded.')\nprint(line)\n\nif not (noexts or is_pypy or is_jython):\ntry_building_extension()\nelse:\nrun_setup(False)\n"
    },
    {
        "package_name": "fvcore-0.1.5.post20220512",
        "file_list": "benchmark.py checkpoint.py config.py download.py file_io.py history_buffer.py param_scheduler.py registry.py timer.py __init__.py activation_count.py distributed.py flop_count.py focal_loss.py giou_loss.py jit_analysis.py jit_handles.py parameter_count.py precise_bn.py print_model_statistics.py smooth_l1_loss.py squeeze_excitation.py weight_init.py __init__.py transform.py transform_util.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python3\n# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n\nimport os\nfrom os import path\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version():\ninit_py_path = path.join(\npath.abspath(path.dirname(__file__)), \"fvcore\", \"__init__.py\"\n)\ninit_py = open(init_py_path, \"r\").readlines()\nversion_line = [l.strip() for l in init_py if l.startswith(\"__version__\")][0]\nversion = version_line.split(\"=\")[-1].strip().strip(\"'\\\"\")\n\n# Used by CI to build nightly packages. Users should never use it.\n# To build a nightly wheel, run:\n# BUILD_NIGHTLY=1 python setup.py sdist\nif os.getenv(\"BUILD_NIGHTLY\", \"0\") == \"1\":\nfrom datetime import datetime\n\ndate_str = datetime.today().strftime(\"%Y%m%d\")\n# pip can perform proper comparison for \".post\" suffix,\n# i.e., \"1.1.post1234\" >= \"1.1\"\nversion = version + \".post\" + date_str\n\nnew_init_py = [l for l in init_py if not l.startswith(\"__version__\")]\nnew_init_py.append('__version__ = \"{}\"\\n'.format(version))\nwith open(init_py_path, \"w\") as f:\nf.write(\"\".join(new_init_py))\nreturn version\n\n\nsetup(\nname=\"fvcore\",\nversion=get_version(),\nauthor=\"FAIR\",\nlicense=\"Apache 2.0\",\nurl=\"https:\/\/github.com\/facebookresearch\/fvcore\",\ndescription=\"Collection of common code shared among different research \"\n\"projects in FAIR computer vision team\",\npython_requires=\">=3.6\",\ninstall_requires=[\n\"numpy\",\n\"yacs>=0.1.6\",\n\"pyyaml>=5.1\",\n\"tqdm\",\n\"termcolor>=1.1\",\n\"Pillow\",\n\"tabulate\",\n\"iopath>=0.1.7\",\n\"dataclasses; python_version<'3.7'\",\n],\nextras_require={\"all\": [\"shapely\"]},\npackages=find_packages(exclude=(\"tests\",)),\n)\n"
    },
    {
        "package_name": "gcloud-0.18.3",
        "file_list": "client.py connection.py dataset.py job.py query.py table.py test_client.py test_connection.py test_dataset.py test_job.py test_query.py test_table.py test__helpers.py _helpers.py __init__.py client.py cluster.py column_family.py batch.py connection.py pool.py table.py test_batch.py test_connection.py test_pool.py test_table.py __init__.py instance.py read-rows-acceptance-test.json row.py row_data.py row_filters.py table.py test_client.py test_cluster.py test_column_family.py test_instance.py test_row.py test_row_data.py test_row_filters.py test_table.py bigtable_instance_admin_pb2.py bigtable_pb2.py bigtable_table_admin_pb2.py common_pb2.py data_pb2.py instance_pb2.py operations_grpc_pb2.py table_pb2.py _bigtable.proto _bigtable_instance_admin.proto _bigtable_table_admin.proto _common.proto _data.proto _instance.proto _operations.proto _table.proto __init__.py _testing.py __init__.py client.py connection.py credentials.py batch.py client.py connection.py entity.py helpers.py key.py query.py test_batch.py test_client.py test_connection.py test_entity.py test_helpers.py test_key.py test_query.py test_transaction.py transaction.py datastore_grpc_pb2.py datastore_pb2.py entity_pb2.py query_pb2.py _datastore.proto _entity.proto _query.proto __init__.py __init__.py changes.py client.py connection.py resource_record_set.py test_changes.py test_client.py test_connection.py test_resource_record_set.py test_zone.py zone.py __init__.py environment_vars.py client.py test_client.py __init__.py exceptions.py iterator.py client.py connection.py entries.py logger.py metric.py sink.py test_client.py test_connection.py test_entries.py test_logger.py test_metric.py test_sink.py test__gax.py _gax.py __init__.py client.py connection.py label.py metric.py query.py resource.py test_client.py test_connection.py test_label.py test_metric.py test_query.py test_resource.py test_timeseries.py test__dataframe.py timeseries.py _dataframe.py __init__.py client.py connection.py iam.py message.py subscription.py test_client.py test_connection.py test_iam.py test_message.py test_subscription.py test_topic.py test__gax.py test__helpers.py topic.py _gax.py _helpers.py __init__.py client.py connection.py project.py test_client.py test_connection.py test_project.py __init__.py acl.py batch.py blob.py bucket.py client.py connection.py test_acl.py test_batch.py test_blob.py test_bucket.py test_client.py test_connection.py test__helpers.py _helpers.py __init__.py buffered_stream.py exceptions.py http_wrapper.py stream_slice.py test_buffered_stream.py test_exceptions.py test_http_wrapper.py test_stream_slice.py test_transfer.py test_util.py transfer.py util.py __init__.py test_client.py test_connection.py test_credentials.py test_exceptions.py test_iterator.py test__helpers.py client.py connection.py test_client.py test_connection.py __init__.py _helpers.py _testing.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "import os\nimport sys\n\nfrom setuptools import setup\nfrom setuptools import find_packages\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n\nwith open(os.path.join(here, 'README.rst')) as f:\nREADME = f.read()\n\n\nREQUIREMENTS = [\n'httplib2 >= 0.9.1',\n'googleapis-common-protos',\n'oauth2client >= 2.0.1',\n'protobuf >= 3.0.0b2, != 3.0.0.b2.post1',\n'six',\n]\n\nGRPC_EXTRAS = [\n'grpcio >= 1.0rc1',\n'google-gax >= 0.12.3, < 0.13dev',\n'gax-google-pubsub-v1 >= 0.8.0, < 0.9dev',\n'grpc-google-pubsub-v1 >= 0.8.0, < 0.9dev',\n'gax-google-logging-v2 >= 0.8.0, < 0.9dev',\n'grpc-google-logging-v2 >= 0.8.0, < 0.9dev',\n]\n\nif sys.version_info[:2] == (2, 7) and 'READTHEDOCS' not in os.environ:\nREQUIREMENTS.extend(GRPC_EXTRAS)\n\nsetup(\nname='gcloud',\nversion='0.18.3',\ndescription='API Client library for Google Cloud',\nauthor='Google Cloud Platform',\nauthor_email='jjg+gcloud-python@google.com',\nlong_description=README,\nscripts=[],\nurl='https:\/\/github.com\/GoogleCloudPlatform\/gcloud-python',\npackages=find_packages(),\nlicense='Apache 2.0',\nplatforms='Posix; MacOS X; Windows',\ninclude_package_data=True,\nzip_safe=False,\ninstall_requires=REQUIREMENTS,\nextras_require={'grpc': GRPC_EXTRAS},\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Topic :: Internet',\n]\n)\n"
    },
    {
        "package_name": "gdbgui-0.15.1.0",
        "file_list": "cli.py htmllistformatter.py py.typed app.py constants.py http_routes.py http_util.py ptylib.py server.py sessionmanager.py __init__.py SSLify.py gdbgui.css splitjs-gdbgui.css tailwind.css favicon.ico github.jpg paypal.svg ploticon.png ploticon_orig.png twitter.png dashboard.js dashboard.js.map main.js main.js.map animate.css bootstrap.min.css gdbgui_awesomeplete.css emacs.css light.css monokai.css vim.css glyphicons-halflings-regular.woff2 horizontal.png awesomeplete.min.js bootstrap.min.js jquery.flot-0.8.3.min.js jquery.min.js lodash.min.js moment.min.js socket.io-2.0.3.min.js socket.io.js.map splitjs.min-1.2.0.js vis-4.20.1.min.js dashboard.html gdbgui.html VERSION.txt __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md requirements.txt setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport os\nimport distutils.text_file\n\nUSING_WINDOWS = os.name == \"nt\"\nif USING_WINDOWS:\nraise RuntimeError(\n\"Windows is not supported at this time. \"\n+ \"Versions lower than 0.14.x. are Windows compatible.\"\n)\nimport io\nfrom setuptools import find_packages, setup # type: ignore\n\nCURDIR = os.path.abspath(os.path.dirname(__file__))\n\nEXCLUDE_FROM_PACKAGES = [\"tests\"]\n\nREADME = io.open(os.path.join(CURDIR, \"README.md\"), \"r\", encoding=\"utf-8\").read()\nVERSION = (\nio.open(os.path.join(CURDIR, \"gdbgui\/VERSION.txt\"), \"r\", encoding=\"utf-8\")\n.read()\n.strip()\n)\n\nsetup(\nname=\"gdbgui\",\nversion=VERSION,\nauthor=\"Chad Smith\",\nauthor_email=\"chadsmith.software@gmail.com\",\ndescription=\"Browser-based frontend to gdb. Debug C, C++, Go, or Rust.\",\nlong_description=README,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/cs01\/gdbgui\",\nlicense=\"License :: GNU GPLv3\",\npackages=find_packages(exclude=EXCLUDE_FROM_PACKAGES),\ninclude_package_data=True,\nkeywords=[\n\"gdb\",\n\"debug\",\n\"c\",\n\"c++\",\n\"go\",\n\"rust\",\n\"python\",\n\"machine-interface\",\n\"parse\",\n\"frontend\",\n\"flask\",\n\"browser\",\n\"gui\",\n],\nscripts=[],\nentry_points={\n\"console_scripts\": [\n# allow user to type gdbgui from terminal to automatically launch\n# the server and a tab in a browser\n\"gdbgui = gdbgui.cli:main\"\n]\n},\nzip_safe=False,\ninstall_requires=distutils.text_file.TextFile(\nfilename=\".\/requirements.txt\"\n).readlines(),\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"Operating System :: MacOS\",\n\"Operating System :: Unix\",\n\"Operating System :: POSIX\",\n\"License :: OSI Approved :: GNU General Public License v3 (GPLv3)\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.9\",\n],\npython_requires=\">=3.6\",\nproject_urls={\n\"Documentation\": \"https:\/\/cs01.github.io\/gdbgui\/\",\n\"Source Code\": \"https:\/\/github.com\/cs01\/gdbgui\",\n\"Bug Tracker\": \"https:\/\/github.com\/cs01\/gdbgui\/issues\",\n},\n)\n"
    },
    {
        "package_name": "gdown-4.5.1",
        "file_list": "cached_download.py cli.py download.py download_folder.py extractall.py parse_url.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py",
        "setup.py": "from __future__ import print_function\n\nimport distutils.spawn\nimport shlex\nimport subprocess\nimport sys\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\nversion = \"4.5.1\"\n\n\nif sys.argv[1] == \"release\":\nif not distutils.spawn.find_executable(\"twine\"):\nprint(\n\"Please install twine:\\n\\n\\tpip install twine\\n\", file=sys.stderr\n)\nsys.exit(1)\n\ncommands = [\n\"git pull origin main\",\n\"git tag v{:s}\".format(version),\n\"git push origin main --tags\",\n\"python setup.py sdist\",\n\"twine upload dist\/gdown-{:s}.tar.gz\".format(version),\n]\nfor cmd in commands:\nsubprocess.check_call(shlex.split(cmd))\nsys.exit(0)\n\n\ndef get_long_description():\nwith open(\"README.md\") as f:\nlong_description = f.read()\n\ntry:\nimport github2pypi\n\nreturn github2pypi.replace_url(\nslug=\"wkentaro\/gdown\", content=long_description\n)\nexcept Exception:\nreturn long_description\n\n\nsetup(\nname=\"gdown\",\nversion=version,\npackages=find_packages(exclude=[\"github2pypi\"]),\ninstall_requires=[\n\"filelock\",\n\"requests[socks]\",\n\"six\",\n\"tqdm\",\n\"beautifulsoup4\",\n],\ndescription=\"Google Drive direct download of big files.\",\nlong_description=get_long_description(),\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Kentaro Wada\",\nauthor_email=\"www.kentaro.wada@gmail.com\",\nurl=\"http:\/\/github.com\/wkentaro\/gdown\",\nlicense=\"MIT\",\nkeywords=\"Data Download\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Natural Language :: English\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n],\nentry_points={\"console_scripts\": [\"gdown=gdown.cli:main\"]},\n)\n"
    },
    {
        "package_name": "geolib-1.0.7",
        "file_list": "geohash.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import setuptools\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nrequires = [\n'future'\n]\ntest_requirements = [\n'future',\n'pytest'\n]\n\nsetuptools.setup(\nname=\"geolib\",\nversion=\"1.0.7\",\nauthor=\"Anu Joy\",\nauthor_email=\"oss@cartographix.org\",\ndescription=\"A library for geohash encoding, decoding and associated functions\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/joyanujoy\/geolib\",\npackages=setuptools.find_packages(),\npython_requires='>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*',\ninstall_requires=requires,\ntests_require=test_requirements,\nclassifiers=[\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Development Status :: 5 - Production\/Stable\",\n\"Topic :: Scientific\/Engineering :: GIS\",\n\"Topic :: Software Development :: Libraries :: Python Modules\"\n],\n)\n"
    },
    {
        "package_name": "geopandas-0.11.1",
        "file_list": "array.py base.py conftest.py naturalearth_cities.cpg naturalearth_cities.dbf naturalearth_cities.prj naturalearth_cities.README.html naturalearth_cities.shp naturalearth_cities.shx naturalearth_cities.VERSION.txt naturalearth_creation.py naturalearth_lowres.cpg naturalearth_lowres.dbf naturalearth_lowres.prj naturalearth_lowres.shp naturalearth_lowres.shx nybb_16a.zip __init__.py explore.py geodataframe.py geoseries.py arrow.py file.py sql.py __init__.py plotting.py sindex.py testing.py null_geom.geojson test_api.py test_array.py test_compat.py test_config.py test_crs.py test_datasets.py test_decorator.py test_dissolve.py test_explore.py test_extension_array.py test_geocode.py test_geodataframe.py test_geom_methods.py test_geoseries.py test_merge.py test_op_output_types.py test_overlay.py test_pandas_methods.py test_plotting.py test_show_versions.py test_sindex.py test_testing.py test_types.py util.py __init__.py clip.py geocoding.py overlay.py sjoin.py test_clip.py test_sjoin.py test_tools.py __init__.py util.py _show_versions.py __init__.py _compat.py _config.py _decorator.py _vectorized.py _version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py versioneer.py",
        "setup.py": "#!\/usr\/bin\/env\/python\n\"\"\"Installation script\n\n\"\"\"\n\nimport os\nimport sys\n\nfrom setuptools import setup\n\n# ensure the current directory is on sys.path so versioneer can be imported\n# when pip uses PEP 517\/518 build rules.\n# https:\/\/github.com\/python-versioneer\/python-versioneer\/issues\/193\nsys.path.append(os.path.dirname(__file__))\n\nimport versioneer # noqa: E402\n\nLONG_DESCRIPTION = \"\"\"GeoPandas is a project to add support for geographic data to\n`pandas`_ objects.\n\nThe goal of GeoPandas is to make working with geospatial data in\npython easier. It combines the capabilities of `pandas`_ and `shapely`_,\nproviding geospatial operations in pandas and a high-level interface\nto multiple geometries to shapely. GeoPandas enables you to easily do\noperations in python that would otherwise require a spatial database\nsuch as PostGIS.\n\n.. _pandas: http:\/\/pandas.pydata.org\n.. _shapely: http:\/\/shapely.readthedocs.io\/en\/latest\/\n\"\"\"\n\nif os.environ.get(\"READTHEDOCS\", False) == \"True\":\nINSTALL_REQUIRES = []\nelse:\nINSTALL_REQUIRES = [\n\"pandas >= 1.0.0\",\n\"shapely >= 1.7, < 2\",\n\"fiona >= 1.8\",\n\"pyproj >= 2.6.1.post1\",\n\"packaging\",\n]\n\n# get all data dirs in the datasets module\ndata_files = []\n\nfor item in os.listdir(\"geopandas\/datasets\"):\nif not item.startswith(\"__\"):\nif os.path.isdir(os.path.join(\"geopandas\/datasets\/\", item)):\ndata_files.append(os.path.join(\"datasets\", item, \"*\"))\nelif item.endswith(\".zip\"):\ndata_files.append(os.path.join(\"datasets\", item))\n\ndata_files.append(\"tests\/data\/*\")\n\n\nsetup(\nname=\"geopandas\",\nversion=versioneer.get_version(),\ndescription=\"Geographic pandas extensions\",\nlicense=\"BSD\",\nauthor=\"GeoPandas contributors\",\nauthor_email=\"kjordahl@alum.mit.edu\",\nurl=\"http:\/\/geopandas.org\",\nproject_urls={\n\"Source\": \"https:\/\/github.com\/geopandas\/geopandas\",\n},\nlong_description=LONG_DESCRIPTION,\nlong_description_content_type=\"text\/x-rst\",\npackages=[\n\"geopandas\",\n\"geopandas.io\",\n\"geopandas.tools\",\n\"geopandas.datasets\",\n\"geopandas.tests\",\n\"geopandas.tools.tests\",\n],\npackage_data={\"geopandas\": data_files},\npython_requires=\">=3.8\",\ninstall_requires=INSTALL_REQUIRES,\ncmdclass=versioneer.get_cmdclass(),\n)\n"
    },
    {
        "package_name": "geopy-2.2.0",
        "file_list": "AUTHORS adapters.py compat.py distance.py exc.py rate_limiter.py __init__.py format.py algolia.py arcgis.py azure.py baidu.py banfrance.py base.py bing.py databc.py geocodeearth.py geocodio.py geolake.py geonames.py google.py googlev3.py here.py ignfrance.py mapbox.py mapquest.py maptiler.py nominatim.py opencage.py openmapquest.py osm.py pelias.py photon.py pickpoint.py smartystreets.py tomtom.py what3words.py yandex.py __init__.py location.py point.py timezone.py units.py util.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pytest.ini README.rst setup.cfg setup.py each_adapter.py retry_after.py __init__.py conftest.py rate_limiter.py __init__.py algolia.py arcgis.py azure.py baidu.py banfrance.py base.py bing.py databc.py geocodeearth.py geocodio.py geolake.py geonames.py googlev3.py here.py ignfrance.py mapbox.py mapquest.py maptiler.py nominatim.py opencage.py openmapquest.py pelias.py photon.py pickpoint.py smartystreets.py tomtom.py util.py what3words.py yandex.py __init__.py proxy_server.py selfsigned_ca.pem test_distance.py test_exc.py test_format.py test_init.py test_location.py test_point.py test_timezone.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\"\"\"\ngeopy\n\"\"\"\n\nimport sys\n\nfrom setuptools import find_packages, setup\n\nif sys.version_info < (3, 5):\nraise RuntimeError(\n\"geopy 2 supports Python 3.5 and above. \"\n\"Use geopy 1.x if you need Python 2.7 or 3.4 support.\"\n)\n\n# This import must be below the above `sys.version_info` check,\n# because the code being imported here is not compatible with the older\n# versions of Python.\nfrom geopy import __version__ as version # noqa # isort:skip\n\nINSTALL_REQUIRES = [\n'geographiclib<2,>=1.49',\n]\n\nEXTRAS_DEV_TESTFILES_COMMON = [\n\"async_generator\",\n]\n\nEXTRAS_DEV_LINT = [\n\"flake8>=3.8.0,<3.9.0\",\n\"isort>=5.6.0,<5.7.0\",\n]\n\nEXTRAS_DEV_TEST = [\n\"coverage\",\n\"pytest-aiohttp\", # for `async def` tests\n\"pytest>=3.10\",\n\"sphinx\", # `docutils` from sphinx is used in tests\n]\n\nEXTRAS_DEV_DOCS = [\n\"readme_renderer\",\n\"sphinx\",\n\"sphinx-issues\",\n\"sphinx_rtd_theme>=0.5.0\",\n]\n\nsetup(\nname='geopy',\nversion=version,\ndescription='Python Geocoding Toolbox',\nlong_description=open('README.rst').read(),\nmaintainer='Kostya Esmukov',\nmaintainer_email='kostya@esmukov.ru',\nurl='https:\/\/github.com\/geopy\/geopy',\ndownload_url=(\n'https:\/\/github.com\/geopy\/geopy\/archive\/%s.tar.gz' % version\n),\npackages=find_packages(exclude=[\"*test*\"]),\ninstall_requires=INSTALL_REQUIRES,\nextras_require={\n\"dev\": sorted(set(\nEXTRAS_DEV_TESTFILES_COMMON +\nEXTRAS_DEV_LINT +\nEXTRAS_DEV_TEST +\nEXTRAS_DEV_DOCS\n)),\n\"dev-lint\": (EXTRAS_DEV_TESTFILES_COMMON +\nEXTRAS_DEV_LINT),\n\"dev-test\": (EXTRAS_DEV_TESTFILES_COMMON +\nEXTRAS_DEV_TEST),\n\"dev-docs\": EXTRAS_DEV_DOCS,\n\"aiohttp\": [\"aiohttp\"],\n\"requests\": [\n\"urllib3>=1.24.2\",\n# ^^^ earlier versions would work, but a custom ssl\n# context would silently have system certificates be loaded as\n# trusted: https:\/\/github.com\/urllib3\/urllib3\/pull\/1566\n\n\"requests>=2.16.2\",\n# ^^^ earlier versions would work, but they use an older\n# vendored version of urllib3 (see note above)\n],\n\"timezone\": [\"pytz\"],\n},\nlicense='MIT',\nkeywords='geocode geocoding gis geographical maps earth distance',\npython_requires=\">=3.5\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Science\/Research\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Topic :: Scientific\/Engineering :: GIS\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n]\n)\n"
    },
    {
        "package_name": "ghapi-1.0.0",
        "file_list": "CONTRIBUTING.md actions.py all.py auth.py build_lib.py cli.py core.py event.py metadata.py page.py templates.py _nbdev.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md settings.ini setup.cfg setup.py",
        "setup.py": "from pkg_resources import parse_version\nfrom configparser import ConfigParser\nimport setuptools,re,sys\nassert parse_version(setuptools.__version__)>=parse_version('36.2')\n\n# note: all settings are in settings.ini; edit there, not here\nconfig = ConfigParser(delimiters=['='])\nconfig.read('settings.ini')\ncfg = config['DEFAULT']\n\ncfg_keys = 'version description keywords author author_email'.split()\nexpected = cfg_keys + \"lib_name user branch license status min_python audience language\".split()\nfor o in expected: assert o in cfg, \"missing expected setting: {}\".format(o)\nsetup_cfg = {o:cfg[o] for o in cfg_keys}\n\nif len(sys.argv)>1 and sys.argv[1]=='version':\nprint(setup_cfg['version'])\nexit()\n\nlicenses = {\n'apache2': ('Apache Software License 2.0','OSI Approved :: Apache Software License'),\n}\nstatuses = [ '1 - Planning', '2 - Pre-Alpha', '3 - Alpha',\n'4 - Beta', '5 - Production\/Stable', '6 - Mature', '7 - Inactive' ]\npy_versions = '2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 3.10'.split()\nmin_python = cfg['min_python']\nlic = licenses[cfg['license']]\n\nrequirements = ['pip', 'packaging']\nif cfg.get('requirements'): requirements += cfg.get('requirements','').split()\nif cfg.get('pip_requirements'): requirements += cfg.get('pip_requirements','').split()\ndev_requirements = (cfg.get('dev_requirements') or '').split()\n\nlong_description = open('README.md').read()\n# ![png](docs\/images\/output_13_0.png)\nfor ext in ['png', 'svg']:\nlong_description = re.sub(r'!\\['+ext+'\\]\\((.*)\\)', '!['+ext+']('+'https:\/\/raw.githubusercontent.com\/{}\/{}'.format(cfg['user'],cfg['lib_name'])+'\/'+cfg['branch']+'\/\\\\1)', long_description)\nlong_description = re.sub(r'src=\\\"(.*)\\.'+ext+'\\\"', 'src=\\\"https:\/\/raw.githubusercontent.com\/{}\/{}'.format(cfg['user'],cfg['lib_name'])+'\/'+cfg['branch']+'\/\\\\1.'+ext+'\\\"', long_description)\n\nproject_urls = {}\nif cfg.get('doc_host'): project_urls[\"Documentation\"] = cfg['doc_host'] + cfg.get('doc_baseurl', '')\n\nsetuptools.setup(\nname = 'ghapi',\nlicense = lic[0],\nclassifiers = [\n'Development Status :: ' + statuses[int(cfg['status'])],\n'Intended Audience :: ' + cfg['audience'].title(),\n'License :: ' + lic[1],\n'Natural Language :: ' + cfg['language'].title(),\n] + ['Programming Language :: Python :: '+o for o in py_versions[py_versions.index(min_python):]],\nurl = cfg['git_url'],\npackages = setuptools.find_packages(),\ninclude_package_data = True,\ninstall_requires = requirements,\nextras_require={ 'dev': dev_requirements },\npython_requires = '>=' + cfg['min_python'],\nlong_description = long_description,\nlong_description_content_type = 'text\/markdown',\nzip_safe = False,\nentry_points = { 'console_scripts': cfg.get('console_scripts','').split() },\nproject_urls = project_urls,\n**setup_cfg)\n\n"
    },
    {
        "package_name": "gitdb2-4.0.2",
        "file_list": "dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py",
        "setup.py": "from setuptools import setup\n\nsetup(\nname=\"gitdb2\",\nversion=\"4.0.2\",\nauthor=\"Sebastian Thiel\",\nauthor_email=\"byronimo@gmail.com\",\ndescription=\"A mirror package for gitdb\",\nlong_description=\"This is a mirror package for `gitdb <https:\/\/pypi.org\/project\/gitdb\/>`_. Consider installing it directly instead.\",\nurl=\"https:\/\/github.com\/gitpython-developers\/gitdb\",\ninstall_requires=[\"gitdb>=4.0.1\"],\n)\n"
    },
    {
        "package_name": "globre-0.1.5",
        "file_list": "CHANGELOG.rst test.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py TODO.txt VERSION.txt",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n#------------------------------------------------------------------------------\n# file: $Id$\n# auth: metagriffin <mg.github@uberdev.org>\n# date: 2013\/10\/28\n# copy: (C) Copyright 2013-EOT metagriffin -- see LICENSE.txt\n#------------------------------------------------------------------------------\n# This software is free software: you can redistribute it and\/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This software is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see http:\/\/www.gnu.org\/licenses\/.\n#------------------------------------------------------------------------------\n\nimport os, sys, setuptools\nfrom setuptools import setup, find_packages\n\nheredir = os.path.abspath(os.path.dirname(__file__))\ndef read(*parts, **kw):\ntry: return open(os.path.join(heredir, *parts)).read()\nexcept: return kw.get('default', '')\n\ntest_dependencies = [\n'nose >= 1.3.0',\n'coverage >= 3.6',\n]\n\ndependencies = []\n\nentrypoints = {\n# 'console_scripts': [\n# 'TODO:PROJNAME = TODO:PROJNAME.cli:main',\n# ],\n}\n\nclassifiers = [\n'Development Status :: 4 - Beta',\n# 'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Programming Language :: Python',\n'Operating System :: OS Independent',\n'Natural Language :: English',\n'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',\n]\n\nsetup(\nname = 'globre',\nversion = read('VERSION.txt', default='0.0.1').strip(),\ndescription = 'A glob matching library, providing an interface similar to the \"re\" module.',\nlong_description = read('README.rst'),\nclassifiers = classifiers,\nauthor = 'metagriffin',\nauthor_email = 'mg.pypi@uberdev.org',\nurl = 'http:\/\/github.com\/metagriffin\/globre',\nkeywords = 'python glob pattern matching regular expression',\npackages = find_packages(),\nplatforms = ['any'],\ninclude_package_data = True,\nzip_safe = True,\ninstall_requires = dependencies,\ntests_require = test_dependencies,\ntest_suite = 'globre',\nentry_points = entrypoints,\nlicense = 'GPLv3+',\n)\n\n#------------------------------------------------------------------------------\n# end of $Id$\n#------------------------------------------------------------------------------\n"
    },
    {
        "package_name": "glom-22.1.0",
        "file_list": ".tox-coveragerc CHANGELOG.md api.rst by_analogy.rst cli.rst conf.py custom_spec_types.rst debugging.rst faq.rst grouping.rst index.rst make.bat Makefile matching.rst modes.rst mutation.rst outreach.md snippets.rst streaming.rst tutorial.rst comet.png comet_multi.png page.html chainmap_backport.py cli.py core.py grouping.py matching.py mutation.py reduction.py streaming.py test_invalid.yaml test_valid.yaml perf_report.py test_basic.py test_check.py test_cli.py test_error.py test_fill.py test_grouping.py test_match.py test_mutation.py test_path_and_t.py test_reduction.py test_scope_vars.py test_snippets.py test_spec.py test_streaming.py test_target_types.py test_tutorial.py __init__.py tutorial.py _version.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pytest.ini README.md requirements-rtd.txt requirements.txt setup.cfg setup.py tox.ini",
        "setup.py": "import imp\nimport os\nimport sys\n\nfrom setuptools import setup\n\n__author__ = 'Mahmoud Hashemi and Kurt Rose'\n__contact__ = 'mahmoud@hatnote.com'\n__url__ = 'https:\/\/github.com\/mahmoud\/glom'\n__license__ = 'BSD'\n\nCUR_PATH = os.path.abspath(os.path.dirname(__file__))\n_version_mod_path = os.path.join(CUR_PATH, 'glom', '_version.py')\n_version_mod = imp.load_source('_version', _version_mod_path)\n__version__ = _version_mod.__version__\n\n\nopen_kwarg = {}\nif sys.version_info[0] == 3:\nopen_kwarg['encoding'] = 'utf-8'\n\nwith open('README.md', **open_kwarg) as read_me:\nlong_description = read_me.read()\n\nsetup(name='glom',\nversion=__version__,\ndescription=\"A declarative object transformer and formatter, for conglomerating nested data.\",\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nauthor=__author__,\nauthor_email=__contact__,\nurl=__url__,\nproject_urls={\n'Documentation': 'https:\/\/glom.readthedocs.io\/en\/latest\/',\n},\npackages=['glom', 'glom.test'],\ninstall_requires=['boltons>=19.3.0', 'attrs', 'face>=20.1.0'],\nextras_require={\n'yaml': ['PyYAML'],\n},\nentry_points={'console_scripts': ['glom = glom.cli:console_main']},\ninclude_package_data=True,\nzip_safe=False,\nlicense=__license__,\nplatforms='any',\nclassifiers=[\n'Topic :: Utilities',\n'Intended Audience :: Developers',\n'Topic :: Software Development :: Libraries',\n'Development Status :: 5 - Production\/Stable',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'License :: OSI Approved :: BSD License',\n]\n)\n\n\"\"\"\nA brief checklist for release:\n\n* tox\n* git commit (if applicable)\n* Bump glom\/_version.py off of -dev\n* git commit -a -m \"bump version for vx.y.z release\"\n* rm -rf dist\/*\n* python setup.py sdist bdist_wheel\n* twine upload dist\/*\n* bump docs\/conf.py version\n* git commit\n* git tag -a vx.y.z -m \"brief summary\"\n* write CHANGELOG\n* git commit\n* bump glom\/_version.py onto n+1 dev\n* git commit\n* git push\n\n\"\"\"\n"
    },
    {
        "package_name": "gluoncv-0.10.5.post0",
        "file_list": "auto_data.py dataset.py data_zoo.py __init__.py base_estimator.py center_net.py default.py __init__.py conf.py constants.py default.py faster_rcnn.py utils.py __init__.py default.py image_classification.py utils.py __init__.py default.py mask_rcnn.py utils.py __init__.py default.py ssd.py utils.py __init__.py default.py torch_image_classification.py constants.py metrics.py model.py optimizer.py scheduler.py utils.py __init__.py __init__.py utils.py default.py utils.py yolo.py __init__.py __init__.py image_classification.py object_detection.py utils.py __init__.py __init__.py check.py segmentation.py __init__.py base.py batchify.py cityscapes.py dataloader.py classification.py __init__.py classification.py __init__.py classification.py __init__.py classification.py __init__.py kitti_dataset.py kitti_utils.py mono_dataset.py __init__.py detection.py __init__.py data_read.py label_read.py __init__.py mhp.py detection.py __init__.py detection.py instance.py keypoints.py segmentation.py utils.py __init__.py tracking.py __init__.py segmentation.py __init__.py detection.py segmentation.py __init__.py detection.py __init__.py sampler.py segbase.py classification.py __init__.py track.py __init__.py bbox.py block.py bbox.py image.py __init__.py image.py mask.py pose.py alpha_pose.py center_net.py imagenet.py rcnn.py segmentation.py simple_pose.py ssd.py yolo.py __init__.py track.py video.py __init__.py classification.py __init__.py classification.py __init__.py detection.py __init__.py __init__.py loss.py actionrec_inceptionv1.py actionrec_inceptionv3.py actionrec_resnetv1b.py actionrec_vgg16.py c3d.py i3d_inceptionv1.py i3d_inceptionv3.py i3d_resnet.py i3d_slow.py non_local.py p3d.py r2plus1d.py slowfast.py __init__.py alexnet.py fast_pose.py utils.py __init__.py attention.py center_net.py deconv_dla.py deconv_resnet.py duc_mobilenet.py target_generator.py __init__.py cifarresnet.py cifarresnext.py cifarwideresnet.py danet.py deeplabv3.py deeplabv3b_plus.py deeplabv3_plus.py densenet.py dla.py fastscnn.py fcn.py googlenet.py hrnet.py icnet.py inception.py mobilenet.py mobilenetv3.py model_store.py model_zoo.py depth_decoder.py layers.py monodepth2.py monodepth2_posenet.py pose_decoder.py resnet_encoder.py __init__.py nasnet.py resnet101_v1d_1.9x.json resnet101_v1d_2.2x.json resnet18_v1b_2.6x.json resnet50_v1d_1.8x.json resnet50_v1d_3.6x.json resnet50_v1d_5.9x.json resnet50_v1d_8.8x.json resnetv1b_pruned.py __init__.py pspnet.py mobilenet1.0_int8-symbol.json quantized.py resnet50_v1_int8-symbol.json ssd_300_vgg16_atrous_voc_int8-symbol.json ssd_512_mobilenet1.0_voc_int8-symbol.json ssd_512_resnet50_v1_voc_int8-symbol.json ssd_512_vgg16_atrous_voc_int8-symbol.json __init__.py data_parallel.py doublehead_rcnn.py faster_rcnn.py predefined_models.py rcnn_target.py __init__.py data_parallel.py mask_rcnn.py predefined_models.py rcnn_target.py __init__.py rcnn.py anchor.py bbox_clip.py cython_rpn_target.pyx proposal.py rpn.py rpn_target.py __init__.py __init__.py residual_attentionnet.py resnest.py resnet.py resnetv1b.py resnext.py segbase.py senet.py se_resnet.py shufflenet.py siamrpn_tracker.py siam_alexnet.py siam_net.py siam_rpn.py __init__.py mobile_pose.py pose_target.py simple_pose_resnet.py __init__.py general_detector.py motion_estimation.py presets.py smot_tracker.py ssd.py tracktors.py utils.py __init__.py squeezenet.py anchor.py presets.py resnet_v1b_ssd.py ssd.py target.py vgg_atrous.py __init__.py vgg.py wideresnet.py xception.py darknet.py yolo3.py yolo_target.py __init__.py __init__.py bbox.py block.py coder.py cython_bbox.pyx dropblock.py feature.py gn.py matcher.py predictor.py sampler.py splat.py __init__.py dataloader.py detection_dataset.py detection_utils.py distributed_sampler.py grouped_batch_sampler.py __init__.py __init__.py dataset.py dataset_pre_processor.py duplicate_remover.py filename_sanitizer.py video_chunker.py __init__.py video_io.py __init__.py ingestion_utils.py serialization_utils.py __init__.py __init__.py dataset_pose.py __init__.py catalog.py metadata.py mscoco.py __init__.py beziers.py boxes.py image_list.py instances.py keypoints.py masks.py __init__.py augmentation.py transform.py transform_utils.py __init__.py transforms.py functional.py stack_transforms.py tensor_transforms.py functional.py images.py video_transforms.py volume_transforms.py dataset_classification.py multigrid_helper.py __init__.py __init__.py action_recognition.py coot.py directpose.py __init__.py launch.py __init__.py actionrec_resnetv1b.py i3d_resnet.py i3d_slow.py ircsnv2.py non_local.py r2plus1dv1.py r2plus1dv2.py slowfast.py tpn.py __init__.py model_store.py model_zoo.py fcos.py model_utils.py __init__.py directpose.py directpose_outputs.py directpose_resnet_fpn.py __init__.py coot_model.py __init__.py batch_norm.py deform_conv.py focal_loss.py group_norm.py iou_loss.py keypoint_loss.py nms.py shape_spec.py smooth_l1_loss.py __init__.py comm.py coot_utils.py coco_eval.py __init__.py loss.py lr_policy.py model_utils.py optimizer.py random.py classification.py coot.py pose.py __init__.py nms.py __init__.py utils.py visualizer.py __init__.py __init__.py bbox.py block.py compress_json.py tracking.py download.py export_helper.py filesystem.py lr_scheduler.py accuracy.py coco_detection.py coco_instance.py coco_keypoints.py heatmap_accuracy.py rcnn.py segmentation.py tracking.py voc_detection.py __init__.py parallel.py plot_history.py random.py sync_loader_helper.py transforms.py version.py bbox.py image.py keypoints.py mask.py network.py segmentation.py __init__.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py test_auto_data.py test_auto_estimators.py test_auto_tasks.py test_hybrid_auto_tasks.py test_torch_auto_estimators.py test_torch_auto_tasks.py __init__.py test_model_zoo.py test_utils_export.py __init__.py test_model_zoo_torch.py test_tvm_torch_export.py __init__.py common.py test_data_dataloader.py test_data_datasets.py test_data_transforms.py test_lr_scheduler.py test_nn.py test_utils_bbox.py test_utils_block.py test_utils_metric.py test_utils_parallel.py test_utils_segmentation.py test_utils_viz.py tiny_datasets.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\nimport os\nfrom datetime import datetime\nimport io\nimport re\nimport shutil\nimport sys\nfrom setuptools import setup, find_packages\ntry:\nimport cv2\nexcept ImportError:\ncv2 = None\n\n\ndef read(*names, **kwargs):\nwith io.open(\nos.path.join(os.path.dirname(__file__), *names),\nencoding=kwargs.get(\"encoding\", \"utf8\")\n) as fp:\nreturn fp.read()\n\n\ndef find_version(*file_paths):\nversion_file = read(*file_paths)\nversion_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\nversion_file, re.M)\nif version_match:\nreturn version_match.group(1)\nraise RuntimeError(\"Unable to find version string.\")\n\nlong_description = (\n\"\"\"GluonCV Python Package\n=========================\n`GluonCV <https:\/\/gluon-cv.mxnet.io>`_ provides implementations of the state-of-the-art (SOTA) deep learning models in computer vision.\n\nIt is designed for engineers, researchers, and students to fast prototype products and research ideas based on these models.\n\nInstallation\n------------\n\nTo install, use:\n\n.. code-block:: bash\n\npip install gluoncv mxnet>=1.6.0 --upgrade\n# for installing gluoncv with all dependencies\npip install gluoncv[full] mxnet>=1.6.0 --upgrade\n\nTo enable different hardware supports such as GPUs, check out `mxnet variants <https:\/\/pypi.org\/project\/mxnet\/>`_.\n\nFor example, you can install cuda-11.0 supported mxnet alongside gluoncv:\n\n.. code-block:: bash\n\npip install gluoncv mxnet-cu110>=1.6.0 --upgrade\n\n\"\"\")\n\nVERSION = find_version('gluoncv', '__init__.py')\n\nif 'TRAVIS_TAG' in os.environ and os.environ['TRAVIS_TAG'].startswith('patch-'):\nVERSION = os.environ['TRAVIS_TAG'].split('-')[1]\nelif 'APPVEYOR_REPO_TAG_NAME' in os.environ and os.environ['APPVEYOR_REPO_TAG_NAME'].startswith('patch-'):\nVERSION = os.environ['APPVEYOR_REPO_TAG_NAME'].split('-')[1]\nelif 'TRAVIS_TAG' in os.environ or 'APPVEYOR_REPO_TAG_NAME' in os.environ:\npass\nelse:\nVERSION += 'b{0}'.format(datetime.today().strftime('%Y%m%d'))\n\nrequirements = [\n'numpy',\n'tqdm',\n'requests',\n# 'mxnet',\n'matplotlib',\n'portalocker',\n'Pillow',\n'scipy',\n#'tensorboardx',\n#'decord',\n#'opencv-python',\n'yacs',\n'pandas',\n'pyyaml',\n'autocfg',\n#'autogluon.core'\n]\n\n# do not duplicate opencv module if already compiled from source\nif cv2 is None:\nrequirements.append('opencv-python')\n\nextra_requirements = {\n'full': ['tensorboardx', 'decord', 'autogluon.core', 'cython', 'pycocotools'],\n'auto': ['autogluon.core']\n}\n\nsetup(\n# Metadata\nname='gluoncv',\nversion=VERSION,\nauthor='Gluon CV Toolkit Contributors',\nurl='https:\/\/github.com\/dmlc\/gluon-cv',\ndescription='Gluon CV Toolkit',\nlong_description=long_description,\nlicense='Apache-2.0',\n\n# Package info\npackages=find_packages(exclude=('docs', 'tests', 'scripts')),\nzip_safe=True,\ninclude_package_data=True,\ninstall_requires=requirements,\nextras_require=extra_requirements\n)\n"
    },
    {
        "package_name": "gmplot-1.4.1",
        "file_list": "color.py gmplot.py google_maps_templates.py 000000.png 000080.png 00008B.png 0000CD.png 0000FF.png 006400.png 008000.png 008080.png 008B8B.png 00BFFF.png 00CED1.png 00FA9A.png 00FF00.png 00FF7F.png 00FFFF.png 191970.png 1E90FF.png 20B2AA.png 228B22.png 2E8B57.png 2F4F4F.png 32CD32.png 3CB371.png 40E0D0.png 4169E1.png 4682B4.png 483D8B.png 48D1CC.png 4B0082.png 556B2F.png 5F9EA0.png 6495ED.png 66CDAA.png 696969.png 6A5ACD.png 6B8E23.png 708090.png 778899.png 7B68EE.png 7CFC00.png 7FFF00.png 7FFFD4.png 800000.png 800080.png 808000.png 808080.png 87CEEB.png 87CEFA.png 8A2BE2.png 8B0000.png 8B008B.png 8B4513.png 8FBC8F.png 90EE90.png 9370DB.png 9400D3.png 98FB98.png 9932CC.png 9ACD32.png A0522D.png A52A2A.png A9A9A9.png ADD8E6.png ADFF2F.png AFEEEE.png B0C4DE.png B0E0E6.png B22222.png B8860B.png BA55D3.png BC8F8F.png BDB76B.png C0C0C0.png C71585.png CD5C5C.png CD853F.png clear.png D2691E.png D2B48C.png D3D3D3.png D8BFD8.png DA70D6.png DAA520.png DB7093.png DC143C.png DCDCDC.png DDA0DD.png DEB887.png E0FFFF.png E6E6FA.png E9967A.png EE82EE.png EEE8AA.png F08080.png F0E68C.png F0F8FF.png F0FFF0.png F0FFFF.png F4A460.png F5DEB3.png F5F5DC.png F5F5F5.png F5FFFA.png F8F8FF.png FA8072.png FAEBD7.png FAF0E6.png FAFAD2.png FDF5E6.png FF0000.png FF00FF.png FF1493.png FF4500.png FF6347.png FF69B4.png FF7F50.png FF8C00.png FFA07A.png FFA500.png FFB6C1.png FFC0CB.png FFD700.png FFDAB9.png FFDEAD.png FFE4B5.png FFE4C4.png FFE4E1.png FFEBCD.png FFEFD5.png FFF0F5.png FFF5EE.png FFF8DC.png FFFACD.png FFFAF0.png FFFAFA.png FFFF00.png FFFFE0.png FFFFF0.png FFFFFF.png utility.py writer.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_color.py test_gmplot.py test_utility.py test_writer.py __init__.py",
        "setup.py": "import os\nfrom setuptools import setup, find_packages\n\n__version__ = '1.4.1'\n\ndef read(fname):\nwith open(os.path.join(os.path.dirname(__file__), fname)) as f:\nreturn f.read()\n\ndef get_requirements(requirements_file):\nwith open(requirements_file) as f:\nreturn f.read().strip().splitlines()\n\nsetup(\nname = 'gmplot',\nversion = __version__,\nauthor = 'gmplot contributors',\ndescription = 'A matplotlib-like interface to plot data with Google Maps.',\nlong_description=read('README.rst'),\nlicense='MIT',\nkeywords='python google-maps visualization',\npackages = find_packages(),\ninclude_package_data=True,\npackage_data = {\n'gmplot': ['markers\/*.png'],\n},\nproject_urls = {\n'Documentation': 'https:\/\/github.com\/gmplot\/gmplot\/wiki',\n'Tracker': 'https:\/\/github.com\/gmplot\/gmplot\/issues',\n'Source': 'https:\/\/github.com\/gmplot\/gmplot'\n},\ninstall_requires=get_requirements('requirements.txt'),\nclassifiers = ['Programming Language :: Python :: %s' % version for version in ['2', '2.7', '3', '3.5', '3.6', '3.7', '3.8']]\n)\n"
    },
    {
        "package_name": "gnureadline-8.1.2",
        "file_list": "dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in readline.c readline.c readline.c readline.c readline.c readline.c readline.c readline.c readline.c readline.c readline.c.h readline.c NEWS.rst PKG-INFO pyproject.toml readline.py README.rst build.sh readline-8.1.tar.gz readline81-001 readline81-002 setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport os\nimport sys\nfrom distutils.command.build_ext import build_ext\nimport subprocess\n\nfrom setuptools import setup, Extension\n\nif sys.platform == 'win32':\nsys.exit('Error: this module is not meant to work on Windows (try pyreadline instead)')\nelif sys.platform == 'cygwin':\nsys.exit('Error: this module is not needed for Cygwin (and probably does not compile anyway)')\n\nhere = os.path.abspath(os.path.dirname(__file__))\nREADME = open(os.path.join(here, 'README.rst')).read()\nNEWS = open(os.path.join(here, 'NEWS.rst')).read()\n\nVERSION = '8.1.2'\nDESCRIPTION = 'The standard Python readline extension statically linked against the GNU readline library.'\nLONG_DESCRIPTION = README + '\\n\\n' + NEWS\nCLASSIFIERS = [\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'Intended Audience :: End Users\/Desktop',\n'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: POSIX',\n'Programming Language :: C',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 3',\n'Topic :: Software Development :: Libraries :: Python Modules',\n]\n\n# Since we have the latest readline (post 4.2), enable all readline functionality\n# These macros can be found in pyconfig.h.in in the main directory of the Python tarball\nDEFINE_MACROS = [\n('HAVE_RL_APPEND_HISTORY', None),\n('HAVE_RL_CALLBACK', None),\n('HAVE_RL_CATCH_SIGNAL', None),\n('HAVE_RL_COMPLETION_APPEND_CHARACTER', None),\n('HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK', None),\n('HAVE_RL_COMPLETION_MATCHES', None),\n('HAVE_RL_COMPLETION_SUPPRESS_APPEND', None),\n('HAVE_RL_PRE_INPUT_HOOK', None),\n('HAVE_RL_RESIZE_TERMINAL', None),\n]\n\n\ndef which_shell():\nvalid_paths = [\"\/bin\/bash\", \"\/usr\/local\/bin\/bash\", \"\/bin\/sh\"]\nfor path in valid_paths:\nif os.path.exists(path):\nreturn path\nraise IOError(\"No Shell Found\")\n\n\n# Check if any of the distutils commands involves building the module,\n# and check for quiet vs. verbose option\nbuilding = False\nverbose = True\nfor s in sys.argv[1:]:\nif s.startswith('bdist') or s.startswith('build') or s.startswith('install'):\nbuilding = True\nif s in ['--quiet', '-q']:\nverbose = False\nif s in ['--verbose', '-v']:\nverbose = True\n\n# Build readline first, if it is not there and we are building the module\nif building and not os.path.exists('readline\/libreadline.a'):\nshell_path = which_shell()\nif verbose:\nprint(\"\\n============ Building the readline library ============\\n\")\nos.system('cd rl && %s .\/build.sh' % shell_path)\nprint(\"\\n============ Building the readline extension module ============\\n\")\nelse:\nos.system('cd rl && %s .\/build.sh > \/dev\/null 2>&1' % shell_path)\n# Add symlink that simplifies include and link paths to real library\nif not (os.path.exists('readline') or os.path.islink('readline')):\nos.symlink(os.path.join('rl', 'readline-lib'), 'readline')\n\n\n# Workaround for OS X 10.9.2 and Xcode 5.1+\n# The latest clang treats unrecognized command-line options as errors and the\n# Python CFLAGS variable contains unrecognized ones (e.g. -mno-fused-madd).\n# See Xcode 5.1 Release Notes (Compiler section) and\n# http:\/\/stackoverflow.com\/questions\/22313407 for more details. This workaround\n# follows the approach suggested in http:\/\/stackoverflow.com\/questions\/724664.\nclass build_ext_subclass(build_ext):\ndef build_extensions(self):\nif sys.platform == 'darwin':\n# Test the compiler that will actually be used to see if it likes flags\nproc = subprocess.Popen(self.compiler.compiler + ['-v'],\nstdout=subprocess.PIPE, stderr=subprocess.PIPE,\nuniversal_newlines=True)\nstdout, stderr = proc.communicate()\nclang_mesg = \"clang: error: unknown argument: '-mno-fused-madd'\"\nif proc.returncode and stderr.splitlines()[0].startswith(clang_mesg):\nfor ext in self.extensions:\n# Use temporary workaround to ignore invalid compiler option\n# Hopefully -mno-fused-madd goes away before this workaround!\next.extra_compile_args += ['-Wno-error=unused-command-line-argument-hard-error-in-future']\nbuild_ext.build_extensions(self)\n\n\n# First try version-specific readline.c, otherwise fall back to major-only version\nsource = os.path.join('Modules', '%d.%d' % sys.version_info[:2], 'readline.c')\nif not os.path.exists(source):\nsource = os.path.join('Modules', '%d.x' % (sys.version_info[0],), 'readline.c')\n\nsetup(\nname=\"gnureadline\",\nversion=VERSION,\ndescription=DESCRIPTION,\nlong_description=LONG_DESCRIPTION,\nclassifiers=CLASSIFIERS,\nmaintainer=\"Ludwig Schwardt, Sridhar Ratnakumar\",\nmaintainer_email=\"ludwig.schwardt@gmail.com, srid@srid.ca\",\nurl=\"http:\/\/github.com\/ludwigschwardt\/python-gnureadline\",\ninclude_package_data=True,\npy_modules=['readline'],\ncmdclass={'build_ext': build_ext_subclass},\next_modules=[\nExtension(name=\"gnureadline\",\nsources=[source],\ninclude_dirs=['.', os.path.dirname(source)],\ndefine_macros=DEFINE_MACROS,\nextra_objects=['readline\/libreadline.a', 'readline\/libhistory.a'],\nlibraries=['ncurses']\n),\n],\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "golicense_classifier-0.0.16",
        "file_list": "LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt classifier.py libmatch.h libmatch.so 0BSD.txt AFL-1.1.header.txt AFL-1.1.txt AFL-1.2.header.txt AFL-1.2.txt AFL-2.0.header.txt AFL-2.0.txt AFL-2.1.header.txt AFL-2.1.txt AFL-3.0.header.txt AFL-3.0.txt AGPL-1.0.txt AGPL-3.0.header.txt AGPL-3.0.txt AML.txt AMPAS.txt Apache-1.0.txt Apache-1.1.txt Apache-2.0.header.txt Apache-2.0.txt APSL-1.0.header.txt APSL-1.0.txt APSL-1.1.header.txt APSL-1.1.txt APSL-1.2.header.txt APSL-1.2.txt APSL-2.0.header.txt APSL-2.0.txt Artistic-1.0-cl8.txt Artistic-1.0-Perl.txt Artistic-1.0.txt Artistic-2.0.txt Atmel.txt BabelstoneIDS.txt BCL.txt Beerware.txt BitTorrent-1.1.header.txt BitTorrent-1.1.txt blessing.txt BSD-2-Clause-FreeBSD.txt BSD-2-Clause-NetBSD.txt BSD-2-Clause.txt BSD-3-Clause-Attribution.txt BSD-3-Clause-Clear.txt BSD-3-Clause-LBNL.txt BSD-3-Clause.txt BSD-3-Clause_sun.txt BSD-4-Clause-UC.txt BSD-4-Clause.txt BSD-Protection.txt BSL-1.0.txt Business-Source-License-1.1.txt bzip2-1.0.3.txt bzip2-1.0.4.txt bzip2-1.0.5.txt bzip2-1.0.6.txt bzip2-1.0.txt CC-BY-1.0.txt CC-BY-2.0.txt CC-BY-2.5.txt CC-BY-3.0.txt CC-BY-4.0.txt CC-BY-NC-1.0.txt CC-BY-NC-2.0.txt CC-BY-NC-2.5.txt CC-BY-NC-3.0.txt CC-BY-NC-4.0.txt CC-BY-NC-ND-1.0.txt CC-BY-NC-ND-2.0.txt CC-BY-NC-ND-2.5.txt CC-BY-NC-ND-3.0.txt CC-BY-NC-ND-4.0.txt CC-BY-NC-SA-1.0.txt CC-BY-NC-SA-2.0.txt CC-BY-NC-SA-2.5.txt CC-BY-NC-SA-3.0.txt CC-BY-NC-SA-4.0.txt CC-BY-ND-1.0.txt CC-BY-ND-2.0.txt CC-BY-ND-2.5.txt CC-BY-ND-3.0.txt CC-BY-ND-4.0.txt CC-BY-SA-1.0.txt CC-BY-SA-2.0.txt CC-BY-SA-2.5.txt CC-BY-SA-3.0.txt CC-BY-SA-4.0.txt CC0-1.0.txt CDDL-1.0.txt CDDL-1.1.txt Commons-Clause.txt CPAL-1.0.header.txt CPAL-1.0.txt CPL-1.0.txt DBAD.txt eGenix.txt EPL-1.0.txt EPL-2.0.txt EUPL-1.0.txt EUPL-1.1.txt Facebook-2-Clause.txt Facebook-3-Clause.txt Facebook-Examples.txt FreeImage.txt FTL.txt GPL-1.0.header.txt GPL-1.0.txt GPL-2.0-with-autoconf-exception.txt GPL-2.0-with-bison-exception.txt GPL-2.0-with-classpath-exception.txt GPL-2.0-with-font-exception.txt GPL-2.0-with-GCC-exception.txt GPL-2.0.header.txt GPL-2.0.header_a.txt GPL-2.0.header_b.txt GPL-2.0.header_c.txt GPL-2.0.header_d.txt GPL-2.0.header_e.txt GPL-2.0.txt GPL-3.0-with-autoconf-exception.txt GPL-3.0-with-bison-exception.header.txt GPL-3.0-with-GCC-exception.txt GPL-3.0.header.txt GPL-3.0.txt GUST-Font-License.txt ImageMagick.header.txt ImageMagick.txt IPL-1.0.txt ISC.txt JSON.txt LGPL-2.0.header.txt LGPL-2.0.txt LGPL-2.1.header.txt LGPL-2.1.header_a.txt LGPL-2.1.txt LGPL-3.0.header.txt LGPL-3.0.txt LGPLLR.txt Libpng.txt libtiff.txt libtiff_singular.txt Lil-1.0.txt Linux-OpenIB.txt LPL-1.0.txt LPL-1.02.txt LPPL-1.3c.txt MIT.txt MPL-1.0.header.txt MPL-1.0.txt MPL-1.1.header.txt MPL-1.1.txt MPL-2.0-no-copyleft-exception.header.txt MPL-2.0.header.txt MPL-2.0.txt MS-PL.txt MS-RL.txt NCBI.txt NCSA.txt NPL-1.0.txt NPL-1.1.txt OFL-1.1.txt OpenSSL.txt OpenVision.txt OSL-1.0.txt OSL-1.1.txt OSL-2.0.txt OSL-2.1.txt OSL-3.0.header.txt OSL-3.0.txt PHP-3.0.txt PHP-3.01.txt PIL.txt PostgreSQL.txt Python-2.0-complete.txt Python-2.0.txt QPL-1.0.txt Ruby.txt SGI-B-1.0.header.txt SGI-B-1.0.txt SGI-B-1.1.header.txt SGI-B-1.1.txt SGI-B-2.0.txt SISSL-1.2.header.txt SISSL-1.2.txt SISSL.header.txt SISSL.txt Sleepycat.txt Unicode-DFS-2015.txt Unicode-DFS-2016.txt Unicode-TOU.txt Unlicense.txt UPL-1.0.txt W3C-19980720.txt W3C-20150513.txt W3C.header.txt W3C.txt WTFPL.txt X11.txt Xnet.txt Zend-2.0.txt zlib-acknowledgement.txt Zlib.txt ZPL-1.1.txt ZPL-2.0.txt ZPL-2.1.txt test.py __init__.py __init__.py",
        "setup.py": "import setuptools\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\nlong_description = fh.read()\n\nsetuptools.setup(\nname=\"golicense_classifier\",\nversion=\"0.0.16\",\nauthor=\"AvishrantSh (Avishrant Sharma)\",\nauthor_email=\"<avishrants@gmail.com>\",\ndescription=\"A Python based License Classification and Copyright\\\nStatement Detection tool based on Google License Classifier\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/AvishrantsSh\/LicensePackage\",\nproject_urls={\n\"Bug Tracker\": \"https:\/\/github.com\/AvishrantsSh\/LicensePackage\/issues\",\n},\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: POSIX :: Linux\",\n],\npackage_dir={\"\": \"src\"},\ninclude_package_data=True,\npackages=setuptools.find_packages(where=\"src\"),\npython_requires=\">=3.6\",\n)\n"
    },
    {
        "package_name": "google-3.0.0",
        "file_list": "dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt user_agents.txt.gz __init__.py MANIFEST.in PKG-INFO README.md requirements.txt google setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n# Copyright (c) 2009-2020, Mario Vilas\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# * Redistributions of source code must retain the above copyright notice,\n# this list of conditions and the following disclaimer.\n# * Redistributions in binary form must reproduce the above copyright\n# notice,this list of conditions and the following disclaimer in the\n# documentation and\/or other materials provided with the distribution.\n# * Neither the name of the copyright holder nor the names of its\n# contributors may be used to endorse or promote products derived from\n# this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n\nfrom os import chdir\nfrom os.path import abspath, join, split\n\n# Make sure we are standing in the correct directory.\n# Old versions of distutils didn't take care of this.\nhere = split(abspath(__file__))[0]\nchdir(here)\n\n# Package metadata.\nmetadata = dict(\nname='google',\nprovides=['googlesearch'],\nrequires=['beautifulsoup4'],\npackages=['googlesearch'],\nscripts=[join('scripts', 'google')],\npackage_data={'googlesearch': ['user_agents.txt.gz']},\ninclude_package_data=True,\nversion=\"3.0.0\",\ndescription=\"Python bindings to the Google search engine.\",\nauthor=\"Mario Vilas\",\nauthor_email=\"mvilas@gmail.com\",\nurl=\"http:\/\/breakingcode.wordpress.com\/\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: BSD License\",\n\"Environment :: Console\",\n\"Programming Language :: Python\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\n)\n\n# Prefer setuptools over the old distutils.\n# If setuptools is available, use install_requires.\ntry:\nfrom setuptools import setup\nmetadata['install_requires'] = metadata['requires']\nexcept ImportError:\nfrom distutils.core import setup\n\n# Run the setup script.\nsetup(**metadata)\n"
    },
    {
        "package_name": "google-auth-oauthlib-0.5.2",
        "file_list": "flow.py helpers.py interactive.py __init__.py __main__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py client_secrets.json test_flow.py test_helpers.py test_interactive.py test_tool.py",
        "setup.py": "# Copyright 2014 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\nTOOL_DEPENDENCIES = \"click>=6.0.0\"\n\nDEPENDENCIES = (\"google-auth>=1.0.0\", \"requests-oauthlib>=0.7.0\")\n\n\nwith io.open(\"README.rst\", \"r\") as fh:\nlong_description = fh.read()\n\n\nversion = \"0.5.2\"\n\nsetup(\nname=\"google-auth-oauthlib\",\nversion=version,\nauthor=\"Google Cloud Platform\",\nauthor_email=\"jonwayne+google-auth@google.com\",\ndescription=\"Google Authentication Library\",\nlong_description=long_description,\nurl=\"https:\/\/github.com\/GoogleCloudPlatform\/google-auth-library-python-oauthlib\",\npackages=find_packages(exclude=(\"tests*\",)),\ninstall_requires=DEPENDENCIES,\nextras_require={\"tool\": TOOL_DEPENDENCIES},\nentry_points={\n\"console_scripts\": [\n\"google-oauthlib-tool\" \"=google_auth_oauthlib.tool.__main__:main [tool]\"\n]\n},\npython_requires=\">=3.6\",\nlicense=\"Apache 2.0\",\nkeywords=\"google auth oauth client oauthlib\",\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Development Status :: 3 - Alpha\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: POSIX\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Operating System :: OS Independent\",\n\"Topic :: Internet :: WWW\/HTTP\",\n],\n)\n"
    },
    {
        "package_name": "google-cloud-build-3.9.0",
        "file_list": "py.typed __init__.py gapic_metadata.json cloudbuild.proto py.typed async_client.py client.py pagers.py base.py grpc.py grpc_as __init_ __init__.py __init__.py cloudbuild.py __init__.py __init__.py dependency_links.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst fixup_cloudbuild_v1_keywords.py setup.cfg setup.py test_cloud_build.py __init__.py __init__.py __init__.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\n#\n# Copyright 2019 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# https:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\nname = \"google-cloud-build\"\ndescription = \"Google Cloud Build API client library\"\nversion = \"3.9.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production\/Stable'\nrelease_status = \"Development Status :: 5 - Production\/Stable\"\ndependencies = [\n\"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n\"proto-plus >= 1.15.0, <2.0.0dev\",\n\"protobuf >= 3.19.0, <4.0.0dev\",\n]\n\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\nreadme = readme_file.read()\n\npackages = [\npackage\nfor package in setuptools.PEP420PackageFinder.find()\nif package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\nnamespaces.append(\"google.cloud\")\n\nif \"google.cloud.devtools\" in packages:\nnamespaces.append(\"google.cloud.devtools\")\n\nsetuptools.setup(\nname=name,\nversion=version,\ndescription=description,\nlong_description=readme,\nauthor=\"Google LLC\",\nauthor_email=\"googleapis-packages@google.com\",\nlicense=\"Apache 2.0\",\nurl=\"https:\/\/github.com\/googleapis\/python-cloudbuild\",\nclassifiers=[\nrelease_status,\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Operating System :: OS Independent\",\n\"Topic :: Internet\",\n],\nplatforms=\"Posix; MacOS X; Windows\",\npackages=packages,\npython_requires=\">=3.7\",\nnamespace_packages=namespaces,\nscripts=[\"scripts\/fixup_cloudbuild_v1_keywords.py\"],\ninstall_requires=dependencies,\ninclude_package_data=True,\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "google-cloud-dataproc-5.0.0",
        "file_list": "py.typed __init__.py gapic_metadata.json py.typed async_clien async_client.py client.py pagers.py base.py grpc.py grpc_asyncio.py __init__.py __init__.py async_client.py client.py pagers.py base.py grpc.py grpc_asyncio.py __init__.py __init__.py async_client.py client.py pagers.py base.py grpc.py grpc_asyncio.py __init__.py __init__.py async_client.py client.py pagers.py base.py grpc.py grpc_asyncio.py __init__.py __init__.py async_client.py client.py pagers.py base.py grpc.py grpc_asyncio.py __init__.py __init__.py __init__.py autoscaling_policies.py batches.py clusters.py jobs.py operations.py shared.py workflow_templates.py __init__.py __init__.py dependency_links.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst fixup_dataproc_v1_keywords.py setup.cfg setup.py test_system_cluster_controller_v1.py test_autoscaling_policy_service.py test_batch_controller.py test_cluster_controller.py test_job_controller.py test_workflow_template_service.py __init__.py __init__.py __init__.py __init__.py",
        "setup.py": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-dataproc\"\ndescription = \"Google Cloud Dataproc API client library\"\nversion = \"5.0.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production\/Stable'\nrelease_status = \"Development Status :: 5 - Production\/Stable\"\ndependencies = [\n\"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n\"proto-plus >= 1.15.0, <2.0.0dev\",\n\"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\nreadme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\npackage\nfor package in setuptools.PEP420PackageFinder.find()\nif package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\nnamespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\nname=name,\nversion=version,\ndescription=description,\nlong_description=readme,\nauthor=\"Google LLC\",\nauthor_email=\"googleapis-packages@google.com\",\nlicense=\"Apache 2.0\",\nurl=\"https:\/\/github.com\/googleapis\/python-dataproc\",\nclassifiers=[\nrelease_status,\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Operating System :: OS Independent\",\n\"Topic :: Internet\",\n],\nplatforms=\"Posix; MacOS X; Windows\",\npackages=packages,\nnamespace_packages=namespaces,\ninstall_requires=dependencies,\nextras_require=extras,\npython_requires=\">=3.7\",\nscripts=[\n\"scripts\/fixup_dataproc_v1_keywords.py\",\n],\ninclude_package_data=True,\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "google-cloud-orchestration-airflow-1.4.1",
        "file_list": "py.typed __init__.py gapic_metadat gapic_metadata.json py.typed async_client.py client.py pagers.py base.py grpc.py grpc_asyncio.py __init__.py __init__.py async_client.py client.py pagers.py base.py grpc.py grpc_asyncio.py __init__.py __init__.py __in __init__.py environ environments.py image_v image_versions.py operati operations.py __init_ __init__.py __init__.py gapic_me gapic_metadata.json py.typed async_client.py client.py pagers.py base.py grpc.py grpc_asyncio.py __init__.py __init__.py async_client.py client.py pagers.py base.py grpc.py grpc_asyncio.py __init__.py __init__.py __init__.py en environments.py im image_versions.py op operations.py __ __init__.py __init__ __init__.py dependency_link dependency_links.txt namespace_packa namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_environments.py test_image_versions.py __init__.py test_environments.py test_image_versions.py __init__.py __init__.py __init__.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\n#\n# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# https:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\nname = \"google-cloud-orchestration-airflow\"\ndescription = \"Cloud Composer API client library\"\nversion = \"1.4.1\"\nrelease_status = \"Development Status :: 5 - Production\/Stable\"\nurl = \"https:\/\/github.com\/googleapis\/python-orchestration-airflow\"\ndependencies = [\n\"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n\"proto-plus >= 1.15.0, <2.0.0dev\",\n\"protobuf >= 3.19.0, <4.0.0dev\",\n]\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\nreadme = readme_file.read()\n\npackages = [\npackage\nfor package in setuptools.PEP420PackageFinder.find()\nif package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\nnamespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\nname=name,\nversion=version,\ndescription=description,\nlong_description=readme,\nauthor=\"Google LLC\",\nauthor_email=\"googleapis-packages@google.com\",\nlicense=\"Apache 2.0\",\nurl=url,\nclassifiers=[\nrelease_status,\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Operating System :: OS Independent\",\n\"Topic :: Internet\",\n],\nplatforms=\"Posix; MacOS X; Windows\",\npackages=packages,\npython_requires=\">=3.7\",\nnamespace_packages=namespaces,\ninstall_requires=dependencies,\ninclude_package_data=True,\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "google-cloud-runtimeconfig-0.33.2",
        "file_list": "client.py config.py exceptions.py variable.py _helpers.py _http.py __init__.py __init__.py __init__.py dependency_links.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_client.py test_config.py test_variable.py test__helpers.py test__http.py __init__.py",
        "setup.py": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-runtimeconfig\"\ndescription = \"Google Cloud RuntimeConfig API client library\"\nversion = \"0.33.2\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production\/Stable'\nrelease_status = \"Development Status :: 4 - Beta\"\ndependencies = [\n# NOTE: Maintainers, please do not require google-cloud-core>=2.x.x\n# Until this issue is closed\n# https:\/\/github.com\/googleapis\/google-cloud-python\/issues\/10566\n\"google-cloud-core >= 1.3.0, < 3.0dev\",\n]\nextras = {}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\nreadme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\npackage for package in setuptools.find_packages() if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\nnamespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\nname=name,\nversion=version,\ndescription=description,\nlong_description=readme,\nauthor=\"Google LLC\",\nauthor_email=\"googleapis-packages@google.com\",\nlicense=\"Apache 2.0\",\nurl=\"https:\/\/github.com\/googleapis\/python-runtimeconfig\",\nclassifiers=[\nrelease_status,\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Operating System :: OS Independent\",\n\"Topic :: Internet\",\n],\nplatforms=\"Posix; MacOS X; Windows\",\npackages=packages,\nnamespace_packages=namespaces,\ninstall_requires=dependencies,\nextras_require=extras,\npython_requires=\">=3.7\",\ninclude_package_data=True,\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "google-cloud-translate-3.8.0",
        "file_list": "py.typed __init__.py client.py _http.py __init__.py gapic_metadata.json py.typed async_client.py client.py pagers.py base. base.py grpc. grpc.py grpc_ grpc_asyncio.py __ini __init__.py __init__.py __init__.py translation_service.py __init__.py __init__.py gapic_metadata.json py.typed async_clien async_client.py client.py pagers.py base.py grpc.py grpc_asyncio.py __init__.py __init__.py __init__.py translation_service.py __init__.py __init__.py __init__.py __init__.py dependency_links.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst fixup_translate_v3beta1_keywords.py fixup_translate_v3_keywords.py setup.cfg setup.py test_vpcsc.py system.py test_translation_service.py __init__.py test_translation_service.py __init__.py __init__.py test_client.py test__http.py __init__.py __init__.py",
        "setup.py": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-translate\"\ndescription = \"Google Cloud Translation API client library\"\nversion = \"3.8.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production\/Stable'\nrelease_status = \"Development Status :: 5 - Production\/Stable\"\ndependencies = [\n\"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n\"google-cloud-core >= 1.3.0, <3.0.0dev\",\n\"proto-plus >= 1.15.0, <2.0.0dev\",\n\"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\nreadme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\npackage\nfor package in setuptools.PEP420PackageFinder.find()\nif package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\nnamespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\nname=name,\nversion=version,\ndescription=description,\nlong_description=readme,\nauthor=\"Google LLC\",\nauthor_email=\"googleapis-packages@google.com\",\nlicense=\"Apache 2.0\",\nurl=\"https:\/\/github.com\/googleapis\/python-translate\",\nclassifiers=[\nrelease_status,\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Operating System :: OS Independent\",\n\"Topic :: Internet\",\n],\nplatforms=\"Posix; MacOS X; Windows\",\npackages=packages,\nscripts=[\n\"scripts\/fixup_translate_v3_keywords.py\",\n\"scripts\/fixup_translate_v3beta1_keywords.py\",\n],\nnamespace_packages=namespaces,\ninstall_requires=dependencies,\nextras_require=extras,\npython_requires=\">=3.7\",\ninclude_package_data=True,\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "google-pasta-0.2.0",
        "file_list": "dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt errors.py import_utils.py import_utils_test.py inline.py inline_test.py rename.py rename_test.py __init__.py annotate.py annotate_test.py ast_constants.py ast_utils.py ast_utils_test.py codegen.py codegen_test.py formatting.py fstring_utils.py scope.py scope_test.py test_utils.py test_utils_test.py token_generator.py __init__.py __init__.py PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# coding=utf-8\n# Copyright 2017 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# https:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom setuptools import setup, find_packages\n\nimport unittest\n\ndef all_tests():\ntest_loader = unittest.TestLoader()\ntest_suite = test_loader.discover('.', pattern='*_test.py')\nreturn test_suite\n\nsetup(\nname=\"google-pasta\",\nversion=\"0.2.0\",\npackages=find_packages(),\n\n# metadata for upload to PyPI\nauthor=\"Nick Smith\",\nauthor_email=\"smithnick@google.com\",\ndescription=\"pasta is an AST-based Python refactoring library\",\nlicense=\"Apache 2.0\",\nkeywords=\"python refactoring ast\",\nurl=\"https:\/\/github.com\/google\/pasta\",\ntest_suite='setup.all_tests',\nclassifiers=[\n\"Development Status :: 2 - Pre-Alpha\",\n\"License :: OSI Approved :: Apache Software License\",\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n],\ninstall_requires=[\n'six',\n],\n)\n"
    },
    {
        "package_name": "googletrans-3.0.0",
        "file_list": "client.py constants.py gtoken.py models.py urls.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py translate",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nimport os.path\nimport re\n\nfrom setuptools import setup, find_packages\n\n\ndef get_file(*paths):\npath = os.path.join(*paths)\ntry:\nwith open(path, 'rb') as f:\nreturn f.read().decode('utf8')\nexcept IOError:\npass\n\n\ndef get_version():\ninit_py = get_file(os.path.dirname(__file__), 'googletrans', '__init__.py')\npattern = r\"{0}\\W*=\\W*'([^']+)'\".format('__version__')\nversion, = re.findall(pattern, init_py)\nreturn version\n\n\ndef get_description():\ninit_py = get_file(os.path.dirname(__file__), 'googletrans', '__init__.py')\npattern = r'\"\"\"(.*?)\"\"\"'\ndescription, = re.findall(pattern, init_py, re.DOTALL)\nreturn description\n\n\ndef get_readme():\nreturn get_file(os.path.dirname(__file__), 'README.rst')\n\n\ndef install():\nsetup(\nname='googletrans',\nversion=get_version(),\ndescription=get_description(),\nlong_description=get_readme(),\nlicense='MIT',\nauthor='SuHun Han',\nauthor_email='ssut' '@' 'ssut.me',\nurl='https:\/\/github.com\/ssut\/py-googletrans',\nclassifiers=['Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Education',\n'Intended Audience :: End Users\/Desktop',\n'License :: Freeware',\n'Operating System :: POSIX',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: MacOS :: MacOS X',\n'Topic :: Education',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8'],\npackages=find_packages(exclude=['docs', 'tests']),\nkeywords='google translate translator',\ninstall_requires=[\n'httpx==0.13.3',\n],\ntests_require=[\n'pytest',\n'coveralls',\n],\nscripts=['translate']\n)\n\n\nif __name__ == \"__main__\":\ninstall()\n"
    },
    {
        "package_name": "gpustat-0.6.0",
        "file_list": "core.py test_gpustat.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.md screenshot.png setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport re\nfrom setuptools import setup, Command\n\n__PATH__ = os.path.abspath(os.path.dirname(__file__))\nIS_PY_2 = (sys.version_info[0] <= 2)\n\n\ndef read_readme():\nwith open('README.md') as f:\nreturn f.read()\n\n\ndef read_version():\n# importing gpustat causes an ImportError :-)\n__PATH__ = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(__PATH__, 'gpustat\/__init__.py')) as f:\nversion_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\nf.read(), re.M)\nif version_match:\nreturn version_match.group(1)\nraise RuntimeError(\"Unable to find __version__ string\")\n\n\n__version__ = read_version()\n\n\n# brought from https:\/\/github.com\/kennethreitz\/setup.py\nclass DeployCommand(Command):\ndescription = 'Build and deploy the package to PyPI.'\nuser_options = []\n\ndef initialize_options(self): pass\ndef finalize_options(self): pass\n\n@staticmethod\ndef status(s):\nprint(s)\n\ndef run(self):\nimport twine # we require twine locally # noqa\n\nassert 'dev' not in __version__, (\n\"Only non-devel versions are allowed. \"\n\"__version__ == {}\".format(__version__))\n\nwith os.popen(\"git status --short\") as fp:\ngit_status = fp.read().strip()\nif git_status:\nprint(\"Error: git repository is not clean.\\n\")\nos.system(\"git status --short\")\nsys.exit(1)\n\ntry:\nfrom shutil import rmtree\nself.status('Removing previous builds ...')\nrmtree(os.path.join(__PATH__, 'dist'))\nexcept OSError:\npass\n\nself.status('Building Source and Wheel (universal) distribution ...')\nos.system('{0} setup.py sdist'.format(sys.executable))\n\nself.status('Uploading the package to PyPI via Twine ...')\nret = os.system('twine upload dist\/*')\nif ret != 0:\nsys.exit(ret)\n\nself.status('Creating git tags ...')\nos.system('git tag v{0}'.format(__version__))\nos.system('git tag --list')\nsys.exit()\n\n\ninstall_requires = [\n'six>=1.7',\n'nvidia-ml-py>=7.352.0' if IS_PY_2 else 'nvidia-ml-py3>=7.352.0',\n'psutil',\n'blessings>=1.6',\n]\n\ntests_requires = [\n'mock>=2.0.0',\n'pytest<5.0',\n]\n\nsetup(\nname='gpustat',\nversion=__version__,\nlicense='MIT',\ndescription='An utility to monitor NVIDIA GPU status and usage',\nlong_description=read_readme(),\nlong_description_content_type='text\/markdown',\nurl='https:\/\/github.com\/wookayin\/gpustat',\nauthor='Jongwook Choi',\nauthor_email='wookayin@gmail.com',\nkeywords='nvidia-smi gpu cuda monitoring gpustat',\nclassifiers=[\n# https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n'Development Status :: 3 - Alpha',\n'License :: OSI Approved :: MIT License',\n'Operating System :: POSIX :: Linux',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Topic :: System :: Monitoring',\n],\npackages=['gpustat'],\ninstall_requires=install_requires,\nextras_require={'test': tests_requires},\nsetup_requires=['pytest-runner'],\ntests_require=tests_requires,\nentry_points={\n'console_scripts': ['gpustat=gpustat:main'],\n},\ncmdclass={\n'deploy': DeployCommand,\n},\ninclude_package_data=True,\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "GPy-1.10.0",
        "file_list": "AUTHORS.txt conf.py index.rst tuto_creating_new_kernels.rst tuto_creating_new_models.rst tuto_parameterized.rst tuto_plotting.rst gp.py gp_grid.py mapping.py model.py param.py parameterized.py priorizable.py priors.py transformations.py variational.py __init__.py sparse_gp.py sparse_gp_mpi.py svgp.py symbolic.py __init__.py defaults.cfg classification.py dimensionality_reduction.py non_gaussian.py regression.py state_space.py __init__.py dtc.py exact_gaussian_inference.py exact_studentt_inference.py expectation_propagation.py fitc.py gaussian_grid_inference.py grid_posterior.py inferenceX.py laplace.py pep.py posterior.py svgp.py vardtc_md.py vardtc_svi_multiout.py vardtc_svi_multiout_miss.py var_dtc.py var_dtc_parallel.py var_gauss.py __init__.py hmc.py samplers.py __init__.py stochastics.py __init__.py __init__.py installation.cfg add.py basis_funcs.py brownian.py coregionalize.py coregionalize_cython.c coregionalize_cython.pyx diff_kern.py eq_ode1.py eq_ode2.py grid_kerns.py independent_outputs.py integral.py integral_limits.py kern.py kernel_slice_operations.py linear.py mlp.py multidimensional_integral_limits.py multioutput_derivative_kern.py multioutput_kern.py ODE_st.py ODE_t.py ODE_UY.py ODE_UYC.py periodic.py poly.py prod.py gaussherm.py linear_psi_comp.py rbf_psi_comp.py rbf_psi_gpucomp.py sslinear_psi_comp.py ssrbf_psi_comp.py ssrbf_psi_gpucomp.py __init__.py rbf.py sde_brownian.py sde_linear.py sde_matern.py sde_standard_periodic.py sde_static.py sde_stationary.py spline.py splitKern.py standard_periodic.py static.py stationary.py stationary_cython.c stationary_cython.pyx stationary_utils.c stationary_utils.h symbolic.py symmetric.py sympy_helpers.h odekern1.c trunclinear.py __init__.py __init__.py bernoulli.py binomial.py exponential.py gamma.py gaussian.py likelihood.py link_functions.py loggaussian.py loglogistic.py mixed_noise.py multioutput_likelihood.py poisson.py student_t.py weibull.py __init__.py additive.py compound.py constant.py identity.py kernel.py linear.py mlp.py mlpext.py piecewise_linear.py __init__.py bayesian_gplvm.py bayesian_gplvm_minibatch.py bcgplvm.py dpgplvm.py gplvm.py gp_classification.py gp_coregionalized_regression.py gp_grid_regression.py gp_heteroscedastic_regression.py gp_kronecker_gaussian_regression.py gp_multiout_regression.py gp_multiout_regression_md.py gp_offset_regression.py gp_regression.py gp_var_gauss.py gradient_checker.py ibp_lfm.py input_warped_gp.py mrd.py multioutput_gp.py one_vs_all_classification.py one_vs_all_sparse_classification.py sparse_gplvm.py sparse_gp_classification.py sparse_gp_coregionalized_regression.py sparse_gp_minibatch.py sparse_gp_regression.py sparse_gp_regression_md.py ss_gplvm.py ss_mrd.py state_space.py state_space_cython.c state_space_cython.pyx state_space_main.py state_space_model.py state_space_setup.py tp_regression.py warped_gp.py __init__.py abstract_plotting_library.py data_plots.py gp_plots.py inference_plots.py kernel_plots.py latent_plots.py plot_util.py __init__.py base_plots.py axis_event_controller.py imshow_controller.py __init__.py defaults.py img_plots.py mapping_plots.py maps.py plot_definitions.py priors_plots.py ssgplvm.py svig_plots.py util.py variational_plots.py visualize.py __init__.py defaults.py plot_definitions.py __init__.py Tango.py __init__.py cython_tests.py ep_likelihood_tests.py examples_tests.py fitc.py gpy_kernels_state_space_tests.py gp_tests.py grid_tests.py inference_tests.py kernel_tests.py likelihood_tests.py linalg_test.py link_function_tests.py mapping_tests.py meanfunc_tests.py minibatch_tests.py misc_tests.py model_tests.py mpi_tests.py pep_tests.py pickle_tests.py plotting_tests.py prior_tests.py quadrature_tests.py rv_transformation_tests.py serialization_tests.py state_space_main_tests.py svgp_tests.py tp_tests.py util_tests.py variational_tests.py __init__.py block_matrices.py choleskies.py choleskies_cython.c choleskies_cython.pyx classification.py cluster_with_offset.py config.py datasets.py data_resources.json debug.py decorators.py diag.py football_teams.json functions.py gpu_init.py initialization.py input_warping_functions.py linalg.py linalg_cython.c linalg_cython.pyx linalg_gpu.py ln_diff_erfs.py misc.py mocap.py multioutput.py netpbmfile.py normalizer.py parallel.py pca.py quad_integrate.py squashers.py subarray_and_sorting.py univariate_Gaussian.py warping_functions.py __init__.py __init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n#===============================================================================\n# Copyright (c) 2012 - 2014, GPy authors (see AUTHORS.txt).\n# Copyright (c) 2014, James Hensman, Max Zwiessele\n# Copyright (c) 2015, Max Zwiessele\n#\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# * Redistributions of source code must retain the above copyright notice, this\n# list of conditions and the following disclaimer.\n#\n# * Redistributions in binary form must reproduce the above copyright notice,\n# this list of conditions and the following disclaimer in the documentation\n# and\/or other materials provided with the distribution.\n#\n# * Neither the name of GPy nor the names of its\n# contributors may be used to endorse or promote products derived from\n# this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#===============================================================================\n\nfrom __future__ import print_function\nimport os\nimport sys\nfrom setuptools import setup, Extension\nimport codecs\n\ntry:\nModuleNotFoundError\nexcept NameError:\nModuleNotFoundError = ImportError\n\ndef read(fname):\nwith codecs.open(fname, 'r', 'latin') as f:\nreturn f.read()\n\ndef read_to_rst(fname):\ntry:\nimport pypandoc\nrstname = \"{}.{}\".format(os.path.splitext(fname)[0], 'rst')\npypandoc.convert(read(fname), 'rst', format='md', outputfile=rstname)\nwith open(rstname, 'r') as f:\nrststr = f.read()\nreturn rststr\n#return read(rstname)\nexcept ImportError:\nreturn read(fname)\n\ndesc = \"\"\"\n\nPlease refer to the github homepage for detailed instructions on installation and usage.\n\n\"\"\"\n\nversion_dummy = {}\nexec(read('GPy\/__version__.py'), version_dummy)\n__version__ = version_dummy['__version__']\ndel version_dummy\n\n#Mac OS X Clang doesn't support OpenMP at the current time.\n#This detects if we are building on a Mac\ndef ismac():\nreturn sys.platform[:6] == 'darwin'\n\nif ismac():\ncompile_flags = [ '-O3', ]\nlink_args = []\nelse:\ncompile_flags = [ '-fopenmp', '-O3']\nlink_args = ['-lgomp' ]\n\ntry:\n# So that we don't need numpy installed to determine it's a dependency.\nimport numpy as np\n\next_mods = [Extension(name='GPy.kern.src.stationary_cython',\nsources=['GPy\/kern\/src\/stationary_cython.pyx',\n'GPy\/kern\/src\/stationary_utils.c'],\ninclude_dirs=[np.get_include(), '.'],\nextra_compile_args=compile_flags,\nextra_link_args=link_args),\nExtension(name='GPy.util.choleskies_cython',\nsources=['GPy\/util\/choleskies_cython.pyx'],\ninclude_dirs=[np.get_include(), '.'],\nextra_link_args=link_args,\nextra_compile_args=compile_flags),\nExtension(name='GPy.util.linalg_cython',\nsources=['GPy\/util\/linalg_cython.pyx'],\ninclude_dirs=[np.get_include(), '.'],\nextra_compile_args=compile_flags,\nextra_link_args=link_args),\nExtension(name='GPy.kern.src.coregionalize_cython',\nsources=['GPy\/kern\/src\/coregionalize_cython.pyx'],\ninclude_dirs=[np.get_include(), '.'],\nextra_compile_args=compile_flags,\nextra_link_args=link_args),\nExtension(name='GPy.models.state_space_cython',\nsources=['GPy\/models\/state_space_cython.pyx'],\ninclude_dirs=[np.get_include(), '.'],\nextra_compile_args=compile_flags,\nextra_link_args=link_args)]\nexcept ModuleNotFoundError:\next_mods = []\n\ninstall_requirements = ['numpy>=1.7', 'six', 'paramz>=0.9.0', 'cython>=0.29']\nif sys.version_info < (3, 6):\ninstall_requirements += ['scipy>=1.3.0,<1.5.0']\nelse:\ninstall_requirements += ['scipy>=1.3.0']\n\nsetup(name = 'GPy',\nversion = __version__,\nauthor = read_to_rst('AUTHORS.txt'),\nauthor_email = \"gpy.authors@gmail.com\",\ndescription = (\"The Gaussian Process Toolbox\"),\nlong_description = desc,\nlicense = \"BSD 3-clause\",\nkeywords = \"machine-learning gaussian-processes kernels\",\nurl = \"http:\/\/sheffieldml.github.com\/GPy\/\",\ndownload_url='https:\/\/github.com\/SheffieldML\/GPy\/',\next_modules = ext_mods,\npackages = [\"GPy\",\n\"GPy.core\",\n\"GPy.core.parameterization\",\n\"GPy.kern\",\n\"GPy.kern.src\",\n\"GPy.kern.src.psi_comp\",\n\"GPy.models\",\n\"GPy.inference\",\n\"GPy.inference.optimization\",\n\"GPy.inference.mcmc\",\n\"GPy.inference.latent_function_inference\",\n\"GPy.likelihoods\",\n\"GPy.mappings\",\n\"GPy.examples\",\n\"GPy.testing\",\n\"GPy.util\",\n\"GPy.plotting\",\n\"GPy.plotting.gpy_plot\",\n\"GPy.plotting.matplot_dep\",\n\"GPy.plotting.matplot_dep.controllers\",\n\"GPy.plotting.plotly_dep\",\n],\npackage_dir={'GPy': 'GPy'},\n#package_data = {'GPy': ['defaults.cfg', 'installation.cfg',\n# 'util\/data_resources.json',\n# 'util\/football_teams.json',\n# 'testing\/plotting_tests\/baseline\/*.png'\n# ]},\n#data_files=[('GPy\/testing\/plotting_tests\/baseline', 'testing\/plotting_tests\/baseline\/*.png'),\n# ('GPy\/testing\/', 'GPy\/testing\/pickle_test.pickle'),\n# ],\ninclude_package_data = True,\npy_modules = ['GPy.__init__'],\ntest_suite = 'GPy.testing',\nsetup_requires = ['numpy>=1.7'],\ninstall_requires = install_requirements,\nextras_require = {'docs':['sphinx'],\n'optional':['mpi4py',\n'ipython>=4.0.0',\n],\n'plotting':['matplotlib >= 3.0',\n'plotly >= 1.8.6'],\n'notebook':['jupyter_client >= 4.0.6',\n'ipywidgets >= 4.0.3',\n'ipykernel >= 4.1.0',\n'notebook >= 4.0.5',\n],\n},\nclassifiers=['License :: OSI Approved :: BSD License',\n'Natural Language :: English',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: POSIX :: Linux',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Framework :: IPython',\n'Intended Audience :: Science\/Research',\n'Intended Audience :: Developers',\n'Topic :: Software Development',\n'Topic :: Software Development :: Libraries :: Python Modules',\n\n]\n)\n\n\n# Check config files and settings:\nlocal_file = os.path.abspath(os.path.join(os.path.dirname(__file__), 'GPy', 'installation.cfg'))\nhome = os.getenv('HOME') or os.getenv('USERPROFILE')\nuser_file = os.path.join(home,'.config', 'GPy', 'user.cfg')\n\nprint(\"\")\ntry:\nif not os.path.exists(user_file):\n# Does an old config exist?\nold_user_file = os.path.join(home,'.gpy_user.cfg')\nif os.path.exists(old_user_file):\n# Move it to new location:\nprint(\"GPy: Found old config file, moving to new location {}\".format(user_file))\nif not os.path.exists(os.path.dirname(user_file)):\nos.makedirs(os.path.dirname(user_file))\nos.rename(old_user_file, user_file)\nelse:\n# No config file exists, save informative stub to user config folder:\nprint(\"GPy: Saving user configuration file to {}\".format(user_file))\nif not os.path.exists(os.path.dirname(user_file)):\nos.makedirs(os.path.dirname(user_file))\nwith open(user_file, 'w') as f:\nwith open(local_file, 'r') as l:\ntmp = l.read()\nf.write(tmp)\nelse:\nprint(\"GPy: User configuration file at location {}\".format(user_file))\nexcept:\nprint(\"GPy: Could not write user configuration file {}\".format(user_file))\n"
    },
    {
        "package_name": "gpytorch-1.8.1",
        "file_list": "beta_features.py constraints.py __init__.py delta.py distribution.py multitask_multivariate_normal.py multivariate_normal.py __init__.py matern_covariance.py rbf_covariance.py _diagonalization.py _dsmm.py _inv_matmul.py _inv_quad.py _inv_quad_logdet.py _log_normal_cdf.py _matmul.py _pivoted_cholesky.py _root_decomposition.py _sqrt_inv_matmul.py __init__.py additive_structure_kernel.py arc_kernel.py cosine_kernel.py cylindrical_kernel.py distributional_input_kernel.py gaussian_symmetrized_kl_kernel.py grid_interpolation_kernel.py grid_kernel.py index_kernel.py inducing_point_kernel.py keops_kernel.py matern_kernel.py rbf_kernel.py __init__.py kernel.py lcm_kernel.py linear_kernel.py matern_kernel.py multitask_kernel.py multi_device_kernel.py newton_girard_additive_kernel.py periodic_kernel.py piecewise_polynomial_kernel.py polynomial_kernel.py polynomial_kernel_grad.py product_structure_kernel.py rbf_kernel.py rbf_kernel_grad.py rff_kernel.py rq_kernel.py scale_kernel.py spectral_delta_kernel.py spectral_mixture_kernel.py __init__.py added_diag_lazy_tensor.py batch_repeat_lazy_tensor.py block_diag_lazy_tensor.py block_interleaved_lazy_tensor.py block_lazy_tensor.py cat_lazy_tensor.py chol_lazy_tensor.py constant_mul_lazy_tensor.py diag_lazy_tensor.py identity_lazy_tensor.py interpolated_lazy_tensor.py keops_lazy_tensor.py kronecker_product_added_diag_lazy_tensor.py kronecker_product_lazy_tensor.py lazy_evaluated_kernel_tensor.py lazy_tensor.py lazy_tensor_representation_tree.py low_rank_root_added_diag_lazy_tensor.py low_rank_root_lazy_tensor.py matmul_lazy_tensor.py mul_lazy_tensor.py non_lazy_tensor.py psd_sum_lazy_tensor.py root_lazy_tensor.py sum_batch_lazy_tensor.py sum_kronecker_lazy_tensor.py sum_lazy_tensor.py toeplitz_lazy_tensor.py triangular_lazy_tensor.py zero_lazy_tensor.py __init__.py bernoulli_likelihood.py beta_likelihood.py gaussian_likelihood.py laplace_likelihood.py likelihood.py likelihood_list.py multitask_gaussian_likelihood.py noise_models.py softmax_likelihood.py student_t_likelihood.py __init__.py constant_mean.py constant_mean_grad.py linear_mean.py mean.py multitask_mean.py zero_mean.py __init__.py metrics.py __init__.py added_loss_term.py deep_approximate_mll.py deep_predictive_log_likelihood.py exact_marginal_log_likelihood.py gamma_robust_variational_elbo.py inducing_point_kernel_added_loss_term.py kl_gaussian_added_loss_term.py leave_one_out_pseudo_likelihood.py marginal_log_likelihood.py noise_model_added_loss_term.py predictive_log_likelihood.py sum_marginal_log_likelihood.py variational_elbo.py _approximate_mll.py __init__.py approximate_gp.py deep_gp.py dspp.py __init__.py exact_gp.py exact_prediction_strategies.py gp.py bayesian_gplvm.py latent_variable.py __init__.py model_list.py pyro_gp.py _pyro_mixin.py __init__.py __init__.py module.py ngd.py __init__.py horseshoe_prior.py lkj_prior.py prior.py smoothed_box_prior.py torch_priors.py utils.py wishart_prior.py __init__.py settings.py base_kernel_test_case.py base_likelihood_test_case.py base_mean_test_case.py base_test_case.py lazy_tensor_test_case.py model_test_case.py utils.py variational_test_case.py __init__.py broadcasting.py cholesky.py contour_integral_quad.py deprecation.py errors.py getitem.py grid.py interpolation.py lanczos.py linear_cg.py memoize.py minres.py nearest_neighbors.py permutation.py pinverse.py qr.py quadrature.py sparse.py stochastic_lq.py toeplitz.py transforms.py warnings.py __init__.py additive_grid_interpolation_variational_strategy.py batch_decoupled_variational_strategy.py cholesky_variational_distribution.py ciq_variational_strategy.py delta_variational_distribution.py grid_interpolation_variational_strategy.py independent_multitask_variational_strategy.py lmc_variational_strategy.py mean_field_variational_distribution.py natural_variational_distribution.py nearest_neighbor_variational_strategy.py orthogonally_decoupled_variational_strategy.py tril_natural_variational_distribution.py unwhitened_variational_strategy.py variational_strategy.py _variational_distribution.py _variational_strategy.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py test_module.py test_settings.py",
        "setup.py": "#!\/usr\/bin\/env python3\n\nimport io\nimport os\nimport re\n\nfrom setuptools import find_packages, setup\n\n\n# Get version\ndef read(*names, **kwargs):\nwith io.open(os.path.join(os.path.dirname(__file__), *names), encoding=kwargs.get(\"encoding\", \"utf8\")) as fp:\nreturn fp.read()\n\n\ndef find_version(*file_paths):\nversion_file = read(*file_paths)\nversion_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", version_file, re.M)\nif version_match:\nreturn version_match.group(1)\nraise RuntimeError(\"Unable to find version string.\")\n\n\nreadme = open(\"README.md\").read()\nversion = find_version(\"gpytorch\", \"__init__.py\")\n\n\ntorch_min = \"1.10\"\ninstall_requires = [\">=\".join([\"torch\", torch_min])]\n# if recent dev version of PyTorch is installed, no need to install stable\ntry:\nimport torch\n\nif torch.__version__ >= torch_min:\ninstall_requires = []\nexcept ImportError:\npass\ninstall_requires += [\"numpy\", \"scikit-learn\", \"scipy\"]\n\n\n# Run the setup\nsetup(\nname=\"gpytorch\",\nversion=version,\ndescription=\"An implementation of Gaussian Processes in Pytorch\",\nlong_description=readme,\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Jake Gardner, Geoff Pleiss\",\nurl=\"https:\/\/gpytorch.ai\",\nauthor_email=\"jrg365@cornell.edu, gpleiss@gmail.com\",\nproject_urls={\n\"Documentation\": \"https:\/\/gpytorch.readthedocs.io\",\n\"Source\": \"https:\/\/github.com\/cornellius-gp\/gpytorch\/\",\n},\nlicense=\"MIT\",\nclassifiers=[\"Development Status :: 4 - Beta\", \"Programming Language :: Python :: 3\"],\npackages=find_packages(exclude=[\"test\", \"test.*\"]),\npython_requires=\">=3.7\",\ninstall_requires=install_requires,\nextras_require={\n\"dev\": [\"black\", \"twine\", \"pre-commit\"],\n\"examples\": [\"ipython\", \"jupyter\", \"matplotlib\", \"scipy\", \"torchvision\", \"tqdm\"],\n\"pyro\": [\"pyro-ppl>=1.8\"],\n\"keops\": [\"pykeops>=1.1.1\"],\n\"test\": [\"flake8==4.0.1\", \"flake8-print==4.0.0\", \"pytest\", \"nbval\"],\n},\ntest_suite=\"test\",\n)\n"
    },
    {
        "package_name": "grapheme-0.6.0",
        "file_list": "api.py api.c finder.c grapheme_property_group.c grapheme_break_property.json finder.py grapheme_property_group.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "from codecs import open as codecs_open\nfrom setuptools import setup, find_packages\n\n\n# Get the long description from the relevant file\nwith codecs_open('README.rst', encoding='utf-8') as f:\nlong_description = f.read()\n\n\nsetup(name='grapheme',\nversion='0.6.0',\ndescription=u\"Unicode grapheme helpers\",\nlong_description=long_description,\nkeywords='',\nauthor=u\"Alvin Lindstam\",\nauthor_email='alvin.lindstam@gmail.com',\nurl='https:\/\/github.com\/alvinlindstam\/grapheme',\nlicense='MIT',\npackages=find_packages(exclude=['ez_setup', 'examples', 'tests']),\ninclude_package_data=True,\nzip_safe=False,\ninstall_requires=[],\nextras_require={\n'test': ['pytest', 'sphinx', 'sphinx-autobuild', 'wheel', 'twine']\n},\nclassifiers=[\n'Development Status :: 3 - Alpha',\n'Intended Audience :: Developers',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n],\n)\n"
    },
    {
        "package_name": "graphql-core-3.2.1",
        "file_list": ".bumpversion.cfg .coveragerc .editorconfig .flake8 .mypy.ini .readthedocs.yaml CODEOWNERS conf.py diffs.rst index.rst intro.rst make.bat Makefile error.rst execution.rst graphql.rst language.rst pyutils.rst type.rst utilities.rst validation.rst requirements.txt extension.rst index.rst introspection.rst methods.rst other.rst parser.rst queries.rst resolvers.rst schema.rst sdl.rst validator.rst LICENSE MANIFEST.in PKG-INFO poetry.lock pyproject.toml README.md setup.cfg setup.py graphql_error.py located_error.py syntax_error.py __init__.py collect_fields.py execute.py map_async_iterator.py middleware.py subscribe.py values.py __init__.py graphql.py ast.py block_string.py character_classes.py directive_locations.py lexer.py location.py parser.py predicates.py printer.py print_location.py print_string.py source.py token_kind.py visitor.py __init__.py py.typed awaitable_or_value.py cached_property.py convert_case.py description.py did_you_mean.py frozen_dict.py frozen_error.py frozen_list.py group_by.py identity_func.py inspect.py is_awaitable.py is_iterable.py merge_kwargs.py natural_compare.py path.py print_path_list.py simple_pub_sub.py suggestion_list.py undefined.py __init__.py __init__.py assert_name.py definition.py directives.py introspection.py scalars.py schema.py validate.py __init__.py assert_valid_name.py ast_from_value.py ast_to_dict.py build_ast_schema.py build_client_schema.py coerce_input_value.py concat_ast.py extend_schema.py find_breaking_changes.py get_introspection_query.py get_operation_ast.py get_operation_root_type.py introspection_from_schema.py lexicographic_sort_schema.py print_schema.py separate_operations.py sort_value_node.py strip_ignored_characters.py type_comparators.py type_from_ast.py type_info.py value_from_ast.py value_from_ast_untyped.py __init__.py no_deprecated.py no_schema_introspection.py __init__.py executable_definitions.py fields_on_correct_type.py fragments_on_composite_types.py known_argument_names.py known_directives.py known_fragment_names.py known_type_names.py lone_anonymous_operation.py lone_schema_definition.py no_fragment_cycles.py no_undefined_variables.py no_unused_fragments.py no_unused_variables.py overlapping_fields_can_be_merged.py possible_fragment_spreads.py possible_type_extensions.py provided_required_arguments.py scalar_leafs.py single_field_subscriptions.py unique_argument_definition_names.py unique_argument_names.py unique_directives_per_location.py unique_directive_names.py unique_enum_value_names.py unique_field_definition_names.py unique_fragment_names.py unique_input_field_names.py unique_operation_names.py unique_operation_types.py unique_type_names.py unique_variable_names.py values_of_correct_type.py variables_are_input_types.py variables_in_allowed_position.py __init__.py specified_rules.py validate.py validation_context.py __init__.py version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt test_build_ast_schema.py test_build_client_schema.py test_execution_async.py test_execution_sync.py test_introspection_from_schema.py test_parser.py test_validate_gql.py test_validate_invalid_gql.py test_validate_sdl.py test_visit.py __init__.py conftest.py test_graphql_error.py test_located_error.py test_print_location.py __init__.py test_abstract.py test_customize.py test_directives.py test_execution_result.py test_executor.py test_lists.py test_map_async_iterator.py test_middleware.py test_mutations.py test_nonnull.py test_parallel.py test_resolve.py test_schema.py test_subscribe.py test_sync.py test_union_interface.py test_variables.py __init__.py github_schema.graphql github_schema.json kitchen_sink.graphql schema_kitchen_sink.graphql __init__.py test_ast.py test_block_string.py test_block_string_fuzz.py test_character_classes.py test_lexer.py test_location.py test_parser.py test_predicates.py test_printer.py test_print_string.py test_schema_parser.py test_schema_printer.py test_source.py test_visitor.py __init__.py test_cached_property.py test_convert_case.py test_description.py test_did_you_mean.py test_frozen_dict.py test_frozen_error.py test_frozen_list.py test_group_by.py test_identity_func.py test_inspect.py test_is_awaitable.py test_is_iterable.py test_merge_kwargs.py test_natural_compare.py test_path.py test_print_path_list.py test_simple_pub_sub.py test_suggestion_list.py test_undefined.py __init__.py star_wars_data.py star_wars_schema.py test_docs.py test_star_wars_introspection.py test_star_wars_query.py test_star_wars_validation.py test_user_registry.py test_version.py test_assert_name.py test_custom_scalars.py test_definition.py test_directives.py test_enum.py test_extensions.py test_introspection.py test_predicate.py test_scalars.py test_schema.py test_validation.py __init__.py test_ast_from_value.py test_ast_to_dict.py test_build_ast_schema.py test_build_client_schema.py test_coerce_input_value.py test_concat_ast.py test_extend_schema.py test_find_breaking_changes.py test_get_introspection_query.py test_get_operation_ast.py test_get_operation_root_type.py test_introspection_from_schema.py test_lexicographic_sort_schema.py test_print_schema.py test_separate_operations.py test_sort_value_node.py test_strip_ignored_characters.py test_strip_ignored_characters_fuzz.py test_type_comparators.py test_type_from_ast.py test_type_info.py test_value_from_ast.py test_value_from_ast_untyped.py __init__.py dedent.py gen_fuzz_strings.py test_dedent.py test_gen_fuzz_strings.py __init__.py harness.py test_executable_definitions.py test_fields_on_correct_type.py test_fragments_on_composite_types.py test_known_argument_names.py test_known_directives.py test_known_fragment_names.py test_known_type_names.py test_lone_anonymous_operation.py test_lone_schema_definition.py test_no_deprecated.py test_no_fragment_cycles.py test_no_schema_introspection.py test_no_undefined_variables.py test_no_unused_fragments.py test_no_unused_variables.py test_overlapping_fields_can_be_merged.py test_possible_fragment_spreads.py test_possible_type_extensions.py test_provided_required_arguments.py test_scalar_leafs.py test_single_field_subscriptions.py test_unique_argument_definition_names.py test_unique_argument_names.py test_unique_directives_per_location.py test_unique_directive_names.py test_unique_enum_value_names.py test_unique_field_definition_names.py test_unique_fragment_names.py test_unique_input_field_names.py test_unique_operation_names.py test_unique_operation_types.py test_unique_type_names.py test_unique_variable_names.py test_validation.py test_values_of_correct_type.py test_variables_are_input_types.py test_variables_in_allowed_position.py __init__.py __init__.py tox.ini",
        "setup.py": "from re import search\nfrom setuptools import setup, find_packages\n\nwith open(\"src\/graphql\/version.py\") as version_file:\nversion = search('version = \"(.*)\"', version_file.read()).group(1)\n\nwith open(\"README.md\") as readme_file:\nreadme = readme_file.read()\n\nsetup(\nname=\"graphql-core\",\nversion=version,\ndescription=\"GraphQL implementation for Python, a port of GraphQL.js,\"\n\" the JavaScript reference implementation for GraphQL.\",\nlong_description=readme,\nlong_description_content_type=\"text\/markdown\",\nkeywords=\"graphql\",\nurl=\"https:\/\/github.com\/graphql-python\/graphql-core\",\nauthor=\"Christoph Zwerschke\",\nauthor_email=\"cito@online.de\",\nlicense=\"MIT license\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Topic :: Software Development :: Libraries\",\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\ninstall_requires=[],\npython_requires=\">=3.6,<4\",\npackages=find_packages(\"src\"),\npackage_dir={\"\": \"src\"},\n# PEP-561: https:\/\/www.python.org\/dev\/peps\/pep-0561\/\npackage_data={\"graphql\": [\"py.typed\"]},\ninclude_package_data=True,\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "great_expectations-0.15.18",
        "file_list": "constraints-dev.txt actions.py checkpoint.py configurator.py checkpoint_result.py __init__.py util.py __init__.py batch_request.py build_docs.py checkpoint.py checkpoint_script_template.py cli.py cli_logging.py cli_messages.py datasource.py docs.py init.py mark.py pretty_printing.py project.py python_subprocess.py store.py suite.py toolkit.py base_upgrade_helper.py upgrade_helper_v11.py upgrade_helper_v13.py __init__.py util.py checkpoint.py checkpoint_script_template.py cli.py cli_logging.py cli_messages.py datasource.py docs.py init.py mark.py project.py python_subprocess.py store.py suite.py toolkit.py base_upgrade_helper.py upgrade_helper_v11.py upgrade_helper_v13.py __init__.py util.py validation_operator.py __init__.py validation_operator.py __init__.py async_executor.py batch.py batch_spec.py configuration.py config_peer.py data_context_key.py evaluation_parameters.py expectation_configuration.py expectation_diagnostics.p expectation_test_data_cas supporting_types.py __init__.py expectation_suite.py expectation_validation_result.py id_dict.py metric.py metric_domain_types.py profiler_types_mapping.py run_identifier.py urn.py action_anonymizer.py anonymizer.py base.py batch_anonymizer.py batch_request_anonym checkpoint_anonymize datasource_anonymize data_connector_anony data_docs_anonymizer expectation_anonymiz profiler_anonymizer. store_anonymizer.py store_backend_anonym base.py __init__.py validation_operator_ __init__.py events.py execution_environment.py package_dependencies.py schemas.py usage_statistics.py util.py __init__.py util.py yaml_handler.py __init__.py dataset.py pandas_dataset.py sparkdf_dataset.py sqlalchemy_dataset.py util.py __init__.py batch_kwargs_generat databricks_batch_kwa glob_reader_batch_kw manual_batch_kwargs_ query_batch_kwargs_g s3_batch_kwargs_gene s3_subdir_reader_bat subdir_reader_batch_ table_batch_kwargs_g __init__.py datasource.py asset.py __init__.py batch_filter.py configured_asset_azure_data_ configured_asset_dbfs_data_c configured_asset_filesystem_ configured_asset_file_path_d configured_asset_gcs_data_co configured_asset_s3_data_con configured_asset_sql_data_co data_connector.py file_path_data_connector.py inferred_asset_azure_data_co inferred_asset_dbfs_data_con inferred_asset_filesystem_da inferred_asset_file_path_dat inferred_asset_gcs_data_conn inferred_asset_s3_data_conne inferred_asset_sql_data_conn runtime_data_connector.py custom_list_sorter.py date_time_sorter.py lexicographic_sorter. numeric_sorter.py sorter.py __init__.py util.py __init__.py new_datasource.py pandas_datasource.py simple_sqlalchemy_datasource.py sparkdf_datasource.py sqlalchemy_datasource.py batch_kwargs.py reader_methods.py __init__.py __init__.py data_asset.py file_data_asset.py util.py __init__.py abstract_data_context.py base_data_context.py cloud_data_context.py data_context.py ephemeral_data_context.py explorer_data_context.py file_data_context.py __init__.py data_context_variables.py checkpoint_store.py configuration_store.py database_store_backend.py datasource_store.py data_context_store.py expectations_store.py ge_cloud_store_backend.py html_site_store.py inline_store_backend.py in_memory_store_backend.py json_site_store.py metric_store.py profiler_store.py query_store.py store.py store_backend.py tuple_store_backend.py util.py validations_store.py _store_backend.py __init__.py templates.py base.py base_resource_identifiers.py refs.py resource_identifiers.py __init__.py util.py __init__.py exceptions.py __init__.py bundled_metric_configuration.py execution_engine.py pandas_batch_data.py pandas_execution_engine.py sparkdf_batch_data.py sparkdf_execution_engine.py data_sampler.py data_splitter.py pandas_data_sampler. pandas_data_splitter sparkdf_data_sampler sparkdf_data_splitte sqlalchemy_data_samp sqlalchemy_data_spli __init__.py sqlalchemy_batch_data.py sqlalchemy_dialect.py sqlalchemy_execution_engine.py util.py __init__.py expect_column_bootstrapped_ks_test_p expect_column_chisquare_test_p_value expect_column_distinct_values_to_be_ expect_column_distinct_values_to_con expect_column_distinct_values_to_equ expect_column_kl_divergence_to_be_le expect_column_max_to_be_between.py expect_column_mean_to_be_between.py expect_column_median_to_be_between.p expect_column_min_to_be_between.py expect_column_most_common_value_to_b expect_column_pair_cramers_phi_value expect_column_pair_values_a_to_be_gr expect_column_pair_values_to_be_equa expect_column_pair_values_to_be_in_s expect_column_parameterized_distribu expect_column_proportion_of_unique_v expect_column_quantile_values_to_be_ expect_column_stdev_to_be_between.py expect_column_sum_to_be_between.py expect_column_to_exist.py expect_column_unique_value_count_to_ expect_column_values_to_be_between.p expect_column_values_to_be_dateutil_ expect_column_values_to_be_decreasin expect_column_values_to_be_increasin expect_column_values_to_be_in_set.py expect_column_values_to_be_in_type_l expect_column_values_to_be_json_pars expect_column_values_to_be_null.py expect_column_values_to_be_of_type.p expect_column_values_to_be_unique.py expect_column_values_to_match_json_s expect_column_values_to_match_like_p expect_column_values_to_match_regex. expect_column_values_to_match_regex_ expect_column_values_to_match_strfti expect_column_values_to_not_be_in_se expect_column_values_to_not_be_null. expect_column_values_to_not_match_li expect_column_values_to_not_match_re expect_column_value_lengths_to_be_be expect_column_value_lengths_to_equal expect_column_value_z_scores_to_be_l expect_compound_columns_to_be_unique expect_multicolumn_sum_to_equal.py expect_multicolumn_values_to_be_uniq expect_select_column_values_to_be_un expect_table_columns_to_match_ordere expect_table_columns_to_match_set.py expect_table_column_count_to_be_betw expect_table_column_count_to_equal.p expect_table_row_count_to_be_between expect_table_row_count_to_equal.py expect_table_row_count_to_equal_othe __init__.py expectation.py column_aggregate_metric.py column_b column_d column_h column_m column_p column_q column_s column_v __init__ column_aggregate_metric_provider. column_values_ column_value_l __init__.py column_pa __init__. import_manager.py map_metric.py map_metric_provider.py meta_metric_provider.py metric_provider.py compound_ multicolu select_co __init__. query_column.py query_table.py __init__.py query_metric_provider.py table_metric.py table_columns.py table_column_count. table_column_types. table_head.py table_row_count.py __init__.py table_metric_provider.py util.py __init__.py regex_based_column_map_expectation.py registry.py row_conditions.py set_based_column_map_expectation.py util.py validation_handlers.py __init__.py expectation_explorer.py __init__.py base.py class_registry.py decorators.py error_store.py exceptions.py fields.py orderedset.py schema.py types.py utils.py validate.py warnings.py __init__.py base.py basic_dataset_profiler.py basic_suite_builder_profiler.py columns_exist.py json_schema_profiler.py metrics_utils.py multi_batch_validation_meta_analysis.py user_configurable_profiler.py __init__.py exceptions.py AUTHORING_INTRO.md column_expectation.p COLUMN_EXPECTATIONS. COLUMN_EXPECTATIONS_ FOOTER.md footer.py.j2 HEADER.md header.py.j2 table_expectation.py TABLE_EXPECTATIONS_H TABLE_EXPECTATIONS_N __init__.py __init__.py page_renderer_util.py call_to_action_renderer.py checkpoint_new_notebook_renderer.py column_section_renderer.py bullet_list_content_bloc content_block.py exception_list_content_b expectation_string.py profiling_column_propert validation_results_table __init__.py datasource_new_notebook_renderer.py email_renderer.py inline_renderer.py microsoft_teams_renderer.py notebook_renderer.py opsgenie_renderer.py page_renderer.py profiling_results_overview_section_ren renderer.py site_builder.py site_index_page_renderer.py slack_renderer.py suite_edit_notebook_renderer.py suite_scaffold_notebook_renderer.py suite_edit_notebook_renderer.py suite_profile_notebook_renderer.py __init__.py __init__.py util.py AUTHORING_INTRO.m COLUMN_EXPECTATIO FOOTER.md footer.py.j2 HEADER.md header.py.j2 TABLE_EXPECTATION __init__.py __init__.py __init__.py HKGrotesk-Bold.otf HKGrotesk-BoldItali HKGrotesk-Italic.ot HKGrotesk-Light.otf HKGrotesk-LightItal HKGrotesk-Medium.ot HKGrotesk-MediumIta HKGrotesk-Regular.o HKGrotesk-SemiBold. HKGrotesk-SemiBoldI favicon.ico glossary_scroller.gif iterative-dev-loop.png logo-long-vector.svg logo-long.png short-logo-vector.svg short-logo.png validation_failed_unexpected data_docs_custom_styles_temp data_docs_default_styles.css bootstrap_table.j2 bootstrap_table_js_functions.j2 bullet_list.j2 carousel_modal.j2 collapse.j2 component.j2 content_block_container.j2 content_block_header.j2 cta_footer.j2 edit_expectations_instructions_m favicon.j2 ge_info.j2 graph.j2 header.j2 index_page.j2 js_script_imports.j2 markdown.j2 markdown_bullet_list.j2 markdown_collapse.j2 markdown_component.j2 markdown_content_block_container markdown_content_block_header.j2 markdown_graph.j2 markdown_header.j2 markdown_markdown.j2 markdown_section.j2 markdown_string_template.j2 markdown_table.j2 markdown_text.j2 markdown_validation_results_page markdown_value_list.j2 page.j2 page_action_card.j2 page_minimal.j2 section.j2 sidebar.j2 string_template.j2 table.j2 table_of_contents.j2 tabs.j2 text.j2 top_navbar.j2 value_list.j2 view.py __init__.py __init__.py encodings.py themes.py __init__.py attributed_resolved_metrics.py builder.py base.py __init__.py data_assistant.py data_assistant_disp data_assistant_runn onboarding_data_ass volume_data_assista __init__.py data_assista onboarding_d plot_compone plot_result. volume_data_ __init__.py domain.py categorical_column_ column_domain_build column_pair_domain_ domain_builder.py map_metric_column_d multi_column_domain table_domain_builde __init__.py bootstrap_numeric_range exact_numeric_range_est kde_numeric_range_estim numeric_range_estimatio numeric_range_estimator oneshot_numeric_range_e __init__.py __init__.py _version.py __init__.py LICENSE MANIFEST.in PKG-INFO README.md",
        "setup.py": "import re\nfrom glob import glob\n\nimport pkg_resources\nfrom setuptools import find_packages, setup\n\nimport versioneer\n\n\ndef get_extras_require():\nresults = {}\nextra_key_mapping = {\n\"aws_secrets\": \"boto\",\n\"azure_secrets\": \"azure\",\n\"gcp\": \"bigquery\",\n\"s3\": \"boto\",\n}\nsqla_keys = (\n\"athena\",\n\"bigquery\",\n\"dremio\",\n\"mssql\",\n\"mysql\",\n\"postgresql\",\n\"redshift\",\n\"snowflake\",\n\"teradata\",\n\"trino\",\n)\nignore_keys = (\"sqlalchemy\", \"test\", \"test-pipeline\")\nrx_fname_part = re.compile(r\"requirements-dev-(.*).txt\")\nfor fname in sorted(glob(\"requirements-dev-*.txt\")):\nkey = rx_fname_part.match(fname).group(1)\nif key in ignore_keys:\ncontinue\nwith open(fname) as f:\nparsed = [str(req) for req in pkg_resources.parse_requirements(f)]\nresults[key] = parsed\n\nlite = results.pop(\"lite\")\ncontrib = results.pop(\"contrib\")\nresults[\"boto\"] = [req for req in lite if req.startswith(\"boto\")]\nresults[\"sqlalchemy\"] = [req for req in lite if req.startswith(\"sqlalchemy\")]\nresults[\"test\"] = lite + contrib\n\nfor new_key, existing_key in extra_key_mapping.items():\nresults[new_key] = results[existing_key]\nfor key in sqla_keys:\nresults[key] += results[\"sqlalchemy\"]\n\nresults.pop(\"boto\")\nreturn results\n\n\n# Parse requirements.txt\nwith open(\"requirements.txt\") as f:\nrequired = f.read().splitlines()\n\nlong_description = \"Always know what to expect from your data. (See https:\/\/github.com\/great-expectations\/great_expectations for full description).\"\n\nconfig = {\n\"description\": \"Always know what to expect from your data.\",\n\"author\": \"The Great Expectations Team\",\n\"url\": \"https:\/\/github.com\/great-expectations\/great_expectations\",\n\"author_email\": \"team@greatexpectations.io\",\n\"version\": versioneer.get_version(),\n\"cmdclass\": versioneer.get_cmdclass(),\n\"install_requires\": required,\n\"extras_require\": get_extras_require(),\n\"packages\": find_packages(exclude=[\"contrib*\", \"docs*\", \"tests*\", \"examples*\"]),\n\"entry_points\": {\n\"console_scripts\": [\"great_expectations=great_expectations.cli:main\"]\n},\n\"name\": \"great_expectations\",\n\"long_description\": long_description,\n\"license\": \"Apache-2.0\",\n\"keywords\": \"data science testing pipeline data quality dataquality validation datavalidation\",\n\"include_package_data\": True,\n\"classifiers\": [\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Science\/Research\",\n\"Intended Audience :: Other Audience\",\n\"Topic :: Scientific\/Engineering\",\n\"Topic :: Software Development\",\n\"Topic :: Software Development :: Testing\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n],\n}\n\nsetup(**config)\n"
    },
    {
        "package_name": "grpcio-reflection-1.47.0",
        "file_list": "dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt proto_reflection_descriptor_database.py reflection.py reflection_pb2.py reflection_pb2_grpc.py _async.py _base.py __init__.py __init__.py grpc_version.py LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "# Copyright 2016 gRPC authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Setup module for the GRPC Python package's optional reflection.\"\"\"\n\nimport os\nimport sys\n\nimport setuptools\n\n_PACKAGE_PATH = os.path.realpath(os.path.dirname(__file__))\n_README_PATH = os.path.join(_PACKAGE_PATH, 'README.rst')\n\n# Ensure we're in the proper directory whether or not we're being used by pip.\nos.chdir(os.path.dirname(os.path.abspath(__file__)))\n\n# Break import-style to ensure we can actually find our local modules.\nimport grpc_version\n\n\nclass _NoOpCommand(setuptools.Command):\n\"\"\"No-op command.\"\"\"\n\ndescription = ''\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\npass\n\n\nCLASSIFIERS = [\n'Development Status :: 5 - Production\/Stable',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'License :: OSI Approved :: Apache Software License',\n]\n\nPACKAGE_DIRECTORIES = {\n'': '.',\n}\n\nINSTALL_REQUIRES = (\n'protobuf>=3.12.0',\n'grpcio>={version}'.format(version=grpc_version.VERSION),\n)\n\ntry:\nimport reflection_commands as _reflection_commands\n\n# we are in the build environment, otherwise the above import fails\nSETUP_REQUIRES = ('grpcio-tools=={version}'.format(\nversion=grpc_version.VERSION),)\nCOMMAND_CLASS = {\n# Run preprocess from the repository *before* doing any packaging!\n'preprocess': _reflection_commands.Preprocess,\n'build_package_protos': _reflection_commands.BuildPackageProtos,\n}\nexcept ImportError:\nSETUP_REQUIRES = ()\nCOMMAND_CLASS = {\n# wire up commands to no-op not to break the external dependencies\n'preprocess': _NoOpCommand,\n'build_package_protos': _NoOpCommand,\n}\n\nsetuptools.setup(name='grpcio-reflection',\nversion=grpc_version.VERSION,\nlicense='Apache License 2.0',\ndescription='Standard Protobuf Reflection Service for gRPC',\nlong_description=open(_README_PATH, 'r').read(),\nauthor='The gRPC Authors',\nauthor_email='grpc-io@googlegroups.com',\nclassifiers=CLASSIFIERS,\nurl='https:\/\/grpc.io',\npackage_dir=PACKAGE_DIRECTORIES,\npackages=setuptools.find_packages('.'),\npython_requires='>=3.6',\ninstall_requires=INSTALL_REQUIRES,\nsetup_requires=SETUP_REQUIRES,\ncmdclass=COMMAND_CLASS)\n"
    },
    {
        "package_name": "grpcio-tools-1.47.0",
        "file_list": "dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt byte_buffer.h byte_buffer_reader.h census.h compression.h endpoint_config.h event_engine.h memory_allocator_impl.h memory_allocator.h memory_request.h port.h README.md slice.h slice_buffer.h fork.h grpc.h grpc_cronet.h grpc_posix.h grpc_security.h grpc_security_constants.h atm.h atm_gcc_atomic.h atm_gcc_sync.h atm_windows.h byte_buffer.h byte_buffer_reader.h compression_types.h connectivity_state.h fork.h gpr_slice.h gpr_types.h grpc_types.h log.h port_platform.h propagation_bits.h README.md slice.h status.h sync.h sync_abseil.h sync_custom.h sync_generic.h sync_posix.h sync_windows.h load_reporting.h module.modulemap slice.h slice_buffer.h status.h alloc.h atm.h atm_gcc_atomic.h atm_gcc_sync.h atm_windows.h cpu.h log.h log_windows.h port_platform.h string_util.h sync.h sync_abseil.h sync_custom.h sync_generic.h sync_posix.h sync_windows.h thd_id.h time.h workaround_list.h alarm.h channel.h client_context.h completion_queue.h create_channel.h create_channel_posix.h health_check_service_server_builder_option.h proto_server_reflection_plugin.h async_generic_service.h generic_stub.h grpc++.h health_check_service_interface.h call.h channel_argument_option.h client_unary_call.h async_stream.h async_unary_call.h byte_buffer.h call.h call_hook.h channel_interface.h client_context.h client_unary_call.h completion_queue.h completion_queue_tag.h config.h config_protobuf.h core_codegen.h core_codegen_interface.h create_auth_context.h grpc_library.h metadata_map.h method_handler_impl.h proto_utils.h rpc_method.h rpc_service_method.h auth_context.h serialization_traits.h server_context.h server_interface.h service_type.h slice.h status.h status_code_enum.h string_ref.h stub_options.h sync_stream.h time.h grpc_library.h method_handler_impl.h rpc_method.h rpc_service_method.h serialization_traits.h server_builder_option.h server_builder_plugin.h server_initializer.h service_type.h README.md resource_quota.h auth_context.h auth_metadata_processor.h credentials.h server_credentials.h server.h server_builder.h server_context.h server_posix.h async_stream.h async_unary_call.h byte_buffer.h channel_arguments.h config.h error_details.h slice.h status.h status_code_enum.h string_ref.h stub_options.h sync_stream.h time.h mock_stream.h server_context_test_spouse.h alarm.h channel.h client_context.h completion_queue.h create_channel.h create_channel_binder.h create_channel_posix.h admin_services.h call_metric_recorder.h channelz_service_plugin.h health_check_service_server_builder_option.h orca_service.h proto_server_reflection_plugin.h server_load_reporting.h async_generic_service.h generic_stub.h grpcpp.h health_check_service_interface.h call.h channel_argument_option.h client_unary_call.h async_generic_service.h async_stream.h async_unary_call.h byte_buffer.h call.h callback_common.h call_hook.h call_op_set.h call_op_set_interface.h channel_interface.h client_callback.h client_context.h client_interceptor.h client_unary_call.h completion_queue.h completion_queue_tag.h config.h config_protobuf.h core_codegen.h core_codegen_interface.h create_auth_context.h delegating_channel.h grpc_library.h intercepted_channel.h interceptor.h interceptor_common.h message_allocator.h metadata_map.h method_handler.h method_handler_impl.h proto_buffer_reader.h proto_buffer_writer.h proto_utils.h README.md rpc_method.h rpc_service_method.h auth_context.h serialization_traits.h server_callback.h server_callback_handlers.h server_context.h server_interceptor.h server_interface.h service_type.h slice.h status.h status_code_enum.h string_ref.h stub_options.h sync.h sync_stream.h time.h grpc_library.h method_handler_impl.h README.md rpc_method.h rpc_service_method.h serialization_traits.h server_builder_option.h server_builder_plugin.h server_initializer.h service_type.h opencensus.h resource_quota.h alts_context.h alts_util.h authorization_policy_provider.h auth_context.h auth_metadata_processor.h binder_credentials.h binder_security_policy.h credentials.h cronet_credentials.h server_credentials.h tls_certificate_provider.h tls_certificate_verifier.h tls_credentials_options.h server.h server_builder.h server_context.h server_posix.h async_stream.h async_unary_call.h byte_buffer.h channel_arguments.h client_callback.h client_interceptor.h config.h error_details.h interceptor.h message_allocator.h method_handler.h proto_buffer_reader.h proto_buffer_writer.h server_callback.h server_interceptor.h slice.h status.h status_code_enum.h string_ref.h stub_options.h sync_stream.h time.h validate_service_config.h channel_test_peer.h client_context_test_peer.h default_reactor_test_peer.h mock_stream.h server_context_test_spouse.h xds_server_builder.h BUILD config.h config_protobuf.h cpp_generator.cc cpp_generator.h cpp_generator_helpers.h cpp_plugin.cc cpp_plugin.h csharp_generator.cc csharp_generator.h csharp_generator_helpers.h csharp_plugin.cc generator_helpers.h node_generator.cc node_generator.h node_generator_helpers.h node_plugin.cc objective_c_generator.cc objective_c_generator.h objective_c_generator_helpers.h objective_c_plugin.cc php_generator.cc php_generator.h php_generator_helpers.h php_plugin.cc protobuf_plugin.h python_generator.cc python_generator.h python_generator_helpers.h python_plugin.cc python_private_generator.h README.md ruby_generator.cc ruby_generator.h ruby_generator_helpers-inl.h ruby_generator_map-inl.h ruby_generator_string-inl.h ruby_plugin.cc schema_interface.h command.py main.cc main.h protoc.py BUILD.bazel complicated.proto flawed.proto protoc_test.py simple.proto simpler.proto simplest.proto any.proto api.proto plugin.proto descriptor.proto duration.proto empty.proto field_mask.proto source_context.proto struct.proto timestamp.proto type.proto wrappers.proto _protoc_compiler.cpp _protoc_compiler.pyx __init__.py grpc_version.py MANIFEST.in PKG-INFO protoc_lib_deps.py README.rst setup.cfg setup.py any.cc any.h any.pb.cc any.pb.h any.proto any_lite.cc any_test.cc any_test.proto api.pb.cc api.pb.h api.proto arena.cc arena.h arenastring.cc arenastring.h arenastring_unittest.cc arena_impl.h arena_test_util.cc arena_test_util.h arena_unittest.cc annotation_test_util.cc annotation_test_util.h code_generator.cc code_generator.h command_line_interface.cc command_line_interface.h command_line_interface_unittes cpp_bootstrap_unittest.cc cpp_enum.cc cpp_enum.h cpp_enum_field.cc cpp_enum_field.h cpp_extension.cc cpp_extension.h cpp_field.cc cpp_field.h cpp_file.cc cpp_file.h cpp_generator.cc cpp_generator.h cpp_helpers.cc cpp_helpers.h cpp_map_field.cc cpp_map_field.h cpp_message.cc cpp_message.h cpp_message_field.cc cpp_message_field.h cpp_message_layout_helper. cpp_move_unittest.cc cpp_names.h cpp_options.h cpp_padding_optimizer.cc cpp_padding_optimizer.h cpp_parse_function_generat cpp_plugin_unittest.cc cpp_primitive_field.cc cpp_primitive_field.h cpp_service.cc cpp_service.h cpp_string_field.cc cpp_string_field.h cpp_test_bad_identifiers.p cpp_test_large_enum_value. cpp_unittest.cc cpp_unittest.h cpp_unittest.inc metadata_test.cc csharp_bootstrap_unitte csharp_doc_comment.cc csharp_doc_comment.h csharp_enum.cc csharp_enum.h csharp_enum_field.cc csharp_enum_field.h csharp_field_base.cc csharp_field_base.h csharp_generator.cc csharp_generator.h csharp_generator_unitte csharp_helpers.cc csharp_helpers.h csharp_map_field.cc csharp_map_field.h csharp_message.cc csharp_message.h csharp_message_field.cc csharp_message_field.h csharp_names.h csharp_options.h csharp_primitive_field. csharp_reflection_class csharp_repeated_enum_fi csharp_repeated_message csharp_repeated_primiti csharp_source_generator csharp_wrapper_field.cc csharp_wrapper_field.h importer.cc importer.h importer_unittest.cc java_context.cc java_context.h java_doc_comment.cc java_doc_comment.h java_doc_comment_unittest java_enum.cc java_enum.h java_enum_field.cc java_enum_field.h java_enum_field_lite.cc java_enum_field_lite.h java_enum_lite.cc java_enum_lite.h java_extension.cc java_extension.h java_extension_lite.cc java_extension_lite.h java_field.cc java_field.h java_file.cc java_file.h java_generator.cc java_generator.h java_generator_factory.cc java_generator_factory.h java_helpers.cc java_helpers.h java_kotlin_generator.cc java_kotlin_generator.h java_map_field.cc java_map_field.h java_map_field_lite.cc java_map_field_lite.h java_message.cc java_message.h java_message_builder.cc java_message_builder.h java_message_builder_lite java_message_field.cc java_message_field.h java_message_field_lite.c java_message_field_lite.h java_message_lite.cc java_message_lite.h java_names.h java_name_resolver.cc java_name_resolver.h java_options.h java_plugin_unittest.cc java_primitive_field.cc java_primitive_field.h java_primitive_field_lite java_service.cc java_service.h java_shared_code_generato java_string_field.cc java_string_field.h java_string_field_lite.cc java_string_field_lite.h js_generator.cc js_generator.h well_known_types_embed.cc well_known_types_embed.h main.cc mock_code_generator.cc mock_code_generator.h method_dump.sh objectivec_enum.cc objectivec_enum.h objectivec_enum_fie objectivec_extensio objectivec_field.cc objectivec_field.h objectivec_file.cc objectivec_file.h objectivec_generato objectivec_helpers. objectivec_helpers_ objectivec_map_fiel objectivec_message. objectivec_message_ objectivec_nsobject objectivec_oneof.cc objectivec_oneof.h objectivec_primitiv package_info.h parser.cc parser.h parser_unittest.cc php_generator.cc php_generator.h plugin.cc plugin.h plugin.pb.cc plugin.pb.h plugin.proto python_generator.cc python_generator.h python_plugin_unittest. ruby_generated_code.proto ruby_generated_code_pb.rb ruby_generated_code_proto ruby_generated_pkg_explic ruby_generated_pkg_implic ruby_generator.cc ruby_generator.h ruby_generator_unittest.c scc.h subprocess.cc subprocess.h test_plugin.cc zip_output_unittest.sh zip_writer.cc zip_writer.h descriptor.cc descriptor.h descriptor.pb.cc descriptor.pb.h descriptor.proto descriptor_database.cc descriptor_database.h descriptor_database_unittest.cc descriptor_unittest.cc drop_unknown_fields_test.cc duration.pb.cc duration.pb.h duration.proto dynamic_message.cc dynamic_message.h dynamic_message_unittest.cc empty.pb.cc empty.pb.h empty.proto explicitly_constructed.h extension_set.cc extension_set.h extension_set_heavy.cc extension_set_inl.h extension_set_unittest.cc field_access_listener.h field_mask.pb.cc field_mask.pb.h field_mask.proto generated_enum_reflection.h generated_enum_util.cc generated_enum_util.h generated_message_bases.cc generated_message_bases.h generated_message_reflection.cc generated_message_reflection.h generated_message_reflection_unittest.c generated_message_table_driven.cc generated_message_table_driven.h generated_message_table_driven_lite.cc generated_message_table_driven_lite.h generated_message_tctable_decl.h generated_message_tctable_full.cc generated_message_tctable_impl.h generated_message_tctable_impl.inc generated_message_tctable_lite.cc generated_message_util.cc generated_message_util.h has_bits.h implicit_weak_message.cc implicit_weak_message.h inlined_string_field.cc inlined_string_field.h inlined_string_field_unittest.cc coded_stream.cc coded_stream.h coded_stream_unittest.cc gzip_stream.cc gzip_stream.h gzip_stream_unittest.sh io_win32.cc io_win32.h io_win32_unittest.cc package_info.h printer.cc printer.h printer_unittest.cc strtod.cc strtod.h tokenizer.cc tokenizer.h tokenizer_unittest.cc zero_copy_stream.cc zero_copy_stream.h zero_copy_stream_impl.cc zero_copy_stream_impl.h zero_copy_stream_impl_lite.cc zero_copy_stream_impl_lite.h zero_copy_stream_unittest.cc lite_arena_unittest.cc lite_unittest.cc map.cc map.h map_entry.h map_entry_lite.h map_field.cc map_field.h map_field_inl.h map_field_lite.h map_field_test.cc map_lite_test_util.cc map_lite_test_util.h map_lite_unittest.proto map_proto2_unittest.proto map_test.cc map_test.inc map_test_util.h map_test_util.inc map_test_util_impl.h map_type_handler.h map_unittest.proto message.cc message.h message_lite.cc message_lite.h message_unittest.cc message_unittest.inc metadata.h metadata_lite.h no_field_presence_test.cc package_info.h parse_context.cc parse_context.h port.h port_def.inc port_undef.inc preserve_unknown_enum_test.cc proto3_arena_lite_unittest.cc proto3_arena_unittest.cc proto3_lite_unittest.cc proto3_lite_unittest.inc reflection.h reflection_internal.h reflection_ops.cc reflection_ops.h reflection_ops_unittest.cc reflection_tester.cc reflection_tester.h repeated_field.cc repeated_field.h repeated_field_reflection_unittest.cc repeated_field_unittest.cc repeated_ptr_field.cc repeated_ptr_field.h service.cc service.h source_context.pb.cc source_context.pb.h source_context.proto string_member_robber.h struct.pb.cc struct.pb.h struct.proto bytestream.cc bytestream.h bytestream_unittest.cc callback.h casts.h common.cc common.h common_unittest.cc hash.h int128.cc int128.h int128_unittest.cc logging.h macros.h map_util.h mathutil.h mutex.h once.h platform_macros.h port.h status.cc status.h statusor.cc statusor.h statusor_test.cc status_macros.h status_test.cc stl_util.h stringpiece.cc stringpiece.h stringpiece_unittest.cc stringprintf.cc stringprintf.h stringprintf_unittest.cc structurally_valid.cc structurally_valid_unittest.cc strutil.cc strutil.h strutil_unittest.cc substitute.cc substitute.h template_util.h template_util_unittest.cc time.cc time.h time_test.cc bad_utf8_string golden_message golden_message_maps golden_message_oneof_implement golden_message_proto3 golden_packed_fields_message map_test_data.txt text_format_unittest_data.txt text_format_unittest_data_oneo text_format_unittest_data_poin text_format_unittest_extension file.cc file.h googletest.cc googletest.h zcgunzip.cc zcgzip.cc test_messages_proto2.proto test_messages_proto3.proto test_util.cc test_util.h test_util.inc test_util2.h test_util_lite.cc test_util_lite.h text_format.cc text_format.h text_format_unittest.cc timestamp.pb.cc timestamp.pb.h timestamp.proto type.pb.cc type.pb.h type.proto unittest.proto unittest_arena.proto unittest_custom_options.proto unittest_drop_unknown_fields.proto unittest_embed_optimize_for.proto unittest_empty.proto unittest_enormous_descriptor.proto unittest_import.proto unittest_import_lite.proto unittest_import_public.proto unittest_import_public_lite.proto unittest_lazy_dependencies.proto unittest_lazy_dependencies_custom_optio unittest_lazy_dependencies_enum.proto unittest_lite.proto unittest_lite_imports_nonlite.proto unittest_mset.proto unittest_mset_wire_format.proto unittest_no_field_presence.proto unittest_no_generic_services.proto unittest_optimize_for.proto unittest_preserve_unknown_enum.proto unittest_preserve_unknown_enum2.proto unittest_proto3.proto unittest_proto3_arena.proto unittest_proto3_arena_lite.proto unittest_proto3_lite.proto unittest_proto3_optional.proto unittest_well_known_types.proto unknown_field_set.cc unknown_field_set.h unknown_field_set_unittest.cc delimited_message_util.cc delimited_message_util.h delimited_message_util_test.cc field_comparator.cc field_comparator.h field_comparator_test.cc field_mask_util.cc field_mask_util.h field_mask_util_test.cc constants.h datapiece.cc datapiece.h default_value_objectwrite error_listener.cc error_listener.h expecting_objectwriter.h field_mask_utility.cc field_mask_utility.h json_escaping.cc json_escaping.h json_objectwriter.cc json_objectwriter.h json_objectwriter_test.cc json_stream_parser.cc json_stream_parser.h json_stream_parser_test.c location_tracker.h mock_error_listener.h object_location_tracker.h object_source.h object_writer.cc object_writer.h protostream_objectsource. protostream_objectsource_ protostream_objectwriter. protostream_objectwriter_ proto_writer.cc proto_writer.h structured_objectwriter.h anys.proto books.proto default_value.pr default_value_te field_mask.proto maps.proto oneofs.proto proto3.proto struct.proto timestamp_durati wrappers.proto type_info.cc type_info.h type_info_test_helper.cc type_info_test_helper.h utility.cc utility.h json_format.proto json_format_proto3.proto json_util.cc json_util.h json_util_test.cc message_differencer.cc message_differencer.h message_differencer_unittest.cc message_differencer_unittest.proto package_info.h time_util.cc time_util.h time_util_test.cc type_resolver.h type_resolver_util.cc type_resolver_util.h type_resolver_util_test.cc well_known_types_unittest.cc wire_format.cc wire_format.h wire_format_lite.cc wire_format_lite.h wire_format_unittest.cc wire_format_unittest.inc wrappers.pb.cc wrappers.pb.h wrappers.proto libprotobuf-lite.map libprotobuf.map libprotoc.map Makefile.am README.md libstdc++.la _parallel_compile_patch.py",
        "setup.py": "# Copyright 2016 gRPC authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom distutils import cygwinccompiler\nfrom distutils import extension\nfrom distutils import util\nimport errno\nimport os\nimport os.path\nimport platform\nimport re\nimport shlex\nimport shutil\nimport subprocess\nfrom subprocess import PIPE\nimport sys\nimport sysconfig\n\nimport pkg_resources\nimport setuptools\nfrom setuptools.command import build_ext\n\n# TODO(atash) add flag to disable Cython use\n\n_PACKAGE_PATH = os.path.realpath(os.path.dirname(__file__))\n_README_PATH = os.path.join(_PACKAGE_PATH, 'README.rst')\n\nos.chdir(os.path.dirname(os.path.abspath(__file__)))\nsys.path.insert(0, os.path.abspath('.'))\n\nimport _parallel_compile_patch\nimport protoc_lib_deps\n\nimport grpc_version\n\n_EXT_INIT_SYMBOL = None\nif sys.version_info[0] == 2:\n_EXT_INIT_SYMBOL = \"init_protoc_compiler\"\nelse:\n_EXT_INIT_SYMBOL = \"PyInit__protoc_compiler\"\n\n_parallel_compile_patch.monkeypatch_compile_maybe()\n\nCLASSIFIERS = [\n'Development Status :: 5 - Production\/Stable',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'License :: OSI Approved :: Apache Software License',\n]\n\nPY3 = sys.version_info.major == 3\n\n\ndef _env_bool_value(env_name, default):\n\"\"\"Parses a bool option from an environment variable\"\"\"\nreturn os.environ.get(env_name, default).upper() not in ['FALSE', '0', '']\n\n\n# Environment variable to determine whether or not the Cython extension should\n# *use* Cython or use the generated C files. Note that this requires the C files\n# to have been generated by building first *with* Cython support.\nBUILD_WITH_CYTHON = _env_bool_value('GRPC_PYTHON_BUILD_WITH_CYTHON', 'False')\n\n# Export this variable to force building the python extension with a statically linked libstdc++.\n# At least on linux, this is normally not needed as we can build manylinux-compatible wheels on linux just fine\n# without statically linking libstdc++ (which leads to a slight increase in the wheel size).\n# This option is useful when crosscompiling wheels for aarch64 where\n# it's difficult to ensure that the crosscompilation toolchain has a high-enough version\n# of GCC (we require >=5.1) but still uses old-enough libstdc++ symbols.\n# TODO(jtattermusch): remove this workaround once issues with crosscompiler version are resolved.\nBUILD_WITH_STATIC_LIBSTDCXX = _env_bool_value(\n'GRPC_PYTHON_BUILD_WITH_STATIC_LIBSTDCXX', 'False')\n\n\ndef check_linker_need_libatomic():\n\"\"\"Test if linker on system needs libatomic.\"\"\"\ncode_test = (b'#include <atomic>\\n' +\nb'int main() { return std::atomic<int64_t>{}; }')\ncxx = os.environ.get('CXX', 'c++')\ncpp_test = subprocess.Popen([cxx, '-x', 'c++', '-std=c++14', '-'],\nstdin=PIPE,\nstdout=PIPE,\nstderr=PIPE)\ncpp_test.communicate(input=code_test)\nif cpp_test.returncode == 0:\nreturn False\n# Double-check to see if -latomic actually can solve the problem.\n# https:\/\/github.com\/grpc\/grpc\/issues\/22491\ncpp_test = subprocess.Popen(\n[cxx, '-x', 'c++', '-std=c++14', '-', '-latomic'],\nstdin=PIPE,\nstdout=PIPE,\nstderr=PIPE)\ncpp_test.communicate(input=code_test)\nreturn cpp_test.returncode == 0\n\n\nclass BuildExt(build_ext.build_ext):\n\"\"\"Custom build_ext command.\"\"\"\n\ndef get_ext_filename(self, ext_name):\n# since python3.5, python extensions' shared libraries use a suffix that corresponds to the value\n# of sysconfig.get_config_var('EXT_SUFFIX') and contains info about the architecture the library targets.\n# E.g. on x64 linux the suffix is \".cpython-XYZ-x86_64-linux-gnu.so\"\n# When crosscompiling python wheels, we need to be able to override this suffix\n# so that the resulting file name matches the target architecture and we end up with a well-formed\n# wheel.\nfilename = build_ext.build_ext.get_ext_filename(self, ext_name)\norig_ext_suffix = sysconfig.get_config_var('EXT_SUFFIX')\nnew_ext_suffix = os.getenv('GRPC_PYTHON_OVERRIDE_EXT_SUFFIX')\nif new_ext_suffix and filename.endswith(orig_ext_suffix):\nfilename = filename[:-len(orig_ext_suffix)] + new_ext_suffix\nreturn filename\n\n\n# There are some situations (like on Windows) where CC, CFLAGS, and LDFLAGS are\n# entirely ignored\/dropped\/forgotten by distutils and its Cygwin\/MinGW support.\n# We use these environment variables to thus get around that without locking\n# ourselves in w.r.t. the multitude of operating systems this ought to build on.\n# We can also use these variables as a way to inject environment-specific\n# compiler\/linker flags. We assume GCC-like compilers and\/or MinGW as a\n# reasonable default.\nEXTRA_ENV_COMPILE_ARGS = os.environ.get('GRPC_PYTHON_CFLAGS', None)\nEXTRA_ENV_LINK_ARGS = os.environ.get('GRPC_PYTHON_LDFLAGS', None)\nif EXTRA_ENV_COMPILE_ARGS is None:\nEXTRA_ENV_COMPILE_ARGS = '-std=c++14'\nif 'win32' in sys.platform:\nif sys.version_info < (3, 5):\n# We use define flags here and don't directly add to DEFINE_MACROS below to\n# ensure that the expert user\/builder has a way of turning it off (via the\n# envvars) without adding yet more GRPC-specific envvars.\n# See https:\/\/sourceforge.net\/p\/mingw-w64\/bugs\/363\/\nif '32' in platform.architecture()[0]:\nEXTRA_ENV_COMPILE_ARGS += ' -D_ftime=_ftime32 -D_timeb=__timeb32 -D_ftime_s=_ftime32_s -D_hypot=hypot'\nelse:\nEXTRA_ENV_COMPILE_ARGS += ' -D_ftime=_ftime64 -D_timeb=__timeb64 -D_hypot=hypot'\nelse:\n# We need to statically link the C++ Runtime, only the C runtime is\n# available dynamically\nEXTRA_ENV_COMPILE_ARGS += ' \/MT'\nelif \"linux\" in sys.platform or \"darwin\" in sys.platform:\nEXTRA_ENV_COMPILE_ARGS += ' -fno-wrapv -frtti'\nif EXTRA_ENV_LINK_ARGS is None:\nEXTRA_ENV_LINK_ARGS = ''\n# NOTE(rbellevi): Clang on Mac OS will make all static symbols (both\n# variables and objects) global weak symbols. When a process loads the\n# protobuf wheel's shared object library before loading *this* C extension,\n# the runtime linker will prefer the protobuf module's version of symbols.\n# This results in the process using a mixture of symbols from the protobuf\n# wheel and this wheel, which may be using different versions of\n# libprotobuf. In the case that they *are* using different versions of\n# libprotobuf *and* there has been a change in data layout (or in other\n# invariants) segfaults, data corruption, or \"bad things\" may happen.\n#\n# This flag ensures that on Mac, the only global symbol is the one loaded by\n# the Python interpreter. The problematic global weak symbols become local\n# weak symbols. This is not required on Linux since the compiler does not\n# produce global weak symbols. This is not required on Windows as our \".pyd\"\n# file does not contain any symbols.\n#\n# Finally, the leading underscore here is part of the Mach-O ABI. Unlike\n# more modern ABIs (ELF et al.), Mach-O prepends an underscore to the names\n# of C functions.\nif \"darwin\" in sys.platform:\nEXTRA_ENV_LINK_ARGS += ' -Wl,-exported_symbol,_{}'.format(\n_EXT_INIT_SYMBOL)\nif \"linux\" in sys.platform or \"darwin\" in sys.platform:\nEXTRA_ENV_LINK_ARGS += ' -lpthread'\nif check_linker_need_libatomic():\nEXTRA_ENV_LINK_ARGS += ' -latomic'\nelif \"win32\" in sys.platform and sys.version_info < (3, 5):\nmsvcr = cygwinccompiler.get_msvcr()[0]\nEXTRA_ENV_LINK_ARGS += (\n' -static-libgcc -static-libstdc++ -mcrtdll={msvcr}'\n' -static -lshlwapi'.format(msvcr=msvcr))\n\nEXTRA_COMPILE_ARGS = shlex.split(EXTRA_ENV_COMPILE_ARGS)\nEXTRA_LINK_ARGS = shlex.split(EXTRA_ENV_LINK_ARGS)\n\nif BUILD_WITH_STATIC_LIBSTDCXX:\nEXTRA_LINK_ARGS.append('-static-libstdc++')\n\nCC_FILES = [os.path.normpath(cc_file) for cc_file in protoc_lib_deps.CC_FILES]\nPROTO_FILES = [\nos.path.normpath(proto_file) for proto_file in protoc_lib_deps.PROTO_FILES\n]\nCC_INCLUDE = os.path.normpath(protoc_lib_deps.CC_INCLUDE)\nPROTO_INCLUDE = os.path.normpath(protoc_lib_deps.PROTO_INCLUDE)\n\nGRPC_PYTHON_TOOLS_PACKAGE = 'grpc_tools'\nGRPC_PYTHON_PROTO_RESOURCES_NAME = '_proto'\n\nDEFINE_MACROS = ()\nif \"win32\" in sys.platform:\nDEFINE_MACROS += (('WIN32_LEAN_AND_MEAN', 1),)\nif '64bit' in platform.architecture()[0]:\nDEFINE_MACROS += (('MS_WIN64', 1),)\nelif \"linux\" in sys.platform or \"darwin\" in sys.platform:\nDEFINE_MACROS += (('HAVE_PTHREAD', 1),)\n\n# By default, Python3 distutils enforces compatibility of\n# c plugins (.so files) with the OSX version Python was built with.\n# We need OSX 10.10, the oldest which supports C++ thread_local.\nif 'darwin' in sys.platform:\nmac_target = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET')\nif mac_target and (pkg_resources.parse_version(mac_target) <\npkg_resources.parse_version('10.10.0')):\nos.environ['MACOSX_DEPLOYMENT_TARGET'] = '10.10'\nos.environ['_PYTHON_HOST_PLATFORM'] = re.sub(\nr'macosx-[0-9]+\\.[0-9]+-(.+)', r'macosx-10.10-\\1',\nutil.get_platform())\n\n\ndef package_data():\ntools_path = GRPC_PYTHON_TOOLS_PACKAGE.replace('.', os.path.sep)\nproto_resources_path = os.path.join(tools_path,\nGRPC_PYTHON_PROTO_RESOURCES_NAME)\nproto_files = []\nfor proto_file in PROTO_FILES:\nsource = os.path.join(PROTO_INCLUDE, proto_file)\ntarget = os.path.join(proto_resources_path, proto_file)\nrelative_target = os.path.join(GRPC_PYTHON_PROTO_RESOURCES_NAME,\nproto_file)\ntry:\nos.makedirs(os.path.dirname(target))\nexcept OSError as error:\nif error.errno == errno.EEXIST:\npass\nelse:\nraise\nshutil.copy(source, target)\nproto_files.append(relative_target)\nreturn {GRPC_PYTHON_TOOLS_PACKAGE: proto_files}\n\n\ndef extension_modules():\nif BUILD_WITH_CYTHON:\nplugin_sources = [os.path.join('grpc_tools', '_protoc_compiler.pyx')]\nelse:\nplugin_sources = [os.path.join('grpc_tools', '_protoc_compiler.cpp')]\n\nplugin_sources += [\nos.path.join('grpc_tools', 'main.cc'),\nos.path.join('grpc_root', 'src', 'compiler', 'python_generator.cc')\n] + [os.path.join(CC_INCLUDE, cc_file) for cc_file in CC_FILES]\n\nplugin_ext = extension.Extension(\nname='grpc_tools._protoc_compiler',\nsources=plugin_sources,\ninclude_dirs=[\n'.',\n'grpc_root',\nos.path.join('grpc_root', 'include'),\nCC_INCLUDE,\n],\nlanguage='c++',\ndefine_macros=list(DEFINE_MACROS),\nextra_compile_args=list(EXTRA_COMPILE_ARGS),\nextra_link_args=list(EXTRA_LINK_ARGS),\n)\nextensions = [plugin_ext]\nif BUILD_WITH_CYTHON:\nfrom Cython import Build\nreturn Build.cythonize(extensions)\nelse:\nreturn extensions\n\n\nsetuptools.setup(name='grpcio-tools',\nversion=grpc_version.VERSION,\ndescription='Protobuf code generator for gRPC',\nlong_description=open(_README_PATH, 'r').read(),\nauthor='The gRPC Authors',\nauthor_email='grpc-io@googlegroups.com',\nurl='https:\/\/grpc.io',\nlicense='Apache License 2.0',\nclassifiers=CLASSIFIERS,\next_modules=extension_modules(),\npackages=setuptools.find_packages('.'),\npython_requires='>=3.6',\ninstall_requires=[\n'protobuf>=3.12.0, < 4.0dev',\n'grpcio>={version}'.format(version=grpc_version.VERSION),\n'setuptools',\n],\npackage_data=package_data(),\ncmdclass={\n'build_ext': BuildExt,\n})\n"
    },
    {
        "package_name": "h3-3.7.4",
        "file_list": "CHANGELOG.md CMakeLists.txt LICENSE makefile PKG-INFO pyproject.toml readme.md requirements.in setup.cfg setup.py _binding.py _public_api.py __init__.py _binding.py _public_api.py __init__.py _binding.py _public_api.py __init__.py _binding.py _public_api.py __init__.py _api_template.py __init__.py CMakeLists.txt v4.py vect.py __init__.py cells.pyx CMakeLists.txt edges.pyx geo.pyx h3lib.pxd to_multipoly.pyx unstable_vect.pyx util.pxd util.pyx __init__.py _version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt Config.cmake.in TestWrapValgrind.cmake toolchain.cmake CMakeLists.txt CMakeLists.txt compact.c distance.c edge.c index.c neighbors.c LICENSE README.md binding_functions.ps1 binding_functions.sh coverage.sh.in publish_website.sh update_version.sh args.h benchmark.h kml.h test.h utility.h args.c kml.c test.c utility.c benchmarkH3Api.c benchmarkH3Line.c benchmarkH3SetToLinkedGeo.c benchmarkH3UniEdge.c benchmarkKRing.c benchmarkPolyfill.c benchmarkPolygon.c geoToH3.c h3ToComponents.c h3ToGeo.c h3ToGeoBoundary.c h3ToLocalIj.c hexRange.c kRing.c localIjToH3.c generateBaseCellNeighbors.c generateFaceCenterPoint.c generateNumHexagons.c generatePentagonDirectionFaces.c h3ToGeoBoundaryHier.c h3ToGeoHier.c h3ToHier.c mkRandGeo.c mkRandGeoBoundary.c README.txt testBaseCells.c testBBox.c testCompact.c testCoordIj.c testCoordIjk.c testGeoCoord.c testGeoToH3.c testH3Api.c testH3CellArea.c testH3CellAreaExhaustive.c testH3Distance.c testH3DistanceExhaustive.c testH3GetFaces.c testH3Index.c testH3Line.c testH3LineExhaustive.c testH3Memory.c testH3NeighborRotations.c testH3SetToLinkedGeo.c testH3SetToVertexGraph.c testH3ToCenterChild.c testH3ToChildren.c testH3ToGeo.c testH3ToGeoBoundary.c testH3ToLocalIj.c testH3ToLocalIjExhaustive.c testH3ToParent.c testH3UniEdge.c testH3UniEdgeExhaustive.c testHexRanges.c testHexRing.c testKRing.c testLinkedGeo.c testMaxH3ToChildrenSize.c testPentagonIndexes.c testPolyfill.c testPolyfillReported.c testPolygon.c testVec2d.c testVec3d.c testVertex.c testVertexGraph.c algos.h alloc.h baseCells.h bbox.h constants.h coordijk.h faceijk.h geoCoord.h h3api.h.in h3Index.h h3UniEdge.h linkedGeo.h localij.h mathExtensions.h polygon.h polygonAlgos.h vec2d.h vec3d.h vertex.h vertexGraph.h algos.c baseCells.c bbox.c coordijk.c faceijk.c geoCoord.c h3Index.c h3UniEdge.c linkedGeo.c localij.c mathExtensions.c polygon.c vec2d.c vec3d.c vertex.c vertexGraph.c VERSION",
        "setup.py": "import os\nfrom setuptools import find_packages\nfrom skbuild import setup\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nabout = {}\nwith open(os.path.join(here, 'src', 'h3', '_version.py')) as f:\nexec(f.read(), about)\n\n\ndef long_desc():\nhere = os.path.abspath(os.path.dirname(__file__))\nfname = os.path.join(here, 'readme.md')\nwith open(fname) as f:\nlong_description = f.read()\n\nreturn long_description\n\n\nsetup(\nname = 'h3',\nversion = about['__version__'],\ndescription = about['__description__'],\nlong_description = long_desc(),\nlong_description_content_type = 'text\/markdown',\nlicense = about['__license__'],\nauthor = about['__author__'],\nauthor_email = about['__author_email__'],\nurl = about['__url__'],\nclassifiers = about['__classifiers__'],\ninclude_package_data=True,\npackages = find_packages(\n'src',\nexclude = [\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"],\n),\npackage_dir = {'': 'src'},\ncmake_languages = ('C'),\nextras_require={\n'numpy': ['numpy'],\n'test': ['pytest', 'pytest-cov', 'flake8', 'pylint'],\n'all': ['numpy', 'pytest', 'pytest-cov', 'flake8', 'pylint'],\n},\n)\n"
    },
    {
        "package_name": "hachoir-3.1.3",
        "file_list": "benchmark.sh COPYING authors.rst changelog.rst conf.py contact.rst developer.rst editor.rst editor_add_extra.py editor_gzip.py editor_zip.py metadata.py gen_parser_list.py grep.rst hacking.rst index.rst install.rst internals.rst make.bat Makefile metadata.rst parser.rst regex.rst strip.rst subfile.rst urwid.rst wx.rst benchmark.py bits.py cmd_line.py config.py dict.py endian.py error.py event_handler.py i18n.py iso639.py language.py log.py memory.py profiler.py text_handler.py timeout.py tools.py __init__.py field.py fieldset.py typed_field.py __init__.py basic_field_set.py bit_field.py byte_field.py character.py enum.py fake_array.py field.py field_set.py float.py fragment.py generic_field_set.py helper.py integer.py link.py padding.py parser.py seekable_field_set.py static_field_set.py string_field.py sub_file.py timestamp.py vector.py __init__.py grep.py archive.py audio.py config.py cr2.py csv.py file_system.py filter.py formatter.py gtk.py image.py jpeg.py main.py metadata.py metadata_item.py misc.py program.py main.py __init__.py register.py riff.py safe.py setter.py timezone.py video.py __init__.py __main__.py ace.py ar.py bomstore.py bzip2_parser.py cab.py gzip_parser.py lzx.py mar.py mozilla_ar.py prs_pak.py rar.py rpm.py sevenzip.py tar.py zip.py zlib.py __init__.py aiff.py au.py flac.py id3.py itunesdb.py midi.py mod.py modplug.py mpeg_audio.py real_audio.py s3m.py xm.py __init__.py deflate.py msdos.py tracker.py win32.py win32_lang_id.py __init__.py action_script.py asn1.py mkv.py mp4.py ogg.py realmedia.py riff.py swf.py __init__.py ext2.py fat.py iso9660.py linux_swap.py mbr.py ntfs.py reiser_fs.py __init__.py blp.py laf.py spider_man_video.py zsnes.py __init__.py guess.py bmp.py common.py cr2.py exif.py gif.py ico.py iptc.py jpeg.py pcx.py photoshop_metadata.py png.py psd.py tga.py tiff.py wmf.py xcf.py __init__.py bplist.py chm.py common.py dsstore.py file_3do.py file_3ds.py fit.py gnome_keyring.py hlp.py lnk.py mapsforge_map.py msoffice.py msoffice_summary.py mstask.py ole2.py ole2_util.py pcf.py pdf.py pifv.py torrent.py ttf.py word_2.py word_doc.py __init__.py common.py ouid.py tcpdump.py __init__.py parser.py parser_list.py elf.py exe.py exe_ne.py exe_pe.py exe_res.py java.py java_serialized.py macho.py nds.py prc.py python.py __init__.py template.py amf.py asf.py flv.py fourcc.py mpeg_ts.py mpeg_video.py __init__.py __init__.py parser.py pattern.py regex.py __init__.py input.py input_helper.py output.py stream.py __init__.py strip.py data_rate.py main.py output.py pattern.py search.py __init__.py __main__.py test.py urwid.py app.py dialogs.py dispatcher.py core_type_menu.py core_type_menu_fwd.py core_type_menu_imp.py field_menu.py field_menu_fwd.py field_menu_imp.py field_menu_setup.py field_split_menu.py field_split_menu_fwd.py field_split_menu_imp.py field_view.py field_view_fwd.py field_view_imp.py field_view_setup.py format.py mutator.py stubs.py __init__.py frame_view.py frame_view_fwd.py frame_view_imp.py frame_view_setup.py __init__.py file_cache.py hex_view.py hex_view_setup.py __init__.py main.py hachoir_wx.xrc resource.py __init__.py tree_view.py tree_view_setup.py __init__.py unicode.py __init__.py __main__.py __init__.py hachoir-metadata-csv dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe MANIFEST.in PKG-INFO README.rst runtests.py setup.cfg setup.py 08lechat_hq_fr.mp3 10min.mkv 25min.aifc 32bpp.tga 7zip.chm andorra.map angle-bear-48x48.ani anti-arpeggio_tune.ptm archive.7z arp_dns_ping_dns.tcpdump article01.bmp audio_8khz_8bit_ulaw_4s39.au breakdance.flv cacert_class3.der canon.raw.cr2 cd_0008_5C48_1m53s.cda cercle.exe claque-beignet.swf com.apple.pkg.BaseSystemResources.bom cross.xcf debian-31r4-i386-binary-1.iso.torrent default_mount_opts.ext2 deja_vu_serif-2.7.ttf dell8.fat16 dontyou.xm eula.exe firstrun.rm flashmob.mkv free-software-song.midi.bz2 ftp-0.17-537.i586.rpm georgia.cab get-versions.64bit.little.elf globe.wmf gps.jpg grasslogo_vector.emf green_fire.jpg hachoir-core.ace hachoir-core.rar hachoir.org.sxw hero.tga hotel_california.flac indiana.mid india_map.gif interlude_david_aubrun.ogg jpeg.exif.photoshop.jpg kde_click.wav kde_haypo_corner.bmp kino14s.laf ladouce_1h15.wav lara_croft.pcx linux_swap_9pages logo-kubuntu.png macos_10.12.macho macos_10.5.macho marc_kravetz.mp3 matrix_ping_pong.wmv mbr_linux_and_ext mev.32bit.big.elf mev.64bit.big.elf my60k.ext2 nitrodir.nds ocr10.laf paktest.pak Panasonic_AG_HMC_151.MTS pentax_320x240.mov pikachu.wmf ping_20020927-3ubuntu2 png_331x90x8_truncated.png pyc_example_1.5.2_pyc.bin pyc_example_2.2.3_pyc.bin pyc_example_2.5c1_pyc.bin python.cpython-37.pyc.bin quicktime.mp4 radpoor.doc ReferenceMap.class reiserfs_v3_332k.bin sample.tif sample.ts satellite_one.s3m sheep_on_drugs.mp3 smallville.s03e02.avi small_text.tar steganography.mp3 swat.blp test.txt.gz test_file.fit twunk_16.exe types.ext2 usa_railroad.jpg vim.lnk weka.model wormux_32x32_16c.ico yellowdude.3ds regex_regression.rst test_doc.py test_editor.py test_grep.py test_metadata.py test_parser.py test_strip.py TODO.rst tox.ini",
        "setup.py": "#!\/usr\/bin\/env python3\n#\n# Prepare a release:\n#\n# - check version: hachoir\/__init__.py and doc\/conf.py\n# - set the release date: edit doc\/changelog.rst\n# - run: git commit -a\n# - Remove untracked files\/dirs: git clean -fdx\n# - run tests: tox --parallel auto\n# - run: git push\n# - check GitHub Actions status:\n# https:\/\/github.com\/vstinner\/hachoir\/actions\n#\n# Release a new version:\n#\n# - git tag x.y.z\n# - git clean -fdx # Remove untracked files\/dirs\n# - python3 setup.py sdist bdist_wheel\n# - git push --tags\n# - twine upload dist\/*\n#\n# After the release:\n#\n# - set version to N+1: hachoir\/__init__.py and doc\/conf.py\n\nENTRY_POINTS = {\n'console_scripts': [\n\"hachoir-grep = hachoir.grep:main\",\n\"hachoir-metadata = hachoir.metadata.main:main\",\n\"hachoir-strip = hachoir.strip:main\",\n\"hachoir-urwid = hachoir.urwid:main\"\n],\n'gui_scripts': [\n\"hachoir-wx = hachoir.wx.main:main\"\n]\n}\n# FIXME: hachoir-subfile is currently broken\n# \"hachoir-subfile\",\n\nCLASSIFIERS = [\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console :: Curses',\n'Environment :: Plugins',\n'Intended Audience :: Developers',\n'Intended Audience :: Education',\n'License :: OSI Approved :: GNU General Public License (GPL)',\n'Natural Language :: English',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 3',\n'Topic :: Multimedia',\n'Topic :: Scientific\/Engineering :: Information Analysis',\n'Topic :: Software Development :: Disassemblers',\n'Topic :: Software Development :: Interpreters',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: System :: Filesystems',\n'Topic :: Text Processing',\n'Topic :: Utilities',\n]\n\n\ndef main():\nfrom setuptools import setup\nfrom setuptools import find_packages\n\nimport hachoir\n\nreadme = open('README.rst')\nlong_description = readme.read()\nreadme.close()\n\ninstall_options = {\n\"name\": \"hachoir\",\n\"version\": hachoir.__version__,\n\"url\": 'http:\/\/hachoir.readthedocs.io\/',\n\"project_urls\": {\n\"Source\": \"https:\/\/github.com\/vstinner\/hachoir\",\n},\n\"author\": \"Hachoir team (see AUTHORS file)\",\n\"description\": \"Package of Hachoir parsers used to open binary files\",\n\"long_description\": long_description,\n\"classifiers\": CLASSIFIERS,\n\"license\": 'GNU GPL v2',\n\"packages\": find_packages(),\n\"package_data\": {\"hachoir.wx.resource\": ['hachoir_wx.xrc']},\n\"entry_points\": ENTRY_POINTS,\n\"extras_require\": {\n\"urwid\": [\n\"urwid==1.3.1\"\n],\n\"wx\": [\n\"darkdetect\",\n\"wxPython==4.*\"\n]\n},\n\"zip_safe\": True,\n}\nsetup(**install_options)\n\n\nif __name__ == \"__main__\":\nmain()\n"
    },
    {
        "package_name": "hdbscan-0.8.28",
        "file_list": "plot_cluster_comparison.py plot_hdbscan.py dist_metrics.pxd dist_metrics.pyx flat.py hdbscan_.py plots.py prediction.py robust_single_linkage_.py test_flat.py test_hdbscan.py test_prediction_utils.py test_rsl.py __init__.py validity.py _hdbscan_boruvka.pyx _hdbscan_linkage.pyx _hdbscan_reachability.pyx _hdbscan_tree.pyx _prediction_utils.pyx __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in Benchmarking scalability of clustering implementations 2D v0.7.ipynb Benchmarking scalability of clustering implementations-v0.7.ipynb clusterable_data.npy Comparing Clustering Algorithms.ipynb distance1.svg distance2.svg distance3.svg distance4.svg distance4a.svg distance5.svg Flat clustering.ipynb How HDBSCAN Works.ipynb How Soft Clustering for HDBSCAN Works.ipynb Looking at cluster consistency.ipynb Performance data generation .ipynb Python vs Java.ipynb PKG-INFO pyproject.toml README.rst requirements.txt setup.cfg setup.py",
        "setup.py": "import warnings\n\ntry:\nfrom Cython.Distutils import build_ext\nfrom setuptools import setup, Extension\nHAVE_CYTHON = True\nexcept ImportError as e:\nwarnings.warn(e.args[0])\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\nHAVE_CYTHON = False\n\n\nclass CustomBuildExtCommand(build_ext):\n\"\"\"build_ext command for use when numpy headers are needed.\"\"\"\n\ndef run(self):\n\n# Import numpy here, only when headers are needed\nimport numpy\n\n# Add numpy headers to include_dirs\nself.include_dirs.append(numpy.get_include())\n\n# Call original build_ext command\nbuild_ext.run(self)\n\n\n_hdbscan_tree = Extension('hdbscan._hdbscan_tree',\nsources=['hdbscan\/_hdbscan_tree.pyx'])\n_hdbscan_linkage = Extension('hdbscan._hdbscan_linkage',\nsources=['hdbscan\/_hdbscan_linkage.pyx'])\n_hdbscan_boruvka = Extension('hdbscan._hdbscan_boruvka',\nsources=['hdbscan\/_hdbscan_boruvka.pyx'])\n_hdbscan_reachability = Extension('hdbscan._hdbscan_reachability',\nsources=['hdbscan\/_hdbscan_reachability.pyx'])\n_prediction_utils = Extension('hdbscan._prediction_utils',\nsources=['hdbscan\/_prediction_utils.pyx'])\ndist_metrics = Extension('hdbscan.dist_metrics',\nsources=['hdbscan\/dist_metrics.pyx'])\n\n\ndef readme():\nwith open('README.rst') as readme_file:\nreturn readme_file.read()\n\ndef requirements():\n# The dependencies are the same as the contents of requirements.txt\nwith open('requirements.txt') as f:\nreturn [line.strip() for line in f if line.strip()]\n\nconfiguration = {\n'name': 'hdbscan',\n'version': '0.8.28',\n'description': 'Clustering based on density with variable density clusters',\n'long_description': readme(),\n'classifiers': [\n'Development Status :: 4 - Beta',\n'Intended Audience :: Science\/Research',\n'Intended Audience :: Developers',\n'License :: OSI Approved',\n'Programming Language :: C',\n'Programming Language :: Python',\n'Topic :: Software Development',\n'Topic :: Scientific\/Engineering',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: POSIX',\n'Operating System :: Unix',\n'Operating System :: MacOS',\n'Programming Language :: Python :: 3.4',\n],\n'keywords': 'cluster clustering density hierarchical',\n'url': 'http:\/\/github.com\/scikit-learn-contrib\/hdbscan',\n'maintainer': 'Leland McInnes',\n'maintainer_email': 'leland.mcinnes@gmail.com',\n'license': 'BSD',\n'packages': ['hdbscan', 'hdbscan.tests'],\n'install_requires': requirements(),\n'ext_modules': [_hdbscan_tree,\n_hdbscan_linkage,\n_hdbscan_boruvka,\n_hdbscan_reachability,\n_prediction_utils,\ndist_metrics],\n'cmdclass': {'build_ext': CustomBuildExtCommand},\n'test_suite': 'nose.collector',\n'tests_require': ['nose'],\n'data_files': ('hdbscan\/dist_metrics.pxd',)\n}\n\nif not HAVE_CYTHON:\nwarnings.warn('Due to incompatibilities with Python 3.7 hdbscan now'\n'requires Cython to be installed in order to build it')\nraise ImportError('Cython not found! Please install cython and try again')\n\nsetup(**configuration)\n"
    },
    {
        "package_name": "hexbytes-0.2.3",
        "file_list": "converters.pyi exceptions.pyi filters.pyi setters.pyi validators.pyi _cmp.pyi _version_info.pyi __init__.pyi __init__.pyi __init__.pyi _speedups.pyi error.pyi iniconfig.pyi io.pyi path.pyi xml.pyi __init__.pyi __init__.pyi converters.pyi exceptions.pyi filters.pyi setters.pyi validators.pyi _cmp.pyi _version_info.pyi __init__.pyi __init__.pyi __init__.pyi abc.pyi aifc.pyi antigravity.pyi argparse.pyi array.pyi ast.pyi asynchat.pyi asyncore.pyi atexit.pyi audioop.pyi base64.pyi BaseHTTPServer.py BaseHTTPServer.pyi bdb.pyi binascii.pyi binhex.pyi bisect.pyi builtins.pyi bz2.pyi calendar.pyi cgi.pyi CGIHTTPServer.pyi cgitb.pyi chunk.pyi cmath.pyi cmd.pyi code.pyi codecs.pyi codeop.pyi collections.pyi colorsys.pyi commands.pyi compileall.pyi ConfigParser.pyi contextlib.pyi Cookie.pyi cookielib.pyi copy.pyi copyreg.pyi copy_reg.pyi cPickle.pyi cProfile.pyi crypt.pyi cStringIO.pyi csv.pyi util.pyi wintypes.p wintypes.pyi __init__.p __init__.pyi ascii.pyi panel.pyi textpad.py textpad.pyi __init__.p __init__.pyi datetime.pyi dumb.pyi gnu.pyi ndbm.pyi __init__.pyi decimal.pyi difflib.pyi dircache.pyi dis.pyi archive archive_util.pyi bcppcom bcppcompiler.pyi ccompil ccompiler.pyi cmd.pyi bdist.pyi bdist_dumb.pyi bdist_msi.pyi bdist_packager.pyi bdist_rpm.pyi bdist_wininst.pyi build.pyi build_clib.pyi build_ext.pyi build_py.pyi build_scripts.pyi check.pyi clean.pyi config.pyi install.pyi install_data.pyi install_egg_info.pyi install_headers.pyi install_lib.pyi install_scripts.pyi register.pyi sdist.pyi upload.pyi __init__.pyi config. config.pyi core.py core.pyi cygwinc cygwinccompiler.pyi debug.p debug.pyi dep_uti dep_util.pyi dir_uti dir_util.pyi dist.py dist.pyi emxccom emxccompiler.pyi errors. errors.pyi extensi extension.pyi fancy_g fancy_getopt.pyi filelis filelist.pyi file_ut file_util.pyi log.pyi msvccom msvccompiler.pyi spawn.p spawn.pyi sysconf sysconfig.pyi text_fi text_file.pyi unixcco unixccompiler.pyi util.py util.pyi version version.pyi __init_ __init__.pyi doctest.pyi dummy_thread.pyi dummy_threading.p dummy_threading.pyi base64mime. base64mime.pyi charset.pyi encoders.py encoders.pyi feedparser. feedparser.pyi generator.p generator.pyi header.pyi iterators.p iterators.pyi message.pyi applic application.pyi audio. audio.pyi base.p base.pyi image. image.pyi messag message.pyi multip multipart.pyi nonmul nonmultipart.pyi text.p text.pyi __init __init__.pyi MIMEText.py MIMEText.pyi parser.pyi quoprimime. quoprimime.pyi utils.pyi _parseaddr. _parseaddr.pyi __init__.py __init__.pyi utf_8.p utf_8.pyi __init_ __init__.pyi __init_ __init__.pyi errno.pyi exceptions.pyi fcntl.pyi filecmp.pyi fileinput.pyi fnmatch.pyi formatter.pyi fractions.pyi ftplib.pyi functools.pyi future_builtins.p future_builtins.pyi gc.pyi genericpath.pyi getopt.pyi getpass.pyi gettext.pyi glob.pyi grp.pyi gzip.pyi hashlib.pyi heapq.pyi hmac.pyi htmlentitydefs.py htmlentitydefs.pyi HTMLParser.pyi httplib.pyi imaplib.pyi imghdr.pyi imp.pyi importlib.pyi inspect.pyi io.pyi itertools.pyi json.pyi keyword.pyi dri driver.pyi gra grammar.pyi lit literals.pyi par parse.pyi pge pgen.pyi tok token.pyi tokenize.pyi __i __init__.pyi pygram.py pygram.pyi pytree.py pytree.pyi __init__. __init__.pyi linecache.pyi locale.pyi config.py config.pyi handlers. handlers.pyi __init__. __init__.pyi macpath.pyi macurl2path.pyi mailbox.pyi mailcap.pyi markupbase.pyi marshal.pyi math.pyi md5.pyi mimetools.pyi mimetypes.pyi mmap.pyi modulefinder.pyi schema.pyi sequence.p sequence.pyi text.pyi __init__.p __init__.pyi msvcrt.pyi connection.pyi __init__.pyi p pool.pyi process.pyi u util.pyi _ __init__.pyi mutex.pyi netrc.pyi nis.pyi nntplib.pyi ntpath.pyi nturl2path.pyi numbers.pyi opcode.pyi operator.pyi optparse.pyi path.pyi __init__.pyi os2emxpath.pyi ossaudiodev.pyi parser.pyi pdb.pyi pickle.pyi pickletools.pyi pipes.pyi pkgutil.pyi platform.pyi plistlib.pyi popen2.pyi poplib.pyi posix.pyi posixpath.pyi pprint.pyi profile.pyi pstats.pyi pty.pyi pwd.pyi pyclbr.pyi pydoc.pyi topics topics.pyi __init __init__.pyi errors.py errors.pyi model.pyi __init__. __init__.pyi py_compile.pyi Queue.pyi quopri.pyi random.pyi re.pyi readline.pyi repr.pyi resource.pyi rfc822.pyi rlcompleter.pyi robotparser.pyi runpy.pyi sched.pyi select.pyi sets.pyi sha.pyi shelve.pyi shlex.pyi shutil.pyi signal.pyi SimpleHTTPServer. SimpleHTTPServer.pyi site.pyi smtpd.pyi smtplib.pyi sndhdr.pyi socket.pyi SocketServer.pyi spwd.pyi dbapi2.py dbapi2.pyi __init__. __init__.pyi sre_compile.pyi sre_constants.pyi sre_parse.pyi ssl.pyi stat.pyi string.pyi StringIO.pyi stringold.pyi stringprep.pyi strop.pyi struct.pyi subprocess.pyi sunau.pyi symbol.pyi symtable.pyi sys.pyi sysconfig.pyi syslog.pyi tabnanny.pyi tarfile.pyi telnetlib.pyi tempfile.pyi termios.pyi textwrap.pyi this.pyi thread.pyi threading.pyi time.pyi timeit.pyi toaiff.pyi token.pyi tokenize.pyi trace.pyi traceback.pyi tty.pyi turtle.pyi types.pyi typing.pyi typing_extensions typing_extensions.pyi unicodedata.pyi unittest.pyi urllib.pyi urllib2.pyi urlparse.pyi user.pyi UserDict.pyi UserList.pyi UserString.pyi uu.pyi uuid.pyi warnings.pyi wave.pyi weakref.pyi webbrowser.pyi whichdb.pyi winsound.pyi handlers. handlers.pyi headers.p headers.pyi simple_se simple_server.pyi types.pyi util.pyi validate. validate.pyi __init__. __init__.pyi xdrlib.pyi domreg.py domreg.pyi expatbuil expatbuilder.pyi minicompa minicompat.pyi minidom.p minidom.pyi NodeFilte NodeFilter.pyi pulldom.p pulldom.pyi xmlbuilde xmlbuilder.pyi __init__. __init__.pyi cElemen cElementTree.pyi Element ElementInclude.pyi ElementPath.pyi ElementTree.pyi __init_ __init__.pyi errors.pyi model.pyi __init__.pyi __ini __init__.pyi handler.p handler.pyi saxutils. saxutils.pyi xmlreader xmlreader.pyi __init__. __init__.pyi __init__.pyi xmlrpclib.pyi zipfile.pyi zipimport.pyi zlib.pyi _ast.pyi _bisect.pyi _codecs.pyi _collections.pyi _csv.pyi _curses.pyi _dummy_threading. _dummy_threading.pyi _functools.pyi _heapq.pyi _hotshot.pyi _io.pyi _json.pyi _markupbase.pyi _md5.pyi _msi.pyi _osx_support.pyi _random.pyi _sha.pyi _sha256.pyi _sha512.pyi _socket.pyi _sre.pyi _struct.pyi _symtable.pyi _thread.pyi _threading_local. _threading_local.pyi _tkinter.pyi wsgi.py wsgi.pyi xml.pyi __init_ __init__.pyi _warnings.pyi _weakref.pyi _weakrefset.pyi _winreg.pyi __builtin__.pyi __future__.pyi __main__.pyi abc.pyi aifc.pyi antigravity.pyi argparse.pyi array.pyi ast.pyi asynchat.pyi base_events.pyi base_futures.pyi base_subprocess.py base_subprocess.pyi base_tasks.pyi compat.pyi constants.pyi coroutines.pyi events.pyi exceptions.pyi format_helpers.pyi futures.pyi locks.pyi log.pyi mixins.pyi proactor_events.py proactor_events.pyi protocols.pyi queues.pyi runners.pyi selector_events.py selector_events.pyi sslproto.pyi staggered.pyi streams.pyi subprocess.pyi taskgroups.pyi tasks.pyi threads.pyi timeouts.pyi transports.pyi trsock.pyi unix_events.pyi windows_events.pyi windows_utils.pyi __init__.pyi asyncore.pyi atexit.pyi audioop.pyi base64.pyi bdb.pyi binascii.pyi binhex.pyi bisect.pyi builtins.pyi bz2.pyi calendar.pyi cgi.pyi cgitb.pyi chunk.pyi cmath.pyi cmd.pyi code.pyi codecs.pyi codeop.pyi abc.pyi __init__.pyi colorsys.pyi compileall.pyi process process.pyi thread. thread.pyi _base.p _base.pyi __init_ __init__.pyi __init__.pyi configparser.pyi contextlib.pyi contextvars.pyi copy.pyi copyreg.pyi cProfile.pyi crypt.pyi csv.pyi util.pyi wintypes.pyi __init__.pyi ascii.pyi panel.pyi textpad.pyi __init__.pyi dataclasses.pyi datetime.pyi dumb.pyi gnu.pyi ndbm.pyi __init__.pyi decimal.pyi difflib.pyi dis.pyi archive_util.pyi bcppcompiler.pyi ccompiler.pyi cmd.pyi bdist.py bdist.pyi bdist_du bdist_dumb.pyi bdist_ms bdist_msi.pyi bdist_pa bdist_packager.pyi bdist_rp bdist_rpm.pyi bdist_wi bdist_wininst.pyi build.py build.pyi build_cl build_clib.pyi build_ex build_ext.pyi build_py build_py.pyi build_sc build_scripts.pyi check.py check.pyi clean.py clean.pyi config.p config.pyi install. install.pyi install_ install_data.pyi install_egg_info.pyi install_headers.pyi install_lib.pyi install_scripts.pyi register register.pyi sdist.py sdist.pyi upload.p upload.pyi __init__ __init__.pyi config.pyi core.pyi cygwinccompiler. cygwinccompiler.pyi debug.pyi dep_util.pyi dir_util.pyi dist.pyi errors.pyi extension.pyi fancy_getopt.pyi filelist.pyi file_util.pyi log.pyi msvccompiler.pyi spawn.pyi sysconfig.pyi text_file.pyi unixccompiler.py unixccompiler.pyi util.pyi version.pyi __init__.pyi doctest.pyi dummy_threading.pyi base64mime.pyi charset.pyi contentmanager.pyi encoders.pyi errors.pyi feedparser.pyi generator.pyi header.pyi headerregistry.pyi iterators.pyi message.pyi application.pyi audio.pyi base.pyi image.pyi message.pyi multipart.pyi nonmultipart.py nonmultipart.pyi text.pyi __init__.pyi parser.pyi policy.pyi quoprimime.pyi utils.pyi _header_value_parser _header_value_parser.pyi __init__.pyi utf_8.pyi utf_8_sig.pyi __init__.pyi __init__.pyi enum.pyi errno.pyi faulthandler.pyi fcntl.pyi filecmp.pyi fileinput.pyi fnmatch.pyi formatter.pyi fractions.pyi ftplib.pyi functools.pyi gc.pyi genericpath.pyi getopt.pyi getpass.pyi gettext.pyi glob.pyi graphlib.pyi grp.pyi gzip.pyi hashlib.pyi heapq.pyi hmac.pyi entities.pyi parser.pyi __init__.pyi client.pyi cookiejar.pyi cookies.pyi server.pyi __init__.pyi imaplib.pyi imghdr.pyi imp.pyi abc.pyi machinery.pyi _meta.p _meta.pyi __init_ __init__.pyi resources.pyi util.pyi __init__.pyi inspect.pyi io.pyi ipaddress.pyi itertools.pyi decoder.pyi encoder.pyi tool.pyi __init__.pyi keyword.pyi driver.pyi grammar.pyi literals.pyi parse.pyi pgen.pyi token.pyi tokenize.pyi __init__.pyi pygram.pyi pytree.pyi refactor.pyi __init__.pyi linecache.pyi locale.pyi config.pyi handlers.pyi __init__.pyi lzma.pyi macpath.pyi macurl2path.pyi mailbox.pyi mailcap.pyi marshal.pyi math.pyi mimetypes.pyi mmap.pyi modulefinder.pyi schema.pyi sequence.pyi text.pyi __init__.pyi msvcrt.pyi connection connection.pyi context.py context.pyi conn connection.pyi __in __init__.pyi managers.p managers.pyi pool.pyi process.py process.pyi queues.pyi reduction. reduction.pyi sharedctyp sharedctypes.pyi shared_mem shared_memory.pyi spawn.pyi synchroniz synchronize.pyi __init__.p __init__.pyi netrc.pyi nis.pyi nntplib.pyi ntpath.pyi nturl2path.pyi numbers.pyi opcode.pyi operator.pyi optparse.pyi path.pyi __init__.pyi ossaudiodev.pyi parser.pyi pathlib.pyi pdb.pyi pickle.pyi pickletools.pyi pipes.pyi pkgutil.pyi platform.pyi plistlib.pyi poplib.pyi posix.pyi posixpath.pyi pprint.pyi profile.pyi pstats.pyi pty.pyi pwd.pyi pyclbr.pyi pydoc.pyi topics.pyi __init__.pyi errors.pyi model.pyi __init__.pyi py_compile.pyi queue.pyi quopri.pyi random.pyi re.pyi readline.pyi reprlib.pyi resource.pyi rlcompleter.pyi runpy.pyi sched.pyi secrets.pyi select.pyi selectors.pyi shelve.pyi shlex.pyi shutil.pyi signal.pyi site.pyi smtpd.pyi smtplib.pyi sndhdr.pyi socket.pyi socketserver.pyi spwd.pyi dbapi2.pyi __init__.pyi sre_compile.pyi sre_constants.pyi sre_parse.pyi ssl.pyi stat.pyi statistics.pyi string.pyi stringprep.pyi struct.pyi subprocess.pyi sunau.pyi symbol.pyi symtable.pyi sys.pyi sysconfig.pyi syslog.pyi tabnanny.pyi tarfile.pyi telnetlib.pyi tempfile.pyi termios.pyi textwrap.pyi this.pyi threading.pyi time.pyi timeit.pyi colorchooser.pyi commondialog.pyi constants.pyi dialog.pyi dnd.pyi filedialog.pyi font.pyi messagebox.pyi scrolledtext.pyi simpledialog.pyi tix.pyi ttk.pyi __init__.pyi token.pyi tokenize.pyi tomllib.pyi trace.pyi traceback.pyi tracemalloc.pyi tty.pyi turtle.pyi types.pyi typing.pyi typing_extensions.pyi unicodedata.pyi async_case.pyi case.pyi loader.pyi main.pyi mock.pyi result.pyi runner.pyi signals.pyi suite.pyi util.pyi _log.pyi __init__.pyi error.pyi parse.pyi request.pyi response.pyi robotparser.pyi __init__.pyi uu.pyi uuid.pyi __init__.pyi warnings.pyi wave.pyi weakref.pyi webbrowser.pyi winreg.pyi winsound.pyi handlers.pyi headers.pyi simple_server.pyi types.pyi util.pyi validate.pyi __init__.pyi xdrlib.pyi domreg.pyi expatbuilder.pyi minicompat.pyi minidom.pyi NodeFilter.pyi pulldom.pyi xmlbuilder.pyi __init__.pyi cElementTree.pyi ElementInclude.p ElementInclude.pyi ElementPath.pyi ElementTree.pyi __init__.pyi errors.p errors.pyi model.py model.pyi __init__ __init__.pyi __init__.pyi handler.pyi saxutils.pyi xmlreader.pyi __init__.pyi __init__.pyi client.pyi server.pyi __init__.pyi xxlimited.pyi zipapp.pyi zipfile.pyi zipimport.pyi zlib.pyi __init__.pyi _ast.pyi _bisect.pyi _bootlocale.pyi _codecs.pyi _collections_abc.pyi _compat_pickle.pyi _compression.pyi _csv.pyi _curses.pyi _decimal.pyi _dummy_thread.pyi _dummy_threading.pyi _heapq.pyi _imp.pyi _json.pyi _markupbase.pyi _msi.pyi _operator.pyi _osx_support.pyi _posixsubprocess.pyi _pydecimal.pyi _py_abc.pyi _random.pyi _sitebuiltins.pyi _socket.pyi _stat.pyi _thread.pyi _threading_local.pyi _tkinter.pyi _tracemalloc.pyi dbapi.pyi wsgi.pyi xml.pyi __init__.pyi _warnings.pyi _weakref.pyi _weakrefset.pyi _winapi.pyi __future__.pyi __main__.pyi mypy_extens mypy_extensions.pyi typing-full.pyi error.pyi iniconfig.pyi io.pyi path.pyi xml.pyi __init__.pyi __init__.pyi converters.pyi exceptions.pyi filters.pyi setters.pyi validators.pyi _cmp.pyi _version_info.pyi __init__.pyi __init__.pyi __init__.pyi abc.pyi aifc.pyi antigravity. antigravity.pyi argparse.pyi array.pyi ast.pyi asynchat.pyi asyncore.pyi atexit.pyi audioop.pyi base64.pyi BaseHTTPServ BaseHTTPServer.pyi bdb.pyi binascii.pyi binhex.pyi bisect.pyi builtins.pyi bz2.pyi calendar.pyi cgi.pyi CGIHTTPServe CGIHTTPServer.pyi cgitb.pyi chunk.pyi cmath.pyi cmd.pyi code.pyi codecs.pyi codeop.pyi collections. collections.pyi colorsys.pyi commands.pyi compileall.p compileall.pyi ConfigParser ConfigParser.pyi contextlib.p contextlib.pyi Cookie.pyi cookielib.py cookielib.pyi copy.pyi copyreg.pyi copy_reg.pyi cPickle.pyi cProfile.pyi crypt.pyi cStringIO.py cStringIO.pyi csv.pyi util. util.pyi winty wintypes.pyi __ini __init__.pyi ascii ascii.pyi panel panel.pyi textp textpad.pyi __ini __init__.pyi datetime.pyi dumb.pyi gnu.pyi ndbm.pyi __init__ __init__.pyi decimal.pyi difflib.pyi dircache.pyi dis.pyi ar archive_util.pyi bc bcppcompiler.pyi cc ccompiler.pyi cm cmd.pyi bdist.pyi bdist_dumb.pyi bdist_msi.pyi bdist_packager.pyi bdist_rpm.pyi bdist_wininst.pyi build.pyi build_clib.pyi build_ext.pyi build_py.pyi build_scripts.pyi check.pyi clean.pyi config.pyi install.pyi install_data.pyi install_egg_info.pyi install_headers.pyi install_lib.pyi install_scripts.pyi register.pyi sdist.pyi upload.pyi __init__.pyi config.pyi core.pyi cy cygwinccompiler.pyi de debug.pyi dep_util.pyi di dir_util.pyi dist.pyi em emxccompiler.pyi er errors.pyi ex extension.pyi fa fancy_getopt.pyi fi filelist.pyi file_util.pyi lo log.pyi ms msvccompiler.pyi sp spawn.pyi sy sysconfig.pyi te text_file.pyi un unixccompiler.pyi ut util.pyi ve version.pyi __ __init__.pyi doctest.pyi dummy_thread dummy_thread.pyi dummy_threading.pyi base64 base64mime.pyi charse charset.pyi encode encoders.pyi feedpa feedparser.pyi genera generator.pyi header header.pyi iterat iterators.pyi messag message.pyi a application.pyi audio.pyi b base.pyi i image.pyi m message.pyi multipart.pyi n nonmultipart.pyi t text.pyi _ __init__.pyi MIMETe MIMEText.pyi parser parser.pyi quopri quoprimime.pyi utils. utils.pyi _parse _parseaddr.pyi __init __init__.pyi ut utf_8.pyi __ __init__.pyi __ __init__.pyi errno.pyi exceptions.p exceptions.pyi fcntl.pyi filecmp.pyi fileinput.py fileinput.pyi fnmatch.pyi formatter.py formatter.pyi fractions.py fractions.pyi ftplib.pyi functools.py functools.pyi future_built future_builtins.pyi gc.pyi genericpath. genericpath.pyi getopt.pyi getpass.pyi gettext.pyi glob.pyi grp.pyi gzip.pyi hashlib.pyi heapq.pyi hmac.pyi htmlentityde htmlentitydefs.pyi HTMLParser.p HTMLParser.pyi httplib.pyi imaplib.pyi imghdr.pyi imp.pyi importlib.py importlib.pyi inspect.pyi io.pyi itertools.py itertools.pyi json.pyi keyword.pyi driver.pyi grammar.pyi literals.pyi parse.pyi pgen.pyi token.pyi tokenize.pyi __init__.pyi pygr pygram.pyi pytr pytree.pyi __in __init__.pyi linecache.py linecache.pyi locale.pyi conf config.pyi hand handlers.pyi __in __init__.pyi macpath.pyi macurl2path. macurl2path.pyi mailbox.pyi mailcap.pyi markupbase.p markupbase.pyi marshal.pyi math.pyi md5.pyi mimetools.py mimetools.pyi mimetypes.py mimetypes.pyi mmap.pyi modulefinder modulefinder.pyi schem schema.pyi seque sequence.pyi text. text.pyi __ini __init__.pyi msvcrt.pyi connection.pyi __init__.pyi pool.pyi process.pyi util.pyi __init__.pyi mutex.pyi netrc.pyi nis.pyi nntplib.pyi ntpath.pyi nturl2path.p nturl2path.pyi numbers.pyi opcode.pyi operator.pyi optparse.pyi path.pyi __init__. __init__.pyi os2emxpath.p os2emxpath.pyi ossaudiodev. ossaudiodev.pyi parser.pyi pdb.pyi pickle.pyi pickletools. pickletools.pyi pipes.pyi pkgutil.pyi platform.pyi plistlib.pyi popen2.pyi poplib.pyi posix.pyi posixpath.py posixpath.pyi pprint.pyi profile.pyi pstats.pyi pty.pyi pwd.pyi pyclbr.pyi pydoc.pyi t topics.pyi _ __init__.pyi erro errors.pyi mode model.pyi __in __init__.pyi py_compile.p py_compile.pyi Queue.pyi quopri.pyi random.pyi re.pyi readline.pyi repr.pyi resource.pyi rfc822.pyi rlcompleter. rlcompleter.pyi robotparser. robotparser.pyi runpy.pyi sched.pyi select.pyi sets.pyi sha.pyi shelve.pyi shlex.pyi shutil.pyi signal.pyi SimpleHTTPSe SimpleHTTPServer.pyi site.pyi smtpd.pyi smtplib.pyi sndhdr.pyi socket.pyi SocketServer SocketServer.pyi spwd.pyi dbap dbapi2.pyi __in __init__.pyi sre_compile. sre_compile.pyi sre_constant sre_constants.pyi sre_parse.py sre_parse.pyi ssl.pyi stat.pyi string.pyi StringIO.pyi stringold.py stringold.pyi stringprep.p stringprep.pyi strop.pyi struct.pyi subprocess.p subprocess.pyi sunau.pyi symbol.pyi symtable.pyi sys.pyi sysconfig.py sysconfig.pyi syslog.pyi tabnanny.pyi tarfile.pyi telnetlib.py telnetlib.pyi tempfile.pyi termios.pyi textwrap.pyi this.pyi thread.pyi threading.py threading.pyi time.pyi timeit.pyi toaiff.pyi token.pyi tokenize.pyi trace.pyi traceback.py traceback.pyi tty.pyi turtle.pyi types.pyi typing.pyi typing_exten typing_extensions.pyi unicodedata. unicodedata.pyi unittest.pyi urllib.pyi urllib2.pyi urlparse.pyi user.pyi UserDict.pyi UserList.pyi UserString.p UserString.pyi uu.pyi uuid.pyi warnings.pyi wave.pyi weakref.pyi webbrowser.p webbrowser.pyi whichdb.pyi winsound.pyi hand handlers.pyi head headers.pyi simp simple_server.pyi type types.pyi util util.pyi vali validate.pyi __in __init__.pyi xdrlib.pyi domr domreg.pyi expa expatbuilder.pyi mini minicompat.pyi minidom.pyi Node NodeFilter.pyi pull pulldom.pyi xmlb xmlbuilder.pyi __in __init__.pyi cE cElementTree.pyi El ElementInclude.pyi ElementPath.pyi ElementTree.pyi __ __init__.pyi errors.pyi model.pyi __init__.pyi __init__.pyi handler.pyi saxutils.pyi xmlreader.pyi __init__.pyi __init__ __init__.pyi xmlrpclib.pyi zipfile.pyi zipimport.pyi zlib.pyi _ast.pyi _bisect.pyi _codecs.pyi _collections _collections.pyi _csv.pyi _curses.pyi _dummy_threa _dummy_threading.pyi _functools.p _functools.pyi _heapq.pyi _hotshot.pyi _io.pyi _json.pyi _markupbase. _markupbase.pyi _md5.pyi _msi.pyi _osx_support _osx_support.pyi _random.pyi _sha.pyi _sha256.pyi _sha512.pyi _socket.pyi _sre.pyi _struct.pyi _symtable.py _symtable.pyi _thread.pyi _threading_l _threading_local.pyi _tkinter.pyi ws wsgi.pyi xm xml.pyi __ __init__.pyi _warnings.py _warnings.pyi _weakref.pyi _weakrefset. _weakrefset.pyi _winreg.pyi __builtin__. __builtin__.pyi __future__.p __future__.pyi __main__.pyi abc.pyi aifc.pyi antigravity.pyi argparse.pyi array.pyi ast.pyi asynchat.pyi base_events.pyi base_futures.pyi base_subprocess.pyi base_tasks.pyi compat.pyi constants.pyi coroutines.pyi events.pyi exceptions.pyi format_helpers.pyi futures.pyi locks.pyi log.pyi mixins.pyi proactor_events.pyi protocols.pyi queues.pyi runners.pyi selector_events.pyi sslproto.pyi staggered.pyi streams.pyi subprocess.pyi taskgroups.pyi tasks.pyi threads.pyi timeouts.pyi transports.pyi trsock.pyi unix_events.pyi windows_events.pyi windows_utils.pyi __init__.pyi asyncore.pyi atexit.pyi audioop.pyi base64.pyi bdb.pyi binascii.pyi binhex.pyi bisect.pyi builtins.pyi bz2.pyi calendar.pyi cgi.pyi cgitb.pyi chunk.pyi cmath.pyi cmd.pyi code.pyi codecs.pyi codeop.pyi abc.pyi __init__.pyi colorsys.pyi compileall.pyi process.pyi thread.pyi _base.pyi __init__.pyi __init__.pyi configparser.pyi contextlib.pyi contextvars.pyi copy.pyi copyreg.pyi cProfile.pyi crypt.pyi csv.pyi util.pyi wintypes.pyi __init__.pyi ascii.pyi panel.pyi textpad.pyi __init__.pyi dataclasses.pyi datetime.pyi dumb.pyi gnu.pyi ndbm.pyi __init__.pyi decimal.pyi difflib.pyi dis.pyi archive_util.pyi bcppcompiler.pyi ccompiler.pyi cmd.pyi bdist.pyi bdist_dumb.pyi bdist_msi.pyi bdist_packager.pyi bdist_rpm.pyi bdist_wininst.pyi build.pyi build_clib.pyi build_ext.pyi build_py.pyi build_scripts.pyi check.pyi clean.pyi config.pyi install.pyi install_data.pyi install_egg_info.pyi install_headers.pyi install_lib.pyi install_scripts.pyi register.pyi sdist.pyi upload.pyi __init__.pyi config.pyi core.pyi cygwinccompiler.pyi debug.pyi dep_util.pyi dir_util.pyi dist.pyi errors.pyi extension.pyi fancy_getopt.pyi filelist.pyi file_util.pyi log.pyi msvccompiler.pyi spawn.pyi sysconfig.pyi text_file.pyi unixccompiler.pyi util.pyi version.pyi __init__.pyi doctest.pyi dummy_threading.pyi base64mime.pyi charset.pyi contentmanager.pyi encoders.pyi errors.pyi feedparser.pyi generator.pyi header.pyi headerregistry.pyi iterators.pyi message.pyi application.pyi audio.pyi base.pyi image.pyi message.pyi multipart.pyi nonmultipart.pyi text.pyi __init__.pyi parser.pyi policy.pyi quoprimime.pyi utils.pyi _header_value_parser.pyi __init__.pyi utf_8.pyi utf_8_sig.pyi __init__.pyi __init__.pyi enum.pyi errno.pyi faulthandler.pyi fcntl.pyi filecmp.pyi fileinput.pyi fnmatch.pyi formatter.pyi fractions.pyi ftplib.pyi functools.pyi gc.pyi genericpath.pyi getopt.pyi getpass.pyi gettext.pyi glob.pyi graphlib.pyi grp.pyi gzip.pyi hashlib.pyi heapq.pyi hmac.pyi entities.pyi parser.pyi __init__.pyi client.pyi cookiejar.pyi cookies.pyi server.pyi __init__.pyi imaplib.pyi imghdr.pyi imp.pyi abc.pyi machinery.pyi _meta.pyi __init__.pyi resources.pyi util.pyi __init__.pyi inspect.pyi io.pyi ipaddress.pyi itertools.pyi decoder.pyi encoder.pyi tool.pyi __init__.pyi keyword.pyi driver.pyi grammar.pyi literals.pyi parse.pyi pgen.pyi token.pyi tokenize.pyi __init__.pyi pygram.pyi pytree.pyi refactor.pyi __init__.pyi linecache.pyi locale.pyi config.pyi handlers.pyi __init__.pyi lzma.pyi macpath.pyi macurl2path.pyi mailbox.pyi mailcap.pyi marshal.pyi math.pyi mimetypes.pyi mmap.pyi modulefinder.pyi schema.pyi sequence.pyi text.pyi __init__.pyi msvcrt.pyi connection.pyi context.pyi connection.pyi __init__.pyi managers.pyi pool.pyi process.pyi queues.pyi reduction.pyi sharedctypes.pyi shared_memory.pyi spawn.pyi synchronize.pyi __init__.pyi netrc.pyi nis.pyi nntplib.pyi ntpath.pyi nturl2path.pyi numbers.pyi opcode.pyi operator.pyi optparse.pyi path.pyi __init__.pyi ossaudiodev.pyi parser.pyi pathlib.pyi pdb.pyi pickle.pyi pickletools.pyi pipes.pyi pkgutil.pyi platform.pyi plistlib.pyi poplib.pyi posix.pyi posixpath.pyi pprint.pyi profile.pyi pstats.pyi pty.pyi pwd.pyi pyclbr.pyi pydoc.pyi topics.pyi __init__.pyi errors.pyi model.pyi __init__.pyi py_compile.pyi queue.pyi quopri.pyi random.pyi re.pyi readline.pyi reprlib.pyi resource.pyi rlcompleter.pyi runpy.pyi sched.pyi secrets.pyi select.pyi selectors.pyi shelve.pyi shlex.pyi shutil.pyi signal.pyi site.pyi smtpd.pyi smtplib.pyi sndhdr.pyi socket.pyi socketserver.pyi spwd.pyi dbapi2.pyi __init__.pyi sre_compile.pyi sre_constants.pyi sre_parse.pyi ssl.pyi stat.pyi statistics.pyi string.pyi stringprep.pyi struct.pyi subprocess.pyi sunau.pyi symbol.pyi symtable.pyi sys.pyi sysconfig.pyi syslog.pyi tabnanny.pyi tarfile.pyi telnetlib.pyi tempfile.pyi termios.pyi textwrap.pyi this.pyi threading.pyi time.pyi timeit.pyi colorchooser.pyi commondialog.pyi constants.pyi dialog.pyi dnd.pyi filedialog.pyi font.pyi messagebox.pyi scrolledtext.pyi simpledialog.pyi tix.pyi ttk.pyi __init__.pyi token.pyi tokenize.pyi tomllib.pyi trace.pyi traceback.pyi tracemalloc.pyi tty.pyi turtle.pyi types.pyi typing.pyi typing_extensions.pyi unicodedata.pyi async_case.pyi case.pyi loader.pyi main.pyi mock.pyi result.pyi runner.pyi signals.pyi suite.pyi util.pyi _log.pyi __init__.pyi error.pyi parse.pyi request.pyi response.pyi robotparser.pyi __init__.pyi uu.pyi uuid.pyi __init__.pyi warnings.pyi wave.pyi weakref.pyi webbrowser.pyi winreg.pyi winsound.pyi handlers.pyi headers.pyi simple_server.pyi types.pyi util.pyi validate.pyi __init__.pyi xdrlib.pyi domreg.pyi expatbuilder.pyi minicompat.pyi minidom.pyi NodeFilter.pyi pulldom.pyi xmlbuilder.pyi __init__.pyi cElementTree.pyi ElementInclude.pyi ElementPath.pyi ElementTree.pyi __init__.pyi errors.pyi model.pyi __init__.pyi __init__.pyi handler.pyi saxutils.pyi xmlreader.pyi __init__.pyi __init__.pyi client.pyi server.pyi __init__.pyi xxlimited.pyi zipapp.pyi zipfile.pyi zipimport.pyi zlib.pyi __init__.pyi _ast.pyi _bisect.pyi _bootlocale.pyi _codecs.pyi _collections_abc.pyi _compat_pickle.pyi _compression.pyi _csv.pyi _curses.pyi _decimal.pyi _dummy_thread.pyi _dummy_threading.pyi _heapq.pyi _imp.pyi _json.pyi _markupbase.pyi _msi.pyi _operator.pyi _osx_support.pyi _posixsubprocess.pyi _pydecimal.pyi _py_abc.pyi _random.pyi _sitebuiltins.pyi _socket.pyi _stat.pyi _thread.pyi _threading_local.pyi _tkinter.pyi _tracemalloc.pyi dbapi.pyi wsgi.pyi xml.pyi __init__.pyi _warnings.pyi _weakref.pyi _weakrefset.pyi _winapi.pyi __future__.pyi __main__.pyi mypy_extensions.pyi typing-full.pyi error.pyi iniconfig.pyi io.pyi path.pyi xml.pyi __init__.pyi __init__.pyi main.py py.typed _utils.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md requirements-docs.txt setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import (\nsetup,\nfind_packages,\n)\n\nextras_require = {\n\"test\": [\n\"pytest>=7,<8\",\n\"pytest-xdist\",\n\"tox>=3.25.1,<4\",\n\"hypothesis>=3.44.24,<=6.31.6\",\n\"eth-utils>=1.0.1,<2\",\n],\n\"lint\": [\n\"flake8==3.7.9\",\n\"isort>=4.2.15,<5\",\n\"mypy==0.971\",\n\"pydocstyle>=5.0.0,<6\",\n\"black>=22,<23\",\n],\n\"doc\": [\n\"Sphinx>=1.6.5,<2\",\n\"sphinx_rtd_theme>=0.1.9,<1\",\n\"towncrier>=21,<22\",\n\"jinja2>=3.0.0,<3.1.0\", # jinja2<3.0 or >=3.1.0 cause doc build failures.\n],\n\"dev\": [\n\"bumpversion>=0.5.3,<1\",\n\"pytest-watch>=4.1.0,<5\",\n\"wheel\",\n\"twine\",\n\"ipython\",\n],\n}\n\nextras_require[\"dev\"] = (\nextras_require[\"dev\"]\n+ extras_require[\"test\"]\n+ extras_require[\"lint\"]\n+ extras_require[\"doc\"]\n)\n\n\nwith open(\".\/README.md\") as readme:\nlong_description = readme.read()\n\n\nsetup(\nname=\"hexbytes\",\n# *IMPORTANT*: Don't manually change the version here. Use `make bump`, as described in readme\nversion=\"0.2.3\",\ndescription=\"\"\"hexbytes: Python `bytes` subclass that decodes hex, with a readable console output\"\"\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nauthor=\"The Ethereum Foundation\",\nauthor_email=\"snakecharmers@ethereum.org\",\nurl=\"https:\/\/github.com\/ethereum\/hexbytes\",\ninclude_package_data=True,\ninstall_requires=[],\npython_requires=\">=3.6, <4\",\nextras_require=extras_require,\npy_modules=[\"hexbytes\"],\nlicense=\"MIT\",\nzip_safe=False,\nkeywords=\"ethereum\",\npackages=find_packages(exclude=[\"tests\", \"tests.*\"]),\npackage_data={\"hexbytes\": [\"py.typed\"]},\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Natural Language :: English\",\n\"Operating System :: MacOS\",\n\"Operating System :: POSIX\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\n)\n"
    },
    {
        "package_name": "higher-0.2.1",
        "file_list": "optim.py patch.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# Copyright (c) Facebook, Inc. and its affiliates.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Installation function for the higher project.\"\"\"\n\nimport pathlib\nfrom setuptools import setup\n\n# current directory\nHERE = pathlib.Path(__file__).parent\n\nREADME = (HERE \/ \"README.md\").read_text()\nREADME = README.replace(\n\"](.\/\", \n\"](https:\/\/github.com\/facebookresearch\/higher\/blob\/master\/\"\n)\nDESC = ('A pytorch library allowing users to obtain higher order gradients '\n'over losses spanning training loops rather than individual training '\n'steps.')\n\nREQUIRES_PYTHON = '>=3.6.0'\nVERSION = (HERE \/ \"version.txt\").read_text().strip()\n\n# run setup\nsetup(\nname='higher',\nversion=VERSION,\ndescription=DESC,\nlong_description=README,\nlong_description_content_type=\"text\/markdown\",\nauthor='Edward Grefenstette',\nauthor_email='egrefen@fb.com',\npython_requires=REQUIRES_PYTHON,\nurl=\"https:\/\/github.com\/facebookresearch\/higher\",\nkeywords='second-order, gradient descent, optimization, meta-learning',\npackages=['higher'],\ninstall_requires=['torch'],\ninclude_package_data=True,\nlicense='Apache',\nclassifiers=[\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n],\ntest_suite='nose.collector',\ntests_require=['nose', 'parameterized'],\n)\n"
    },
    {
        "package_name": "HiYaPyCo-0.5.0",
        "file_list": "odyldo.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_castinterpolated.py test_interpolation.py test_interpolationunicode.py test_invocation.py test_merge.py test_missingfiles.py test_multiple.py test_odict.py test_simple.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport sys\nimport os\n\nfrom setuptools import setup\n\nbasepath = os.path.dirname(os.path.realpath(__file__))\nsys.path.insert(0, os.path.dirname(basepath))\n\nHIYAPYCOVERSION='0.5.0'\n\nlong_description = open('README.rst').read()\n\ninstallrequires = [\n'PyYAML<6',\n'Jinja2>1,<4;python_version>=\"3\"',\n'Jinja2>1,<3;python_version<\"3\"',\n'MarkupSafe<2;python_version<\"3\"'\n]\n\nsetup(name='HiYaPyCo',\nversion=HIYAPYCOVERSION,\ndescription='Hierarchical Yaml Python Config',\nlong_description=\"%s\" % long_description,\nauthor='Klaus Zerwes zero-sys.net',\nauthor_email='zerwes@users.noreply.github.com',\nurl='https:\/\/github.com\/zerwes\/hiyapyco',\nlicense='GPLv3',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.9',\n],\npackages=['hiyapyco'],\nkeywords='configuration parser yaml',\ninstall_requires = installrequires,\nplatforms = 'any',\n)\n\n# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4 smartindent nu\n"
    },
    {
        "package_name": "hk80-1.0.1",
        "file_list": "coordinates.py hk80.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import setuptools\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nsetuptools.setup(\nname=\"hk80\",\nversion=\"1.0.1\",\nauthor=\"Macro Yau\",\nauthor_email=\"macroyau.development@gmail.com\",\ndescription=\"Hong Kong 1980 Grid coordinates conversion library in Python\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/MacroYau\/PyHK80\",\nlicense=\"MIT\",\npackages=setuptools.find_packages(),\ninstall_requires=[\n\"pyproj==2.1.3\",\n],\nclassifiers=[\n\"Programming Language :: Python\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n],\n)\n"
    },
    {
        "package_name": "html5-parser-0.4.10",
        "file_list": "build.py genattrs.py genencodings.py gentags.py attribute.c attribute.h char_ref.c char_ref.h char_ref.rl error.c error.h gumbo.h gumbo_edit.c gumbo_edit.h insertion_mode.h parser.c parser.h replacement.h string_buffer.c string_buffer.h string_piece.c string_piece.h svg_attrs.c svg_tags.c tag.c tag_enum.h tag_perf.h tag_sizes.h tag_strings.h tokenizer.c tokenizer.h tokenizer_states.h token_type.h utf8.c utf8.h util.c util.h vector.c vector.h LICENSE MANIFEST.in PKG-INFO README.rst run_tests.py setup.cfg setup.py as-libxml.c as-libxml.h as-python-tree.c as-python-tree.h attr_enum.h attr_perf.h attr_sizes.h attr_strings.h data-types.h dom.py encoding_names.py encoding_parser.py soup.py stdlib_etree.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt python-wrapper.c stack.h adapt.py basic.py html5lib_adapter.py malformed.py namespace.py soup.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n# vim:fileencoding=utf-8\n# License: Apache 2.0 Copyright: 2017, Kovid Goyal <kovid at kovidgoyal.net>\n\nimport os\nimport sys\nfrom distutils.command.build import build as Build\nfrom itertools import chain\n\nfrom setuptools import Extension, setup\n\nself_path = os.path.abspath(__file__)\nbase = os.path.dirname(self_path)\nsys.path.insert(0, base)\nif True:\nfrom build import (\nSRC_DIRS, find_c_files, include_dirs, libraries, library_dirs, version, iswindows,\nTEST_COMMAND, add_python_path)\ndel sys.path[0]\n\nsrc_files = tuple(chain(*map(lambda x: find_c_files(x)[0], SRC_DIRS)))\ncargs = ('\/O2' if iswindows else '-O3').split()\nif not iswindows:\ncargs.extend('-std=c99 -fvisibility=hidden'.split())\n\n\nclass Test(Build):\n\ndescription = \"run unit tests after in-place build\"\n\ndef run(self):\nBuild.run(self)\nif self.dry_run:\nself.announce('skipping \"test\" (dry run)')\nreturn\nimport subprocess\nenv = add_python_path(os.environ.copy(), self.build_lib)\nprint('\\nrunning tests...')\nsys.stdout.flush()\nret = subprocess.Popen([sys.executable] + TEST_COMMAND, env=env).wait()\nif ret != 0:\nraise SystemExit(ret)\n\n\nCLASSIFIERS = \"\"\"\\\nDevelopment Status :: 5 - Production\/Stable\nIntended Audience :: Developers\nLicense :: OSI Approved :: Apache Software License\nNatural Language :: English\nOperating System :: OS Independent\nProgramming Language :: Python\nTopic :: Text Processing\nTopic :: Text Processing :: Markup\nTopic :: Text Processing :: Markup :: HTML\nTopic :: Text Processing :: Markup :: XML\n\"\"\"\n\nsetup(\nname='html5-parser',\nversion='{}.{}.{}'.format(*version),\nauthor='Kovid Goyal',\nauthor_email='redacted@acme.com',\ndescription='Fast C based HTML 5 parsing for python',\nlicense='Apache 2.0',\nurl='https:\/\/html5-parser.readthedocs.io',\ndownload_url=(\n\"https:\/\/pypi.python.org\/packages\/source\/m\/html5-parser\/\"\n\"html5-parser-{}.{}.{}.tar.gz\".format(*version)),\nclassifiers=[c for c in CLASSIFIERS.split(\"\\n\") if c],\nplatforms=['any'],\ninstall_requires=['chardet', 'lxml>=3.8.0'],\nextras_require={'soup': 'beautifulsoup4'},\npackages=['html5_parser'],\npackage_dir={'': 'src'},\ncmdclass={'test': Test},\next_modules=[\nExtension(\n'html5_parser.html_parser',\ninclude_dirs=include_dirs(),\nlibraries=libraries(),\nlibrary_dirs=library_dirs(),\nextra_compile_args=cargs,\nsources=list(map(str, src_files)))])\n"
    },
    {
        "package_name": "htpasswd-2.3",
        "file_list": "basic.py group.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom sys import version_info\n\nfrom setuptools import setup, find_packages\n\npython_version = \"%s.%s\" % (version_info[0], version_info[1])\n\nif python_version == \"2.7\":\nrequires = [\"orderedmultidict>=0.7\", \"future\"]\nelse:\nrequires = [\"orderedmultidict>=0.7\"]\n\nsetup(\nname=\"htpasswd\",\nversion=\"2.3\",\npackages=[\"htpasswd\"],\ninstall_requires=requires,\nauthor=\"Ilya Otyutskiy\",\nauthor_email=\"ilya.otyutskiy@icloud.com\",\nmaintainer=\"Ilya Otyutskiy\",\nurl=\"https:\/\/github.com\/thesharp\/htpasswd\",\ndescription=\"Library to work with htpasswd user (basic authorization) and group files.\",\nlicense=\"MIT\"\n)\n"
    },
    {
        "package_name": "http_ece-1.1.0",
        "file_list": "__init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/python\nimport io\nimport os\n\nfrom setuptools import setup\n\nhere = os.path.abspath(os.path.dirname(__file__))\nwith io.open(os.path.join(here, 'README.rst'), encoding='utf8') as f:\nREADME = f.read()\n\nsetup(\nname='http_ece',\nversion='1.1.0',\nauthor='Martin Thomson',\nauthor_email='martin.thomson@gmail.com',\nscripts=[],\npackages=['http_ece'],\ndescription='Encrypted Content Encoding for HTTP',\nlong_description='Encipher HTTP Messages',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n],\nkeywords='crypto http',\ninstall_requires=[\n'cryptography>=2.5',\n],\ntests_require=[\n'nose',\n'mock',\n'coverage',\n'flake8',\n],\ntest_suite=\"nose.collector\",\nurl='https:\/\/github.com\/martinthomson\/encrypted-content-encoding',\nlicense='MIT'\n)\n"
    },
    {
        "package_name": "huey-2.4.3",
        "file_list": "CHANGELOG.md api.rst changes.rst conf.py consumer.rst contrib.rst django.rst guide.rst huey.jpg imports.rst index.rst installation.rst make.bat Makefile mini.rst shared_resources.rst signals.rst troubleshooting.rst api.doctree changes.doctree consumer.doctree contrib.doctree django.doctree environment.pickle guide.doctree imports.doctree index.doctree installation.doctree mini.doctree shared_resources.doctree signals.doctree troubleshooting.doctree .buildinfo api.html changes.html consumer.html contrib.html django.html genindex.html guide.html imports.html index.html installation.html mini.html objects.inv search.html searchindex.js shared_resources.html signals.html troubleshooting.html api.rst.txt changes.rst.txt consumer.rst.txt contrib.rst.txt django.rst.txt guide.rst.txt imports.rst.txt index.rst.txt installation.rst.txt mini.rst.txt shared_resources.rst.txt signals.rst.txt troubleshooting.rst.txt ajax-loader.gif basic.css classic.css comment-bright.png comment-close.png comment.png default.css doctools.js documentation_options.js down-pressed.png down.png file.png huey.jpg jquery-3.2.1.js jquery.js logo.jpg minus.png plus.png pygments.css searchtools.js sidebar.js underscore-1.3.1.js underscore.js up-pressed.png up.png websupport.js huey.jpg logo.jpg layout.html relations.html flasky.css_t small_flask.css theme.conf settings.py models.py tasks.py __init__.py models.cpython-37.pyc tasks.cpython-37.pyc __init__.cpython-37.pyc urls.py __init__.py settings.cpython-37.pyc __init__.cpython-37.pyc manage.py README app.py main.py README.md run_huey.sh run_webapp.sh tasks.py home.html views.py __init__.py app.cpython-37.pyc main.cpython-37.pyc tasks.cpython-37.pyc views.cpython-37.pyc mini.py config.py cons.sh main.py README tasks.py __init__.py config.cpython-37.pyc main.cpython-37.pyc tasks.cpython-37.pyc api.py huey_consumer.py __init__.py constants.py consumer.py consumer_options.py run_huey.py __init__.py __init__.py models.py __init__.py kyototycoon.py mini.py sql_huey.py __init__.py exceptions.py registry.py serializer.py signals.py storage.py base.py test_api.py test_consumer.py test_crontab.py test_immediate.py test_kt_huey.py test_priority.py test_registry.py test_serializer.py test_signals.py test_sql_huey.py test_storage.py test_utils.py test_wrappers.py __init__.py __main__.py utils.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "import os\nfrom setuptools import setup, find_packages\n\n\nwith open(os.path.join(os.path.dirname(__file__), 'README.rst')) as fh:\nreadme = fh.read()\n\nextras_require = {\n'backends': ['redis>=3.0.0'],\n'redis': ['redis>=3.0.0'],\n}\n\nsetup(\nname='huey',\nversion=__import__('huey').__version__,\ndescription='huey, a little task queue',\nlong_description=readme,\nauthor='Charles Leifer',\nauthor_email='coleifer@gmail.com',\nurl='http:\/\/github.com\/coleifer\/huey\/',\npackages=find_packages(),\nextras_require=extras_require,\npackage_data={\n'huey': [\n],\n},\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n],\ntest_suite='runtests.collect_tests',\nentry_points={\n'console_scripts': [\n'huey_consumer = huey.bin.huey_consumer:consumer_main'\n]\n},\nscripts=['huey\/bin\/huey_consumer.py'],\n)\n"
    },
    {
        "package_name": "hvac-0.11.2",
        "file_list": "adapters.py approle.py aws.py azure.py cert.py gcp.py github.py jwt.py kubernetes.py ldap.py mfa.py oidc.py okta.py radius.py token.py userpass.py __init__.py active_directory.py aws.py azure.py consul.py database.py gcp.py identity.py kv.py kv_v1.py kv_v2.py pki.py rabbitmq.py transform.py transit.py __init__.py audit.py auth.py capabilities.py health.py init.py key.py leader.py lease.py mount.py namespace.py policy.py raft.py seal.py system_backend_mixin.py wrapping.py __init__.py vault_api_base.py vault_api_category.py __init__.py aws_utils.py approle.py aws.py azure.py client.py gcp.py identity.py transit.py __init__.py exceptions.py utils.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nfrom setuptools import setup, find_packages\n\n\ndef load_long_description():\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\nreturn long_description\n\n\nsetup(\nname=\"hvac\",\nversion=\"0.11.2\",\ndescription=\"HashiCorp Vault API client\",\nlong_description=load_long_description(),\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Ian Unruh <ianunruh@gmail.com>, Jeffrey Hogan <jeff.hogan1@gmail.com>\",\nauthor_email=\"admin@python-hvac.org\",\nurl=\"https:\/\/github.com\/hvac\/hvac\",\nkeywords=[\"hashicorp\", \"vault\"],\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n],\npackages=find_packages(exclude=[\"docs*\", \"tests*\"]),\npython_requires=\">=2.7\",\ninstall_requires=[\n\"requests>=2.21.0\",\n\"six>=1.5.0\",\n],\ninclude_package_data=True,\npackage_data={\"hvac\": [\"version\"]},\nextras_require={\"parser\": [\"pyhcl>=0.3.10\"]},\n)\n"
    },
    {
        "package_name": "hvplot-0.8.0",
        "file_list": "console.png console_server.gif diagram.png diagram.svg hvplot-wm.png streamz_demo.gif crime.csv datasets.yaml homepage.ipynb points.ipynb polygons.ipynb andrewscurves.ipynb area.ipynb bar.ipynb barh.ipynb bivariate.ipynb box.ipynb errorbars.ipynb heatmap.ipynb hexbin.ipynb hist.ipynb kde.ipynb labels.ipynb lagplot.ipynb line.ipynb ohlc.ipynb parallelcoordinates.ipynb scatter.ipynb scattermatrix.ipynb step.ipynb table.ipynb violin.ipynb contour.ipynb contourf.ipynb image.ipynb quadmesh.ipynb rgb.ipynb vectorfield.ipynb Customization.ipynb Geographic_Data.ipynb Gridded_Data.ipynb simple.svg Interactive.ipynb Introduction.ipynb NetworkX.ipynb Pandas_API.ipynb Plotting.ipynb Plotting_Extensions.ipynb Plotting_with_Matplotlib.ipynb Plotting_with_Plotly.ipynb Statistical_Plots.ipynb Streaming.ipynb Subplots.ipynb Timeseries_Data.ipynb Viewing.ipynb Widgets.ipynb .version backend_transforms.py converter.py cudf.py dask.py console.png console_server.gif diagram.png diagram.svg hvplot-wm.png streamz_demo.gif crime.csv datasets.yaml homepage.ipynb points.ipynb polygons.ipynb andrewscurves.ipynb area.ipynb bar.ipynb barh.ipynb bivariate.ipynb box.ipynb errorbars.ipynb heatmap.ipynb hexbin.ipynb hist.ipynb kde.ipynb labels.ipynb lagplot.ipynb line.ipynb ohlc.ipynb parallelcoordinates.ipynb scatter.ipynb scattermatrix.ipynb step.ipynb table.ipynb violin.ipynb contour.ipynb contourf.ipynb image.ipynb quadmesh.ipynb rgb.ipynb vectorfield.ipynb Customization.ipynb Geographic_Data.ipynb Gridded_Data.ipynb simple.svg Interactive.ipynb Introduction.ipynb NetworkX.ipynb Pandas_API.ipynb Plotting.ipynb Plotting_Extensions.ipynb Plotting_with_Matplotlib.ipynb Plotting_with_Plotly.ipynb Statistical_Plots.ipynb Streaming.ipynb Subplots.ipynb Timeseries_Data.ipynb Viewing.ipynb Widgets.ipynb ibis.py intake.py interactive.py networkx.py pandas.py andrews_curves.py core.py lag_plot.py parallel_coordinates.py scatter_matrix.py __init__.py sample_data.py streamz.py testcore.py testscattermatrix.py __init__.py testbackend_transforms.py testcharts.py testgeo.py testgridplots.py testhelp.py testinteractive.py testnetworkx.py testoperations.py testoptions.py testoverrides.py testpanel.py testpatch.py testplotting.py teststreaming.py testtransforms.py testutil.py __init__.py ui.py util.py utilities.py xarray.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py",
        "setup.py": "import json\nimport os\nimport sys\nimport shutil\n\nfrom setuptools import setup, find_packages\n\nimport pyct.build\n\ndef get_setup_version(reponame):\n\"\"\"\nHelper to get the current version from either git describe or the\n.version file (if available).\n\"\"\"\nbasepath = os.path.split(__file__)[0]\nversion_file_path = os.path.join(basepath, reponame, '.version')\ntry:\nfrom param import version\nexcept:\nversion = None\nif version is not None:\nreturn version.Version.setup_version(basepath, reponame, archive_commit=\"$Format:%h$\")\nelse:\nprint(\"WARNING: param>=1.6.0 unavailable. If you are installing a package, this warning can safely be ignored. If you are creating a package or otherwise operating in a git repository, you should install param>=1.6.0.\")\nreturn json.load(open(version_file_path))['version_string']\n\n\n########## dependencies ##########\n\ninstall_requires = [\n'bokeh >=1.0.0',\n'colorcet >=2',\n'holoviews >=1.11.0',\n'pandas',\n'numpy>=1.15',\n'packaging',\n]\n\n_examples = [\n'geoviews >=1.6.0',\n'numba >=0.51.0',\n'geopandas >=0.9.0',\n'xarray >=0.18.2',\n'networkx >=2.6.3',\n'streamz >=0.3.0',\n'intake >=0.6.5',\n'intake-parquet >=0.2.3',\n'intake-xarray >=0.5.0',\n'dask >=2021.3.0',\n'datashader >=0.6.5',\n'notebook >=5.4',\n'rasterio >=1.2.6',\n'cartopy >= 0.18.0',\n'pyproj >=3.0.1',\n's3fs >=2022.1.0',\n'scipy >=1.5.3',\n'pillow >=8.2.0',\n'selenium >=3.141.0',\n'spatialpandas >=0.4.3',\n'scikit-image >=0.17.2',\n'python-snappy >=0.6.0',\n'pooch >=1.6.0',\n'fiona >=1.8.18',\n# Extra dependency of cartopy on Python 3.6 only\n'pyepsg >=0.4.0',\n'matplotlib',\n'plotly',\n]\n\n_examples_extra = _examples + [\n'pygraphviz',\n]\n\nextras_require = {\n'tests': [\n'codecov',\n'flake8',\n'parameterized',\n'pytest',\n'pytest-cov',\n'nbsmoke >=0.2.0',\n'numpy >=1.7',\n'matplotlib',\n'plotly',\n'xarray',\n'pooch',\n'scipy',\n],\n'examples': _examples,\n'examples_extra': _examples_extra,\n'doc': _examples_extra + [\n'nbsite >=0.7.1',\n'pydata-sphinx-theme',\n'sphinx-copybutton',\n]\n}\n\n# until pyproject.toml\/equivalent is widely supported (setup_requires\n# doesn't work well with pip)\nextras_require['build'] = [\n'param >=1.6.1',\n'pyct >=0.4.4',\n'setuptools' # should make this pip now\n]\n\nextras_require['all'] = sorted(set(sum(extras_require.values(), [])))\n\n########## metadata for setuptools ##########\n\nsetup_args = dict(\nname='hvplot',\nversion=get_setup_version(\"hvplot\"),\ndescription='A high-level plotting API for the PyData ecosystem built on HoloViews.',\nlong_description=open(\"README.md\").read(),\nlong_description_content_type=\"text\/markdown\",\nauthor= \"Philipp Rudiger\",\nauthor_email= \"developers@pyviz.org\",\nmaintainer=\"HoloViz developers\",\nmaintainer_email=\"developers@pyviz.org\",\npackages=find_packages(),\ninclude_package_data=True,\nplatforms=['Windows', 'Mac OS X', 'Linux'],\nlicense='BSD',\nurl='https:\/\/hvplot.pyviz.org',\nclassifiers = [\n\"License :: OSI Approved :: BSD License\",\n\"Development Status :: 5 - Production\/Stable\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Operating System :: OS Independent\",\n\"Intended Audience :: Science\/Research\",\n\"Intended Audience :: Developers\",\n\"Natural Language :: English\",\n\"Topic :: Scientific\/Engineering\",\n\"Topic :: Software Development :: Libraries\"],\npython_requires=\">=3.6\",\ninstall_requires=install_requires,\nextras_require=extras_require,\ntests_require=extras_require['tests'],\nentry_points={\n'console_scripts': [],\n'pandas_plotting_backends': [\n'holoviews = hvplot:plotting',\n],\n},\n)\n\n\nif __name__ == '__main__':\nexample_path = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n'hvplot','examples')\n\nif 'develop' not in sys.argv and 'egg_info' not in sys.argv:\npyct.build.examples(example_path, __file__, force=True)\n\nsetup(**setup_args)\n\nif os.path.isdir(example_path):\nshutil.rmtree(example_path)\n"
    },
    {
        "package_name": "hyperlink-21.0.0",
        "file_list": ".coveragerc CHANGELOG.md api.rst conf.py design.rst faq.rst hyperlink_logo_proto.png hyperlink_logo_v1.png index.rst make.bat Makefile page.html LICENSE MANIFEST.in PKG-INFO pyproject.toml pytest.ini README.md setup.cfg setup.py hypothesis.py idna-tables-properties.csv.gz py.typed common.py test_common.py test_decoded_url.py test_hypothesis.py test_parse.py test_scheme_registration.py test_socket.py test_url.py __init__.py _socket.py _url.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt tox.ini",
        "setup.py": "\"\"\"The humble, but powerful, URL runs everything around us. Chances\nare you've used several just to read this text.\n\nHyperlink is a featureful, pure-Python implementation of the URL, with\nan emphasis on correctness. MIT licensed.\n\nSee the docs at http:\/\/hyperlink.readthedocs.io.\n\"\"\"\n\nfrom setuptools import find_packages, setup\n\n\n__author__ = \"Mahmoud Hashemi and Glyph Lefkowitz\"\n__version__ = \"21.0.0\"\n__contact__ = \"mahmoud@hatnote.com\"\n__url__ = \"https:\/\/github.com\/python-hyper\/hyperlink\"\n__license__ = \"MIT\"\n\n\nsetup(\nname=\"hyperlink\",\nversion=__version__,\ndescription=\"A featureful, immutable, and correct URL for Python.\",\nlong_description=__doc__,\nauthor=__author__,\nauthor_email=__contact__,\nurl=__url__,\npackages=find_packages(where=\"src\"),\npackage_dir={\"\": \"src\"},\npackage_data=dict(hyperlink=[\"py.typed\", \"idna-tables-properties.csv.gz\"]),\nzip_safe=False,\nlicense=__license__,\nplatforms=\"any\",\ninstall_requires=[\"idna>=2.5\", 'typing ; python_version<\"3.5\"'],\npython_requires=\">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\",\nclassifiers=[\n\"Topic :: Utilities\",\n\"Intended Audience :: Developers\",\n\"Topic :: Software Development :: Libraries\",\n\"Development Status :: 5 - Production\/Stable\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.6\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"License :: OSI Approved :: MIT License\",\n],\n)\n\n\"\"\"\nA brief checklist for release:\n\n* tox\n* git commit (if applicable)\n* Bump setup.py version off of -dev\n* git commit -a -m \"bump version for x.y.z release\"\n* python setup.py sdist bdist_wheel upload\n* bump docs\/conf.py version\n* git commit\n* git tag -a vx.y.z -m \"brief summary\"\n* write CHANGELOG\n* git commit\n* bump setup.py version onto n+1 dev\n* git commit\n* git push\n\n\"\"\"\n"
    },
    {
        "package_name": "hyperopt-0.2.7",
        "file_list": "algobase.py anneal.py atpe.py model-gamma-configuration.json model-gamma.txt model-nEICandidates-configuration.json model-nEICandidates.txt model-resultFilteringAgeMultiplier-configuration.json model-resultFilteringAgeMultiplier.txt model-resultFilteringLossRankMultiplier-configuration.json model-resultFilteringLossRankMultiplier.txt model-resultFilteringMode-configuration.json model-resultFilteringMode.txt model-resultFilteringRandomProbability-configuration.json model-resultFilteringRandomProbability.txt model-secondaryCorrelationExponent-configuration.json model-secondaryCorrelationExponent.txt model-secondaryCorrelationMultiplier-configuration.json model-secondaryCorrelationMultiplier.txt model-secondaryCutoff-configuration.json model-secondaryCutoff.txt model-secondaryFixedProbability-configuration.json model-secondaryFixedProbability.txt model-secondaryLockingMode-configuration.json model-secondaryLockingMode.txt model-secondaryProbabilityMode-configuration.json model-secondaryProbabilityMode.txt model-secondaryTopLockingPercentile-configuration.json model-secondaryTopLockingPercentile.txt scaling_model.json base.py criteria.py early_stop.py exceptions.py fmin.py graph_viz.py hp.py ipy.py main.py mix.py mongoexp.py plotting.py progress.py base.py stochastic.py test_base.py test_stochastic.py __init__.py test_base.cpython-37-pytest-6.2.5.pyc test_base.cpython-37.pyc test_base.cpython-39-pytest-6.2.5.pyc test_stochastic.cpython-37-pytest-6.2.5.pyc test_stochastic.cpython-37.pyc test_stochastic.cpython-39-pytest-6.2.5.pyc __init__.cpython-37.pyc __init__.cpython-39.pyc __init__.py base.cpython-37.pyc base.cpython-39.pyc stochastic.cpython-37.pyc stochastic.cpython-39.pyc __init__.cpython-37.pyc __init__.cpython-39.pyc pyll_utils.py rand.py rdists.py spark.py std_out_err_redirect_tqdm.py test_mongoexp.py test_spark.py __init__.py test_base.py test_anneal.py test_atpe_basic.py test_criteria.py test_domains.py test_fmin.py test_ipy.py test_pchoice.py test_plotting.py test_progress.py test_pyll_utils.py test_rand.py test_randint.py test_rdists.py test_tpe.py test_utils.py test_vectorize.py test_webpage.py __init__.py test_anneal.cpython-37-pytest-6.2.5.pyc test_atpe_basic.cpython-37-pytest-6.2.5.pyc test_base.cpython-37-pytest-6.2.5.pyc test_criteria.cpython-37-pytest-6.2.5.pyc test_domains.cpython-37-pytest-6.2.5.pyc test_fmin.cpython-37-pytest-6.2.5.pyc test_ipy.cpython-37-pytest-6.2.5.pyc test_pchoice.cpython-37-pytest-6.2.5.pyc test_plotting.cpython-37-pytest-6.2.5.pyc test_progress.cpython-37-pytest-6.2.5.pyc test_pyll_utils.cpython-37-pytest-6.2.5.pyc test_rand.cpython-37-pytest-6.2.5.pyc test_randint.cpython-37-pytest-6.2.5.pyc test_rdists.cpython-37-pytest-6.2.5.pyc test_tpe.cpython-37-pytest-6.2.5.pyc test_utils.cpython-37-pytest-6.2.5.pyc test_vectorize.cpython-37-pytest-6.2.5.pyc test_webpage.cpython-37-pytest-6.2.5.pyc __init__.cpython-37.pyc __init__.py test_anneal.cpython-37-pytest-6.2.5.pyc test_anneal.cpython-37.pyc test_anneal.cpython-39-pytest-6.2.5.pyc test_atpe_basic.cpython-37-pytest-6.2.5.pyc test_atpe_basic.cpython-37.pyc test_atpe_basic.cpython-39-pytest-6.2.5.pyc test_base.cpython-37-pytest-6.2.5.pyc test_base.cpython-37.pyc test_base.cpython-39-pytest-6.2.5.pyc test_criteria.cpython-37-pytest-6.2.5.pyc test_criteria.cpython-37.pyc test_criteria.cpython-39-pytest-6.2.5.pyc test_domains.cpython-37-pytest-6.2.5.pyc test_domains.cpython-37.pyc test_domains.cpython-39-pytest-6.2.5.pyc test_fmin.cpython-37-pytest-6.2.5.pyc test_fmin.cpython-37.pyc test_fmin.cpython-39-pytest-6.2.5.pyc test_ipy.cpython-37-pytest-6.2.5.pyc test_ipy.cpython-37.pyc test_ipy.cpython-39-pytest-6.2.5.pyc test_mongoexp.cpython-37-pytest-6.2.5.pyc test_mongoexp.cpython-37.pyc test_mongoexp.cpython-39-pytest-6.2.5.pyc test_pchoice.cpython-37-pytest-6.2.5.pyc test_pchoice.cpython-37.pyc test_pchoice.cpython-39-pytest-6.2.5.pyc test_plotting.cpython-37-pytest-6.2.5.pyc test_plotting.cpython-37.pyc test_plotting.cpython-39-pytest-6.2.5.pyc test_progress.cpython-37-pytest-6.2.5.pyc test_progress.cpython-37.pyc test_progress.cpython-39-pytest-6.2.5.pyc test_pyll_utils.cpython-37-pytest-6.2.5.pyc test_pyll_utils.cpython-37.pyc test_pyll_utils.cpython-39-pytest-6.2.5.pyc test_rand.cpython-37-pytest-6.2.5.pyc test_rand.cpython-37.pyc test_rand.cpython-39-pytest-6.2.5.pyc test_randint.cpython-37-pytest-6.2.5.pyc test_randint.cpython-37.pyc test_randint.cpython-39-pytest-6.2.5.pyc test_rdists.cpython-37-pytest-6.2.5.pyc test_rdists.cpython-37.pyc test_rdists.cpython-39-pytest-6.2.5.pyc test_spark.cpython-37-pytest-6.2.5.pyc test_spark.cpython-37.pyc test_spark.cpython-39-pytest-6.2.5.pyc test_tpe.cpython-37-pytest-6.2.5.pyc test_tpe.cpython-37.pyc test_tpe.cpython-39-pytest-6.2.5.pyc test_utils.cpython-37-pytest-6.2.5.pyc test_utils.cpython-37.pyc test_utils.cpython-39-pytest-6.2.5.pyc test_vectorize.cpython-37-pytest-6.2.5.pyc test_vectorize.cpython-37.pyc test_vectorize.cpython-39-pytest-6.2.5.pyc test_webpage.cpython-37-pytest-6.2.5.pyc test_webpage.cpython-37.pyc test_webpage.cpython-39-pytest-6.2.5.pyc __init__.cpython-37.pyc __init__.cpython-39.pyc tpe.py utils.py vectorize.py __init__.py algobase.cpython-37.pyc algobase.cpython-39.pyc anneal.cpython-37.pyc anneal.cpython-39.pyc atpe.cpython-37.pyc atpe.cpython-39.pyc base.cpython-37.pyc base.cpython-39.pyc criteria.cpython-37.pyc criteria.cpython-39.pyc early_stop.cpython-37.pyc early_stop.cpython-39.pyc exceptions.cpython-37.pyc exceptions.cpython-39.pyc fmin.cpython-37.pyc fmin.cpython-39.pyc hp.cpython-37.pyc hp.cpython-39.pyc mix.cpython-37.pyc mix.cpython-39.pyc mongoexp.cpython-37.pyc plotting.cpython-39.pyc progress.cpython-37.pyc progress.cpython-39.pyc pyll_utils.cpython-37.pyc pyll_utils.cpython-39.pyc rand.cpython-37.pyc rand.cpython-39.pyc rdists.cpython-37.pyc rdists.cpython-39.pyc spark.cpython-37.pyc spark.cpython-39.pyc std_out_err_redirect_tqdm.cpython-37.pyc std_out_err_redirect_tqdm.cpython-39.pyc tpe.cpython-37.pyc tpe.cpython-39.pyc utils.cpython-37.pyc utils.cpython-39.pyc vectorize.cpython-37.pyc vectorize.cpython-39.pyc __init__.cpython-37.pyc __init__.cpython-39.pyc dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import io\nimport re\n\nimport setuptools\n\n\nwith open(\"hyperopt\/__init__.py\", encoding=\"utf8\") as f:\nversion = re.search(r\"__version__ = \\\"(.*?)\\\"\", f.read()).group(1)\nif version is None:\nraise ImportError(\"Could not find __version__ in hyperopt\/__init__.py\")\n\nsetuptools.setup(\nname=\"hyperopt\",\nversion=version,\npackages=setuptools.find_packages(include=[\"hyperopt*\"]),\nentry_points={\"console_scripts\": [\"hyperopt-mongo-worker=hyperopt.mongoexp:main\"]},\nurl=\"https:\/\/hyperopt.github.io\/hyperopt\",\nauthor=\"James Bergstra\",\nauthor_email=\"james.bergstra@gmail.com\",\ndescription=\"Distributed Asynchronous Hyperparameter Optimization\",\nlong_description=\"\",\nclassifiers=[\n\"Development Status :: 3 - Alpha\",\n\"Intended Audience :: Education\",\n\"Intended Audience :: Science\/Research\",\n\"Intended Audience :: Developers\",\n\"Environment :: Console\",\n\"License :: OSI Approved :: BSD License\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: POSIX\",\n\"Operating System :: Unix\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 3\",\n\"Topic :: Scientific\/Engineering\",\n\"Topic :: Software Development\",\n],\nplatforms=[\"Linux\", \"OS-X\", \"Windows\"],\nlicense=\"BSD\",\nkeywords=\"Bayesian optimization hyperparameter model selection\",\ninclude_package_data=True,\ninstall_requires=[\n\"numpy\",\n\"scipy\",\n\"six\",\n\"networkx>=2.2\",\n\"future\",\n\"tqdm\",\n\"cloudpickle\",\n\"py4j\",\n],\nextras_require={\n\"SparkTrials\": \"pyspark\",\n\"MongoTrials\": \"pymongo\",\n\"ATPE\": [\"lightgbm\", \"scikit-learn\"],\n\"dev\": [\"black\", \"pre-commit\", \"nose\", \"pytest\"],\n},\ntests_require=[\"nose\", \"pytest\"],\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "idna-ssl-1.1.0",
        "file_list": "dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt idna_ssl.py LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "import io\nimport os\nimport re\nimport sys\n\nfrom setuptools import setup\n\nneeds_pytest = 'pytest' in set(sys.argv)\n\n\ndef get_version():\nregex = r\"__version__\\s=\\s\\'(?P<version>[\\d\\.ab]+?)\\'\"\n\npath = ('idna_ssl.py',)\n\nreturn re.search(regex, read(*path)).group('version')\n\n\ndef read(*parts):\nfilename = os.path.join(os.path.abspath(os.path.dirname(__file__)), *parts)\n\nwith io.open(filename, encoding='utf-8', mode='rt') as fp:\nreturn fp.read()\n\n\nsetup(\nname='idna-ssl',\nversion=get_version(),\nauthor='Victor Kovtun',\nauthor_email='hellysmile@gmail.com',\nurl='https:\/\/github.com\/aio-libs\/idna-ssl',\ndescription='Patch ssl.match_hostname for Unicode(idna) domains support',\nlong_description=read('README.rst'),\nsetup_requires=['pytest-runner'] if needs_pytest else [],\ntests_require=['pytest', 'pytest-asyncio', 'pytest-cov', 'aiohttp>2.3'],\npy_modules=['idna_ssl'],\ninstall_requires=['idna>=2.0'],\ninclude_package_data=True,\nzip_safe=False,\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n],\nkeywords=['ssl', 'Unicode', 'idna', 'match_hostname'],\n)\n"
    },
    {
        "package_name": "image-1.5.33",
        "file_list": "apps.py fields.py forms.py misc.py models.py settings.py storage.py img.py __init__.py urls.py utils.py videothumbs.py video_field.py views.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README setup.cfg setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom distutils.core import setup\nfrom setuptools import find_packages\n\nfrom image import VERSION\n\nsetup(\nname='image',\nversion='.'.join((str(x) for x in VERSION)),\nauthor=u'Francesc Ortiz',\nauthor_email='francescortiz@gmail.com',\npackages=find_packages(),\nurl='https:\/\/github.com\/francescortiz\/image',\nlicense='BSD',\ndescription='Django application that provides cropping, resizing, ' + \\\n'thumbnailing, overlays and masking for images and videos with ' + \\\n'the ability to set the center of attention,',\nlong_description='Django application that provides cropping, resizing, ' + \\\n'thumbnailing, overlays and masking for images and videos with ' + \\\n'the ability to set the center of attention,',\nzip_safe=False,\ninclude_package_data=True,\ninstall_requires=[\n'pillow', 'django', 'six',\n],\n)\n"
    },
    {
        "package_name": "imagecodecs-2022.8.8",
        "file_list": "bitshuffle.c bitshuffle.h bitshuffle_core.c bitshuffle_core.h bitshuffle_internals.h iochain.c iochain.h LICENSE README.rst License.txt ricecomp.c LICENSE lj92.c lj92.h Changes config.h crc32.h LICENSE lzf.h lzfP.h lzf_c.c lzf_d.c README LICENSE spng.c spng.h color.c color.h LICENSE opj_apps_config.h COPYRIGHT pg_lzcompress.c pg_lzcompress.h qoi.h README.md CHANGES.rst bitshuffle.pxd blosc.pxd blosc2.pxd brotli.pxd brunsli.pxd cfitsio.pxd charls.pxd giflib.pxd imagecodecs.py imcd.c imcd.h imcd.pxd jetraw.pxd jpegsof3.cpp jpegsof3.h jpegsof3.pxd jxrlib.pxd lcms2.pxd lerc.pxd libaec.pxd libavif.pxd libbzip2.pxd libdeflate.pxd libheif.pxd libjpeg.pxd libjpeg_turbo.pxd libjxl.pxd liblzf.pxd liblzma.pxd libpng.pxd libspng.pxd libtiff.pxd libwebp.pxd LICENSE-aom LICENSE-bitshuffle LICENSE-blosc LICENSE-blosc2 LICENSE-brotli LICENSE-brunsli LICENSE-bzip2 LICENSE-cfitsio LICENSE-charls LICENSE-dav1d LICENSE-fastlz LICENSE-giflib LICENSE-highway LICENSE-jetraw LICENSE-jpeg LICENSE-jpg_0xc3 LICENSE-jxrlib LICENSE-lcms2 LICENSE-lerc LICENSE-libaec LICENSE-libaivf LICENSE-libdeflate LICENSE-libjpeg LICENSE-libjpeg-turbo LICENSE-libjxl LICENSE-liblj92 LICENSE-liblzma LICENSE-libmng LICENSE-libpng LICENSE-libspng LICENSE-libtiff LICENSE-libwebp LICENSE-lz4 LICENSE-lzf LICENSE-mozjpeg LICENSE-openjpeg LICENSE-postgresql LICENSE-qoi LICENSE-rav1e LICENSE-snappy LICENSE-zfp LICENSE-zlib LICENSE-zlib-ng LICENSE-zopfli LICENSE-zstd PATENTS-rav1e lj92.pxd lz4.pxd mozjpeg.pxd numcodecs.py openjpeg.pxd bitshuffle.diff brunsli-static.diff lerc.diff libaec.diff libjpeg-turbo.diff liblzf.diff python-lzf.diff pg_lzcompress.pxd qoi.pxd snappy.pxd szlib.pxd zfp-0.5.pxd zfp.pxd zlib.pxd zlib_ng.pxd zopfli.pxd zstd.pxd _aec.c _aec.pyx _apng.c _apng.pyx _avif.c _avif.pyx _bitshuffle.c _bitshuffle.pyx _blosc.c _blosc.pyx _blosc2.c _blosc2.pyx _brotli.c _brotli.pyx _brunsli.c _brunsli.pyx _bz2.c _bz2.pyx _cms.c _cms.pyx _deflate.c _deflate.pyx _gif.c _gif.pyx _heif.c _heif.pyx _imagecodecs.py _imcd.c _imcd.pyx _jetraw.c _jetraw.pyx _jpeg12.c _jpeg12.pyx _jpeg2k.c _jpeg2k.pyx _jpeg8.c _jpeg8.pyx _jpegls.c _jpegls.pyx _jpegsof3.c _jpegsof3.pyx _jpegxl.c _jpegxl.pyx _jpegxr.c _jpegxr.pyx _lerc.c _lerc.pyx _ljpeg.c _ljpeg.pyx _lz4.c _lz4.pyx _lz4f.c _lz4f.pyx _lzf.c _lzf.pyx _lzma.c _lzma.pyx _mozjpeg.c _mozjpeg.pyx _pglz.c _pglz.pyx _png.c _png.pyx _qoi.c _qoi.pyx _rcomp.c _rcomp.pyx _shared.c _shared.pxd _shared.pxi _shared.pyx _snappy.c _snappy.pyx _spng.c _spng.pyx _szip.pyx _template.pyx _tiff.c _tiff.pyx _webp.c _webp.pyx _zfp.c _zfp.pyx _zlib.c _zlib.pyx _zlibng.c _zlibng.pyx _zopfli.c _zopfli.pyx _zstd.c _zstd.pyx __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py 2dht.sof3.jpg 3dht.sof3.jpg bytes.bin bytes.bitorder.bin bytes.jpeg8.bin bytes.jpeg8_tables.bin bytes.lzw_horizontal.bin conftest.py corrupt.lzw.bin fixedpoint.jxr gray.u1.br gray.u1.jpg gray.u2.jpg gray16.sof3.jpg gray8.sof3.jpg image_noeoi.bin image_noeoi.lzw.bin int8_4bit.j2k bluemarble_256_256_3_byte.lerc2 california_400_400_1_float.lerc2 readme.txt world.lerc1 test_p256n01-basic.rz test_p256n01-restricted.rz test_p256n01.dat test_p256n02-basic.rz test_p256n02-restricted.rz test_p256n02.dat test_p256n03-basic.rz test_p256n03-restricted.rz test_p256n03.dat test_p256n04-basic.rz test_p256n04-restricted.rz test_p256n04.dat test_p256n05.dat test_p256n05.rz test_p256n06.dat test_p256n06.rz test_p256n07.dat test_p256n07.rz test_p256n08.dat test_p256n08.rz test_p256n09.dat test_p256n09.rz test_p256n10.dat test_p256n10.rz test_p256n11.dat test_p256n11.rz test_p256n12.dat test_p256n12.rz test_p256n13.dat test_p256n13.rz test_p256n14.dat test_p256n14.rz test_p256n15.dat test_p256n15.rz test_p256n16.dat test_p256n16.rz test_p512n17.dat test_p512n17.rz test_p512n18.dat test_p512n18.rz test_p512n19.dat test_p512n19.rz test_p512n20.dat test_p512n20.rz test_p512n21.dat test_p512n21.rz test_p512n22.dat test_p512n22.rz test_p512n23.dat test_p512n23.rz test_p512n24.dat test_p512n24.rz test_p512n25.dat test_p512n25.rz test_p512n26.dat test_p512n26.rz test_p512n27.dat test_p512n27.rz test_p512n28.dat test_p512n28.rz test_p512n29.dat test_p512n29.rz test_p512n30.dat test_p512n30.rz test_p512n31.dat test_p512n31.rz test_p512n32.dat test_p512n32.rz README121BTest.txt notes.txt pal8.png rgb.bin rgb.floatpred_be.bin rgb.floatpred_le.bin rgb.u1.br rgb.u1.jpg rgb.u1.npy rgb.u2.jpg rgb24.jp2 rgb24.sof3.jpg rgba.u1.bin rgba.u1.br rgba.u1.jls rgba.u1.jpg rgba.u1.pal.png rgba.u1.strict_disabled.avif rgba.u1.webp rgba.u2.jpg rgba32.jxr rgba32.jxr.bin rrggbb.floatpred_be.bin rrggbb.floatpred_le.bin sample.bin testdata.npy test_imagecodecs.py gray.b1.tif gray.bigendian.u2.tif gray.bigtiff.u1.tif gray.c16.tif gray.c8.tif gray.contig.u1.tif gray.depth.deflate.u1.tif gray.depth.u1.tif gray.f2.tif gray.f4.tif gray.f8.tif gray.i1.tif gray.i2.tif gray.i4.tif gray.i8.tif gray.lerc.u1.tif gray.lzma.u1.tif gray.lzma.u2.tif gray.movie.u2.tif gray.none.u1.tif gray.one.b1.tif gray.one.f2.tif gray.one.f4.tif gray.one.f8.tif gray.one.i1.tif gray.one.i2.tif gray.one.i4.tif gray.one.i8.tif gray.one.u1.tif gray.one.u2.tif gray.one.u4.tif gray.one.u8.tif gray.packbits.u1.tif gray.packbits.u2.tif gray.separate.u1.tif gray.series.u1.tif gray.stack.u1.tif gray.tiled.f4.tif gray.tiled.none.u1.tif gray.tiled.u1.tif gray.tiled.u2.tif gray.u1.tif gray.u2.tif gray.u4.tif gray.u8.tif gray.zstd.u1.tif gray.zstd.u2.tif readme.txt rgb.predict.u1.tif rgb.separate.tiled.u1.tif rgb.separate.u1.tif rgb.tiled.jpeg.u1.tif rgb.tiled.jpeg.u2.tif rgb.tiled.lerc.u1.tif rgb.tiled.lzma.u1.tif rgb.tiled.packbits.u1.tif rgb.tiled.u1.tif rgb.tiled.webp.u1.tif rgb.tiled.zstd.u1.tif rgb.u1.tif rgba.separate.tiled.u1.tif rgba.separate.u1.tif rgba.tiled.u1.tif rgba.u1.tif words.bin words.jpeg12.bin words.jpeg12_tables.bin ycbc.j2k",
        "setup.py": "# imagecodecs\/setup.py\n\n\"\"\"Imagecodecs package Setuptools script.\"\"\"\n\nimport sys\nimport os\nimport re\nimport shutil\nimport warnings\n\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext as _build_ext\n\ntry:\nimport pip\nfrom packaging.version import parse\nimport platform\n\nif parse(pip.__version__) < parse('19.3') and platform.system() == 'Linux':\nprint('Installing imagecodecs wheels requires pip >= 19.3')\nexcept ImportError:\npass\n\nbuildnumber = '' # e.g 'pre1' or 'post1'\n\nbase_dir = os.path.dirname(os.path.abspath(__file__))\n\n\ndef search(pattern, code, flags=0):\n# return first match for pattern in code\nmatch = re.search(pattern, code, flags)\nif match is None:\nraise ValueError(f'{pattern!r} not found')\nreturn match.groups()[0]\n\n\nwith open(os.path.join(base_dir, 'imagecodecs\/imagecodecs.py')) as fh:\ncode = fh.read().replace('\\r\\n', '\\n').replace('\\r', '\\n')\n\nversion = search(r\"__version__ = '(.*?)'\", code)\nversion += ('.' + buildnumber) if buildnumber else ''\n\ndescription = search(r'\"\"\"(.*)\\.(?:\\r\\n|\\r|\\n)', code)\n\nreadme = search(\nr'(?:\\r\\n|\\r|\\n){2}r\"\"\"(.*)\"\"\"(?:\\r\\n|\\r|\\n){2}[__version__|from]',\ncode,\nre.MULTILINE | re.DOTALL,\n)\nreadme = '\\n'.join(\n[description, '=' * len(description)] + readme.splitlines()[1:]\n)\n\nif 'sdist' in sys.argv:\n# update README, LICENSE, and CHANGES files\n\nwith open('README.rst', 'w') as fh:\nfh.write(readme)\n\nlicense = search(\nr'(# Copyright.*?(?:\\r\\n|\\r|\\n))(?:\\r\\n|\\r|\\n)+r\"\"',\ncode,\nre.MULTILINE | re.DOTALL,\n)\nlicense = license.replace('# ', '').replace('#', '')\n\nwith open('LICENSE', 'w') as fh:\nfh.write('BSD 3-Clause License\\n\\n')\nfh.write(license)\n\nrevisions = search(\nr'(?:\\r\\n|\\r|\\n){2}(Revisions.*)- \\.\\.\\.',\nreadme,\nre.MULTILINE | re.DOTALL,\n).strip()\n\nwith open('CHANGES.rst') as fh:\nold = fh.read()\n\nold = old.split(revisions.splitlines()[-1])[-1]\nwith open('CHANGES.rst', 'w') as fh:\nfh.write(revisions.strip())\nfh.write(old)\n\n\ndef ext(**kwargs):\n\"\"\"Return Extension arguments.\"\"\"\nd = dict(\nsources=[],\ninclude_dirs=[],\nlibrary_dirs=[],\nlibraries=[],\ndefine_macros=[],\nextra_compile_args=[],\nextra_link_args=[],\ncython_compile_time_env={},\ncythonize=False,\n)\nd.update(kwargs)\nreturn d\n\n\nOPTIONS = {\n'include_dirs': ['imagecodecs'],\n'library_dirs': [],\n'libraries': ['m'] if sys.platform != 'win32' else [],\n'define_macros': [\n# ('CYTHON_LIMITED_API', '1'),\n# ('Py_LIMITED_API', '1'),\n]\n+ [('WIN32', 1)] # type: ignore\nif sys.platform == 'win32'\nelse [],\n'extra_compile_args': [],\n'extra_link_args': [],\n'cython_compile_time_env': {},\n'cythonize': False, # sys.version_info >= (3, 11)\n}\n\nEXTENSIONS = {\n'shared': ext(\ncython_compile_time_env={'IS_PYPY': 'PyPy' in sys.version},\ncythonize='PyPy' in sys.version,\n),\n'imcd': ext(sources=['imagecodecs\/imcd.c']),\n'aec': ext(libraries=['aec']),\n'apng': ext(libraries=['png']),\n'avif': ext(libraries=['avif']),\n# 'exr': ext(\n# sources=['3rdparty\/tinyexr\/tinyexr.cc'],\n# include_dirs=['3rdparty\/tinyexr'],\n# ),\n'bitshuffle': ext(\nsources=[\n'3rdparty\/bitshuffle\/bitshuffle_core.c',\n'3rdparty\/bitshuffle\/iochain.c',\n],\ninclude_dirs=['3rdparty\/bitshuffle'],\n),\n'blosc': ext(libraries=['blosc']),\n'blosc2': ext(libraries=['blosc2']),\n'brotli': ext(libraries=['brotlienc', 'brotlidec', 'brotlicommon']),\n'brunsli': ext(libraries=['brunslidec-c', 'brunslienc-c']),\n'bz2': ext(libraries=['bz2']),\n'cms': ext(libraries=['lcms2']),\n'deflate': ext(libraries=['deflate']),\n'gif': ext(libraries=['gif']),\n'heif': ext(libraries=['heif']),\n'jetraw': ext(libraries=['jetraw', 'dpcore']),\n'jpeg2k': ext(\nsources=['3rdparty\/openjpeg\/color.c'],\ninclude_dirs=['3rdparty\/openjpeg'],\nlibraries=['openjp2', 'lcms2'],\n),\n'jpeg8': ext(\nlibraries=['jpeg'],\ncython_compile_time_env={'HAVE_LIBJPEG_TURBO': True},\n),\n'jpeg12': ext(\nlibraries=['jpeg12'],\ndefine_macros=[('BITS_IN_JSAMPLE', 12)],\n),\n'jpegls': ext(libraries=['charls']),\n'jpegsof3': ext(sources=['imagecodecs\/jpegsof3.cpp']),\n'jpegxl': ext(libraries=['jxl', 'jxl_dec', 'jxl_threads']),\n'jpegxr': ext(\nlibraries=['jpegxr', 'jxrglue'],\ndefine_macros=[('__ANSI__', 1)] if sys.platform != 'win32' else [],\n),\n'lerc': ext(libraries=['Lerc']),\n'ljpeg': ext(\nsources=['3rdparty\/liblj92\/lj92.c'], include_dirs=['3rdparty\/liblj92']\n),\n'lz4': ext(libraries=['lz4']),\n'lz4f': ext(libraries=['lz4']),\n'lzf': ext(\nsources=['3rdparty\/liblzf\/lzf_c.c', '3rdparty\/liblzf\/lzf_d.c'],\ninclude_dirs=['3rdparty\/liblzf'],\n),\n'lzma': ext(libraries=['lzma']),\n'mozjpeg': ext(libraries=['mozjpeg']),\n# 'nvjpeg': ext(libraries=['nvjpeg', 'cuda']),\n# 'nvjpeg2k': ext(libraries=['nvjpeg2k', 'cuda']),\n'pglz': ext(\nsources=['3rdparty\/postgresql\/pg_lzcompress.c'],\ninclude_dirs=['3rdparty\/postgresql'],\n),\n'png': ext(libraries=['png']),\n'qoi': ext(\ninclude_dirs=['3rdparty\/qoi'],\ndefine_macros=[('QOI_IMPLEMENTATION', 1)],\n),\n'rcomp': ext(libraries=['cfitsio', 'z']),\n'snappy': ext(libraries=['snappy']),\n'spng': ext(\nsources=['3rdparty\/libspng\/spng.c'],\ninclude_dirs=['3rdparty\/libspng'],\ndefine_macros=[('SPNG_STATIC', 1)],\nlibraries=['z'],\n),\n# 'szip': ext(libraries=['szip']),\n'tiff': ext(libraries=['tiff']),\n'webp': ext(libraries=['webp']),\n'zfp': ext(libraries=['zfp']),\n'zlib': ext(libraries=['z']),\n'zlibng': ext(libraries=['z-ng']),\n'zopfli': ext(libraries=['zopfli']),\n'zstd': ext(libraries=['zstd']),\n}\n\n\ndef customize_build_default(EXTENSIONS, OPTIONS):\n\"\"\"Customize build for common platforms: recent Debian, arch...\"\"\"\nimport platform\n\ndel EXTENSIONS['apng'] # apng patch not commonly available\ndel EXTENSIONS['avif'] # libavif library not commonly available\ndel EXTENSIONS['blosc2'] # c-blosc2 library not commonly available\ndel EXTENSIONS['jetraw'] # commercial\ndel EXTENSIONS['jpeg12'] # jpeg12 requires custom build\ndel EXTENSIONS['lerc'] # LERC library not commonly available\ndel EXTENSIONS['lz4f'] # requires static linking\ndel EXTENSIONS['mozjpeg'] # Win32 only\ndel EXTENSIONS['zlibng'] # zlib-ng library not commonly available\n\nif 'arch' not in platform.platform():\ndel EXTENSIONS['jpegls'] # CharLS 2.1 library not commonly available\ndel EXTENSIONS['jpegxl'] # jpeg-xl library not commonly available\ndel EXTENSIONS['brunsli'] # Brunsli library not commonly available\ndel EXTENSIONS['zfp'] # ZFP library not commonly available\n\nif sys.platform == 'win32':\nEXTENSIONS['bz2']['libraries'] = ['libbz2']\nelse:\nEXTENSIONS['jpeg2k']['include_dirs'].extend(\n(\n'\/usr\/include\/openjpeg-2.3',\n'\/usr\/include\/openjpeg-2.4',\n'\/usr\/include\/openjpeg-2.5',\n)\n)\nEXTENSIONS['jpegxr']['include_dirs'].append('\/usr\/include\/jxrlib')\nEXTENSIONS['zopfli']['include_dirs'].append('\/usr\/include\/zopfli')\n\n\ndef customize_build_cgohlke(EXTENSIONS, OPTIONS):\n\"\"\"Customize build for Windows development environment with static libs.\"\"\"\nINCLIB = os.environ['INCLIB']\n\nOPTIONS['include_dirs'].append(INCLIB)\nOPTIONS['library_dirs'].append(INCLIB)\n\ndlls = [] # 'heif.dll'\nif '64 bit' in sys.version:\nfor dll in dlls:\nshutil.copyfile(os.path.join(INCLIB, dll), 'imagecodecs\/' + dll)\nelse:\n# del EXTENSIONS['nvjpeg2k']\ndel EXTENSIONS['jetraw']\ndel EXTENSIONS['heif']\nfor dll in dlls:\ntry:\nos.remove('imagecodecs\/' + dll)\nexcept FileNotFoundError:\npass\n\n# EXTENSIONS['exr']['define_macros'].append(('TINYEXR_USE_OPENMP', 1))\n# EXTENSIONS['exr']['extra_compile_args'] = ['\/openmp']\n# EXTENSIONS['szip']['libraries'] = ['szip_static']\n\nEXTENSIONS['mozjpeg']['library_dirs'] = [os.path.join(INCLIB, 'mozjpeg')]\nEXTENSIONS['avif']['libraries'] = [\n'avif',\n'aom',\n'libdav1d',\n'rav1e',\n'Ws2_32',\n'Advapi32',\n'Userenv',\n'Bcrypt',\n]\nEXTENSIONS['aec']['libraries'] = ['aec-static']\nEXTENSIONS['bz2']['libraries'] = ['libbz2']\nEXTENSIONS['lzf']['libraries'] = ['lzf']\nEXTENSIONS['gif']['libraries'] = ['libgif']\nEXTENSIONS['png']['libraries'] = ['png', 'zlib']\nEXTENSIONS['apng']['libraries'] = ['png', 'zlib']\nEXTENSIONS['deflate']['libraries'] = ['libdeflatestatic']\nEXTENSIONS['zlibng']['libraries'] = ['zlibstatic-ng']\nEXTENSIONS['zstd']['libraries'] = ['zstd_static']\nEXTENSIONS['lerc']['define_macros'].append(('LERC_STATIC', 1))\nEXTENSIONS['jpegls']['define_macros'].append(('CHARLS_STATIC', 1))\nEXTENSIONS['jpeg2k']['define_macros'].append(('OPJ_STATIC', 1))\nEXTENSIONS['jpegxr']['include_dirs'].append(os.path.join(INCLIB, 'jxrlib'))\nEXTENSIONS['zopfli']['include_dirs'].append(os.path.join(INCLIB, 'zopfli'))\nEXTENSIONS['zfp']['extra_compile_args'] = ['\/openmp']\nEXTENSIONS['blosc']['libraries'] = [\n'libblosc',\n'zlib',\n'lz4',\n'snappy',\n'zstd_static',\n]\nEXTENSIONS['blosc2']['libraries'] = [\n'libblosc2',\n'zlib',\n'lz4',\n'zstd_static',\n]\nEXTENSIONS['brotli']['libraries'] = [\n'brotlienc-static',\n'brotlidec-static',\n'brotlicommon-static',\n]\nEXTENSIONS['lzma']['libraries'] = ['lzma-static']\nEXTENSIONS['lzma']['define_macros'].append(('LZMA_API_STATIC', 1))\nEXTENSIONS['tiff']['define_macros'].extend(\n(('LZMA_API_STATIC', 1), ('LERC_STATIC', 1))\n)\nEXTENSIONS['tiff']['libraries'] = [\n'tiff',\n'zlib',\n'jpeg',\n'png',\n'webp',\n'zstd_static',\n'lzma-static',\n'libdeflatestatic',\n'lerc',\n]\nEXTENSIONS['jpegxl']['define_macros'].extend(\n(('JXL_STATIC_DEFINE', 1), ('JXL_THREADS_STATIC_DEFINE', 1))\n)\nEXTENSIONS['jpegxl']['libraries'] = [\n'jxl-static',\n'jxl_dec-static',\n'jxl_extras-static',\n'jxl_threads-static',\n'jxl_brotlienc-static',\n'jxl_brotlidec-static',\n'jxl_brotlicommon-static',\n'jxl_hwy',\n'jxl_lodepng',\n'jxl_lskcms',\n'jxl_sjpeg',\n]\nEXTENSIONS['brunsli']['libraries'] = [\n'brunslidec-c',\n'brunslienc-c',\n# static linking\n'brunslidec-static',\n'brunslienc-static',\n'brunslicommon-static',\n# vendored brotli currently used for compressing metadata\n'brunsli_brotlidec-static',\n'brunsli_brotlienc-static',\n'brunsli_brotlicommon-static',\n]\n\n\ndef customize_build_cibuildwheel(EXTENSIONS, OPTIONS):\n\"\"\"Customize build for Czaki's cibuildwheel environment.\"\"\"\n\ndel EXTENSIONS['heif'] # Win32 only\ndel EXTENSIONS['jetraw'] # commercial\ndel EXTENSIONS['mozjpeg'] # Win32 only\n\nif not os.environ.get('SKIP_OMP', False):\nif sys.platform == 'darwin':\nEXTENSIONS['zfp']['extra_compile_args'].append('-Xpreprocessor')\nEXTENSIONS['zfp']['extra_link_args'].append('-lomp')\nEXTENSIONS['zfp']['extra_compile_args'].append('-fopenmp')\n\nbase_path = os.environ.get(\n'BASE_PATH', os.path.dirname(os.path.abspath(__file__))\n)\ninclude_base_path = os.path.join(\nbase_path, 'build_utils', 'libs_build', 'include'\n)\nOPTIONS['library_dirs'] = [\nx\nfor x in os.environ.get(\n'LD_LIBRARY_PATH', os.environ.get('LIBRARY_PATH', '')\n).split(':')\nif x\n]\n\nEXTENSIONS['zopfli']['include_dirs'].append(\nos.path.join(include_base_path, 'zopfli')\n)\n\nif os.path.exists(include_base_path):\nOPTIONS['include_dirs'].append(include_base_path)\nfor el in os.listdir(include_base_path):\npath_to_dir = os.path.join(include_base_path, el)\nif os.path.isdir(path_to_dir):\nOPTIONS['include_dirs'].append(path_to_dir)\njxr_path = os.path.join(include_base_path, 'libjxr')\nif os.path.exists(jxr_path):\njpegxr_include_dirs = [jxr_path]\nfor el in os.listdir(jxr_path):\npath_to_dir = os.path.join(jxr_path, el)\nif os.path.isdir(path_to_dir):\njpegxr_include_dirs.append(path_to_dir)\nEXTENSIONS['jpegxr']['include_dirs'] = jpegxr_include_dirs\n\nfor dir_path in OPTIONS['include_dirs']:\nif os.path.exists(os.path.join(dir_path, 'jxl', 'types.h')):\nbreak\nelse:\ndel EXTENSIONS['jpegxl']\n\nlibjpeg12_base_path = os.path.join(\nbase_path, 'build_utils', 'libs_build', 'libjpeg12'\n)\nif os.path.exists(libjpeg12_base_path):\nEXTENSIONS['jpeg12']['libraries'] = ['jpeg12']\nEXTENSIONS['jpeg12']['include_dirs'] = [\nos.path.join(libjpeg12_base_path, 'include')\n]\nelse:\ndel EXTENSIONS['jpeg12']\n\nif os.environ.get('IMCD_SKIP_JPEG12', False):\n# all tests fail on macOS; likely conflict with jpeg 8-bit dll\ndel EXTENSIONS['jpeg12']\n\nfor dir_path in OPTIONS['include_dirs']:\nif os.path.exists(os.path.join(dir_path, 'avif', 'avif.h')):\nbreak\nelse:\ndel EXTENSIONS['avif']\n\nfor dir_path in OPTIONS['include_dirs']:\nif os.path.exists(os.path.join(dir_path, 'charls', 'charls.h')):\nbreak\nelse:\ndel EXTENSIONS['jpegls']\n\nfor dir_path in OPTIONS['include_dirs']:\nif os.path.exists(os.path.join(dir_path, 'zfp.h')):\nbreak\nelse:\ndel EXTENSIONS['zfp']\n\nfor dir_path in OPTIONS['include_dirs']:\nif os.path.exists(os.path.join(dir_path, 'Lerc_c_api.h')):\nbreak\nelse:\ndel EXTENSIONS['lerc']\n\n\ndef customize_build_condaforge(EXTENSIONS, OPTIONS):\n\"\"\"Customize build for conda-forge.\"\"\"\n\ndel EXTENSIONS['apng']\ndel EXTENSIONS['blosc2']\ndel EXTENSIONS['heif']\ndel EXTENSIONS['jetraw'] # commercial\ndel EXTENSIONS['jpeg12']\ndel EXTENSIONS['jpegxl']\ndel EXTENSIONS['mozjpeg'] # Win32 only\ndel EXTENSIONS['zlibng']\n\n# build the jpeg8 extension against libjpeg v9 instead of libjpeg-turbo\nwarnings.warn('support for libjpeg is being removed', DeprecationWarning)\nEXTENSIONS['jpeg8']['cythonize'] = True\nEXTENSIONS['jpeg8']['cython_compile_time_env'][\n'HAVE_LIBJPEG_TURBO'\n] = False\n\nif sys.platform == 'win32':\ndel EXTENSIONS['brunsli'] # brunsli not stable on conda-forge\n\nEXTENSIONS['rcomp']['sources'].append('3rdparty\/cfitsio\/ricecomp.c')\nEXTENSIONS['lz4f']['libraries'] = ['liblz4']\nEXTENSIONS['bz2']['libraries'] = ['bzip2']\nEXTENSIONS['jpeg2k']['include_dirs'] += [\nos.path.join(\nos.environ['LIBRARY_INC'], 'openjpeg-' + os.environ['openjpeg']\n)\n]\nEXTENSIONS['deflate']['libraries'] = ['libdeflate']\nEXTENSIONS['jpegls']['libraries'] = ['charls-2-x64']\nEXTENSIONS['lz4']['libraries'] = ['liblz4']\nEXTENSIONS['lzma']['libraries'] = ['liblzma']\nEXTENSIONS['png']['libraries'] = ['libpng', 'z']\nEXTENSIONS['webp']['libraries'] = ['libwebp']\nEXTENSIONS['zopfli']['include_dirs'] = [\nos.path.join(os.environ['LIBRARY_INC'], 'zopfli')\n]\nEXTENSIONS['jpegxr']['include_dirs'] = [\nos.path.join(os.environ['LIBRARY_INC'], 'jxrlib')\n]\nEXTENSIONS['jpegxr']['libraries'] = ['libjpegxr', 'libjxrglue']\nelse:\nEXTENSIONS['zopfli']['include_dirs'] = [\nos.path.join(os.environ['PREFIX'], 'include', 'zopfli')\n]\nEXTENSIONS['jpegxr']['include_dirs'] = [\nos.path.join(os.environ['PREFIX'], 'include', 'jxrlib')\n]\nEXTENSIONS['jpegxr']['libraries'] = ['jpegxr', 'jxrglue']\n\n\ndef customize_build_macports(EXTENSIONS, OPTIONS):\n\"\"\"Customize build for MacPorts.\"\"\"\n\ndel EXTENSIONS['apng']\ndel EXTENSIONS['avif']\ndel EXTENSIONS['blosc2']\ndel EXTENSIONS['brunsli']\ndel EXTENSIONS['deflate']\ndel EXTENSIONS['heif']\ndel EXTENSIONS['jetraw'] # commercial\ndel EXTENSIONS['jpeg12']\ndel EXTENSIONS['jpegls']\ndel EXTENSIONS['jpegxl']\ndel EXTENSIONS['jpegxr']\ndel EXTENSIONS['lerc']\ndel EXTENSIONS['lz4f']\ndel EXTENSIONS['mozjpeg'] # Win32 only\ndel EXTENSIONS['zfp']\ndel EXTENSIONS['zlibng']\n\nEXTENSIONS['aec']['library_dirs'] = ['%PREFIX%\/lib\/libaec\/lib']\nEXTENSIONS['aec']['include_dirs'] = ['%PREFIX%\/lib\/libaec\/include']\nEXTENSIONS['gif']['include_dirs'] = ['%PREFIX%\/include\/giflib5']\nEXTENSIONS['jpeg2k']['include_dirs'].extend(\n(\n'%PREFIX%\/include\/openjpeg-2.3',\n'%PREFIX%\/include\/openjpeg-2.4',\n'%PREFIX%\/include\/openjpeg-2.5',\n)\n)\n\n\ndef customize_build_mingw(EXTENSIONS, OPTIONS):\n\"\"\"Customize build for mingw-w64.\"\"\"\n\ndel EXTENSIONS['apng']\ndel EXTENSIONS['brunsli']\ndel EXTENSIONS['heif']\ndel EXTENSIONS['jetraw'] # commercial\ndel EXTENSIONS['jpeg12']\ndel EXTENSIONS['mozjpeg'] # Win32 only\ndel EXTENSIONS['zfp']\ndel EXTENSIONS['zlibng']\n\nEXTENSIONS['jpeg2k']['include_dirs'].extend(\n(\nsys.prefix + '\/include\/openjpeg-2.3',\nsys.prefix + '\/include\/openjpeg-2.4',\nsys.prefix + '\/include\/openjpeg-2.5',\n)\n)\nEXTENSIONS['jpegxr']['include_dirs'].append(sys.prefix + '\/include\/jxrlib')\nEXTENSIONS['rcomp']['include_dirs'].append(sys.prefix + '\/include\/cfitsio')\nEXTENSIONS['rcomp']['sources'].append('3rdparty\/cfitsio\/ricecomp.c')\n\n\nif 'sdist' not in sys.argv:\n# customize builds based on environment\ntry:\nfrom imagecodecs_distributor_setup import ( # type: ignore\ncustomize_build,\n)\nexcept ImportError:\nif os.environ.get('COMPUTERNAME', '').startswith('CG-'):\ncustomize_build = customize_build_cgohlke\nelif os.environ.get('IMAGECODECS_CIBW', ''):\ncustomize_build = customize_build_cibuildwheel\nelif os.environ.get('CONDA_BUILD', ''):\ncustomize_build = customize_build_condaforge\nelif shutil.which('port'):\ncustomize_build = customize_build_macports\nelif os.name == 'nt' and 'GCC' in sys.version:\ncustomize_build = customize_build_mingw\nelse:\ncustomize_build = customize_build_default\n\ncustomize_build(EXTENSIONS, OPTIONS)\n\nif any(opt['cythonize'] for opt in EXTENSIONS.values()):\nOPTIONS['cythonize'] = True\n\n# use precompiled c files if Cython is not installed\n# work around \"Cython in setup_requires doesn't work\"\n# https:\/\/github.com\/pypa\/setuptools\/issues\/1317\ntry:\nimport Cython # noqa\n\nEXT = '.pyx'\nexcept ImportError:\nif OPTIONS['cythonize']:\nraise\nEXT = '.c'\n\n\nclass build_ext(_build_ext):\n\"\"\"Customize build of extensions.\n\nDelay importing numpy until building extensions.\nAdd numpy include directory to include_dirs.\nSkip building deselected extensions.\nCythonize with compile time macros.\n\n\"\"\"\n\nuser_options = _build_ext.user_options + (\n[('lite', None, 'only build the _imcd extension')]\n+ [\n(f'skip-{name}', None, f'do not build the _{name} extension')\nfor name in EXTENSIONS\n]\n)\n\ndef initialize_options(self):\nfor name in EXTENSIONS:\nsetattr(self, f'skip_{name}', False)\nself.lite = False\n_build_ext.initialize_options(self)\n\ndef finalize_options(self):\n# TODO: cythonize individual extensions as needed\n# TODO: force=True swallows all build output; why?\nself.force = OPTIONS['cythonize']\n\n_build_ext.finalize_options(self)\n\n# remove extensions based on user_options\nfor ext in self.extensions.copy():\nname = ext.name.rsplit('_', 1)[-1]\nif (self.lite and name not in ('imcd', 'shared')) or getattr(\nself, f'skip_{name}', False\n):\nprint(f'skipping {ext.name!r} extension (deselected)')\nself.extensions.remove(ext)\n\n# add numpy include directory\n# delay import of numpy until setup_requires are installed\n# prevent numpy from detecting setup process\nif isinstance(__builtins__, dict):\n__builtins__['__NUMPY_SETUP__'] = False\nelse:\nsetattr(__builtins__, '__NUMPY_SETUP__', False)\nimport numpy\n\nself.include_dirs.append(numpy.get_include())\n\n\ndef extension(name):\n\"\"\"Return setuptools Extension.\"\"\"\nopt = EXTENSIONS[name]\next = Extension(\nf'imagecodecs._{name}',\nsources=[f'imagecodecs\/_{name}' + EXT] + opt['sources'],\n**{\nkey: (OPTIONS[key] + opt[key])\nfor key in (\n'include_dirs',\n'library_dirs',\n'libraries',\n'define_macros',\n'extra_compile_args',\n'extra_link_args',\n)\n},\n)\next.cython_compile_time_env = {\n**OPTIONS['cython_compile_time_env'],\n**opt['cython_compile_time_env'],\n}\n# ext.force = OPTIONS['cythonize'] or opt['cythonize']\nreturn ext\n\n\nsetup(\nname='imagecodecs',\nversion=version,\nlicense='BSD',\ndescription=description,\nlong_description=readme,\nauthor='Christoph Gohlke',\nauthor_email='cgohlke@cgohlke.com',\nurl='https:\/\/www.cgohlke.com',\nproject_urls={\n'Bug Tracker': 'https:\/\/github.com\/cgohlke\/imagecodecs\/issues',\n'Source Code': 'https:\/\/github.com\/cgohlke\/imagecodecs',\n# 'Documentation': 'https:\/\/',\n},\npython_requires='>=3.8',\ninstall_requires=['numpy>=1.19.2'],\nsetup_requires=['setuptools>=18.0', 'numpy>=1.19.2'], # cython>=0.29.30\nextras_require={\n'all': ['matplotlib>=3.3', 'tifffile>=2021.11.2', 'numcodecs']\n},\ntests_require=[\n'pytest',\n'tifffile',\n'czifile',\n'blosc',\n'blosc2; platform_python_implementation!=\"PyPy\"',\n'zstd',\n'lz4',\n'python-lzf',\n'python-snappy',\n'bitshuffle', # git+https:\/\/github.com\/cgohlke\/bitshuffle@patch-1\n'zopflipy',\n'zarr',\n'numcodecs'\n# 'zfpy',\n# 'brotli',\n# 'deflate',\n# 'pytinyexr',\n],\npackages=['imagecodecs'],\npackage_data={'imagecodecs': ['licenses\/*']},\nentry_points={\n'console_scripts': ['imagecodecs=imagecodecs.__main__:main']\n},\next_modules=[extension(name) for name in sorted(EXTENSIONS)],\ncmdclass={'build_ext': build_ext},\nzip_safe=False,\nplatforms=['any'],\nclassifiers=[\n'Development Status :: 3 - Alpha',\n'License :: OSI Approved :: BSD License',\n'Intended Audience :: Science\/Research',\n'Intended Audience :: Developers',\n'Operating System :: OS Independent',\n'Programming Language :: C',\n'Programming Language :: Cython',\n'Programming Language :: Python :: 3 :: Only',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: 3.11',\n'Programming Language :: Python :: Implementation :: CPython',\n],\n)\n"
    },
    {
        "package_name": "ImageHash-4.2.1",
        "file_list": ".bumpversion.cfg .coveragerc testing.yml .gitignore conda-requirements.txt crop_resistance.py crop_resistant_segmentation.py github-urls.txt hashimages.py run_art.sh run_icons.sh find_similar_images.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt imagehash.py LICENSE Makefile MANIFEST.in output.html PKG-INFO README.rst setup.cfg setup.py imagehash.png peppers.png test_average_hash.py test_colorhash.py test_crop_resistant_hash.py test_dhash.py test_hash_is_constant.py test_hex_conversions.py test_old_hex_conversions.py test_phash.py test_whash.py utils.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\ntry:\nfrom setuptools import setup\nexcept:\nfrom distutils.core import setup\n\nlong_description = \"\"\nwith open('README.rst') as f:\nlong_description = f.read()\n\nsetup(\nname='ImageHash',\nversion='4.2.1',\nauthor='Johannes Buchner',\nauthor_email='buchner.johannes@gmx.at',\npy_modules=['imagehash'],\ndata_files=[('images', ['tests\/data\/imagehash.png'])],\nscripts=['find_similar_images.py'],\nurl='https:\/\/github.com\/JohannesBuchner\/imagehash',\nlicense='BSD 2-clause (see LICENSE file)',\ndescription='Image Hashing library',\nlong_description=long_description,\nlong_description_content_type='text\/x-rst',\ninstall_requires=[\n\"six\",\n\"numpy\",\n\"scipy\", # for phash\n\"pillow\", # or PIL\n\"PyWavelets\", # for whash\n],\ntest_suite='tests',\ntests_require=['pytest>=3'],\n)\n"
    },
    {
        "package_name": "imagesize-1.4.1",
        "file_list": "imagesize.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.rst MANIFEST.in PKG-INFO README.rst setup.cfg setup.py multipage_tiff_example.tif test-ascii.pbm test-ascii.pgm test-ascii.ppm test.gif test.jp2 test.jpg test.pbm test.pgm test.png test.ppm test.svg test.tiff test_get.py test_getdpi.py test_get_filelike.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom setuptools import setup\nfrom imagesize import __version__\n\nsetup(name='imagesize',\nversion=__version__,\ndescription='Getting image size from png\/jpeg\/jpeg2000\/gif file',\nlong_description='''\nIt parses image files' header and return image size.\n\n* PNG\n* JPEG\n* JPEG2000\n* GIF\n* TIFF\n* SVG\n* Netpbm\n* WebP\n\nThis is a pure Python library.\n''',\nauthor='Yoshiki Shibukawa',\nauthor_email='yoshiki@shibu.jp',\nurl='https:\/\/github.com\/shibukawa\/imagesize_py',\nlicense=\"MIT\",\npackages=['imagesize'],\npython_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\",\n\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Multimedia :: Graphics'\n]\n)\n"
    },
    {
        "package_name": "imath-0.0.2",
        "file_list": "rch.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO pyproject.toml README.md setup.cfg setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nimport setuptools\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\nlong_description = fh.read()\n\nsetuptools.setup(\nname=\"imath\",\nversion=\"0.0.2\",\nauthor=\"innovata sambong\",\nauthor_email=\"iinnovata@gmail.com\",\ndescription='innovata-debug',\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=f\"https:\/\/github.com\/innovata\/imath\",\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n],\npackage_dir={\"\":\"pkg\"},\npackages=setuptools.find_packages(where=\"pkg\"),\npython_requires=\">=3.8\",\n)\n"
    },
    {
        "package_name": "injector-0.20.1",
        "file_list": "CHANGES COPYING api.rst changelog.rst conf.py faq.rst index.rst logging.rst Makefile practices.rst scopes.rst terminology.rst testing.rst sidebar.html py.typed __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt injector_test.py MANIFEST.in mypy.ini PKG-INFO pyproject.toml pytest.ini README.md requirements-dev.txt requirements.txt setup.cfg setup.py",
        "setup.py": "from setuptools import setup, Command\nimport sys\nimport warnings\n\n\nwarnings.filterwarnings(\"always\", module=__name__)\n\n\ndef obtain_requirements(file_name):\nwith open(file_name) as fd_in:\nfor line in fd_in:\nif '#' not in line:\nyield line.strip()\n\n\nclass PyTest(Command):\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nimport subprocess\n\nerrno = subprocess.call([sys.executable, '-m', 'pytest'])\nraise SystemExit(errno)\n\n\ndef read_injector_variable(name):\nprefix = '%s = ' % (name,)\nwith open('injector\/__init__.py') as f:\nfor line in f:\nif line.startswith(prefix):\nreturn line.replace(prefix, '').strip().strip(\"'\")\nraise AssertionError('variable %s not found' % (name,))\n\n\nversion = read_injector_variable('__version__')\nversion_tag = read_injector_variable('__version_tag__')\n\n\nrequirements = list(obtain_requirements('requirements.txt'))\nrequirements_dev = list(obtain_requirements('requirements-dev.txt'))\n\n\ntry:\nimport pypandoc\n\nlong_description = pypandoc.convert_file('README.md', 'rst')\nexcept ImportError:\nwarnings.warn('Could not locate pandoc, using Markdown long_description.', ImportWarning)\nwith open('README.md') as f:\nlong_description = f.read()\n\ndescription = long_description.splitlines()[0].strip()\n\n\nsetup(\nname='injector',\nurl='https:\/\/github.com\/alecthomas\/injector',\ndownload_url='https:\/\/pypi.org\/project\/injector\/',\nversion=version,\noptions=dict(egg_info=dict(tag_build=version_tag)),\ndescription=description,\nlong_description=long_description,\nlicense='BSD',\nplatforms=['any'],\npackages=['injector'],\npackage_data={'injector': ['py.typed']},\nauthor='Alec Thomas',\nauthor_email='alec@swapoff.org',\ncmdclass={'test': PyTest},\nextras_require={'dev': requirements_dev},\nkeywords=[\n'Dependency Injection',\n'DI',\n'Dependency Injection framework',\n'Inversion of Control',\n'IoC',\n'Inversion of Control container',\n],\ninstall_requires=requirements,\n)\n"
    },
    {
        "package_name": "interpret-core-0.2.7",
        "file_list": "base.py templates.py test_base.py __init__.py __init__.py lime.py partialdependence.py permutationimportance.py sensitivity.py shap.py test_permutationimportance.py test_sensitivity.py __init__.py __init__.py response.py __init__.py develop.py __init__.py __init__.py examples.py extension.py extension_utils.py __init__.py __init__.py __init__.py __init__.py test_examples.py __init__.py __init__.py decisiontree.py ebm.py internal.py postprocessing.py purify.py test_purify.py __init__.py __init__.py test_ebm.py test_ebm_utils.py test_internal.py test_postprocessing.py __init__.py utils.py __init__.py linear.py skoperules.py test_decisiontree.py test_linear.py __init__.py __init__.py shaptree.py test_treeinterpreter.py __init__.py treeinterpreter.py __init__.py curve.py regression.py __init__.py __init__.py compute.py test_providers.py __init__.py visualize.py __init__.py pytest.ini test_develop.py test_example_notebooks.py test_explainers.py test_ext.py test_extension_utils.py test_interactive.py test_mli_interop.py test_selenium.py utils.py __init__.py all.py environment.py shap.py test_all.py test_environment.py test_utils.py __init__.py __init__.py version.py favicon.ico udash.css udash.js dashboard.py inline.py interactive.py plot.py test_dashboard.py test_inline.py test_interactive.py test_plot.py __init__.py udash.py __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt .babelrc .eslintrc.json .gitignore interpret-inline.js interpret-inline.js.LICENSE.txt package-lock.json package.json README.md index.js styles.scss webpack.config.js MANIFEST.in PKG-INFO setup.cfg setup.py build.bat build.sh LICENSE README.md ApplyModelUpdate.cpp ApplyModelUpdateTraining.cpp ApplyModelUpdateValidation.cpp approximate_math.hpp BinBoosting.cpp BinInteraction.cpp BoosterCore.cpp BoosterCore.hpp BoosterShell.cpp BoosterShell.hpp bridge_c.h zones.h bridge_cpp.hpp CalculateInteractionScore.cpp CODING_STYLE.md common_c.c common_c.h logging.c logging.h common_cpp.hpp CompressibleTensor.cpp CompressibleTensor.hpp avx512_32.cpp avx512_ebm.vcxproj avx512_ebm.vcxproj.filters compute.hpp cpu_32.cpp cpu_64.cpp cpu_ebm.vcxproj cpu_ebm.vcxproj.filters sse2_32.cpp sse2_64.cpp cuda_32.cu cuda_ebm.vcxproj cuda_ebm.vcxproj.filters Directory.Build.targets Loss.cpp Loss.hpp CrossEntropyBinaryLoss.hpp CrossEntropyMulticlassLoss.hp CrossEntropyMulticlassMultita LogLossBinaryLoss.hpp LogLossBinaryMultitaskLoss.hp LogLossMulticlassLoss.hpp loss_registrations.hpp MseRegressionLoss.hpp MseRegressionMultitaskLoss.hp PseudoHuberRegressionLoss.hpp AucMetric.hpp no_cuda_32.cpp no_cuda_ebm.vcxproj no_cuda_ebm.vcxproj.filters precompiled_header_cpp.hpp Registration.cpp Registration.hpp registration_exceptions.hpp precompiled_header_cpp.cpp zoned_bridge_cpp_functions.hpp zoned_bridge_c_functions.cpp zoned_bridge_c_functions.h compute_accessors.hpp CutQuantile.cpp CutUniform.cpp CutWinsorized.cpp DataSetBoosting.cpp DataSetBoosting.hpp DataSetInteraction.cpp DataSetInteraction.hpp data_set_shared.cpp debug_ebm.cpp Discretize.cpp ebm_internal.hpp ebm_native.vcxproj ebm_native.vcxproj.filters ebm_native_exports.def ebm_native_exports.txt bit_packing_extremes.cpp boosting_unusual_inputs.cpp CutQuantile.cpp CutUniform.cpp CutWinsorized.cpp data_set_shared.cpp Discretize.cpp ebm_native_test.bat ebm_native_test.cpp ebm_native_test.hpp ebm_native_test.sh ebm_native_test.vcxproj ebm_native_test.vcxproj.filters include_c.c interaction_unusual_inputs.cpp precompiled_header_test.cpp precompiled_header_test.hpp RandomStreamTest.hpp random_numbers.cpp rehydrate_booster.cpp SuggestGraphBounds.cpp ebm_stats.hpp Feature.hpp FeatureGroup.cpp FeatureGroup.hpp GenerateModelUpdate.cpp HistogramBucket.hpp HistogramTargetEntry.hpp IMPORTANT.md ebm_native.h InitializeGradientsAndHessians.cpp InteractionCore.cpp InteractionCore.hpp InteractionShell.cpp InteractionShell.hpp interpret.sln interpretable_numerics.cpp PartitionOneDimensionalBoosting.cpp PartitionRandomBoosting.cpp PartitionTwoDimensionalBoosting.cpp PartitionTwoDimensionalInteraction.cpp precompiled_header_cpp.hpp RandomStream.cpp RandomStream.hpp sampling.cpp SamplingSet.cpp SamplingSet.hpp linux_wrap_functions.cpp precompiled_header_cpp.cpp windows_DllMain.cpp SumHistogramBuckets.cpp TensorTotalsBuild.cpp TensorTotalsSum.hpp TreeNode.hpp TreeSweep.hpp",
        "setup.py": "# Copyright (c) 2019 Microsoft Corporation\n# Distributed under the MIT software license\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.sdist import sdist\nfrom distutils.command.build import build\nfrom distutils.command.install import install\nfrom wheel.bdist_wheel import bdist_wheel\n\n\nname = \"interpret-core\"\n# NOTE: Version is replaced by a regex script.\nversion = \"0.2.7\"\nlong_description = \"\"\"\nCore system for **the** interpret package.\n\nhttps:\/\/github.com\/interpretml\/interpret\n\"\"\"\n\nentry_points = {\n\"interpret_ext_blackbox\": [\n\"ExampleBlackboxExplainer = interpret.ext.examples:ExampleBlackboxExplainer\"\n],\n\"interpret_ext_data\": [\n\"ExampleDataExplainer = interpret.ext.examples:ExampleDataExplainer\"\n],\n\"interpret_ext_perf\": [\n\"ExamplePerfExplainer = interpret.ext.examples:ExamplePerfExplainer\"\n],\n\"interpret_ext_glassbox\": [\n\"ExampleGlassboxExplainer = interpret.ext.examples:ExampleGlassboxExplainer\"\n],\n\"interpret_ext_greybox\": [\n\"ExampleGreyboxExplainer = interpret.ext.examples:ExampleGreyboxExplainer\"\n],\n\"interpret_ext_provider\": [\n\"ExampleVisualizeProvider = interpret.ext.examples:ExampleVisualizeProvider\"\n],\n}\npackage_data = {\n\"interpret\": [\n\"lib\/lib_ebm_native_win_x64.dll\",\n\"lib\/lib_ebm_native_linux_x64.so\",\n\"lib\/lib_ebm_native_mac_x64.dylib\",\n\"lib\/lib_ebm_native_win_x64_debug.dll\",\n\"lib\/lib_ebm_native_linux_x64_debug.so\",\n\"lib\/lib_ebm_native_mac_x64_debug.dylib\",\n\"lib\/lib_ebm_native_win_x64.pdb\",\n\"lib\/lib_ebm_native_win_x64_debug.pdb\",\n\"lib\/interpret-inline.js\",\n\"visual\/assets\/udash.css\",\n\"visual\/assets\/udash.js\",\n\"visual\/assets\/favicon.ico\",\n\"pytest.ini\",\n]\n}\nsklearn_dep = \"scikit-learn>=0.18.1\"\njoblib_dep = \"joblib>=0.11\"\nextras = {\n# Core\n\"required\": [\n\"numpy>=1.11.1\",\n\"scipy>=0.18.1\",\n\"pandas>=0.19.2\",\nsklearn_dep,\njoblib_dep,\n],\n\"debug\": [\"psutil>=5.6.2\"],\n\"notebook\": [\"ipykernel>=5.1.0\", \"ipython>=7.4.0\"],\n# Plotly (required if .visualize is ever called)\n\"plotly\": [\"plotly>=3.8.1\"],\n# Explainers\n\"lime\": [\"lime>=0.1.1.33\"],\n\"sensitivity\": [\"SALib>=1.3.3\"],\n\"shap\": [\"shap>=0.28.5\", \"dill>=0.2.5\"],\n\"ebm\": [joblib_dep],\n\"linear\": [],\n\"decisiontree\": [joblib_dep],\n\"skoperules\": [\"skope-rules>=1.0.1\"],\n\"treeinterpreter\": [\"treeinterpreter>=0.2.2\"],\n# Dash\n\"dash\": [\n\"dash>=1.0.0\",\n\"dash-cytoscape>=0.1.1\",\n\"dash-table>=4.1.0\",\n\"gevent>=1.3.6\",\n\"requests>=2.19.0\",\n],\n# Testing\n\"testing\": [\n\"pytest>=4.3.0,<=6.0.2\",\n\"pytest-runner>=4.4\",\n\"pytest-xdist>=1.29\",\n\"nbconvert>=5.4.1\",\n\"selenium>=3.141.0\",\n\"pytest-cov>=2.6.1\",\n\"flake8>=3.7.7\",\n\"jupyter>=1.0.0\",\n\"ipywidgets>=7.4.2\",\n],\n}\n\ndef _copy_native_code_to_setup():\nimport os\nimport shutil\n\nscript_path = os.path.dirname(os.path.abspath(__file__))\nroot_path = os.path.join(script_path, '..', '..')\nsym_path = os.path.join(script_path, 'symbolic')\nsource_shared_path = os.path.join(root_path, 'shared')\ntarget_shared_path = os.path.join(sym_path, 'shared')\n\nif os.path.exists(source_shared_path): # If native code exists two directories up, update setup.py's copy.\nif os.path.exists(target_shared_path):\nshutil.rmtree(target_shared_path)\nshutil.copytree(source_shared_path, target_shared_path)\n\nfile_names = [\"build.bat\", \"build.sh\", \"LICENSE\", \"README.md\"]\nfor file_name in file_names:\nshutil.copy(\nos.path.join(root_path, file_name),\nos.path.join(sym_path, file_name)\n)\nelse: # Otherwise, ensure that native code exists for setup.py.\nif not os.path.exists(target_shared_path):\nraise Exception(\"Shared directory in symbolic not found. This should be configured either by setup.py or alternative build processes.\")\n\nclass BuildCommand(build):\ndef run(self):\n_copy_native_code_to_setup()\n\n# Run native compilation as well as JavaScript build.\nimport subprocess\nimport os\nimport shutil\n\nscript_path = os.path.dirname(os.path.abspath(__file__))\nsym_path = os.path.join(script_path, 'symbolic')\n\n# Native compile\nif os.name == 'nt':\nbuild_script = os.path.join(sym_path, \"build.bat\")\nsubprocess.check_call([build_script], cwd=script_path)\nelse:\nbuild_script = os.path.join(sym_path, \"build.sh\")\nsubprocess.check_call(['bash', build_script], cwd=script_path)\n\nsource_dir = os.path.join(sym_path, 'python', 'interpret-core', 'interpret', 'lib')\ntarget_dir = os.path.join(script_path, 'interpret', 'lib')\nos.makedirs(target_dir, exist_ok=True )\nfile_names = os.listdir(source_dir)\nfor file_name in file_names:\nshutil.move(\nos.path.join(source_dir, file_name),\nos.path.join(target_dir, file_name)\n)\n\n# JavaScript compile\njs_path = os.path.join(script_path, 'js')\nif os.getenv('AGENT_NAME') or os.name != 'nt': # In DevOps \/ Linux\nsubprocess.run([\"npm install\"], cwd=js_path, shell=True)\nsubprocess.run([\"npm run build-prod\"], cwd=js_path, shell=True)\nelse:\nsubprocess.run([\"npm\", \"install\"], cwd=js_path, shell=True)\nsubprocess.run([\"npm\", \"run\", \"build-prod\"], cwd=js_path, shell=True)\njs_bundle_src = os.path.join(js_path, \"dist\", \"interpret-inline.js\")\njs_bundle_dest = os.path.join(\n\"interpret\", \"lib\", \"interpret-inline.js\"\n)\nos.makedirs(os.path.dirname(js_bundle_dest), exist_ok=True)\nshutil.copyfile(js_bundle_src, js_bundle_dest)\n\nbuild.run(self)\n\nclass InstallCommand(install):\ndef run(self):\n_copy_native_code_to_setup() # This needs to run pre-build to store native code in the sdist.\ninstall.run(self)\n\nclass SDistCommand(sdist):\ndef run(self):\n_copy_native_code_to_setup() # This needs to run pre-build to store native code in the sdist.\nsdist.run(self)\n\nclass BDistWheelCommand(bdist_wheel):\ndef run(self):\nbdist_wheel.run(self)\n\nsetup(\nname=name,\nversion=version,\nauthor=\"InterpretML Team\",\nauthor_email=\"interpret@microsoft.com\",\ndescription=\"Fit interpretable machine learning models. Explain blackbox machine learning.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/interpretml\/interpret\",\ncmdclass={\n'install': InstallCommand,\n'sdist': SDistCommand,\n'build': BuildCommand,\n'bdist_wheel': BDistWheelCommand,\n},\npackages=find_packages(),\npackage_data=package_data,\nclassifiers=[\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Development Status :: 3 - Alpha\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n],\nextras_require=extras,\nentry_points=entry_points,\ninstall_requires=[],\n)\n"
    },
    {
        "package_name": "interrogate-1.5.0",
        "file_list": "dependabot.yml FUNDING.yml bug_report.md feature_request.md pull_request_template.md autoupdate-pre-commit-config.yml main.yml sanity.yml windows.yml .pre-commit-config.yaml .pre-commit-hooks.yaml codecov.yml changelog.rst conf.py docutils.conf index.rst Makefile interrogate_badge_f.svg interrogate_badge_fs.svg interrogate_badge_fsm.svg interrogate_badge_ftb.svg interrogate_badge_p.svg interrogate_badge_s.svg custom.css favicon.png interrogate_badge.svg logo_pink.png logo_smol.png navigation.html LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py flat-square-modified-style.svg flat-square-style.svg flat-style.svg for-the-badge-style.svg plastic-style.svg social-style.svg badge_gen.py cli.py config.py coverage.py utils.py visit.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt expected_badge.svg expected_detailed.txt expected_detailed_no_module.txt expected_detailed_single_file.txt expected_detailed_skip_covered.txt expected_no_verbosity.txt expected_summary.txt expected_summary_no_module.txt expected_summary_skip_covered.txt expected_summary_skip_covered_all.txt expected_detailed.txt expected_detailed_no_module.txt expected_detailed_single_file.txt expected_detailed_skip_covered.txt expected_no_verbosity.txt expected_summary.txt expected_summary_no_module.txt expected_summary_skip_covered.txt expected_summary_skip_covered_all.txt child_sample_module.py __init__.py empty.py full.py ignoreme.txt partial.py __init__.py test_cli.py test_coverage.py __init__.py 0.svg 100.svg 45.svg 60.svg 89.svg 90.svg 99.png 99.svg default.svg no_logo.svg 0.svg 100.svg 45.svg 60.svg 89.svg 90.svg 99.png 99.svg default.svg 0.svg 100.svg 45.svg 60.svg 89.svg 90.svg 99.png 99.svg default.svg 0.svg 100.svg 45.svg 60.svg 89.svg 90.svg 99.png 99.svg default.svg 0.svg 100.svg 45.svg 60.svg 89.svg 90.svg 99.png 99.svg default.svg 0.svg 100.svg 45.svg 60.svg 89.svg 90.svg 99.png 99.svg default.svg 0.svg 100.svg 45.svg 60.svg 89.svg 90.svg 99.png 99.svg default.svg test_badge_gen.py test_config.py test_utils.py __init__.py tox.ini",
        "setup.py": "#! \/usr\/bin\/env python\n# Copyright 2020 Lynn Root\n\nimport codecs\nimport os\nimport re\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\nHERE = os.path.abspath(os.path.dirname(__file__))\n\n\n#####\n# Helper functions\n#####\ndef read(*filenames, **kwargs):\n\"\"\"\nBuild an absolute path from ``*filenames``, and return contents of\nresulting file. Defaults to UTF-8 encoding.\n\"\"\"\nencoding = kwargs.get(\"encoding\", \"utf-8\")\nsep = kwargs.get(\"sep\", \"\\n\")\nbuf = []\nfor fl in filenames:\nwith codecs.open(os.path.join(HERE, fl), \"rb\", encoding) as f:\nbuf.append(f.read())\nreturn sep.join(buf)\n\n\ndef find_meta(meta):\n\"\"\"Extract __*meta*__ from META_FILE.\"\"\"\nre_str = r\"^__{meta}__ = ['\\\"]([^'\\\"]*)['\\\"]\".format(meta=meta)\nmeta_match = re.search(re_str, META_FILE, re.M)\nif meta_match:\nreturn meta_match.group(1)\nraise RuntimeError(\"Unable to find __{meta}__ string.\".format(meta=meta))\n\n\n#####\n# Project-specific constants\n#####\nNAME = \"interrogate\"\nPACKAGE_NAME = \"interrogate\"\nPACKAGES = find_packages(where=\"src\")\nMETA_PATH = os.path.join(\"src\", PACKAGE_NAME, \"__init__.py\")\n\nMETA_FILE = read(META_PATH)\nKEYWORDS = [\"documentation\", \"coverage\", \"quality\"]\nPROJECT_URLS = {\n\"Documentation\": \"https:\/\/interrogate.readthedocs.io\",\n\"Bug Tracker\": \"https:\/\/github.com\/econchick\/interrogate\/issues\",\n\"Source Code\": \"https:\/\/github.com\/econchick\/interrogate\",\n}\nCLASSIFIERS = [\n\"Development Status :: 3 - Alpha\",\n\"Intended Audience :: Developers\",\n\"Natural Language :: English\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Topic :: Software Development :: Documentation\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Topic :: Software Development :: Quality Assurance\",\n]\nINSTALL_REQUIRES = [\n\"attrs\",\n\"click>=7.1\",\n\"colorama\",\n\"py\",\n\"tabulate\",\n\"toml\",\n]\nEXTRAS_REQUIRE = {\n\"png\": [\"cairosvg\"],\n\"docs\": [\"sphinx\", \"sphinx-autobuild\"],\n\"tests\": [\"pytest\", \"pytest-cov\", \"pytest-mock\"],\n}\nEXTRAS_REQUIRE[\"dev\"] = (\nEXTRAS_REQUIRE[\"png\"]\n+ EXTRAS_REQUIRE[\"docs\"]\n+ EXTRAS_REQUIRE[\"tests\"]\n+ [\"wheel\", \"pre-commit\"]\n)\nURL = find_meta(\"uri\")\nLONG = (\nread(\"README.rst\")\n+ \"\\n\"\n+ \"Release Information\\n\"\n+ \"===================\"\n+ read(\"docs\/changelog.rst\").split(\".. short-log\")[1]\n+ \"\\n`Full changelog \"\n+ \"<{url}\/en\/latest\/#changelog>`_.\".format(url=URL)\n)\n\nsetup(\nname=NAME,\nversion=find_meta(\"version\"),\ndescription=find_meta(\"description\"),\nlong_description=LONG,\nlong_description_content_type=\"text\/x-rst\",\nurl=URL,\nproject_urls=PROJECT_URLS,\nauthor=find_meta(\"author\"),\nauthor_email=find_meta(\"email\"),\nmaintainer=find_meta(\"author\"),\nmaintainer_email=find_meta(\"email\"),\nkeywords=KEYWORDS,\npackages=PACKAGES,\npackage_dir={\"\": \"src\"},\ninclude_package_data=True,\nzip_safe=False,\npython_requires=\">=3.6\",\ninstall_requires=INSTALL_REQUIRES,\nextras_require=EXTRAS_REQUIRE,\nentry_points={\n\"console_scripts\": [\"interrogate = interrogate.cli:main\"],\n},\nclassifiers=CLASSIFIERS,\n)\n"
    },
    {
        "package_name": "intuit-oauth-1.2.4",
        "file_list": "client.py config.py enums.py exceptions.py migration.py utils.py version.py __init__.py dependency_links.txt namespace_packages.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "# Copyright (c) 2018 Intuit\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import setup\nfrom setuptools import find_packages\n\nversion = {}\nwith open(\".\/intuitlib\/version.py\") as fp:\nexec(fp.read(), version)\n\nsetup(\nname='intuit-oauth',\nversion=version['__version__'],\ndescription='Intuit OAuth Client',\nlong_description=open('README.rst').read().strip(),\nauthor='Intuit Inc',\nauthor_email='IDGSDK@intuit.com',\nurl='https:\/\/github.com\/intuit\/oauth-pythonclient',\npackages=find_packages(exclude=('tests*',)),\nnamespace_packages=('intuitlib',),\ninstall_requires=[\n'python_jose>=2.0.2',\n'future>=0.16.0',\n'requests>=2.13.0',\n'requests_oauthlib>=1.0.0',\n'six>=1.10.0',\n'enum-compat',\n],\nlicense='Apache 2.0',\nkeywords='intuit quickbooks oauth auth openid client'\n)\n"
    },
    {
        "package_name": "iopath-0.1.10",
        "file_list": "config.yml CODE_OF_CONDUCT.md CONTRIBUTING.md download.py event_logger.py file_io.py non_blocking_io.py s3.py __init__.py tabular_io.py __init__.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE build_all_conda.sh build_conda.sh meta.yaml PKG-INFO README.md setup.cfg setup.py async_torch_test.py async_writes_test.py test_download.py test_file_io.py test_non_blocking_io.py test_s3.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python3\n# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n\nimport runpy\n\nfrom setuptools import find_packages, setup\n\n\nversion = runpy.run_path(\"iopath\/version.py\")[\"__version__\"]\n\nsetup(\nname=\"iopath\",\nversion=version,\nauthor=\"FAIR\",\nlicense=\"MIT licensed, as found in the LICENSE file\",\nurl=\"https:\/\/github.com\/facebookresearch\/iopath\",\ndescription=\"A library for providing I\/O abstraction.\",\npython_requires=\">=3.6\",\ninstall_requires=[\n\"tqdm\",\n\"typing_extensions\",\n\"portalocker\",\n\"dataclasses; python_version<'3.7'\",\n],\nextras_require={\n\"aws\": [\n\"boto3\",\n],\n},\npackages=find_packages(exclude=(\"tests\",)),\n)\n"
    },
    {
        "package_name": "IP2Location-8.8.1",
        "file_list": "AUTHORS dependency_links.txt PKG-INFO SOURCES.txt top_level.txt IP2Location.py LICENSE.TXT PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import setuptools\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nsetuptools.setup(\nname=\"IP2Location\",\nversion=\"8.8.1\", \nauthor=\"IP2Location\",\nauthor_email=\"support@ip2location.com\",\ndescription=\"This is an IP geolocation library that enables the user to find the country, region, city, latitude and longitude, ZIP code, time zone, ISP, domain name, area code, weather info, mobile info, elevation, usage type, address type and IAB category from an IP address. It supports both IPv4 and IPv6 lookup.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\npy_modules=['IP2Location'],\nurl=\"https:\/\/github.com\/chrislim2888\/ip2location-python\",\npackages=setuptools.find_packages(),\ntests_require=['pytest>=3.0.6'],\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3.11\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n],\n)\n"
    },
    {
        "package_name": "iptools-0.7.0",
        "file_list": "AUTHORS CHANGES .gitignore conf.py index.rst Makefile requirements.txt .gitignore .gitignore INSTALL ipv4.py ipv6.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nimport sys\nfrom iptools import __version__\nfrom setuptools import setup, find_packages\n\nsetup_requires = []\nif 'nosetests' in sys.argv[1:]:\nsetup_requires.append('nose>=1.0')\n\ntests_require = ['nose>=1.0']\n\nsetup(\nname='iptools',\nversion=__version__,\ndescription='Python utilites for manipulating IPv4 and IPv6 addresses',\nauthor='Bryan Davis',\nauthor_email='bd808@bd808.com',\nurl='https:\/\/github.com\/bd808\/python-iptools',\ndownload_url='http:\/\/pypi.python.org\/packages\/source\/i\/iptools\/',\nlicense='BSD',\nplatforms=['any', ],\npackages=find_packages(exclude=['docs', 'tests', 'tests.*']),\ninclude_package_data=True,\ntest_suite='nose.collector',\ntests_require=tests_require,\nsetup_requires=setup_requires,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Topic :: Utilities',\n'Topic :: Internet',\n],\nkeywords=\"ip2long long2ip django cidr ipv4 ipv6\",\nlong_description=\"\"\"\nUtilities for manipulating IPv4 and IPv6 addresses including a\nclass that can be used to include CIDR network blocks in Django's\nINTERNAL_IPS setting.\n\nFull documentation at http:\/\/python-iptools.readthedocs.org\/\n\"\"\",\nzip_safe=False,\nextras_require={\n'testing': tests_require,\n},\n)\n\n# vim: set sw=4 ts=4 sts=4 et :\n"
    },
    {
        "package_name": "ipydatawidgets-4.3.1.post1",
        "file_list": "DataImage.ipynb introduction.ipynb test.ipynb extension.js index.js index.js.LICENSE.txt index.js.map __init__.py media.py serializers.py traits.py union.py widgets.py __init__.py conftest.py test_nbextension_path.py test_ndarray_serializers.py test_ndarray_trait.py test_union.py test_widgets.py __init__.py widgets.py _frontend.py _version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt jupyter-datawidgets.json lerna.json LICENSE.txt MANIFEST.in package-lock.json package.json .npmignore package.json 511.22f79422468 824.786455fe656 880.db5a1c77c98 remoteEntry.6bb style.js third-party-lic jupyterlab-datawidgets-7.1.1.tgz package.json index.ts tsconfig.json .npmignore index.js index.js.LICENSE.txt index.js.map package.json base.ts extension.ts index.ts media.ts ndarray.ts version.ts karma.conf.js common.spec.ts dummy-manager.spec.ts media.spec.ts ndarray.spec.ts tsconfig.json union.spec.ts util.spec.ts tsconfig.json webpack.config.js package.json common.ts compression.ts index.ts ndarray.ts union.ts util.ts karma.conf.js common.spec.ts dummy-manager.spec.ts ndarray.spec.ts testhelper.spec.ts tsconfig.json union.spec.ts util.spec.ts tsconfig.json PKG-INFO pyproject.toml pytest.ini README.md setup.cfg setup.py tsconfig-base.json tsconfig.json",
        "setup.py": "#!\/usr\/bin\/env python\n# coding: utf-8\n\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nfrom __future__ import print_function\n\n# the name of the project\nname = 'ipydatawidgets'\n\n#-----------------------------------------------------------------------------\n# Minimal Python version sanity check\n#-----------------------------------------------------------------------------\n\nimport sys\n\nv = sys.version_info\nif v[:2] < (2, 7) or (v[0] >= 3 and v[:2] < (3, 3)):\n# Note: 3.3 is untested, but we'll still allow it\nerror = \"ERROR: %s requires Python version 2.7 or 3.3 or above.\" % name\nprint(error, file=sys.stderr)\nsys.exit(1)\n\n#-----------------------------------------------------------------------------\n# get on with it\n#-----------------------------------------------------------------------------\n\nimport io\nimport os\nfrom glob import glob\n\nfrom setuptools import setup, find_packages\n\nfrom jupyter_packaging import (create_cmdclass, install_npm, ensure_targets,\ncombine_commands)\n\npjoin = os.path.join\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Representative files that should exist after a successful build\njstargets = [\nos.path.join(here, name, 'nbextension', 'static', 'extension.js'),\nos.path.join(here, name, 'nbextension', 'static', 'index.js'),\nos.path.join(here, 'packages', 'jlabextension', 'build', 'index.js'),\n]\n\nversion_ns = {}\nwith io.open(pjoin(here, name, '_version.py'), encoding=\"utf8\") as f:\nexec(f.read(), {}, version_ns)\n\n\ncmdclass = create_cmdclass(\n'js',\ndata_files_spec=[\n('share\/jupyter\/nbextensions\/jupyter-datawidgets',\nname + '\/nbextension\/static',\n'*.js'),\n('share\/jupyter\/nbextensions\/jupyter-datawidgets',\nname + '\/nbextension\/static',\n'*.js.map'),\n('share\/jupyter\/lab\/extensions',\n'packages\/jlabextension\/dist',\n'jupyterlab-datawidgets-*.tgz'),\n('share\/jupyter\/labextensions\/jupyterlab-datawidgets',\n'packages\/jlabextension\/dist\/jupyterlab-datawidgets',\n'**\/*.*'),\n('etc\/jupyter\/nbconfig',\n'jupyter-config',\n'**\/*.json'),\n],)\ncmdclass['js'] = combine_commands(\ninstall_npm(here),\nensure_targets(jstargets),\n)\n\n\nsetup_args = dict(\nname = name,\ndescription = \"A set of widgets to help facilitate reuse of large datasets across widgets\",\nversion = version_ns['__version__'],\nscripts = glob(pjoin('scripts', '*')),\ncmdclass = cmdclass,\npackages = find_packages(here),\ninclude_package_data = True,\nauthor = 'Jupyter Development Team',\nauthor_email = 'jupyter@googlegroups.com',\nurl = 'https:\/\/github.com\/vidartf\/ipydatawidgets',\nlicense = 'BSD',\nplatforms = \"Linux, Mac OS X, Windows\",\nkeywords = ['Jupyter', 'Widgets', 'IPython'],\nclassifiers = [\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: BSD License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Framework :: Jupyter',\n],\n)\n\n\nsetuptools_args = {}\ninstall_requires = setuptools_args['install_requires'] = [\n'ipywidgets>=7.0.0',\n'numpy',\n'six',\n'traittypes>=0.2.0',\n]\n\nextras_require = setuptools_args['extras_require'] = {\n'test': [\n'pytest>=4',\n'pytest-cov',\n'nbval>=0.9.2',\n],\n'docs': [\n'sphinx',\n'recommonmark',\n'sphinx_rtd_theme'\n],\n}\n\nif 'setuptools' in sys.modules:\nsetup_args.update(setuptools_args)\n\nsetup_args.pop('scripts', None)\n\nsetup_args.update(setuptools_args)\n\nif __name__ == '__main__':\nsetup(**setup_args)\n"
    },
    {
        "package_name": "ipyleaflet-0.17.0",
        "file_list": "basemaps.py here.py __init__.py package.json 056dcd0b0dea7c78019243311551d64b.png 07f16cd155661436fe27959eab15c820.png 0b50583aa1b8ff230b57b92263e47a3e.png 0f2c10250081cf1bd9a4d2250b80dba6.png 138.73f84e4378b8165bf802.js 2273e3d8ad9264b7daa5bdbf8e6b47f8.png 243.74743fa9e30be52e69d5.js 243.74743fa9e30be52e69d5.js.LICENSE.txt 292.4107fc80f490ac63e379.js 340.b813e0996b4847b4fa5f.js 35.12f6e2a2b7afd1d16807.js 35ae4b5f1bf198c6d955618b85710d05.png 366.9d37fd0c17e16d687d3b.js 401d815dc206b8dc1b17cd0e37695975.png 408.24489a1928f1ef461a23.js 44a526eed258222515aa21eaffd14a96.png 473ee081160a469c95199d70e78f55fa.png 4f0283c6ce28e888000e978e537a6a56.png 549b33bab7247b619c0292995f5a906b.png 592b7360116d244f9dd932b0c0041982.png 647.82001b61c8bfda7976e9.js 665.630b45b3f0d4998b678f.js 687.acbe5801d1114c214fc3.js 69fbc9c24b3665b801445c9bccc7017d.png 6a1e950d14904d4b6fb5c9bdc3dfad06.png 6e8e462555c4b10dbfbc206e8276e6e2.png 732.002a8419ebc392bf8eb9.js 738.ce127a06e422969ea974.js 751.205df60d5fa379577f0b.js 787.648a7fbb698753a012db.js 790.a80c21d1f3533605a71e.js 7910c667cb5ddcdcb4ee3278627c85e1.png 79148a43587cbe5c43d24fa894a78ba3.png 795.5a0b76ffe458129e8ed4.js 795.5a0b76ffe458129e8ed4.js.LICENSE.txt 818.3d2be5bbcb6537a38633.js 860.24094fcdc2f045826bcd.js 874.28aceb3af2ca7bb62440.js 961.cf93e7085b1c412600d8.js 980.2006c5161690f592cc19.js 994ef255f2077b24b0d8975e90e37a33.png 9e9c77db241e8a58da99bf28694c907d.png a6137456ed160d7606981aa57c559898.png cfe6f6ffc5b2d6c482c36c68522f0282.png d3a5d64a8534322988a4bed1b7dbc8b0.png ddb8362e333c8f3225da9d578d00c14c.png deac1d4aa2ccf7ed832e4db55bb64e63.png e81afdf0b23bc88ea3e6ef3fc2fb65d6.png f4b0c949877c5f94158208551a57e29d.png f9b7a75b186911a1b04d08f8db305b7a.gif fd48ced8485c638cadcea3eaab6d0937.png remoteEntry.87c5f425be4cc49a1717.js style.js leaflet.py d6926e36feb2224311ab.png e41bc4be3d9cc8fcda26.png extension.js index.js index.js.LICENSE.txt index.js.map projections.py velocity.py xarray_ds.py _version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt package.json AttributionControl.js Control.js DrawControl.js FullScreenControl.js LayersControl.js LegendControl.js MeasureControl.js ScaleControl.js SearchControl.js SplitMapControl.js WidgetControl.js ZoomControl.js embed.js extension.js index.js jupyter-leaflet.css jupyter-leaflet.js jupyterlab-plugin.js AntPath.js AwesomeIcon.js Circle.js CircleMarker.js DivIcon.js FeatureGroup.js GeoJSON.js Heatmap.js Icon.js ImageOverlay.js Layer.js LayerGroup.js LocalTileLayer.js MagnifyingGlass.js Marker.js MarkerCluster.js Path.js Polygon.js Polyline.js Popup.js RasterLayer.js Rectangle.js TileLayer.js VectorLayer.js VectorTileLayer.js Velocity.js VideoOverlay.js WMSLayer.js leaflet-heat.js leaflet-magnifyingglass.js leaflet.js Map.js notebook.js projections.js utils.js webpack.config.js jupyter-leaflet.json LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\n\nimport os\nfrom setuptools import setup, find_packages\n\nfrom jupyter_packaging import (\ncreate_cmdclass,\ninstall_npm,\nensure_targets,\ncombine_commands,\nget_version,\nskip_if_exists\n)\n\n# the name of the package\nname = 'ipyleaflet'\nlong_description = 'A Jupyter widget for dynamic Leaflet maps'\n\nhere = os.path.dirname(os.path.abspath(__file__))\n\n# Get ipyleaflet version\nversion = get_version(os.path.join(name, '_version.py'))\n\njs_dir = os.path.join(here, 'js')\n\n# Representative files that should exist after a successful build\njstargets = [\nos.path.join('ipyleaflet\/nbextension', 'index.js'),\nos.path.join('ipyleaflet\/labextension', 'package.json'),\n]\n\ndata_files_spec = [\n('share\/jupyter\/nbextensions\/jupyter-leaflet', 'ipyleaflet\/nbextension', '*.*'),\n('share\/jupyter\/labextensions\/jupyter-leaflet', 'ipyleaflet\/labextension', \"**\"),\n('etc\/jupyter\/nbconfig\/notebook.d', '.', 'jupyter-leaflet.json'),\n]\n\ncmdclass = create_cmdclass('jsdeps', data_files_spec=data_files_spec)\njs_command = combine_commands(\ninstall_npm(js_dir, npm=[\"yarn\"], build_cmd='build'), ensure_targets(jstargets),\n)\n\nis_repo = os.path.exists(os.path.join(here, '.git'))\nif is_repo:\ncmdclass['jsdeps'] = js_command\nelse:\ncmdclass['jsdeps'] = skip_if_exists(jstargets, js_command)\n\nsetup_args = dict(\nname=name,\nversion=version,\ndescription='A Jupyter widget for dynamic Leaflet maps',\nlong_description=long_description,\nlicense='MIT License',\ninclude_package_data=True,\ninstall_requires=[\n'ipywidgets>=7.6.0,<8',\n'traittypes>=0.2.1,<3',\n'xyzservices>=2021.8.1'\n],\npackages=find_packages(),\nzip_safe=False,\ncmdclass=cmdclass,\nauthor='Project Jupyter',\nauthor_email='jupyter@googlegroups.com',\nurl='https:\/\/github.com\/jupyter-widgets\/ipyleaflet',\nkeywords=['ipython', 'jupyter', 'widgets', 'graphics', 'GIS'],\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'Topic :: Multimedia :: Graphics',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10'\n],\n)\n\nsetup(**setup_args)\n"
    },
    {
        "package_name": "ipyvolume-0.5.2",
        "file_list": "astro.py bokeh.py datasets.py embed.py examples.py headless.py moviemaker.py pylab.py serialize.py extension.js extension.js.map index.js index.js.map three.js three.js.map vendor~main.index.js vendor~main.index.js.map styles.py test_all.py traittypes.py transferfunction.py utils.py widgets.py _version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt ipyvolume.json LICENSE MANIFEST.in PKG-INFO README.md README.rst setup.cfg setup.py",
        "setup.py": "from __future__ import print_function\nfrom setuptools import setup, find_packages, Command\nfrom setuptools.command.sdist import sdist\nfrom setuptools.command.build_py import build_py\nfrom setuptools.command.egg_info import egg_info\nfrom subprocess import check_call\nimport os\nimport sys\nimport platform\n\nhere = os.path.dirname(os.path.abspath(__file__))\nnode_root = os.path.join(here, 'js')\nis_repo = os.path.exists(os.path.join(here, '.git'))\n\nnpm_path = os.pathsep.join([\nos.path.join(node_root, 'node_modules', '.bin'),\nos.environ.get('PATH', os.defpath),\n])\n\nfrom distutils import log\nlog.set_verbosity(log.DEBUG)\nlog.info('setup.py entered')\nlog.info('$PATH=%s' % os.environ['PATH'])\n\ndef read(fname):\nreturn open(os.path.join(os.path.dirname(__file__), fname)).read()\n\nLONG_DESCRIPTION = read(\"README.rst\")\n\ndef js_prerelease(command, strict=False):\n\"\"\"decorator for building minified js\/css prior to another command\"\"\"\nclass DecoratedCommand(command):\ndef run(self):\njsdeps = self.distribution.get_command_obj('jsdeps')\nif not is_repo and all(os.path.exists(t) for t in jsdeps.targets):\n# sdist, nothing to do\ncommand.run(self)\nreturn\n\ntry:\nself.distribution.run_command('jsdeps')\nexcept Exception as e:\nmissing = [t for t in jsdeps.targets if not os.path.exists(t)]\nif strict or missing:\nlog.warn('rebuilding js and css failed')\nif missing:\nlog.error('missing files: %s' % missing)\nraise e\nelse:\nlog.warn('rebuilding js and css failed (not a problem)')\nlog.warn(str(e))\ncommand.run(self)\nupdate_package_data(self.distribution)\nreturn DecoratedCommand\n\ndef update_package_data(distribution):\n\"\"\"update package_data to catch changes during setup\"\"\"\nbuild_py = distribution.get_command_obj('build_py')\n# distribution.package_data = find_package_data()\n# re-init build_py options which load package_data\nbuild_py.finalize_options()\n\n\nclass NPM(Command):\ndescription = 'install package.json dependencies using npm'\n\nuser_options = []\n\nnode_modules = os.path.join(node_root, 'node_modules')\n\ntargets = [\nos.path.join(here, 'ipyvolume', 'static', 'extension.js'),\nos.path.join(here, 'ipyvolume', 'static', 'index.js'),\nos.path.join(here, 'ipyvolume', 'static', 'three.js')\n]\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef get_npm_name(self):\nnpmName = 'npm';\nif platform.system() == 'Windows':\nnpmName = 'npm.cmd';\nreturn npmName;\n\ndef has_npm(self):\nnpmName = self.get_npm_name();\ntry:\ncheck_call([npmName, '--version'])\nreturn True\nexcept:\nreturn False\n\ndef should_run_npm_install(self):\npackage_json = os.path.join(node_root, 'package.json')\nnode_modules_exists = os.path.exists(self.node_modules)\nreturn self.has_npm()\n\ndef run(self):\nhas_npm = self.has_npm()\nif not has_npm:\nlog.error(\"`npm` unavailable. If you're running this command using sudo, make sure `npm` is available to sudo\")\n\nenv = os.environ.copy()\nenv['PATH'] = npm_path\n\nif self.should_run_npm_install():\nlog.info(\"Installing build dependencies with npm. This may take a while...\")\nnpmName = self.get_npm_name();\ncheck_call([npmName, 'install'], cwd=node_root, stdout=sys.stdout, stderr=sys.stderr)\nos.utime(self.node_modules, None)\n\nfor t in self.targets:\nif not os.path.exists(t):\nmsg = 'Missing file: %s' % t\nif not has_npm:\nmsg += '\\nnpm is required to build a development version of widgetsnbextension'\nraise ValueError(msg)\n\n# update package data in case this created new files\nupdate_package_data(self.distribution)\n\nversion_ns = {}\nwith open(os.path.join(here, 'ipyvolume', '_version.py')) as f:\nexec(f.read(), {}, version_ns)\n\nsetup_args = {\n'name': 'ipyvolume',\n'version': version_ns['__version__'],\n'description': 'IPython widget for rendering 3d volumes',\n'long_description': LONG_DESCRIPTION,\n'include_package_data': True,\n'data_files': [\n('share\/jupyter\/nbextensions\/ipyvolume', [\n'ipyvolume\/static\/extension.js',\n'ipyvolume\/static\/index.js',\n'ipyvolume\/static\/three.js',\n'ipyvolume\/static\/index.js.map',\n]),\n('etc\/jupyter\/nbconfig\/notebook.d' , ['ipyvolume.json'])\n],\n'install_requires': [\n'ipywidgets>=7.5',\n'numpy',\n'traittypes',\n'traitlets',\n'Pillow',\n'ipywebrtc',\n'requests',\n'pythreejs>=1.0.0'\n],\n'license': 'MIT',\n'packages': find_packages(),\n'zip_safe': False,\n'cmdclass': {\n'build_py': js_prerelease(build_py),\n'egg_info': js_prerelease(egg_info),\n'sdist': js_prerelease(sdist, strict=True),\n'jsdeps': NPM,\n},\n\n'author': 'Maarten A. Breddels',\n'author_email': 'maartenbreddels@gmail.com',\n'url': 'https:\/\/github.com\/maartenbreddels\/ipyvolume',\n'keywords': [\n'ipython',\n'jupyter',\n'widgets',\n'volume rendering'\n],\n'classifiers': [\n'Development Status :: 4 - Beta',\n'Framework :: IPython',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'Topic :: Multimedia :: Graphics',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n],\n}\n\nsetup(**setup_args)\n"
    },
    {
        "package_name": "ipywidgets-7.7.1",
        "file_list": "CONTRIBUTING.md make.bat Makefile requirements.txt changelog.md conf.py contributing.md dev_docs.md dev_install.md dev_release.md dev_testing.md embedding.md Beat Frequencies.ipynb Controller.ipynb Exploring Graphs.ipynb Export As (nbconvert).ipynb Factoring.ipynb Image Browser.ipynb Image Processing.ipynb align-content.svg align-items.svg align-self.svg applayout-weather.png assoc.svg Big.Buck.Bunny.mp3 Big.Buck.Bunny.mp4 busy.svg display.svg execute.svg flex-container.svg flex-direction1.svg flex-grow.svg flex-items.svg flex-wrap.svg flexbox.png gaussian_with_grid.png gaussian_with_grid_tiny.png grid-area.png grid-cell.png grid-justify-self-center.png grid-justify-self-end.png grid-justify-self-start.png grid-justify-self-stretch.png grid-line.png grid-start-end-a.png grid-start-end-b.png grid-start-end-d.png grid-track.png inputoutput.PNG justify-content.svg MultilanguageKernels.graffle MultilanguageKernels.png order-2.svg ParallelKernels.graffle ParallelKernels.png state.svg state_sync.svg transport.svg VizInteractCompute.graffle VizInteractCompute.png WidgetArch.graffle WidgetArch.png widgetcomm.svg widgetcomm2.svg WidgetModelView.graffle WidgetModelView.png widgets.PNG Index.ipynb Layout Example.ipynb Layout Templates.ipynb Lorenz Differential Equations.ipynb Media widgets.ipynb Output Widget.ipynb Using Interact.ipynb Variable Inspector.ipynb Widget Alignment.ipynb Widget Asynchronous.ipynb Widget Basics.ipynb Widget Custom.ipynb Widget Events.ipynb Widget List.ipynb Widget Low Level.ipynb Widget Styling.ipynb examples.md index.rst migration_guides.md user_guide.rst user_install.md embed.py state.schema.json test_embed.py __init__.py view.schema.json docutils.py domwidget.py interaction.py jupyter-logo-transparent.png test_docutils.py test_interaction.py test_link.py test_selectioncontainer.py test_send_state.py test_set_state.py test_traits.py test_widget.py test_widget_box.py test_widget_float.py test_widget_image.py test_widget_output.py test_widget_selection.py test_widget_string.py test_widget_templates.py test_widget_upload.py utils.py __init__.py trait_types.py util.py valuewidget.py widget.py widget_bool.py widget_box.py widget_button.py widget_color.py widget_controller.py widget_core.py widget_date.py widget_description.py widget_float.py widget_int.py widget_layout.py widget_link.py widget_media.py widget_output.py widget_selection.py widget_selectioncontainer.py widget_string.py widget_style.py widget_templates.py widget_upload.py __init__.py _version.py __init__.py LICENSE package.json PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# coding: utf-8\n\n# Copyright (c) IPython Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nfrom __future__ import print_function\n\n# the name of the package\nname = 'ipywidgets'\n\nLONG_DESCRIPTION = \"\"\"\n.. image:: https:\/\/img.shields.io\/pypi\/v\/ipywidgets.svg\n:target: https:\/\/pypi.python.org\/pypi\/ipywidgets\/\n:alt: Version Number\n\n.. image:: https:\/\/img.shields.io\/pypi\/dm\/ipywidgets.svg\n:target: https:\/\/pypi.python.org\/pypi\/ipywidgets\/\n:alt: Number of PyPI downloads\n\nInteractive HTML Widgets\n========================\n\nInteractive HTML widgets for Jupyter notebooks and the IPython kernel.\n\nUsage\n=====\n\n.. code-block:: python\n\nfrom ipywidgets import IntSlider\nIntSlider()\n\"\"\"\n\n#-----------------------------------------------------------------------------\n# Minimal Python version sanity check\n#-----------------------------------------------------------------------------\n\nimport sys\n\nv = sys.version_info\nif v[:2] < (2,7) or (v[0] >= 3 and v[:2] < (3,3)):\nerror = \"ERROR: %s requires Python version 2.7 or 3.3 or above.\" % name\nprint(error, file=sys.stderr)\nsys.exit(1)\n\n#-----------------------------------------------------------------------------\n# get on with it\n#-----------------------------------------------------------------------------\n\nimport os\nfrom distutils.core import setup\nfrom distutils.command.build_py import build_py\nfrom distutils.command.sdist import sdist\nfrom os.path import join as pjoin\n\n\npjoin = os.path.join\nhere = os.path.abspath(os.path.dirname(__file__))\n\npackages = []\nfor d, _, _ in os.walk(pjoin(here, name)):\nif os.path.exists(pjoin(d, '__init__.py')):\npackages.append(d[len(here)+1:].replace(os.path.sep, '.'))\n\nversion_ns = {}\nwith open(pjoin(here, name, '_version.py')) as f:\nexec(f.read(), {}, version_ns)\n\n\nsetup_args = dict(\nname = name,\nversion = version_ns['__version__'],\nscripts = [],\npackages = packages,\npackage_data = {\n'ipywidgets': [ 'state.schema.json', 'view.schema.json' ],\n# Test data needs to be packaged until tests are moved out of module\n'ipywidgets.widgets.tests': ['data\/jupyter-logo-transparent.png']\n},\ndescription = \"IPython HTML widgets for Jupyter\",\nlong_description = LONG_DESCRIPTION,\nauthor = 'IPython Development Team',\nauthor_email = 'ipython-dev@scipy.org',\nurl = 'http:\/\/ipython.org',\nlicense = 'BSD',\nplatforms = \"Linux, Mac OS X, Windows\",\nkeywords = ['Interactive', 'Interpreter', 'Shell', 'Web'],\nclassifiers = [\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: BSD License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Framework :: Jupyter'\n],\ncmdclass = {\n'build_py': build_py,\n'sdist': sdist,\n},\n)\n\nif 'develop' in sys.argv or any(a.startswith('bdist') for a in sys.argv):\nimport setuptools\n\nsetuptools_args = {}\ninstall_requires = setuptools_args['install_requires'] = [\n'ipykernel>=4.5.1',\n'ipython_genutils~=0.2.0',\n'traitlets>=4.3.1',\n# TODO: Dynamically add this dependency\n# only if notebook 4.x is installed in this\n# interpreter, to allow ipywidgets to be\n# installed on bare kernels.\n'widgetsnbextension~=3.6.0'\n]\n\nextras_require = setuptools_args['extras_require'] = {\n':python_version<\"3.3\"' : ['ipython>=4.0.0,<6.0.0'],\n':python_version>=\"3.3\"': ['ipython>=4.0.0'],\n':python_version>=\"3.6\"': ['jupyterlab_widgets>=1.0.0'],\n'test:python_version==\"2.7\"': ['mock'],\n'test': ['pytest>=3.6.0', 'pytest-cov'],\n}\n\nif 'setuptools' in sys.modules:\nsetup_args.update(setuptools_args)\n\nif __name__ == '__main__':\nsetup(**setup_args)\n"
    },
    {
        "package_name": "itypes-1.2.0",
        "file_list": "dependency_links.txt PKG-INFO SOURCES.txt top_level.txt itypes.py PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nfrom setuptools import setup\nimport re\nimport os\nimport sys\n\n\ndef get_version():\n\"\"\"\nReturn package version as listed in `__version__` in `init.py`.\n\"\"\"\ninit_py = open('itypes.py').read()\nreturn re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", init_py).group(1)\n\n\nversion = get_version()\n\n\nif sys.argv[-1] == 'publish':\nos.system(\"python setup.py sdist upload\")\nprint(\"You probably want to also tag the version now:\")\nprint(\" git tag -a %s -m 'version %s'\" % (version, version))\nprint(\" git push --tags\")\nsys.exit()\n\n\ndef read(fname):\nwith open(fname) as fp:\ncontent = fp.read()\nreturn content\n\n\nsetup(\nname='itypes',\nversion=version,\nurl='http:\/\/github.com\/PavanTatikonda\/itypes',\nlicense='BSD',\ndescription='Simple immutable types for python.',\nlong_description=read('README.md'),\nlong_description_content_type=\"text\/markdown\",\nauthor='Tom Christie',\nauthor_email='tom@tomchristie.com',\npy_modules=['itypes'],\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Topic :: Internet :: WWW\/HTTP',\n]\n)\n"
    },
    {
        "package_name": "j2cli-0.3.10",
        "file_list": "cli.py context.py customize.py filters.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\n\"\"\" j2cli - Jinja2 Command-Line Tool\n================================\n\n`j2cli` is a command-line tool for templating in shell-scripts,\nleveraging the [Jinja2](http:\/\/jinja.pocoo.org\/docs\/) library.\n\nFeatures:\n\n* Jinja2 templating\n* INI, YAML, JSON data sources supported\n* Allows the use of environment variables in templates! Hello [Docker](http:\/\/www.docker.com\/) :)\n\nInspired by [mattrobenolt\/jinja2-cli](https:\/\/github.com\/mattrobenolt\/jinja2-cli)\n\"\"\"\n\nfrom setuptools import setup, find_packages\nimport sys\n\n# PyYAML 3.11 was the last to support Python 2.6\n# This code limits pyyaml version for older pythons\npyyaml_version = 'pyyaml >= 3.10' # fresh\nif sys.version_info[:2] == (2, 6):\npyyaml_version = 'pyyaml<=3.11'\n\n\nsetup(\nname='j2cli',\nversion='0.3.10',\nauthor='Mark Vartanyan',\nauthor_email='kolypto@gmail.com',\n\nurl='https:\/\/github.com\/kolypto\/j2cli',\nlicense='BSD',\ndescription='Command-line interface to Jinja2 for templating in shell scripts.',\nlong_description=__doc__, # can't do open('README.md').read() because we're describing self\nlong_description_content_type='text\/markdown',\nkeywords=['Jinja2', 'templating', 'command-line', 'CLI'],\n\npackages=find_packages(),\nscripts=[],\nentry_points={\n'console_scripts': [\n'j2 = j2cli:main',\n]\n},\n\ninstall_requires=[\n'jinja2 >= 2.7.2',\n],\nextras_require={\n'yaml': [pyyaml_version,]\n},\ninclude_package_data=True,\nzip_safe=False,\ntest_suite='nose.collector',\n\nplatforms='any',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'Operating System :: OS Independent',\n'Topic :: Software Development',\n'Natural Language :: English',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 3',\n],\n)\n"
    },
    {
        "package_name": "Janome-0.4.2",
        "file_list": "janome janome.bat analyzer.py charfilter.py dic.py fst.py lattice.py progress.py chardef.py connections1.py connections2.py entries_buckets.py entries_compact0.py entries_compact0_idx.py entries_compact1.py entries_compact1_idx.py entries_compact2.py entries_compact2_idx.py entries_compact3.py entries_compact3_idx.py entries_compact4.py entries_compact4_idx.py entries_compact5.py entries_compact5_idx.py entries_compact6.py entries_compact6_idx.py entries_compact7.py entries_compact7_idx.py entries_compact8.py entries_compact8_idx.py entries_compact9.py entries_compact9_idx.py entries_extra0.py entries_extra0_idx.py entries_extra1.py entries_extra1_idx.py entries_extra2.py entries_extra2_idx.py entries_extra3.py entries_extra3_idx.py entries_extra4.py entries_extra4_idx.py entries_extra5.py entries_extra5_idx.py entries_extra6.py entries_extra6_idx.py entries_extra7.py entries_extra7_idx.py entries_extra8.py entries_extra8_idx.py entries_extra9.py entries_extra9_idx.py fst_data0.py fst_data1.py unknowns.py __init__.py system_dic.py tokenfilter.py tokenizer.py version.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt NOTICE.txt PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "import shutil\nimport os\nfrom janome.version import JANOME_VERSION\nfrom janome.dic import *\nfrom zipfile import ZipFile\nfrom setuptools import setup\nimport sys\nfrom io import open\n\nsys.path.append('.\/janome')\nsys.path.append('.\/tests')\n\n\ndicdir = 'ipadic'\n\nif os.path.exists(os.path.join(dicdir, 'sysdic.zip')):\nif os.path.exists('sysdic'):\nshutil.rmtree('sysdic')\nprint('Unzip dictionary data...')\nwith ZipFile(os.path.join(dicdir, 'sysdic.zip')) as zf:\nzf.extractall(\"janome\")\n\nname = 'janome'\n\nwith open(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'README.rst'), encoding='utf-8') as f:\nlong_description = f.read()\n\nclassifiers = [\n\"Development Status :: 4 - Beta\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Natural Language :: Japanese\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\"\n]\n\nsetup(\nname='Janome',\nversion=JANOME_VERSION,\ndescription='Japanese morphological analysis engine.',\nlong_description=long_description,\nauthor='Tomoko Uchida',\nauthor_email='tomoko.uchida.1111@gmail.com',\nlicense='AL2',\nclassifiers=classifiers,\nurl='https:\/\/mocobeta.github.io\/janome\/en\/',\npackages=['janome', 'janome.sysdic'],\npackage_data={'janome.sysdic': ['fst.data*']},\nscripts=['bin\/janome', 'bin\/janome.bat'],\ntest_suite='suite'\n)\n"
    },
    {
        "package_name": "japanize-matplotlib-1.1.3",
        "file_list": "ipaexg.ttf IPA_Font_License_Agreement_v1.0.txt Readme_ipaexg00301.txt japanize_matplotlib.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# encoding: utf8\nfrom distutils.core import setup\nfrom setuptools import find_packages\nfrom os import path\n\nwith open(path.join(path.abspath(path.dirname(__file__)), 'README.md'), encoding='utf-8') as f:\nlong_description = f.read()\n\ninstall_requires = ['matplotlib']\n\nsetup(name='japanize-matplotlib',\nversion='1.1.3',\ndescription='matplotlib\u306e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a\u3092\u81ea\u52d5\u3067\u65e5\u672c\u8a9e\u5316\u3059\u308b',\nauthor='uehara1414',\nauthor_email='akiya.noface@gmail.com',\nurl='https:\/\/github.com\/uehara1414\/japanize-matplotlib',\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nlicense='MIT License',\npackages=find_packages(),\ninstall_requires=install_requires,\ninclude_package_data=True,\npackage_data={\n'japanize_matplotlib': ['fonts\/*'],\n})\n"
    },
    {
        "package_name": "java-access-bridge-wrapper-0.9.4",
        "file_list": "LICENSE PKG-INFO pyproject.toml README.md setup.py context_tree.py jab_types.py jab_wrapper.py actions_parser.py hypertext_parser.py icon_parser.py keybind_parser.py parser_if.py selection_parser.py table_parser.py text_parser.py value_parser.py utils.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackage_dir = \\\n{'': 'src'}\n\npackages = \\\n['JABWrapper', 'JABWrapper.parsers']\n\npackage_data = \\\n{'': ['*']}\n\nextras_require = \\\n{':python_full_version < \"3.7.6\" and sys_platform == \"win32\" or python_full_version > \"3.7.6\" and python_full_version < \"3.8.1\" and sys_platform == \"win32\" or python_full_version > \"3.8.1\" and sys_platform == \"win32\"': ['pywin32>=300,<304']}\n\nsetup_kwargs = {\n'name': 'java-access-bridge-wrapper',\n'version': '0.9.4',\n'description': 'Python wrapper for the Windows Java Access Bridge',\n'long_description': '[![Version](https:\/\/img.shields.io\/pypi\/v\/java-access-bridge-wrapper.svg?label=version)](https:\/\/pypi.org\/project\/java-access-bridge-wrapper\/)\\n[![License](https:\/\/img.shields.io\/pypi\/l\/java-access-bridge-wrapper.svg)](http:\/\/www.apache.org\/licenses\/LICENSE-2.0.html)\\n\\n# Introduction\\n\\nPython wrapper around the Java Access Bridge \/ Windows Access Bridge.\\n\\n# Prerequisites\\n\\n* 64-bit Windows\\n* Java >= 8 (https:\/\/docs.aws.amazon.com\/corretto\/latest\/corretto-8-ug\/downloads-list.html)\\n* Python >= 3.7 (https:\/\/www.python.org\/downloads\/release\/python-375\/)\\n\\nEnable the Java Access Bridge in windows\\n\\n C:\\\\path\\\\to\\\\java\\\\bin\\\\jabswitch -enable\\n\\n# Install\\n\\n pip install java-access-bridge-wrapper\\n\\n# How to use\\n\\nImport the Java Access Bridge (JAB) wrapper and optionally the context tree\\n\\n from JABWrapper.jab_wrapper import JavaAccessBridgeWrapper\\n from JABWrapper.context_tree import ContextNode, ContextTree, SearchElement\\n\\nThe JAB creates an virtual GUI window when it is opened. For the JAB to operate and receive events from the GUI, the calling code needs to implement the windows\\nmessage pump and call it in a loop. The JABWrapper object needs to be in the same thread.\\n\\nThis can be achieved for example by starting the message pump in a separate thread, where the JAB object is also initialized.\\n\\n GetMessage = ctypes.windll.user32.GetMessageW\\n TranslateMessage = ctypes.windll.user32.TranslateMessage\\n DispatchMessage = ctypes.windll.user32.DispatchMessageW\\n\\n def pump_background(pipe: queue.Queue):\\n try:\\n jab_wrapper = JavaAccessBridgeWrapper()\\n pipe.put(jab_wrapper)\\n message = byref(wintypes.MSG())\\n while GetMessage(message, 0, 0, 0) > 0:\\n TranslateMessage(message)\\n logging.debug(\"Dispatching msg={}\".format(repr(message)))\\n DispatchMessage(message)\\n except Exception as err:\\n pipe.put(None)\\n\\n def main():\\n pipe = queue.Queue()\\n thread = threading.Thread(target=pump_background, daemon=True, args=[pipe])\\n thread.start()\\n jab_wrapper = pipe.get()\\n if not jab_wrapper:\\n raise Exception(\"Failed to initialize Java Access Bridge Wrapper\")\\n time.sleep(0.1) # Wait until the initial messages are parsed, before accessing frames\\n\\n if __name__ == \"__main__\":\\n main()\\n\\nOnce the JABWrapper object is initialized, attach to some frame and optionally create the context tree to get the element tree of the application.\\n\\n jab_wrapper.switch_window_by_title(\"Frame title\")\\n context_tree = ContextTree(jab_wrapper)\\n\\n# Development\\n\\n## Development prerequisites\\n\\n* Install poetry: https:\/\/python-poetry.org\/docs\/\\n\\n## Test\\n\\nRun test script against simple Swing application\\n\\nset environment variable\\n\\n set RC_JAVA_ACCESS_BRIDGE_DLL=\"C:\\\\path\\\\to\\\\Java\\\\bin\\\\WindowsAccessBridge-64.dll\"\\n\\nRun test with poetry\\n\\n poetry run python tests\\\\test.py\\n\\n## Packaging\\n\\n poetry build\\n poetry publish\\n\\n## TODO:\\n\\n* Support for 32-bit Java Access Bridge version\\n* Implement rest of the utility functions to the JABWrapper\\n',\n'author': 'Robocorp',\n'author_email': 'support@robocorp.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/robocorp\/java-access-bridge-wrapper.git',\n'package_dir': package_dir,\n'packages': packages,\n'package_data': package_data,\n'extras_require': extras_require,\n'python_requires': '>=3.6.2,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "jdcal-1.4.1",
        "file_list": "dependency_links.txt PKG-INFO SOURCES.txt top_level.txt jdcal.py LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_jdcal.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom setuptools import setup\n\nimport jdcal\n\nversion = jdcal.__version__\n\nlong_description = open(\"README.rst\").read()\n\nsetup(\nname=\"jdcal\",\nversion=version,\ndescription=\"Julian dates from proleptic Gregorian and Julian calendars.\",\nlong_description=long_description,\nlicense='BSD',\nauthor=\"Prasanth Nair\",\nauthor_email=\"prasanthhn@gmail.com\",\nurl='https:\/\/github.com\/phn\/jdcal',\nclassifiers=[\n'Development Status :: 6 - Mature',\n'Intended Audience :: Science\/Research',\n'Operating System :: OS Independent',\n'License :: OSI Approved :: BSD License',\n'Topic :: Scientific\/Engineering :: Astronomy',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n],\npy_modules=[\"jdcal\"]\n)\n"
    },
    {
        "package_name": "jedi-0.18.1",
        "file_list": ".coveragerc AUTHORS.txt CHANGELOG.rst conftest.py conf.py acknowledgements.rst api-classes.rst api.rst changelog.rst development.rst features.rst installation.rst settings.rst testing.rst usage.rst global.rst index.rst Makefile README.md screenshot_complete.png screenshot_function.png screenshot_pydoc.png custom_style.css logo-src.txt logo.png ghbuttons.html sidebarlogo.html classes.py completion.py completion_cache.py environment.py errors.py exceptions.py file_name.py helpers.py interpreter.py keywords.py project.py extract.py __init__.py replstartup.py strings.py __init__.py cache.py common.py debug.py file_io.py analysis.py arguments.py base_value.py cache.py access.py getattr_static.py mixed.py functions.py __init__.py __main__.py value.py __init__.py context.py docstrings.py docstring_utils.py dynamic_params.py filters.py finder.py flow_analysis.py annotation.py base.py conversion.py generics.py stub_value.py typeshed.py type_var.py typing.py utils.py __init__.py helpers.py imports.py lazy_value.py names.py param.py parser_cache.py recursion.py references.py signature.py star_args.py syntax_tree.py sys_path.py utils.py decorator.py dynamic_arrays.py function.py instance.py iterable.py klass.py module.py namespace.py __init__.py __init__.py parser_utils.py django.py flask.py pytest.py registry.py stdlib.py __init__.py settings.py config.pyi registry.pyi __init__.pyi global_settings.pyi __init__.pyi i18n.pyi static.pyi __init__.pyi __init__.pyi actions.pyi apps.pyi checks.pyi decorators.pyi filters.pyi forms.pyi helpers.pyi models.pyi options.pyi sites.pyi admin_list.pyi admin_modify.pyi admin_static.pyi admin_urls.pyi base.pyi log.pyi __init__.pyi tests.pyi utils.pyi autocomplete.pyi decorators.pyi main.pyi __init__.pyi widgets.pyi __init__.pyi middleware.pyi urls.pyi utils.pyi views.pyi __init__.pyi admin.pyi apps.pyi backends.pyi base_user.pyi checks.pyi context_processors.pyi decorators.pyi forms.pyi modwsgi.pyi __init__.pyi hashers.pyi changepasswo createsuperu __init__.pyi __init__.pyi middleware.pyi mixins.pyi models.pyi password_validation.pyi signals.pyi tokens.pyi urls.pyi validators.pyi views.pyi __init__.pyi admin.pyi apps.pyi checks.pyi fields.pyi forms.pyi remo __in __init__.pyi models.pyi views.pyi __init__.pyi forms.pyi middleware.pyi models.pyi sitemaps.pyi flatpages.pyi __init__.pyi urls.pyi views.pyi __init__.pyi fields.pyi __init__.pyi __init__.pyi __init__.pyi humanize.pyi __init__.pyi __init__.pyi api.pyi constants.pyi context_processors.pyi middleware.pyi base.pyi cookie.pyi fallback.pyi session.pyi __init__.pyi utils.pyi views.pyi __init__.pyi general.pyi mixins.pyi statistics.pyi __init__.pyi constraints.pyi array.pyi citext.pyi hstore.pyi jsonb.pyi mixins.pyi ranges.pyi __init__.pyi functions.pyi indexes.pyi lookups.pyi operations.pyi search.pyi signals.pyi validators.pyi __init__.pyi middleware.pyi models.pyi __init__.pyi base.pyi cache.pyi cached_db.pyi db.pyi file.pyi signed_cookies.pyi __init__.pyi base_session.pyi exceptions.pyi clearses __init__ __init__.pyi middleware.pyi models.pyi serializers.pyi __init__.pyi ping_goo __init__ __init__.pyi views.pyi __init__.pyi apps.pyi management.pyi managers.pyi middleware.pyi models.pyi requests.pyi shortcuts.pyi __init__.pyi apps.pyi checks.pyi finders.pyi handlers.pyi colle finds runse __ini __init__.pyi storage.pyi staticfiles. __init__.pyi testing.pyi urls.pyi utils.pyi views.pyi __init__.pyi views.pyi __init__.pyi __init__.pyi base.pyi db.pyi dummy.pyi filebased.pyi locmem.pyi memcached.pyi __init__.pyi utils.pyi __init__.pyi caches.pyi database.pyi messages.pyi model_checks.pyi registry.pyi base.pyi csrf.pyi sessions.pyi __init__.pyi templates.pyi translation.pyi urls.pyi __init__.pyi exceptions.pyi base.pyi images.pyi locks.pyi move.pyi storage.pyi temp.pyi uploadedfile.pyi uploadhandler.pyi utils.pyi __init__.pyi base.pyi exception.pyi wsgi.pyi __init__.pyi base.pyi console.pyi dummy.pyi filebased.pyi locmem.pyi smtp.pyi __init__.pyi message.pyi utils.pyi __init__.pyi base.pyi color.pyi dumpdata.pyi loaddata.pyi makemessages.pyi runserver.pyi testserver.pyi __init__.pyi sql.pyi templates.pyi utils.pyi __init__.pyi paginator.pyi base.pyi json.pyi python.pyi __init__.pyi basehttp.pyi __init__.pyi signals.pyi signing.pyi validators.pyi wsgi.pyi __init__.pyi base.pyi client.pyi creation.pyi features.pyi introspection.pyi operations.pyi schema.pyi validation.pyi __init__.pyi ddl_references.pyi base.pyi __init__.pyi client.pyi __init__.pyi base.pyi client.pyi creation.pyi operations.pyi __init__.pyi signals.pyi base.pyi creation.pyi features.pyi introspection.pyi operations.pyi schema.pyi __init__.pyi utils.pyi __init__.pyi autodetector.pyi exceptions.pyi executor.pyi graph.pyi loader.pyi migration.pyi base.pyi fields.pyi models.pyi special.pyi utils.pyi __init__.pyi optimizer.pyi questioner.pyi recorder.pyi serializer.pyi state.pyi topological_sort.pyi utils.pyi writer.pyi __init__.pyi aggregates.pyi base.pyi constraints.pyi deletion.pyi enums.pyi expressions.pyi files.pyi mixins.pyi proxy.pyi related.pyi related_descriptors.pyi related_lookups.pyi reverse_related.pyi __init__.pyi comparison.pyi datetime.pyi math.pyi mixins.pyi text.pyi window.pyi __init__.pyi indexes.pyi lookups.pyi manager.pyi options.pyi query.pyi query_utils.pyi signals.pyi compiler.pyi constants.pyi datastructures.pyi query.pyi subqueries.pyi where.pyi __init__.pyi utils.pyi __init__.pyi transaction.pyi utils.pyi __init__.pyi dispatcher.pyi __init__.pyi boundfield.pyi fields.pyi forms.pyi formsets.pyi models.pyi renderers.pyi utils.pyi widgets.pyi __init__.pyi cookie.pyi multipartparser.pyi request.pyi response.pyi __init__.pyi cache.pyi clickjacking.pyi common.pyi csrf.pyi gzip.pyi http.pyi locale.pyi security.pyi __init__.pyi shortcuts.pyi base.pyi django.pyi dummy.pyi jinja2.pyi utils.pyi __init__.pyi base.pyi context.pyi context_processors.pyi defaultfilters.pyi defaulttags.pyi engine.pyi exceptions.pyi library.pyi loader.pyi app_directories.pyi base.pyi cached.pyi filesystem.pyi locmem.pyi __init__.pyi loader_tags.pyi response.pyi smartif.pyi utils.pyi __init__.pyi cache.pyi i18n.pyi l10n.pyi static.pyi tz.pyi __init__.pyi client.pyi html.pyi runner.pyi selenium.pyi signals.pyi testcases.pyi utils.pyi __init__.pyi base.pyi conf.pyi converters.pyi exceptions.pyi resolvers.pyi utils.pyi __init__.pyi archive.pyi autoreload.pyi baseconv.pyi cache.pyi crypto.pyi datastructures.pyi dateformat.pyi dateparse.pyi dates.pyi datetime_safe.pyi deconstruct.pyi decorators.pyi deprecation.pyi duration.pyi encoding.pyi feedgenerator.pyi formats.pyi functional.pyi hashable.pyi html.pyi http.pyi inspect.pyi ipv6.pyi itercompat.pyi jslex.pyi log.pyi lorem_ipsum.pyi module_loading.pyi numberformat.pyi regex_helper.pyi safestring.pyi six.pyi termcolors.pyi text.pyi timesince.pyi timezone.pyi topological_sort.pyi reloader.pyi template.pyi trans_null.pyi trans_real.pyi __init__.pyi tree.pyi version.pyi xmlutils.pyi _os.pyi __init__.pyi csrf.pyi debug.pyi cache.pyi clickjacking.pyi csrf.pyi debug.pyi gzip.pyi http.pyi vary.pyi __init__.pyi defaults.pyi base.pyi dates.pyi detail.pyi edit.pyi list.pyi __init__.pyi i18n.pyi static.pyi __init__.pyi __init__.pyi LICENSE.txt LICENSE abc.pyi ast.pyi atexit.pyi BaseHTTPServer.pyi builtins.pyi CGIHTTPServer.pyi collections.pyi commands.pyi compileall.pyi ConfigParser.pyi Cookie.pyi cookielib.pyi copy_reg.pyi cPickle.pyi cStringIO.pyi dircache.pyi archive_util.pyi bcppcompiler.pyi ccompiler.pyi cmd.pyi bdist.pyi bdist_dumb.pyi bdist_msi.pyi bdist_packager.pyi bdist_rpm.pyi bdist_wininst.pyi build.pyi build_clib.pyi build_ext.pyi build_py.pyi build_scripts.pyi check.pyi clean.pyi config.pyi install.pyi install_data.pyi install_egg_info.pyi install_headers.pyi install_lib.pyi install_scripts.pyi register.pyi sdist.pyi upload.pyi __init__.pyi config.pyi core.pyi cygwinccompiler.pyi debug.pyi dep_util.pyi dir_util.pyi dist.pyi emxccompiler.pyi errors.pyi extension.pyi fancy_getopt.pyi filelist.pyi file_util.pyi log.pyi msvccompiler.pyi spawn.pyi sysconfig.pyi text_file.pyi unixccompiler.pyi util.pyi version.pyi __init__.pyi dummy_thread.pyi base64mime.pyi charset.pyi encoders.pyi feedparser.pyi generator.pyi header.pyi iterators.pyi message.pyi application.pyi audio.pyi base.pyi image.pyi message.pyi multipart.pyi nonmultipart.pyi text.pyi __init__.pyi MIMEText.pyi parser.pyi quoprimime.pyi utils.pyi _parseaddr.pyi __init__.pyi utf_8.pyi __init__.pyi exceptions.pyi fcntl.pyi fnmatch.pyi functools.pyi future_builtins.pyi gc.pyi getopt.pyi getpass.pyi gettext.pyi glob.pyi gzip.pyi hashlib.pyi heapq.pyi htmlentitydefs.pyi HTMLParser.pyi httplib.pyi imp.pyi importlib.pyi inspect.pyi io.pyi itertools.pyi json.pyi markupbase.pyi md5.pyi mimetools.pyi connection.pyi __init__.pyi pool.pyi process.pyi util.pyi __init__.pyi mutex.pyi ntpath.pyi nturl2path.pyi path.pyi __init__.pyi os2emxpath.pyi pipes.pyi platform.pyi popen2.pyi posix.pyi posixpath.pyi Queue.pyi random.pyi re.pyi repr.pyi resource.pyi rfc822.pyi robotparser.pyi runpy.pyi sets.pyi sha.pyi shelve.pyi shlex.pyi signal.pyi SimpleHTTPServer.pyi smtplib.pyi SocketServer.pyi spwd.pyi sre_constants.pyi sre_parse.pyi stat.pyi string.pyi StringIO.pyi stringold.pyi strop.pyi subprocess.pyi symbol.pyi sys.pyi tempfile.pyi textwrap.pyi thread.pyi toaiff.pyi tokenize.pyi types.pyi typing.pyi unittest.pyi urllib.pyi urllib2.pyi urlparse.pyi user.pyi UserDict.pyi UserList.pyi UserString.pyi whichdb.pyi xmlrpclib.pyi _ast.pyi _collections.pyi _functools.pyi _hotshot.pyi _io.pyi _json.pyi _md5.pyi _sha.pyi _sha256.pyi _sha512.pyi _socket.pyi _sre.pyi _struct.pyi _symtable.pyi _threading_local.pyi _winreg.pyi __builtin__.pyi aifc.pyi antigravity.pyi argparse.pyi array.pyi asynchat.pyi asyncore.pyi audioop.pyi base64.pyi bdb.pyi binascii.pyi binhex.pyi bisect.pyi bz2.pyi calendar.pyi cgi.pyi cgitb.pyi chunk.pyi cmath.pyi cmd.pyi code.pyi codecs.pyi codeop.pyi colorsys.pyi contextlib.pyi copy.pyi cProfile.pyi crypt.pyi csv.pyi util.pyi wintypes.pyi __init__.pyi ascii.pyi panel.pyi textpad.pyi __init__.pyi datetime.pyi decimal.pyi difflib.pyi dis.pyi doctest.pyi dummy_threading.pyi __init__.pyi errno.pyi filecmp.pyi fileinput.pyi formatter.pyi fractions.pyi ftplib.pyi genericpath.pyi grp.pyi hmac.pyi imaplib.pyi imghdr.pyi keyword.pyi driver.pyi grammar.pyi literals.pyi parse.pyi pgen.pyi token.pyi tokenize.pyi __init__.pyi pygram.pyi pytree.pyi __init__.pyi linecache.pyi locale.pyi config.pyi handlers.pyi __init__.pyi macpath.pyi mailbox.pyi mailcap.pyi marshal.pyi math.pyi mimetypes.pyi mmap.pyi modulefinder.pyi schema.pyi sequence.pyi text.pyi __init__.pyi msvcrt.pyi netrc.pyi nis.pyi numbers.pyi opcode.pyi operator.pyi optparse.pyi parser.pyi pdb.pyi pickle.pyi pickletools.pyi pkgutil.pyi plistlib.pyi poplib.pyi pprint.pyi profile.pyi pstats.pyi pty.pyi pwd.pyi pyclbr.pyi pydoc.pyi topics.pyi __init__.pyi errors.pyi model.pyi __init__.pyi py_compile.pyi quopri.pyi readline.pyi rlcompleter.pyi sched.pyi select.pyi shutil.pyi site.pyi smtpd.pyi sndhdr.pyi socket.pyi dbapi2.pyi __init__.pyi sre_compile.pyi ssl.pyi stringprep.pyi struct.pyi sunau.pyi symtable.pyi sysconfig.pyi syslog.pyi tabnanny.pyi tarfile.pyi telnetlib.pyi termios.pyi this.pyi threading.pyi time.pyi timeit.pyi token.pyi trace.pyi traceback.pyi tty.pyi turtle.pyi unicodedata.pyi uu.pyi uuid.pyi warnings.pyi wave.pyi weakref.pyi webbrowser.pyi winsound.pyi handlers.pyi headers.pyi simple_server.pyi types.pyi util.pyi validate.pyi __init__.pyi xdrlib.pyi domreg.pyi expatbuilder.pyi minicompat.pyi minidom.pyi NodeFilter.pyi pulldom.pyi xmlbuilder.pyi __init__.pyi cElementTree.pyi ElementInclude.pyi ElementPath.pyi ElementTree.pyi __init__.pyi errors.pyi model.pyi __init__.pyi __init__.pyi handler.pyi saxutils.pyi xmlreader.pyi __init__.pyi __init__.pyi zipfile.pyi zipimport.pyi zlib.pyi _bisect.pyi _codecs.pyi _csv.pyi _curses.pyi _dummy_threading.pyi _heapq.pyi _msi.pyi _random.pyi wsgi.pyi xml.pyi __init__.pyi _warnings.pyi _weakref.pyi _weakrefset.pyi __future__.pyi abc.pyi ast.pyi base_events.pyi base_futures.pyi base_subprocess.pyi base_tasks.pyi compat.pyi constants.pyi coroutines.pyi events.pyi exceptions.pyi format_helpers.pyi futures.pyi locks.pyi log.pyi proactor_events.pyi protocols.pyi queues.pyi runners.pyi selector_events.pyi sslproto.pyi staggered.pyi streams.pyi subprocess.pyi tasks.pyi threads.pyi transports.pyi trsock.pyi unix_events.pyi windows_events.pyi windows_utils.pyi __init__.pyi atexit.pyi builtins.pyi abc.pyi __init__.pyi compileall.pyi process.pyi thread.pyi _base.pyi __init__.pyi __init__.pyi configparser.pyi copyreg.pyi dumb.pyi gnu.pyi ndbm.pyi __init__.pyi archive_util.pyi bcppcompiler.pyi ccompiler.pyi cmd.pyi bdist.pyi bdist_dumb.pyi bdist_msi.pyi bdist_packager.pyi bdist_rpm.pyi bdist_wininst.pyi build.pyi build_clib.pyi build_ext.pyi build_py.pyi build_scripts.pyi check.pyi clean.pyi config.pyi install.pyi install_data.pyi install_egg_info.pyi install_headers.pyi install_lib.pyi install_scripts.pyi register.pyi sdist.pyi upload.pyi __init__.pyi config.pyi core.pyi cygwinccompiler.pyi debug.pyi dep_util.pyi dir_util.pyi dist.pyi errors.pyi extension.pyi fancy_getopt.pyi filelist.pyi file_util.pyi log.pyi msvccompiler.pyi spawn.pyi sysconfig.pyi text_file.pyi unixccompiler.pyi util.pyi version.pyi __init__.pyi charset.pyi contentmanager.pyi encoders.pyi errors.pyi feedparser.pyi generator.pyi header.pyi headerregistry.pyi iterators.pyi message.pyi application.pyi audio.pyi base.pyi image.pyi message.pyi multipart.pyi nonmultipart.pyi text.pyi __init__.pyi parser.pyi policy.pyi utils.pyi __init__.pyi utf_8.pyi __init__.pyi enum.pyi faulthandler.pyi fcntl.pyi fnmatch.pyi functools.pyi gc.pyi getopt.pyi getpass.pyi gettext.pyi glob.pyi gzip.pyi hashlib.pyi heapq.pyi entities.pyi parser.pyi __init__.pyi client.pyi cookiejar.pyi cookies.pyi server.pyi __init__.pyi imp.pyi abc.pyi machinery.pyi metadata.pyi resources.pyi util.pyi __init__.pyi inspect.pyi io.pyi ipaddress.pyi itertools.pyi decoder.pyi encoder.pyi tool.pyi __init__.pyi lzma.pyi macurl2path.pyi connection.pyi context.pyi connection.pyi __init__.pyi managers.pyi pool.pyi process.pyi queues.pyi sharedctypes.pyi shared_memory.pyi spawn.pyi synchronize.pyi __init__.pyi nntplib.pyi ntpath.pyi nturl2path.pyi path.pyi __init__.pyi pathlib.pyi pipes.pyi platform.pyi posix.pyi posixpath.pyi queue.pyi random.pyi re.pyi reprlib.pyi resource.pyi runpy.pyi secrets.pyi selectors.pyi shelve.pyi shlex.pyi signal.pyi smtplib.pyi socketserver.pyi spwd.pyi sre_constants.pyi sre_parse.pyi stat.pyi statistics.pyi string.pyi subprocess.pyi symbol.pyi sys.pyi tempfile.pyi textwrap.pyi commondialog.pyi constants.pyi dialog.pyi filedialog.pyi font.pyi messagebox.pyi ttk.pyi __init__.pyi tokenize.pyi tracemalloc.pyi types.pyi typing.pyi async_case.pyi case.pyi loader.pyi main.pyi mock.pyi result.pyi runner.pyi signals.pyi suite.pyi util.pyi __init__.pyi error.pyi parse.pyi request.pyi response.pyi robotparser.pyi __init__.pyi __init__.pyi winreg.pyi client.pyi server.pyi __init__.pyi xxlimited.pyi zipapp.pyi _ast.pyi _bootlocale.pyi _compat_pickle.pyi _compression.pyi _decimal.pyi _dummy_thread.pyi _imp.pyi _importlib_modulespec.pyi _json.pyi _markupbase.pyi _operator.pyi _osx_support.pyi _posixsubprocess.pyi _pydecimal.pyi _sitebuiltins.pyi _stat.pyi _thread.pyi _threading_local.pyi _tkinter.pyi _tracemalloc.pyi _winapi.pyi contextvars.pyi dataclasses.pyi _py_abc.pyi graphlib.pyi __init__.pyi process.pyi thread.pyi _base.pyi __init__.pyi __init__.pyi enum.pyi FacebookService.pyi __init__.pyi ipaddress.pyi client.pyi exceptions.pyi watchers.pyi __init__.pyi __init__.pyi crypto.pyi __init__.pyi pathlib2.pyi pymssql.pyi mapper.pyi util.pyi __init__.pyi scribe.pyi ttypes.pyi __init__.pyi BaseHTTPServer.pyi CGIHTTPServer.pyi collections_abc.pyi configparser.pyi cPickle.pyi email_mime_base.pyi email_mime_multipart.pyi email_mime_nonmultipart.pyi email_mime_text.pyi html_entities.pyi html_parser.pyi http_client.pyi http_cookiejar.pyi http_cookies.pyi queue.pyi reprlib.pyi SimpleHTTPServer.pyi socketserver.pyi error.pyi parse.pyi request.pyi response.pyi robotparser.pyi __init__.pyi urllib_error.pyi urllib_parse.pyi urllib_request.pyi urllib_response.pyi urllib_robotparser.pyi xmlrpc_client.pyi _dummy_thread.pyi _thread.pyi __init__.pyi __init__.pyi concurrent.pyi gen.pyi httpclient.pyi httpserver.pyi httputil.pyi ioloop.pyi locks.pyi netutil.pyi process.pyi tcpserver.pyi testing.pyi util.pyi web.pyi __init__.pyi __init__.pyi converters.pyi exceptions.pyi filters.pyi validators.pyi _version_info.pyi __init__.pyi ssl_match_hostname.pyi __init__.pyi backports_abc.pyi callbacks.pyi linkifier.pyi sanitizer.pyi utils.pyi __init__.pyi auth.pyi auth_handler.pyi compat.pyi connection.pyi __init__.pyi __init__.pyi exception.pyi exceptions.pyi layer1.pyi __init__.pyi plugin.pyi regioninfo.pyi acl.pyi bucket.pyi bucketlistresultset.pyi bucketlogging.pyi connection.pyi cors.pyi deletemarker.pyi key.pyi keyfile.pyi lifecycle.pyi multidelete.pyi multipart.pyi prefix.pyi tagging.pyi user.pyi website.pyi __init__.pyi utils.pyi __init__.pyi abc.pyi cache.pyi decorators.pyi func.pyi lfu.pyi lru.pyi rr.pyi ttl.pyi __init__.pyi certifi.pyi __init__.pyi enums.pyi langbulgarianmodel.pyi langcyrillicmodel.pyi langgreekmodel.pyi langhebrewmodel.pyi langhungarianmodel.pyi langthaimodel.pyi langturkishmodel.pyi universaldetector.pyi version.pyi __init__.pyi core.pyi decorators.pyi exceptions.pyi formatting.pyi globals.pyi parser.pyi termui.pyi testing.pyi types.pyi utils.pyi _termui_impl.pyi __init__.pyi croniter.pyi exceptions.pyi fernet.pyi interfaces.pyi __init__.pyi binding __init_ __init__.pyi dh ds ec ed pa rs ut x2 x4 __ aead. algor modes __ini cmac.pyi constant_time hashes.pyi hmac.pyi concatkdf hkdf.pyi kbkdf.pyi pbkdf2.py scrypt.py x963kdf.p __init__. keywrap.pyi padding.pyi poly1305.pyi hot tot __i __init__.pyi __init__.pyi extensions.pyi oid.pyi __init__.pyi __init__.pyi dateparser.pyi __init__.pyi easter.pyi parser.pyi relativedelta.pyi rrule.pyi tz.pyi _common.pyi __init__.pyi utils.pyi _common.pyi __init__.pyi decorator.pyi classic.pyi sphinx.pyi __init__.pyi core.pyi unicode_codes.pyi __init__.pyi first.pyi app.pyi blueprints.pyi cli.pyi config.pyi ctx.pyi debughelpers.pyi globals.pyi helpers.pyi tag.pyi __init__.pyi logging.pyi sessions.pyi signals.pyi templating.pyi testing.pyi views.pyi wrappers.pyi __init__.pyi database.pyi errors.pyi mixins.pyi models.pyi records.pyi __init__.pyi gflags.pyi any_pb2.pyi api_pb2.pyi plugin_pb2.pyi __init__.pyi descriptor.pyi descriptor_pb2.pyi descriptor_pool.pyi duration_pb2.pyi empty_pb2.pyi field_mask_pb2.pyi containers.pyi decoder.pyi encoder.pyi enum_type_wrapper.p extension_dict.pyi message_listener.py python_message.pyi well_known_types.py wire_format.pyi __init__.pyi json_format.pyi message.pyi message_factory.pyi reflection.pyi service.pyi source_context_pb2.pyi struct_pb2.pyi symbol_database.pyi timestamp_pb2.pyi type_pb2.pyi __init__.pyi wrappers_pb2.pyi __init__.pyi __init__.pyi itsdangerous.pyi bccache.pyi compiler.pyi constants.pyi debug.pyi defaults.pyi environment.pyi exceptions.pyi ext.pyi filters.pyi lexer.pyi loaders.pyi meta.pyi nodes.pyi optimizer.pyi parser.pyi runtime.pyi sandbox.pyi tests.pyi utils.pyi visitor.pyi _compat.pyi _stringdefs.pyi __init__.pyi blockparser.pyi blockprocessors.pyi core.pyi abbr.pyi admonition.pyi attr_list.pyi codehilite.pyi def_list.pyi extra.pyi fenced_code.pyi footnotes.pyi legacy_attrs.pyi legacy_em.pyi md_in_html.pyi meta.pyi nl2br.pyi sane_lists.pyi smarty.pyi tables.pyi toc.pyi wikilinks.pyi __init__.pyi inlinepatterns.pyi pep562.pyi postprocessors.pyi preprocessors.pyi serializers.pyi treeprocessors.pyi util.pyi __init__.pyi __meta__.pyi _compat.pyi _constants.pyi _native.pyi _speedups.pyi __init__.pyi compat.pyi const.pyi decoder.pyi errors.pyi extension.pyi reader.pyi __init__.pyi mock.pyi mypy_extensions.pyi nmap.pyi __init__.pyi agent.pyi auth_handler.pyi ber.pyi buffered_pipe.pyi channel.pyi client.pyi common.pyi compress.pyi config.pyi dsskey.pyi ecdsakey.pyi ed25519key.pyi file.pyi hostkeys.pyi kex_curve25519.pyi kex_ecdh_nist.pyi kex_gex.pyi kex_group1.pyi kex_group14.pyi kex_group16.pyi kex_gss.pyi message.pyi packet.pyi pipe.pyi pkey.pyi primes.pyi proxy.pyi py3compat.pyi rsakey.pyi server.pyi sftp.pyi sftp_attr.pyi sftp_client.pyi sftp_file.pyi sftp_handle.pyi sftp_server.pyi sftp_si.pyi ssh_exception.pyi ssh_gss.pyi transport.pyi util.pyi win_pageant.pyi _version.pyi _winapi.pyi __init__.pyi polib.pyi pycurl.pyi charset.pyi connections.pyi CLIENT.pyi COMMAND.pyi ER.pyi FIELD_TYPE.pyi FLAG.pyi SERVER_STATUS.pyi __init__.pyi converters.pyi cursors.pyi err.pyi times.pyi util.pyi __init__.pyi attributes.pyi base.pyi table.pyi util.pyi __init__.pyi constants.pyi exceptions.pyi indexes.pyi models.pyi settings.pyi throttle.pyi types.pyi __init__.pyi pyre_extensions.pyi __init__.pyi event.pyi fault.pyi option.pyi view.pyi __init__.pyi fault.pyi query.pyi __init__.pyi __init__.pyi client.pyi connection.pyi exceptions.pyi utils.pyi __init__.pyi adapters.pyi api.pyi auth.pyi compat.pyi cookies.pyi exceptions.pyi hooks.pyi models.pyi connection.pyi connectionpool.pyi __init__.p exceptions.pyi fields.pyi filepost.pyi __init__. poolmanager.pyi request.pyi response.pyi connection.py request.pyi response.pyi retry.pyi ssl_.pyi timeout.pyi url.pyi __init__.pyi _collections.pyi __init__.pyi __init__.pyi sessions.pyi status_codes.pyi structures.pyi utils.pyi __init__.pyi api.pyi __init__.pyi decoder.pyi encoder.pyi scanner.pyi __init__.pyi singledispatch.pyi slugify.pyi special.pyi __init__.pyi tabulate.pyi termcolor.pyi toml.pyi typing_extensions.pyi __init__.pyi ujson.pyi atom.pyi cache.pyi fixers.pyi iterio.pyi jsrouting.pyi limiter.pyi lint.pyi profiler.pyi securecookie.pyi sessions.pyi testtools.pyi wrappers.pyi __init__.pyi datastructures.pyi console.pyi repr.pyi tbtools.pyi __init__.pyi exceptions.pyi filesystem.pyi formparser.pyi http.pyi local.pyi dispatcher.pyi http_proxy.pyi lint.pyi profiler.pyi proxy_fix.pyi shared_data.pyi __init__.pyi posixemulation.pyi routing.pyi script.pyi security.pyi serving.pyi test.pyi testapp.pyi urls.pyi useragents.pyi utils.pyi wrappers.pyi wsgi.pyi _compat.pyi _internal.pyi _reloader.pyi __init__.pyi composer.pyi constructor.pyi cyaml.pyi dumper.pyi emitter.pyi error.pyi events.pyi loader.pyi nodes.pyi parser.pyi reader.pyi representer.pyi resolver.pyi scanner.pyi serializer.pyi tokens.pyi __init__.pyi base.pyi os.pyi binary.pyi text.pyi __init__.pyi __init__.pyi contextvars.pyi dataclasses.pyi examples.pyi nodes.pyi nodes.pyi roles.pyi states.pyi __init__.pyi __init__.pyi __init__.pyi __init__.pyi api.pyi __init__.pyi frozendict.pyi algorithms.pyi pycrypto.pyi py_ecdsa.pyi __init__.pyi __init__.pyi __init__.pyi orjson.pyi py31compat.pyi __init__.pyi generator.pyi parser.pyi utils.pyi __init__.pyi BaseHTTPServer.pyi builtins.pyi CGIHTTPServer.pyi collections_abc.pyi configparser.pyi cPickle.pyi email_mime_base.pyi email_mime_multipart.pyi email_mime_nonmultipart.pyi email_mime_text.pyi html_entities.pyi html_parser.pyi http_client.pyi http_cookiejar.pyi http_cookies.pyi queue.pyi reprlib.pyi SimpleHTTPServer.pyi socketserver.pyi tkinter.pyi tkinter_commondialog.pyi tkinter_constants.pyi tkinter_dialog.pyi tkinter_filedialog.pyi tkinter_tkfiledialog.pyi tkinter_ttk.pyi error.pyi parse.pyi request.pyi response.pyi robotparser.pyi __init__.pyi urllib_error.pyi urllib_parse.pyi urllib_request.pyi urllib_response.pyi urllib_robotparser.pyi _dummy_thread.pyi _thread.pyi __init__.pyi __init__.pyi ast27.pyi ast3.pyi conversions.pyi __init__.pyi adjustments.pyi buffers.pyi channel.pyi compat.pyi parser.pyi proxy_headers.pyi receiver.pyi rfc7230.pyi runner.pyi server.pyi task.pyi trigger.pyi utilities.pyi wasyncore.pyi __init__.pyi utils.py _compatibility.py __init__.py __main__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO pytest.ini README.rst setup.cfg setup.py sith.py arrays.py async_.py basic.py classes.py completion.py complex.py comprehensions.py conftest.py context.py decorators.py descriptors.py django.py docstring.py dynamic_arrays.py dynamic_params.py flow_analysis.py fstring.py functions.py generators.py goto.py imports.py classes.py flow_import.py globals.py invisible_pkg.py mod1.py mod2.py base.py mod1.py __init__.py random.py recurse_class1.py recurse_class2.py references.py rename1.py rename2.py __init__.py inheritance.py invalid.py isinstance.py keywords.py lambdas.py named_expression.py named_param.py mod1.py mod2.py ns_path.py on_import.py ordering.py parser.py pep0484_basic.py pep0484_comments.py pep0484_generic_mismatches.py pep0484_generic_parameters.py pep0484_generic_passthroughs.py pep0484_overload.py pep0484_typing.py pep0526_variables.py positional_only_params.py precedence.py pytest.py recursion.py stdlib.py stubs.py stub_only.pyi nested_stub_only.pyi nested_with_stub.py nested_with_stub.pyi python_only.py __init__.pyi with_stub.py with_stub.pyi nested_stub_only.pyi nested_with_stub.py nested_with_stub.pyi python_only.py __init__.py __init__.pyi sys_path.py jedi_.py psycopg2_.py pylab_.py PyQt4_.py types.py usages.py __init__.py conftest.py app binary_file empty_file buildout.cfg module_name.py models.py __init__.py manage.py __init__.py __init__.py bar.py __init__.py __init__.py __init__.py flask_foo.py ns1_file.py ns2_file.py module.py cq.py __init__.py cq_example.py module.py __init__.py module.c setup.py __init__.cpython-38-x86_64-linux-gnu.so api_test1.py __init__.py __init__.py test.py __init__.py __init__.py ns1_file.py __init__.py __init__.py ns2_file.py __init__.py __init__.py rel1.py rel2.py __init__.py __init__.py __init__.py not_in_sys_path.py module.py __init__.py module.py __init__.py __init__.py README.rst __init__.py egg_link.egg-link foo.pth import_smth.pth relative.egg-link smth.py module.py module2.py __init__.py precedence.py __init__.pyi module.py __init__.py module.pyi __init__.pyi file.py file.pyi not_pkg.zip pkg.zip helpers.py extract_function.py extract_variable.py inline_mod.py mod.pyi mod2.py __init__.py __init__.pyi some_mod.py inline.py rename.py refactor.py run.py attribute_error.py attribute_warnings.py branches.py builtins.py class_simple.py comprehensions.py descriptors.py generators.py imports.py a.py b.py __init__.py iterable.py keywords.py normal_arguments.py operations.py star_arguments.py try_except.py test_analysis.py test_api.py test_api_classes_follow_definition.py test_call_signatures.py test_classes.py test_completion.py test_context.py test_documentation.py test_environment.py test_full_name.py test_interpreter.py test_keyword.py test_names.py test_project.py test_refactoring.py test_search.py test_settings.py test_signatures.py test_syntax_errors.py test_unicode.py test_usages.py __init__.py test_cache.py test_debug.py test_file_io.py test_annotations.py test_buildout_detection.py test_compiled.py test_context.py test_docstring.py test_extension.py test_fstring.py test_conversion.py test_stubs.py test_stub_loading.py test_typeshed.py __init__.py test_implicit_namespace_package.py test_imports.py test_literals.py test_mixed.py test_namespace_package.py test_precedence.py test_pyc.py test_representation.py test_signature.py test_stdlib.py test_sys_path.py __init__.py test_integration.py test_basic.py test_error_correction.py test_parser_utils.py __init__.py test_settings.py test_utils.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom setuptools import setup, find_packages\nfrom setuptools.depends import get_module_constant\n\nimport os\n\n__AUTHOR__ = 'David Halter'\n__AUTHOR_EMAIL__ = 'davidhalter88@gmail.com'\n\n# Get the version from within jedi. It's defined in exactly one place now.\nversion = get_module_constant(\"jedi\", \"__version__\")\n\nreadme = open('README.rst').read() + '\\n\\n' + open('CHANGELOG.rst').read()\n\nassert os.path.isfile(\"jedi\/third_party\/typeshed\/LICENSE\"), \\\n\"Please download the typeshed submodule first (Hint: git submodule update --init)\"\nassert os.path.isfile(\"jedi\/third_party\/django-stubs\/LICENSE.txt\"), \\\n\"Please download the django-stubs submodule first (Hint: git submodule update --init)\"\n\nsetup(name='jedi',\nversion=version,\ndescription='An autocompletion tool for Python that can be used for text editors.',\nauthor=__AUTHOR__,\nauthor_email=__AUTHOR_EMAIL__,\ninclude_package_data=True,\nmaintainer=__AUTHOR__,\nmaintainer_email=__AUTHOR_EMAIL__,\nurl='https:\/\/github.com\/davidhalter\/jedi',\nlicense='MIT',\nkeywords='python completion refactoring vim',\nlong_description=readme,\npackages=find_packages(exclude=['test', 'test.*']),\npython_requires='>=3.6',\ninstall_requires=['parso>=0.8.0,<0.9.0'],\nextras_require={\n'testing': [\n'pytest<7.0.0',\n# docopt for sith doctests\n'docopt',\n# coloroma for colored debug output\n'colorama',\n'Django<3.1', # For now pin this.\n],\n'qa': [\n'flake8==3.8.3',\n'mypy==0.782',\n],\n},\npackage_data={'jedi': ['*.pyi', 'third_party\/typeshed\/LICENSE',\n'third_party\/typeshed\/README']},\nplatforms=['any'],\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Environment :: Plugins',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Text Editors :: Integrated Development Environments (IDE)',\n'Topic :: Utilities',\n],\n)\n"
    },
    {
        "package_name": "jellyfish-0.9.0",
        "file_list": "damerau_levenshtein.c hamming.c jaro.c jellyfish.h jellyfishmodule.c levenshtein.c metaphone.c mra.c nysiis.c porter.c soundex.c changelog.md functions.md index.md porter.py py.typed test.py _jellyfish.py __init__.py __init__.pyi dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py damerau_levenshtein.csv hamming.csv jaro_distance.csv jaro_winkler.csv jaro_winkler_longtol.csv levenshtein.csv match_rating_codex.csv match_rating_comparison.csv metaphone.csv nysiis.csv porter.csv README.md soundex.csv wagner_fischer.csv",
        "setup.py": "#!\/usr\/bin\/env python\nimport os\nimport sys\nfrom setuptools import setup, Extension, Command\nfrom distutils.command.build_ext import build_ext\nfrom distutils.errors import CCompilerError, DistutilsExecError, DistutilsPlatformError\n\n# large portions ripped off from simplejson's setup.py\n\nif sys.platform == \"win32\" and sys.version_info > (2, 6):\n# 2.6's distutils.msvc9compiler can raise an IOError when failing to find the compiler\n# It can also raise ValueError http:\/\/bugs.python.org\/issue7511\next_errors = (\nCCompilerError,\nDistutilsExecError,\nDistutilsPlatformError,\nIOError,\nValueError,\n)\nelse:\next_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError)\n\nIS_PYPY = hasattr(sys, \"pypy_translation_info\")\n\n\nclass BuildFailed(Exception):\npass\n\n\nclass ve_build_ext(build_ext):\ndef run(self):\ntry:\nbuild_ext.run(self)\nexcept DistutilsPlatformError:\nraise BuildFailed()\n\ndef build_extension(self, ext):\ntry:\nbuild_ext.build_extension(self, ext)\nexcept ext_errors:\nraise BuildFailed()\n\n\nclass TestCommand(Command):\n\"\"\"Command for running unittests without install.\"\"\"\n\nuser_options = [\n(\n\"args=\",\nNone,\n'''The command args string passed to\nunittest framework, such as --args=\"-v -f\"''',\n)\n]\n\ndef initialize_options(self):\nself.args = \"\"\n\ndef finalize_options(self):\npass\n\ndef run(self):\nself.run_command(\"build\")\nbld = self.distribution.get_command_obj(\"build\")\n# Add build_lib in to sys.path so that unittest can found DLLs and libs\nsys.path = [os.path.abspath(bld.build_lib)] + sys.path\n\nimport shlex\nimport unittest\n\ntest_argv0 = [sys.argv[0] + \" test --args=\"]\n# For transferring args to unittest, we have to split args\n# by ourself, so that command like:\n# python setup.py test --args=\"-v -f\"\n# can be executed, and the parameter '-v -f' can be\n# transferring to unittest properly.\ntest_argv = test_argv0 + shlex.split(self.args)\nunittest.main(module=\"jellyfish.test\", argv=test_argv)\n\n\ndef run_setup(build_c):\nif build_c:\nkw = dict(\next_modules=[\nExtension(\n\"jellyfish.cjellyfish\",\n[\n\"cjellyfish\/jellyfishmodule.c\",\n\"cjellyfish\/jaro.c\",\n\"cjellyfish\/hamming.c\",\n\"cjellyfish\/levenshtein.c\",\n\"cjellyfish\/damerau_levenshtein.c\",\n\"cjellyfish\/mra.c\",\n\"cjellyfish\/soundex.c\",\n\"cjellyfish\/metaphone.c\",\n\"cjellyfish\/nysiis.c\",\n\"cjellyfish\/porter.c\",\n],\ndefine_macros=[(\"CJELLYFISH_PYTHON\", \"1\")],\n)\n],\ncmdclass=dict(build_ext=ve_build_ext, test=TestCommand),\n)\nelse:\nkw = dict(cmdclass=dict(test=TestCommand))\n\nwith open(\"README.md\") as readme:\nlong_description = readme.read()\n\nsetup(\nname=\"jellyfish\",\nversion=\"0.9.0\",\npython_requires=\">3.6\",\nplatforms=[\"any\"],\ndescription=(\n\"a library for doing approximate and \" \"phonetic matching of strings.\"\n),\nurl=\"http:\/\/github.com\/jamesturk\/jellyfish\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: BSD License\",\n\"Natural Language :: English\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Text Processing :: Linguistic\",\n],\npackages=[\"jellyfish\"],\npackage_data={\"jellyfish\": [\"*.pyi\", \"py.typed\"]},\n**kw\n)\n\n\ntry:\nrun_setup(not IS_PYPY)\nexcept BuildFailed:\nprint(\"*\" * 75)\nprint(\"WARNING: C extension could not be compiled, falling back to pure Python.\")\nprint(\"*\" * 75)\nrun_setup(False)\nprint(\"*\" * 75)\nprint(\"WARNING: C extension could not be compiled, falling back to pure Python.\")\nprint(\"*\" * 75)\n"
    },
    {
        "package_name": "jinja2_pluralize-0.3.0",
        "file_list": "AUTHORS.rst CONTRIBUTING.rst authors.rst conf.py contributing.rst history.rst index.rst installation.rst jinja2_pluralize.rst make.bat Makefile modules.rst readme.rst usage.rst HISTORY.rst __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_jinja2_pluralize.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\n\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\n\nreadme = open('README.rst').read()\nhistory = open('HISTORY.rst').read().replace('.. :changelog:', '')\n\nrequirements = [\n'jinja2>=2.4',\n'inflect>=0.2.4',\n]\n\nsetup(\nname='jinja2_pluralize',\nversion='0.3.0',\ndescription=\"Jinja2 pluralize filters.\",\nlong_description=readme + '\\n\\n' + history,\nauthor='Audrey Roy Greenfeld',\nauthor_email='aroy@alum.mit.edu',\nurl='https:\/\/github.com\/audreyr\/jinja2_pluralize',\npackages=[\n'jinja2_pluralize',\n],\npackage_dir={'jinja2_pluralize': 'jinja2_pluralize'},\ninclude_package_data=True,\ninstall_requires=requirements,\nlicense=\"BSD\",\nzip_safe=False,\nkeywords='Jinja2, filter, pluralize, Django, inflect',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Natural Language :: English',\n\"Programming Language :: Python :: 2\",\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n],\ntest_suite='tests',\n)"
    },
    {
        "package_name": "jmp-0.0.2",
        "file_list": "loss_scale.py loss_scale_test.py policy.py policy_test.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# Copyright 2020 DeepMind Technologies Limited. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Setup for pip package.\"\"\"\n\nfrom setuptools import find_namespace_packages\nfrom setuptools import setup\n\n\ndef _get_version():\nwith open('jmp\/__init__.py') as fp:\nfor line in fp:\nif line.startswith('__version__'):\ng = {}\nexec(line, g) # pylint: disable=exec-used\nreturn g['__version__']\nraise ValueError('`__version__` not defined in `jmp\/__init__.py`')\n\n\ndef _parse_requirements(requirements_txt_path):\nwith open(requirements_txt_path) as fp:\nreturn fp.read().splitlines()\n\n\n_VERSION = _get_version()\n\nEXTRA_PACKAGES = {\n'jax': ['jax>=0.1.71'],\n'jaxlib': ['jaxlib>=0.1.49'],\n}\n\nsetup(\nname='jmp',\nversion=_VERSION,\nurl='https:\/\/github.com\/deepmind\/jmp',\nlicense='Apache 2.0',\nauthor='DeepMind',\ndescription='JMP is a Mixed Precision library for JAX.',\nlong_description=open('README.md').read(),\nlong_description_content_type='text\/markdown',\nauthor_email='jmp-dev-os@google.com',\n# Contained modules and scripts.\npackages=find_namespace_packages(exclude=['*_test.py']),\ninstall_requires=_parse_requirements('requirements.txt'),\nextras_require=EXTRA_PACKAGES,\ntests_require=_parse_requirements('requirements-test.txt'),\nrequires_python='>=3.6',\ninclude_package_data=True,\nzip_safe=False,\n# PyPI package information.\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'Intended Audience :: Education',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Topic :: Scientific\/Engineering :: Mathematics',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Software Development :: Libraries',\n],\n)\n"
    },
    {
        "package_name": "jose-1.0.0",
        "file_list": "CHANGES CONTRIB dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt jose.py LICENSE MANIFEST.in PKG-INFO README requirements.txt setup.cfg setup.py",
        "setup.py": "import os\nimport sys\n\nfrom setuptools import setup\nfrom setuptools.command.bdist_rpm import bdist_rpm as _bdist_rpm\n\nhere = os.path.abspath(os.path.dirname(__file__))\nREQUIRES = filter(lambda s: len(s) > 0,\nopen(os.path.join(here, 'requirements.txt')).read().split('\\n'))\npkg_name = 'jose'\npyver = ''.join(('python', '.'.join(map(str, sys.version_info[:2]))))\n\nREADME = open(os.path.join(here, 'README')).read()\nCHANGES = open(os.path.join(here, 'CHANGES')).read()\nCONTRIB = open(os.path.join(here, 'CONTRIB')).read()\n\n\nclass bdist_rpm(_bdist_rpm):\nop_map = {\n'==': '=',\n}\n\ndef finalize_package_data(self):\nself.requires = []\nfor pkg, op, ver in map(lambda s: s.split(' '), REQUIRES):\npkg = '-'.join((pyver.replace('.', ''), pkg))\ntry:\nmop = self.op_map[op]\nexcept KeyError:\nmop = op\n\nself.requires.append(' {} '.format(mop).join((pkg, ver)))\n\nself.python = pyver\nif self.release is None:\nself.release = '.'.join((os.environ.get('JOSE_RELEASE', '1'),\n'demonware'))\n_bdist_rpm.finalize_package_data(self)\n\n\nif __name__ == '__main__':\nif sys.argv[-1] == 'bdist_rpm':\npkg_name = '-'.join((pyver.replace('.', ''), pkg_name))\n\nsetup(name=pkg_name,\nversion='1.0.0',\nauthor='Demian Brecht',\nauthor_email='dbrecht@demonware.net',\npy_modules=['jose'],\nurl='https:\/\/github.com\/Demonware\/jose',\ndescription='An implementation of the JOSE draft',\ninstall_requires=REQUIRES,\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'Intended Audience :: Information Technology',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 2 :: Only',\n'Topic :: Security',\n'Topic :: Software Development :: Libraries',],\ncmdclass={'bdist_rpm': bdist_rpm},\nentry_points = {\n'console_scripts': (\n'jose = jose:_cli',\n)\n},\nlong_description='\\n\\n'.join((README, CHANGES, CONTRIB)),\n)\n"
    },
    {
        "package_name": "jq-1.2.2",
        "file_list": "jq.c dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport os\nimport subprocess\nimport tarfile\nimport shutil\nimport sysconfig\n\nimport requests\nfrom setuptools import setup\nfrom setuptools.command.build_ext import build_ext\nfrom setuptools.extension import Extension\n\n\ndef urlretrieve(source_url, destination_path):\nresponse = requests.get(source_url, stream=True)\nif response.status_code != 200:\nraise Exception(\"status code was: {}\".format(response.status_code))\n\nwith open(destination_path, \"wb\") as fileobj:\nfor chunk in response.iter_content(chunk_size=128):\nfileobj.write(chunk)\n\ndef path_in_dir(relative_path):\nreturn os.path.abspath(os.path.join(os.path.dirname(__file__), relative_path))\n\ndef dependency_path(relative_path):\nreturn os.path.join(path_in_dir(\"_deps\"), relative_path)\n\ndef read(fname):\nreturn open(os.path.join(os.path.dirname(__file__), fname)).read()\n\n\njq_lib_tarball_path = dependency_path(\"jq-lib-1.6.tar.gz\")\njq_lib_dir = dependency_path(\"jq-1.6\")\n\noniguruma_version = \"6.9.4\"\noniguruma_lib_tarball_path = dependency_path(\"onig-{}.tar.gz\".format(oniguruma_version))\noniguruma_lib_build_dir = dependency_path(\"onig-{}\".format(oniguruma_version))\noniguruma_lib_install_dir = dependency_path(\"onig-install-{}\".format(oniguruma_version))\n\nclass jq_build_ext(build_ext):\ndef run(self):\nif not os.path.exists(dependency_path(\".\")):\nos.makedirs(dependency_path(\".\"))\nself._build_oniguruma()\nself._build_libjq()\nbuild_ext.run(self)\n\ndef _build_oniguruma(self):\nself._build_lib(\nsource_url=\"https:\/\/github.com\/kkos\/oniguruma\/releases\/download\/v{0}\/onig-{0}.tar.gz\".format(oniguruma_version),\ntarball_path=oniguruma_lib_tarball_path,\nlib_dir=oniguruma_lib_build_dir,\ncommands=[\n[\".\/configure\", \"CFLAGS=-fPIC\", \"--prefix=\" + oniguruma_lib_install_dir],\n[\"make\"],\n[\"make\", \"install\"],\n])\n\n\ndef _build_libjq(self):\nself._build_lib(\nsource_url=\"https:\/\/github.com\/stedolan\/jq\/releases\/download\/jq-1.6\/jq-1.6.tar.gz\",\ntarball_path=jq_lib_tarball_path,\nlib_dir=jq_lib_dir,\ncommands=[\n[\".\/configure\", \"CFLAGS=-fPIC -pthread\", \"--disable-maintainer-mode\", \"--with-oniguruma=\" + oniguruma_lib_install_dir],\n[\"make\"],\n])\n\ndef _build_lib(self, source_url, tarball_path, lib_dir, commands):\nself._download_tarball(\nsource_url=source_url,\ntarball_path=tarball_path,\nlib_dir=lib_dir,\n)\n\nmacosx_deployment_target = sysconfig.get_config_var(\"MACOSX_DEPLOYMENT_TARGET\")\nif macosx_deployment_target:\nos.environ['MACOSX_DEPLOYMENT_TARGET'] = str(macosx_deployment_target)\n\ndef run_command(args):\nprint(\"Executing: %s\" % ' '.join(args))\nsubprocess.check_call(args, cwd=lib_dir)\n\nfor command in commands:\nrun_command(command)\n\ndef _download_tarball(self, source_url, tarball_path, lib_dir):\nif os.path.exists(tarball_path):\nos.unlink(tarball_path)\nprint(\"Downloading {}\".format(source_url))\nurlretrieve(source_url, tarball_path)\nprint(\"Downloaded {}\".format(source_url))\n\nif os.path.exists(lib_dir):\nshutil.rmtree(lib_dir)\ntarfile.open(tarball_path, \"r:gz\").extractall(dependency_path(\".\"))\n\n\njq_extension = Extension(\n\"jq\",\nsources=[\"jq.c\"],\ninclude_dirs=[os.path.join(jq_lib_dir, \"src\")],\nextra_link_args=[\"-lm\"],\nextra_objects=[\nos.path.join(jq_lib_dir, \".libs\/libjq.a\"),\nos.path.join(oniguruma_lib_install_dir, \"lib\/libonig.a\"),\n],\n)\n\nsetup(\nname='jq',\nversion='1.2.2',\ndescription='jq is a lightweight and flexible JSON processor.',\nlong_description=read(\"README.rst\"),\nauthor='Michael Williamson',\nurl='http:\/\/github.com\/mwilliamson\/jq.py',\npython_requires='>=3.5',\nlicense='BSD 2-Clause',\next_modules = [jq_extension],\ncmdclass={\"build_ext\": jq_build_ext},\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n],\n)\n\n"
    },
    {
        "package_name": "jsonfield-3.1.0",
        "file_list": "CHANGES.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py encoder.py fields.py forms.py json.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt 0001_initial.py __init__.py models.py settings.py test_fields.py test_forms.py test_jsonfield.py __init__.py tox.ini",
        "setup.py": "from setuptools import find_packages, setup\n\n\nsetup(\nname='jsonfield',\nversion='3.1.0',\nlicense='MIT',\ninclude_package_data=True,\nauthor='Brad Jasper',\nauthor_email='contact@bradjasper.com',\nmaintainer='Ryan P Kilby',\nmaintainer_email='kilbyr@gmail.com',\nurl='https:\/\/github.com\/rpkilby\/jsonfield\/',\ndescription='A reusable Django field that allows you to store validated JSON in your model.',\nlong_description=open(\"README.rst\").read(),\npackages=find_packages('src'),\npackage_dir={'': 'src'},\ninstall_requires=['Django >= 2.2'],\npython_requires='>=3.6',\nclassifiers=[\n'Environment :: Web Environment',\n'Framework :: Django',\n'Framework :: Django :: 2.2',\n'Framework :: Django :: 3.0',\n'Intended Audience :: Developers',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n],\n)\n"
    },
    {
        "package_name": "jsonformatter-0.3.1",
        "file_list": "jsonformatter.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py test.py test_windows.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nFile: setup.py\nAuthor: Me\nEmail: yourname@email.com\nGithub: https:\/\/github.com\/yourname\nDescription: setup.py\n\"\"\"\nimport sys\nfrom setuptools import setup\n\nlong_description = ''\n\ntry:\nif 'win' in sys.platform and sys.version_info >= (3, 0):\nwith open('README.md', encoding='utf-8') as r:\nlong_description = r.read()\nelse:\nwith open('README.md') as r:\nlong_description = r.read()\nexcept Exception as e:\npass\n\nsetup(\nname='jsonformatter',\nversion='0.3.1',\ndescription=(\n'Python log in json format.'\n),\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nplatforms=[\"all\"],\nclassifiers=[\n'Development Status :: 2 - Pre-Alpha',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: Implementation :: CPython',\n'Topic :: Utilities',\n],\npython_requires='>=2.7',\nauthor='MyColorfulDays',\nauthor_email='my_colorful_days@163.com',\nurl='https:\/\/github.com\/MyColorfulDays\/jsonformatter.git',\nlicense='BSD License',\npackages=['jsonformatter']\n)\n"
    },
    {
        "package_name": "jsonnet-0.18.0",
        "file_list": "ast.h desugarer.cpp desugarer.h formatter.cpp formatter.h json.h lexer.cpp lexer.h lexer_test.cpp libjsonnet.cpp libjsonnet_test.cpp parser.cpp parser.h parser_test.cpp pass.cpp pass.h state.h static_analysis.cpp static_analysis.h static_error.h std.jsonnet.h string_utils.cpp string_utils.h unicode.h vm.cpp vm.h libjsonnet++.h libjsonnet.h libjsonnet_fmt.h dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE Makefile MANIFEST.in PKG-INFO _jsonnet.c README.md setup.cfg setup.py std.jsonnet json.hpp md5.cpp md5.h bm_parse.cpp main.cpp log.hpp util.hpp bm_charconv.cpp bm_format.cpp read.cpp allocator.hpp base64.cpp base64.hpp bitmask.hpp blob.hpp c4_pop.hpp c4_push.hpp charconv.hpp char_traits.cpp char_traits.hpp common.hpp compiler.hpp config.hpp cpu.hpp ctor_dtor.hpp enum.hpp error.cpp error.hpp export.hpp debugbreak.h a d f p s basictest.cpp example_test.c exhaustive32.c exhaustive32_6 exhaustive32_m long_exhaustiv long_random64. long_test.cpp powersoffive_h random64.cpp random_string. short_random_s string_test.cp fast_float.hpp rng.hpp inplace_function.h format.cpp format.hpp hash.hpp language.cpp language.hpp memory_resource.cpp memory_resource.hpp memory_util.cpp memory_util.hpp platform.hpp preprocessor.hpp restrict.hpp span.hpp std.hpp string.hpp tuple.hpp vector.hpp substr.hpp substr_fwd.hpp szconv.hpp time.cpp time.hpp types.hpp type_name.hpp unrestrict.hpp windows.hpp windows_pop.hpp windows_push.hpp archetypes.cpp archetypes.hpp supprwarn_pop.hpp supprwarn_push.hpp test.cpp main.cpp test.hpp test_allocator.cpp test_base64.cpp test_bitmask.cpp test_blob.cpp test_charconv.cpp test_char_traits.cpp test_ctor_dtor.cpp test_enum.cpp test_enum_common.hpp test_error.cpp test_error_exception.cpp test_format.cpp test_log.cpp test_memory_resource.cpp test_memory_util.cpp test_preprocessor.cpp test_span.cpp test_std_string.cpp test_std_vector.cpp test_substr.cpp test_szconv.cpp test_types.cpp test_type_name.cpp common.cpp common.hpp checks.hpp parser_dbg.hpp print.hpp stack.hpp emit.def.hpp emit.hpp export.hpp node.hpp parse.cpp parse.hpp preprocess.cpp preprocess.hpp map.hpp std.hpp string.hpp vector.hpp tree.cpp tree.hpp writer.hpp yml.hpp ryml.hpp ryml_std.hpp libyaml.hpp parse_emit.cpp test_basic.cpp test_basic_json.cpp test_block_folded.cpp test_block_literal.cpp test_case.cpp test_case.hpp test_complex_key.cpp test_double_quoted.cpp test_empty_doc.cpp test_empty_file.cpp test_empty_map.cpp test_empty_seq.cpp test_generic_map.cpp test_generic_seq.cpp test_github_issues.cpp test_group.cpp test_group.hpp test_indentation.cpp test_map_of_seq.cpp test_merge.cpp test_nested_mapx2.cpp test_nested_mapx3.cpp test_nested_mapx4.cpp test_nested_seqx2.cpp test_nested_seqx3.cpp test_nested_seqx4.cpp test_null_val.cpp test_number.cpp test_plain_scalar.cpp test_preprocess.cpp test_scalar_names.cpp test_seq_of_map.cpp test_simple_anchor.cpp test_simple_doc.cpp test_simple_map.cpp test_simple_seq.cpp test_simple_set.cpp test_single_quoted.cpp test_stack.cpp test_suite.cpp test_tag_property.cpp",
        "setup.py": "# Copyright 2015 Google Inc. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nfrom setuptools import setup\nfrom setuptools import Extension\nfrom setuptools.command.build_ext import build_ext as BuildExt\nfrom subprocess import Popen\n\nDIR = os.path.abspath(os.path.dirname(__file__))\n# NOTE: If you are editing the array below then you probably also need\n# to change MANIFEST.in.\nLIB_OBJECTS = [\n'core\/desugarer.o',\n'core\/formatter.o',\n'core\/libjsonnet.o',\n'core\/lexer.o',\n'core\/parser.o',\n'core\/pass.o',\n'core\/static_analysis.o',\n'core\/string_utils.o',\n'core\/vm.o',\n'third_party\/md5\/md5.o',\n'third_party\/rapidyaml\/rapidyaml\/ext\/c4core\/src\/c4\/char_traits.o',\n'third_party\/rapidyaml\/rapidyaml\/ext\/c4core\/src\/c4\/base64.o',\n'third_party\/rapidyaml\/rapidyaml\/ext\/c4core\/src\/c4\/language.o',\n'third_party\/rapidyaml\/rapidyaml\/ext\/c4core\/src\/c4\/memory_util.o',\n'third_party\/rapidyaml\/rapidyaml\/ext\/c4core\/src\/c4\/format.o',\n'third_party\/rapidyaml\/rapidyaml\/ext\/c4core\/src\/c4\/time.o',\n'third_party\/rapidyaml\/rapidyaml\/ext\/c4core\/src\/c4\/memory_resource.o',\n'third_party\/rapidyaml\/rapidyaml\/ext\/c4core\/src\/c4\/error.o',\n'third_party\/rapidyaml\/rapidyaml\/src\/c4\/yml\/parse.o',\n'third_party\/rapidyaml\/rapidyaml\/src\/c4\/yml\/preprocess.o',\n'third_party\/rapidyaml\/rapidyaml\/src\/c4\/yml\/common.o',\n'third_party\/rapidyaml\/rapidyaml\/src\/c4\/yml\/tree.o',\n]\n\nMODULE_SOURCES = ['python\/_jsonnet.c']\n\ndef get_version():\n\"\"\"\nParses the version out of libjsonnet.h\n\"\"\"\nwith open(os.path.join(DIR, 'include\/libjsonnet.h')) as f:\nfor line in f:\nif '#define' in line and 'LIB_JSONNET_VERSION' in line:\nv_code = line.partition('LIB_JSONNET_VERSION')[2].strip('\\n \"')\nif v_code[0] == \"v\":\nv_code = v_code[1:]\nreturn v_code\n\nclass BuildJsonnetExt(BuildExt):\ndef run(self):\np = Popen(['make'] + LIB_OBJECTS, cwd=DIR)\np.wait()\nif p.returncode != 0:\nraise Exception('Could not build %s' % (', '.join(LIB_OBJECTS)))\nBuildExt.run(self)\n\njsonnet_ext = Extension(\n'_jsonnet',\nsources=MODULE_SOURCES,\nextra_objects=LIB_OBJECTS,\ninclude_dirs = ['include'],\nlanguage='c++'\n)\n\nsetup(name='jsonnet',\nurl='https:\/\/jsonnet.org',\ndescription='Python bindings for Jsonnet - The data templating language ',\nlicense=\"Apache License 2.0\",\nauthor='David Cunningham',\nauthor_email='dcunnin@google.com',\nversion=get_version(),\ncmdclass={\n'build_ext': BuildJsonnetExt,\n},\next_modules=[jsonnet_ext],\ntest_suite=\"python._jsonnet_test\",\n)\n"
    },
    {
        "package_name": "JsonSir-0.0.2",
        "file_list": "boolencoder.py datetimeencoder.py intencoder.py objectidencoder.py regexencoder.py __init__.py encoder.py serializer.py _compat.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nfrom setuptools import setup, find_packages\n\ndescription = 'A serializer for JSON-like data in Python.'\n\nsetup(\nname='JsonSir',\nversion='0.0.2',\nauthor='RussellLuo',\nauthor_email='luopeng.he@gmail.com',\nmaintainer='RussellLuo',\nmaintainer_email='luopeng.he@gmail.com',\ndescription=description,\nlicense='MIT',\nlong_description=description,\npackages=find_packages(),\nurl='https:\/\/github.com\/RussellLuo\/jsonsir',\n)\n"
    },
    {
        "package_name": "jupyter-1.0.0",
        "file_list": "make.bat Makefile conf.py config.rst data_science.rst index.rst install.rst scratch.rst system.rst jupyter.py LICENSE PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# coding: utf-8\n\n# Copyright (c) Juptyer Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nfrom __future__ import print_function\n\nimport os\nimport sys\n\nfrom distutils.core import setup\n\npjoin = os.path.join\nhere = os.path.abspath(os.path.dirname(__file__))\n\n\nsetup_args = dict(\nname = 'jupyter',\nversion = '1.0.0',\ndescription = \"Jupyter metapackage. Install all the Jupyter components in one go.\",\nlong_description = \"\"\"Install the Jupyter system, including the notebook, qtconsole, and the IPython kernel.\"\"\",\nauthor = \"Jupyter Development Team\",\nauthor_email = \"jupyter@googlegroups.org\",\npy_modules = ['jupyter'],\ninstall_requires = [\n'notebook',\n'qtconsole',\n'jupyter-console',\n'nbconvert',\n'ipykernel',\n'ipywidgets',\n],\nurl = \"http:\/\/jupyter.org\",\nlicense = \"BSD\",\nclassifiers = [\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: BSD License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n],\n)\n\nif any(bdist in sys.argv for bdist in ['bdist_wheel', 'bdist_egg']):\nimport setuptools\n\n\nif __name__ == '__main__':\nsetup(**setup_args)\n"
    },
    {
        "package_name": "jupyter_http_over_ws-0.0.8",
        "file_list": "handlers.py handlers_test.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# Copyright 2017 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Configuration for the jupyter_http_over_ws package.\"\"\"\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\nsetup(\nname='jupyter_http_over_ws',\n# LINT.IfChange(handler_version)\nversion='0.0.8',\n# LINT.ThenChange(..\/handlers.py:handler_version)\nauthor='Google Colaboratory team',\nauthor_email='colaboratory-team@google.com',\ndescription='Jupyter support for HTTP-over-ws',\nlong_description='Jupyter support for HTTP-over-ws',\nurl='https:\/\/github.com\/googlecolab\/jupyter_http_over_ws',\npackages=find_packages(exclude=('tests*',)),\ninstall_requires=(\n'enum34~=1.1;python_version<\"3.4\"',\n'notebook>=5.0',\n'six>=1.6.0',\n'tornado>=4.5',\n),\nlicense='Apache 2.0',\nkeywords='google colab ipython jupyter http_over_ws',\nclassifiers=(\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: POSIX',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: OS Independent',\n'Topic :: Internet :: WWW\/HTTP',\n),\n)\n"
    },
    {
        "package_name": "jupyterlab_widgets-1.1.1",
        "file_list": "install.json .gitignore package.json 1.6c3ab69171002cbfa04f.js 18.c756b86bf6ebd74dab7b.js 243.6c384ff2649ef572a18a.js 272.3fcd6d7045eecfb56da6.js 279.aa88a78c8bf62c65db54.js 466.f77b3df99f049604bce9.js 523.66fca84c7924f6f7676d.js 638.f3e5e34a28f3334d4f08.js 638.f3e5e34a28f3334d4f08.js.LICENSE. 803.b7b75bd6e7977a648c67.js 86.970ef07abcc86672015c.js 95.b5a5ff10000a6051fa99.js 95.b5a5ff10000a6051fa99.js.LICENSE.t remoteEntry.1bd01b57743def902f73.js style.js _version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in package.json PKG-INFO pyproject.toml README.md setup.cfg setup.py tsconfig.json",
        "setup.py": "\"\"\"\njupyterlab_widgets setup\n\"\"\"\nimport os\n\nfrom jupyter_packaging import (\ncreate_cmdclass, install_npm, ensure_targets,\ncombine_commands, get_version,\n)\nimport setuptools\n\nHERE = os.path.abspath(os.path.dirname(__file__))\n\n# The name of the project\nname = \"jupyterlab_widgets\"\n\n# Get our version\nversion = get_version(os.path.join(name, \"_version.py\"))\n\nlab_path = os.path.join(HERE, name, \"labextension\")\n\n# Representative files that should exist after a successful build\njstargets = [\nos.path.join(lab_path, \"package.json\"),\n]\n\npackage_data_spec = {\nname: [\n\"*\"\n]\n}\n\nlabext_name = \"@jupyter-widgets\/jupyterlab-manager\"\n\ndata_files_spec = [\n(\"share\/jupyter\/labextensions\/%s\" % labext_name, lab_path, \"**\"),\n(\"share\/jupyter\/labextensions\/%s\" % labext_name, HERE, \"install.json\"),\n]\n\ncmdclass = create_cmdclass(\n\"jsdeps\",\npackage_data_spec=package_data_spec,\ndata_files_spec=data_files_spec\n)\n\n# if the static assets already exist, do not invoke npm so we can make a wheel\n# from the sdist package, since the npm build really only works from this\n# repo.\njsbuild = []\nif all(os.path.exists(f) for f in jstargets):\njsbuild.append(install_npm(HERE, build_cmd=\"build:prod\", npm=[\"jlpm\"]))\njsbuild.append(ensure_targets(jstargets))\n\ncmdclass[\"jsdeps\"] = combine_commands(*jsbuild)\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nsetup_args = dict(\nname=name,\nversion=version,\nurl=\"https:\/\/github.com\/jupyter-widgets\/ipywidgets\",\nauthor=\"Jupyter Development Team\",\ndescription=\"A JupyterLab extension.\",\nlong_description= long_description,\nlong_description_content_type=\"text\/markdown\",\ncmdclass=cmdclass,\npackages=setuptools.find_packages(),\ninstall_requires=[],\nzip_safe=False,\ninclude_package_data=True,\npython_requires=\">=3.6\",\nlicense=\"BSD-3-Clause\",\nplatforms=\"Linux, Mac OS X, Windows\",\nkeywords=[\"Jupyter\", \"JupyterLab\", \"JupyterLab3\"],\nclassifiers=[\n\"License :: OSI Approved :: BSD License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Framework :: Jupyter\",\n\"Framework :: Jupyter :: JupyterLab\",\n\"Framework :: Jupyter :: JupyterLab :: 3\",\n\"Framework :: Jupyter :: JupyterLab :: Extensions\",\n\"Framework :: Jupyter :: JupyterLab :: Extensions :: Prebuilt\",\n],\n)\n\n\nif __name__ == \"__main__\":\nsetuptools.setup(**setup_args)\n"
    },
    {
        "package_name": "jupytext-1.14.1",
        "file_list": "install.json jupytext.json jupytext.json jupytext.json cell_metadata.py cell_reader.py cell_to_text.py cli.py combine.py compare.py config.py contentsmanager.py doxygen.py formats.py header.py jupytext.py kernels.py package.json package.json.orig 568.24d778e9e4283061adca.js remoteEntry.fb132cf060cae80c3e5a.js style.js third-party-licenses.json languages.py magics.py metadata_filter.py myst.py index.js jupytext.yml jupytext_menu.png README.md paired_paths.py pairs.py pandoc.py pep8.py quarto.py reraise.py stringparser.py version.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in LICENSE package.json README.md index.ts tsconfig.json yarn.lock PKG-INFO pyproject.toml README.md requirements-dev.txt requirements.txt setup.cfg setup.py conftest.py invalid_file_896.md hydrogen_latex_html_R_magics.py sample_bash_notebook.ipynb html-demo.ipynb coconut_homepage_demo.ipynb xcpp_by_quantstack.ipynb csharp.ipynb fsharp.ipynb tailrecursive-factorial.ipynb haskell_notebook.ipynb demo_gdl_fbp.ipynb simple-helloworld.ipynb ijavascript.ipynb julia_benchmark_plotly_barchart.ipynb julia_functional_geometry.ipynb octave_notebook.ipynb maxima_example.ipynb ocaml_notebook.ipynb powershell.ipynb cat_variable.ipynb convert_to_py_then_test_with_update83.ipynb frozen_cell.ipynb jupyter.ipynb jupyter_again.ipynb jupyter_with_raw_cell_in_body.ipynb jupyter_with_raw_cell_on_top.ipynb Line_breaks_in_LateX_305.ipynb Notebook with function and cell metadata 164.ipynb Notebook with html and latex cells.ipynb Notebook with many hash signs.ipynb Notebook with metadata and long cells.ipynb notebook_with_complex_metadata.ipynb Notebook_with_more_R_magic_111.ipynb nteract_with_parameter.ipynb sample_rise_notebook_66.ipynb text_outputs_and_images.ipynb The flavors of raw cells.ipynb kalman_filter_and_visualization.ipynb ir_notebook.ipynb R notebook with invalid cell keys.ipynb simple_robot_notebook.ipynb evcxr_jupyter_tour.ipynb sage_print_hello.ipynb simple_scala_notebook.ipynb Reference Guide for Calysto Scheme.ipynb jupytext_replication.ipynb tcl_test.ipynb itypescript.ipynb julia_sample_script.jl jupytext_markdown.md plain_markdown.md cat_variable.py coconut_homepage_demo.coco convert_to_py_then_test_with_update83.py csharp.cs demo_gdl_fbp.pro evcxr_jupyter_tour.rs frozen_cell.py fsharp.fsx haskell_notebook.hs html-demo.clj ijavascript.js ir_notebook.R itypescript.ts julia_benchmark_plotly_barchart.jl julia_functional_geometry.jl jupyter.py jupyter_again.py jupyter_with_raw_cell_in_body.py jupyter_with_raw_cell_on_top.py jupytext_replication.sos kalman_filter_and_visualization.q Line_breaks_in_LateX_305.py maxima_example.mac Notebook with function and cell metadata 164.py Notebook with html and latex cells.py Notebook with many hash signs.py Notebook with metadata and long cells.py notebook_with_complex_metadata.py Notebook_with_more_R_magic_111.py Notebook_with_R_magic.py nteract_with_parameter.py ocaml_notebook.ml octave_notebook.m plotly_graphs.py powershell.ps1 R notebook with invalid cell keys.R Reference Guide for Calysto Scheme.ss sage_print_hello.sage sample_bash_notebook.sh sample_rise_notebook_66.py simple-helloworld.java simple_robot_notebook.robot simple_scala_notebook.scala tailrecursive-factorial.groovy tcl_test.tcl text_outputs_and_images.py The flavors of raw cells.py World population.py xcpp_by_quantstack.cpp cat_variable.md coconut_homepage_demo.md convert_to_py_then_test_with_update83.md csharp.md demo_gdl_fbp.md evcxr_jupyter_tour.md frozen_cell.md fsharp.md haskell_notebook.md html-demo.md ijavascript.md ir_notebook.md itypescript.md julia_benchmark_plotly_barchart.md julia_functional_geometry.md jupyter.md jupyter_again.md jupyter_with_raw_cell_in_body.md jupyter_with_raw_cell_on_top.md jupytext_replication.md kalman_filter_and_visualization.md Line_breaks_in_LateX_305.md maxima_example.md Notebook with function and cell metadata 164.md Notebook with html and latex cells.md Notebook with many hash signs.md Notebook with metadata and long cells.md notebook_with_complex_metadata.md Notebook_with_more_R_magic_111.md Notebook_with_R_magic.md nteract_with_parameter.md ocaml_notebook.md octave_notebook.md plotly_graphs.md powershell.md R notebook with invalid cell keys.md Reference Guide for Calysto Scheme.md sage_print_hello.md sample_bash_notebook.md sample_rise_notebook_66.md simple-helloworld.md simple_robot_notebook.md simple_scala_notebook.md tailrecursive-factorial.md tcl_test.md text_outputs_and_images.md The flavors of raw cells.md World population.md xcpp_by_quantstack.md cat_variable.md coconut_homepage_demo.md convert_to_py_then_test_with_update83.md csharp.md demo_gdl_fbp.md evcxr_jupyter_tour.md frozen_cell.md fsharp.md haskell_notebook.md ijavascript.md ir_notebook.md itypescript.md julia_benchmark_plotly_barchart.md jupyter.md jupyter_again.md jupyter_with_raw_cell_in_body.md jupyter_with_raw_cell_on_top.md jupytext_replication.md kalman_filter_and_visualization.md Line_breaks_in_LateX_305.md maxima_example.md Notebook with function and cell metadata 164.md Notebook with html and latex cells.md Notebook with many hash signs.md Notebook with metadata and long cells.md notebook_with_complex_metadata.md Notebook_with_more_R_magic_111.md Notebook_with_R_magic.md nteract_with_parameter.md ocaml_notebook.md octave_notebook.md plotly_graphs.md powershell.md R notebook with invalid cell keys.md Reference Guide for Calysto Scheme.md sage_print_hello.md sample_bash_notebook.md sample_rise_notebook_66.md simple-helloworld.md simple_robot_notebook.md simple_scala_notebook.md tailrecursive-factorial.md tcl_test.md text_outputs_and_images.md The flavors of raw cells.md World population.md cat_variable.md convert_to_py_then_test_with_update83.md frozen_cell.md ir_notebook.md julia_benchmark_plotly_barchart.md jupyter.md jupyter_again.md jupyter_with_raw_cell_in_body.md jupyter_with_raw_cell_on_top.md notebook_with_complex_metadata.md Notebook_with_more_R_magic_111.md Notebook_with_R_magic.md nteract_with_parameter.md plotly_graphs.md sample_rise_notebook_66.md text_outputs_and_images.md World population.md cat_variable.py coconut_homepage_demo.coco convert_to_py_then_test_with_update83.py csharp.cs demo_gdl_fbp.pro evcxr_jupyter_tour.rs frozen_cell.py fsharp.fsx haskell_notebook.hs html-demo.clj ijavascript.js ir_notebook.low.r ir_notebook.R itypescript.ts julia_benchmark_plotly_barchart.jl julia_functional_geometry.jl jupyter.py jupyter_again.py jupyter_with_raw_cell_in_body.py jupyter_with_raw_cell_on_top.py jupytext_replication.sos kalman_filter_and_visualization.q Line_breaks_in_LateX_305.py maxima_example.mac Notebook with function and cell metadata 164.py Notebook with html and latex cells.py Notebook with many hash signs.py Notebook with metadata and long cells.py notebook_with_complex_metadata.py Notebook_with_more_R_magic_111.py Notebook_with_R_magic.py nteract_with_parameter.py ocaml_notebook.ml octave_notebook.m plotly_graphs.py powershell.ps1 R notebook with invalid cell keys.low.r R notebook with invalid cell keys.R Reference Guide for Calysto Scheme.scm Reference Guide for Calysto Scheme.ss sage_print_hello.sage sample_bash_notebook.sh sample_rise_notebook_66.py simple-helloworld.java simple_robot_notebook.robot simple_scala_notebook.scala tailrecursive-factorial.groovy tcl_test.tcl text_outputs_and_images.py The flavors of raw cells.py World population.py xcpp_by_quantstack.cpp cat_variable.qmd frozen_cell.qmd julia_benchmark_plotly_barchart.qmd jupyter.qmd jupyter_again.qmd Notebook_with_more_R_magic_111.qmd Notebook_with_R_magic.qmd cat_variable.Rmd coconut_homepage_demo.Rmd convert_to_py_then_test_with_update83.Rmd csharp.Rmd demo_gdl_fbp.Rmd evcxr_jupyter_tour.Rmd frozen_cell.Rmd fsharp.Rmd haskell_notebook.Rmd html-demo.Rmd ijavascript.Rmd ir_notebook.Rmd itypescript.Rmd julia_benchmark_plotly_barchart.Rmd julia_functional_geometry.Rmd jupyter.Rmd jupyter_again.Rmd jupyter_with_raw_cell_in_body.Rmd jupyter_with_raw_cell_on_top.Rmd jupytext_replication.Rmd kalman_filter_and_visualization.Rmd Line_breaks_in_LateX_305.Rmd maxima_example.Rmd Notebook with function and cell metadata 164.Rmd Notebook with html and latex cells.Rmd Notebook with many hash signs.Rmd Notebook with metadata and long cells.Rmd notebook_with_complex_metadata.Rmd Notebook_with_more_R_magic_111.Rmd Notebook_with_R_magic.Rmd nteract_with_parameter.Rmd ocaml_notebook.Rmd octave_notebook.Rmd plotly_graphs.Rmd powershell.Rmd R notebook with invalid cell keys.Rmd Reference Guide for Calysto Scheme.Rmd sage_print_hello.Rmd sample_bash_notebook.Rmd sample_rise_notebook_66.Rmd simple-helloworld.Rmd simple_robot_notebook.Rmd simple_scala_notebook.Rmd tailrecursive-factorial.Rmd tcl_test.Rmd text_outputs_and_images.Rmd The flavors of raw cells.Rmd World population.Rmd xcpp_by_quantstack.Rmd cat_variable.py coconut_homepage_demo.coco convert_to_py_then_test_with_update83.py csharp.cs demo_gdl_fbp.pro evcxr_jupyter_tour.rs frozen_cell.py fsharp.fsx haskell_notebook.hs html-demo.clj ijavascript.js ir_notebook.low.r ir_notebook.R itypescript.ts julia_benchmark_plotly_barchart.jl julia_functional_geometry.jl jupyter.py jupyter_again.py jupyter_with_raw_cell_in_body.py jupyter_with_raw_cell_on_top.py jupytext_replication.sos kalman_filter_and_visualization.q Line_breaks_in_LateX_305.py maxima_example.mac Notebook with function and cell metadata 164.py Notebook with html and latex cells.py Notebook with metadata and long cells.py notebook_with_complex_metadata.py Notebook_with_more_R_magic_111.py Notebook_with_R_magic.py nteract_with_parameter.py ocaml_notebook.ml octave_notebook.m plotly_graphs.py powershell.ps1 R notebook with invalid cell keys.low.r R notebook with invalid cell keys.R Reference Guide for Calysto Scheme.scm Reference Guide for Calysto Scheme.ss sage_print_hello.sage sample_bash_notebook.sh sample_rise_notebook_66.py simple-helloworld.java simple_robot_notebook.robot simple_scala_notebook.scala tailrecursive-factorial.groovy tcl_test.tcl text_outputs_and_images.py The flavors of raw cells.py World population.py xcpp_by_quantstack.cpp cat_variable.py convert_to_py_then_test_with_update83.py frozen_cell.py jupyter.py jupyter_again.py jupyter_with_raw_cell_in_body.py jupyter_with_raw_cell_on_top.py Line_breaks_in_LateX_305.py Notebook with function and cell metadata 164.py Notebook with html and latex cells.py Notebook with many hash signs.py Notebook with metadata and long cells.py notebook_with_complex_metadata.py Notebook_with_more_R_magic_111.py Notebook_with_R_magic.py nteract_with_parameter.py plotly_graphs.py sample_rise_notebook_66.py text_outputs_and_images.py The flavors of raw cells.py World population.py cat_variable.py convert_to_py_then_test_with_update83.py frozen_cell.py jupyter.py jupyter_again.py jupyter_with_raw_cell_in_body.py jupyter_with_raw_cell_on_top.py Line_breaks_in_LateX_305.py Notebook with function and cell metadata 164.py Notebook with html and latex cells.py Notebook with many hash signs.py Notebook with metadata and long cells.py notebook_with_complex_metadata.py Notebook_with_more_R_magic_111.py Notebook_with_R_magic.py nteract_with_parameter.py plotly_graphs.py sample_rise_notebook_66.py text_outputs_and_images.py The flavors of raw cells.py World population.py cat_variable.py convert_to_py_then_test_with_update83.py jupyter.py jupyter_again.py Line_breaks_in_LateX_305.py notebook_with_complex_metadata.py nteract_with_parameter.py plotly_graphs.py sample_rise_notebook_66.py text_outputs_and_images.py World population.py ir_notebook.low.r ir_notebook.R R notebook with invalid cell keys.low.r R notebook with invalid cell keys.R jupytext_markdown.ipynb plain_markdown.ipynb chunk_options.ipynb ioslides.ipynb knitr-spin.ipynb markdown.ipynb R_sample.ipynb build.ipynb hydrogen.ipynb hydrogen_latex_html_R_magics.ipynb julia_sample_script.ipynb knitr-spin.ipynb light_sample.ipynb python_notebook_sample.ipynb simple_r_script.ipynb plot_notebook.ipynb plot_notebook.ipynb hydrogen.py build.ps1 light_sample.py python_notebook_sample.py simple_r_script.R chunk_options.Rmd ioslides.Rmd knitr-spin.Rmd markdown.Rmd R_sample.Rmd knitr-spin.R plot_notebook.py test_active_cells.py test_auto_ext.py test_black.py test_cells.py test_cell_id.py test_cell_markers.py test_cell_metadata.py test_changelog.py test_cli.py test_cli_check.py test_cli_config.py test_cm_config.py test_combine.py test_compare.py test_config.py test_contentsmanager.py test_custom_cell_magics.py test_doc_files_are_notebooks.py test_doxygen.py test_escape_magics.py test_execute.py test_formats.py test_header.py test_hide_remove_input_outputs_rmarkdown.py test_invalid_file.py test_ipynb_to_myst.py test_ipynb_to_py.py test_ipynb_to_R.py test_ipynb_to_rmd.py test_isort.py test_jupytext_errors.py test_jupytext_nbconvert_round_trip.py test_jupytext_read.py test_knitr_spin.py test_load_multiple.py test_markdown_in_code_cells.py test_metadata_filter.py test_metadata_filters_from_config.py test_mirror.py test_nbformat_version.py test_paired_paths.py test_pep8.py test_preserve_empty_cells.py test_pre_commit_0_ipynb_to_py.py test_pre_commit_1_sync.py test_pre_commit_1_sync_with_config.py test_pre_commit_1_sync_with_no_config.py test_pre_commit_2_sync_nbstripout.py test_pre_commit_3_sync_black_nbstripout.py test_pre_commit_4_sync_execute.py test_pre_commit_5_reformat_markdown.py test_pre_commit_mode.py test_pre_commit_scripts.py test_pytest.py test_raw_strings.py test_read_all_py.py test_read_dotnet_try_markdown.py test_read_empty_text_notebook.py test_read_folding_markers.py test_read_incomplete_rmd.py test_read_simple_clojure.py test_read_simple_csharp.py test_read_simple_groovy.py test_read_simple_hydrogen.py test_read_simple_ipynb.py test_read_simple_java.py test_read_simple_julia.py test_read_simple_markdown.py test_read_simple_matlab.py test_read_simple_nomarker.py test_read_simple_ocaml.py test_read_simple_pandoc.py test_read_simple_percent.py test_read_simple_python.py test_read_simple_quarto.py test_read_simple_R.py test_read_simple_rmd.py test_read_simple_rust.py test_read_simple_scheme.py test_read_simple_sphinx.py test_read_write_functions.py test_remove_encoding.py test_rmd_to_ipynb.py test_save_multiple.py test_stringparser.py test_trust_notebook.py test_unicode.py test_using_cli.py test_write_does_not_modify_notebook.py utils.py __init__.py",
        "setup.py": "import re\nimport warnings\nfrom os import environ, path\n\nfrom setuptools import find_packages, setup\n\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, \"README.md\"), encoding=\"utf-8\") as f:\n# replace Markdown links (docs\/[NAME].md with (https:\/\/jupytext.readthedocs.io\/en\/latest\/[NAME].html\nlong_description = re.sub(\nr\"\\(docs\/([A-Za-z-_]*).md\",\n\"(https:\/\/jupytext.readthedocs.io\/en\/latest\/\\\\1.html\",\nf.read(),\n)\n\nwith open(path.join(this_directory, \"jupytext\/version.py\")) as f:\nversion_file = f.read()\nversion_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", version_file, re.M)\nversion = version_match.group(1)\n\nsetup_args = dict(\nname=\"jupytext\",\nversion=version,\nauthor=\"Marc Wouts\",\nauthor_email=\"marc.wouts@gmail.com\",\ndescription=\"Jupyter notebooks as Markdown documents, \"\n\"Julia, Python or R scripts\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/mwouts\/jupytext\",\npackages=find_packages(exclude=[\"tests\"]),\nentry_points={\"console_scripts\": [\"jupytext = jupytext.cli:jupytext\"]},\ntests_require=[\"pytest\"],\ninstall_requires=[\n\"nbformat\",\n\"pyyaml\",\n\"toml\",\n\"markdown-it-py>=1.0.0,<3.0.0\",\n\"mdit_py_plugins\",\n],\npython_requires=\"~=3.6\",\nextras_require={\n# left for back-compatibility\n\"myst\": [],\n\"toml\": [\"toml\"],\n\"rst2md\": [\"sphinx-gallery~=0.7.0\"],\n},\nlicense=\"MIT\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"License :: OSI Approved :: MIT License\",\n\"Environment :: Console\",\n\"Framework :: Jupyter\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Science\/Research\",\n\"Topic :: Text Processing :: Markup\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n],\n)\n\nbuild_labextension = environ.get(\"BUILD_JUPYTERLAB_EXTENSION\")\nif build_labextension in [\"0\", \"False\", \"false\", \"No\", \"no\", \"N\", \"n\"]:\nbuild_labextension = False\n\nif not build_labextension:\n# We skip the lab extension,\n# cf. https:\/\/github.com\/mwouts\/jupytext\/issues\/706\nwarnings.warn(\n\"Jupytext is being built WITHOUT the lab extension. \"\n\"Please set BUILD_JUPYTERLAB_EXTENSION=1 if you want it.\"\n)\n\nsetup_args[\"package_data\"] = {\"jupytext\": [\"nbextension\/*.*\"]}\nsetup_args[\"data_files\"] = [\n(\n\"etc\/jupyter\/nbconfig\/notebook.d\",\n[\"jupyter-config\/nbconfig\/notebook.d\/jupytext.json\"],\n),\n(\n\"etc\/jupyter\/jupyter_notebook_config.d\",\n[\"jupyter-config\/jupyter_notebook_config.d\/jupytext.json\"],\n),\n(\n\"etc\/jupyter\/jupyter_server_config.d\",\n[\"jupyter-config\/jupyter_server_config.d\/jupytext.json\"],\n),\n(\n\"share\/jupyter\/nbextensions\/jupytext\",\n[\n\"jupytext\/nbextension\/index.js\",\n\"jupytext\/nbextension\/README.md\",\n\"jupytext\/nbextension\/jupytext_menu.png\",\n\"jupytext\/nbextension\/jupytext.yml\",\n],\n),\n]\nelse:\n# Install labextension using jupyter_packaging\nfrom jupyter_packaging import (\ncombine_commands,\ncreate_cmdclass,\nensure_targets,\ninstall_npm,\n)\n\nlab_path = path.join(this_directory, \"jupytext\", \"labextension\")\nnb_path = path.join(this_directory, \"jupytext\", \"nbextension\")\n\njupyter_config_path = path.join(this_directory, \"jupyter-config\")\nnotebook_config_path = path.join(jupyter_config_path, \"jupyter_notebook_config.d\")\njupyter_server_config_path = path.join(\njupyter_config_path, \"jupyter_server_config.d\"\n)\nnbconfig_path = path.join(jupyter_config_path, \"nbconfig\", \"notebook.d\")\n\ndata_files_spec = [\n# Install nbextension\n(\"share\/jupyter\/nbextensions\/jupytext\", nb_path, \"**\"),\n(\"share\/jupyter\/nbextensions\/jupytext\", nbconfig_path, \"jupytext.json\"),\n# Install config files\n(\n\"etc\/jupyter\/jupyter_server_config.d\",\njupyter_server_config_path,\n\"jupytext.json\",\n),\n(\n\"etc\/jupyter\/jupyter_notebook_config.d\",\nnotebook_config_path,\n\"jupytext.json\",\n),\n(\"etc\/jupyter\/nbconfig\/notebook.d\", nbconfig_path, \"jupytext.json\"),\n(\"share\/jupyter\/labextensions\/jupyterlab-jupytext\", lab_path, \"**\"),\n(\n\"share\/jupyter\/labextensions\/jupyterlab-jupytext\",\nthis_directory,\n\"install.json\",\n),\n]\npackage_data_spec = {\"jupytext\": [\"nbextension\/**\"]}\n\n# Representative files that should exist after a successful build\njstargets = [\npath.join(lab_path, \"package.json\"),\n]\n\ncmdclass = create_cmdclass(\n\"jsdeps\",\npackage_data_spec=package_data_spec,\ndata_files_spec=data_files_spec,\n)\n\ncmdclass[\"jsdeps\"] = combine_commands(\ninstall_npm(\npath.join(this_directory, \"packages\", \"labextension\"),\nbuild_cmd=\"build:prod\",\nnpm=[\"jlpm\"],\n),\nensure_targets(jstargets),\n)\nsetup_args[\"cmdclass\"] = cmdclass\n\n# Call setup\nsetup(**setup_args)\n"
    },
    {
        "package_name": "kaldi_io-0.9.4",
        "file_list": "kaldi_io.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n# Copyright 2019 Oplatai.com (author: Ondrej Platek)\n# Copyright 2019 Brno University of Technology (author: Karel Vesely)\n\n# Licensed under the Apache License, Version 2.0 (the \"License\")\n\nimport setuptools\n\n# Python 2 and 3: alternative 2\nfrom io import open\n\nwith open(\"README.md\", \"r\", encoding='utf-8') as fh:\nlong_description = fh.read()\n\n# Python 2 (override)\nimport sys\nif sys.version_info[0] < 3: long_description = \"\" # avoid syntax errors (markdown is broken in python2)\n\nsetuptools.setup(\nname='kaldi_io',\nversion='0.9.4',\nauthor='Karel Vesely',\ndescription='Glue code connecting Kaldi data and Python.',\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl='https:\/\/github.com\/vesis84\/kaldi-io-for-python',\ninstall_requires=[ 'numpy>=1.15.3', ],\npackages=setuptools.find_packages(),\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 2\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: POSIX :: Linux\",\n\"Topic :: Multimedia :: Sound\/Audio :: Speech\",\n],\n)\n"
    },
    {
        "package_name": "kmodes-0.12.1",
        "file_list": "kmodes.py kprototypes.py dissim.py init_methods.py testing.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "from setuptools import setup, find_packages\n\nimport kmodes\n\nVERSION = kmodes.__version__\n\nwith open('README.rst', encoding='utf8') as readme_file:\nREADME = readme_file.read()\n\nsetup(\nname='kmodes',\npackages=find_packages(exclude=[\n'*.tests',\n'*.tests.*',\n]),\nversion=VERSION,\nurl='https:\/\/github.com\/nicodv\/kmodes',\nauthor='Nelis J de Vos',\nauthor_email='njdevos@gmail.com',\nlicense='MIT',\ndescription='Python implementations of the k-modes and k-prototypes '\n'clustering algorithms for clustering categorical data.',\nlong_description=README,\ninstall_requires=[\n# Note: minimum numpy and scipy versions should ideally be the same\n# as what scikit-learn uses, but versions of numpy<1.10.4\n# give import problems.\n'numpy>=1.10.4',\n'scikit-learn>=0.22.0',\n'scipy>=0.13.3',\n'joblib>=0.11'\n],\nextras_require={\n'dev': [\n'pytest',\n'pytest-cov',\n]\n},\nclassifiers=['Development Status :: 3 - Alpha',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: MIT License',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: Unix',\n'Operating System :: MacOS',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Topic :: Scientific\/Engineering'],\n)\n"
    },
    {
        "package_name": "korean_lunar_calendar-0.2.1",
        "file_list": "korean_lunar_calendar.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\n\n# Always prefer setuptools over distutils\nfrom setuptools import setup, find_packages\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nfrom korean_lunar_calendar import __version__\n\nhere = path.abspath(path.dirname(__file__))\n\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\nlong_description = f.read()\n\nsetup(\nname='korean_lunar_calendar',\nversion=__version__,\ndescription='Korean Lunar Calendar',\nlong_description=long_description,\npackages=find_packages(exclude=[\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"]),\nurl='https:\/\/github.com\/usingsky\/korean_lunar_calendar_py',\nauthor='Jinil Lee',\nauthor_email='usingsky@gmail.com',\nmaintainer='Jinil Lee',\nmaintainer_email='usingsky@gmail.com',\nkeywords=['calendar', 'korean', 'lunar'],\nlicense='MIT',\nclassifiers=[\n'Development Status :: 3 - Alpha',\n'Intended Audience :: Developers',\n'Intended Audience :: End Users\/Desktop',\n'Topic :: Software Development :: Libraries',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n]\n)\n"
    },
    {
        "package_name": "kornia-0.6.6",
        "file_list": "base.py augment.py base.py image.py patch.py utils.py video.py __init__.py base.py affine.py color_jiggle.py color_jitter.py crop.py cutmix.py func.py mixup.py motion_blur.py perspective.py plain_uniform.py planckian_jitter.py posterize.py probability.py rectangle_earase.py resize.py __init__.py affine.py crop.py motion_blur.py perspective.py rotation.py __init__.py __init__.py helpers.py param_validation.py __init__.py base.py affine.py base.py center_crop.py crop.py elastic_transform.py fisheye.py horizontal_flip.py pad.py perspective.py resize.py resized_crop.py rotation.py thin_plate_spline.py vertical_flip.py __init__.py base.py box_blur.py channel_shuffle.py color_jiggle.py color_jitter.py denormalize.py equalize.py erasing.py gaussian_blur.py gaussian_noise.py grayscale.py invert.py motion_blur.py normalize.py planckian_jitter.py plasma.py posterize.py random_rgb_shift.py sharpness.py solarize.py __init__.py base.py cutmix.py mixup.py __init__.py __init__.py base.py affine.py center_crop.py crop.py depthical_flip.py horizontal_flip.py perspective.py rotation.py vertical_flip.py __init__.py equalize.py motion_blur.py __init__.py __init__.py __init__.py gray.py hls.py hsv.py lab.py luv.py raw.py rgb.py xyz.py ycbcr.py yuv.py __init__.py constants.py classification.py connected_components.py diamond_square.py distance_transform.py extract_patches.py face_detection.py histogram_matching.py image_stitching.py lambda_module.py vit.py vit_mobile.py __init__.py _backend.py __init__.py adjust.py core.py equalization.py histogram.py normalize.py shift_rgb.py zca.py __init__.py affine_shape.py defmo.py hardnet.py hynet.py integrated.py keynet.py laf.py resnet_fpn.py __init__.py loftr.py fine_preprocess.py linear_attention.py transformer.py __init__.py coarse_matching.py fine_matching.py geometry.py position_encoding.py supervision.py __init__.py __init__.py matching.py mkd.py orientation.py responses.py scale_space_detector.py siftdesc.py sosnet.py tfeat.py __init__.py blur.py blur_pool.py canny.py filter.py gaussian.py kernels.py kernels_geometry.py laplacian.py median.py motion.py sobel.py unsharp.py __init__.py bbox.py boxes.py distort.py pnp.py undistort.py __init__.py perspective.py pinhole.py stereo.py __init__.py conversions.py depth.py essential.py fundamental.py numeric.py projection.py scene.py triangulation.py _metrics.py __init__.py homography.py linalg.py line.py ransac.py dsnt.py nms.py spatial_soft_argmax.py __init__.py affwarp.py crop2d.py crop3d.py elastic_transform.py flips.py homography_warper.py image_registrator.py imgwarp.py pyramid.py thin_plate_spline.py __init__.py __init__.py ste.py __init__.py io.py __init__.py depth_smooth.py dice.py divergence.py focal.py hausdorff.py lovasz_hinge.py lovasz_softmax.py ms_ssim.py psnr.py ssim.py total_variation.py tversky.py __init__.py accuracy.py average_meter.py confusion_matrix.py mean_average_precision.py mean_iou.py psnr.py ssim.py __init__.py morphology.py __init__.py py.typed __init__.py planar_tracker.py __init__.py draw.py grid.py helpers.py image.py memory.py misc.py one_hot.py pointcloud_io.py _compat.py __init__.py callbacks.py trainer.py trainers.py utils.py __init__.py _version.py __init__.py __tmp__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe LICENSE PKG-INFO pyproject.toml README.md dev.txt x.txt setup.cfg setup.py test_bbox.py test_boxes.py test_conversions.py test_depth.py test_depth_warper.py test_homography.py test_linalg.py test_line.py test_ransac.py __init__.py test_contrib.py test_metrics.py",
        "setup.py": "# Welcome to the Kornia setup.py.\n#\nimport re\nimport sys\n\n# Make sure that kornia is running on Python 3.6.0 or later\n# (to avoid running into this bug: https:\/\/bugs.python.org\/issue29246)\n\nif sys.version_info < (3, 6, 0):\nraise RuntimeError(\"Kornia requires Python 3.6.0 or later.\")\n\n\nfrom setuptools import find_packages, setup\n\n\ndef find_version(file_path: str) -> str:\nversion_file = open(file_path).read()\nversion_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", version_file, re.M)\nif not version_match:\nraise RuntimeError(f\"Unable to find version string in {file_path}\")\nreturn version_match.group(1)\n\n\nVERSION = find_version(\"kornia\/_version.py\")\n\n\n# NOTE: kornia MUST only require PyTorch\nrequirements = ['torch>=1.8.1', 'packaging']\n\n# open readme file and set long description\nwith open(\"README.md\", encoding=\"utf-8\") as fh:\nlong_description = fh.read()\n\n\ndef load_requirements(filename: str):\nwith open(filename) as f:\nreturn [x.strip() for x in f.readlines() if \"-r\" != x[0:2]]\n\n\nrequirements_extras = {\"x\": load_requirements(\"requirements\/x.txt\"), \"dev\": load_requirements(\"requirements\/dev.txt\")}\nrequirements_extras[\"all\"] = requirements_extras[\"x\"] + requirements_extras[\"dev\"]\n\n\nif __name__ == '__main__':\nsetup(\nname='kornia',\nversion=VERSION,\nauthor='Edgar Riba',\nauthor_email='edgar@kornia.org',\nurl='https:\/\/www.kornia.org',\ndownload_url='https:\/\/github.com\/kornia\/kornia',\nlicense='Apache License 2.0',\ndescription='Open Source Differentiable Computer Vision Library for PyTorch',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\npython_requires='>=3.6',\nsetup_requires=['pytest-runner'],\ntests_require=['pytest'],\npackages=find_packages(exclude=('docs', 'test', 'examples')),\npackage_data={\"kornia\": [\"py.typed\"]},\ndata_files=[('', ['requirements\/x.txt', 'requirements\/dev.txt'])],\nzip_safe=True,\ninstall_requires=requirements,\nextras_require=requirements_extras,\nkeywords=['computer vision', 'deep learning', 'pytorch'],\nproject_urls={\n\"Bug Tracker\": \"https:\/\/github.com\/kornia\/kornia\/issues\",\n\"Documentation\": \"https:\/\/kornia.readthedocs.io\/en\/latest\",\n\"Source Code\": \"https:\/\/github.com\/kornia\/kornia\",\n},\nclassifiers=[\n'Environment :: GPU',\n'Environment :: Console',\n'Natural Language :: English',\n# How mature is this project? Common values are\n# 3 - Alpha, 4 - Beta, 5 - Production\/Stable\n'Development Status :: 4 - Beta',\n# Indicate who your project is intended for\n'Intended Audience :: Developers',\n'Intended Audience :: Education',\n'Intended Audience :: Science\/Research',\n'Intended Audience :: Information Technology',\n'Topic :: Software Development :: Libraries',\n'Topic :: Scientific\/Engineering :: Artificial Intelligence',\n'Topic :: Scientific\/Engineering :: Image Processing',\n# Pick your license as you wish\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: OS Independent',\n# Specify the Python versions you support here. In particular, ensure\n# that you indicate whether you support Python 2, Python 3 or both.\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n],\n)\n"
    },
    {
        "package_name": "kubernetes-24.2.0",
        "file_list": "CHANGELOG.md code-of-conduct.md CONTRIBUTING.md admissionregistration_api.py admissionregistration_v1_api.py apiextensions_api.py apiextensions_v1_api.py apiregistration_api.py apiregistration_v1_api.py apis_api.py apps_api.py apps_v1_api.py authentication_api.py authentication_v1_api.py authorization_api.py authorization_v1_api.py autoscaling_api.py autoscaling_v1_api.py autoscaling_v2beta1_api.py autoscaling_v2beta2_api.py autoscaling_v2_api.py batch_api.py batch_v1beta1_api.py batch_v1_api.py certificates_api.py certificates_v1_api.py coordination_api.py coordination_v1_api.py core_api.py core_v1_api.py custom_objects_api.py discovery_api.py discovery_v1beta1_api.py discovery_v1_api.py events_api.py events_v1beta1_api.py events_v1_api.py flowcontrol_apiserver_api.py flowcontrol_apiserver_v1beta1_api.py flowcontrol_apiserver_v1beta2_api.py internal_apiserver_api.py internal_apiserver_v1alpha1_api.py logs_api.py networking_api.py networking_v1_api.py node_api.py node_v1beta1_api.py node_v1_api.py openid_api.py policy_api.py policy_v1beta1_api.py policy_v1_api.py rbac_authorization_api.py rbac_authorization_v1_api.py scheduling_api.py scheduling_v1_api.py storage_api.py storage_v1beta1_api.py storage_v1_api.py version_api.py well_known_api.py __init__.py __init__.py api_client.py configuration.py exceptions.py admissionregistration_v1_service_reference.py admissionregistration_v1_webhook_client_config.py apiextensions_v1_service_reference.py apiextensions_v1_webhook_client_config.py apiregistration_v1_service_reference.py authentication_v1_token_request.py core_v1_endpoint_port.py core_v1_event.py core_v1_event_list.py core_v1_event_series.py discovery_v1_endpoint_port.py events_v1_event.py events_v1_event_list.py events_v1_event_series.py storage_v1_token_request.py v1alpha1_server_storage_version.py v1alpha1_storage_version.py v1alpha1_storage_version_condition.py v1alpha1_storage_version_list.py v1alpha1_storage_version_status.py v1beta1_allowed_csi_driver.py v1beta1_allowed_flex_volume.py v1beta1_allowed_host_path.py v1beta1_cron_job.py v1beta1_cron_job_list.py v1beta1_cron_job_spec.py v1beta1_cron_job_status.py v1beta1_csi_storage_capacity.py v1beta1_csi_storage_capacity_list.py v1beta1_endpoint.py v1beta1_endpoint_conditions.py v1beta1_endpoint_hints.py v1beta1_endpoint_port.py v1beta1_endpoint_slice.py v1beta1_endpoint_slice_list.py v1beta1_event.py v1beta1_event_list.py v1beta1_event_series.py v1beta1_flow_distinguisher_method.py v1beta1_flow_schema.py v1beta1_flow_schema_condition.py v1beta1_flow_schema_list.py v1beta1_flow_schema_spec.py v1beta1_flow_schema_status.py v1beta1_for_zone.py v1beta1_fs_group_strategy_options.py v1beta1_group_subject.py v1beta1_host_port_range.py v1beta1_id_range.py v1beta1_job_template_spec.py v1beta1_limited_priority_level_configuration.py v1beta1_limit_response.py v1beta1_non_resource_policy_rule.py v1beta1_overhead.py v1beta1_pod_disruption_budget.py v1beta1_pod_disruption_budget_list.py v1beta1_pod_disruption_budget_spec.py v1beta1_pod_disruption_budget_status.py v1beta1_pod_security_policy.py v1beta1_pod_security_policy_list.py v1beta1_pod_security_policy_spec.py v1beta1_policy_rules_with_subjects.py v1beta1_priority_level_configuration.py v1beta1_priority_level_configuration_condition.py v1beta1_priority_level_configuration_list.py v1beta1_priority_level_configuration_reference.py v1beta1_priority_level_configuration_spec.py v1beta1_priority_level_configuration_status.py v1beta1_queuing_configuration.py v1beta1_resource_policy_rule.py v1beta1_runtime_class.py v1beta1_runtime_class_list.py v1beta1_runtime_class_strategy_options.py v1beta1_run_as_group_strategy_options.py v1beta1_run_as_user_strategy_options.py v1beta1_scheduling.py v1beta1_service_account_subject.py v1beta1_se_linux_strategy_options.py v1beta1_subject.py v1beta1_supplemental_groups_strategy_options.py v1beta1_user_subject.py v1beta2_flow_distinguisher_method.py v1beta2_flow_schema.py v1beta2_flow_schema_condition.py v1beta2_flow_schema_list.py v1beta2_flow_schema_spec.py v1beta2_flow_schema_status.py v1beta2_group_subject.py v1beta2_limited_priority_level_configuration.py v1beta2_limit_response.py v1beta2_non_resource_policy_rule.py v1beta2_policy_rules_with_subjects.py v1beta2_priority_level_configuration.py v1beta2_priority_level_configuration_condition.py v1beta2_priority_level_configuration_list.py v1beta2_priority_level_configuration_reference.py v1beta2_priority_level_configuration_spec.py v1beta2_priority_level_configuration_status.py v1beta2_queuing_configuration.py v1beta2_resource_policy_rule.py v1beta2_service_account_subject.py v1beta2_subject.py v1beta2_user_subject.py v1_affinity.py v1_aggregation_rule.py v1_api_group.py v1_api_group_list.py v1_api_resource.py v1_api_resource_list.py v1_api_service.py v1_api_service_condition.py v1_api_service_list.py v1_api_service_spec.py v1_api_service_status.py v1_api_versions.py v1_attached_volume.py v1_aws_elastic_block_store_volume_source.py v1_azure_disk_volume_source.py v1_azure_file_persistent_volume_source.py v1_azure_file_volume_source.py v1_binding.py v1_bound_object_reference.py v1_capabilities.py v1_ceph_fs_persistent_volume_source.py v1_ceph_fs_volume_source.py v1_certificate_signing_request.py v1_certificate_signing_request_condition.py v1_certificate_signing_request_list.py v1_certificate_signing_request_spec.py v1_certificate_signing_request_status.py v1_cinder_persistent_volume_source.py v1_cinder_volume_source.py v1_client_ip_config.py v1_cluster_role.py v1_cluster_role_binding.py v1_cluster_role_binding_list.py v1_cluster_role_list.py v1_component_condition.py v1_component_status.py v1_component_status_list.py v1_condition.py v1_config_map.py v1_config_map_env_source.py v1_config_map_key_selector.py v1_config_map_list.py v1_config_map_node_config_source.py v1_config_map_projection.py v1_config_map_volume_source.py v1_container.py v1_container_image.py v1_container_port.py v1_container_state.py v1_container_state_running.py v1_container_state_terminated.py v1_container_state_waiting.py v1_container_status.py v1_controller_revision.py v1_controller_revision_list.py v1_cron_job.py v1_cron_job_list.py v1_cron_job_spec.py v1_cron_job_status.py v1_cross_version_object_reference.py v1_csi_driver.py v1_csi_driver_list.py v1_csi_driver_spec.py v1_csi_node.py v1_csi_node_driver.py v1_csi_node_list.py v1_csi_node_spec.py v1_csi_persistent_volume_source.py v1_csi_storage_capacity.py v1_csi_storage_capacity_list.py v1_csi_volume_source.py v1_custom_resource_column_definition.py v1_custom_resource_conversion.py v1_custom_resource_definition.py v1_custom_resource_definition_condition.py v1_custom_resource_definition_list.py v1_custom_resource_definition_names.py v1_custom_resource_definition_spec.py v1_custom_resource_definition_status.py v1_custom_resource_definition_version.py v1_custom_resource_subresources.py v1_custom_resource_subresource_scale.py v1_custom_resource_validation.py v1_daemon_endpoint.py v1_daemon_set.py v1_daemon_set_condition.py v1_daemon_set_list.py v1_daemon_set_spec.py v1_daemon_set_status.py v1_daemon_set_update_strategy.py v1_delete_options.py v1_deployment.py v1_deployment_condition.py v1_deployment_list.py v1_deployment_spec.py v1_deployment_status.py v1_deployment_strategy.py v1_downward_api_projection.py v1_downward_api_volume_file.py v1_downward_api_volume_source.py v1_empty_dir_volume_source.py v1_endpoint.py v1_endpoints.py v1_endpoints_list.py v1_endpoint_address.py v1_endpoint_conditions.py v1_endpoint_hints.py v1_endpoint_slice.py v1_endpoint_slice_list.py v1_endpoint_subset.py v1_env_from_source.py v1_env_var.py v1_env_var_source.py v1_ephemeral_container.py v1_ephemeral_volume_source.py v1_event_source.py v1_eviction.py v1_exec_action.py v1_external_documentation.py v1_fc_volume_source.py v1_flex_persistent_volume_source.py v1_flex_volume_source.py v1_flocker_volume_source.py v1_for_zone.py v1_gce_persistent_disk_volume_source.py v1_git_repo_volume_source.py v1_glusterfs_persistent_volume_source.py v1_glusterfs_volume_source.py v1_group_version_for_discovery.py v1_grpc_action.py v1_horizontal_pod_autoscaler.py v1_horizontal_pod_autoscaler_list.py v1_horizontal_pod_autoscaler_spec.py v1_horizontal_pod_autoscaler_status.py v1_host_alias.py v1_host_path_volume_source.py v1_http_get_action.py v1_http_header.py v1_http_ingress_path.py v1_http_ingress_rule_value.py v1_ingress.py v1_ingress_backend.py v1_ingress_class.py v1_ingress_class_list.py v1_ingress_class_parameters_reference.py v1_ingress_class_spec.py v1_ingress_list.py v1_ingress_rule.py v1_ingress_service_backend.py v1_ingress_spec.py v1_ingress_status.py v1_ingress_tls.py v1_ip_block.py v1_iscsi_persistent_volume_source.py v1_iscsi_volume_source.py v1_job.py v1_job_condition.py v1_job_list.py v1_job_spec.py v1_job_status.py v1_job_template_spec.py v1_json_schema_props.py v1_key_to_path.py v1_label_selector.py v1_label_selector_requirement.py v1_lease.py v1_lease_list.py v1_lease_spec.py v1_lifecycle.py v1_lifecycle_handler.py v1_limit_range.py v1_limit_range_item.py v1_limit_range_list.py v1_limit_range_spec.py v1_list_meta.py v1_load_balancer_ingress.py v1_load_balancer_status.py v1_local_object_reference.py v1_local_subject_access_review.py v1_local_volume_source.py v1_managed_fields_entry.py v1_mutating_webhook.py v1_mutating_webhook_configuration.py v1_mutating_webhook_configuration_list.py v1_namespace.py v1_namespace_condition.py v1_namespace_list.py v1_namespace_spec.py v1_namespace_status.py v1_network_policy.py v1_network_policy_egress_rule.py v1_network_policy_ingress_rule.py v1_network_policy_list.py v1_network_policy_peer.py v1_network_policy_port.py v1_network_policy_spec.py v1_network_policy_status.py v1_nfs_volume_source.py v1_node.py v1_node_address.py v1_node_affinity.py v1_node_condition.py v1_node_config_source.py v1_node_config_status.py v1_node_daemon_endpoints.py v1_node_list.py v1_node_selector.py v1_node_selector_requirement.py v1_node_selector_term.py v1_node_spec.py v1_node_status.py v1_node_system_info.py v1_non_resource_attributes.py v1_non_resource_rule.py v1_object_field_selector.py v1_object_meta.py v1_object_reference.py v1_overhead.py v1_owner_reference.py v1_persistent_volume.py v1_persistent_volume_claim.py v1_persistent_volume_claim_condition.py v1_persistent_volume_claim_list.py v1_persistent_volume_claim_spec.py v1_persistent_volume_claim_status.py v1_persistent_volume_claim_template.py v1_persistent_volume_claim_volume_source.py v1_persistent_volume_list.py v1_persistent_volume_spec.py v1_persistent_volume_status.py v1_photon_persistent_disk_volume_source.py v1_pod.py v1_pod_affinity.py v1_pod_affinity_term.py v1_pod_anti_affinity.py v1_pod_condition.py v1_pod_disruption_budget.py v1_pod_disruption_budget_list.py v1_pod_disruption_budget_spec.py v1_pod_disruption_budget_status.py v1_pod_dns_config.py v1_pod_dns_config_option.py v1_pod_ip.py v1_pod_list.py v1_pod_os.py v1_pod_readiness_gate.py v1_pod_security_context.py v1_pod_spec.py v1_pod_status.py v1_pod_template.py v1_pod_template_list.py v1_pod_template_spec.py v1_policy_rule.py v1_portworx_volume_source.py v1_port_status.py v1_preconditions.py v1_preferred_scheduling_term.py v1_priority_class.py v1_priority_class_list.py v1_probe.py v1_projected_volume_source.py v1_quobyte_volume_source.py v1_rbd_persistent_volume_source.py v1_rbd_volume_source.py v1_replication_controller.py v1_replication_controller_condition.py v1_replication_controller_list.py v1_replication_controller_spec.py v1_replication_controller_status.py v1_replica_set.py v1_replica_set_condition.py v1_replica_set_list.py v1_replica_set_spec.py v1_replica_set_status.py v1_resource_attributes.py v1_resource_field_selector.py v1_resource_quota.py v1_resource_quota_list.py v1_resource_quota_spec.py v1_resource_quota_status.py v1_resource_requirements.py v1_resource_rule.py v1_role.py v1_role_binding.py v1_role_binding_list.py v1_role_list.py v1_role_ref.py v1_rolling_update_daemon_set.py v1_rolling_update_deployment.py v1_rolling_update_stateful_set_strategy.py v1_rule_with_operations.py v1_runtime_class.py v1_runtime_class_list.py v1_scale.py v1_scale_io_persistent_volume_source.py v1_scale_io_volume_source.py v1_scale_spec.py v1_scale_status.py v1_scheduling.py v1_scoped_resource_selector_requirement.py v1_scope_selector.py v1_seccomp_profile.py v1_secret.py v1_secret_env_source.py v1_secret_key_selector.py v1_secret_list.py v1_secret_projection.py v1_secret_reference.py v1_secret_volume_source.py v1_security_context.py v1_self_subject_access_review.py v1_self_subject_access_review_spec.py v1_self_subject_rules_review.py v1_self_subject_rules_review_spec.py v1_server_address_by_client_cidr.py v1_service.py v1_service_account.py v1_service_account_list.py v1_service_account_token_projection.py v1_service_backend_port.py v1_service_list.py v1_service_port.py v1_service_spec.py v1_service_status.py v1_session_affinity_config.py v1_se_linux_options.py v1_stateful_set.py v1_stateful_set_condition.py v1_stateful_set_list.py v1_stateful_set_persistent_volume_claim_retention_policy. v1_stateful_set_persistent_volume_claim_retention_policy.py v1_stateful_set_spec.py v1_stateful_set_status.py v1_stateful_set_update_strategy.py v1_status.py v1_status_cause.py v1_status_details.py v1_storage_class.py v1_storage_class_list.py v1_storage_os_persistent_volume_source.py v1_storage_os_volume_source.py v1_subject.py v1_subject_access_review.py v1_subject_access_review_spec.py v1_subject_access_review_status.py v1_subject_rules_review_status.py v1_sysctl.py v1_taint.py v1_tcp_socket_action.py v1_token_request_spec.py v1_token_request_status.py v1_token_review.py v1_token_review_spec.py v1_token_review_status.py v1_toleration.py v1_topology_selector_label_requirement.py v1_topology_selector_term.py v1_topology_spread_constraint.py v1_typed_local_object_reference.py v1_uncounted_terminated_pods.py v1_user_info.py v1_validating_webhook.py v1_validating_webhook_configuration.py v1_validating_webhook_configuration_list.py v1_validation_rule.py v1_volume.py v1_volume_attachment.py v1_volume_attachment_list.py v1_volume_attachment_source.py v1_volume_attachment_spec.py v1_volume_attachment_status.py v1_volume_device.py v1_volume_error.py v1_volume_mount.py v1_volume_node_affinity.py v1_volume_node_resources.py v1_volume_projection.py v1_vsphere_virtual_disk_volume_source.py v1_watch_event.py v1_webhook_conversion.py v1_weighted_pod_affinity_term.py v1_windows_security_context_options.py v2beta1_container_resource_metric_source.py v2beta1_container_resource_metric_status.py v2beta1_cross_version_object_reference.py v2beta1_external_metric_source.py v2beta1_external_metric_status.py v2beta1_horizontal_pod_autoscaler.py v2beta1_horizontal_pod_autoscaler_condition.py v2beta1_horizontal_pod_autoscaler_list.py v2beta1_horizontal_pod_autoscaler_spec.py v2beta1_horizontal_pod_autoscaler_status.py v2beta1_metric_spec.py v2beta1_metric_status.py v2beta1_object_metric_source.py v2beta1_object_metric_status.py v2beta1_pods_metric_source.py v2beta1_pods_metric_status.py v2beta1_resource_metric_source.py v2beta1_resource_metric_status.py v2beta2_container_resource_metric_source.py v2beta2_container_resource_metric_status.py v2beta2_cross_version_object_reference.py v2beta2_external_metric_source.py v2beta2_external_metric_status.py v2beta2_horizontal_pod_autoscaler.py v2beta2_horizontal_pod_autoscaler_behavior.py v2beta2_horizontal_pod_autoscaler_condition.py v2beta2_horizontal_pod_autoscaler_list.py v2beta2_horizontal_pod_autoscaler_spec.py v2beta2_horizontal_pod_autoscaler_status.py v2beta2_hpa_scaling_policy.py v2beta2_hpa_scaling_rules.py v2beta2_metric_identifier.py v2beta2_metric_spec.py v2beta2_metric_status.py v2beta2_metric_target.py v2beta2_metric_value_status.py v2beta2_object_metric_source.py v2beta2_object_metric_status.py v2beta2_pods_metric_source.py v2beta2_pods_metric_status.py v2beta2_resource_metric_source.py v2beta2_resource_metric_status.py v2_container_resource_metric_source.py v2_container_resource_metric_status.py v2_cross_version_object_reference.py v2_external_metric_source.py v2_external_metric_status.py v2_horizontal_pod_autoscaler.py v2_horizontal_pod_autoscaler_behavior.py v2_horizontal_pod_autoscaler_condition.py v2_horizontal_pod_autoscaler_list.py v2_horizontal_pod_autoscaler_spec.py v2_horizontal_pod_autoscaler_status.py v2_hpa_scaling_policy.py v2_hpa_scaling_rules.py v2_metric_identifier.py v2_metric_spec.py v2_metric_status.py v2_metric_target.py v2_metric_value_status.py v2_object_metric_source.py v2_object_metric_status.py v2_pods_metric_source.py v2_pods_metric_status.py v2_resource_metric_source.py v2_resource_metric_status.py version_info.py __init__.py rest.py __init__.py config_exception.py dateutil.py dateutil_test.py exec_provider.py exec_provider_test.py incluster_config.py incluster_config_test.py kube_config.py kube_config_test.py __init__.py client.py discovery.py exceptions.py resource.py test_client.py test_discovery.py __init__.py electionconfig.py example.py leaderelection.py leaderelectionrecord.py leaderelection_test.py configmaplock.py __init__.py __init__.py stream.py ws_client.py ws_client_test.py __init__.py create_from_yaml.py quantity.py __init__.py watch.py watch_test.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in OWNERS PKG-INFO README.md requirements.txt setup.cfg setup.py test-requirements.txt tox.ini",
        "setup.py": "# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import setup\n\n# Do not edit these constants. They will be updated automatically\n# by scripts\/update-client.sh.\nCLIENT_VERSION = \"24.2.0\"\nPACKAGE_NAME = \"kubernetes\"\nDEVELOPMENT_STATUS = \"5 - Production\/Stable\"\n\n# To install the library, run the following\n#\n# python setup.py install\n#\n# prerequisite: setuptools\n# http:\/\/pypi.python.org\/pypi\/setuptools\n\nEXTRAS = {\n'adal': ['adal>=1.0.2']\n}\nREQUIRES = []\nwith open('requirements.txt') as f:\nfor line in f:\nline, _, _ = line.partition('#')\nline = line.strip()\nif ';' in line:\nrequirement, _, specifier = line.partition(';')\nfor_specifier = EXTRAS.setdefault(':{}'.format(specifier), [])\nfor_specifier.append(requirement)\nelse:\nREQUIRES.append(line)\n\nwith open('test-requirements.txt') as f:\nTESTS_REQUIRES = f.readlines()\n\nsetup(\nname=PACKAGE_NAME,\nversion=CLIENT_VERSION,\ndescription=\"Kubernetes python client\",\nauthor_email=\"\",\nauthor=\"Kubernetes\",\nlicense=\"Apache License Version 2.0\",\nurl=\"https:\/\/github.com\/kubernetes-client\/python\",\nkeywords=[\"Swagger\", \"OpenAPI\", \"Kubernetes\"],\ninstall_requires=REQUIRES,\ntests_require=TESTS_REQUIRES,\nextras_require=EXTRAS,\npackages=['kubernetes', 'kubernetes.client', 'kubernetes.config',\n'kubernetes.watch', 'kubernetes.client.api',\n'kubernetes.stream', 'kubernetes.client.models',\n'kubernetes.utils', 'kubernetes.client.apis',\n'kubernetes.dynamic', 'kubernetes.leaderelection',\n'kubernetes.leaderelection.resourcelock'],\ninclude_package_data=True,\nlong_description=\"Python client for kubernetes http:\/\/kubernetes.io\/\",\npython_requires='>=3.6',\nclassifiers=[\n\"Development Status :: %s\" % DEVELOPMENT_STATUS,\n\"Topic :: Utilities\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Information Technology\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\n)\n"
    },
    {
        "package_name": "kubernetes_asyncio-24.2.0",
        "file_list": "CHANGELOG.md CONTRIBUTING.md admissionregistration_api.py admissionregistration_v1alpha1_api.py admissionregistration_v1beta1_api.py admissionregistration_v1_api.py apiextensions_api.py apiextensions_v1beta1_api.py apiextensions_v1_api.py apiregistration_api.py apiregistration_v1beta1_api.py apiregistration_v1_api.py apis_api.py apps_api.py apps_v1beta1_api.py apps_v1beta2_api.py apps_v1_api.py auditregistration_api.py auditregistration_v1alpha1_api.py authentication_api.py authentication_v1beta1_api.py authentication_v1_api.py authorization_api.py authorization_v1beta1_api.py authorization_v1_api.py autoscaling_api.py autoscaling_v1_api.py autoscaling_v2beta1_api.py autoscaling_v2beta2_api.py autoscaling_v2_api.py batch_api.py batch_v1beta1_api.py batch_v1_api.py batch_v2alpha1_api.py certificates_api.py certificates_v1beta1_api.py certificates_v1_api.py coordination_api.py coordination_v1beta1_api.py coordination_v1_api.py core_api.py core_v1_api.py custom_objects_api.py discovery_api.py discovery_v1alpha1_api.py discovery_v1beta1_api.py discovery_v1_api.py events_api.py events_v1beta1_api.py events_v1_api.py extensions_api.py extensions_v1beta1_api.py flowcontrol_apiserver_api.py flowcontrol_apiserver_v1alpha1_api.py flowcontrol_apiserver_v1beta1_api.py flowcontrol_apiserver_v1beta2_api.py internal_apiserver_api.py internal_apiserver_v1alpha1_api.py logs_api.py networking_api.py networking_v1beta1_api.py networking_v1_api.py node_api.py node_v1alpha1_api.py node_v1beta1_api.py node_v1_api.py openid_api.py policy_api.py policy_v1beta1_api.py policy_v1_api.py rbac_authorization_api.py rbac_authorization_v1alpha1_api.py rbac_authorization_v1beta1_api.py rbac_authorization_v1_api.py scheduling_api.py scheduling_v1alpha1_api.py scheduling_v1beta1_api.py scheduling_v1_api.py settings_api.py settings_v1alpha1_api.py storage_api.py storage_v1alpha1_api.py storage_v1beta1_api.py storage_v1_api.py version_api.py well_known_api.py __init__.py api_client.py configuration.py exceptions.py admissionregistration_v1_service_reference.py admissionregistration_v1_webhook_client_config.py apiextensions_v1_service_reference.py apiextensions_v1_webhook_client_config.py apiregistration_v1_service_reference.py authentication_v1_token_request.py core_v1_endpoint_port.py core_v1_event.py core_v1_event_list.py core_v1_event_series.py discovery_v1_endpoint_port.py events_v1_event.py events_v1_event_list.py events_v1_event_series.py storage_v1_token_request.py v1alpha1_server_storage_version.py v1alpha1_storage_version.py v1alpha1_storage_version_condition.py v1alpha1_storage_version_list.py v1alpha1_storage_version_status.py v1beta1_allowed_csi_driver.py v1beta1_allowed_flex_volume.py v1beta1_allowed_host_path.py v1beta1_cron_job.py v1beta1_cron_job_list.py v1beta1_cron_job_spec.py v1beta1_cron_job_status.py v1beta1_csi_storage_capacity.py v1beta1_csi_storage_capacity_list.py v1beta1_endpoint.py v1beta1_endpoint_conditions.py v1beta1_endpoint_hints.py v1beta1_endpoint_port.py v1beta1_endpoint_slice.py v1beta1_endpoint_slice_list.py v1beta1_event.py v1beta1_event_list.py v1beta1_event_series.py v1beta1_flow_distinguisher_method.py v1beta1_flow_schema.py v1beta1_flow_schema_condition.py v1beta1_flow_schema_list.py v1beta1_flow_schema_spec.py v1beta1_flow_schema_status.py v1beta1_for_zone.py v1beta1_fs_group_strategy_options.py v1beta1_group_subject.py v1beta1_host_port_range.py v1beta1_id_range.py v1beta1_job_template_spec.py v1beta1_limited_priority_level_configuration.py v1beta1_limit_response.py v1beta1_non_resource_policy_rule.py v1beta1_overhead.py v1beta1_pod_disruption_budget.py v1beta1_pod_disruption_budget_list.py v1beta1_pod_disruption_budget_spec.py v1beta1_pod_disruption_budget_status.py v1beta1_pod_security_policy.py v1beta1_pod_security_policy_list.py v1beta1_pod_security_policy_spec.py v1beta1_policy_rules_with_subjects.py v1beta1_priority_level_configuration.py v1beta1_priority_level_configuration_condition.py v1beta1_priority_level_configuration_list v1beta1_priority_level_configuration_reference.py v1beta1_priority_level_configuration_spec.py v1beta1_priority_level_configuration_status.py v1beta1_queuing_configuration.py v1beta1_resource_policy_rule.py v1beta1_runtime_class.py v1beta1_runtime_class_list.py v1beta1_runtime_class_strategy_options.py v1beta1_run_as_group_strategy_options.py v1beta1_run_as_user_strategy_options.py v1beta1_scheduling.py v1beta1_service_account_subject.py v1beta1_se_linux_strategy_options.py v1beta1_subject.py v1beta1_supplemental_groups_strategy_options.py v1beta1_user_subject.py v1beta2_flow_distinguisher_method.py v1beta2_flow_schema.py v1beta2_flow_schema_condition.py v1beta2_flow_schema_list.py v1beta2_flow_schema_spec.py v1beta2_flow_schema_status.py v1beta2_group_subject.py v1beta2_limited_priority_level_configuration.py v1beta2_limit_response.py v1beta2_non_resource_policy_rule.py v1beta2_policy_rules_with_subjects.py v1beta2_priority_level_configuration.py v1beta2_priority_level_configuration_condition.py v1beta2_priority_level_configuration_list.py v1beta2_priority_level_configuration_reference.py v1beta2_priority_level_configuration_spec.py v1beta2_priority_level_configuration_stat v1beta2_queuing_configuration.py v1beta2_resource_policy_rule.py v1beta2_service_account_subject.py v1beta2_subject.py v1beta2_user_subject.py v1_affinity.py v1_aggregation_rule.py v1_api_group.py v1_api_group_list.py v1_api_resource.py v1_api_resource_list.py v1_api_service.py v1_api_service_condition.py v1_api_service_list.py v1_api_service_spec.py v1_api_service_status.py v1_api_versions.py v1_attached_volume.py v1_aws_elastic_block_store_volume_source. v1_azure_disk_volume_source.py v1_azure_file_persistent_volume_source.py v1_azure_file_volume_source.py v1_binding.py v1_bound_object_reference.py v1_capabilities.py v1_ceph_fs_persistent_volume_source.py v1_ceph_fs_volume_source.py v1_certificate_signing_request.py v1_certificate_signing_request_condition. v1_certificate_signing_request_list.py v1_certificate_signing_request_spec.py v1_certificate_signing_request_status.py v1_cinder_persistent_volume_source.py v1_cinder_volume_source.py v1_client_ip_config.py v1_cluster_role.py v1_cluster_role_binding.py v1_cluster_role_binding_list.py v1_cluster_role_list.py v1_component_condition.py v1_component_status.py v1_component_status_list.py v1_condition.py v1_config_map.py v1_config_map_env_source.py v1_config_map_key_selector.py v1_config_map_list.py v1_config_map_node_config_source.py v1_config_map_projection.py v1_config_map_volume_source.py v1_container.py v1_container_image.py v1_container_port.py v1_container_state.py v1_container_state_running.py v1_container_state_terminated.py v1_container_state_waiting.py v1_container_status.py v1_controller_revision.py v1_controller_revision_list.py v1_cron_job.py v1_cron_job_list.py v1_cron_job_spec.py v1_cron_job_status.py v1_cross_version_object_reference.py v1_csi_driver.py v1_csi_driver_list.py v1_csi_driver_spec.py v1_csi_node.py v1_csi_node_driver.py v1_csi_node_list.py v1_csi_node_spec.py v1_csi_persistent_volume_source.py v1_csi_storage_capacity.py v1_csi_storage_capacity_list.py v1_csi_volume_source.py v1_custom_resource_column_definition.py v1_custom_resource_conversion.py v1_custom_resource_definition.py v1_custom_resource_definition_condition.py v1_custom_resource_definition_list.py v1_custom_resource_definition_names.py v1_custom_resource_definition_spec.py v1_custom_resource_definition_status.py v1_custom_resource_definition_version.py v1_custom_resource_subresources.py v1_custom_resource_subresource_scale.py v1_custom_resource_validation.py v1_daemon_endpoint.py v1_daemon_set.py v1_daemon_set_condition.py v1_daemon_set_list.py v1_daemon_set_spec.py v1_daemon_set_status.py v1_daemon_set_update_strategy.py v1_delete_options.py v1_deployment.py v1_deployment_condition.py v1_deployment_list.py v1_deployment_spec.py v1_deployment_status.py v1_deployment_strategy.py v1_downward_api_projection.py v1_downward_api_volume_file.py v1_downward_api_volume_source.py v1_empty_dir_volume_source.py v1_endpoint.py v1_endpoints.py v1_endpoints_list.py v1_endpoint_address.py v1_endpoint_conditions.py v1_endpoint_hints.py v1_endpoint_slice.py v1_endpoint_slice_list.py v1_endpoint_subset.py v1_env_from_source.py v1_env_var.py v1_env_var_source.py v1_ephemeral_container.py v1_ephemeral_volume_source.py v1_event_source.py v1_eviction.py v1_exec_action.py v1_external_documentation.py v1_fc_volume_source.py v1_flex_persistent_volume_source.py v1_flex_volume_source.py v1_flocker_volume_source.py v1_for_zone.py v1_gce_persistent_disk_volume_source.py v1_git_repo_volume_source.py v1_glusterfs_persistent_volume_source.py v1_glusterfs_volume_source.py v1_group_version_for_discovery.py v1_grpc_action.py v1_horizontal_pod_autoscaler.py v1_horizontal_pod_autoscaler_list.py v1_horizontal_pod_autoscaler_spec.py v1_horizontal_pod_autoscaler_status.py v1_host_alias.py v1_host_path_volume_source.py v1_http_get_action.py v1_http_header.py v1_http_ingress_path.py v1_http_ingress_rule_value.py v1_ingress.py v1_ingress_backend.py v1_ingress_class.py v1_ingress_class_list.py v1_ingress_class_parameters_reference.py v1_ingress_class_spec.py v1_ingress_list.py v1_ingress_rule.py v1_ingress_service_backend.py v1_ingress_spec.py v1_ingress_status.py v1_ingress_tls.py v1_ip_block.py v1_iscsi_persistent_volume_source.py v1_iscsi_volume_source.py v1_job.py v1_job_condition.py v1_job_list.py v1_job_spec.py v1_job_status.py v1_job_template_spec.py v1_json_schema_props.py v1_key_to_path.py v1_label_selector.py v1_label_selector_requirement.py v1_lease.py v1_lease_list.py v1_lease_spec.py v1_lifecycle.py v1_lifecycle_handler.py v1_limit_range.py v1_limit_range_item.py v1_limit_range_list.py v1_limit_range_spec.py v1_list_meta.py v1_load_balancer_ingress.py v1_load_balancer_status.py v1_local_object_reference.py v1_local_subject_access_review.py v1_local_volume_source.py v1_managed_fields_entry.py v1_mutating_webhook.py v1_mutating_webhook_configuration.py v1_mutating_webhook_configuration_list.py v1_namespace.py v1_namespace_condition.py v1_namespace_list.py v1_namespace_spec.py v1_namespace_status.py v1_network_policy.py v1_network_policy_egress_rule.py v1_network_policy_ingress_rule.py v1_network_policy_list.py v1_network_policy_peer.py v1_network_policy_port.py v1_network_policy_spec.py v1_network_policy_status.py v1_nfs_volume_source.py v1_node.py v1_node_address.py v1_node_affinity.py v1_node_condition.py v1_node_config_source.py v1_node_config_status.py v1_node_daemon_endpoints.py v1_node_list.py v1_node_selector.py v1_node_selector_requirement.py v1_node_selector_term.py v1_node_spec.py v1_node_status.py v1_node_system_info.py v1_non_resource_attributes.py v1_non_resource_rule.py v1_object_field_selector.py v1_object_meta.py v1_object_reference.py v1_overhead.py v1_owner_reference.py v1_persistent_volume.py v1_persistent_volume_claim.py v1_persistent_volume_claim_condition.py v1_persistent_volume_claim_list.py v1_persistent_volume_claim_spec.py v1_persistent_volume_claim_status.py v1_persistent_volume_claim_template.py v1_persistent_volume_claim_volume_source. v1_persistent_volume_list.py v1_persistent_volume_spec.py v1_persistent_volume_status.py v1_photon_persistent_disk_volume_source.py v1_pod.py v1_pod_affinity.py v1_pod_affinity_term.py v1_pod_anti_affinity.py v1_pod_condition.py v1_pod_disruption_budget.py v1_pod_disruption_budget_list.py v1_pod_disruption_budget_spec.py v1_pod_disruption_budget_status.py v1_pod_dns_config.py v1_pod_dns_config_option.py v1_pod_ip.py v1_pod_list.py v1_pod_os.py v1_pod_readiness_gate.py v1_pod_security_context.py v1_pod_spec.py v1_pod_status.py v1_pod_template.py v1_pod_template_list.py v1_pod_template_spec.py v1_policy_rule.py v1_portworx_volume_source.py v1_port_status.py v1_preconditions.py v1_preferred_scheduling_term.py v1_priority_class.py v1_priority_class_list.py v1_probe.py v1_projected_volume_source.py v1_quobyte_volume_source.py v1_rbd_persistent_volume_source.py v1_rbd_volume_source.py v1_replication_controller.py v1_replication_controller_condition.py v1_replication_controller_list.py v1_replication_controller_spec.py v1_replication_controller_status.py v1_replica_set.py v1_replica_set_condition.py v1_replica_set_list.py v1_replica_set_spec.py v1_replica_set_status.py v1_resource_attributes.py v1_resource_field_selector.py v1_resource_quota.py v1_resource_quota_list.py v1_resource_quota_spec.py v1_resource_quota_status.py v1_resource_requirements.py v1_resource_rule.py v1_role.py v1_role_binding.py v1_role_binding_list.py v1_role_list.py v1_role_ref.py v1_rolling_update_daemon_set.py v1_rolling_update_deployment.py v1_rolling_update_stateful_set_strategy.py v1_rule_with_operations.py v1_runtime_class.py v1_runtime_class_list.py v1_scale.py v1_scale_io_persistent_volume_source.py v1_scale_io_volume_source.py v1_scale_spec.py v1_scale_status.py v1_scheduling.py v1_scoped_resource_selector_requirement.py v1_scope_selector.py v1_seccomp_profile.py v1_secret.py v1_secret_env_source.py v1_secret_key_selector.py v1_secret_list.py v1_secret_projection.py v1_secret_reference.py v1_secret_volume_source.py v1_security_context.py v1_self_subject_access_review.py v1_self_subject_access_review_spec.py v1_self_subject_rules_review.py v1_self_subject_rules_review_spec.py v1_server_address_by_client_cidr.py v1_service.py v1_service_account.py v1_service_account_list.py v1_service_account_token_projection.py v1_service_backend_port.py v1_service_list.py v1_service_port.py v1_service_spec.py v1_service_status.py v1_session_affinity_config.py v1_se_linux_options.py v1_stateful_set.py v1_stateful_set_condition.py v1_stateful_set_list.py v1_stateful_set_persistent_volume_claim_retention_policy.py v1_stateful_set_spec.py v1_stateful_set_status.py v1_stateful_set_update_strategy.py v1_status.py v1_status_cause.py v1_status_details.py v1_storage_class.py v1_storage_class_list.py v1_storage_os_persistent_volume_source.py v1_storage_os_volume_source.py v1_subject.py v1_subject_access_review.py v1_subject_access_review_spec.py v1_subject_access_review_status.py v1_subject_rules_review_status.py v1_sysctl.py v1_taint.py v1_tcp_socket_action.py v1_token_request_spec.py v1_token_request_status.py v1_token_review.py v1_token_review_spec.py v1_token_review_status.py v1_toleration.py v1_topology_selector_label_requirement.py v1_topology_selector_term.py v1_topology_spread_constraint.py v1_typed_local_object_reference.py v1_uncounted_terminated_pods.py v1_user_info.py v1_validating_webhook.py v1_validating_webhook_configuration.py v1_validating_webhook_configuration_list. v1_validation_rule.py v1_volume.py v1_volume_attachment.py v1_volume_attachment_list.py v1_volume_attachment_source.py v1_volume_attachment_spec.py v1_volume_attachment_status.py v1_volume_device.py v1_volume_error.py v1_volume_mount.py v1_volume_node_affinity.py v1_volume_node_resources.py v1_volume_projection.py v1_vsphere_virtual_disk_volume_source.py v1_watch_event.py v1_webhook_conversion.py v1_weighted_pod_affinity_term.py v1_windows_security_context_options.py v2beta1_container_resource_metric_source. v2beta1_container_resource_metric_status. v2beta1_cross_version_object_reference.py v2beta1_external_metric_source.py v2beta1_external_metric_status.py v2beta1_horizontal_pod_autoscaler.py v2beta1_horizontal_pod_autoscaler_condition.py v2beta1_horizontal_pod_autoscaler_list.py v2beta1_horizontal_pod_autoscaler_spec.py v2beta1_horizontal_pod_autoscaler_status. v2beta1_metric_spec.py v2beta1_metric_status.py v2beta1_object_metric_source.py v2beta1_object_metric_status.py v2beta1_pods_metric_source.py v2beta1_pods_metric_status.py v2beta1_resource_metric_source.py v2beta1_resource_metric_status.py v2beta2_container_resource_metric_source. v2beta2_container_resource_metric_status. v2beta2_cross_version_object_reference.py v2beta2_external_metric_source.py v2beta2_external_metric_status.py v2beta2_horizontal_pod_autoscaler.py v2beta2_horizontal_pod_autoscaler_behavior.py v2beta2_horizontal_pod_autoscaler_condition.py v2beta2_horizontal_pod_autoscaler_list.py v2beta2_horizontal_pod_autoscaler_spec.py v2beta2_horizontal_pod_autoscaler_status. v2beta2_hpa_scaling_policy.py v2beta2_hpa_scaling_rules.py v2beta2_metric_identifier.py v2beta2_metric_spec.py v2beta2_metric_status.py v2beta2_metric_target.py v2beta2_metric_value_status.py v2beta2_object_metric_source.py v2beta2_object_metric_status.py v2beta2_pods_metric_source.py v2beta2_pods_metric_status.py v2beta2_resource_metric_source.py v2beta2_resource_metric_status.py v2_container_resource_metric_source.py v2_container_resource_metric_status.py v2_cross_version_object_reference.py v2_external_metric_source.py v2_external_metric_status.py v2_horizontal_pod_autoscaler.py v2_horizontal_pod_autoscaler_behavior.py v2_horizontal_pod_autoscaler_condition.py v2_horizontal_pod_autoscaler_list.py v2_horizontal_pod_autoscaler_spec.py v2_horizontal_pod_autoscaler_status.py v2_hpa_scaling_policy.py v2_hpa_scaling_rules.py v2_metric_identifier.py v2_metric_spec.py v2_metric_status.py v2_metric_target.py v2_metric_value_status.py v2_object_metric_source.py v2_object_metric_status.py v2_pods_metric_source.py v2_pods_metric_status.py v2_resource_metric_source.py v2_resource_metric_status.py version_info.py __init__.py rest.py __init__.py config_exception.py dateutil.py dateutil_test.py exec_provider.py exec_provider_test.py google_auth.py google_auth_test.py incluster_config.py incluster_config_test.py kube_config.py kube_config_test.py openid.py openid_test.py __init__.py ws_client.py ws_client_test.py __init__.py create_from_yaml.py create_from_yaml_test.py __init__.py watch.py watch_test.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md requirements.txt setup.cfg setup.py test-requirements.txt",
        "setup.py": "# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import setup\n\n# Do not edit these constants. They will be updated automatically\n# by scripts\/update-client.sh.\nCLIENT_VERSION = \"24.2.0\"\nPACKAGE_NAME = \"kubernetes_asyncio\"\nDEVELOPMENT_STATUS = \"5 - Production\/Stable\"\n\n# To install the library, run the following\n#\n# python setup.py install\n#\n# prerequisite: setuptools\n# http:\/\/pypi.python.org\/pypi\/setuptools\n\nwith open('requirements.txt') as f:\nREQUIRES = f.readlines()\n\nwith open('test-requirements.txt') as f:\nTESTS_REQUIRES = f.readlines()\n\nsetup(\nname=PACKAGE_NAME,\nversion=CLIENT_VERSION,\ndescription=\"Kubernetes asynchronous python client\",\nauthor_email=\"\",\nauthor=\"Kubernetes\",\nlicense=\"Apache License Version 2.0\",\nurl=\"https:\/\/github.com\/tomplus\/kubernetes_asyncio\",\nkeywords=[\n\"Swagger\",\n\"OpenAPI\",\n\"Kubernetes\"],\ninstall_requires=REQUIRES,\ntests_require=TESTS_REQUIRES,\npackages=[\n'kubernetes_asyncio',\n'kubernetes_asyncio.client',\n'kubernetes_asyncio.config',\n'kubernetes_asyncio.watch',\n'kubernetes_asyncio.client.api',\n'kubernetes_asyncio.stream',\n'kubernetes_asyncio.client.models',\n'kubernetes_asyncio.utils'],\ninclude_package_data=True,\nlong_description=\"\"\"\\\nPython client for kubernetes http:\/\/kubernetes.io\/\n\"\"\",\nclassifiers=[\n\"Development Status :: %s\" %\nDEVELOPMENT_STATUS,\n\"Topic :: Utilities\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Information Technology\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\n)\n"
    },
    {
        "package_name": "kubernetes-validate-1.24.0",
        "file_list": "LICENSE PKG-INFO README.md setup.cfg setup.py affin aggre all.j allow apigr apire apise apive attac awsel azure bindi capab cephf certi cinde clien clust compo confi conta contr cronj cross csipe custo daemo delet deplo downw empty endpo envfr envva event evict execa exter fcvol flexp flexv flock fsgro gcepe gitre glust group handl horiz hosta hostp httpg httph httpi idran info- ingre initi intor ipblo iscsi job-b jobco jobli jobsp jobst jobte json- jsons keyto label lifec limit listm loadb local metri micro mutat names netwo nfsvo node- nodea nodec noded nodel nodes nonre objec owner patch persi photo pod-v podaf podan podco poddi poddn podli podpr podse podsm podsp podst podte polic portw preco prefe prior probe proje quoby rawex rbdpe rbdvo repli resou role- roleb rolel roler rollb rolli rule- rulew runas scale secre secur selfs selin serve servi sessi state statu stora subje suppl taint tcpso time- token toler useri valid volum vsphe watch webho weigh _defi affinity-v1. aggregationr all.json allowedflexv allowedhostp apigroup-met apigrouplist apiresource- apiresourcel apiservice-a apiserviceco apiserviceli apiservicesp apiservicest apiversions- attachedvolu awselasticbl azurediskvol azurefileper azurefilevol binding-v1.j capabilities cephfspersis cephfsvolume certificates cinderpersis cindervolume clientipconf clusterrole- clusterroleb clusterrolel componentcon componentsta configmap-v1 configmapenv configmapkey configmaplis configmapnod configmappro configmapvol container-v1 containerima containerpor containersta controllerre cronjob-batc cronjoblist- cronjobspec- cronjobstatu crossversion csipersisten customresour daemonendpoi daemonset-ap daemonset-ex daemonsetcon daemonsetlis daemonsetspe daemonsetsta daemonsetupd deleteoption deployment-a deployment-e deploymentco deploymentli deploymentro deploymentsp deploymentst downwardapip downwardapiv emptydirvolu endpointaddr endpointport endpoints-v1 endpointslis endpointsubs envfromsourc envvar-v1.js envvarsource event-events event-v1.jso eventlist-ev eventlist-v1 eventseries- eventsource- eviction-pol execaction-v externaldocu externalmetr fcvolumesour flexpersiste flexvolumeso flockervolum fsgroupstrat gcepersisten gitrepovolum glusterfsvol groupversion handler-v1.j horizontalpo hostalias-v1 hostpathvolu hostportrang httpgetactio httpheader-v httpingressp httpingressr idrange-exte idrange-poli info-pkg-ver ingress-exte ingressbacke ingresslist- ingressrule- ingressspec- ingressstatu ingresstls-e initializer- initializerc initializers intorstring- ipblock-exte ipblock-netw iscsipersist iscsivolumes job-batch-v1 jobcondition joblist-batc jobspec-batc jobstatus-ba jobtemplates json-apiexte jsonschemapr keytopath-v1 labelselecto lifecycle-v1 limitrange-v limitrangeit limitrangeli limitrangesp listmeta-met loadbalancer localobjectr localsubject localvolumes metricspec-a metricstatus microtime-me mutatingwebh namespace-v1 namespacelis namespacespe namespacesta networkpolic nfsvolumesou node-v1.json nodeaddress- nodeaffinity nodeconditio nodeconfigso nodeconfigst nodedaemonen nodelist-v1. nodeselector nodespec-v1. nodestatus-v nodesystemin nonresourcea nonresourcer objectfields objectmeta-m objectmetric objectrefere ownerreferen patch-meta-v persistentvo photonpersis pod-v1.json podaffinity- podaffinityt podantiaffin podcondition poddisruptio poddnsconfig podlist-v1.j podpreset-se podpresetlis podpresetspe podreadiness podsecurityc podsecurityp podsmetricso podsmetricst podspec-v1.j podstatus-v1 podtemplate- podtemplatel podtemplates policyrule-r portworxvolu precondition preferredsch priorityclas probe-v1.jso projectedvol quobytevolum rawextension rbdpersisten rbdvolumesou replicaset-a replicaset-e replicasetco replicasetli replicasetsp replicasetst replicationc resourceattr resourcefiel resourcemetr resourcequot resourcerequ resourcerule role-rbac-v1 rolebinding- rolebindingl rolelist-rba roleref-rbac rollbackconf rollingupdat rule-admissi rulewithoper runasuserstr scale-apps-v scale-autosc scale-extens scaleiopersi scaleiovolum scalespec-ap scalespec-au scalespec-ex scalestatus- scopedresour scopeselecto secret-v1.js secretenvsou secretkeysel secretlist-v secretprojec secretrefere secretvolume securitycont selfsubjecta selfsubjectr selinuxoptio selinuxstrat serveraddres service-v1.j serviceaccou servicelist- serviceport- servicerefer servicespec- servicestatu sessionaffin statefulset- statefulsetc statefulsetl statefulsets statefulsetu status-meta- statuscause- statusdetail storageclass storageosper storageosvol subject-rbac subjectacces subjectrules supplemental sysctl-v1.js taint-v1.jso tcpsocketact time-meta-v1 tokenreview- tokenreviews toleration-v topologysele userinfo-aut validatingwe volume-v1.js volumeattach volumedevice volumeerror- volumemount- volumenodeaf volumeprojec vspherevirtu watchevent-m webhook-admi webhookclien weightedpoda _definitions affin aggre all.j allow apigr apire apise apive attac awsel azure bindi capab cephf certi cinde clien clust compo confi conta contr cronj cross csipe custo daemo delet deplo downw empty endpo envfr envva event evict execa exter fcvol flexp flexv flock fsgro gcepe gitre glust group handl horiz hosta hostp httpg httph httpi idran info- ingre initi intor ipblo iscsi job-b jobco jobli jobsp jobst jobte json- jsons keyto label lifec limit listm loadb local metri micro mutat names netwo nfsvo node- nodea nodec noded nodel nodes nonre objec owner patch persi photo pod-v podaf podan podco poddi poddn podli podpr podre podse podsm podsp podst podte polic portw preco prefe prior probe proje quoby rawex rbdpe rbdvo repli resou role- roleb rolel roler rollb rolli rule- rulew runas scale scope secre secur selfs selin serve servi sessi state statu stora subje suppl sysct taint tcpso time- token toler topol useri valid volum vsphe watch webho weigh _defi affinity-v1. aggregationr all.json allowedflexv allowedhostp apigroup-met apigrouplist apiresource- apiresourcel apiservice-a apiserviceco apiserviceli apiservicesp apiservicest apiversions- attachedvolu awselasticbl azurediskvol azurefileper azurefilevol binding-v1.j capabilities cephfspersis cephfsvolume certificates cinderpersis cindervolume clientipconf clusterrole- clusterroleb clusterrolel componentcon componentsta configmap-v1 configmapenv configmapkey configmaplis configmapnod configmappro configmapvol container-v1 containerima containerpor containersta controllerre cronjob-batc cronjoblist- cronjobspec- cronjobstatu crossversion csipersisten customresour daemonendpoi daemonset-ap daemonset-ex daemonsetcon daemonsetlis daemonsetspe daemonsetsta daemonsetupd deleteoption deployment-a deployment-e deploymentco deploymentli deploymentro deploymentsp deploymentst downwardapip downwardapiv emptydirvolu endpointaddr endpointport endpoints-v1 endpointslis endpointsubs envfromsourc envvar-v1.js envvarsource event-events event-v1.jso eventlist-ev eventlist-v1 eventseries- eventsource- eviction-pol execaction-v externaldocu externalmetr fcvolumesour flexpersiste flexvolumeso flockervolum fsgroupstrat gcepersisten gitrepovolum glusterfsvol groupversion handler-v1.j horizontalpo hostalias-v1 hostpathvolu hostportrang httpgetactio httpheader-v httpingressp httpingressr idrange-exte idrange-poli info-pkg-ver ingress-exte ingressbacke ingresslist- ingressrule- ingressspec- ingressstatu ingresstls-e initializer- initializerc initializers intorstring- ipblock-exte ipblock-netw iscsipersist iscsivolumes job-batch-v1 jobcondition joblist-batc jobspec-batc jobstatus-ba jobtemplates json-apiexte jsonschemapr keytopath-v1 labelselecto lease-coordi leaselist-co leasespec-co lifecycle-v1 limitrange-v limitrangeit limitrangeli limitrangesp listmeta-met loadbalancer localobjectr localsubject localvolumes metricidenti metricspec-a metricstatus metrictarget metricvalues microtime-me mutatingwebh namespace-v1 namespacelis namespacespe namespacesta networkpolic nfsvolumesou node-v1.json nodeaddress- nodeaffinity nodeconditio nodeconfigso nodeconfigst nodedaemonen nodelist-v1. nodeselector nodespec-v1. nodestatus-v nodesystemin nonresourcea nonresourcer objectfields objectmeta-m objectmetric objectrefere ownerreferen patch-meta-v persistentvo photonpersis pod-v1.json podaffinity- podaffinityt podantiaffin podcondition poddisruptio poddnsconfig podlist-v1.j podpreset-se podpresetlis podpresetspe podreadiness podsecurityc podsecurityp podsmetricso podsmetricst podspec-v1.j podstatus-v1 podtemplate- podtemplatel podtemplates policyrule-r portworxvolu precondition preferredsch priorityclas probe-v1.jso projectedvol quobytevolum rawextension rbdpersisten rbdvolumesou replicaset-a replicaset-e replicasetco replicasetli replicasetsp replicasetst replicationc resourceattr resourcefiel resourcemetr resourcequot resourcerequ resourcerule role-rbac-v1 rolebinding- rolebindingl rolelist-rba roleref-rbac rollbackconf rollingupdat rule-admissi rulewithoper runasuserstr scale-apps-v scale-autosc scale-extens scaleiopersi scaleiovolum scalespec-ap scalespec-au scalespec-ex scalestatus- scopedresour scopeselecto secret-v1.js secretenvsou secretkeysel secretlist-v secretprojec secretrefere secretvolume securitycont selfsubjecta selfsubjectr selinuxoptio selinuxstrat serveraddres service-v1.j serviceaccou servicelist- serviceport- servicerefer servicespec- servicestatu sessionaffin statefulset- statefulsetc statefulsetl statefulsets statefulsetu status-meta- statuscause- statusdetail storageclass storageosper storageosvol subject-rbac subjectacces subjectrules supplemental sysctl-v1.js taint-v1.jso tcpsocketact time-meta-v1 tokenreview- tokenreviews toleration-v topologysele typedlocalob userinfo-aut validatingwe volume-v1.js volumeattach volumedevice volumeerror- volumemount- volumenodeaf volumeprojec vspherevirtu watchevent-m webhook-admi webhookclien weightedpoda _definitions affin aggre all.j allow apigr apire apise apive attac awsel azure bindi capab cephf certi cinde clien clust compo confi conta contr cronj cross csipe custo daemo delet deplo downw empty endpo envfr envva event evict execa exter fcvol flexp flexv flock fsgro gcepe gitre glust group handl horiz hosta hostp httpg httph httpi idran info- ingre initi intor ipblo iscsi job-b jobco jobli jobsp jobst jobte json- jsons keyto label lease lifec limit listm loadb local metri micro mutat names netwo nfsvo node- nodea nodec noded nodel nodes nonre objec owner patch persi photo pod-v podaf podan podco poddi poddn podli podpr podre podse podsm podsp podst podte polic portw preco prefe prior probe proje quoby rawex rbdpe rbdvo repli resou role- roleb rolel roler rollb rolli rule- rulew runas scale scope secre secur selfs selin serve servi sessi state statu stora subje suppl sysct taint tcpso time- token toler topol typed useri valid volum vsphe watch webho weigh _defi affinity-v1. aggregationr all.json allowedflexv allowedhostp apigroup-met apigrouplist apiresource- apiresourcel apiservice-a apiserviceco apiserviceli apiservicesp apiservicest apiversions- attachedvolu auditsink-au auditsinklis auditsinkspe awselasticbl azurediskvol azurefileper azurefilevol binding-v1.j capabilities cephfspersis cephfsvolume certificates cinderpersis cindervolume clientipconf clusterrole- clusterroleb clusterrolel componentcon componentsta configmap-v1 configmapenv configmapkey configmaplis configmapnod configmappro configmapvol container-v1 containerima containerpor containersta controllerre cronjob-batc cronjoblist- cronjobspec- cronjobstatu crossversion csipersisten customresour daemonendpoi daemonset-ap daemonset-ex daemonsetcon daemonsetlis daemonsetspe daemonsetsta daemonsetupd deleteoption deployment-a deployment-e deploymentco deploymentli deploymentro deploymentsp deploymentst downwardapip downwardapiv emptydirvolu endpointaddr endpointport endpoints-v1 endpointslis endpointsubs envfromsourc envvar-v1.js envvarsource event-events event-v1.jso eventlist-ev eventlist-v1 eventseries- eventsource- eviction-pol execaction-v externaldocu externalmetr fcvolumesour flexpersiste flexvolumeso flockervolum fsgroupstrat gcepersisten gitrepovolum glusterfsper glusterfsvol groupversion handler-v1.j horizontalpo hostalias-v1 hostpathvolu hostportrang httpgetactio httpheader-v httpingressp httpingressr idrange-exte idrange-poli info-pkg-ver ingress-exte ingressbacke ingresslist- ingressrule- ingressspec- ingressstatu ingresstls-e initializer- initializerc initializers intorstring- ipblock-exte ipblock-netw iscsipersist iscsivolumes job-batch-v1 jobcondition joblist-batc jobspec-batc jobstatus-ba jobtemplates json-apiexte jsonschemapr keytopath-v1 labelselecto lease-coordi leaselist-co leasespec-co lifecycle-v1 limitrange-v limitrangeit limitrangeli limitrangesp listmeta-met loadbalancer localobjectr localsubject localvolumes metricidenti metricspec-a metricstatus metrictarget metricvalues microtime-me mutatingwebh namespace-v1 namespacelis namespacespe namespacesta networkpolic nfsvolumesou node-v1.json nodeaddress- nodeaffinity nodeconditio nodeconfigso nodeconfigst nodedaemonen nodelist-v1. nodeselector nodespec-v1. nodestatus-v nodesystemin nonresourcea nonresourcer objectfields objectmeta-m objectmetric objectrefere ownerreferen patch-meta-v persistentvo photonpersis pod-v1.json podaffinity- podaffinityt podantiaffin podcondition poddisruptio poddnsconfig podlist-v1.j podpreset-se podpresetlis podpresetspe podreadiness podsecurityc podsecurityp podsmetricso podsmetricst podspec-v1.j podstatus-v1 podtemplate- podtemplatel podtemplates policy-audit policyrule-r portworxvolu precondition preferredsch priorityclas probe-v1.jso projectedvol quobytevolum rawextension rbdpersisten rbdvolumesou replicaset-a replicaset-e replicasetco replicasetli replicasetsp replicasetst replicationc resourceattr resourcefiel resourcemetr resourcequot resourcerequ resourcerule role-rbac-v1 rolebinding- rolebindingl rolelist-rba roleref-rbac rollbackconf rollingupdat rule-admissi rulewithoper runasgroupst runasuserstr scale-apps-v scale-autosc scale-extens scaleiopersi scaleiovolum scalespec-ap scalespec-au scalespec-ex scalestatus- scopedresour scopeselecto secret-v1.js secretenvsou secretkeysel secretlist-v secretprojec secretrefere secretvolume securitycont selfsubjecta selfsubjectr selinuxoptio selinuxstrat serveraddres service-v1.j serviceaccou servicelist- serviceport- servicerefer servicespec- servicestatu sessionaffin statefulset- statefulsetc statefulsetl statefulsets statefulsetu status-meta- statuscause- statusdetail storageclass storageosper storageosvol subject-rbac subjectacces subjectrules supplemental sysctl-v1.js taint-v1.jso tcpsocketact time-meta-v1 tokenreview- tokenreviews toleration-v topologysele typedlocalob userinfo-aut validatingwe volume-v1.js volumeattach volumedevice volumeerror- volumemount- volumenodeaf volumeprojec vspherevirtu watchevent-m webhook-admi webhook-audi webhookclien webhookthrot weightedpoda _definitions affin aggre all.j allow apigr apire apise apive attac audit awsel azure bindi capab cephf certi cinde clien clust compo confi conta contr cronj cross csipe custo daemo delet deplo downw empty endpo envfr envva event evict execa exter fcvol flexp flexv flock fsgro gcepe gitre glust group handl horiz hosta hostp httpg httph httpi idran info- ingre initi intor ipblo iscsi job-b jobco jobli jobsp jobst jobte json- jsons keyto label lease lifec limit listm loadb local metri micro mutat names netwo nfsvo node- nodea nodec noded nodel nodes nonre objec owner patch persi photo pod-v podaf podan podco poddi poddn podli podpr podre podse podsm podsp podst podte polic portw preco prefe prior probe proje quoby rawex rbdpe rbdvo repli resou role- roleb rolel roler rollb rolli rule- rulew runas scale scope secre secur selfs selin serve servi sessi state statu stora subje suppl sysct taint tcpso time- token toler topol typed useri valid volum vsphe watch webho weigh _defi affinity-v1. aggregationr all.json allowedcsidr allowedflexv allowedhostp apigroup-met apigrouplist apiresource- apiresourcel apiservice-a apiserviceco apiserviceli apiservicesp apiservicest apiversions- attachedvolu auditsink-au auditsinklis auditsinkspe awselasticbl azurediskvol azurefileper azurefilevol binding-v1.j capabilities cephfspersis cephfsvolume certificates cinderpersis cindervolume clientipconf clusterrole- clusterroleb clusterrolel componentcon componentsta configmap-v1 configmapenv configmapkey configmaplis configmapnod configmappro configmapvol container-v1 containerima containerpor containersta controllerre cronjob-batc cronjoblist- cronjobspec- cronjobstatu crossversion csidriver-st csidriverlis csidriverspe csinode-stor csinodedrive csinodelist- csinodespec- csipersisten csivolumesou customresour daemonendpoi daemonset-ap daemonset-ex daemonsetcon daemonsetlis daemonsetspe daemonsetsta daemonsetupd deleteoption deployment-a deployment-e deploymentco deploymentli deploymentro deploymentsp deploymentst downwardapip downwardapiv emptydirvolu endpointaddr endpointport endpoints-v1 endpointslis endpointsubs envfromsourc envvar-v1.js envvarsource event-events event-v1.jso eventlist-ev eventlist-v1 eventseries- eventsource- eviction-pol execaction-v externaldocu externalmetr fcvolumesour fields-meta- flexpersiste flexvolumeso flockervolum fsgroupstrat gcepersisten gitrepovolum glusterfsper glusterfsvol groupversion handler-v1.j horizontalpo hostalias-v1 hostpathvolu hostportrang httpgetactio httpheader-v httpingressp httpingressr idrange-exte idrange-poli info-pkg-ver ingress-exte ingress-netw ingressbacke ingresslist- ingressrule- ingressspec- ingressstatu ingresstls-e ingresstls-n initializer- initializers intorstring- ipblock-exte ipblock-netw iscsipersist iscsivolumes job-batch-v1 jobcondition joblist-batc jobspec-batc jobstatus-ba jobtemplates json-apiexte jsonschemapr keytopath-v1 labelselecto lease-coordi leaselist-co leasespec-co lifecycle-v1 limitrange-v limitrangeit limitrangeli limitrangesp listmeta-met loadbalancer localobjectr localsubject localvolumes managedfield metricidenti metricspec-a metricstatus metrictarget metricvalues microtime-me mutatingwebh namespace-v1 namespacelis namespacespe namespacesta networkpolic nfsvolumesou node-v1.json nodeaddress- nodeaffinity nodeconditio nodeconfigso nodeconfigst nodedaemonen nodelist-v1. nodeselector nodespec-v1. nodestatus-v nodesystemin nonresourcea nonresourcer objectfields objectmeta-m objectmetric objectrefere ownerreferen patch-meta-v persistentvo photonpersis pod-v1.json podaffinity- podaffinityt podantiaffin podcondition poddisruptio poddnsconfig podlist-v1.j podpreset-se podpresetlis podpresetspe podreadiness podsecurityc podsecurityp podsmetricso podsmetricst podspec-v1.j podstatus-v1 podtemplate- podtemplatel podtemplates policy-audit policyrule-r portworxvolu precondition preferredsch priorityclas probe-v1.jso projectedvol quobytevolum rawextension rbdpersisten rbdvolumesou replicaset-a replicaset-e replicasetco replicasetli replicasetsp replicasetst replicationc resourceattr resourcefiel resourcemetr resourcequot resourcerequ resourcerule role-rbac-v1 rolebinding- rolebindingl rolelist-rba roleref-rbac rollbackconf rollingupdat rulewithoper runasgroupst runasuserstr runtimeclass scale-apps-v scale-autosc scale-extens scaleiopersi scaleiovolum scalespec-ap scalespec-au scalespec-ex scalestatus- scopedresour scopeselecto secret-v1.js secretenvsou secretkeysel secretlist-v secretprojec secretrefere secretvolume securitycont selfsubjecta selfsubjectr selinuxoptio selinuxstrat serveraddres service-v1.j serviceaccou servicelist- serviceport- servicerefer servicespec- servicestatu sessionaffin statefulset- statefulsetc statefulsetl statefulsets statefulsetu status-meta- statuscause- statusdetail storageclass storageosper storageosvol subject-rbac subjectacces subjectrules supplemental sysctl-v1.js taint-v1.jso tcpsocketact time-meta-v1 tokenreview- tokenreviews toleration-v topologysele typedlocalob userinfo-aut validatingwe volume-v1.js volumeattach volumedevice volumeerror- volumemount- volumenodeaf volumeprojec vspherevirtu watchevent-m webhook-admi webhook-audi webhookclien webhookthrot weightedpoda _definitions affin aggre all.j allow apigr apire apise apive attac audit awsel azure bindi capab cephf certi cinde clien clust compo confi conta contr cronj cross csidr csino csipe csivo custo daemo delet deplo downw empty endpo envfr envva event evict execa exter fcvol field flexp flexv flock fsgro gcepe gitre glust group handl horiz hosta hostp httpg httph httpi idran info- ingre initi intor ipblo iscsi job-b jobco jobli jobsp jobst jobte json- jsons keyto label lease lifec limit listm loadb local manag metri micro mutat names netwo nfsvo node- nodea nodec noded nodel nodes nonre objec owner patch persi photo pod-v podaf podan podco poddi poddn podli podpr podre podse podsm podsp podst podte polic portw preco prefe prior probe proje quoby rawex rbdpe rbdvo repli resou role- roleb rolel roler rollb rolli rulew runas runti scale scope secre secur selfs selin serve servi sessi state statu stora subje suppl sysct taint tcpso time- token toler topol typed useri valid volum vsphe watch webho weigh _defi affinity-v1. aggregationr all.json allowedcsidr allowedflexv allowedhostp apigroup-met apigrouplist apiresource- apiresourcel apiservice-a apiserviceco apiserviceli apiservicesp apiservicest apiversions- attachedvolu auditsink-au auditsinklis auditsinkspe awselasticbl azurediskvol azurefileper azurefilevol binding-v1.j capabilities cephfspersis cephfsvolume certificates cinderpersis cindervolume clientipconf clusterrole- clusterroleb clusterrolel componentcon componentsta configmap-v1 configmapenv configmapkey configmaplis configmapnod configmappro configmapvol container-v1 containerima containerpor containersta controllerre cronjob-batc cronjoblist- cronjobspec- cronjobstatu crossversion csidriver-st csidriverlis csidriverspe csinode-stor csinodedrive csinodelist- csinodespec- csipersisten csivolumesou customresour daemonendpoi daemonset-ap daemonset-ex daemonsetcon daemonsetlis daemonsetspe daemonsetsta daemonsetupd deleteoption deployment-a deployment-e deploymentco deploymentli deploymentro deploymentsp deploymentst downwardapip downwardapiv emptydirvolu endpointaddr endpointport endpoints-v1 endpointslis endpointsubs envfromsourc envvar-v1.js envvarsource event-events event-v1.jso eventlist-ev eventlist-v1 eventseries- eventsource- eviction-pol execaction-v externaldocu externalmetr fcvolumesour fields-meta- flexpersiste flexvolumeso flockervolum fsgroupstrat gcepersisten gitrepovolum glusterfsper glusterfsvol groupversion handler-v1.j horizontalpo hostalias-v1 hostpathvolu hostportrang httpgetactio httpheader-v httpingressp httpingressr idrange-exte idrange-poli info-pkg-ver ingress-exte ingress-netw ingressbacke ingresslist- ingressrule- ingressspec- ingressstatu ingresstls-e ingresstls-n initializer- initializers intorstring- ipblock-exte ipblock-netw iscsipersist iscsivolumes job-batch-v1 jobcondition joblist-batc jobspec-batc jobstatus-ba jobtemplates json-apiexte jsonschemapr keytopath-v1 labelselecto lease-coordi leaselist-co leasespec-co lifecycle-v1 limitrange-v limitrangeit limitrangeli limitrangesp listmeta-met loadbalancer localobjectr localsubject localvolumes managedfield metricidenti metricspec-a metricstatus metrictarget metricvalues microtime-me mutatingwebh namespace-v1 namespacelis namespacespe namespacesta networkpolic nfsvolumesou node-v1.json nodeaddress- nodeaffinity nodeconditio nodeconfigso nodeconfigst nodedaemonen nodelist-v1. nodeselector nodespec-v1. nodestatus-v nodesystemin nonresourcea nonresourcer objectfields objectmeta-m objectmetric objectrefere ownerreferen patch-meta-v persistentvo photonpersis pod-v1.json podaffinity- podaffinityt podantiaffin podcondition poddisruptio poddnsconfig podlist-v1.j podpreset-se podpresetlis podpresetspe podreadiness podsecurityc podsecurityp podsmetricso podsmetricst podspec-v1.j podstatus-v1 podtemplate- podtemplatel podtemplates policy-audit policyrule-r portworxvolu precondition preferredsch priorityclas probe-v1.jso projectedvol quobytevolum rawextension rbdpersisten rbdvolumesou replicaset-a replicaset-e replicasetco replicasetli replicasetsp replicasetst replicationc resourceattr resourcefiel resourcemetr resourcequot resourcerequ resourcerule role-rbac-v1 rolebinding- rolebindingl rolelist-rba roleref-rbac rollbackconf rollingupdat rulewithoper runasgroupst runasuserstr runtimeclass scale-apps-v scale-autosc scale-extens scaleiopersi scaleiovolum scalespec-ap scalespec-au scalespec-ex scalestatus- scopedresour scopeselecto secret-v1.js secretenvsou secretkeysel secretlist-v secretprojec secretrefere secretvolume securitycont selfsubjecta selfsubjectr selinuxoptio selinuxstrat serveraddres service-v1.j serviceaccou servicelist- serviceport- servicerefer servicespec- servicestatu sessionaffin statefulset- statefulsetc statefulsetl statefulsets statefulsetu status-meta- statuscause- statusdetail storageclass storageosper storageosvol subject-rbac subjectacces subjectrules supplemental sysctl-v1.js taint-v1.jso tcpsocketact time-meta-v1 tokenreview- tokenreviews toleration-v topologysele typedlocalob userinfo-aut validatingwe volume-v1.js volumeattach volumedevice volumeerror- volumemount- volumenodeaf volumeprojec vspherevirtu watchevent-m webhook-audi webhookclien webhookthrot weightedpoda windowssecur _definitions affin aggre all.j allow apigr apire apise apive attac audit awsel azure bindi capab cephf certi cinde clien clust compo confi conta contr cronj cross csidr csino csipe csivo custo daemo delet deplo downw empty endpo envfr envva event evict execa exter fcvol field flexp flexv flock fsgro gcepe gitre glust group handl horiz hosta hostp httpg httph httpi idran info- ingre initi intor ipblo iscsi job-b jobco jobli jobsp jobst jobte json- jsons keyto label lease lifec limit listm loadb local manag metri micro mutat names netwo nfsvo node- nodea nodec noded nodel nodes nonre objec owner patch persi photo pod-v podaf podan podco poddi poddn podli podpr podre podse podsm podsp podst podte polic portw preco prefe prior probe proje quoby rawex rbdpe rbdvo repli resou role- roleb rolel roler rollb rolli rulew runas runti scale scope secre secur selfs selin serve servi sessi state statu stora subje suppl sysct taint tcpso time- token toler topol typed useri valid volum vsphe watch webho weigh windo _defi affinity-v1. aggregationr all.json allowedcsidr allowedflexv allowedhostp apigroup-met apigrouplist apiresource- apiresourcel apiservice-a apiserviceco apiserviceli apiservicesp apiservicest apiversions- attachedvolu auditsink-au auditsinklis auditsinkspe awselasticbl azurediskvol azurefileper azurefilevol binding-v1.j boundobjectr capabilities cephfspersis cephfsvolume certificates cinderpersis cindervolume clientipconf clusterrole- clusterroleb clusterrolel componentcon componentsta configmap-v1 configmapenv configmapkey configmaplis configmapnod configmappro configmapvol container-v1 containerima containerpor containersta controllerre cronjob-batc cronjoblist- cronjobspec- cronjobstatu crossversion csidriver-st csidriverlis csidriverspe csinode-stor csinodedrive csinodelist- csinodespec- csipersisten csivolumesou customresour daemonendpoi daemonset-ap daemonset-ex daemonsetcon daemonsetlis daemonsetspe daemonsetsta daemonsetupd deleteoption deployment-a deployment-e deploymentco deploymentli deploymentro deploymentsp deploymentst downwardapip downwardapiv emptydirvolu endpoint-dis endpointaddr endpointcond endpointport endpoints-v1 endpointslic endpointslis endpointsubs envfromsourc envvar-v1.js envvarsource ephemeralcon event-events event-v1.jso eventlist-ev eventlist-v1 eventseries- eventsource- eviction-pol execaction-v externaldocu externalmetr fcvolumesour fieldsv1-met flexpersiste flexvolumeso flockervolum fsgroupstrat gcepersisten gitrepovolum glusterfsper glusterfsvol groupversion handler-v1.j horizontalpo hostalias-v1 hostpathvolu hostportrang httpgetactio httpheader-v httpingressp httpingressr idrange-exte idrange-poli info-pkg-ver ingress-exte ingress-netw ingressbacke ingresslist- ingressrule- ingressspec- ingressstatu ingresstls-e ingresstls-n intorstring- ipblock-exte ipblock-netw iscsipersist iscsivolumes job-batch-v1 jobcondition joblist-batc jobspec-batc jobstatus-ba jobtemplates json-apiexte jsonschemapr keytopath-v1 labelselecto lease-coordi leaselist-co leasespec-co lifecycle-v1 limitrange-v limitrangeit limitrangeli limitrangesp listmeta-met loadbalancer localobjectr localsubject localvolumes managedfield metricidenti metricspec-a metricstatus metrictarget metricvalues microtime-me mutatingwebh namespace-v1 namespacecon namespacelis namespacespe namespacesta networkpolic nfsvolumesou node-v1.json nodeaddress- nodeaffinity nodeconditio nodeconfigso nodeconfigst nodedaemonen nodelist-v1. nodeselector nodespec-v1. nodestatus-v nodesystemin nonresourcea nonresourcer objectfields objectmeta-m objectmetric objectrefere overhead-nod ownerreferen patch-meta-v persistentvo photonpersis pod-v1.json podaffinity- podaffinityt podantiaffin podcondition poddisruptio poddnsconfig podip-v1.jso podlist-v1.j podpreset-se podpresetlis podpresetspe podreadiness podsecurityc podsecurityp podsmetricso podsmetricst podspec-v1.j podstatus-v1 podtemplate- podtemplatel podtemplates policy-audit policyrule-r portworxvolu precondition preferredsch priorityclas probe-v1.jso projectedvol quobytevolum rawextension rbdpersisten rbdvolumesou replicaset-a replicaset-e replicasetco replicasetli replicasetsp replicasetst replicationc resourceattr resourcefiel resourcemetr resourcequot resourcerequ resourcerule role-rbac-v1 rolebinding- rolebindingl rolelist-rba roleref-rbac rollbackconf rollingupdat rulewithoper runasgroupst runasuserstr runtimeclass scale-apps-v scale-autosc scale-extens scaleiopersi scaleiovolum scalespec-ap scalespec-au scalespec-ex scalestatus- scheduling-n scopedresour scopeselecto secret-v1.js secretenvsou secretkeysel secretlist-v secretprojec secretrefere secretvolume securitycont selfsubjecta selfsubjectr selinuxoptio selinuxstrat serveraddres service-v1.j serviceaccou servicelist- serviceport- servicerefer servicespec- servicestatu sessionaffin statefulset- statefulsetc statefulsetl statefulsets statefulsetu status-meta- statuscause- statusdetail storageclass storageosper storageosvol subject-rbac subjectacces subjectrules supplemental sysctl-v1.js taint-v1.jso tcpsocketact time-meta-v1 tokenrequest tokenreview- tokenreviews toleration-v topologysele topologyspre typedlocalob userinfo-aut validatingwe volume-v1.js volumeattach volumedevice volumeerror- volumemount- volumenodeaf volumenodere volumeprojec vspherevirtu watchevent-m webhook-audi webhookclien webhookconve webhookthrot weightedpoda windowssecur _definitions affin aggre all.j allow apigr apire apise apive attac audit awsel azure bindi bound capab cephf certi cinde clien clust compo confi conta contr cronj cross csidr csino csipe csivo custo daemo delet deplo downw empty endpo envfr envva ephem event evict execa exter fcvol field flexp flexv flock fsgro gcepe gitre glust group handl horiz hosta hostp httpg httph httpi idran info- ingre intor ipblo iscsi job-b jobco jobli jobsp jobst jobte json- jsons keyto label lease lifec limit listm loadb local manag metri micro mutat names netwo nfsvo node- nodea nodec noded nodel nodes nonre objec overh owner patch persi photo pod-v podaf podan podco poddi poddn podip podli podpr podre podse podsm podsp podst podte polic portw preco prefe prior probe proje quoby rawex rbdpe rbdvo repli resou role- roleb rolel roler rollb rolli rulew runas runti scale sched scope secre secur selfs selin serve servi sessi state statu stora subje suppl sysct taint tcpso time- token toler topol typed useri valid volum vsphe watch webho weigh windo _defi affinity-v1. aggregationr all.json allowedcsidr allowedflexv allowedhostp apigroup-met apigrouplist apiresource- apiresourcel apiservice-a apiserviceco apiserviceli apiservicesp apiservicest apiversions- attachedvolu auditsink-au auditsinklis auditsinkspe awselasticbl azurediskvol azurefileper azurefilevol binding-v1.j boundobjectr capabilities cephfspersis cephfsvolume certificates cinderpersis cindervolume clientipconf clusterrole- clusterroleb clusterrolel componentcon componentsta configmap-v1 configmapenv configmapkey configmaplis configmapnod configmappro configmapvol container-v1 containerima containerpor containersta controllerre cronjob-batc cronjoblist- cronjobspec- cronjobstatu crossversion csidriver-st csidriverlis csidriverspe csinode-stor csinodedrive csinodelist- csinodespec- csipersisten csivolumesou customresour",
        "setup.py": "import os\nfrom setuptools import setup, find_packages\nimport sys\n\n\nsys.path.insert(0, os.path.abspath('lib'))\n\nexec(open('src\/kubernetes_validate\/version.py').read())\n\nsetup(\nname='kubernetes-validate',\nversion=__version__,\ndescription=('validates kubernetes resource definitions against schemas'),\nkeywords='kubernetes, schema, validate, validator',\nauthor='Will Thames',\nurl='https:\/\/github.com\/willthames\/kubernetes-validate',\npackages=find_packages('src'),\npackage_dir={'': 'src'},\npackage_data={\n'': ['kubernetes-json-schema\/*-local\/*.json', 'kubernetes-json-schema\/*-local-strict\/*.json']\n},\nzip_safe=False,\ninstall_requires=['PyYAML', 'jsonschema'],\nentry_points={\n'console_scripts': [\n'kubernetes-validate=kubernetes_validate.__main__:main'\n]\n},\nlicense='Apache',\ntest_suite=\"test\"\n)\n"
    },
    {
        "package_name": "langcodes-3.3.0",
        "file_list": "build_data.py language-subtag-registry.txt data_dicts.py language_distance.py language_lists.py py.typed registry_parser.py tag_parser.py README.md test_alpha3.py test_language_data.py test_wikt_languages.py util.py __init__.py LICENSE.txt PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['langcodes', 'langcodes.tests']\n\npackage_data = \\\n{'': ['*'], 'langcodes': ['data\/*']}\n\nextras_require = \\\n{'data': ['language-data>=1.1,<2.0']}\n\nsetup_kwargs = {\n'name': 'langcodes',\n'version': '3.3.0',\n'description': 'Tools for labeling human languages with IETF language tags',\n'long_description': '# Langcodes: a library for language codes\\n\\n**langcodes** knows what languages are. It knows the standardized codes that\\nrefer to them, such as `en` for English, `es` for Spanish and `hi` for Hindi.\\n\\nThese are [IETF language tags][]. You may know them by their old name, ISO 639\\nlanguage codes. IETF has done some important things for backward compatibility\\nand supporting language variations that you won\\'t find in the ISO standard.\\n\\n[IETF language tags]: https:\/\/www.w3.org\/International\/articles\/language-tags\/\\n\\nIt may sound to you like langcodes solves a pretty boring problem. At one\\nlevel, that\\'s right. Sometimes you have a boring problem, and it\\'s great when a\\nlibrary solves it for you.\\n\\nBut there\\'s an interesting problem hiding in here. How do you work with\\nlanguage codes? How do you know when two different codes represent the same\\nthing? How should your code represent relationships between codes, like the\\nfollowing?\\n\\n* `eng` is equivalent to `en`.\\n* `fra` and `fre` are both equivalent to `fr`.\\n* `en-GB` might be written as `en-gb` or `en_GB`. Or as \\'en-UK\\', which is\\n erroneous, but should be treated as the same.\\n* `en-CA` is not exactly equivalent to `en-US`, but it\\'s really, really close.\\n* `en-Latn-US` is equivalent to `en-US`, because written English must be written\\n in the Latin alphabet to be understood.\\n* The difference between `ar` and `arb` is the difference between \"Arabic\" and\\n \"Modern Standard Arabic\", a difference that may not be relevant to you.\\n* You\\'ll find Mandarin Chinese tagged as `cmn` on Wiktionary, but many other\\n resources would call the same language `zh`.\\n* Chinese is written in different scripts in different territories. Some\\n software distinguishes the script. Other software distinguishes the territory.\\n The result is that `zh-CN` and `zh-Hans` are used interchangeably, as are\\n `zh-TW` and `zh-Hant`, even though occasionally you\\'ll need something\\n different such as `zh-HK` or `zh-Latn-pinyin`.\\n* The Indonesian (`id`) and Malaysian (`ms` or `zsm`) languages are mutually\\n intelligible.\\n* `jp` is not a language code. (The language code for Japanese is `ja`, but\\n people confuse it with the country code for Japan.)\\n\\nOne way to know is to read IETF standards and Unicode technical reports.\\nAnother way is to use a library that implements those standards and guidelines\\nfor you, which langcodes does.\\n\\nWhen you\\'re working with these short language codes, you may want to see the\\nname that the language is called _in_ a language: `fr` is called \"French\" in\\nEnglish. That language doesn\\'t have to be English: `fr` is called \"fran\u00e7ais\" in\\nFrench. A supplement to langcodes, [`language_data`][language-data], provides\\nthis information.\\n\\n[language-data]: https:\/\/github.com\/rspeer\/language_data\\n\\nlangcodes is maintained by Elia Robyn Lake a.k.a. Robyn Speer, and is released\\nas free software under the MIT license.\\n\\n\\n## Standards implemented\\n\\nAlthough this is not the only reason to use it, langcodes will make you more\\nacronym-compliant.\\n\\nlangcodes implements [BCP 47](http:\/\/tools.ietf.org\/html\/bcp47), the IETF Best\\nCurrent Practices on Tags for Identifying Languages. BCP 47 is also known as\\nRFC 5646. It subsumes ISO 639 and is backward compatible with it, and it also\\nimplements recommendations from the [Unicode CLDR](http:\/\/cldr.unicode.org).\\n\\nlangcodes can also refer to a database of language properties and names, built\\nfrom Unicode CLDR and the IANA subtag registry, if you install `language_data`.\\n\\nIn summary, langcodes takes language codes and does the Right Thing with them,\\nand if you want to know exactly what the Right Thing is, there are some\\ndocuments you can go read.\\n\\n\\n# Documentation\\n\\n## Standardizing language tags\\n\\nThis function standardizes tags, as strings, in several ways.\\n\\nIt replaces overlong tags with their shortest version, and also formats them\\naccording to the conventions of BCP 47:\\n\\n >>> from langcodes import *\\n >>> standardize_tag(\\'eng_US\\')\\n \\'en-US\\'\\n\\nIt removes script subtags that are redundant with the language:\\n\\n >>> standardize_tag(\\'en-Latn\\')\\n \\'en\\'\\n\\nIt replaces deprecated values with their correct versions, if possible:\\n\\n >>> standardize_tag(\\'en-uk\\')\\n \\'en-GB\\'\\n\\nSometimes this involves complex substitutions, such as replacing Serbo-Croatian\\n(`sh`) with Serbian in Latin script (`sr-Latn`), or the entire tag `sgn-US`\\nwith `ase` (American Sign Language).\\n\\n >>> standardize_tag(\\'sh-QU\\')\\n \\'sr-Latn-EU\\'\\n\\n >>> standardize_tag(\\'sgn-US\\')\\n \\'ase\\'\\n\\nIf *macro* is True, it uses macrolanguage codes as a replacement for the most\\ncommon standardized language within that macrolanguage.\\n\\n >>> standardize_tag(\\'arb-Arab\\', macro=True)\\n \\'ar\\'\\n\\nEven when *macro* is False, it shortens tags that contain both the\\nmacrolanguage and the language:\\n\\n >>> standardize_tag(\\'zh-cmn-hans-cn\\')\\n \\'zh-Hans-CN\\'\\n\\nIf the tag can\\'t be parsed according to BCP 47, this will raise a\\nLanguageTagError (a subclass of ValueError):\\n\\n >>> standardize_tag(\\'spa-latn-mx\\')\\n \\'es-MX\\'\\n\\n >>> standardize_tag(\\'spa-mx-latn\\')\\n Traceback (most recent call last):\\n ...\\n langcodes.tag_parser.LanguageTagError: This script subtag, \\'latn\\', is out of place. Expected variant, extension, or end of string.\\n\\n\\n## Language objects\\n\\nThis package defines one class, named Language, which contains the results\\nof parsing a language tag. Language objects have the following fields,\\nany of which may be unspecified:\\n\\n- *language*: the code for the language itself.\\n- *script*: the 4-letter code for the writing system being used.\\n- *territory*: the 2-letter or 3-digit code for the country or similar region\\n whose usage of the language appears in this text.\\n- *extlangs*: a list of more specific language codes that follow the language\\n code. (This is allowed by the language code syntax, but deprecated.)\\n- *variants*: codes for specific variations of language usage that aren\\'t\\n covered by the *script* or *territory* codes.\\n- *extensions*: information that\\'s attached to the language code for use in\\n some specific system, such as Unicode collation orders.\\n- *private*: a code starting with `x-` that has no defined meaning.\\n\\nThe `Language.get` method converts a string to a Language instance, and the\\n`Language.make` method makes a Language instance from its fields. These values\\nare cached so that calling `Language.get` or `Language.make` again with the\\nsame values returns the same object, for efficiency.\\n\\nBy default, it will replace non-standard and overlong tags as it interprets\\nthem. To disable this feature and get the codes that literally appear in the\\nlanguage tag, use the *normalize=False* option.\\n\\n >>> Language.get(\\'en-Latn-US\\')\\n Language.make(language=\\'en\\', script=\\'Latn\\', territory=\\'US\\')\\n\\n >>> Language.get(\\'sgn-US\\', normalize=False)\\n Language.make(language=\\'sgn\\', territory=\\'US\\')\\n\\n >>> Language.get(\\'und\\')\\n Language.make()\\n\\nHere are some examples of replacing non-standard tags:\\n\\n >>> Language.get(\\'sh-QU\\')\\n Language.make(language=\\'sr\\', script=\\'Latn\\', territory=\\'EU\\')\\n\\n >>> Language.get(\\'sgn-US\\')\\n Language.make(language=\\'ase\\')\\n\\n >>> Language.get(\\'zh-cmn-Hant\\')\\n Language.make(language=\\'zh\\', script=\\'Hant\\')\\n\\nUse the `str()` function on a Language object to convert it back to its\\nstandard string form:\\n\\n >>> str(Language.get(\\'sh-QU\\'))\\n \\'sr-Latn-EU\\'\\n\\n >>> str(Language.make(territory=\\'IN\\'))\\n \\'und-IN\\'\\n\\n\\n### Checking validity\\n\\nA language code is _valid_ when every part of it is assigned a meaning by IANA.\\nThat meaning could be \"private use\".\\n\\nIn langcodes, we check the language subtag, script, territory, and variants for\\nvalidity. We don\\'t check other parts such as extlangs or Unicode extensions.\\n\\nFor example, `ja` is a valid language code, and `jp` is not:\\n\\n >>> Language.get(\\'ja\\').is_valid()\\n True\\n\\n >>> Language.get(\\'jp\\').is_valid()\\n False\\n\\nThe top-level function `tag_is_valid(tag)` is possibly more convenient to use,\\nbecause it can return False even for tags that don\\'t parse:\\n\\n >>> tag_is_valid(\\'C\\')\\n False\\n\\nIf one subtag is invalid, the entire code is invalid:\\n\\n >>> tag_is_valid(\\'en-000\\')\\n False\\n\\n`iw` is valid, though it\\'s a deprecated alias for `he`:\\n\\n >>> tag_is_valid(\\'iw\\')\\n True\\n\\nThe empty language tag (`und`) is valid:\\n\\n >>> tag_is_valid(\\'und\\')\\n True\\n\\nPrivate use codes are valid:\\n\\n >>> tag_is_valid(\\'x-other\\')\\n True\\n\\n >>> tag_is_valid(\\'qaa-Qaai-AA-x-what-even-is-this\\')\\n True\\n\\nLanguage tags that are very unlikely are still valid:\\n\\n >>> tag_is_valid(\\'fr-Cyrl\\')\\n True\\n\\nTags with non-ASCII characters are invalid, because they don\\'t parse:\\n\\n >>> tag_is_valid(\\'zh-\u666e\u901a\u8bdd\\')\\n False\\n\\n\\n### Getting alpha3 codes\\n\\nBefore there was BCP 47, there was ISO 639-2. The ISO tried to make room for the\\nvariety of human languages by assigning every language a 3-letter code,\\nincluding the ones that already had 2-letter codes.\\n\\nUnfortunately, this just led to more confusion. Some languages ended up with two\\ndifferent 3-letter codes for legacy reasons, such as French, which is `fra` as a\\n\"terminology\" code, and `fre` as a \"biblographic\" code. And meanwhile, `fr` was\\nstill a code that you\\'d be using if you followed ISO 639-1.\\n\\nIn BCP 47, you should use 2-letter codes whenever they\\'re available, and that\\'s\\nwhat langcodes does. Fortunately, all the languages that have two different\\n3-letter codes also have a 2-letter code, so if you prefer the 2-letter code,\\nyou don\\'t have to worry about the distinction.\\n\\nBut some applications want the 3-letter code in particular, so langcodes\\nprovides a method for getting those, `Language.to_alpha3()`. It returns the\\n\\'terminology\\' code by default, and passing `variant=\\'B\\'` returns the\\nbibliographic code.\\n\\nWhen this method returns, it always returns a 3-letter string.\\n\\n >>> Language.get(\\'fr\\').to_alpha3()\\n \\'fra\\'\\n >>> Language.get(\\'fr-CA\\').to_alpha3()\\n \\'fra\\'\\n >>> Language.get(\\'fr-CA\\').to_alpha3(variant=\\'B\\')\\n \\'fre\\'\\n >>> Language.get(\\'de\\').to_alpha3()\\n \\'deu\\'\\n >>> Language.get(\\'no\\').to_alpha3()\\n \\'nor\\'\\n >>> Language.get(\\'un\\').to_alpha3()\\n Traceback (most recent call last):\\n ...\\n LookupError: \\'un\\' is not a known language code, and has no alpha3 code.\\n\\nFor many languages, the terminology and bibliographic alpha3 codes are the same.\\n\\n >>> Language.get(\\'en\\').to_alpha3(variant=\\'T\\')\\n \\'eng\\'\\n >>> Language.get(\\'en\\').to_alpha3(variant=\\'B\\')\\n \\'eng\\'\\n\\nWhen you use any of these \"overlong\" alpha3 codes in langcodes, they normalize\\nback to the alpha2 code:\\n\\n >>> Language.get(\\'zho\\')\\n Language.make(language=\\'zh\\')\\n\\n\\n## Working with language names\\n\\nThe methods in this section require an optional package called `language_data`.\\nYou can install it with `pip install language_data`, or request the optional\\n\"data\" feature of langcodes with `pip install langcodes[data]`.\\n\\nThe dependency that you put in setup.py should be `langcodes[data]`.\\n\\n### Describing Language objects in natural language\\n\\nIt\\'s often helpful to be able to describe a language code in a way that a user\\n(or you) can understand, instead of in inscrutable short codes. The\\n`display_name` method lets you describe a Language object *in a language*.\\n\\nThe `.display_name(language, min_score)` method will look up the name of the\\nlanguage. The names come from the IANA language tag registry, which is only in\\nEnglish, plus CLDR, which names languages in many commonly-used languages.\\n\\nThe default language for naming things is English:\\n\\n >>> Language.make(language=\\'fr\\').display_name()\\n \\'French\\'\\n\\n >>> Language.make().display_name()\\n \\'Unknown language\\'\\n\\n >>> Language.get(\\'zh-Hans\\').display_name()\\n \\'Chinese (Simplified)\\'\\n\\n >>> Language.get(\\'en-US\\').display_name()\\n \\'English (United States)\\'\\n\\nBut you can ask for language names in numerous other languages:\\n\\n >>> Language.get(\\'fr\\').display_name(\\'fr\\')\\n \\'fran\u00e7ais\\'\\n\\n >>> Language.get(\\'fr\\').display_name(\\'es\\')\\n \\'franc\u00e9s\\'\\n\\n >>> Language.make().display_name(\\'es\\')\\n \\'lengua desconocida\\'\\n\\n >>> Language.get(\\'zh-Hans\\').display_name(\\'de\\')\\n \\'Chinesisch (Vereinfacht)\\'\\n\\n >>> Language.get(\\'en-US\\').display_name(\\'zh-Hans\\')\\n \\'\u82f1\u8bed\uff08\u7f8e\u56fd\uff09\\'\\n\\nWhy does everyone get Slovak and Slovenian confused? Let\\'s ask them.\\n\\n >>> Language.get(\\'sl\\').display_name(\\'sl\\')\\n \\'sloven\u0161\u010dina\\'\\n >>> Language.get(\\'sk\\').display_name(\\'sk\\')\\n \\'sloven\u010dina\\'\\n >>> Language.get(\\'sl\\').display_name(\\'sk\\')\\n \\'slovin\u010dina\\'\\n >>> Language.get(\\'sk\\').display_name(\\'sl\\')\\n \\'slova\u0161\u010dina\\'\\n\\nIf the language has a script or territory code attached to it, these will be\\ndescribed in parentheses:\\n\\n >>> Language.get(\\'en-US\\').display_name()\\n \\'English (United States)\\'\\n\\nSometimes these can be the result of tag normalization, such as in this case\\nwhere the legacy tag \\'sh\\' becomes \\'sr-Latn\\':\\n\\n >>> Language.get(\\'sh\\').display_name()\\n \\'Serbian (Latin)\\'\\n\\n >>> Language.get(\\'sh\\', normalize=False).display_name()\\n \\'Serbo-Croatian\\'\\n\\nNaming a language in itself is sometimes a useful thing to do, so the\\n`.autonym()` method makes this easy, providing the display name of a language\\nin the language itself:\\n\\n >>> Language.get(\\'fr\\').autonym()\\n \\'fran\u00e7ais\\'\\n >>> Language.get(\\'es\\').autonym()\\n \\'espa\u00f1ol\\'\\n >>> Language.get(\\'ja\\').autonym()\\n \\'\u65e5\u672c\u8a9e\\'\\n >>> Language.get(\\'en-AU\\').autonym()\\n \\'English (Australia)\\'\\n >>> Language.get(\\'sr-Latn\\').autonym()\\n \\'srpski (latinica)\\'\\n >>> Language.get(\\'sr-Cyrl\\').autonym()\\n \\'\u0441\u0440\u043f\u0441\u043a\u0438 (\u045b\u0438\u0440\u0438\u043b\u0438\u0446\u0430)\\'\\n\\nThe names come from the Unicode CLDR data files, and in English they can\\nalso come from the IANA language subtag registry. Together, they can give\\nyou language names in the 196 languages that CLDR supports.\\n\\n\\n### Describing components of language codes\\n\\nYou can get the parts of the name separately with the methods `.language_name()`,\\n`.script_name()`, and `.territory_name()`, or get a dictionary of all the parts\\nthat are present using the `.describe()` method. These methods also accept a\\nlanguage code for what language they should be described in.\\n\\n >>> shaw = Language.get(\\'en-Shaw-GB\\')\\n >>> shaw.describe(\\'en\\')\\n {\\'language\\': \\'English\\', \\'script\\': \\'Shavian\\', \\'territory\\': \\'United Kingdom\\'}\\n\\n >>> shaw.describe(\\'es\\')\\n {\\'language\\': \\'ingl\u00e9s\\', \\'script\\': \\'shaviano\\', \\'territory\\': \\'Reino Unido\\'}\\n\\n\\n### Recognizing language names in natural language\\n\\nAs the reverse of the above operations, you may want to look up a language by\\nits name, converting a natural language name such as \"French\" to a code such as\\n\\'fr\\'.\\n\\nThe name can be in any language that CLDR supports (see \"Ambiguity\" below).\\n\\n >>> import langcodes\\n >>> langcodes.find(\\'french\\')\\n Language.make(language=\\'fr\\')\\n\\n >>> langcodes.find(\\'franc\u00e9s\\')\\n Language.make(language=\\'fr\\')\\n\\nHowever, this method currently ignores the parenthetical expressions that come from\\n`.display_name()`:\\n\\n >>> langcodes.find(\\'English (Canada)\\')\\n Language.make(language=\\'en\\')\\n\\nThere is still room to improve the way that language names are matched, because\\nsome languages are not consistently named the same way. The method currently\\nworks with hundreds of language names that are used on Wiktionary.\\n\\n#### Ambiguity\\n\\nFor the sake of usability, `langcodes.find()` doesn\\'t require you to specify what\\nlanguage you\\'re looking up a language in by name. This could potentially lead to\\na conflict: what if name \"X\" is language A\\'s name for language B, and language C\\'s\\nname for language D?\\n\\nWe can collect the language codes from CLDR and see how many times this\\nhappens. In the majority of cases like that, B and D are codes whose names are\\nalso overlapping in the _same_ language and can be resolved by some general\\nprinciple.\\n\\nFor example, no matter whether you decide \"Tagalog\" refers to the language code\\n`tl` or the largely overlapping code `fil`, that distinction doesn\\'t depend on\\nthe language you\\'re saying \"Tagalog\" in. We can just return `tl` consistently.\\n\\n >>> langcodes.find(\\'tagalog\\')\\n Language.make(language=\\'tl\\')\\n\\nIn the few cases of actual interlingual ambiguity, langcodes won\\'t match a result.\\nYou can pass in a `language=` parameter to say what language the name is in.\\n\\nFor example, there are two distinct languages called \"Tonga\" in various languages.\\nThey are `to`, the language of Tonga which is called \"Tongan\" in English; and `tog`,\\na language of Malawi that can be called \"Nyasa Tonga\" in English.\\n\\n >>> langcodes.find(\\'tongan\\')\\n Language.make(language=\\'to\\')\\n\\n >>> langcodes.find(\\'nyasa tonga\\')\\n Language.make(language=\\'tog\\')\\n\\n >>> langcodes.find(\\'tonga\\')\\n Traceback (most recent call last):\\n ...\\n LookupError: Can\\'t find any language named \\'tonga\\'\\n\\n >>> langcodes.find(\\'tonga\\', language=\\'id\\')\\n Language.make(language=\\'to\\')\\n\\n >>> langcodes.find(\\'tonga\\', language=\\'ca\\')\\n Language.make(language=\\'tog\\')\\n\\nOther ambiguous names written in Latin letters are \"Kiga\", \"Mbundu\", \"Roman\", and \"Ruanda\".\\n\\n\\n## Demographic language data\\n\\nThe `Language.speaking_population()` and `Language.writing_population()`\\nmethods get Unicode\\'s estimates of how many people in the world use a\\nlanguage.\\n\\nAs with the language name data, this requires the optional `language_data`\\npackage to be installed.\\n\\n`.speaking_population()` estimates how many people speak a language. It can\\nbe limited to a particular territory with a territory code (such as a country\\ncode).\\n\\n >>> Language.get(\\'es\\').speaking_population()\\n 487664083\\n\\n >>> Language.get(\\'pt\\').speaking_population()\\n 237135429\\n\\n >>> Language.get(\\'es-BR\\').speaking_population()\\n 76218\\n\\n >>> Language.get(\\'pt-BR\\').speaking_population()\\n 192661560\\n\\n >>> Language.get(\\'vo\\').speaking_population()\\n 0\\n\\nScript codes will be ignored, because the script is not involved in speaking:\\n\\n >>> Language.get(\\'es-Hant\\').speaking_population() ==\\\\\\n ... Language.get(\\'es\\').speaking_population()\\n True\\n\\n`.writing_population()` estimates how many people write a language.\\n \\n >>> all = Language.get(\\'zh\\').writing_population()\\n >>> all\\n 1240326057\\n\\n >>> traditional = Language.get(\\'zh-Hant\\').writing_population()\\n >>> traditional\\n 37019589\\n\\n >>> simplified = Language.get(\\'zh-Hans\\').writing_population()\\n >>> all == traditional + simplified\\n True\\n\\nThe estimates for \"writing population\" are often overestimates, as described\\nin the [CLDR documentation on territory data][overestimates]. In most cases,\\nthey are derived from published data about literacy rates in the places where\\nthose languages are spoken. This doesn\\'t take into account that many literate\\npeople around the world speak a language that isn\\'t typically written, and\\nwrite in a _different_ language.\\n\\n[overestimates]: https:\/\/unicode-org.github.io\/cldr-staging\/charts\/39\/supplemental\/territory_language_information.html\\n\\nLike `.speaking_population()`, this can be limited to a particular territory:\\n\\n >>> Language.get(\\'zh-Hant-HK\\').writing_population()\\n 6439733\\n >>> Language.get(\\'zh-Hans-HK\\').writing_population()\\n 338933\\n\\n\\n## Comparing and matching languages\\n\\nThe `tag_distance` function returns a number from 0 to 134 indicating the\\ndistance between the language the user desires and a supported language.\\n\\nThe distance data comes from CLDR v38.1 and involves a lot of judgment calls\\nmade by the Unicode consortium.\\n\\n\\n### Distance values\\n\\nThis table summarizes the language distance values:\\n\\n| Value | Meaning | Example\\n| ----: | :------ | :------\\n| 0 | These codes represent the same language, possibly after filling in values and normalizing. | Norwegian Bokm\u00e5l \u2192 Norwegian\\n| 1-3 | These codes indicate a minor regional difference. | Australian English \u2192 British English\\n| 4-9 | These codes indicate a significant but unproblematic regional difference. | American English \u2192 British English\\n| 10-24 | A gray area that depends on your use case. There may be problems with understanding or usability. | Afrikaans \u2192 Dutch, Wu Chinese \u2192 Mandarin Chinese\\n| 25-50 | These languages aren\\'t similar, but there are demographic reasons to expect some intelligibility. | Tamil \u2192 English, Marathi \u2192 Hindi\\n| 51-79 | There are large barriers to understanding. | Japanese \u2192 Japanese in Hepburn romanization\\n| 80-99 | These are different languages written in the same script. | English \u2192 French, Arabic \u2192 Urdu\\n| 100+ | These languages have nothing particularly in common. | English \u2192 Japanese, English \u2192 Tamil\\n\\nSee the docstring of `tag_distance` for more explanation and examples.\\n\\n\\n### Finding the best matching language\\n\\nSuppose you have software that supports any of the `supported_languages`. The\\nuser wants to use `desired_language`.\\n\\nThe function `closest_supported_match(desired_language, supported_languages)`\\nlets you choose the right language, even if there isn\\'t an exact match.\\nIt returns the language tag of the best-supported language, even if there\\nisn\\'t an exact match.\\n\\nThe `max_distance` parameter lets you set a cutoff on what counts as language\\nsupport. It has a default of 25, a value that is probably okay for simple\\ncases of i18n, but you might want to set it lower to require more precision.\\n\\n >>> closest_supported_match(\\'fr\\', [\\'de\\', \\'en\\', \\'fr\\'])\\n \\'fr\\'\\n\\n >>> closest_supported_match(\\'pt\\', [\\'pt-BR\\', \\'pt-PT\\'])\\n \\'pt-BR\\'\\n\\n >>> closest_supported_match(\\'en-AU\\', [\\'en-GB\\', \\'en-US\\'])\\n \\'en-GB\\'\\n\\n >>> closest_supported_match(\\'af\\', [\\'en\\', \\'nl\\', \\'zu\\'])\\n \\'nl\\'\\n\\n >>> closest_supported_match(\\'und\\', [\\'en\\', \\'und\\'])\\n \\'und\\'\\n\\n >>> print(closest_supported_match(\\'af\\', [\\'en\\', \\'nl\\', \\'zu\\'], max_distance=10))\\n None\\n\\nA similar function is `closest_match(desired_language, supported_language)`,\\nwhich returns both the best matching language tag and the distance. If there is\\nno match, it returns (\\'und\\', 1000).\\n\\n >>> closest_match(\\'fr\\', [\\'de\\', \\'en\\', \\'fr\\'])\\n (\\'fr\\', 0)\\n\\n >>> closest_match(\\'sh\\', [\\'hr\\', \\'bs\\', \\'sr-Latn\\', \\'sr-Cyrl\\'])\\n (\\'sr-Latn\\', 0)\\n\\n >>> closest_match(\\'id\\', [\\'zsm\\', \\'mhp\\'])\\n (\\'zsm\\', 14)\\n\\n >>> closest_match(\\'ja\\', [\\'ja-Latn-hepburn\\', \\'en\\'])\\n (\\'und\\', 1000)\\n\\n >>> closest_match(\\'ja\\', [\\'ja-Latn-hepburn\\', \\'en\\'], max_distance=60)\\n (\\'ja-Latn-hepburn\\', 50)\\n\\n## Further API documentation\\n\\nThere are many more methods for manipulating and comparing language codes,\\nand you will find them documented thoroughly in [the code itself][code].\\n\\nThe interesting functions all live in this one file, with extensive docstrings\\nand annotations. Making a separate Sphinx page out of the docstrings would be\\nthe traditional thing to do, but here it just seems redundant. You can go read\\nthe docstrings in context, in their native habitat, and they\\'ll always be up to\\ndate.\\n\\n[Code with documentation][code]\\n\\n[code]: https:\/\/github.com\/rspeer\/langcodes\/blob\/master\/langcodes\/__init__.py\\n\\n# Changelog\\n\\n## Version 3.3 (November 2021)\\n\\n- Updated to CLDR v40.\\n\\n- Updated the IANA subtag registry to version 2021-08-06.\\n\\n- Bug fix: recognize script codes that appear in the IANA registry even if\\n they\\'re missing from CLDR for some reason. \\'cu-Cyrs\\' is valid, for example.\\n\\n- Switched the build system from `setuptools` to `poetry`.\\n\\nTo install the package in editable mode before PEP 660 is better supported, use\\n`poetry install` instead of `pip install -e .`.\\n\\n## Version 3.2 (October 2021)\\n\\n- Supports Python 3.6 through 3.10.\\n\\n- Added the top-level function `tag_is_valid(tag)`, for determining if a string\\n is a valid language tag without having to parse it first.\\n\\n- Added the top-level function `closest_supported_match(desired, supported)`,\\n which is similar to `closest_match` but with a simpler return value. It\\n returns the language tag of the closest match, or None if no match is close\\n enough.\\n\\n- Bug fix: a lot of well-formed but invalid language codes appeared to be\\n valid, such as \\'aaj\\' or \\'en-Latnx\\', because the regex could match a prefix of\\n a subtag. The validity regex is now required to match completely.\\n\\n- Bug fixes that address some edge cases of validity:\\n\\n - A language tag that is entirely private use, like \\'x-private\\', is valid\\n - A language tag that uses the same extension twice, like \\'en-a-bbb-a-ccc\\',\\n is invalid\\n - A language tag that uses the same variant twice, like \\'de-1901-1901\\', is\\n invalid\\n - A language tag with two extlangs, like \\'sgn-ase-bfi\\', is invalid\\n\\n- Updated dependencies so they are compatible with Python 3.10, including\\n switching back from `marisa-trie-m` to `marisa-trie` in `language_data`.\\n\\n- In bugfix release 3.2.1, corrected cases where the parser accepted\\n ill-formed language tags:\\n\\n - All subtags must be made of between 1 and 8 alphanumeric ASCII characters\\n - Tags with two extension \\'singletons\\' in a row (`en-a-b-ccc`) should be\\n rejected\\n\\n## Version 3.1 (February 2021)\\n\\n- Added the `Language.to_alpha3()` method, for getting a three-letter code for a\\n language according to ISO 639-2.\\n\\n- Updated the type annotations from obiwan-style to mypy-style.\\n\\n\\n## Version 3.0 (February 2021)\\n\\n- Moved bulky data, particularly language names, into a separate\\n `language_data` package. In situations where the data isn\\'t needed,\\n `langcodes` becomes a smaller, pure-Python package with no dependencies.\\n\\n- Language codes where the language segment is more than 4 letters no longer\\n parse: Language.get(\\'nonsense\\') now returns an error.\\n\\n (This is technically stricter than the parse rules of BCP 47, but there are\\n no valid language codes of this form and there should never be any. An\\n attempt to parse a language code with 5-8 letters is most likely a mistake or\\n an attempt to make up a code.)\\n\\n- Added a method for checking the validity of a language code.\\n\\n- Added methods for estimating language population.\\n\\n- Updated to CLDR 38.1, which includes differences in language matching.\\n\\n- Tested on Python 3.6 through 3.9; no longer tested on Python 3.5.\\n\\n\\n## Version 2.2 (February 2021)\\n\\n- Replaced `marisa-trie` dependency with `marisa-trie-m`, to achieve\\n compatibility with Python 3.9.\\n\\n\\n## Version 2.1 (June 2020)\\n\\n- Added the `display_name` method to be a more intuitive way to get a string\\n describing a language code, and made the `autonym` method use it instead of\\n `language_name`.\\n\\n- Updated to CLDR v37.\\n\\n- Previously, some attempts to get the name of a language would return its\\n language code instead, perhaps because the name was being requested in a\\n language for which CLDR doesn\\'t have name data. This is unfortunate because\\n names and codes should not be interchangeable.\\n\\n Now we fall back on English names instead, which exists for all IANA codes.\\n If the code is unknown, we return a string such as \"Unknown language [xx]\".\\n\\n\\n## Version 2.0 (April 2020)\\n\\nVersion 2.0 involves some significant changes that may break compatibility with 1.4,\\nin addition to updating to version 36.1 of the Unicode CLDR data and the April 2020\\nversion of the IANA subtag registry.\\n\\nThis version requires Python 3.5 or later.\\n\\n### Match scores replaced with distances\\n\\nOriginally, the goodness of a match between two different language codes was defined\\nin terms of a \"match score\" with a maximum of 100. Around 2016, Unicode started\\nreplacing this with a different measure, the \"match distance\", which was defined\\nmuch more clearly, but we had to keep using the \"match score\".\\n\\nAs of langcodes version 2.0, the \"score\" functions (such as\\n`Language.match_score`, `tag_match_score`, and `best_match`) are deprecated.\\nThey\\'ll keep using the deprecated language match tables from around CLDR 27.\\n\\nFor a better measure of the closeness of two language codes, use `Language.distance`,\\n`tag_distance`, and `closest_match`.\\n\\n### \\'region\\' renamed to \\'territory\\'\\n\\nWe were always out of step with CLDR here. Following the example of the IANA\\ndatabase, we referred to things like the \\'US\\' in \\'en-US\\' as a \"region code\",\\nbut the Unicode standards consistently call it a \"territory code\".\\n\\nIn langcodes 2.0, parameters, dictionary keys, and attributes named `region`\\nhave been renamed to `territory`. We try to support a few common cases with\\ndeprecation warnings, such as looking up the `region` property of a Language\\nobject.\\n\\nA nice benefit of this is that when a dictionary is displayed with \\'language\\',\\n\\'script\\', and \\'territory\\' keys in alphabetical order, they are in the same\\norder as they are in a language code.\\n\\n',\n'author': 'Elia Robyn Speer',\n'author_email': 'rspeer@arborelia.net',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/rspeer\/langcodes',\n'packages': packages,\n'package_data': package_data,\n'extras_require': extras_require,\n'python_requires': '>=3.6',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "lark-1.1.2",
        "file_list": "classes.rst conf.py features.md forest.rst grammar.md how_to_develop.md how_to_use.md index.rst json_tutorial.md make.bat Makefile parsers.md philosophy.md recipes.md requirements.txt tools.md tree_construction.md visitors.rst calc.py fruitflies.png fruitflies.py indented_tree.py json_parser.py lark_grammar.py turtle_dsl.py __init__.py ast_utils.py common.py exceptions.py grammar.py common.lark lark.lark python.lark unicode.lark indenter.py lark.py lexer.py load_grammar.py cyk.py earley.py earley_common.py earley_forest.py grammar_analysis.py lalr_analysis.py lalr_interactive_parser.py lalr_parser.py xearley.py __init__.py parser_frontends.py parse_tree_builder.py py.typed reconstruct.py nearley.py serialize.py standalone.py __init__.py tree.py tree_matcher.py tree_templates.py utils.py visitors.py __init__.py hook-lark.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py ab.lark leading_underscore_grammar.lark templates.lark test.lark test_relative_import_of_nested_grammar.lark test_relative_import_of_nested_grammar__grammar_to_import.lark test_relative_import_of_nested_grammar__nested_grammar.lark test_unicode.lark three_rules_using_same_token.lark test_cache.py test_grammar.py test_lexer.py test_logger.py include_unicode.ne unicode.ne test_nearley.py __init__.py test_parser.py test_python_grammar.py test_reconstructor.py test_relative_import.lark test_relative_import_preserves_leading_underscore.lark test_relative_import_rename.lark test_relative_import_rules_dependencies_imported_only_once.lark test_relative_import_unicode.lark test_relative_multi_import.lark test_relative_rule_import.lark test_relative_rule_import_drop_ignore.lark test_relative_rule_import_rename.lark test_relative_rule_import_subrule.lark test_relative_rule_import_subrule_no_conflict.lark test_templates_import.lark test_tools.py test_trees.py test_tree_forest_transformer.py test_tree_templates.py __init__.py __main__.py",
        "setup.py": "import re\nfrom setuptools import setup\n\n__version__ ,= re.findall('__version__: str = \"(.*)\"', open('lark\/__init__.py').read())\n\nsetup(\nname = \"lark\",\nversion = __version__,\npackages = ['lark', 'lark.parsers', 'lark.tools', 'lark.grammars', 'lark.__pyinstaller'],\n\nrequires = [],\ninstall_requires = [],\n\nextras_require = {\n\"regex\": [\"regex\"],\n\"nearley\": [\"js2py\"],\n\"atomic_cache\": [\"atomicwrites\"],\n},\n\npackage_data = {'': ['*.md', '*.lark'], 'lark': ['py.typed']},\n\ntest_suite = 'tests.__main__',\n\n# metadata for upload to PyPI\nauthor = \"Erez Shinan\",\nauthor_email = \"erezshin@gmail.com\",\ndescription = \"a modern parsing library\",\nlicense = \"MIT\",\nkeywords = \"Earley LALR parser parsing ast\",\nurl = \"https:\/\/github.com\/lark-parser\/lark\",\ndownload_url = \"https:\/\/github.com\/lark-parser\/lark\/tarball\/master\",\nlong_description='''\nLark is a modern general-purpose parsing library for Python.\n\nWith Lark, you can parse any context-free grammar, efficiently, with very little code.\n\nMain Features:\n- Builds a parse-tree (AST) automagically, based on the structure of the grammar\n- Earley parser\n- Can parse all context-free grammars\n- Full support for ambiguous grammars\n- LALR(1) parser\n- Fast and light, competitive with PLY\n- Can generate a stand-alone parser\n- CYK parser, for highly ambiguous grammars\n- EBNF grammar\n- Unicode fully supported\n- Automatic line & column tracking\n- Standard library of terminals (strings, numbers, names, etc.)\n- Import grammars from Nearley.js\n- Extensive test suite\n- And much more!\n\nSince version 1.0, only Python versions 3.6 and up are supported.\n''',\n\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Programming Language :: Python :: 3\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Topic :: Text Processing :: General\",\n\"Topic :: Text Processing :: Linguistic\",\n\"License :: OSI Approved :: MIT License\",\n],\nentry_points = {\n'pyinstaller40': [\n'hook-dirs = lark.__pyinstaller:get_hook_dirs'\n]\n},\n)\n\n"
    },
    {
        "package_name": "lazy-object-proxy-1.7.1",
        "file_list": ".bumpversion.cfg .cookiecutterrc .coveragerc .editorconfig FUNDING.yml github-actions.yml .gitignore .pre-commit-config.yaml .readthedocs.yml AUTHORS.rst CHANGELOG.rst bootstrap.py requirements.txt github-actions.yml conftest.py CONTRIBUTING.rst authors.rst changelog.rst conf.py contributing.rst index.rst installation.rst readme.rst requirements.txt spelling_wordlist.txt usage.rst LICENSE PKG-INFO pyproject.toml README.rst setup.cfg setup.py cext.c compat.py simple.py slots.py utils.py utils_py3.py _version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt compat.py conftest.py test_async_py3.py test_lazy_object_proxy.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- encoding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nimport io\nimport os\nimport platform\nimport re\nimport sys\nfrom glob import glob\nfrom os.path import basename\nfrom os.path import dirname\nfrom os.path import join\nfrom os.path import relpath\nfrom os.path import splitext\n\nfrom setuptools import Extension\nfrom setuptools import find_packages\nfrom setuptools import setup\nfrom setuptools.command.build_ext import build_ext\nfrom setuptools.dist import Distribution\n\n# Enable code coverage for C code: we can't use CFLAGS=-coverage in tox.ini, since that may mess with compiling\n# dependencies (e.g. numpy). Therefore we set SETUPPY_CFLAGS=-coverage in tox.ini and copy it to CFLAGS here (after\n# deps have been safely installed).\nif 'TOX_ENV_NAME' in os.environ and os.environ.get('SETUPPY_EXT_COVERAGE') == 'yes' and platform.system() == 'Linux':\nCFLAGS = os.environ['CFLAGS'] = '-fprofile-arcs -ftest-coverage'\nLFLAGS = os.environ['LFLAGS'] = '-lgcov'\nelse:\nCFLAGS = ''\nLFLAGS = ''\n\n\nclass OptionalBuildExt(build_ext):\n\"\"\"Allow the building of C extensions to fail.\"\"\"\ndef run(self):\ntry:\nsuper().run()\nexcept Exception as e:\nself._unavailable(e)\nself.extensions = [] # avoid copying missing files (it would fail).\n\ndef _unavailable(self, e):\nprint('*' * 80)\nprint('''WARNING:\n\nAn optional code optimization (C extension) could not be compiled.\n\nOptimizations for this package will not be available!\n''')\n\nprint('CAUSE:')\nprint('')\nprint(' ' + repr(e))\nprint('*' * 80)\n\n\ndef read(*names, **kwargs):\nwith io.open(\njoin(dirname(__file__), *names),\nencoding=kwargs.get('encoding', 'utf8')\n) as fh:\nreturn fh.read()\n\n\nclass BinaryDistribution(Distribution):\n\"\"\"Distribution which almost always forces a binary package with platform name\"\"\"\ndef has_ext_modules(self):\nreturn super().has_ext_modules() or not os.environ.get('SETUPPY_ALLOW_PURE')\n\n\nsetup(\nname='lazy-object-proxy',\nuse_scm_version={\n'local_scheme': 'dirty-tag',\n'write_to': 'src\/lazy_object_proxy\/_version.py',\n'fallback_version': '1.7.1',\n},\nlicense='BSD-2-Clause',\ndescription='A fast and thorough lazy object proxy.',\nlong_description='%s\\n%s' % (\nre.compile('^.. start-badges.*^.. end-badges', re.M | re.S).sub('', read('README.rst')),\nre.sub(':[a-z]+:`~?(.*?)`', r'``\\1``', read('CHANGELOG.rst'))\n),\nauthor='Ionel Cristian M\u0103rie\u0219',\nauthor_email='contact@ionelmc.ro',\nurl='https:\/\/github.com\/ionelmc\/python-lazy-object-proxy',\npackages=find_packages('src'),\npackage_dir={'': 'src'},\npy_modules=[splitext(basename(path))[0] for path in glob('src\/*.py')],\ninclude_package_data=False,\nzip_safe=False,\nclassifiers=[\n# complete classifier list: http:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: Unix',\n'Operating System :: POSIX',\n'Operating System :: Microsoft :: Windows',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3 :: Only',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n# uncomment if you test on these interpreters:\n# 'Programming Language :: Python :: Implementation :: IronPython',\n# 'Programming Language :: Python :: Implementation :: Jython',\n# 'Programming Language :: Python :: Implementation :: Stackless',\n'Topic :: Utilities',\n],\nproject_urls={\n'Documentation': 'https:\/\/python-lazy-object-proxy.readthedocs.io\/',\n'Changelog': 'https:\/\/python-lazy-object-proxy.readthedocs.io\/en\/latest\/changelog.html',\n'Issue Tracker': 'https:\/\/github.com\/ionelmc\/python-lazy-object-proxy\/issues',\n},\nkeywords=[\n# eg: 'keyword1', 'keyword2', 'keyword3',\n],\npython_requires='>=3.6',\ninstall_requires=[\n# eg: 'aspectlib==1.1.1', 'six>=1.7',\n],\nextras_require={\n# eg:\n# 'rst': ['docutils>=0.11'],\n# ':python_version==\"2.6\"': ['argparse'],\n},\ncmdclass={'build_ext': OptionalBuildExt},\next_modules=[] if hasattr(sys, 'pypy_version_info') else [\nExtension(\nsplitext(relpath(path, 'src').replace(os.sep, '.'))[0],\nsources=[path],\nextra_compile_args=CFLAGS.split(),\nextra_link_args=LFLAGS.split(),\ninclude_dirs=[dirname(path)]\n)\nfor root, _, _ in os.walk('src')\nfor path in glob(join(root, '*.c'))\n],\ndistclass=BinaryDistribution,\n)\n"
    },
    {
        "package_name": "ldap3-2.9.1",
        "file_list": "COPYING.LESSER.txt COPYING.txt attrDef.py attribute.py cursor.py entry.py objectDef.py __init__.py connection.py exceptions.py pooling.py rdns.py results.py server.py timezone.py tls.py usage.py __init__.py addMembersToGroups.py dirSync.py modifyPassword.py persistentSearch.py removeMembersFromGroups.py unlockAccount.py __init__.py addMembersToGroups.py checkGroupsMemberships.py endTransaction.py getBindDn.py listReplicas.py nmasGetUniversalPassword.py nmasSetUniversalPassword.py partition_entry_count.py removeMembersFromGroups.py replicaInfo.py startTransaction.py __init__.py operation.py modifyPassword.py PagedSearch.py PersistentSearch.py whoAmI.py __init__.py __init__.py abandon.py add.py bind.py compare.py delete.py extended.py modify.py modifyDn.py search.py unbind.py __init__.py controls.py convert.py formatters.py standard.py validators.py __init__.py microsoft.py novell.py oid.py persistentSearch.py rfc2696.py rfc2849.py rfc3062.py rfc4511.py rfc4512.py rfc4527.py digestMd5.py external.py kerberos.py plain.py sasl.py __init__.py ad2012R2.py ds389.py edir888.py edir914.py slapd24.py __init__.py __init__.py asynchronous.py asyncStream.py base.py ldifProducer.py mockAsync.py mockBase.py mockSync.py restartable.py reusable.py safeRestartable.py safeSync.py sync.py __init__.py asn1.py ciDict.py config.py conv.py dn.py hashed.py log.py ntlm.py ordDict.py port_validators.py repr.py tls_backport.py uri.py __init__.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py testAbandonOperation.py testAbstractionAuxiliaryClass.py testAbstractionDefs.py testAbstractionDefsFromSchema.py testAbstractionSearch.py testAbstractionWrite.py testAddMembersToGroups.py testAddOperation.py testBindOperation.py testBytesOperation.py testCaseInsensitiveDictionary.py testCaseInsensitiveWithAliasDictionary.py testCheckedAttributes.py testCheckGroupMembership.py testCheckNamesFalse.py testCheckNamesTrue.py testCompareOperation.py testConnection.py testControls.py testDeleteOperation.py testDnParsing.py testExceptions.py testExtendedOperations.py testExtensions.py testFormatGeneralizedTime.py testLDIF-change.py testLDIF-content.py testMicrosoftAD.py testMockASyncStrategy.py testMockBase.py testMockSyncStrategy.py testModifyDNOperation.py testModifyOperation.py testOfflineSchema.py testParseSearchFilter.py testRdns.py testRebindOperation.py testRemoveMembersFromGroups.py testRestartable.py testSaslPrep.py testSchema.py testSearchAndModifyEntries.py testSearchOperation.py testSearchOperationEntries.py testSearchOperationJSON.py testTls.py testTransactions.py testValidators.py testWriterCursor.py _version.json",
        "setup.py": "\"\"\"\n\"\"\"\n\n# Created on 2013.07.11\n#\n# Author: Giovanni Cannata\n#\n# Copyright 2013 - 2018 Giovanni Cannata\n#\n# This file is part of ldap3.\n# ldap3 is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU Lesser General Public License as published\n# by the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# ldap3 is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with ldap3 in the COPYING and COPYING.LESSER files.\n# If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\nimport os\nimport glob\nimport shutil\nfrom json import load\nfrom distutils.command.clean import clean\nfrom distutils import log\nfrom setuptools import setup\n\nversion_dict = load(open('_version.json', 'r'))\nversion = str(version_dict['version'])\nauthor = str(version_dict['author'])\nemail = str(version_dict['email'])\nlicense = str(version_dict['license'])\nurl = str(version_dict['url'])\ndescription = str(version_dict['description'])\npackage_name = str(version_dict['package_name'])\npackage_folder = str(version_dict['package_folder'])\nstatus = str(version_dict['status'])\n\nlong_description = str(open('README.rst').read())\npackages=['ldap3',\n'ldap3.abstract',\n'ldap3.core',\n'ldap3.operation',\n'ldap3.protocol',\n'ldap3.protocol.sasl',\n'ldap3.protocol.schemas',\n'ldap3.protocol.formatters',\n'ldap3.strategy',\n'ldap3.utils',\n'ldap3.extend',\n'ldap3.extend.novell',\n'ldap3.extend.microsoft',\n'ldap3.extend.standard']\n\nsetup_kwargs = {'packages': packages,\n'package_dir': {'': package_folder}}\n\n\nclass Clean(clean):\ndef run(self):\nclean.run(self)\n# Let's clean compiled *.py[c,o] *.c *.so\nfor subdir in ('ldap3',):\nroot = os.path.join(os.path.dirname(__file__), subdir)\nfor dirname, dirs, _ in os.walk(root):\nfor to_remove_filename in glob.glob('{0}\/*.py[ocx]'.format(dirname)):\nos.remove(to_remove_filename)\nfor to_remove_filename in glob.glob('{0}\/*.c'.format(dirname)):\nos.remove(to_remove_filename)\nfor to_remove_filename in glob.glob('{0}\/*.so'.format(dirname)):\nos.remove(to_remove_filename)\nfor dir_ in dirs:\nif dir_ == '__pycache__':\nshutil.rmtree(os.path.join(dirname, dir_))\n\n\nsetup_kwargs['cmdclass'] = {'clean': Clean}\n\n\nsetup(name=package_name,\nversion=version,\ninstall_requires=[i.strip() for i in open('requirements.txt').readlines()],\nlicense=license,\nauthor=author,\nauthor_email=email,\ndescription=description,\nlong_description=long_description,\nkeywords='python3 python2 ldap',\nurl=url,\nclassifiers=['Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: POSIX :: Linux',\n'License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 3',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: System :: Systems Administration :: Authentication\/Directory :: LDAP'],\n**setup_kwargs\n)\n"
    },
    {
        "package_name": "libclang-14.0.6",
        "file_list": "cindex.py enumerations.py __init__.py __init__.py LICENSE.TXT PKG-INFO cindex.py enumerations.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport os\nfrom setuptools import setup, find_packages\n\n\nwith open(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'README.md'), encoding='utf-8', mode='r') as fp:\nlong_description = fp.read()\n\nsetup(\nname='libclang',\nversion='14.0.6',\ndescription='Clang Python Bindings, mirrored from the official LLVM repo: https:\/\/github.com\/llvm\/llvm-project\/tree\/main\/clang\/bindings\/python, to make the installation process easier.',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nauthor='Tao He',\nauthor_email='sighingnow@gmail.com',\nurl='https:\/\/github.com\/sighingnow\/libclang',\nlicense='Apache License 2.0',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n\"Topic :: Software Development :: Compilers\",\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: POSIX',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: 3.11',\n'Programming Language :: Python :: 3.12',\n\"License :: OSI Approved :: Apache Software License\",\n],\nplatforms='any',\nkeywords='Clang Python Bindings',\n\n\nzip_safe=False,\n\npackage_dir={'': 'python'},\npackages=find_packages('python'),\n\ntest_suite='python\/tests',\n\nproject_urls={\n'Documentation': 'https:\/\/libclang.readthedocs.io',\n'Source': 'https:\/\/github.com\/sighingnow\/libclang',\n'Tracker': 'https:\/\/github.com\/sighingnow\/libclang\/issues',\n},\n)\n"
    },
    {
        "package_name": "libpysal-4.6.2",
        "file_list": "authors.txt CHANGELOG.md alpha_shapes.py kdtree.py locators.py atomic.py tabular.py test_accessors.py test_shapely.py test_tabular.py __init__.py _accessors.py _shapely.py __init__.py polygonQuadTreeStructure.py rtree.py segmentLocator.py shapely_ext.py shapes.py sphere.py standalone.py test_ashapes.py test_geoJSON.py test_locators.py test_polygonQuadTreeStructure.py test_rtree.py test_segmentLocator.py test_shapes.py test_sphere.py test_standalone.py test_voronoi.py __init__.py voronoi.py __init__.py common.py 10740.dbf 10740.shp 10740.shx 10740_queen.gal 10740_rook.gal README.md arcgis_ohio.dbf arcgis_txt.txt README.md baltim.dbf baltim.shp baltim.shx baltim.tri.k12.kwt baltimore.geojson baltim_k4.gwt baltim_q.gal README.md base.py prenzlauer.zip prenz_bound.zip README.md book.gal book.txt README.md builtin.py burkitt.dbf burkitt.shp burkitt.shx README.md calempdensity.csv README.md Chicago77.dbf Chicago77.shp Chicago77.shx README.md columbus.dbf columbus.gal columbus.html columbus.json columbus.shp columbus.shx README.md desmith.gal desmith.txt README.md crimes.dbf crimes.prj crimes.sbn crimes.sbx crimes.shp crimes.shp.xml crimes.shx README.md schools.dbf schools.prj schools.sbn schools.sbx schools.shp schools.shp.xml schools.shx streets.dbf streets.prj streets.sbn streets.sbx streets.shp streets.shx err.p FB.p GData_utm.csv georgia_BS_F.ctl georgia_BS_F_listwise.csv georgia_BS_F_summary.txt georgia_BS_NN.ctl georgia_BS_NN_listwise.csv georgia_BS_NN_summary.txt georgia_GS_F.ctl georgia_GS_F_listwise.csv georgia_GS_F_summary.txt georgia_GS_NN.ctl georgia_GS_NN_listwise.csv georgia_GS_NN_summary.txt G_utm.cpg G_utm.dbf G_utm.sbn G_utm.sbx G_utm.shp G_utm.shx README.md XB.p juvenile.dbf juvenile.gwt juvenile.shp juvenile.shx README.md Line.dbf Line.prj Line.shp Line.shx README.md mexico.csv mexico.gal mexicojoin.dbf mexicojoin.prj mexicojoin.shp mexicojoin.shx README.md eberly_net.dbf eberly_net.shp eberly_net.shx eberly_net_pts_offnetwork.dbf eberly_net_pts_offnetwork.shp eberly_net_pts_offnetwork.shx eberly_net_pts_onnetwork.dbf eberly_net_pts_onnetwork.shp eberly_net_pts_onnetwork.shx nonplanarsegments.dbf nonplanarsegments.prj nonplanarsegments.qpj nonplanarsegments.shp nonplanarsegments.shx README.md Point.dbf Point.prj Point.shp Point.shx README.md Polygon.dbf Polygon.prj Polygon.shp Polygon.shx README.md Polygon_Holes.cpg Polygon_Holes.dbf Polygon_Holes.prj Polygon_Holes.qpj Polygon_Holes.shp Polygon_Holes.shx README.md remotes.py README.md sids2.dbf sids2.gal sids2.html sids2.shp sids2.shx sids2.swm README.md SohoPeople.dbf SohoPeople.prj SohoPeople.sbn SohoPeople.sbx SohoPeople.shp SohoPeople.shx SohoWater.dbf SohoWater.prj SohoWater.sbn SohoWater.sbx SohoWater.shp SohoWater.shx Soho_Network.dbf Soho_Network.prj Soho_Network.sbn Soho_Network.sbx Soho_Network.shp Soho_Network.shx README.md stl.gal stl_hom.csv stl_hom.dbf stl_hom.html stl_hom.shp stl_hom.shx stl_hom.txt stl_hom.wkt stl_hom_rook.gal README.md street_net_pts.dbf street_net_pts.prj street_net_pts.qpj street_net_pts.shp street_net_pts.shx test_available.py __init__.py README.md Readme_tokyomortality.txt SampleTokyoMortalityGWPR.ctl tokyomet262.dbf tokyomet262.prj tokyomet262.shp tokyomet262.shp.xml tokyomet262.shx Tokyomortality.csv Tokyomortality.txt tokyo_BS_F.ctl tokyo_BS_F_listwise.csv tokyo_BS_F_summary.txt tokyo_BS_NN.ctl tokyo_BS_NN_listwise.csv tokyo_BS_NN_OFF.ctl tokyo_BS_NN_OFF_listwise.csv tokyo_BS_NN_OFF_summary.txt tokyo_BS_NN_summary.txt tokyo_GS_F.ctl tokyo_GS_F_listwise.csv tokyo_GS_F_summary.txt tokyo_GS_NN.ctl tokyo_GS_NN_listwise.csv tokyo_GS_NN_summary.txt README.md spi_download.csv states48.gal us48.dbf us48.shp us48.shx usjoin.csv README.md vautm17n.dbf vautm17n.prj vautm17n.qpj vautm17n.shp vautm17n.shx vautm17n_points.dbf vautm17n_points.prj vautm17n_points.qpj vautm17n_points.shp vautm17n_points.shx virginia.dbf virginia.gal virginia.json virginia.prj virginia.shp virginia.shx virginia_queen.dat virginia_queen.dbf virginia_queen.gal virginia_queen.mat virginia_queen.mtx virginia_queen.swm virginia_queen.txt virginia_queen.wk1 virginia_rook.gal geobugs_scot lattice10x10.shp lattice10x10.shx ohio.swm README.md rook31.dbf rook31.gal rook31.shp rook31.shx spat-sym-us.mat spat-sym-us.wk1 spdep_listw2WB_columbus stata_full.txt stata_sparse.txt us48_CONTIGUITY_EDGES_ONLY.swm us48_INVERSE_DISTANCE.swm wmat.dat wmat.mtx __init__.py fileio.py dbf.py file.py shp.py test_utils.py __init__.py utils.py wrappers.py __init__.py arcgis_dbf.py arcgis_swm.py arcgis_txt.py csvWrapper.py dat.py db.py gal.py geobugs_txt.py geoda_txt.py gwt.py mat.py mtx.py pyDbfIO.py pyShpIO.py stata_txt.py template.py test_arcgis_dbf.py test_arcgis_swm.py test_arcgis_txt.py test_csvWrapper.py test_dat.py test_db.py test_gal.py test_geobugs_txt.py test_geoda_txt.py test_gwt.py test_mat.py test_mtx.py test_pyDbfIO.py test_pyShpIO.py test_stata_txt.py test_wk1.py test_wkt.py __init__.py wk1.py wkt.py __init__.py tables.py test_FileIO.py test_Tables.py __init__.py shapefile.py test_shapefile.py test_weight_converter.py test_wkt.py __init__.py weight_converter.py wkb.py wkt.py __init__.py __init__.py test_NameSpace.py adjtools.py contiguity.py distance.py gabriel.py raster.py set_operations.py spatial_lag.py spintW.py test.py test_adjlist.py test_contiguity.py test_distance.py test_gabriel.py test_nx.py test_raster.py test_spatial_lag.py test_spintW.py test_user.py test_util.py test_weights.py test_weights_IO.py test_Wsets.py test__contW_lists.py __init__.py user.py util.py weights.py _contW_lists.py __init__.py _version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.rst requirements.txt requirements_dev.txt requirements_docs.txt requirements_plus_conda.txt requirements_plus_pip.txt setup.cfg setup.py THANKS.txt versioneer.py",
        "setup.py": "# coding: utf-8\n\nfrom setuptools import setup, find_packages\nimport versioneer\n\nfrom distutils.command.build_py import build_py\n\nimport os\n\nwith open(\"README.rst\", \"r\", encoding=\"utf8\") as file:\nlong_description = file.read()\n\n# BEFORE importing distutils, remove MANIFEST. distutils doesn't properly\n# update it when the contents of directories change.\nif os.path.exists(\"MANIFEST\"):\nos.remove(\"MANIFEST\")\n\n\ndef _get_requirements_from_files(groups_files):\ngroups_reqlist = {}\n\nfor k, v in groups_files.items():\nwith open(v, \"r\") as f:\npkg_list = f.read().splitlines()\ngroups_reqlist[k] = pkg_list\n\nreturn groups_reqlist\n\n\ndef setup_package():\n# get all file endings and copy whole file names without a file suffix\n# assumes nested directories are only down one level\n_groups_files = {\n\"base\": \"requirements.txt\",\n\"plus_conda\": \"requirements_plus_conda.txt\",\n\"plus_pip\": \"requirements_plus_pip.txt\",\n\"dev\": \"requirements_dev.txt\",\n\"docs\": \"requirements_docs.txt\",\n}\n\nreqs = _get_requirements_from_files(_groups_files)\ninstall_reqs = reqs.pop(\"base\")\nextras_reqs = reqs\n\n# get all file endings and copy whole file names without a file suffix\n# assumes nested directories are only down one level\nexample_data_files = set()\nfor i in os.listdir(\"libpysal\/examples\"):\nif i.endswith((\"py\", \"pyc\")):\ncontinue\nif not os.path.isdir(\"libpysal\/examples\/\" + i):\nif \".\" in i:\nglob_name = \"examples\/*.\" + i.split(\".\")[-1]\nelse:\nglob_name = \"examples\/\" + i\nelse:\nglob_name = \"examples\/\" + i + \"\/*\"\n\nexample_data_files.add(glob_name)\n\nsetup(\nname=\"libpysal\",\nversion=versioneer.get_version(),\ndescription=\"Core components of PySAL A library of spatial analysis functions.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/x-rst\",\nmaintainer=\"PySAL Developers\",\nmaintainer_email=\"pysal-dev@googlegroups.com\",\nurl=\"http:\/\/pysal.org\/libpysal\",\ndownload_url=\"https:\/\/pypi.python.org\/pypi\/libpysal\",\nlicense=\"BSD\",\npy_modules=[\"libpysal\"],\npackages=find_packages(),\nsetup_requires=[\"pytest-runner\"],\ntests_require=[\"pytest\"],\nkeywords=\"spatial statistics\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Science\/Research\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Education\",\n\"Topic :: Scientific\/Engineering\",\n\"Topic :: Scientific\/Engineering :: GIS\",\n\"License :: OSI Approved :: BSD License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\npackage_data={\"libpysal\": list(example_data_files)},\ninstall_requires=install_reqs,\nextras_require=extras_reqs,\ncmdclass=versioneer.get_cmdclass({\"build_py\": build_py}),\npython_requires=\">=3.7\",\n)\n\n\nif __name__ == \"__main__\":\nsetup_package()\n"
    },
    {
        "package_name": "libreoffice_convert-1.0",
        "file_list": "commands.py converter.py document_types.py __init__.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python3\n\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\nsetup(\nname=\"libreoffice_convert\",\nversion=\"1.0\",\ndescription=\"Python module using LibreOffice API to convert file format to another file format\",\nauthor=\"Ferdinand Silva\",\nauthor_email=\"ferdinandsilva@ferdinandsilva.com\",\npackages=[\"libreoffice_convert\"],\nurl=\"http:\/\/ferdinandsilva.com\",\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"Natural Language :: English\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"License :: Freeware\",\n],\nentry_points = {\n\"console_scripts\": [\n\"libreoffice_convert = libreoffice_convert.commands:libreoffice_convert\"]\n},\ndownload_url=\"http:\/\/ferdinandsilva.com\",\n)"
    },
    {
        "package_name": "libretranslatepy-2.1.2",
        "file_list": "api.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from setuptools import find_packages, setup\n\nsetup(name='libretranslatepy',\nversion='2.1.2',\ndescription='Python bindings for LibreTranslate API',\nkeywords=\"translation libretranslate\",\nurl='https:\/\/github.com\/argosopentech\/LibreTranslate-py',\npython_requires=\">=2.6\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Topic :: Scientific\/Engineering :: Interface Engine\/Protocol Translator\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 3\",\n],\nproject_urls={\n\"Bug Reports\": \"https:\/\/github.com\/argosopentech\/LibreTranslate-py\/issues\",\n\"Source\": \"https:\/\/github.com\/argosopentech\/LibreTranslate-py\/\",\n},\npackages=find_packages()\n)\n"
    },
    {
        "package_name": "line_profiler-3.5.1",
        "file_list": "CHANGELOG.rst CMakeLists.txt kernprof.py LICENSE.txt LICENSE_Python.txt CMakeLists.txt ipython_extension.py line_profiler.py python25.pxd timers.c timers.h unset_trace.c unset_trace.h _line_profiler.pyx __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO pyproject.toml README.rst build.txt ipython.txt runtime.txt tests.txt requirements.txt run_tests.py setup.cfg setup.py test_cli.py test_ipython.py test_kernprof.py test_line_profiler.py kernprof.py line_profiler.py _line_profiler.cpython-38- __init__.py __main__.py _line_profiler.cpython-39-",
        "setup.py": "#!\/usr\/bin\/env python\nfrom os.path import exists\nimport sys\nimport setuptools # NOQA\nfrom setuptools import find_packages\n\n\ndef parse_version(fpath):\n\"\"\"\nStatically parse the version number from a python file\n\"\"\"\nimport ast\nif not exists(fpath):\nraise ValueError('fpath={!r} does not exist'.format(fpath))\nwith open(fpath, 'r') as file_:\nsourcecode = file_.read()\npt = ast.parse(sourcecode)\nclass Finished(Exception):\npass\nclass VersionVisitor(ast.NodeVisitor):\ndef visit_Assign(self, node):\nfor target in node.targets:\nif getattr(target, 'id', None) == '__version__':\nself.version = node.value.s\nraise Finished\nvisitor = VersionVisitor()\ntry:\nvisitor.visit(pt)\nexcept Finished:\npass\nreturn visitor.version\n\n\ndef parse_description():\n\"\"\"\nParse the description in the README file\n\nCommandLine:\npandoc --from=markdown --to=rst --output=README.rst README.md\npython -c \"import setup; print(setup.parse_description())\"\n\"\"\"\nfrom os.path import dirname, join, exists\nreadme_fpath = join(dirname(__file__), 'README.rst')\n# This breaks on pip install, so check that it exists.\nif exists(readme_fpath):\nwith open(readme_fpath, 'r') as f:\ntext = f.read()\nreturn text\nreturn ''\n\n\ndef parse_requirements(fname='requirements.txt', with_version=True):\n\"\"\"\nParse the package dependencies listed in a requirements file but strips\nspecific versioning information.\n\nArgs:\nfname (str): path to requirements file\nwith_version (bool, default=True): if true include version specs\n\nReturns:\nList[str]: list of requirements items\n\nReferences:\nhttps:\/\/pip.pypa.io\/en\/stable\/reference\/pip_install\/#requirement-specifiers\nhttps:\/\/www.python.org\/dev\/peps\/pep-0440\/#version-specifiers\n\nCommandLine:\npython -c \"import setup; print(setup.parse_requirements())\"\npython -c \"import setup; print(chr(10).join(setup.parse_requirements(with_version=True)))\"\n\"\"\"\nfrom os.path import exists\nimport re\nrequire_fpath = fname\n\ndef parse_line(line):\n\"\"\"\nParse information from a line in a requirements text file\n\nIgnore:\nline = 'foobar >=1.0, <= 2.1'\n\"\"\"\nif line.startswith('-r '):\n# Allow specifying requirements in other files\ntarget = line.split(' ')[1]\nfor info in parse_require_file(target):\nyield info\nelse:\ninfo = {'line': line}\nif line.startswith('-e '):\ninfo['package'] = line.split('#egg=')[1]\nelse:\n# Remove versioning from the package\ncmp_ops = ['>=', '>', '<=', '<', '!=', '~=', '==', '===']\npat = '(' + '|'.join(cmp_ops) + ')'\nparts = re.split(pat, line, maxsplit=1)\nparts = [p.strip() for p in parts]\n\ninfo['package'] = parts[0]\nif len(parts) > 1:\nop1, rest = parts[1:]\nif ';' in rest:\n# Handle platform specific dependencies\n# http:\/\/setuptools.readthedocs.io\/en\/latest\/setuptools.html#declaring-platform-specific-dependencies\nversion_rest, platform_deps = map(str.strip, rest.split(';'))\ninfo['platform_deps'] = platform_deps\nelse:\nversion_rest = rest # NOQA\n# Multiple version requirments may be specified\nversion = []\nversion_text = op1 + version_rest\nfor clause in version_text.split(','):\ncparts = [p.strip() for p in re.split(pat, clause)]\ncparts = [p for p in cparts if p]\nversion.append(cparts)\ninfo['version'] = version\nyield info\n\ndef parse_require_file(fpath):\nwith open(fpath, 'r') as f:\nfor line in f.readlines():\nline = line.strip()\nif line and not line.startswith('#'):\nfor info in parse_line(line):\nyield info\n\ndef gen_packages_items():\nif exists(require_fpath):\nfor info in parse_require_file(require_fpath):\nparts = [info['package']]\nif 'version' in info:\n# FIXME: add mode that lets you exclude minimum reqs\nclauses = []\nfor clause in info['version']:\nop, arg = clause\nif with_version:\nclauses.append(op + arg)\nversion_part = ','.join(clauses)\nparts.append(version_part)\nif not sys.version.startswith('3.4'):\n# apparently package_deps are broken in 3.4\nplatform_deps = info.get('platform_deps')\nif platform_deps is not None:\nparts.append(';' + platform_deps)\nitem = ''.join(parts)\nyield item\n\npackages = list(gen_packages_items())\nreturn packages\n\n\ndef native_mb_python_tag(plat_impl=None, version_info=None):\n\"\"\"\nGet the correct manylinux python version tag for this interpreter\n\nExample:\n>>> print(native_mb_python_tag())\n>>> print(native_mb_python_tag('PyPy', (2, 7)))\n>>> print(native_mb_python_tag('CPython', (3, 8)))\n\"\"\"\nif plat_impl is None:\nimport platform\nplat_impl = platform.python_implementation()\n\nif version_info is None:\nimport sys\nversion_info = sys.version_info\n\nmajor, minor = version_info[0:2]\nif minor > 9:\nver = '{}_{}'.format(major, minor)\nelse:\nver = '{}{}'.format(major, minor)\n\nif plat_impl == 'CPython':\n# TODO: get if cp27m or cp27mu\nimpl = 'cp'\nif ver == '27':\nIS_27_BUILT_WITH_UNICODE = True # how to determine this?\nif IS_27_BUILT_WITH_UNICODE:\nabi = 'mu'\nelse:\nabi = 'm'\nelse:\nif sys.version_info[:2] >= (3, 8):\n# bpo-36707: 3.8 dropped the m flag\nabi = ''\nelse:\nabi = 'm'\nmb_tag = '{impl}{ver}-{impl}{ver}{abi}'.format(**locals())\nelif plat_impl == 'PyPy':\nabi = ''\nimpl = 'pypy'\nver = '{}{}'.format(major, minor)\nmb_tag = '{impl}-{ver}'.format(**locals())\nelse:\nraise NotImplementedError(plat_impl)\nreturn mb_tag\n\n\nlong_description = \"\"\"\\\nline_profiler will profile the time individual lines of code take to execute.\nThe profiler is implemented in C via Cython in order to reduce the overhead of\nprofiling.\n\nAlso included is the script kernprof.py which can be used to conveniently\nprofile Python applications and scripts either with line_profiler or with the\nfunction-level profiling tools in the Python standard library.\n\"\"\"\n\nVERSION = parse_version('line_profiler\/line_profiler.py')\nMB_PYTHON_TAG = native_mb_python_tag()\nNAME = 'line_profiler'\n\n\nif __name__ == '__main__':\nif '--universal' in sys.argv:\n# Dont use scikit-build for universal wheels\n# if 'develop' in sys.argv:\nsys.argv.remove('--universal')\nfrom setuptools import setup # NOQA\nelse:\nfrom skbuild import setup\nsetupkw = dict(\nname=NAME,\nversion=VERSION,\nauthor='Robert Kern',\nauthor_email='robert.kern@enthought.com',\ndescription='Line-by-line profiler.',\nlong_description=long_description,\nlong_description_content_type='text\/x-rst',\nurl='https:\/\/github.com\/pyutils\/line_profiler',\nlicense='BSD',\nlicense_files=['LICENSE.txt', 'LICENSE_Python.txt'],\nkeywords=['timing', 'timer', 'profiling', 'profiler', 'line_profiler'],\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: C',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: Implementation :: CPython',\n'Topic :: Software Development',\n],\n# py_modules=find_packages(),\npackages=list(find_packages()),\npy_modules=['kernprof', 'line_profiler'],\nentry_points={\n'console_scripts': [\n'kernprof=kernprof:main',\n],\n},\ninstall_requires=parse_requirements('requirements\/runtime.txt'),\nextras_require={\n'all': parse_requirements('requirements.txt'),\n'ipython': parse_requirements('requirements\/ipython.txt'),\n'tests': parse_requirements('requirements\/tests.txt'),\n'build': parse_requirements('requirements\/build.txt'),\n},\n)\nsetup(**setupkw)\n"
    },
    {
        "package_name": "linearmodels-4.27",
        "file_list": ".codacy.yml .codebeatignore .coveragerc .gitattributes cron-test.yml generate-documentation.yml .gitignore .lgtm.yml appveyor.yml azure-pipelines.yml azure_template_posix.yml azure_template_windows.yml install-posix.sh push-docs-gh-pages.sh make.bat Makefile requirements.txt convert-lyx.cmd index.rst introduction.rst mathematical-detail.lyx mathematical-detail.txt mathematical-formula.rst reference.rst changes.rst compatibility.rst conf.py contributing.rst bw-logo.svg favicon.ico logo-text.svg logo.svg index.rst convert-lyx.cmd estimators.lyx estimators.txt index.rst introduction.rst mathematical-formula.rst reference.rst names_wordlist.txt convert-lyx.cmd faq.rst index.rst introduction.rst mathematical-detail.lyx mathematical-detail.txt mathematical-formula.rst pandas.rst reference.rst plan.rst references.rst spelling_wordlist.txt convert-lyx.cmd index.rst mathematical-detail.lyx mathematical-detail.txt mathematical-formula.rst reference.rst utility.rst android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png browserconfig.xml favicon-16x16.png favicon-32x32.png favicon.ico mstile-144x144.png mstile-150x150.png mstile-310x150.png mstile-310x310.png mstile-70x70.png safari-pinned-tab.svg site.webmanifest attribute.rst class.rst member.rst method.rst minimal_module.rst layout.html asset-pricing_examples.ipynb asset-pricing_formulas.ipynb iv_absorbing-regression.ipynb iv_advanced-examples.ipynb iv_basic-examples.ipynb iv_using-formulas.ipynb panel_data-formats.ipynb panel_examples.ipynb panel_using-formulas.ipynb system_correct-greene-table-10-1.png system_correct-greene-table-10-2.png system_correct-greene-table-10-3.png system_examples.ipynb system_formulas.ipynb system_three-stage-ls.ipynb github_deploy_key.enc LICENSE.md covariance.py model.py results.py __init__.py statsmodels.py __init__.py conftest.py birthweight.csv.bz2 __init__.py card.csv.bz2 __init__.py fertility.csv.bz2 __init__.py french.csv.bz2 __init__.py fringe.csv.bz2 __init__.py jobtraining.csv.bz2 __init__.py meps.csv.bz2 __init__.py mroz.csv.bz2 __init__.py munnell.csv.bz2 __init__.py wage.csv.bz2 __init__.py wage_panel.csv.bz2 __init__.py __init__.py formula.py absorbing.py common.py covariance.py data.py gmm.py model.py results.py _utility.py __init__.py covariance.py data.py model.py results.py utility.py _utility.c _utility.pxi _utility.pyx __init__.py py.typed base.py covariance.py exceptions.py hypotheses.py io.py linalg.py typed_getters.py utility.py __init__.py covariance.py gmm.py model.py results.py _utility.py __init__.py test_covariance.py test_formulas.py test_linear_factor_gmm.py test_linear_factor_model.py test_model.py _utility.py __init__.py test_datasets.py __init__.py execute-stata-simulated-data.py execute-stata.py housing.csv read_stata_results.py simulated-data.dta simulated-test-data.py stata-iv-housing-results.txt stata-iv-simulated-results.txt __init__.py test_absorbing.py test_against_stata.py test_covariance.py test_data.py test_formulas.py test_gmm.py test_missing_data.py test_model.py test_postestimation.py test_results.py _utility.py __init__.py execute-stata-simulated-data.py generate-panel-data.py parse_stata_results.py simulated-panel.dta stata-panel-simulated-results.txt __init__.py test_between_ols.py test_cluster_input_formats.py test_data.py test_fama_macbeth.py test_firstdifference_ols.py test_formula.py test_model.py test_panel_covariance.py test_panel_ols.py test_pooled_ols.py test_random_effects.py test_results.py test_simulated_against_stata.py test_utility.py _utility.py __init__.py test_base.py test_typed_getters.py test_utility.py __init__.py execute-stata-3sls.py execute-stata.py generate_data.py parse_stata_3sls_results.py parse_stata_results.py simulated-3sls.dta simulated-sur.dta stata-3sls-results.txt stata-sur-results.txt __init__.py test_3sls.py test_3sls_against_stata.py test_covariance.py test_equivalence.py test_formulas.py test_gmm.py test_sur.py test_sur_against_stata.py test_utility.py _utility.py __init__.py test_examples.py test_tester.py __init__.py data.py __init__.py _version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO pyproject.toml README.md requirements-dev.txt requirements-test.txt requirements.txt setup.cfg setup.py",
        "setup.py": "from setuptools import Extension, find_packages, setup\nfrom setuptools.dist import Distribution\n\nfrom distutils.errors import CCompilerError, DistutilsExecError, DistutilsPlatformError\nimport glob\nimport os\nfrom typing import Dict\n\ntry:\nfrom Cython.Build import cythonize\n\nCYTHON_INSTALLED = True\nexcept ImportError:\nCYTHON_INSTALLED = False\n\n\nFAILED_COMPILER_ERROR = \"\"\"\n******************************************************************************\n* WARNING *\n******************************************************************************\n\nUnable to build binary modules for linearmodels. These are not required\nto run any code in the package, and only provide speed-ups for a small subset\nof models.\n\n******************************************************************************\n* WARNING *\n******************************************************************************\n\"\"\"\nwith open(\"README.md\", \"r\") as readme:\nlong_description = readme.read()\n\n\nadditional_files = [\"py.typed\"]\nfor filename in glob.iglob(\".\/linearmodels\/datasets\/**\", recursive=True):\nif \".csv.bz\" in filename:\nadditional_files.append(filename.replace(\".\/linearmodels\/\", \"\"))\n\nfor filename in glob.iglob(\".\/linearmodels\/tests\/**\", recursive=True):\nif \".txt\" in filename or \".csv\" in filename or \".dta\" in filename:\nadditional_files.append(filename.replace(\".\/linearmodels\/\", \"\"))\n\nfor filename in glob.iglob(\".\/examples\/**\", recursive=True):\nif \".png\" in filename:\nadditional_files.append(filename)\n\n\nclass BinaryDistribution(Distribution):\ndef is_pure(self) -> bool:\nreturn False\n\n\ndef run_setup(binary: bool = True) -> None:\nextensions = []\nif binary:\nimport numpy\n\nmacros = [(\"NPY_NO_DEPRECATED_API\", \"1\")]\n# macros.append(('CYTHON_TRACE', '1'))\ndirectives: Dict[str, bool] = {} # {'linetrace': True, 'binding':True}\nextension = Extension(\n\"linearmodels.panel._utility\",\n[\"linearmodels\/panel\/_utility.pyx\"],\ndefine_macros=macros,\ninclude_dirs=[numpy.get_include()],\n)\nextensions.append(extension)\nextensions = cythonize(extensions, compiler_directives=directives, force=True)\nelse:\nimport logging\n\nlogging.warning(\"Building without binary support\")\n\nsetup(\nname=\"linearmodels\",\nlicense=\"NCSA\",\ndescription=\"Linear Panel, Instrumental Variable, Asset Pricing, and System \"\n\"Regression models for Python\",\npackages=find_packages(),\npackage_dir={\"linearmodels\": \".\/linearmodels\"},\nauthor=\"Kevin Sheppard\",\nauthor_email=\"kevin.k.sheppard@gmail.com\",\nurl=\"http:\/\/github.com\/bashtage\/linearmodels\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\ninstall_requires=open(\"requirements.txt\").read().split(\"\\n\"),\ninclude_package_data=True,\npackage_data={\"linearmodels\": additional_files},\nkeywords=[\n\"linear models\",\n\"regression\",\n\"instrumental variables\",\n\"IV\",\n\"panel\",\n\"fixed effects\",\n\"clustered\",\n\"heteroskedasticity\",\n\"endogeneity\",\n\"instruments\",\n\"statistics\",\n\"statistical inference\",\n\"econometrics\",\n],\nzip_safe=False,\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: End Users\/Desktop\",\n\"Intended Audience :: Financial and Insurance Industry\",\n\"Intended Audience :: Science\/Research\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"License :: OSI Approved\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: POSIX\",\n\"Programming Language :: Python\",\n\"Topic :: Scientific\/Engineering\",\n],\next_modules=extensions,\npython_requires=\">=3.8\",\ndistclass=BinaryDistribution,\n)\n\n\ntry:\nbuild_binary = CYTHON_INSTALLED\nbuild_binary &= os.environ.get(\"LM_NO_BINARY\", None) not in (\"1\", \"True\", \"true\")\nrun_setup(binary=build_binary)\nexcept (\nCCompilerError,\nDistutilsExecError,\nDistutilsPlatformError,\nIOError,\nValueError,\nImportError,\n):\nrun_setup(binary=False)\nimport warnings\n\nwarnings.warn(FAILED_COMPILER_ERROR, UserWarning)\n"
    },
    {
        "package_name": "lingua-language-detector-1.0.1",
        "file_list": "LICENSE.txt builder.py detector.py isocode.py bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip unigrams.json.zip bigrams.json.zip fivegrams.json.zip quadrigrams.json.zip trigrams.json.zip unigrams.json.zip language.py writer.py _constant.py _json.py _model.py _ngram.py __init__.py PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['lingua']\n\npackage_data = \\\n{'': ['*'],\n'lingua': ['language-models\/af\/*',\n'language-models\/ar\/*',\n'language-models\/az\/*',\n'language-models\/be\/*',\n'language-models\/bg\/*',\n'language-models\/bn\/*',\n'language-models\/bs\/*',\n'language-models\/ca\/*',\n'language-models\/cs\/*',\n'language-models\/cy\/*',\n'language-models\/da\/*',\n'language-models\/de\/*',\n'language-models\/el\/*',\n'language-models\/en\/*',\n'language-models\/eo\/*',\n'language-models\/es\/*',\n'language-models\/et\/*',\n'language-models\/eu\/*',\n'language-models\/fa\/*',\n'language-models\/fi\/*',\n'language-models\/fr\/*',\n'language-models\/ga\/*',\n'language-models\/gu\/*',\n'language-models\/he\/*',\n'language-models\/hi\/*',\n'language-models\/hr\/*',\n'language-models\/hu\/*',\n'language-models\/hy\/*',\n'language-models\/id\/*',\n'language-models\/is\/*',\n'language-models\/it\/*',\n'language-models\/ja\/*',\n'language-models\/ka\/*',\n'language-models\/kk\/*',\n'language-models\/ko\/*',\n'language-models\/la\/*',\n'language-models\/lg\/*',\n'language-models\/lt\/*',\n'language-models\/lv\/*',\n'language-models\/mi\/*',\n'language-models\/mk\/*',\n'language-models\/mn\/*',\n'language-models\/mr\/*',\n'language-models\/ms\/*',\n'language-models\/nb\/*',\n'language-models\/nl\/*',\n'language-models\/nn\/*',\n'language-models\/pa\/*',\n'language-models\/pl\/*',\n'language-models\/pt\/*',\n'language-models\/ro\/*',\n'language-models\/ru\/*',\n'language-models\/sk\/*',\n'language-models\/sl\/*',\n'language-models\/sn\/*',\n'language-models\/so\/*',\n'language-models\/sq\/*',\n'language-models\/sr\/*',\n'language-models\/st\/*',\n'language-models\/sv\/*',\n'language-models\/sw\/*',\n'language-models\/ta\/*',\n'language-models\/te\/*',\n'language-models\/th\/*',\n'language-models\/tl\/*',\n'language-models\/tn\/*',\n'language-models\/tr\/*',\n'language-models\/ts\/*',\n'language-models\/uk\/*',\n'language-models\/ur\/*',\n'language-models\/vi\/*',\n'language-models\/xh\/*',\n'language-models\/yo\/*',\n'language-models\/zh\/*',\n'language-models\/zu\/*']}\n\ninstall_requires = \\\n['regex>=2021.11,<2023.0']\n\nsetup_kwargs = {\n'name': 'lingua-language-detector',\n'version': '1.0.1',\n'description': 'An accurate natural language detection library, suitable for long and short text alike',\n'long_description': '<img src=\"https:\/\/raw.githubusercontent.com\/pemistahl\/lingua-py\/main\/images\/logo.png\" alt=\"Lingua Logo\" \/>\\n\\n<br>\\n\\n[![build](https:\/\/github.com\/pemistahl\/lingua-py\/actions\/workflows\/build.yml\/badge.svg?branch=main)](https:\/\/github.com\/pemistahl\/lingua-py\/actions\/workflows\/build.yml)\\n[![codecov](https:\/\/codecov.io\/gh\/pemistahl\/lingua-py\/branch\/main\/graph\/badge.svg)](https:\/\/codecov.io\/gh\/pemistahl\/lingua-py)\\n[![supported languages](https:\/\/img.shields.io\/badge\/supported%20languages-75-green.svg)](#supported-languages)\\n[![docs](https:\/\/img.shields.io\/badge\/docs-API-yellowgreen)](https:\/\/pemistahl.github.io\/lingua-py)\\n\\n![supported Python versions](https:\/\/img.shields.io\/badge\/Python-%3E%3D%203.7-blue)\\n[![pypi](https:\/\/img.shields.io\/badge\/PYPI-v1.0.1-blue)](https:\/\/pypi.org\/project\/lingua-language-detector)\\n[![license](https:\/\/img.shields.io\/badge\/license-Apache%202.0-blue.svg)](https:\/\/www.apache.org\/licenses\/LICENSE-2.0)\\n\\n## 1. What does this library do?\\n\\nIts task is simple: It tells you which language some provided textual data is\\nwritten in. This is very useful as a preprocessing step for linguistic data\\nin natural language processing applications such as text classification and\\nspell checking. Other use cases, for instance, might include routing e-mails\\nto the right geographically located customer service department, based on the\\ne-mails\\' languages.\\n\\n## 2. Why does this library exist?\\n\\nLanguage detection is often done as part of large machine learning frameworks\\nor natural language processing applications. In cases where you don\\'t need\\nthe full-fledged functionality of those systems or don\\'t want to learn the\\nropes of those, a small flexible library comes in handy.\\n\\nPython is widely used in natural language processing, so there are a couple\\nof comprehensive open source libraries for this task, such as Google\\'s\\n[*CLD 2*](https:\/\/github.com\/CLD2Owners\/cld2) and\\n[*CLD 3*](https:\/\/github.com\/google\/cld3),\\n[*langid*](https:\/\/github.com\/saffsd\/langid.py) and\\n[*langdetect*](https:\/\/github.com\/Mimino666\/langdetect).\\nUnfortunately, except for the last one they have two major drawbacks:\\n\\n1. Detection only works with quite lengthy text fragments. For very short\\n text snippets such as Twitter messages, they do not provide adequate results.\\n2. The more languages take part in the decision process, the less accurate are\\n the detection results.\\n\\n*Lingua* aims at eliminating these problems. She nearly does not need any\\nconfiguration and yields pretty accurate results on both long and short text,\\neven on single words and phrases. She draws on both rule-based and statistical\\nmethods but does not use any dictionaries of words. She does not need a\\nconnection to any external API or service either. Once the library has been\\ndownloaded, it can be used completely offline.\\n\\n## 3. Which languages are supported?\\n\\nCompared to other language detection libraries, *Lingua\\'s* focus is on\\n*quality over quantity*, that is, getting detection right for a small set of\\nlanguages first before adding new ones. Currently, the following 75 languages\\nare supported:\\n\\n- A\\n - Afrikaans\\n - Albanian\\n - Arabic\\n - Armenian\\n - Azerbaijani\\n- B\\n - Basque\\n - Belarusian\\n - Bengali\\n - Norwegian Bokmal\\n - Bosnian\\n - Bulgarian\\n- C\\n - Catalan\\n - Chinese\\n - Croatian\\n - Czech\\n- D\\n - Danish\\n - Dutch\\n- E\\n - English\\n - Esperanto\\n - Estonian\\n- F\\n - Finnish\\n - French\\n- G\\n - Ganda\\n - Georgian\\n - German\\n - Greek\\n - Gujarati\\n- H\\n - Hebrew\\n - Hindi\\n - Hungarian\\n- I\\n - Icelandic\\n - Indonesian\\n - Irish\\n - Italian\\n- J\\n - Japanese\\n- K\\n - Kazakh\\n - Korean\\n- L\\n - Latin\\n - Latvian\\n - Lithuanian\\n- M\\n - Macedonian\\n - Malay\\n - Maori\\n - Marathi\\n - Mongolian\\n- N\\n - Norwegian Nynorsk\\n- P\\n - Persian\\n - Polish\\n - Portuguese\\n - Punjabi\\n- R\\n - Romanian\\n - Russian\\n- S\\n - Serbian\\n - Shona\\n - Slovak\\n - Slovene\\n - Somali\\n - Sotho\\n - Spanish\\n - Swahili\\n - Swedish\\n- T\\n - Tagalog\\n - Tamil\\n - Telugu\\n - Thai\\n - Tsonga\\n - Tswana\\n - Turkish\\n- U\\n - Ukrainian\\n - Urdu\\n- V\\n - Vietnamese\\n- W\\n - Welsh\\n- X\\n - Xhosa\\n- Y\\n - Yoruba\\n- Z\\n - Zulu\\n\\n## 4. How good is it?\\n\\n*Lingua* is able to report accuracy statistics for some bundled test data\\navailable for each supported language. The test data for each language is split\\ninto three parts:\\n\\n1. a list of single words with a minimum length of 5 characters\\n2. a list of word pairs with a minimum length of 10 characters\\n3. a list of complete grammatical sentences of various lengths\\n\\nBoth the language models and the test data have been created from separate\\ndocuments of the [Wortschatz corpora](https:\/\/wortschatz.uni-leipzig.de)\\noffered by Leipzig University, Germany. Data crawled from various news websites\\nhave been used for training, each corpus comprising one million sentences.\\nFor testing, corpora made of arbitrarily chosen websites have been used, each\\ncomprising ten thousand sentences. From each test corpus, a random unsorted\\nsubset of 1000 single words, 1000 word pairs and 1000 sentences has been\\nextracted, respectively.\\n\\nGiven the generated test data, I have compared the detection results of\\n*Lingua*, *langdetect*, *langid*, *CLD 2* and *CLD 3* running over the data of\\n*Lingua\\'s* supported 75 languages. Languages that are not supported by the other\\ndetectors are simply ignored for them during the detection process.\\n\\nThe box plots below illustrate the distributions of the accuracy values for\\neach classifier. The boxes themselves represent the areas which the middle\\n50 % of data lie within. Within the colored boxes, the horizontal lines mark\\nthe median of the distributions. All these plots demonstrate that *Lingua*\\nclearly outperforms its contenders. Bar plots for each language can be found\\nin the file\\n[ACCURACY_PLOTS.md](https:\/\/github.com\/pemistahl\/lingua-py\/blob\/main\/ACCURACY_PLOTS.md).\\nDetailed statistics including mean, median and standard deviation values for\\neach language and classifier are available in the file\\n[ACCURACY_TABLE.md](https:\/\/github.com\/pemistahl\/lingua-py\/blob\/main\/ACCURACY_TABLE.md).\\n\\n### 4.1 Single word detection\\n\\n<br\/>\\n\\n<img src=\"https:\/\/raw.githubusercontent.com\/pemistahl\/lingua-py\/main\/images\/plots\/boxplot-single-words.png\" alt=\"Single Word Detection Performance\" \/>\\n\\n<br\/><br\/>\\n\\n### 4.2 Word pair detection\\n\\n<br\/>\\n\\n<img src=\"https:\/\/raw.githubusercontent.com\/pemistahl\/lingua-py\/main\/images\/plots\/boxplot-word-pairs.png\" alt=\"Word Pair Detection Performance\" \/>\\n\\n<br\/><br\/>\\n\\n### 4.3 Sentence detection\\n\\n<br\/>\\n\\n<img src=\"https:\/\/raw.githubusercontent.com\/pemistahl\/lingua-py\/main\/images\/plots\/boxplot-sentences.png\" alt=\"Sentence Detection Performance\" \/>\\n\\n<br\/><br\/>\\n\\n### 4.4 Average detection\\n\\n<br\/>\\n\\n<img src=\"https:\/\/raw.githubusercontent.com\/pemistahl\/lingua-py\/main\/images\/plots\/boxplot-average.png\" alt=\"Average Detection Performance\" \/>\\n\\n<br\/><br\/>\\n\\n## 5. Why is it better than other libraries?\\n\\nEvery language detector uses a probabilistic\\n[n-gram](https:\/\/en.wikipedia.org\/wiki\/N-gram) model trained on the character\\ndistribution in some training corpus. Most libraries only use n-grams of size 3\\n(trigrams) which is satisfactory for detecting the language of longer text\\nfragments consisting of multiple sentences. For short phrases or single words,\\nhowever, trigrams are not enough. The shorter the input text is, the less\\nn-grams are available. The probabilities estimated from such few n-grams are not\\nreliable. This is why *Lingua* makes use of n-grams of sizes 1 up to 5 which\\nresults in much more accurate prediction of the correct language.\\n\\nA second important difference is that *Lingua* does not only use such a\\nstatistical model, but also a rule-based engine. This engine first determines\\nthe alphabet of the input text and searches for characters which are unique\\nin one or more languages. If exactly one language can be reliably chosen this\\nway, the statistical model is not necessary anymore. In any case, the\\nrule-based engine filters out languages that do not satisfy the conditions of\\nthe input text. Only then, in a second step, the probabilistic n-gram model is\\ntaken into consideration. This makes sense because loading less language models\\nmeans less memory consumption and better runtime performance.\\n\\nIn general, it is always a good idea to restrict the set of languages to be\\nconsidered in the classification process using the respective api methods.\\nIf you know beforehand that certain languages are never to occur in an input\\ntext, do not let those take part in the classifcation process. The filtering\\nmechanism of the rule-based engine is quite good, however, filtering based on\\nyour own knowledge of the input text is always preferable.\\n\\n## 6. Test report generation\\n\\nIf you want to reproduce the accuracy results above, you can generate the test\\nreports yourself for all classifiers and languages by executing:\\n\\n poetry install --extras \"langdetect langid gcld3 pycld2\"\\n poetry run python3 scripts\/accuracy_reporter.py\\n\\nFor each detector and language, a test report file is then written into\\n[`\/accuracy-reports`](https:\/\/github.com\/pemistahl\/lingua-py\/tree\/main\/accuracy-reports).\\nAs an example, here is the current output of the *Lingua* German report:\\n\\n```\\n##### German #####\\n\\n>>> Accuracy on average: 89.27%\\n\\n>> Detection of 1000 single words (average length: 9 chars)\\nAccuracy: 74.20%\\nErroneously classified as Dutch: 2.30%, Danish: 2.20%, English: 2.20%, Latin: 1.80%, Bokmal: 1.60%, Italian: 1.30%, Basque: 1.20%, Esperanto: 1.20%, French: 1.20%, Swedish: 0.90%, Afrikaans: 0.70%, Finnish: 0.60%, Nynorsk: 0.60%, Portuguese: 0.60%, Yoruba: 0.60%, Sotho: 0.50%, Tsonga: 0.50%, Welsh: 0.50%, Estonian: 0.40%, Irish: 0.40%, Polish: 0.40%, Spanish: 0.40%, Tswana: 0.40%, Albanian: 0.30%, Icelandic: 0.30%, Tagalog: 0.30%, Bosnian: 0.20%, Catalan: 0.20%, Croatian: 0.20%, Indonesian: 0.20%, Lithuanian: 0.20%, Romanian: 0.20%, Swahili: 0.20%, Zulu: 0.20%, Latvian: 0.10%, Malay: 0.10%, Maori: 0.10%, Slovak: 0.10%, Slovene: 0.10%, Somali: 0.10%, Turkish: 0.10%, Xhosa: 0.10%\\n\\n>> Detection of 1000 word pairs (average length: 18 chars)\\nAccuracy: 93.90%\\nErroneously classified as Dutch: 0.90%, Latin: 0.90%, English: 0.70%, Swedish: 0.60%, Danish: 0.50%, French: 0.40%, Bokmal: 0.30%, Irish: 0.20%, Tagalog: 0.20%, Tsonga: 0.20%, Afrikaans: 0.10%, Esperanto: 0.10%, Estonian: 0.10%, Finnish: 0.10%, Italian: 0.10%, Maori: 0.10%, Nynorsk: 0.10%, Somali: 0.10%, Swahili: 0.10%, Turkish: 0.10%, Welsh: 0.10%, Zulu: 0.10%\\n\\n>> Detection of 1000 sentences (average length: 111 chars)\\nAccuracy: 99.70%\\nErroneously classified as Dutch: 0.20%, Latin: 0.10%\\n```\\n\\n## 7. How to add it to your project?\\n\\n*Lingua* is available in the [Python Package Index](https:\/\/pypi.org\/project\/lingua-language-detector)\\nand can be installed with:\\n\\n pip install lingua-language-detector\\n\\n## 8. How to build?\\n\\n*Lingua* requires Python >= 3.7 and uses [Poetry](https:\/\/python-poetry.org) for packaging and\\ndependency management. You need to install it first if you have not done so yet.\\nAfterwards, clone the repository and install the project dependencies:\\n\\n```\\ngit clone https:\/\/github.com\/pemistahl\/lingua-py.git\\ncd lingua-py\\npoetry install\\n```\\n\\nThe library makes uses of type annotations which allow for static type checking with\\n[Mypy](http:\/\/mypy-lang.org). Run the following command for checking the types:\\n\\n poetry run mypy\\n\\nThe source code is accompanied by an extensive unit test suite. To run the tests, simply say:\\n\\n poetry run pytest\\n\\n## 9. How to use?\\n\\n### 9.1 Basic usage\\n\\n```python\\n>>> from lingua import Language, LanguageDetectorBuilder\\n>>> languages = [Language.ENGLISH, Language.FRENCH, Language.GERMAN, Language.SPANISH]\\n>>> detector = LanguageDetectorBuilder.from_languages(*languages).build()\\n>>> detector.detect_language_of(\"languages are awesome\")\\nLanguage.ENGLISH\\n```\\n\\n### 9.2 Minimum relative distance\\n\\nBy default, *Lingua* returns the most likely language for a given input text.\\nHowever, there are certain words that are spelled the same in more than one\\nlanguage. The word *prologue*, for instance, is both a valid English and French\\nword. *Lingua* would output either English or French which might be wrong in\\nthe given context. For cases like that, it is possible to specify a minimum\\nrelative distance that the logarithmized and summed up probabilities for\\neach possible language have to satisfy. It can be stated in the following way:\\n\\n```python\\n>>> from lingua import Language, LanguageDetectorBuilder\\n>>> languages = [Language.ENGLISH, Language.FRENCH, Language.GERMAN, Language.SPANISH]\\n>>> detector = LanguageDetectorBuilder.from_languages(*languages)\\\\\\n.with_minimum_relative_distance(0.25)\\\\\\n.build()\\n>>> print(detector.detect_language_of(\"languages are awesome\"))\\nNone\\n```\\n\\nBe aware that the distance between the language probabilities is dependent on\\nthe length of the input text. The longer the input text, the larger the\\ndistance between the languages. So if you want to classify very short text\\nphrases, do not set the minimum relative distance too high. Otherwise, `None`\\nwill be returned most of the time as in the example above. This is the return\\nvalue for cases where language detection is not reliably possible.\\n\\n### 9.3 Confidence values\\n\\nKnowing about the most likely language is nice but how reliable is the computed\\nlikelihood? And how less likely are the other examined languages in comparison\\nto the most likely one? These questions can be answered as well:\\n\\n```python\\n>>> from lingua import Language, LanguageDetectorBuilder\\n>>> languages = [Language.ENGLISH, Language.FRENCH, Language.GERMAN, Language.SPANISH]\\n>>> detector = LanguageDetectorBuilder.from_languages(*languages).build()\\n>>> confidence_values = detector.compute_language_confidence_values(\"languages are awesome\")\\n>>> for language, value in confidence_values:\\n... print(f\"{language.name}: {value:.2f}\")\\nENGLISH: 1.00\\nFRENCH: 0.79\\nGERMAN: 0.75\\nSPANISH: 0.70\\n```\\n\\nIn the example above, a list of all possible languages is returned, sorted by\\ntheir confidence value in descending order. The values that the detector\\ncomputes are part of a **relative** confidence metric, not of an absolute one.\\nEach value is a number between 0.0 and 1.0. The most likely language is always\\nreturned with value 1.0. All other languages get values assigned which are\\nlower than 1.0, denoting how less likely those languages are in comparison to\\nthe most likely language.\\n\\nThe list returned by this method does not necessarily contain all languages\\nwhich this LanguageDetector instance was built from. If the rule-based engine\\ndecides that a specific language is truly impossible, then it will not be part\\nof the returned list. Likewise, if no ngram probabilities can be found within\\nthe detector\\'s languages for the given input text, the returned list will be\\nempty. The confidence value for each language not being part of the returned\\nlist is assumed to be 0.0.\\n\\n## 9.4 Eager loading versus lazy loading\\n\\nBy default, *Lingua* uses lazy-loading to load only those language models on\\ndemand which are considered relevant by the rule-based filter engine. For web\\nservices, for instance, it is rather beneficial to preload all language models\\ninto memory to avoid unexpected latency while waiting for the service response.\\nIf you want to enable the eager-loading mode, you can do it like this:\\n\\n LanguageDetectorBuilder.from_all_languages().with_preloaded_language_models().build()\\n\\nMultiple instances of `LanguageDetector` share the same language models in\\nmemory which are accessed asynchronously by the instances.\\n\\n## 9.5 Methods to build the LanguageDetector\\n\\nThere might be classification tasks where you know beforehand that your\\nlanguage data is definitely not written in Latin, for instance. The detection\\naccuracy can become better in such cases if you exclude certain languages from\\nthe decision process or just explicitly include relevant languages:\\n\\n```python\\nfrom lingua import LanguageDetectorBuilder, Language, IsoCode639_1, IsoCode639_3\\n\\n# Including all languages available in the library\\n# consumes approximately 3GB of memory and might\\n# lead to slow runtime performance.\\nLanguageDetectorBuilder.from_all_languages()\\n\\n# Include only languages that are not yet extinct (= currently excludes Latin).\\nLanguageDetectorBuilder.from_all_spoken_languages()\\n\\n# Include only languages written with Cyrillic script.\\nLanguageDetectorBuilder.from_all_languages_with_cyrillic_script()\\n\\n# Exclude only the Spanish language from the decision algorithm.\\nLanguageDetectorBuilder.from_all_languages_without(Language.SPANISH)\\n\\n# Only decide between English and German.\\nLanguageDetectorBuilder.from_languages(Language.ENGLISH, Language.GERMAN)\\n\\n# Select languages by ISO 639-1 code.\\nLanguageDetectorBuilder.from_iso_codes_639_1(IsoCode639_1.EN, IsoCode639_1.DE)\\n\\n# Select languages by ISO 639-3 code.\\nLanguageDetectorBuilder.from_iso_codes_639_3(IsoCode639_3.ENG, IsoCode639_3.DEU)\\n```\\n\\n## 10. What\\'s next for version 1.1.0?\\n\\nTake a look at the [planned issues](https:\/\/github.com\/pemistahl\/lingua-py\/milestone\/1).\\n\\n## 11. Contributions\\n\\nAny contributions to *Lingua* are very much appreciated. Please read the instructions\\nin [`CONTRIBUTING.md`](https:\/\/github.com\/pemistahl\/lingua-py\/blob\/main\/CONTRIBUTING.md)\\nfor how to add new languages to the library.\\n',\n'author': 'Peter M. Stahl',\n'author_email': 'pemistahl@gmail.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/pemistahl.github.io\/lingua-py',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'python_requires': '>=3.7.1,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "linkify-it-py-2.0.0",
        "file_list": "CHANGELOG.md LICENSE main.py tlds.py ucre.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import re\nfrom os import path\n\nimport setuptools\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nwith open(path.join(path.dirname(__file__), \"linkify_it\", \"__init__.py\")) as f:\nmatch = re.search(r\"__version__\\s*=\\s*[\\'\\\"](.+?)[\\'\\\"]\", f.read())\nversion = match.group(1)\n\n\nsetuptools.setup(\nname=\"linkify-it-py\",\nversion=version,\nlicense=\"MIT\",\nauthor=\"tsutsu3\",\ndescription=\"Links recognition library with FULL unicode support.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/tsutsu3\/linkify-it-py\",\npackages=setuptools.find_packages(exclude=[\"test\", \"benchmark\"]),\ninclude_package_data=True,\nclassifiers=[\n\"Development Status :: 3 - Alpha\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Intended Audience :: Developers\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\npython_requires=\">=3.6\",\nkeywords=[\"linkify\", \"linkifier\", \"autolink\", \"autolinker\"],\ninstall_requires=[\"uc-micro-py\"],\nextras_require={\n\"dev\": [\"pre-commit\", \"isort\", \"flake8\", \"black\"],\n\"benchmark\": [\"pytest\", \"pytest-benchmark\"],\n\"test\": [\"coverage\", \"pytest\", \"pytest-cov\"],\n\"doc\": [\"sphinx\", \"sphinx_book_theme\", \"myst-parser\"],\n},\n)\n"
    },
    {
        "package_name": "linkml-runtime-1.3.2",
        "file_list": "LICENSE csv_dumper.py dumper_root.py json_dumper.py rdflib_dumper.py rdf_dumper.py yaml_dumper.py __init__.py annotations.py extensions.py meta.graphql README.md annotations.json extensions.json mappings.json meta.json README.md types.json units.json validation.json annotations.context.jsonld annotations.model.context.jsonld context.jsonld extensions.context.jsonld extensions.model.context.jsonld mappings.context.jsonld mappings.model.context.jsonld meta.context.jsonld meta.model.context.jsonld README.md types.context.jsonld types.model.context.jsonld units.context.jsonld units.model.context.jsonld validation.context.jsonld validation.model.context.jsonld annotations.schema.json extensions.schema.json mappings.schema.json meta.schema.json README.md types.schema.json units.schema.json validation.schema.json linkml_files.py mappings.py meta.py credits.md home.md import_map.json README.md annotations.yaml extensions.yaml mappings.yaml meta.yaml README.md types.yaml units.yaml validation.yaml meta.owl.ttl README.md annotations.model.ttl annotations.ttl extensions.model.ttl extensions.ttl mappings.model.ttl mappings.ttl meta.model.ttl meta.ttl README.md types.model.ttl types.ttl units.model.ttl units.ttl validation.model.ttl validation.ttl README.md annotations.shex annotations.shexj extensions.shex extensions.shexj mappings.shex mappings.shexj meta.shex meta.shexj README.md types.shex types.shexj units.shex units.shexj validation.shex validation.shexj types.py units.py validation.py __init__.py context_flattener.py csv_loader.py json_loader.py loader_root.py rdflib_loader.py rdf_loader.py requests_ssl_patch.py yaml_loader.py __init__.py comparefiles.py compile_python.py context_utils.py csvutils.py curienamespace.py dataclass_extensions_376.py dictutils.py distroutils.py enumerations.py eval_utils.py formatutils.py inference_utils.py introspection.py metamodelcore.py namespaces.py pattern.py permissiblevalueimpl.py ruleutils.py schemaops.py schemaview.py schemaview_cli.py schema_as_dict.py slot.py strictness.py walker_utils.py yamlutils.py __init__.py __init__.py PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['linkml_runtime',\n'linkml_runtime.dumpers',\n'linkml_runtime.linkml_model',\n'linkml_runtime.loaders',\n'linkml_runtime.utils']\n\npackage_data = \\\n{'': ['*'],\n'linkml_runtime.linkml_model': ['graphql\/*',\n'json\/*',\n'jsonld\/*',\n'jsonschema\/*',\n'model\/*',\n'model\/docs\/*',\n'model\/schema\/*',\n'owl\/*',\n'rdf\/*',\n'shex\/*']}\n\ninstall_requires = \\\n['click',\n'deprecated',\n'hbreader',\n'json-flattener>=0.1.9',\n'jsonasobj2>=1.0.4,<2.0.0',\n'jsonschema>=3.2.0',\n'prefixcommons==0.1.11',\n'pyyaml',\n'rdflib>=6.0.0',\n'requests']\n\nentry_points = \\\n{'console_scripts': ['comparefiles = linkml_runtime.utils.comparefiles:cli']}\n\nsetup_kwargs = {\n'name': 'linkml-runtime',\n'version': '1.3.2',\n'description': 'Runtime environment for LinkML, the Linked open data modeling language',\n'long_description': '# linkml-runtime\\n[![Pyversions](https:\/\/img.shields.io\/pypi\/pyversions\/linkml-runtime.svg)](https:\/\/pypi.python.org\/pypi\/linkml-runtime)\\n![](https:\/\/github.com\/linkml\/linkml-runtime\/workflows\/Build\/badge.svg)\\n[![badge](https:\/\/img.shields.io\/badge\/launch-binder-579ACA.svg)](https:\/\/mybinder.org\/v2\/gh\/linkml\/linkml-runtime\/main?filepath=notebooks)\\n[![PyPi](https:\/\/img.shields.io\/pypi\/v\/linkml-runtime.svg)](https:\/\/pypi.python.org\/pypi\/linkml)\\n[![PyPIDownloadsTotal](https:\/\/pepy.tech\/badge\/linkml-runtime)](https:\/\/pepy.tech\/project\/linkml-runtime)\\n[![PyPIDownloadsMonth](https:\/\/img.shields.io\/pypi\/dm\/linkml-runtime?logo=PyPI&color=blue)](https:\/\/pypi.org\/project\/linkml-runtime)\\n[![codecov](https:\/\/codecov.io\/gh\/linkml\/linkml-runtime\/branch\/main\/graph\/badge.svg?token=FOBHNSK5WG)](https:\/\/codecov.io\/gh\/linkml\/linkml-runtime)\\n\\nRuntime support for linkml generated models\\n\\n## About\\n\\nThis python library provides runtime support for [LinkML](https:\/\/linkml.io\/linkml\/) datamodels.\\n\\nSee the [LinkML repo](https:\/\/github.com\/linkml\/linkml) for the [Python Dataclass Generator](https:\/\/linkml.io\/linkml\/generators\/python.html) which will convert a schema into a Python object model. That model will have dependencies on functionality in this library.\\n\\nThe library also provides\\n\\n* loaders: for loading from external formats such as json, yaml, rdf, tsv into LinkML instances\\n* dumpers: the reverse operation\\n\\nSee [working with data](https:\/\/linkml.io\/linkml\/data\/index.html) in the documentation for more details\\n\\nThis repository also contains the Python dataclass representation of the [LinkML metamodel](https:\/\/github.com\/linkml\/linkml-model), and various utility functions that are useful for working with LinkML data and schemas.\\n\\nIt also includes the [SchemaView](https:\/\/linkml.io\/linkml\/developers\/manipulating-schemas.html) class for working with LinkML schemas\\n\\n## Notebooks\\n\\nSee the [notebooks](https:\/\/github.com\/linkml\/linkml-runtime\/tree\/main\/notebooks) folder for examples\\n',\n'author': 'Chris Mungall',\n'author_email': 'cjmungall@lbl.gov',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/linkml\/linkml-runtime',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'entry_points': entry_points,\n'python_requires': '>=3.7.1,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "lit-15.0.0",
        "file_list": "lit.cfg ManyTests.py README.txt README.txt LICENSE.TXT BooleanExpression.py cat.py diff.py __init__.py cl_arguments.py discovery.py display.py base.py googletest.py shtest.py __init__.py LitConfig.py LitTestCase.py config.py subst.py __init__.py main.py ProgressBar.py reports.py run.py ShCommands.py ShUtil.py Test.py TestingConfig.py TestRunner.py TestTimes.py util.py worker.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt lit.py MANIFEST.in PKG-INFO README.txt setup.cfg setup.py .coveragerc 0001-Revert-lit-modernize-the-lit-configuration-for-the-l.patch allow-retries.py boolean-parsing.py check-tested-lit-timeout-ability custom-result-category.py discovery.py googletest-cmd-wrapper.py googletest-crash.py googletest-discovery-failed.py googletest-format.py googletest-timeout.py ignore-fail.py does-not-succeed-within-limit.py lit.cfg more-than-one-allow-retries-lines.py not-a-valid-integer.py succeeds-within-limit.py driver.py invalid-test.txt lit.alt.cfg lit.cfg test1.txt test2.txt format.py lit.cfg test1.txt test2.txt lit.cfg lit.local.cfg test-three.py lit.cfg test-one.txt test-two.txt test-one.txt test-two.txt test.not-txt lit.site.cfg lit.cfg lit.site.cfg test-one.txt cd diff env export fake_external.py mkdir rm OneTest.exe lit.cfg OneTest.py lit.cfg lit.cfg OneTest.py OneTest.py lit.cfg OneTest.py lit.cfg fail.txt lit.cfg unresolved.txt xfail.txt xpass.txt lit.cfg test.txt lit.cfg ld.lld ld.lld.exe ld.lld.txt ld64.lld ld64.lld.exe ld64.lld.txt lit.cfg lld-link lld-link.exe lld-link.txt wasm-ld wasm-ld.exe wasm-ld.txt fail1.txt fail2.txt fail3.txt lit.cfg fast.txt lit.cfg slow.py lit.cfg test1.txt test2.txt lit.cfg test-1.txt test-2.txt test-3.txt test-4.txt lit.site.cfg.py .lit_test_times.txt aaa.txt bbb.txt lit.cfg new-test.txt ccc.txt fail.txt lit.cfg pass.txt unsupported.txt xfail.txt lit.cfg mixed.txt requires.txt unsupported.txt xfail.txt env-args-last-is-assign.txt env-args-last-is-u-arg.txt env-args-last-is-u.txt env-args-nested-none.txt env-args-none.txt env-calls-cd.txt env-calls-colon.txt env-calls-echo.txt env-calls-env.txt env-calls-export.txt env-calls-mkdir.txt env-calls-not-builtin.txt env-calls-rm.txt env-u.txt env.txt lit.cfg mixed.txt print_environment.py fail.txt fail_with_bad_encoding.txt fail_with_control_chars.txt lit.local.cfg pass.txt utf8_command.txt write-bad-encoding.py write-control-chars.py fail.txt lit.cfg no-test-line.txt pass.txt requires-missing.txt requires-present.txt requires-star.txt requires-triple.txt unsupported-expr-false.txt unsupported-expr-true.txt unsupported-star.txt lit.local.cfg some-test.txt xfail-expr-false.txt xfail-expr-true.txt xfail-feature.txt xfail-target.txt xfail.txt xpass.txt argv0.txt lit.cfg lit.cfg test-neg1.txt test-neg2.txt test-neg3.txt test-neg4.txt test.txt lit.cfg test-empty.txt test-many.txt test-one.txt empty.txt lit.cfg multiple-allow-retries.txt unterminated-run.txt exclamation-args-nested-none.txt exclamation-args-none.txt exclamation-calls-external.txt fail.py fail2.py lit.cfg not-args-last-is-crash.txt not-args-nested-none.txt not-args-none.txt not-calls-cd.txt not-calls-colon.txt not-calls-diff-with-crash.txt not-calls-diff.txt not-calls-echo.txt not-calls-env-builtin.txt not-calls-export.txt not-calls-external.txt not-calls-fail2.txt not-calls-mkdir.txt not-calls-rm.txt pass.py print_environment.py basic.txt lit.cfg lit.cfg popd-args.txt popd-no-stack.txt pushd-popd-ok.txt pushd-too-many-args.txt lit.cfg test.py lit.cfg test.py lit.cfg test.py lit.cfg test.py lit.cfg test.py lit.cfg test.py lit.cfg test.py basic.txt line-continuation.txt lit.local.cfg basic.txt line-continuation.txt lit.local.cfg lit.cfg cat-error-0.txt cat-error-1.txt cat_nonprinting.bin check_args.py check_path.py colon-error.txt dev-null.txt diff-b.txt diff-encodings.txt diff-error-1.txt diff-error-2.txt diff-error-3.txt diff-error-4.txt diff-error-5.txt diff-error-6.txt diff-in.bin diff-in.dos diff-in.unix diff-in.utf16 diff-in.utf8 diff-pipes.txt diff-r-error-0.txt diff-r-error-1.txt diff-r-error-2.txt diff-r-error-3.txt diff-r-error-4.txt diff-r-error-5.txt diff-r-error-6.txt diff-r-error-7.txt diff-r-error-8.txt diff-r.txt diff-strip-trailing-cr.txt diff-unified.txt diff-w.txt error-0.txt error-1.txt error-2.txt lit.cfg mkdir-error-0.txt mkdir-error-1.txt mkdir-error-2.txt redirects.txt rm-error-0.txt rm-error-1.txt rm-error-2.txt rm-error-3.txt rm-unicode-0.txt sequencing-0.txt sequencing-1.txt stdout-encoding.txt valid-shell.txt write-to-stderr.py write-to-stdout-and-stderr.py infinite_loop.py lit.cfg short.py lit.cfg true.txt lit.cfg true.txt lit.cfg true.txt dummy_format.py lit.cfg metrics.ini dummy_format.py lit.cfg micro-tests.ini lit.cfg test.txt lit.cfg test.py lit.cfg test-one.txt test-two.txt test.py case10 case10.exe case2 case2.exe case3 case3.exe case6 case6.exe case7 case7.exe case9 case9.exe env-case1 env-case6 lit.cfg case10 case10.exe case4 case4.exe case5 case5.exe case6 case6.exe case7 case7.exe empty case9 case9.exe case9 case9.exe true.txt found found.exe lit.cfg true.txt false.txt lit.cfg test-xfail.txt test.txt false.txt lit.cfg test-xfail.txt test.txt false.txt false2.txt lit.cfg true-xfail.txt true.txt bad&name.ini dummy_format.py excluded.ini lit.cfg missing_feature.ini pass.ini unsupported.ini lit-opts.py lit.cfg lit.site.cfg.in lld-features.py max-failures.py max-time.py parallelism-groups.py progress-bar.py reorder.py selecting.py shell-parsing.py show-result-codes.py show-used-features.py shtest-encoding.py shtest-env.py shtest-format-argv0.py shtest-format.py shtest-if-else.py shtest-inject.py shtest-keyword-parse-errors.py shtest-not.py shtest-output-printing.py shtest-pushd-popd.py shtest-recursive-substitution.py shtest-run-at-line.py shtest-shell.py shtest-timeout.py test-data-micro.py test-data.py test-output-micro-resultdb.py test-output-micro.py test-output-resultdb.py test-output.py ShUtil.py TestRunner.py unittest-adaptor.py unparsed-requirements.py usage.py use-llvm-tool.py xfail-cl.py xunit-output.py",
        "setup.py": "import lit\nimport os\n\nfrom setuptools import setup, find_packages\n\n# setuptools expects to be invoked from within the directory of setup.py, but it\n# is nice to allow:\n# python path\/to\/setup.py install\n# to work (for scripts, etc.)\nos.chdir(os.path.dirname(os.path.abspath(__file__)))\n\nsetup(\nname = \"lit\",\nversion = lit.__version__,\n\nauthor = lit.__author__,\nauthor_email = lit.__email__,\nurl = 'http:\/\/llvm.org',\nlicense = 'Apache-2.0 with LLVM exception',\nlicense_files = ['LICENSE.TXT'],\n\ndescription = \"A Software Testing Tool\",\nkeywords = 'test C++ automatic discovery',\nlong_description = \"\"\"\\\n*lit*\n+++++\n\nAbout\n=====\n\n*lit* is a portable tool for executing LLVM and Clang style test suites,\nsummarizing their results, and providing indication of failures. *lit* is\ndesigned to be a lightweight testing tool with as simple a user interface as\npossible.\n\n\nFeatures\n========\n\n* Portable!\n* Flexible test discovery.\n* Parallel test execution.\n* Support for multiple test formats and test suite designs.\n\n\nDocumentation\n=============\n\nThe official *lit* documentation is in the man page, available online at the LLVM\nCommand Guide: http:\/\/llvm.org\/cmds\/lit.html.\n\n\nSource\n======\n\nThe *lit* source is available as part of LLVM, in the LLVM source repository:\nhttps:\/\/github.com\/llvm\/llvm-project\/tree\/main\/llvm\/utils\/lit\n\"\"\",\n\nclassifiers=[\n'Development Status :: 3 - Alpha',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n'Natural Language :: English',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Topic :: Software Development :: Testing',\n],\n\nzip_safe = False,\npackages = find_packages(),\nentry_points = {\n'console_scripts': [\n'lit = lit.main:main',\n],\n}\n)\n"
    },
    {
        "package_name": "livelossplot-0.5.5",
        "file_list": "LICENSE.txt generic_keras.py keras.py poutyne.py pytorch_ignite.py tf_keras.py __init__.py main_logger.py base_output.py bokeh_plot.py extrema_printer.py matplotlib_plot.py matplotlib_subplots.py neptune_logger.py tensorboard_logger.py tensorboard_tf_logger.py __init__.py plot_losses.py version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup, find_packages\nfrom os import path\nimport re\n\n\ndef readme():\nwith open('README.md', encoding='utf-8') as f:\nreturn f.read()\n\n\ndef version():\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, 'livelossplot\/version.py')) as f:\nversion_file = f.read()\nversion_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", version_file, re.M)\nversion = version_match.group(1)\n\nreturn version\n\n\nsetup(\nname='livelossplot',\nversion=version(),\npython_requires=\">=3.7\",\ninstall_requires=[\n'ipython==7.*;python_version<\"3.8\"',\n'matplotlib', 'bokeh',\n'numpy<1.22;python_version<\"3.8\"',\n],\ndescription='Live training loss plot in Jupyter Notebook for Keras, PyTorch and others.',\nlong_description=readme(),\nlong_description_content_type='text\/markdown',\nurl='https:\/\/github.com\/stared\/livelossplot',\nauthor='Piotr Migda\u0142',\nauthor_email='pmigdal@gmail.com',\nkeywords=['keras', 'pytorch', 'plot', 'chart', 'deep-learning'],\nlicense='MIT',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Framework :: Jupyter',\n'Intended Audience :: Developers',\n'Intended Audience :: Education',\n'Intended Audience :: Science\/Research',\n'Topic :: Scientific\/Engineering',\n'Topic :: Scientific\/Engineering :: Artificial Intelligence',\n'Topic :: Scientific\/Engineering :: Visualization',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n],\npackages=find_packages(),\nzip_safe=False\n)\n"
    },
    {
        "package_name": "livereload-2.6.3",
        "file_list": "LICENSE cli.py handlers.py livereload.py __init__.py server.py livereload.js watcher.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport re\nfrom setuptools import setup\n\n\ndef fread(filepath):\nwith open(filepath, 'r') as f:\nreturn f.read()\n\n\ndef version():\ncontent = fread('livereload\/__init__.py')\npattern = r\"__version__ = '([0-9\\.dev]*)'\"\nm = re.findall(pattern, content)\nreturn m[0]\n\n\nsetup(\nname='livereload',\nversion=version(),\nauthor='Hsiaoming Yang',\nauthor_email='me@lepture.com',\nurl='https:\/\/github.com\/lepture\/python-livereload',\npackages=['livereload', 'livereload.management.commands'],\ndescription='Python LiveReload is an awesome tool for web developers',\nlong_description_content_type='text\/x-rst',\nlong_description=fread('README.rst'),\nentry_points={\n'console_scripts': [\n'livereload = livereload.cli:main',\n]\n},\ninstall_requires=[\n'tornado;python_version>\"2.7\"',\n'tornado<6;python_version==\"2.7\"',\n'six',\n],\nlicense='BSD',\ninclude_package_data=True,\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Environment :: Console',\n'Environment :: Web Environment :: Mozilla',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Natural Language :: English',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: POSIX :: Linux',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Software Development :: Build Tools',\n'Topic :: Software Development :: Compilers',\n'Topic :: Software Development :: Debuggers',\n]\n)\n"
    },
    {
        "package_name": "lizard-1.17.10",
        "file_list": "LICENSE.txt dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt lizard.py auto_open.py csvoutput.py default_ordered_dict.py extension_base.py htmloutput.py keywords.py lizardboolcount.py lizardcomplextags.py lizardcpre.py lizarddependencycount.py lizarddumpcomments.py lizardduplicate.py lizardduplicated_param_list.py lizardexitcount.py lizardgotocount.py lizardignoreassert.py lizardio.py lizardmccabe.py lizardmodified.py lizardnd.py lizardnonstrict.py lizardns.py lizardoutside.py lizardstatementcount.py lizardwordcount.py version.py xmloutput.py __init__.py clike.py code_reader.py csharp.py fortran.py gdscript.py go.py golike.py java.py javascript.py js_style_language_states.py js_style_regex_expression.py kotlin.py lua.py objc.py php.py python.py ruby.py rubylike.py rust.py scala.py script_language.py swift.py tnsdl.py ttcn.py typescript.py __init__.py PKG-INFO README.rst setup.cfg setup.py testApplication.py testAssertionExtension.py testBasicFunctionInfo.py testCommentOptions.py testCOutsideComplexity.py testCPreprocessorExtension.py testCyclomaticComplexity.py testExtension.py testFilesFilter.py testFunctionDependencyCount.py testFunctionExitCount.py testFunctionGotoCount.py testFunctionStatementCount.py testHelpers.py testLanguages.py testMcCabe.py testNestedStructures.py testNestingDepth.py testOutput.py testOutputCSV.py testOutputFile.py testOutputHTML.py testTokenizer.py test_analyzer.py test_auto_open.py test_options.py",
        "setup.py": "#!\/usr\/bin\/env python\n'''\nSetup script.\nTo install lizard:\nsudo setup.py build install\n'''\n\nimport codecs\nimport os\nimport re\nfrom setuptools import setup, Command\n\ntry:\nhere = os.path.dirname(os.path.abspath(__file__))\nversion = '0.0.0'\nchanges = os.path.join(here, \"CHANGELOG.md\")\npattern = r'^\\#*\\s*(?P<version>[0-9]+.[0-9]+(.[0-9]+)?)'\nwith codecs.open(changes, encoding='utf-8') as changes:\nfor line in changes:\nmatch = re.match(pattern, line)\nif match:\nversion = match.group(\"version\")\nbreak\n\n\n# Save last Version\ndef save_version():\nversion_path = os.path.join(here, \"lizard_ext\/version.py\")\n\nwith open(version_path) as version_file_read:\ncontent_file = version_file_read.read()\n\nVSRE = r\"^version = ['\\\"]([^'\\\"]*)['\\\"]\"\nmo = re.search(VSRE, content_file, re.M)\ncurrent_version = mo.group(1)\n\ncontent_file = content_file.replace(current_version, \"{}\".format(version))\n\nwith open(version_path, 'w') as version_file_write:\nversion_file_write.write(content_file)\n\n\nsave_version()\n\nexcept:\nfrom lizard_ext import version\n\n\nclass VersionCommand(Command):\ndescription = 'Show library version'\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nprint(version)\n\n\nsetup(\nname='lizard',\nversion=version,\ndescription='''A code analyzer without caring the C\/C++ header files. ''' +\n'''It works with Java, C\/C++, JavaScript, Python, Ruby, Swift, Objective C. Metrics includes cyclomatic complexity number etc.''',\nlong_description=open('README.rst').read(),\nurl='http:\/\/www.lizard.ws',\nproject_urls={\n'Source': 'https:\/\/github.com\/terryyin\/lizard',\n},\ndownload_url='https:\/\/pypi.python.org\/lizard\/',\nlicense='MIT',\nplatforms='any',\nclassifiers=['Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Intended Audience :: End Users\/Desktop',\n'License :: Freeware',\n'Operating System :: POSIX',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: MacOS :: MacOS X',\n'Topic :: Software Development :: Quality Assurance',\n'Programming Language :: C',\n'Programming Language :: C++',\n'Programming Language :: Java',\n'Programming Language :: JavaScript',\n'Programming Language :: Objective C',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6'],\ncmdclass={'version': VersionCommand},\npackages=['lizard_ext', 'lizard_languages'],\n#data_files=[('lizard_ext', [])],\npy_modules=['lizard'],\nentry_points={'console_scripts': ['lizard = lizard:main']},\nauthor='Terry Yin',\nauthor_email='terry@odd-e.com',\n)\n"
    },
    {
        "package_name": "lob-4.5.4",
        "file_list": "LICENSE api_requestor.py compat.py constants.py error.py resource.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup\n\nREADME = open('README.md').read()\n\nsetup(\nname='lob',\nversion='4.5.4',\nauthor='Lob',\nauthor_email='support@lob.com',\npackages=['lob'],\ndescription='Lob Python Bindings',\nlong_description=README,\nlong_description_content_type=\"text\/markdown\",\nurl='https:\/\/github.com\/lob\/lob-python',\nlicense='MIT',\ninstall_requires=[\n'requests'\n],\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\"\n]\n)\n"
    },
    {
        "package_name": "locket-1.0.0",
        "file_list": "LICENSE __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport os\nfrom setuptools import setup\n\ndef read(fname):\nreturn open(os.path.join(os.path.dirname(__file__), fname)).read()\n\nsetup(\nname='locket',\nversion='1.0.0',\ndescription='File-based locks for Python on Linux and Windows',\nlong_description=read(\"README.rst\"),\nauthor='Michael Williamson',\nauthor_email='mike@zwobble.org',\nurl='http:\/\/github.com\/mwilliamson\/locket.py',\npackages=['locket'],\nkeywords=\"lock filelock lockfile process\",\npython_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*',\nlicense=\"BSD-2-Clause\",\nclassifiers=[\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Operating System :: Unix',\n'Operating System :: Microsoft :: Windows',\n],\n)\n"
    },
    {
        "package_name": "locustio-0.999",
        "file_list": "LICENSE argument_parser.py clients.py fasthttp.py __init__.py env.py event.py exception.py log.py main.py protocol.py zmqrpc.py __init__.py runners.py chart.js echarts.common.min.js favicon.ico logo.png top_bg.png jquery-1.11.3.min.js jquery.jqote2.min.js jquery.tools.min.js locust.js style.css vintage.js stats.py index.html mock_locustfile.py mock_logging.py testcases.py test_client.py test_fasthttp.py test_locust_class.py test_log.py test_main.py test_old_wait_api.py test_parser.py test_runners.py test_sequential_taskset.py test_stats.py test_tags.py test_taskratio.py test_util.py test_wait_time.py test_web.py test_zmqrpc.py util.py __init__.py inspectuser.py sequential_taskset.py task.py users.py wait_time.py __init__.py cache.py deprecation.py exception_handler.py rounding.py timespan.py __init__.py web.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README setup.cfg setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nimport ast\nimport os\nimport re\nimport sys\n\nfrom setuptools import find_packages, setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\nfrom setuptools.command.egg_info import egg_info\n\n# parse version from locust\/__init__.py\n_version_re = re.compile(r'__version__\\s+=\\s+(.*)')\n_init_file = os.path.join(os.path.abspath(os.path.dirname(__file__)), \"locust\", \"__init__.py\")\nwith open(_init_file, 'rb') as f:\nversion = str(ast.literal_eval(_version_re.search(\nf.read().decode('utf-8')).group(1)))\n\nclass PostDevelopCommand(develop):\ndef run(self):\nsys.exit(\"\\n**** Locust package has moved from 'locustio' to 'locust'. Please update your reference (or pin your version to 0.14.6 if you dont want to update to 1.0) ****\\n\")\n\nclass PostInstallCommand(install):\ndef run(self):\nsys.exit(\"\\n**** Locust package has moved from 'locustio' to 'locust'. Please update your reference (or pin your version to 0.14.6 if you dont want to update to 1.0) ****\\n\")\n\nclass PostEggInfoCommand(egg_info):\ndef run(self):\nsys.exit(\"\\n**** Locust package has moved from 'locustio' to 'locust'. Please update your reference (or pin your version to 0.14.6 if you dont want to update to 1.0) ****\\n\")\n\nsetup(\nname='locustio',\nversion=version,\ndescription=\"Website load testing framework\",\nlong_description=\"\"\"Locust is a python utility for doing easy, distributed load testing of a web site\"\"\",\nclassifiers=[\n\"Topic :: Software Development :: Testing :: Traffic Generation\",\n\"Development Status :: 5 - Production\/Stable\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: System Administrators\",\n],\nkeywords='',\nauthor='Jonatan Heyman, Carl Bystrom, Joakim Hamr\u00e9n, Hugo Heyman',\nauthor_email='',\nurl='https:\/\/locust.io\/',\nlicense='MIT',\npackages=find_packages(exclude=['examples', 'tests']),\ninclude_package_data=True,\nzip_safe=False,\ninstall_requires=[\n],\ntest_suite=\"locust.test\",\ntests_require=['mock'],\nentry_points={\n'console_scripts': [\n'locust = locust.main:main',\n]\n}, \ncmdclass={\n'develop': PostDevelopCommand,\n'install': PostInstallCommand,\n# 'egg_info': PostEggInfoCommand,\n},\n)\n"
    },
    {
        "package_name": "Logbook-1.5.3",
        "file_list": "CHANGES LICENSE base.py compat.py concurrency.py handlers.py helpers.py more.py notifiers.py queues.py ticketing.py utils.py _fallback.py _speedups.pyx _termcolors.py __init__.py __version__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt Makefile MANIFEST.in PKG-INFO README.md test_setup.py setup.cfg setup.py conftest.py test_asyncio.py test_ci.py test_deadlock.py test_file_handler.py test_fingers_crossed_handler.py test_flags.py test_groups.py test_handlers.py test_handler_errors.py test_helpers.py test_logbook.py test_logger.py test_logging_api.py test_logging_compat.py test_logging_times.py test_log_record.py test_mail_handler.py test_more.py test_nteventlog_handler.py test_null_handler.py test_processors.py test_queues.py test_syslog_handler.py test_test_handler.py test_ticketing.py test_unicode.py test_utils.py utils.py __init__.py tox.ini",
        "setup.py": "r\"\"\"\nLogbook\n-------\n\nAn awesome logging implementation that is fun to use.\n\nQuickstart\n``````````\n\n::\n\nfrom logbook import Logger\nlog = Logger('A Fancy Name')\n\nlog.warn('Logbook is too awesome for most applications')\nlog.error(\"Can't touch this\")\n\nWorks for web apps too\n``````````````````````\n\n::\n\nfrom logbook import MailHandler, Processor\n\nmailhandler = MailHandler(from_addr='servererror@example.com',\nrecipients=['admin@example.com'],\nlevel='ERROR', format_string=u'''\\\nSubject: Application Error for {record.extra[path]} [{record.extra[method]}]\n\nMessage type: {record.level_name}\nLocation: {record.filename}:{record.lineno}\nModule: {record.module}\nFunction: {record.func_name}\nTime: {record.time:%Y-%m-%d %H:%M:%S}\nRemote IP: {record.extra[ip]}\nRequest: {record.extra[path]} [{record.extra[method]}]\n\nMessage:\n\n{record.message}\n''')\n\ndef handle_request(request):\ndef inject_extra(record, handler):\nrecord.extra['ip'] = request.remote_addr\nrecord.extra['method'] = request.method\nrecord.extra['path'] = request.path\n\nwith Processor(inject_extra):\nwith mailhandler:\n# execute code that might fail in the context of the\n# request.\n\"\"\"\n\nimport os\nimport platform\nimport sys\nfrom itertools import chain\n\nfrom distutils.command.build_ext import build_ext\nfrom distutils.errors import (\nCCompilerError, DistutilsExecError, DistutilsPlatformError)\nfrom setuptools import Distribution as _Distribution, Extension, setup\nfrom setuptools.command.test import test as TestCommand\n\ncmdclass = {}\nif sys.version_info < (2, 6):\nraise Exception('Logbook requires Python 2.6 or higher.')\n\ncpython = platform.python_implementation() == 'CPython'\n\next_modules = [Extension('logbook._speedups', sources=['logbook\/_speedups.c'])]\n\next_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError)\nif sys.platform == 'win32':\n# 2.6's distutils.msvc9compiler can raise an IOError when failing to\n# find the compiler\next_errors += (IOError,)\n\n\nclass BuildFailed(Exception):\ndef __init__(self):\nself.cause = sys.exc_info()[1] # work around py 2\/3 different syntax\n\n\nclass ve_build_ext(build_ext):\n\"\"\"This class allows C extension building to fail.\"\"\"\n\ndef run(self):\ntry:\nbuild_ext.run(self)\nexcept DistutilsPlatformError:\nraise BuildFailed()\n\ndef build_extension(self, ext):\ntry:\nbuild_ext.build_extension(self, ext)\nexcept ext_errors:\nraise BuildFailed()\nexcept ValueError:\n# this can happen on Windows 64 bit, see Python issue 7511\nif \"'path'\" in str(sys.exc_info()[1]): # works with both py 2\/3\nraise BuildFailed()\nraise\n\ncmdclass['build_ext'] = ve_build_ext\n\n\nclass Distribution(_Distribution):\n\ndef has_ext_modules(self):\n# We want to always claim that we have ext_modules. This will be fine\n# if we don't actually have them (such as on PyPy) because nothing\n# will get built, however we don't want to provide an overally broad\n# Wheel package when building a wheel without C support. This will\n# ensure that Wheel knows to treat us as if the build output is\n# platform specific.\nreturn True\n\n\nclass PyTest(TestCommand):\n# from https:\/\/pytest.org\/latest\/goodpractises.html\\\n# #integration-with-setuptools-test-commands\nuser_options = [('pytest-args=', 'a', 'Arguments to pass to py.test')]\n\ndefault_options = ['tests']\n\ndef initialize_options(self):\nTestCommand.initialize_options(self)\nself.pytest_args = ''\n\ndef finalize_options(self):\nTestCommand.finalize_options(self)\nself.test_args = []\nself.test_suite = True\n\ndef run_tests(self):\n# import here, cause outside the eggs aren't loaded\nimport pytest\nerrno = pytest.main(\n' '.join(self.default_options) + ' ' + self.pytest_args)\nsys.exit(errno)\n\ncmdclass['test'] = PyTest\n\n\ndef status_msgs(*msgs):\nprint('*' * 75)\nfor msg in msgs:\nprint(msg)\nprint('*' * 75)\n\nversion_file_path = os.path.join(\nos.path.dirname(__file__), 'logbook', '__version__.py')\n\nwith open(version_file_path) as version_file:\nexec(version_file.read()) # pylint: disable=W0122\n\nextras_require = dict()\nif sys.version_info[:2] < (3, 0):\nextras_require['test'] = set(['pytest', 'pytest-cov<2.6'])\nelse:\nextras_require['test'] = set(['pytest>4.0', 'pytest-cov>=2.6'])\n\nif sys.version_info[:2] < (3, 3):\nextras_require['test'] |= set(['mock'])\n\nextras_require['dev'] = set(['cython']) | extras_require['test']\n\nextras_require['execnet'] = set(['execnet>=1.0.9'])\nextras_require['sqlalchemy'] = set(['sqlalchemy'])\nextras_require['redis'] = set(['redis'])\nextras_require['zmq'] = set(['pyzmq'])\nextras_require['jinja'] = set(['Jinja2'])\nextras_require['compression'] = set(['brotli'])\n\nextras_require['all'] = set(chain.from_iterable(extras_require.values()))\n\n\ndef run_setup(with_cext):\nkwargs = {}\nif with_cext:\nkwargs['ext_modules'] = ext_modules\nelse:\nkwargs['ext_modules'] = []\n\nsetup(\nname='Logbook',\nversion=__version__,\nlicense='BSD',\nurl='http:\/\/logbook.pocoo.org\/',\nauthor='Armin Ronacher, Georg Brandl',\nauthor_email='armin.ronacher@active-4.com',\ndescription='A logging replacement for Python',\nlong_description=__doc__,\npackages=['logbook'],\nzip_safe=False,\nplatforms='any',\ncmdclass=cmdclass,\ntests_require=['pytest'],\nclassifiers=[\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n\n],\nextras_require=extras_require,\ndistclass=Distribution,\n**kwargs\n)\n\nif not cpython:\nrun_setup(False)\nstatus_msgs(\n'WARNING: C extensions are not supported on ' +\n'this Python platform, speedups are not enabled.',\n'Plain-Python build succeeded.'\n)\nelif os.environ.get('DISABLE_LOGBOOK_CEXT'):\nrun_setup(False)\nstatus_msgs(\n'DISABLE_LOGBOOK_CEXT is set; ' +\n'not attempting to build C extensions.',\n'Plain-Python build succeeded.'\n)\nelse:\ntry:\nrun_setup(True)\nexcept BuildFailed as exc:\nstatus_msgs(\nexc.cause,\n'WARNING: The C extension could not be compiled, ' +\n'speedups are not enabled.',\n'Failure information, if any, is above.',\n'Retrying the build without the C extension now.'\n)\n\nrun_setup(False)\n\nstatus_msgs(\n'WARNING: The C extension could not be compiled, ' +\n'speedups are not enabled.',\n'Plain-Python build succeeded.'\n)\n"
    },
    {
        "package_name": "loguru-0.6.0",
        "file_list": "LICENSE py.typed _asyncio_loop.py _better_exceptions.py _colorama.py _colorizer.py _contextvars.py _ctime_functions.py _datetime.py _defaults.py _error_interceptor.py _file_sink.py _filters.py _get_frame.py _handler.py _locks_machinery.py _logger.py _recattrs.py _simple_sinks.py _string_parsers.py __init__.py __init__.pyi dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py conftest.py chained_expression_direct.txt chained_expression_indirect.txt chaining_first.txt chaining_second.txt chaining_third.txt enqueue.txt enqueue_with_others_handlers.txt frame_values_backward.txt frame_values_forward.txt function.txt head_recursion.txt missing_attributes_traceback_objects.txt nested.txt nested_chained_catch_up.txt nested_decorator_catch_up.txt nested_explicit_catch_up.txt nested_wrapping.txt not_enough_arguments.txt no_tb.txt raising_recursion.txt suppressed_expression_direct.txt suppressed_expression_indirect.txt tail_recursion.txt too_many_arguments.txt assertion_error.txt assertion_error_custom.txt assertion_error_in_string.txt attributes.txt chained_both.txt encoding.txt global_variable.txt indentation_error.txt keyword_argument.txt multilines_repr.txt no_error_message.txt parenthesis.txt source_multilines.txt source_strings.txt syntax_error.txt syntax_highlighting.txt truncating.txt unprintable_object.txt assertionerror_without_traceback.txt catch_as_context_manager.txt catch_as_decorator_without_parentheses.txt catch_as_decorator_with_parentheses.txt catch_as_function.txt catch_message.txt exception_formatting_coroutine.txt exception_formatting_function.txt exception_formatting_generator.txt exception_in_property.txt handler_formatting_with_context_manager.txt handler_formatting_with_decorator.txt level_name.txt level_number.txt message_formatting_with_context_manager.txt message_formatting_with_decorator.txt nested_with_reraise.txt syntaxerror_without_traceback.txt sys_tracebacklimit.txt sys_tracebacklimit_negative.txt sys_tracebacklimit_none.txt sys_tracebacklimit_unset.txt zerodivisionerror_without_traceback.txt assertion_from_lib.txt assertion_from_local.txt callback.txt catch_decorator.txt catch_decorator_from_lib.txt decorated_callback.txt direct.txt indirect.txt string_lib.txt string_source.txt syntaxerror.txt chained_expression_direct.py chained_expression_indirect.py chaining_first.py chaining_second.py chaining_third.py enqueue.py enqueue_with_others_handlers.py frame_values_backward.py frame_values_forward.py function.py head_recursion.py missing_attributes_traceback_objects.py nested.py nested_chained_catch_up.py nested_decorator_catch_up.py nested_explicit_catch_up.py nested_wrapping.py not_enough_arguments.py no_tb.py raising_recursion.py suppressed_expression_direct.py suppressed_expression_indirect.py tail_recursion.py too_many_arguments.py assertion_error.py assertion_error_custom.py assertion_error_in_string.py attributes.py chained_both.py encoding.py global_variable.py indentation_error.py keyword_argument.py multilines_repr.py no_error_message.py parenthesis.py source_multilines.py source_strings.py syntax_error.py syntax_highlighting.py truncating.py unprintable_object.py assertionerror_without_traceback.py catch_as_context_manager.py catch_as_decorator_without_parentheses.py catch_as_decorator_with_parentheses.py catch_as_function.py catch_message.py exception_formatting_coroutine.py exception_formatting_function.py exception_formatting_generator.py exception_in_property.py handler_formatting_with_context_manager.py handler_formatting_with_decorator.py level_name.py level_number.py message_formatting_with_context_manager.py message_formatting_with_decorator.py nested_with_reraise.py syntaxerror_without_traceback.py sys_tracebacklimit.py sys_tracebacklimit_negative.py sys_tracebacklimit_none.py sys_tracebacklimit_unset.py zerodivisionerror_without_traceback.py assertion_from_lib.py assertion_from_local.py callback.py catch_decorator.py catch_decorator_from_lib.py decorated_callback.py direct.py indirect.py string_lib.py string_source.py syntaxerror.py __init__.py _init.py test_activation.py test_add_option_backtrace.py test_add_option_catch.py test_add_option_colorize.py test_add_option_diagnose.py test_add_option_enqueue.py test_add_option_filter.py test_add_option_format.py test_add_option_kwargs.py test_add_option_level.py test_add_option_serialize.py test_add_sinks.py test_ansimarkup_basic.py test_ansimarkup_extended.py test_bind.py test_configure.py test_contextualize.py test_coroutine_sink.py test_datetime.py test_deepcopy.py test_defaults.py test_exceptions_catch.py test_exceptions_formatting.py test_filesink_compression.py test_filesink_delay.py test_filesink_retention.py test_filesink_rotation.py test_formatting.py test_get_frame.py test_interception.py test_levels.py test_multiprocessing.py test_opt.py test_parse.py test_patch.py test_pickling.py test_propagation.py test_recattr.py test_remove.py test_repr.py test_standard_handler.py test_threading.py __init__.py",
        "setup.py": "import re\n\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\nwith open(\"loguru\/__init__.py\", \"r\") as file:\nregex_version = r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]'\nversion = re.search(regex_version, file.read(), re.MULTILINE).group(1)\n\nwith open(\"README.rst\", \"rb\") as file:\nreadme = file.read().decode(\"utf-8\")\n\nsetup(\nname=\"loguru\",\nversion=version,\npackages=[\"loguru\"],\npackage_data={\"loguru\": [\"__init__.pyi\", \"py.typed\"]},\ndescription=\"Python logging made (stupidly) simple\",\nlong_description=readme,\nlong_description_content_type=\"text\/x-rst\",\nauthor=\"Delgan\",\nauthor_email=\"delgan.py@gmail.com\",\nurl=\"https:\/\/github.com\/Delgan\/loguru\",\ndownload_url=\"https:\/\/github.com\/Delgan\/loguru\/archive\/{}.tar.gz\".format(version),\nproject_urls={\n\"Changelog\": \"https:\/\/github.com\/Delgan\/loguru\/blob\/master\/CHANGELOG.rst\",\n\"Documentation\": \"https:\/\/loguru.readthedocs.io\/en\/stable\/index.html\",\n},\nkeywords=[\"loguru\", \"logging\", \"logger\", \"log\"],\nlicense=\"MIT license\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Topic :: System :: Logging\",\n\"Intended Audience :: Developers\",\n\"Natural Language :: English\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n],\ninstall_requires=[\n\"colorama>=0.3.4 ; sys_platform=='win32'\",\n\"aiocontextvars>=0.2.0 ; python_version<'3.7'\",\n\"win32-setctime>=1.0.0 ; sys_platform=='win32'\",\n],\nextras_require={\n\"dev\": [\n\"black>=19.10b0 ; python_version>='3.6'\",\n\"colorama>=0.3.4\",\n\"docutils==0.16\",\n\"flake8>=3.7.7\",\n\"isort>=5.1.1 ; python_version>='3.6'\",\n\"tox>=3.9.0\",\n\"pytest>=4.6.2\",\n\"pytest-cov>=2.7.1\",\n\"Sphinx>=4.1.1 ; python_version>='3.6'\",\n\"sphinx-autobuild>=0.7.1 ; python_version>='3.6'\",\n\"sphinx-rtd-theme>=0.4.3 ; python_version>='3.6'\",\n]\n},\npython_requires=\">=3.5\",\n)\n"
    },
    {
        "package_name": "logutils-0.3.5",
        "file_list": "adapter.rst colorize.rst conf.py dictconfig.rst http.rst index.rst libraries.rst Makefile queue.rst redis.rst testing.rst whatsnew.rst LICENSE.txt adapter.py colorize.py dictconfig.py http.py queue.py redis.py testing.py __init__.py NEWS.txt PKG-INFO README.rst setup.py logutil_tests.py mytest.py test_adapter.py test_colorize.py test_dictconfig.py test_formatter.py test_messages.py test_queue.py test_redis.py test_testing.py",
        "setup.py": "# -*- coding: utf-8 -*-\n\nimport distutils.core\nimport logutils\nfrom os.path import join, dirname, abspath\nimport re\n\n\ndef description():\nf = open(join(dirname(__file__), 'README.rst'))\nreadme = f.read()\nf.close()\nregexp = r'logutils\\s*[\\d.]*\\s*\\n=======+\\s*\\n(.*)Requirements '\nreqts, = re.findall(regexp, readme, re.DOTALL)\nregexp = r'Availability & Documentation\\s*\\n-----+\\s*\\n(.*)'\navail, = re.findall(regexp, readme, re.DOTALL)\nreturn reqts + avail\n\nclass TestCommand(distutils.core.Command):\nuser_options = []\n\ndef run(self):\nimport sys\nimport unittest\n\nsys.path.append(join(dirname(__file__), 'tests'))\nimport logutil_tests\nloader = unittest.TestLoader()\nrunner = unittest.TextTestRunner()\ntest_results = runner.run(loader.loadTestsFromModule(logutil_tests))\nif not test_results.wasSuccessful():\nsys.exit(1)\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndistutils.core.setup(\nname='logutils',\nversion=logutils.__version__,\nauthor='Vinay Sajip',\nauthor_email='vinay_sajip@red-dove.com',\nurl='http:\/\/code.google.com\/p\/logutils\/',\ndescription='Logging utilities',\nlong_description = description(),\nlicense='Copyright (C) 2010-2017 by Vinay Sajip. All Rights Reserved. See LICENSE.txt for license.',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 3\",\n'Topic :: Software Development',\n],\npackages=['logutils'],\ncmdclass={\n'test': TestCommand,\n},\n\n)\n"
    },
    {
        "package_name": "logzio-python-handler-4.0.0",
        "file_list": "LICENSE exceptions.py flusher.py handler.py logger.py sender.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py listener.py logsList.py persistentFlags.py __init__.py test_add_context.py test_logzioHandler.py test_logzioSender.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom setuptools import setup, find_packages\nsetup(\nname=\"logzio-python-handler\",\nversion='4.0.0',\ndescription=\"Logging handler to send logs to your Logz.io account with bulk SSL\",\nkeywords=\"logging handler logz.io bulk https\",\nauthor=\"roiravhon\",\nmaintainer=\"tamir-michaeli\",\nmail=\"tamir.michaeli@logz.io\",\nurl=\"https:\/\/github.com\/logzio\/logzio-python-handler\/\",\nlicense=\"Apache License 2\",\npackages=find_packages(),\ninstall_requires=[\n\"requests>=2.27.0\",\n\"protobuf==3.20.1\",\n\"opentelemetry-instrumentation-logging==0.32b0\"\n],\ntest_requires=[\n\"future\"\n],\ninclude_package_data=True,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Programming Language :: Python :: 3.9'\n]\n)\n"
    },
    {
        "package_name": "LunarCalendar-0.0.9",
        "file_list": "CHANGELOG.rst basefestival.py color.py command.py converter.py festival.py solarterm.py _calc.py _compact.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.rst README_zh.rst setup.cfg setup.py",
        "setup.py": "from setuptools import setup\nimport os\nimport codecs\nfrom lunarcalendar import __version__\n\n\ndef read(fname):\n\"\"\"Loads the contents of a file, returning it as a string\"\"\"\nfilepath = os.path.join(os.path.dirname(__file__), fname)\nreturn codecs.open(filepath, 'r', 'utf8').read()\n\n\nsetup(\nname='LunarCalendar',\nversion=__version__,\ndescription='A lunar calendar converter, including a number of lunar and solar holidays, mainly from China.',\nlong_description=read(\"README.rst\"),\nauthor='wolfhong',\nauthor_email='hongxucai1991@gmail.com',\nurl='https:\/\/github.com\/wolfhong\/LunarCalendar',\nclassifiers=[\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 3\",\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"Topic :: Software Development :: Libraries\",\n\"Topic :: Utilities\",\n],\nkeywords=[\n'lunar calendar', 'festival', 'Chinese festivals', '24 solar terms',\n'solar calendar', 'lunar solar converter', 'lunisolar calendar',\n],\nlicense='MIT',\npackages=[\"lunarcalendar\", ],\ninstall_requires=[\n'python-dateutil>=2.6.1',\n'ephem>=3.7.5.3', # basic astronomical computations for Python\n'pytz', # timezone support\n],\npython_requires='>=2.7, <4',\nentry_points={\n'console_scripts': [\n'lunar-find=lunarcalendar.command:find',\n],\n},\n)\n"
    },
    {
        "package_name": "M2Crypto-0.38.0",
        "file_list": "CHANGES dave.README dispatcher.py dispatcher.README isaac.httpslib.py isaac.README README SimpleX509create.py SimpleX509create.README smimeplus.py smimeplus.README conf.py environment.pickle howto.ca.doctree howto.smime.doctree howto.ssl.doctree index.doctree M2Crypto.doctree M2Crypto.SSL.doctree ZServerSSL-HOWTO.doctree howto.ca.rst howto.smime.rst howto.ssl.rst .buildinfo genindex.html howto.ca.html howto.smime.html howto.ssl.html index.html M2Crypto.html M2Crypto.SSL.html objects.inv py-modindex.html search.html searchindex.js ZServerSSL-HOWTO.html index.html ASN1.html AuthCookie.html BIO.html BN.html DH.html DSA.html EC.html Engine.html Err.html EVP.html ftpslib.html httpslib.html m2urllib.html m2urllib2.html m2xmlrpclib.html Rand.html RC4.html RSA.html SMIME.html cb.html Checker.html Cipher.html Connection.html Context.html Session.html SSLServer.html ssl_dispatcher.html timeout.html TwistedProtocolWrapper.html SSL.html threading.html util.html X509.html request.html howto.ca.rst.txt howto.smime.rst.txt howto.ssl.rst.txt index.rst.txt M2Crypto.rst.txt M2Crypto.SSL.rst.txt ZServerSSL-HOWTO.rst.txt ajax-loader.gif alabaster.css basic.css comment-bright.png comment-close.png comment.png custom.css doctools.js documentation_options.js down-pressed.png down.png file.png jquery-3.2.1.js jquery-3.5.1.js jquery.js language_data.js minus.png plus.png pygments.css searchtools.js underscore-1.3.1.js underscore.js up-pressed.png up.png websupport.js index.rst M2Crypto.rst M2Crypto.SSL.rst make.bat Makefile ZServerSSL-HOWTO.rst epydoc.conf INSTALL.rst LICENCE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py ASN1.py AuthCookie.py BIO.py BN.py callback.py DH.py DSA.py EC.py Engine.py Err.py EVP.py ftpslib.py httpslib.py m2.py m2crypto.py m2urllib.py m2urllib2.py m2xmlrpclib.py Rand.py RC4.py RSA.py six.py SMIME.py cb.py Checker.py Cipher.py Connection.py Context.py Session.py SSLServer.py ssl_dispatcher.py timeout.py TwistedProtocolWrapper.py __init__.py threading.py util.py X509.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt libcrypto-compat.h py3k_compat.h _aes.i _asn1.i _bio.i _bn.i _dh.i _dsa.i _ec.i _engine.i _evp.i _lib.h _lib.i _lib11_compat.i _m2crypto.def _m2crypto.i _m2crypto_wrap.c _objects.i _pkcs7.i _py3k_compat.i _rand.i _rc4.i _rsa.i _ssl.i _threads.i _util.i _x509.i config.py alltests.py bad_date_cert.crt ca.pem ca_key.pem der_encoded_seq.b64 dhparams.pem dsa.param.pem dsa.priv.pem dsa.pub.pem easy_rsa.pem ec.priv.pem ec.pub.pem ec.pub2.pem ed25519.priv.pem ed25519.pub.pem ed25519.pub2.pem fips.py long_serial_cert.pem makecerts.py pubring.pgp randpool.dat README recipient.pem recipient_key.pem rsa.priv.pem rsa.priv2.pem rsa.pub.pem sample-p7.pem server.pem server_key.pem sig.p7 sig.p7s signer.pem signer_key.pem test_aes.py test_asn1.py test_authcookie.py test_bio.py test_bio_file.py test_bio_iobuf.py test_bio_membuf.py test_bio_ssl.py test_bn.py test_dh.py test_dsa.py test_ecdh.py test_ecdsa.py test_ec_curves.py test_engine.py test_err.py test_evp.py test_obj.py test_rand.py test_rc4.py test_rsa.py test_smime.py test_ssl.py test_ssl_offline.py test_ssl_win.py test_threading.py test_timeout.py test_util.py test_x509.py te_chunked_response.txt thawte.pem x509.der x509.pem x509_key.pem __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n\"\"\"\nsetuptools based installer for M2Crypto.\n\nCopyright (c) 1999-2004, Ng Pheng Siong. All rights reserved.\n\nPortions created by Open Source Applications Foundation (OSAF) are\nCopyright (C) 2004-2007 OSAF. All Rights Reserved.\n\nCopyright 2008-2011 Heikki Toivonen. All rights reserved.\n\nCopyright 2018 Daniel Wozniak. All rights reserved.\n\"\"\"\nimport glob\nimport logging\nimport os\nimport platform\nimport re\nimport shlex\nimport shutil\nimport subprocess\nimport sys\n\nfrom distutils.command import build\nfrom distutils.command.clean import clean\nfrom distutils.dir_util import mkpath\n\nimport setuptools\nfrom setuptools.command import build_ext\n\nlogging.basicConfig(format='%(levelname)s:%(funcName)s:%(message)s',\nstream=sys.stdout, level=logging.INFO)\nlog = logging.getLogger('setup')\n\nrequires_list = []\nif (2, 6) < sys.version_info[:2] < (3, 5):\nrequires_list.append('typing')\nif sys.version_info[0] > 2:\nfrom typing import Dict, List\n\n\npackage_data = {} # type: Dict[str, List[str]]\nif sys.platform == 'win32':\npackage_data.update(M2Crypto=[\"*.dll\"])\n\n\ndef _get_additional_includes():\nif os.name == 'nt':\nglobmask = os.path.join('C:', os.sep, 'Program Files*',\n'*Visual*', 'VC', 'include')\nerr = glob.glob(globmask)\nelse:\ncpp = shlex.split(os.environ.get('CPP', 'cpp'))\npid = subprocess.Popen(cpp + ['-Wp,-v', '-'],\nstdin=open(os.devnull, 'r'),\nstdout=subprocess.PIPE,\nstderr=subprocess.PIPE)\n_, err = pid.communicate()\nerr = [line.lstrip() for line in err.decode('utf8').split('\\n')\nif line and line.startswith(' \/')]\n\nlog.debug('additional includes:\\n%s', err)\nreturn err\n\n\ndef openssl_version(ossldir, req_ver, required=False):\n# type: (str, int, bool) -> bool\n\"\"\"\nCompare version of the installed OpenSSL with the maximum required version.\n\n:param ossldir: the directory where OpenSSL is installed\n:param req_ver: required version as integer (e.g. 0x10100000)\n:param required: whether we want bigger-or-equal or less-than\n:return: Boolean indicating whether the satisfying version of\nOpenSSL has been installed.\n\"\"\"\nver = None\nfile = os.path.join(ossldir, 'include', 'openssl', 'opensslv.h')\n\nwith open(file) as origin_file:\nfor line in origin_file:\nm = re.match(\nr'^# *define *OPENSSL_VERSION_NUMBER *(0x[0-9a-fA-F]*)',\nline)\nif m:\nlog.debug('found version number: %s\\n', m.group(1))\nver = int(m.group(1), base=16)\nbreak\n\nif ver is None:\nraise OSError('Unknown format of file %s\\n' % file)\n\nif required:\nreturn ver >= req_ver\nelse:\nreturn ver < req_ver\n\n\nclass _M2CryptoBuild(build.build):\n\"\"\"Enable swig_opts to inherit any include_dirs settings made elsewhere.\"\"\"\n\nuser_options = build.build.user_options + \\\n[('openssl=', 'o', 'Prefix for openssl installation location')] + \\\n[('bundledlls', 'b', 'Bundle DLLs (win32 only)')]\n\ndef initialize_options(self):\n\"\"\"Overload to enable custom openssl settings to be picked up.\"\"\"\nbuild.build.initialize_options(self)\nself.openssl = None\nself.bundledlls = None\n\n\nclass _M2CryptoBuildExt(build_ext.build_ext):\n\"\"\"Enable swig_opts to inherit any include_dirs settings made elsewhere.\"\"\"\n\nuser_options = build_ext.build_ext.user_options + \\\n[('openssl=', 'o', 'Prefix for openssl installation location')] + \\\n[('bundledlls', 'b', 'Bundle DLLs (win32 only)')]\n\ndef initialize_options(self):\n\"\"\"Overload to enable custom openssl settings to be picked up.\"\"\"\nbuild_ext.build_ext.initialize_options(self)\nself.openssl = None\nself.bundledlls = None\n\ndef finalize_options(self):\n# type: (None) -> None\n\"\"\"Append custom openssl include file and library linking options.\"\"\"\nbuild_ext.build_ext.finalize_options(self)\nself.openssl_default = None\nself.set_undefined_options('build', ('openssl', 'openssl'))\nif self.openssl is None:\nself.openssl = self.openssl_default\nself.set_undefined_options('build', ('bundledlls', 'bundledlls'))\n\nself.libraries = ['ssl', 'crypto']\nif sys.platform == 'win32':\nself.libraries = ['ssleay32', 'libeay32']\nif self.openssl and openssl_version(self.openssl,\n0x10100000, True):\nself.libraries = ['libssl', 'libcrypto']\nself.swig_opts.append('-D_WIN32')\n# Swig doesn't know the version of MSVC, which causes\n# errors in e_os2.h trying to import stdint.h. Since\n# python 2.7 is intimately tied to MSVC 2008, it's\n# harmless for now to define this. Will come back to\n# this shortly to come up with a better fix.\nself.swig_opts.append('-D_MSC_VER=1500')\n\nif sys.version_info[:1] >= (3,):\nself.swig_opts.append('-py3')\n\n# swig seems to need the default header file directories\nself.swig_opts.extend(['-I%s' % i for i in _get_additional_includes()])\n\nlog.debug('self.include_dirs = %s', self.include_dirs)\nlog.debug('self.library_dirs = %s', self.library_dirs)\n\nif self.openssl is not None:\nlog.debug('self.openssl = %s', self.openssl)\nopenssl_library_dir = os.path.join(self.openssl, 'lib')\nopenssl_include_dir = os.path.join(self.openssl, 'include')\n\nself.library_dirs.append(openssl_library_dir)\nself.include_dirs.append(openssl_include_dir)\n\nlog.debug('self.include_dirs = %s', self.include_dirs)\nlog.debug('self.library_dirs = %s', self.library_dirs)\n\nif platform.system() == \"Linux\":\n# For RedHat-based distros, the '-D__{arch}__' option for\n# Swig needs to be normalized, particularly on i386.\nmach = platform.machine().lower()\nif mach in ('i386', 'i486', 'i586', 'i686'):\narch = '__i386__'\nelif mach in ('ppc64', 'powerpc64', 'ppc64le', 'ppc64el'):\narch = '__powerpc64__'\nelif mach in ('ppc', 'powerpc'):\narch = '__powerpc__'\nelse:\narch = '__%s__' % mach\nself.swig_opts.append('-D%s' % arch)\nif mach in ('ppc64le', 'ppc64el'):\nself.swig_opts.append('-D_CALL_ELF=2')\nif mach in ('arm64_be'):\nself.swig_opts.append('-D__AARCH64EB__')\n\nself.swig_opts.extend(['-I%s' % i for i in self.include_dirs])\n\n# Some Linux distributor has added the following line in\n# \/usr\/include\/openssl\/opensslconf.h:\n#\n# #include \"openssl-x85_64.h\"\n#\n# This is fine with C compilers, because they are smart enough to\n# handle 'local inclusion' correctly. Swig, on the other hand, is\n# not as smart, and needs to be told where to find this file...\n#\n# Note that this is risky workaround, since it takes away the\n# namespace that OpenSSL uses. If someone else has similarly\n# named header files in \/usr\/include, there will be clashes.\nif self.openssl is None:\nself.swig_opts.append('-I\/usr\/include\/openssl')\nelse:\nself.swig_opts.append(\n'-I' + os.path.join(openssl_include_dir, 'openssl'))\n\nself.swig_opts.append('-includeall')\nself.swig_opts.append('-modern')\nself.swig_opts.append('-builtin')\n\n# These two lines are a workaround for\n# http:\/\/bugs.python.org\/issue2624 , hard-coding that we are only\n# building a single extension with a known path; a proper patch to\n# distutils would be in the run phase, when extension name and path are\n# known.\nself.swig_opts.extend(['-outdir',\nos.path.join(os.getcwd(), 'src', 'M2Crypto')])\nself.include_dirs.append(os.path.join(os.getcwd(), 'src', 'SWIG'))\n\nif sys.platform == 'cygwin' and self.openssl is not None:\n# Cygwin SHOULD work (there's code in distutils), but\n# if one first starts a Windows command prompt, then bash,\n# the distutils code does not seem to work. If you start\n# Cygwin directly, then it would work even without this change.\n# Someday distutils will be fixed and this won't be needed.\nself.library_dirs += [os.path.join(self.openssl, 'bin')]\n\nmkpath(os.path.join(self.build_lib, 'M2Crypto'))\n\ndef run(self):\n\"\"\"\nOn Win32 platforms include the openssl dll's in the binary packages\n\"\"\"\n\n# Win32 bdist builds must use --openssl in the builds step.\nif not self.bundledlls:\nbuild_ext.build_ext.run(self)\nreturn\n\nif sys.platform == 'win32':\nver_part = ''\nif self.openssl and openssl_version(self.openssl,\n0x10100000, True):\nver_part += '-1_1'\nif sys.maxsize > 2**32:\nver_part += '-x64'\nsearch = list(self.library_dirs)\nif self.openssl:\nsearch = search + [self.openssl,\nos.path.join(self.openssl, 'bin')]\nlibs = list(self.libraries)\nfor libname in list(libs):\nfor search_path in search:\ndll_name = '{0}{1}.dll'.format(libname, ver_part)\ndll_path = os.path.join(search_path, dll_name)\nif os.path.exists(dll_path):\nshutil.copy(dll_path, 'M2Crypto')\nlibs.remove(libname)\nbreak\nif libs:\nraise Exception(\"Libs not found {}\".format(','.join(libs)))\nbuild_ext.build_ext.run(self)\n\n\nx_comp_args = set()\n\n# We take care of deprecated functions in OpenSSL with our code, no need\n# to spam compiler output with it.\nif sys.platform == 'win32':\nx_comp_args.update(['-DTHREADING', '-D_CRT_SECURE_NO_WARNINGS'])\nelse:\nx_comp_args.update(['-DTHREADING', '-Wno-deprecated-declarations'])\n\nm2crypto = setuptools.Extension(name='M2Crypto._m2crypto',\nsources=['src\/SWIG\/_m2crypto.i'],\nextra_compile_args=list(x_comp_args),\n# Uncomment to build Universal Mac binaries\n# extra_link_args =\n# ['-Wl,-search_paths_first'],\n)\n\n\nclass Clean(clean):\ndef __init__(self, dist):\nclean.__init__(self, dist)\n\ndef initialize_options(self):\nclean.initialize_options(self)\nself.all = True\n\ndef finalize_options(self):\nclean.finalize_options(self)\n\ndef run(self):\nclean.run(self)\ngarbage_list = [\nos.path.join('src', 'M2Crypto', '*.so'),\nos.path.join('src', 'M2Crypto', '*.pyd'),\nos.path.join('src', 'M2Crypto', '*.dll')\n]\nfor p in garbage_list:\nfor f in glob.glob(p):\nif os.path.exists(f):\nos.unlink(f)\n\n\ndef __get_version(): # noqa\nwith open('src\/M2Crypto\/__init__.py') as init_file:\nfor line in init_file:\nif line.startswith('__version__ ='):\n# Originally string.whitespace, but it is deprecated\nstring_whitespace = ' \\t\\n\\r\\x0b\\x0c'\nreturn line.split('=')[1].strip(string_whitespace + \"'\")\n\n\nlong_description_text = '''\\\nM2Crypto is the most complete Python wrapper for OpenSSL featuring RSA, DSA,\nDH, EC, HMACs, message digests, symmetric ciphers (including AES); SSL\nfunctionality to implement clients and servers; HTTPS extensions to Python's\nhttplib, urllib, and xmlrpclib; unforgeable HMAC'ing AuthCookies for web\nsession management; FTP\/TLS client and server; S\/MIME; M2Crypto can also be\nused to provide SSL for Twisted. Smartcards supported through the Engine\ninterface.'''\n\nsetuptools.setup(\nname='M2Crypto',\nversion=__get_version(),\ndescription='M2Crypto: A Python crypto and SSL toolkit',\nlong_description=long_description_text,\nlicense='MIT',\nplatforms=['any'],\nauthor='Ng Pheng Siong',\nauthor_email='ngps@sandbox.rulemaker.net',\nmaintainer='Matej Cepl',\nmaintainer_email='mcepl@cepl.eu',\nurl='https:\/\/gitlab.com\/m2crypto\/m2crypto',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: C',\n'Programming Language :: Python',\n'Topic :: Security :: Cryptography',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n],\nkeywords='cryptography openssl',\npackages=setuptools.find_packages('src', exclude=['contrib', 'docs', 'tests']),\npackage_dir={'': 'src'},\next_modules=[m2crypto],\ntest_suite='tests.alltests.suite',\ninstall_requires=requires_list,\npackage_data=package_data,\nzip_safe=False,\ninclude_package_data=True,\ncmdclass={\n'build_ext': _M2CryptoBuildExt,\n'build': _M2CryptoBuild,\n'clean': Clean\n}\n)\n"
    },
    {
        "package_name": "makefun-1.14.0",
        "file_list": "base.yml .gitignore .pylintrc check_python_version.py flake8-requirements.txt github_release.py nox_utils.py api_reference.md changelog.md index.md long_description.md LICENSE mkdocs.yml noxfile-requirements.txt noxfile.py PKG-INFO pyproject.toml README.md setup.cfg setup.py main.py py.typed _main_legacy_py.py _main_py35_and_higher.py _main_py36_and_higher.py _version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt test_advanced.py test_compile_deco.py test_create_from_signature.py test_create_from_string.py test_doc.py test_generators_coroutines.py test_issues.py test_partial_and_macros.py test_so.py _test_py35.py _test_py36.py _test_py38.py __init__.py",
        "setup.py": "\"\"\"\nTo understand this project's build structure\n\n- This project uses setuptools, so it is declared as the build system in the pyproject.toml file\n- We use as much as possible `setup.cfg` to store the information so that it can be read by other tools such as `tox`\nand `nox`. So `setup.py` contains **almost nothing** (see below)\nThis philosophy was found after trying all other possible combinations in other projects :)\nA reference project that was inspiring to make this move : https:\/\/github.com\/Kinto\/kinto\/blob\/master\/setup.cfg\n\nSee also:\nhttps:\/\/setuptools.readthedocs.io\/en\/latest\/setuptools.html#configuring-setup-using-setup-cfg-files\nhttps:\/\/packaging.python.org\/en\/latest\/distributing.html\nhttps:\/\/github.com\/pypa\/sampleproject\n\"\"\"\nfrom setuptools import setup\n\n\n# (1) check required versions (from https:\/\/medium.com\/@daveshawley\/safely-using-setup-cfg-for-metadata-1babbe54c108)\nimport pkg_resources\n\npkg_resources.require(\"setuptools>=39.2\")\npkg_resources.require(\"setuptools_scm\")\n\n\n# (2) Generate download url using git version\nfrom setuptools_scm import get_version # noqa: E402\n\nURL = \"https:\/\/github.com\/smarie\/python-makefun\"\nDOWNLOAD_URL = URL + \"\/tarball\/\" + get_version()\n\n\n# (3) Call setup() with as little args as possible\nsetup(\ndownload_url=DOWNLOAD_URL,\nuse_scm_version={\n\"write_to\": \"src\/makefun\/_version.py\"\n}, # we can't put `use_scm_version` in setup.cfg yet unfortunately\n)\n"
    },
    {
        "package_name": "maltego-trx-1.6.0",
        "file_list": "LICENSE commands.py decorator_registry.py entities.py handler.py maltego.py mtz.py oauth.py overlays.py registry.py server.py docker-compose.yml Dockerfile extensions.py project.py requirements.txt settings.csv settings.py DNSToIP.py GreetPerson.py GreetPersonLocalized.py OverlayExample.py __init__.py transforms.csv transform.py utils.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup\nfrom maltego_trx import VERSION\n\nwith open(\"README.md\", \"r\") as readme_md:\nlong_description = readme_md.read()\n\nsetup(\nname='maltego-trx',\nversion=VERSION,\ndescription='Python library used to develop Maltego transforms',\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl='https:\/\/github.com\/paterva\/maltego-trx\/',\nauthor='Maltego Staff',\nauthor_email='support@maltego.com',\nlicense='MIT',\ninstall_requires=[\n'flask>=1',\n'six>=1',\n'cryptography==3.3.2' # pinned for now as newer versions require setuptools_rust\n],\nextras_require={\n':python_version == \"3.6\"': [\n'dataclasses',\n],\n},\npackages=[\n'maltego_trx',\n'maltego_trx\/template_dir',\n'maltego_trx\/template_dir\/transforms',\n],\npackage_data={\n'maltego_trx\/template_dir': [\n'settings.csv',\n'transforms.csv',\n'docker-compose.yml',\n'Dockerfile',\n'requirements.txt',\n]\n},\nentry_points={\n'console_scripts': [\n'maltego-trx = maltego_trx.commands:execute_from_command_line',\n]\n},\nzip_safe=False\n)\n"
    },
    {
        "package_name": "marshmallow-sqlalchemy-0.28.1",
        "file_list": "AUTHORS.rst CHANGELOG.rst CONTRIBUTING.rst api_reference.rst authors.rst changelog.rst conf.py contributing.rst index.rst license.rst make.bat Makefile recipes.rst marshmallow-sqlalchemy-logo.png useful-links.html useful-links.html LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py convert.py exceptions.py fields.py load_instance_mixin.py py.typed schema.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt conftest.py test_conversion.py test_sqlalchemy_schema.py __init__.py",
        "setup.py": "import re\n\nfrom setuptools import find_packages, setup\n\nINSTALL_REQUIRES = (\"marshmallow>=3.0.0\", \"SQLAlchemy>=1.3.0\", \"packaging>=21.3\")\nEXTRAS_REQUIRE = {\n\"tests\": [\"pytest\", \"pytest-lazy-fixture>=0.6.2\"],\n\"lint\": [\"flake8==4.0.1\", \"flake8-bugbear==22.7.1\", \"pre-commit~=2.0\"],\n\"docs\": [\"sphinx==4.4.0\", \"alabaster==0.7.12\", \"sphinx-issues==3.0.1\"],\n}\nEXTRAS_REQUIRE[\"dev\"] = EXTRAS_REQUIRE[\"tests\"] + EXTRAS_REQUIRE[\"lint\"] + [\"tox\"]\n\n\ndef find_version(fname):\n\"\"\"Attempts to find the version number in the file names fname.\nRaises RuntimeError if not found.\n\"\"\"\nversion = \"\"\nwith open(fname) as fp:\nreg = re.compile(r'__version__ = [\\'\"]([^\\'\"]*)[\\'\"]')\nfor line in fp:\nm = reg.match(line)\nif m:\nversion = m.group(1)\nbreak\nif not version:\nraise RuntimeError(\"Cannot find version information\")\nreturn version\n\n\ndef read(fname):\nwith open(fname) as fp:\ncontent = fp.read()\nreturn content\n\n\nsetup(\nname=\"marshmallow-sqlalchemy\",\nversion=find_version(\"src\/marshmallow_sqlalchemy\/__init__.py\"),\ndescription=\"SQLAlchemy integration with the marshmallow (de)serialization library\",\nlong_description=read(\"README.rst\"),\nauthor=\"Steven Loria\",\nauthor_email=\"sloria1@gmail.com\",\nurl=\"https:\/\/github.com\/marshmallow-code\/marshmallow-sqlalchemy\",\npackages=find_packages(\"src\"),\npackage_dir={\"\": \"src\"},\npackage_data={\"marshmallow_sqlalchemy\": [\"py.typed\"]},\ninclude_package_data=True,\npython_requires=\">=3.7\",\ninstall_requires=INSTALL_REQUIRES,\nextras_require=EXTRAS_REQUIRE,\nlicense=\"MIT\",\nzip_safe=False,\nkeywords=\"sqlalchemy marshmallow\",\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Natural Language :: English\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\ntest_suite=\"tests\",\nproject_urls={\n\"Changelog\": \"https:\/\/marshmallow-sqlalchemy.readthedocs.io\/en\/latest\/changelog.html\",\n\"Issues\": \"https:\/\/github.com\/marshmallow-code\/marshmallow-sqlalchemy\/issues\",\n\"Funding\": \"https:\/\/opencollective.com\/marshmallow\",\n},\n)\n"
    },
    {
        "package_name": "matplotlib-3.5.3",
        "file_list": ".appveyor.yml config.yml deploy-docs.sh .coveragerc .flake8 .gitattributes codecov.yml CONTRIBUTING.md dependabot.yml FUNDING.yml bug_report.yml config.yml documentation.yml feature_request.yml maintenance.yml PULL_REQUEST_TEMPLATE.md cibuildwheel.yml circleci.yml clean_pr.yml pr_welcome.yml reviewdog.yml tests.yml .gitignore .git_archival.txt .lgtm.yml .mailmap .matplotlib-repo .meeseeksdev.yml .pre-commit-config.yaml azure-pipelines.yml check_wheel_licenses.py silence CITATION.bib CODE_OF_CONDUCT.md afm_api.rst animation_api.rst artist_api.rst axes_api.rst axis_api.rst backend_agg_api.rst backend_bases_api.rst backend_cairo_api.rst backend_gtk3_api.rst backend_gtk4_api.rst backend_managers_api.rst backend_mixed_api.rst backend_nbagg_api.rst backend_pdf_api.rst backend_pgf_api.rst backend_ps_api.rst backend_qt_api.rst backend_svg_api.rst backend_template_api.rst backend_tk_api.rst backend_tools_api.rst backend_webagg_api.rst backend_wx_api.rst bezier_api.rst blocking_input_api.rst category_api.rst cbook_api.rst cm_api.rst collections_api.rst colorbar_api.rst colors_api.rst container_api.rst contour_api.rst dates_api.rst docstring_api.rst dviread.rst figure_api.rst fontconfig_pattern_api.rst font_manager_api.rst gridspec_api.rst image_api.rst index.rst index_backend_api.rst legend_api.rst legend_handler_api.rst lines_api.rst markers_api.rst mathtext_api.rst matplotlib_configuration_api.rst mlab_api.rst 00001-ABC.rst 00001-ABC.rst 00001-ABC.rst README.rst 00001-ABC.rst next_api_changes.rst offsetbox_api.rst patches_api.rst patheffects_api.rst path_api.rst api_changes_0.40.rst api_changes_0.42.rst api_changes_0.50.rst api_changes_0.54.3.rst api_changes_0.54.rst api_changes_0.60.rst api_changes_0.61.rst api_changes_0.63.rst api_changes_0.65.1.rst api_changes_0.65.rst api_changes_0.70.rst api_changes_0.71.rst api_changes_0.72.rst api_changes_0.73.rst api_changes_0.80.rst api_changes_0.81.rst api_changes_0.82.rst api_changes_0.83.rst api_changes_0.84.rst api_changes_0.85.rst api_changes_0.86.rst api_changes_0.87.7.rst api_changes_0.90.0.rst api_changes_0.90.1.rst api_changes_0.91.0.rst api_changes_0.91.2.rst api_changes_0.98.0.rst api_changes_0.98.1.rst api_changes_0.98.x.rst api_changes_0.99.rst api_changes_0.99.x.rst api_changes_1.1.x.rst api_changes_1.2.x.rst api_changes_1.3.x.rst api_changes_1.4.x.rst api_changes_1.5.0.rst api_changes_1.5.2.rst api_changes_1.5.3.rst api_changes_2.0.0.rst api_changes_2.0.1.rst api_changes_2.1.0.rst api_changes_2.1.1.rst api_changes_2.1.2.rst api_changes_2.2.0.rst api_changes_3.0.0.rst api_changes_3.0.1.rst api_changes_3.1.0.rst api_changes_3.1.1.rst behavior.rst deprecations.rst development.rst removals.rst api_changes_3.2.0.rst behaviour.rst deprecations.rst development.rst removals.rst api_changes_3.3.0.rst api_changes_3.3.1.rst behaviour.rst deprecations.rst development.rst removals.rst api_changes_3.4.0.rst api_changes_3.4.2.rst behaviour.rst deprecations.rst development.rst removals.rst api_changes_3.5.0.rst api_changes_3.5.2.rst api_changes_3.5.3.rst projections_api.rst pyplot_summary.rst quiver_api.rst rcsetup_api.rst sankey_api.rst scale_api.rst sphinxext_mathmpl_api.rst sphinxext_plot_directive_api.rst spines_api.rst style_api.rst table_api.rst testing_api.rst texmanager_api.rst textpath_api.rst text_api.rst ticker_api.rst tight_bbox_api.rst tight_layout_api.rst axes_grid.rst axes_grid1.rst axisartist.rst faq.rst mplot3d.rst transformations.rst tri_api.rst type1font.rst units_api.rst widgets_api.rst _api_api.rst _enums_api.rst conf.py coding_guide.rst color_changes.rst contributing.rst dependencies.rst development_setup.rst documenting_mpl.rst branch_dropdown.png configure_git.rst development_workflow.rst dot2_dot3.rst following_latest.rst forking_button.png forking_hell.rst git_development.rst git_install.rst git_intro.rst git_links.inc git_resources.rst index.rst known_projects.inc links.inc maintainer_workflow.rst patching.rst pull_button.png set_up_fork.rst this_project.inc index.rst license.rst index.rst MEP08.rst MEP09.rst MEP10.rst MEP11.rst MEP12.rst MEP13.rst MEP14.rst MEP15.rst MEP19.rst MEP21.rst MEP22.rst MEP23.rst MEP24.rst MEP25.rst MEP26.rst MEP27.rst MEP28.rst MEP29.rst README.rst template.rst min_dep_policy.rst README.txt release_guide.rst style_guide.rst testing.rst triage.rst docutils.conf index.rst make.bat Makefile matplotlibrc missing-references.json README.txt custom_roles.py gallery_order.py github.py math_symbol_table.py missing_references.py mock_gui_toolkits.py redirect_from.py skip_deprecated.py __init__.py index.rst backends.rst event_handling.rst fonts.rst index.rst interactive.rst interactive_guide.rst performance.rst environment_variables_faq.rst howto_faq.rst index.rst troubleshooting_faq.rst generate_credits.py index.rst github_stats.rst index.rst index.rst README.rst next_whats_new.rst changelog.rst dflt_style_changes.rst github_stats_3.0.0.rst github_stats_3.0.1.rst github_stats_3.0.2.rst github_stats_3.0.3.rst github_stats_3.1.0.rst github_stats_3.1.1.rst github_stats_3.1.2.rst github_stats_3.1.3.rst github_stats_3.2.0.rst github_stats_3.2.1.rst github_stats_3.2.2.rst github_stats_3.3.0.rst github_stats_3.3.1.rst github_stats_3.3.2.rst github_stats_3.3.3.rst github_stats_3.3.4.rst github_stats_3.4.0.rst github_stats_3.4.1.rst github_stats_3.4.2.rst github_stats_3.4.3.rst github_stats_3.5.0.rst github_stats_3.5.1.rst github_stats_3.5.2.rst whats_new_0.98.4.rst whats_new_0.99.rst whats_new_1.0.rst whats_new_1.1.rst whats_new_1.2.2.rst whats_new_1.2.rst whats_new_1.3.rst whats_new_1.4.rst whats_new_1.5.rst whats_new_2.0.0.rst whats_new_2.1.0.rst whats_new_2.2.rst whats_new_3.0.rst whats_new_3.1.0.rst whats_new_3.2.0.rst whats_new_3.3.0.rst whats_new_3.4.0.rst whats_new_3.5.0.rst whats_new_3.5.2.rst citing.rst credits.rst history.rst index.rst license.rst release_notes.rst release_notes_next.rst index.rst .gitignore adjustText.png anatomy.png animatplot.png basemap_contour1.png blume_table_example.png brokenaxes.png cartopy_hurricane_katrina_01_00.png color_zorder_A.png color_zorder_B.png contents.png demo_axes_grid.png demo_mplot3d.png dna_features_viewer_screenshot.png eeg_large.png eeg_small.png discourse-brands.svg envelope-regular.svg github-brands.svg gitter-brands.svg hashtag-solid.svg LICENSE plus-square-regular.svg question-circle-regular.svg stack-overflow-brands.svg favicon.ico figpager.png geoplot_nyc_traffic_tickets.png ggplot.png gif_attachment_example.png gold_on_carbon.jpg highlight_text_examples.png holoviews.png icon.png John-hunter-crop-2.jpg logo2.png logo2.svg logo2_compressed.svg logo_sidebar.png logo_sidebar_horiz.png m00.png m01.png m02.png m03.png m04.png m05.png m06.png m07.png m08.png m09.png m10.png m11.png m12.png m13.png m14.png m15.png m16.png m17.png m18.png m19.png m20.png m21.png m22.png m23.png m24.png m25.png m26.png m27.png m28.png m29.png m30.png m31.png m32.png m33.png m34.png m35.png m36.png m37.png matplotlib-icon.svg matplotlib_iterm2_demo.png mpl-interactions-slider-animated.png mpl-scatter-density.png mpl.css mpl_cheatsheet1.png mpl_cheatsheet1_2x.png mpl_template_example.png navigation.png numfocus_badge.png numpngw_animated_example.png pgf_fonts.pdf pgf_fonts.png pgf_preamble.pdf pgf_preamble.png pgf_texsystem.pdf pgf_texsystem.png plotnine.png probscale_demo.png readme_preview.png ridge_map_white_mountains.png seaborn.png stinkbug.png sviewgui_sample.png toolbar.png transforms.png wcsaxes.jpg webagg_screenshot.png yellowbrick.png 1004650.svg 1098480.svg 11451.svg 1154287.svg 1189358.svg 1202050.svg 1202077.svg 12287.svg 12400.svg 1343133.svg 1420605.svg 1482098.svg 1482099.svg 15423.svg 248351.svg 2577644.svg 2669103.svg 2893252.svg 3264781.svg 32914.svg 3563226.svg 3633833.svg 3633844.svg 3695547.svg 3714460.svg 3898017.svg 3948793.svg 3984190.svg 4030140.svg 4268928.svg 44579.svg 4475376.svg 4638398.svg 4649959.svg 4743323.svg 5194481.svg 56926.svg 570311.svg 5706396.svg 573577.svg 5773480.svg 61948.svg 6513224.svg autofunctions.rst automodule.rst autosummary.rst cheatsheet_sidebar.html donate_sidebar.html function.rst pagesource.html search.html sidebar_announcement.html sidebar_versions.html environment.yml animated_histogram.py animate_decay.py animation_demo.py bayes_update.py double_pendulum.py dynamic_image.py frame_grabbing_sgskip.py pause_resume.py rain.py random_walk.py README.txt simple_anim.py strip_chart.py unchained.py demo_anchored_direction_arrows.py demo_axes_divider.py demo_axes_grid.py demo_axes_grid2.py demo_axes_hbox_divider.py demo_axes_rgb.py demo_colorbar_of_inset_axes.py demo_colorbar_with_axes_divider.py demo_colorbar_with_inset_locator.py demo_edge_colorbar.py demo_fixed_size_axes.py demo_imagegrid_aspect.py inset_locator_demo.py inset_locator_demo2.py make_room_for_ylabel_using_axesgrid.py parasite_simple.py parasite_simple2.py README.txt scatter_hist_locatable_axes.py simple_anchored_artists.py simple_axesgrid.py simple_axesgrid2.py simple_axes_divider1.py simple_axes_divider3.py simple_axisline4.py simple_colorbar.py axis_direction.py demo_axisline_style.py demo_axis_direction.py demo_curvelinear_grid.py demo_curvelinear_grid2.py demo_floating_axes.py demo_floating_axis.py demo_parasite_axes.py demo_parasite_axes2.py demo_ticklabel_alignment.py demo_ticklabel_direction.py README.txt simple_axisartist1.py simple_axisline.py simple_axisline3.py simple_axis_direction01.py simple_axis_direction03.py simple_axis_pad.py colorbar_basics.py colormap_reference.py color_by_yvalue.py color_cycle_default.py color_demo.py custom_cmap.py named_colors.py README.txt close_event.py coords_demo.py data_browser.py figure_axes_enter_leave.py ginput_manual_clabel_sgskip.py image_slices_viewer.py keypress_demo.py lasso_demo.py legend_picking.py looking_glass.py path_editor.py pick_event_demo.py pick_event_demo2.py pipong.py poly_editor.py pong_sgskip.py README.txt resample.py timers.py trifinder_event_demo.py viewlims.py zoom_window.py 3D.py contour_frontpage.py histogram.py membrane.py README.txt affine_image.py barb_demo.py barcode_demo.py contourf_demo.py contourf_hatching.py contourf_log.py contours_in_optimization_demo.py contour_corner_mask.py contour_demo.py contour_image.py contour_label_demo.py demo_bboximage.py figimage_demo.py image_annotated_heatmap.py image_antialiasing.py image_clip_path.py image_demo.py image_masked.py image_nonuniform.py image_transparency_blend.py image_zcoord.py interpolation_methods.py irregulardatagrid.py layer_images.py matshow.py multi_image.py pcolormesh_grids.py pcolormesh_levels.py pcolor_demo.py plot_streamplot.py quadmesh_demo.py quiver_demo.py quiver_simple_demo.py README.txt shading_example.py specgram_demo.py spy_demos.py tricontour_demo.py tricontour_smooth_delaunay.py tricontour_smooth_user.py trigradient_demo.py triinterp_demo.py tripcolor_demo.py triplot_demo.py watermark_image.py barchart.py barh.py bar_label_demo.py bar_stacked.py broken_barh.py capstyle.py categorical_variables.py cohere.py csd_demo.py curve_error_band.py errorbar_limits_simple.py errorbar_subsample.py eventcollection_demo.py eventplot_demo.py fill.py filled_step.py fill_betweenx_demo.py fill_between_alpha.py fill_between_demo.py gradient_bar.py hat_graph.py horizontal_barchart_distribution.py joinstyle.py linestyles.py lines_with_ticks_demo.py line_demo_dash_control.py marker_reference.py markevery_demo.py markevery_prop_cycle.py masked_demo.py multicolored_line.py psd_demo.py README.txt scatter_custom_symbol.py scatter_demo2.py scatter_hist.py scatter_masked.py scatter_piecharts.py scatter_star_poly.py scatter_symbol.py scatter_with_legend.py simple_plot.py span_regions.py spectrum_demo.py stackplot_demo.py stairs_demo.py stem_plot.py step_demo.py timeline.py vline_hline_demo.py xcorr_acorr_demo.py anchored_artists.py bbox_intersect.py contour_manual.py coords_report.py cursor_demo.py customize_rc.py custom_projection.py demo_agg_filter.py demo_ribbon_box.py fill_spiral.py findobj_demo.py font_indexing.py ftface_props.py histogram_path.py hyperlinks_sgskip.py image_thumbnail_sgskip.py keyword_plotting.py logos2.py multipage_pdf.py multiprocess_sgskip.py packed_bubbles.py patheffect_demo.py print_stdout_sgskip.py pythonic_matplotlib.py rasterization_demo.py README.txt set_and_get.py svg_filter_line.py svg_filter_pie.py table_demo.py tickedstroke_demo.py transoffset.py zorder_demo.py 2dcollections3d.py 3d_bars.py bars3d.py box3d.py contour3d.py contour3d_2.py contour3d_3.py contourf3d.py contourf3d_2.py custom_shaded_3d_surface.py errorbar3d.py hist3d.py lines3d.py lorenz_attractor.py mixed_subplots.py offset.py pathpatch3d.py polys3d.py quiver3d.py README.txt rotate_axes3d_sgskip.py scatter3d.py stem3d_demo.py subplot3d.py surface3d.py surface3d_2.py surface3d_3.py surface3d_radial.py text3d.py tricontour3d.py tricontourf3d.py trisurf3d.py trisurf3d_2.py voxels.py voxels_numpy_logo.py voxels_rgb.py voxels_torus.py wire3d.py wire3d_animation_sgskip.py wire3d_zero_stride.py bar_of_pie.py nested_pie.py pie_and_donut_labels.py pie_demo2.py pie_features.py polar_bar.py polar_demo.py polar_legend.py polar_scatter.py README.txt align_ylabels.py annotate_transform.py annotation_basic.py annotation_polar.py auto_subplots_adjust.py axline.py boxplot_demo_pyplot.py dollar_ticks.py fig_axes_customize_simple.py fig_axes_labels_simple.py fig_x.py matplotlibrc pyplot_formatstr.py pyplot_mathtext.py pyplot_simple.py pyplot_text.py pyplot_three.py pyplot_two_subplots.py README.txt text_commands.py text_layout.py README.txt aspect_loglog.py custom_scale.py logit_demo.py log_bar.py log_demo.py log_test.py power_norm.py README.txt scales.py symlog_demo.py arrow_guide.py artist_reference.py collections.py compound_path.py dolphin.py donut.py ellipse_collection.py ellipse_demo.py fancybox_demo.py hatch_demo.py hatch_style_reference.py line_collection.py patch_collection.py path_patch.py quad_bezier.py README.txt scatter.py anatomy.py bachelors_degrees_by_gender.py firefox.py integral.py mandelbrot.py README.txt xkcd.py advanced_hillshading.py anscombe.py hinton_demo.py leftventricle_bulleye.py mri_demo.py mri_with_eeg.py radar_chart.py README.txt sankey_basics.py sankey_links.py sankey_rankine.py skewt.py topographic_hillshading.py centered_spines_with_arrows.py multiple_yaxis_with_spines.py README.txt spines.py spines_bounds.py spines_dropped.py spine_placement_demo.py barchart_demo.py boxplot.py boxplot_color.py boxplot_demo.py boxplot_vs_violin.py bxp.py confidence_ellipse.py customized_violin.py errorbar.py errorbars_and_boxes.py errorbar_features.py errorbar_limits.py hexbin_demo.py hist.py histogram_cumulative.py histogram_features.py histogram_histtypes.py histogram_multihist.py multiple_histograms_side_by_side.py README.txt time_series_histogram.py violinplot.py bmh.py dark_background.py fivethirtyeight.py ggplot.py grayscale.py plot_solarizedlight2.py README.txt style_sheets_reference.py align_labels_demo.py axes_box_aspect.py axes_demo.py axes_margins.py axes_props.py axes_zoom_effect.py axhspan_demo.py axis_equal_demo.py axis_labels_demo.py broken_axis.py colorbar_placement.py custom_figure_class.py demo_constrained_layout.py demo_tight_layout.py fahrenheit_celsius_scales.py figure_size_units.py figure_title.py ganged_plots.py geo_demo.py gridspec_and_subplots.py gridspec_multicolumn.py gridspec_nested.py invert_axes.py multiple_figs_demo.py README.txt secondary_axis.py shared_axis_demo.py share_axis_lims_views.py subfigures.py subplot.py subplots_adjust.py subplots_demo.py two_scales.py zoom_inset_axes.py accented_text.py angle_annotation.py annotation_demo.py arrow_demo.py autowrap.py custom_legends.py date.py date_index_formatter.py demo_annotation_box.py demo_text_path.py demo_text_rotation_mode.py dfrac_demo.py engineering_formatter.py fancyarrow_demo.py fancytextbox_demo.py figlegend_demo.py fonts_demo.py fonts_demo_kw.py font_family_rc_sgskip.py font_file.py font_table.py label_subplots.py legend.py legend_demo.py line_with_text.py mathtext_asarray.py mathtext_demo.py mathtext_examples.py mathtext_fontfamily_example.py multiline.py placing_text_boxes.py rainbow_text.py README.txt stix_fonts_demo.py text_alignment.py text_fontdict.py text_rotation.py text_rotation_relative_to_line.py tex_demo.py titles_demo.py unicode_minus.py usetex_baseline_test.py usetex_fonteffects.py watermark_text.py auto_ticks.py centered_ticklabels.py colorbar_tick_labelling_demo.py custom_ticker1.py date_concise_formatter.py date_demo_convert.py date_demo_rrule.py date_index_formatter2.py date_precision_and_epochs.py major_minor_demo.py README.txt scalarformatter.py tick-formatters.py tick-locators.py ticklabels_rotation.py ticks_too_many.py tick_labels_from_values.py tick_label_right.py tick_xlabel_top.py annotate_with_units.py artist_tests.py bar_demo2.py bar_unit_demo.py basic_units.py ellipse_with_units.py evans_test.py radian_demo.py README.txt units_sample.py units_scatter.py anchored_box04.py annotate_explain.py annotate_simple01.py annotate_simple02.py annotate_simple03.py annotate_simple04.py annotate_simple_coord01.py annotate_simple_coord02.py annotate_simple_coord03.py annotate_text_arrow.py colormap_interactive_adjustment.py colormap_normalizations.py colormap_normalizations_symlognorm.py connectionstyle_demo.py connect_simple01.py custom_boxstyle01.py demo_gridspec01.py demo_gridspec03.py demo_gridspec06.py pgf_fonts.py pgf_preamble_sgskip.py pgf_texsystem.py README.txt simple_annotate01.py simple_legend01.py simple_legend02.py canvasagg.py embedding_in_gtk3_panzoom_sgskip.py embedding_in_gtk3_sgskip.py embedding_in_gtk4_panzoom_sgskip.py embedding_in_gtk4_sgskip.py embedding_in_qt_sgskip.py embedding_in_tk_sgskip.py embedding_in_wx2_sgskip.py embedding_in_wx3_sgskip.py embedding_in_wx4_sgskip.py embedding_in_wx5_sgskip.py embedding_webagg_sgskip.py fourier_demo_wx_sgskip.py gtk3_spreadsheet_sgskip.py gtk4_spreadsheet_sgskip.py mathtext_wx_sgskip.py mpl_with_glade3.glade mpl_with_glade3_sgskip.py pylab_with_gtk3_sgskip.py pylab_with_gtk4_sgskip.py README.txt svg_histogram_sgskip.py svg_tooltip_sgskip.py toolmanager_sgskip.py web_application_server_sgskip.py wxcursor_demo_sgskip.py annotated_cursor.py buttons.py check_buttons.py cursor.py lasso_selector_demo_sgskip.py menu.py mouse_cursor.py multicursor.py polygon_selector_demo.py radio_buttons.py range_slider.py README.txt rectangle_selector.py slider_demo.py slider_snap_demo.py span_selector.py textbox.py agg_alpha_mask_u8.h agg_arc.h agg_array.h agg_arrowhead.h agg_basics.h agg_bezier_arc.h agg_bitset_iterator.h agg_blur.h agg_bounding_rect.h agg_bspline.h agg_clip_liang_barsky.h agg_color_gray.h agg_color_rgba.h agg_config.h agg_conv_adaptor_vcgen.h agg_conv_adaptor_vpgen.h agg_conv_bspline.h agg_conv_clip_polygon.h agg_conv_clip_polyline.h agg_conv_close_polygon.h agg_conv_concat.h agg_conv_contour.h agg_conv_curve.h agg_conv_dash.h agg_conv_gpc.h agg_conv_marker.h agg_conv_marker_adaptor.h agg_conv_segmentator.h agg_conv_shorten_path.h agg_conv_smooth_poly1.h agg_conv_stroke.h agg_conv_transform.h agg_conv_unclose_polygon.h agg_curves.h agg_dda_line.h agg_ellipse.h agg_ellipse_bresenham.h agg_embedded_raster_fonts.h agg_font_cache_manager.h agg_font_cache_manager2.h agg_gamma_functions.h agg_gamma_lut.h agg_glyph_raster_bin.h agg_gradient_lut.h agg_gsv_text.h agg_image_accessors.h agg_image_filters.h agg_line_aa_basics.h agg_math.h agg_math_stroke.h agg_path_length.h agg_path_storage.h agg_path_storage_integer.h agg_pattern_filters_rgba.h agg_pixfmt_amask_adaptor.h agg_pixfmt_base.h agg_pixfmt_gray.h agg_pixfmt_rgb.h agg_pixfmt_rgba.h agg_pixfmt_rgb_packed.h agg_pixfmt_transposer.h agg_rasterizer_cells_aa.h agg_rasterizer_compound_aa.h agg_rasterizer_outline.h agg_rasterizer_outline_aa.h agg_rasterizer_scanline_aa.h agg_rasterizer_scanline_aa_nogamma.h agg_rasterizer_sl_clip.h agg_renderer_base.h agg_renderer_markers.h agg_renderer_mclip.h agg_renderer_outline_aa.h agg_renderer_outline_image.h agg_renderer_primitives.h agg_renderer_raster_text.h agg_renderer_scanline.h agg_rendering_buffer.h agg_rendering_buffer_dynarow.h agg_rounded_rect.h agg_scanline_bin.h agg_scanline_boolean_algebra.h agg_scanline_p.h agg_scanline_storage_aa.h agg_scanline_storage_bin.h agg_scanline_u.h agg_shorten_path.h agg_simul_eq.h agg_span_allocator.h agg_span_converter.h agg_span_gouraud.h agg_span_gouraud_gray.h agg_span_gouraud_rgba.h agg_span_gradient.h agg_span_gradient_alpha.h agg_span_gradient_contour.h agg_span_gradient_image.h agg_span_image_filter.h agg_span_image_filter_gray.h agg_span_image_filter_rgb.h agg_span_image_filter_rgba.h agg_span_interpolator_adaptor.h agg_span_interpolator_linear.h agg_span_interpolator_persp.h agg_span_interpolator_trans.h agg_span_pattern_gray.h agg_span_pattern_rgb.h agg_span_pattern_rgba.h agg_span_solid.h agg_span_subdiv_adaptor.h agg_trans_affine.h agg_trans_bilinear.h agg_trans_double_path.h agg_trans_perspective.h agg_trans_single_path.h agg_trans_viewport.h agg_trans_warp_magnifier.h agg_vcgen_bspline.h agg_vcgen_contour.h agg_vcgen_dash.h agg_vcgen_markers_term.h agg_vcgen_smooth_poly1.h agg_vcgen_stroke.h agg_vcgen_vertex_sequence.h agg_vertex_sequence.h agg_vpgen_clip_polygon.h agg_vpgen_clip_polyline.h agg_vpgen_segmentator.h agg_bezier_ctrl.h agg_cbox_ctrl.h agg_ctrl.h agg_gamma_ctrl.h agg_gamma_spline.h agg_polygon_ctrl.h agg_rbox_ctrl.h agg_scale_ctrl.h agg_slider_ctrl.h agg_spline_ctrl.h agg_platform_support.h agg_mac_pmap.h agg_win32_bmp.h agg_color_conv.h agg_color_conv_rgb16.h agg_color_conv_rgb8.h agg_arc.cpp agg_arrowhead.cpp agg_bezier_arc.cpp agg_bspline.cpp agg_color_rgba.cpp agg_curves.cpp agg_embedded_raster_fonts.cpp agg_gsv_text.cpp agg_image_filters.cpp agg_line_aa_basics.cpp agg_line_profile_aa.cpp agg_rounded_rect.cpp agg_sqrt_tables.cpp agg_trans_affine.cpp agg_trans_double_path.cpp agg_trans_single_path.cpp agg_trans_warp_magnifier.cpp agg_vcgen_bspline.cpp agg_vcgen_contour.cpp agg_vcgen_dash.cpp agg_vcgen_markers_term.cpp agg_vcgen_smooth_poly1.cpp agg_vcgen_stroke.cpp agg_vpgen_clip_polygon.cpp agg_vpgen_clip_polyline.cpp agg_vpgen_segmentator.cpp authors ChangeLog copying agg_bezier_ctrl.cpp agg_cbox_ctrl.cpp agg_gamma_ctrl.cpp agg_gamma_spline.cpp agg_polygon_ctrl.cpp agg_rbox_ctrl.cpp agg_scale_ctrl.cpp agg_slider_ctrl.cpp agg_spline_ctrl.cpp agg_platform_support.cpp agg_platform_support.cpp agg_mac_pmap.cpp agg_platform_support.cpp agg_platform_support.cpp agg_platform_support.cpp agg_win32_bmp.cpp agg_platform_support.cpp pprdrv.h pprdrv_tt.cpp pprdrv_tt2.cpp truetype.h ttutil.cpp INSTALL.rst afm.py animation.py artist.py _axes.py _base.py _secondary_axes.py _subplots.py __init__.py axis.py backend_agg.py backend_cairo.py backend_gtk3.py backend_gtk3agg.py backend_gtk3cairo.py backend_gtk4.py backend_gtk4agg.py backend_gtk4cairo.py backend_macosx.py backend_mixed.py backend_nbagg.py backend_pdf.py backend_pgf.py backend_ps.py backend_qt.py backend_qt5.py backend_qt5agg.py backend_qt5cairo.py backend_qtagg.py backend_qtcairo.py backend_svg.py backend_template.py backend_tkagg.py backend_tkcairo.py backend_webagg.py backend_webagg_core.py backend_wx.py backend_wxagg.py backend_wxcairo.py qt_compat.py figureoptions.py _formlayout.py __init__.py .eslintrc.js .prettierignore .prettierrc all_figures.html boilerplate.css fbm.css mpl.css page.css ipython_inline_figure.html mpl.js mpl_tornado.js nbagg_mpl.js nbagg_uat.ipynb package.json single_figure.html _backend_gtk.py _backend_pdf_ps.py _backend_tk.py __init__.py backend_bases.py backend_managers.py backend_tools.py bezier.py blocking_input.py category.py deprecation.py __init__.py cm.py collections.py colorbar.py colors.py container.py contour.py dates.py docstring.py dviread.py figure.py fontconfig_pattern.py font_manager.py gridspec.py hatch.py image.py legend.py legend_handler.py lines.py markers.py mathtext.py mlab.py cmex10.afm cmmi10.afm cmr10.afm cmsy10.afm cmtt10.afm pagd8a.afm pagdo8a.afm pagk8a.afm pagko8a.afm pbkd8a.afm pbkdi8a.afm pbkl8a.afm pbkli8a.afm pcrb8a.afm pcrbo8a.afm pcrr8a.afm pcrro8a.afm phvb8a.afm phvb8an.afm phvbo8a.afm phvbo8an.afm phvl8a.afm phvlo8a.afm phvr8a.afm phvr8an.afm phvro8a.afm phvro8an.afm pncb8a.afm pncbi8a.afm pncr8a.afm pncri8a.afm pplb8a.afm pplbi8a.afm pplr8a.afm pplri8a.afm psyr.afm ptmb8a.afm ptmbi8a.afm ptmr8a.afm ptmri8a.afm putb8a.afm putbi8a.afm putr8a.afm putri8a.afm pzcmi8a.afm pzdr.afm Courier-Bold.afm Courier-BoldOblique.afm Courier-Oblique.afm Courier.afm Helvetica-Bold.afm Helvetica-BoldOblique.afm Helvetica-Oblique.afm Helvetica.afm readme.txt Symbol.afm Times-Bold.afm Times-BoldItalic.afm Times-Italic.afm Times-Roman.afm ZapfDingbats.afm cmb10.ttf cmex10.ttf cmmi10.ttf cmr10.ttf cmss10.ttf cmsy10.ttf cmtt10.ttf DejaVuSans-Bold.ttf DejaVuSans-BoldOblique.ttf DejaVuSans-Oblique.ttf DejaVuSans.ttf DejaVuSansDisplay.ttf DejaVuSansMono-Bold.ttf DejaVuSansMono-BoldOblique.ttf DejaVuSansMono-Oblique.ttf DejaVuSansMono.ttf DejaVuSerif-Bold.ttf DejaVuSerif-BoldItalic.ttf DejaVuSerif-Italic.ttf DejaVuSerif.ttf DejaVuSerifDisplay.ttf LICENSE_DEJAVU LICENSE_STIX STIXGeneral.ttf STIXGeneralBol.ttf STIXGeneralBolIta.ttf STIXGeneralItalic.ttf STIXNonUni.ttf STIXNonUniBol.ttf STIXNonUniBolIta.ttf STIXNonUniIta.ttf STIXSizFiveSymReg.ttf STIXSizFourSymBol.ttf STIXSizFourSymReg.ttf STIXSizOneSymBol.ttf STIXSizOneSymReg.ttf STIXSizThreeSymBol.ttf STIXSizThreeSymReg.ttf STIXSizTwoSymBol.ttf STIXSizTwoSymReg.ttf back-symbolic.svg back.pdf back.png back.svg back_large.png filesave-symbolic.svg filesave.pdf filesave.png filesave.svg filesave_large.png forward-symbolic.svg forward.pdf forward.png forward.svg forward_large.png hand.pdf hand.png hand.svg help-symbolic.svg help.pdf help.png help.svg help_large.png home-symbolic.svg home.pdf home.png home.svg home_large.png matplotlib.pdf matplotlib.png matplotlib.svg matplotlib_128.ppm matplotlib_large.png move-symbolic.svg move.pdf move.png move.svg move_large.png qt4_editor_options.pdf qt4_editor_options.png qt4_editor_options.svg qt4_editor_options_large.png subplots-symbolic.svg subplots.pdf subplots.png subplots.svg subplots_large.png zoom_to_rect-symbolic.svg zoom_to_rect.pdf zoom_to_rect.png zoom_to_rect.svg zoom_to_rect_large.png kpsewhich.lua matplotlibrc plot_directive.css bivariate_normal.npy data_x_x2_x3.csv eeg.dat embedding_in_wx3.xrc goog.npz grace_hopper.jpg jacksboro_fault_dem.npz logo2.png membrane.dat Minduka_Present_Blue_Pack.png msft.csv percent_bachelors_degrees_women_usa.csv README.txt s1045.ima.gz topobathy.npz bmh.mplstyle classic.mplstyle dark_background.mplstyle fast.mplstyle fivethirtyeight.mplstyle ggplot.mplstyle grayscale.mplstyle seaborn-bright.mplstyle seaborn-colorblind.mplstyle seaborn-dark-palette.mplstyle seaborn-dark.mplstyle seaborn-darkgrid.mplstyle seaborn-deep.mplstyle seaborn-muted.mplstyle seaborn-notebook.mplstyle seaborn-paper.mplstyle seaborn-pastel.mplstyle seaborn-poster.mplstyle seaborn-talk.mplstyle seaborn-ticks.mplstyle seaborn-white.mplstyle seaborn-whitegrid.mplstyle seaborn.mplstyle Solarize_Light2.mplstyle tableau-colorblind10.mplstyle _classic_test_patch.mplstyle _mpl-gallery-nogrid.mplstyle _mpl-gallery.mplstyle offsetbox.py patches.py path.py patheffects.py geo.py polar.py __init__.py pylab.py pyplot.py quiver.py rcsetup.py sankey.py scale.py mathmpl.py plot_directive.py __init__.py spines.py stackplot.py streamplot.py core.py __init__.py table.py compare.py conftest.py decorators.py exceptions.py Duration.py Epoch.py EpochConverter.py StrConverter.py UnitDbl.py UnitDblConverter.py UnitDblFormatter.py __init__.py widgets.py __init__.py test.dvi test.json test.map test.tex basn0g01.png basn0g02.png basn0g04.png basn0g08.png basn0g16.png basn2c08.png basn2c16.png basn3p01.png basn3p02.png basn3p04.png basn3p08.png basn4a08.png basn4a16.png basn6a08.png basn6a16.png agg_filter.png agg_filter_alpha.pdf agg_filter_alpha.png arrow_styles.png boxarrow_test_image.png connection_styles.png fancyarrow_dash.png fancyarrow_dpi_cor_100dpi.p fancyarrow_dpi_cor_200dpi.p fancyarrow_test_image.pdf fancyarrow_test_image.png fancyarrow_test_image.svg clip_path_clipping.pdf clip_path_clipping.png clip_path_clipping.svg default_edges.png hatching.pdf hatching.png hatching.svg aitoff_proj.png angle_spectrum_freqs.png angle_spectrum_noise.png annotate_across_transforms.png arc_angles.png arc_ellipse.pdf arc_ellipse.png arc_ellipse.svg arrow_simple.png autoscale_tiny_range.pdf autoscale_tiny_range.png autoscale_tiny_range.svg auto_numticks.png auto_numticks_log.png axhspan_epoch.pdf axhspan_epoch.png axhspan_epoch.svg axisbelow.png axvspan_epoch.pdf axvspan_epoch.png axvspan_epoch.svg barh_tick_label.png bar_tick_label_multiple.png bar_tick_label_multiple_old_label_al bar_tick_label_single.png boxplot.pdf boxplot.png boxplot.svg boxplot_autorange_false_whiskers.png boxplot_autorange_true_whiskers.png boxplot_mod_artists_after_plotting.p boxplot_no_inverted_whisker.png boxplot_rc_parameters.pdf boxplot_rc_parameters.png boxplot_rc_parameters.svg boxplot_sym.png boxplot_sym2.png boxplot_with_CIarray.png bxp_baseline.png bxp_custombox.png bxp_customcap.png bxp_custommedian.png bxp_customoutlier.png bxp_custompatchartist.png bxp_custompositions.png bxp_customwhisker.png bxp_customwidths.png bxp_horizontal.png bxp_nobox.png bxp_nocaps.png bxp_no_flier_stats.png bxp_patchartist.png bxp_percentilewhis.png bxp_rangewhis.png bxp_scalarwidth.png bxp_withmean_custompoint.png bxp_withmean_line.png bxp_withmean_point.png bxp_withnotch.png bxp_with_xlabels.png bxp_with_ylabels.png canonical.pdf canonical.png canonical.svg contour_colorbar.pdf contour_colorbar.png contour_colorbar.svg contour_hatching.pdf contour_hatching.png contour_hatching.svg csd_freqs.png csd_noise.png dash_offset.pdf dash_offset.png dash_offset.svg date_timezone_x.png date_timezone_x_and_y.png date_timezone_y.png errorbar_basic.pdf errorbar_basic.png errorbar_basic.svg errorbar_limits.pdf errorbar_limits.png errorbar_limits.svg errorbar_mixed.pdf errorbar_mixed.png errorbar_mixed.svg errorbar_zorder.pdf errorbar_zorder.png errorbar_zorder.svg eventplot.pdf eventplot.png eventplot.svg fill_between_interpolate.pdf fill_between_interpolate.png fill_between_interpolate.svg fill_between_interpolate_decreasing. fill_between_interpolate_nan.pdf fill_between_interpolate_nan.png fill_between_interpolate_nan.svg fill_units.png formatter_ticker_001.pdf formatter_ticker_001.png formatter_ticker_001.svg formatter_ticker_002.pdf formatter_ticker_002.png formatter_ticker_002.svg formatter_ticker_003.pdf formatter_ticker_003.png formatter_ticker_003.svg formatter_ticker_004.pdf formatter_ticker_004.png formatter_ticker_004.svg formatter_ticker_005.pdf formatter_ticker_005.png formatter_ticker_005.svg hexbin_empty.png hexbin_extent.png hexbin_log.png hist2d.pdf hist2d.png hist2d.svg hist2d_transpose.pdf hist2d_transpose.png hist2d_transpose.svg hist_bar_empty.png hist_density.png hist_log.pdf hist_log.png hist_log.svg hist_offset.pdf hist_offset.png hist_offset.svg hist_stacked.png hist_stacked_bar.pdf hist_stacked_bar.png hist_stacked_bar.svg hist_stacked_normed.pdf hist_stacked_normed.png hist_stacked_normed.svg hist_stacked_step.pdf hist_stacked_step.png hist_stacked_step.svg hist_stacked_stepfilled.pdf hist_stacked_stepfilled.png hist_stacked_stepfilled.svg hist_stacked_stepfilled_alpha.pdf hist_stacked_stepfilled_alpha.png hist_stacked_stepfilled_alpha.svg hist_stacked_weights.pdf hist_stacked_weights.png hist_stacked_weights.svg hist_step.png hist_step_bottom.png hist_step_empty.png hist_step_filled.png hist_step_horiz.png hlines_basic.png hlines_masked.png hlines_with_nan.png imshow.pdf imshow.png imshow.svg imshow_clip.pdf imshow_clip.png imshow_clip.svg loglog.png log_scales.pdf log_scales.png log_scales.svg magnitude_spectrum_freqs_dB.png magnitude_spectrum_freqs_linear.png magnitude_spectrum_noise_dB.png magnitude_spectrum_noise_linear.png marker_edges.pdf marker_edges.png marker_edges.svg marker_styles.png markevery.pdf markevery.png markevery.svg markevery_line.pdf markevery_line.png markevery_line.svg markevery_linear_scales.pdf markevery_linear_scales.png markevery_linear_scales.svg markevery_linear_scales_zoomed.pdf markevery_linear_scales_zoomed.png markevery_linear_scales_zoomed.svg markevery_log_scales.pdf markevery_log_scales.png markevery_log_scales.svg markevery_polar.pdf markevery_polar.png markevery_polar.svg mixed_collection.pdf mixed_collection.png mixed_collection.svg mollweide_grid.pdf mollweide_grid.png mollweide_grid.svg nonfinite_limits.pdf nonfinite_limits.png nonfinite_limits.svg offset_points.pdf offset_points.png offset_points.svg o_marker_path_snap.png pcolormesh.pdf pcolormesh.png pcolormesh.svg pcolormesh_alpha.pdf pcolormesh_alpha.png p",
        "setup.py": "\"\"\"\nThe Matplotlib build options can be modified with a mplsetup.cfg file. See\nmplsetup.cfg.template for more information.\n\"\"\"\n\n# NOTE: This file must remain Python 2 compatible for the foreseeable future,\n# to ensure that we error out properly for people with outdated setuptools\n# and\/or pip.\nimport sys\n\npy_min_version = (3, 7) # minimal supported python version\nsince_mpl_version = (3, 4) # py_min_version is required since this mpl version\n\nif sys.version_info < py_min_version:\nerror = \"\"\"\nBeginning with Matplotlib {0}, Python {1} or above is required.\nYou are using Python {2}.\n\nThis may be due to an out of date pip.\n\nMake sure you have pip >= 9.0.1.\n\"\"\".format('.'.join(str(n) for n in since_mpl_version),\n'.'.join(str(n) for n in py_min_version),\n'.'.join(str(n) for n in sys.version_info[:3]))\nsys.exit(error)\n\nimport os\nfrom pathlib import Path\nimport shutil\nimport subprocess\n\nfrom setuptools import setup, find_packages, Distribution, Extension\nimport setuptools.command.build_ext\nimport setuptools.command.build_py\nimport setuptools.command.test\nimport setuptools.command.sdist\n\nimport setupext\nfrom setupext import print_raw, print_status\n\n\n# These are the packages in the order we want to display them.\nmpl_packages = [\nsetupext.Matplotlib(),\nsetupext.Python(),\nsetupext.Platform(),\nsetupext.FreeType(),\nsetupext.Qhull(),\nsetupext.Tests(),\nsetupext.BackendMacOSX(),\n]\n\n\n# From https:\/\/bugs.python.org\/issue26689\ndef has_flag(self, flagname):\n\"\"\"Return whether a flag name is supported on the specified compiler.\"\"\"\nimport tempfile\nwith tempfile.NamedTemporaryFile('w', suffix='.cpp') as f:\nf.write('int main (int argc, char **argv) { return 0; }')\ntry:\nself.compile([f.name], extra_postargs=[flagname])\nexcept Exception as exc:\n# https:\/\/github.com\/pypa\/setuptools\/issues\/2698\nif type(exc).__name__ != \"CompileError\":\nraise\nreturn False\nreturn True\n\n\nclass NoopTestCommand(setuptools.command.test.test):\ndef __init__(self, dist):\nprint(\"Matplotlib does not support running tests with \"\n\"'python setup.py test'. Please run 'pytest'.\")\n\n\nclass BuildExtraLibraries(setuptools.command.build_ext.build_ext):\ndef finalize_options(self):\nself.distribution.ext_modules[:] = [\next\nfor package in good_packages\nfor ext in package.get_extensions()\n]\nsuper().finalize_options()\n\ndef add_optimization_flags(self):\n\"\"\"\nAdd optional optimization flags to extension.\n\nThis adds flags for LTO and hidden visibility to both compiled\nextensions, and to the environment variables so that vendored libraries\nwill also use them. If the compiler does not support these flags, then\nnone are added.\n\"\"\"\n\nenv = os.environ.copy()\nif sys.platform == 'win32':\nreturn env\nenable_lto = setupext.config.getboolean('libs', 'enable_lto',\nfallback=None)\n\ndef prepare_flags(name, enable_lto):\n\"\"\"\nPrepare *FLAGS from the environment.\n\nIf set, return them, and also check whether LTO is disabled in each\none, raising an error if Matplotlib config explicitly enabled LTO.\n\"\"\"\nif name in os.environ:\nif '-fno-lto' in os.environ[name]:\nif enable_lto is True:\nraise ValueError('Configuration enable_lto=True, but '\n'{0} contains -fno-lto'.format(name))\nenable_lto = False\nreturn [os.environ[name]], enable_lto\nreturn [], enable_lto\n\n_, enable_lto = prepare_flags('CFLAGS', enable_lto) # Only check lto.\ncppflags, enable_lto = prepare_flags('CPPFLAGS', enable_lto)\ncxxflags, enable_lto = prepare_flags('CXXFLAGS', enable_lto)\nldflags, enable_lto = prepare_flags('LDFLAGS', enable_lto)\n\nif enable_lto is False:\nreturn env\n\nif has_flag(self.compiler, '-fvisibility=hidden'):\nfor ext in self.extensions:\next.extra_compile_args.append('-fvisibility=hidden')\ncppflags.append('-fvisibility=hidden')\nif has_flag(self.compiler, '-fvisibility-inlines-hidden'):\nfor ext in self.extensions:\nif self.compiler.detect_language(ext.sources) != 'cpp':\ncontinue\next.extra_compile_args.append('-fvisibility-inlines-hidden')\ncxxflags.append('-fvisibility-inlines-hidden')\nranlib = 'RANLIB' in env\nif not ranlib and self.compiler.compiler_type == 'unix':\ntry:\nresult = subprocess.run(self.compiler.compiler +\n['--version'],\nstdout=subprocess.PIPE,\nstderr=subprocess.STDOUT,\nuniversal_newlines=True)\nexcept Exception as e:\npass\nelse:\nversion = result.stdout.lower()\nif 'gcc' in version:\nranlib = shutil.which('gcc-ranlib')\nelif 'clang' in version:\nif sys.platform == 'darwin':\nranlib = True\nelse:\nranlib = shutil.which('llvm-ranlib')\nif ranlib and has_flag(self.compiler, '-flto'):\nfor ext in self.extensions:\next.extra_compile_args.append('-flto')\ncppflags.append('-flto')\nldflags.append('-flto')\n# Needed so FreeType static library doesn't lose its LTO objects.\nif isinstance(ranlib, str):\nenv['RANLIB'] = ranlib\n\nenv['CPPFLAGS'] = ' '.join(cppflags)\nenv['CXXFLAGS'] = ' '.join(cxxflags)\nenv['LDFLAGS'] = ' '.join(ldflags)\n\nreturn env\n\ndef build_extensions(self):\n# Remove the -Wstrict-prototypes option, it's not valid for C++. Fixed\n# in Py3.7 as bpo-5755.\ntry:\nself.compiler.compiler_so.remove('-Wstrict-prototypes')\nexcept (ValueError, AttributeError):\npass\nif (self.compiler.compiler_type == 'msvc' and\nos.environ.get('MPL_DISABLE_FH4')):\n# Disable FH4 Exception Handling implementation so that we don't\n# require VCRUNTIME140_1.dll. For more details, see:\n# https:\/\/devblogs.microsoft.com\/cppblog\/making-cpp-exception-handling-smaller-x64\/\n# https:\/\/github.com\/joerick\/cibuildwheel\/issues\/423#issuecomment-677763904\nfor ext in self.extensions:\next.extra_compile_args.append('\/d2FH4-')\n\nenv = self.add_optimization_flags()\nfor package in good_packages:\npackage.do_custom_build(env)\nreturn super().build_extensions()\n\ndef build_extension(self, ext):\n# When C coverage is enabled, the path to the object file is saved.\n# Since we re-use source files in multiple extensions, libgcov will\n# complain at runtime that it is trying to save coverage for the same\n# object file at different timestamps (since each source is compiled\n# again for each extension). Thus, we need to use unique temporary\n# build directories to store object files for each extension.\norig_build_temp = self.build_temp\nself.build_temp = os.path.join(self.build_temp, ext.name)\ntry:\nsuper().build_extension(ext)\nfinally:\nself.build_temp = orig_build_temp\n\n\ndef update_matplotlibrc(path):\n# If packagers want to change the default backend, insert a `#backend: ...`\n# line. Otherwise, use the default `##backend: Agg` which has no effect\n# even after decommenting, which allows _auto_backend_sentinel to be filled\n# in at import time.\ntemplate_lines = path.read_text().splitlines(True)\nbackend_line_idx, = [ # Also asserts that there is a single such line.\nidx for idx, line in enumerate(template_lines)\nif \"#backend:\" in line]\ntemplate_lines[backend_line_idx] = (\n\"#backend: {}\\n\".format(setupext.options[\"backend\"])\nif setupext.options[\"backend\"]\nelse \"##backend: Agg\\n\")\npath.write_text(\"\".join(template_lines))\n\n\nclass BuildPy(setuptools.command.build_py.build_py):\ndef run(self):\nsuper().run()\nupdate_matplotlibrc(\nPath(self.build_lib, \"matplotlib\/mpl-data\/matplotlibrc\"))\n\n\nclass Sdist(setuptools.command.sdist.sdist):\ndef make_release_tree(self, base_dir, files):\nsuper().make_release_tree(base_dir, files)\nupdate_matplotlibrc(\nPath(base_dir, \"lib\/matplotlib\/mpl-data\/matplotlibrc\"))\n\n\npackage_data = {} # Will be filled below by the various components.\n\n# If the user just queries for information, don't bother figuring out which\n# packages to build or install.\nif not (any('--' + opt in sys.argv\nfor opt in Distribution.display_option_names + ['help'])\nor 'clean' in sys.argv):\n# Go through all of the packages and figure out which ones we are\n# going to build\/install.\nprint_raw()\nprint_raw(\"Edit mplsetup.cfg to change the build options; \"\n\"suppress output with --quiet.\")\nprint_raw()\nprint_raw(\"BUILDING MATPLOTLIB\")\n\ngood_packages = []\nfor package in mpl_packages:\ntry:\nmessage = package.check()\nexcept setupext.Skipped as e:\nprint_status(package.name, \"no [{e}]\".format(e=e))\ncontinue\nif message is not None:\nprint_status(package.name,\n\"yes [{message}]\".format(message=message))\ngood_packages.append(package)\n\nprint_raw()\n\n# Now collect all of the information we need to build all of the packages.\nfor package in good_packages:\n# Extension modules only get added in build_ext, as numpy will have\n# been installed (as setup_requires) at that point.\ndata = package.get_package_data()\nfor key, val in data.items():\npackage_data.setdefault(key, [])\npackage_data[key] = list(set(val + package_data[key]))\n\nsetup( # Finally, pass this all along to setuptools to do the heavy lifting.\nname=\"matplotlib\",\ndescription=\"Python plotting package\",\nauthor=\"John D. Hunter, Michael Droettboom\",\nauthor_email=\"matplotlib-users@python.org\",\nurl=\"https:\/\/matplotlib.org\",\ndownload_url=\"https:\/\/matplotlib.org\/users\/installing.html\",\nproject_urls={\n'Documentation': 'https:\/\/matplotlib.org',\n'Source Code': 'https:\/\/github.com\/matplotlib\/matplotlib',\n'Bug Tracker': 'https:\/\/github.com\/matplotlib\/matplotlib\/issues',\n'Forum': 'https:\/\/discourse.matplotlib.org\/',\n'Donate': 'https:\/\/numfocus.org\/donate-to-matplotlib'\n},\nlong_description=Path(\"README.rst\").read_text(encoding=\"utf-8\"),\nlong_description_content_type=\"text\/x-rst\",\nlicense=\"PSF\",\nplatforms=\"any\",\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Framework :: Matplotlib',\n'Intended Audience :: Science\/Research',\n'Intended Audience :: Education',\n'License :: OSI Approved :: Python Software Foundation License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Topic :: Scientific\/Engineering :: Visualization',\n],\n\npackage_dir={\"\": \"lib\"},\npackages=find_packages(\"lib\"),\nnamespace_packages=[\"mpl_toolkits\"],\npy_modules=[\"pylab\"],\n# Dummy extension to trigger build_ext, which will swap it out with\n# real extensions that can depend on numpy for the build.\next_modules=[Extension(\"\", [])],\npackage_data=package_data,\n\npython_requires='>={}'.format('.'.join(str(n) for n in py_min_version)),\nsetup_requires=[\n\"certifi>=2020.06.20\",\n\"numpy>=1.17\",\n\"setuptools_scm>=4,<7\",\n\"setuptools_scm_git_archive\",\n],\ninstall_requires=[\n\"cycler>=0.10\",\n\"fonttools>=4.22.0\",\n\"kiwisolver>=1.0.1\",\n\"numpy>=1.17\",\n\"packaging>=20.0\",\n\"pillow>=6.2.0\",\n\"pyparsing>=2.2.1\",\n\"python-dateutil>=2.7\",\n] + (\n# Installing from a git checkout that is not producing a wheel.\n[\"setuptools_scm>=4,<7\"] if (\nPath(__file__).with_name(\".git\").exists() and\nos.environ.get(\"CIBUILDWHEEL\", \"0\") != \"1\"\n) else []\n),\nuse_scm_version={\n\"version_scheme\": \"release-branch-semver\",\n\"local_scheme\": \"node-and-date\",\n\"write_to\": \"lib\/matplotlib\/_version.py\",\n\"parentdir_prefix_version\": \"matplotlib-\",\n\"fallback_version\": \"0.0+UNKNOWN\",\n},\ncmdclass={\n\"test\": NoopTestCommand,\n\"build_ext\": BuildExtraLibraries,\n\"build_py\": BuildPy,\n\"sdist\": Sdist,\n},\n)\n"
    },
    {
        "package_name": "matplotlib-scalebar-0.8.1",
        "file_list": ".coveragerc .gitattributes ci.yml .gitignore .pre-commit-config.yaml argument_dimension.png argument_dimension.py argument_dx.png argument_dx.py argument_length_fraction.png argument_length_fraction.py argument_pad.png argument_pad.py argument_rotation.png argument_rotation.py argument_scale_loc.png argument_scale_loc.py example1.png example1.py example2.png example2.py example3.py example_angular.py example_dimension.py example_location.py getting_started.png getting_started.py nomenclature.png nomenclature.py splashscreen.png splashscreen.py LICENSE MANIFEST.in dimension.py scalebar.py test_dimension.py test_scalebar.py _version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe PKG-INFO README.md requirements-test.txt requirements.txt setup.cfg setup.py versioneer.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n# Standard library modules.\nfrom pathlib import Path\n\n# Third party modules.\nfrom setuptools import setup, find_packages\n\n# Local modules.\nimport versioneer\n\n# Globals and constants variables.\nBASEDIR = Path(__file__).parent.resolve()\n\n# Get the long description from the relevant file\nwith open(BASEDIR.joinpath(\"README.md\"), \"r\") as f:\nlong_description = f.read()\n\nsetup(\nname=\"matplotlib-scalebar\",\nversion=versioneer.get_version(),\ndescription=\"Artist for matplotlib to display a scale bar\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Philippe Pinard\",\nauthor_email=\"philippe.pinard@gmail.com\",\nmaintainer=\"Philippe Pinard\",\nmaintainer_email=\"philippe.pinard@gmail.com\",\nurl=\"https:\/\/github.com\/ppinard\/matplotlib-scalebar\",\nlicense=\"BSD\",\nkeywords=\"matplotlib scale micron bar\",\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Science\/Research\",\n\"License :: OSI Approved :: BSD License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Scientific\/Engineering :: Visualization\",\n],\npackages=find_packages(),\npackage_data={},\npython_requires='~=3.7',\ninstall_requires=[\"matplotlib\"],\nzip_safe=True,\ncmdclass=versioneer.get_cmdclass(),\n)\n"
    },
    {
        "package_name": "matrixprofile-1.1.10",
        "file_list": "LICENSE MANIFEST.in cympx.c cympx.pyx hierarchical_clustering.py mass2.py mpdist.py mpx.py pairwise_dist.py regimes.py scrimp.py skimp.py snippets.py statistics.py stomp.py top_k_discords.py top_k_motifs.py __init__.py analyze.py compute.py core.py cycore.c cycore.pyx datasets.py __init__.py discover.py exceptions.py protobuf_utils.py proto_messages.proto proto_messages_pb2.py __init__.py __init__.py __io.py preprocess.py transform.py utils.py version.py visualize.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO python2-requirements.txt README.rst requirements.txt setup.cfg setup.py mpx_ab_mpa.txt mpx_ab_mpb.txt mpx_ab_mpia.txt mpx_ab_mpib.txt mpx_mp.txt mpx_mpi.txt muinvn_mua.txt muinvn_stda.txt sampledata.txt scrimp.mp.txt scrimp.mpi.txt test_analyze.py test_annotation_vector.py test_compute.py test_core.py test_cycore.py test_datasets.py test_hierarchical_clustering.py test_io.py test_mass2.py test_mpdist.py test_mpx.py test_pairwise_dist.py test_preprocess.py test_regimes.py test_scrimp.py test_skimp.py test_snippets.py test_statistics.py test_stomp.py test_top_k_discords.py test_top_k_motifs.py test_utils.py test_visualize.py __init__.py version.py",
        "setup.py": "import setuptools\n\nfrom setuptools import dist\ndist.Distribution().fetch_build_eggs(['cython>=0.x', 'numpy>=1.16.2', 'wheel'])\n\nfrom distutils.extension import Extension\n\nfrom Cython.Build import cythonize\nimport numpy\n\nimport os, sys\nfrom glob import glob\n\nDIR_PATH = os.path.dirname(os.path.abspath(__file__))\nsys.path.append(DIR_PATH)\n\nimport version\n\nSOURCE_URL = 'https:\/\/github.com\/matrix-profile-foundation\/matrixprofile'\nREADME = os.path.join(DIR_PATH, 'README.rst')\n\n# manual list of files to be compiled\nextensions = []\nextensions.append(Extension(\n'matrixprofile.algorithms.cympx',\n['matrixprofile\/algorithms\/cympx.pyx'],\nextra_compile_args = [\"-O2\", \"-fopenmp\" ],\nextra_link_args = ['-fopenmp'],\ninclude_dirs=[numpy.get_include()],\n))\n\nextensions.append(Extension(\n'matrixprofile.cycore',\n['matrixprofile\/cycore.pyx'],\nextra_compile_args = [\"-O2\",],\ninclude_dirs=[numpy.get_include()],\n))\n\nmatplot = 'matplotlib>=3.0.3'\nscipy = 'scipy>=1.3.2,<2.0.0'\nif sys.version_info.major == 3:\nwith open(README, 'r', encoding='utf-8') as fh:\nlong_description = fh.read()\nelif sys.version_info.major == 2:\nmatplot = 'matplotlib'\nscipy = 'scipy<2.0.0'\nwith open(README, 'r') as fh:\nlong_description = fh.read()\n\n# copy version file over\nwith open(os.path.join(DIR_PATH, 'version.py')) as fh:\nwith open(os.path.join(DIR_PATH, 'matrixprofile', 'version.py'), 'w') as out:\nout.write(fh.read())\n\nsetuptools.setup(\nname=\"matrixprofile\",\nversion=version.__version__,\nauthor=\"Matrix Profile Foundation\",\nauthor_email=\"tylerwmarrs@gmail.com\",\ndescription=\"An open source time series data mining library based on Matrix Profile algorithms.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/x-rst\",\nurl=SOURCE_URL,\nproject_urls={\n'Matrix Profile Foundation': 'https:\/\/matrixprofile.org',\n'Source Code': SOURCE_URL,\n},\ninclude_package_data=True,\npackages = setuptools.find_packages(),\nsetup_requires=['cython>=0.x', 'wheel'],\ninstall_requires=['numpy>=1.16.2', matplot, 'protobuf==3.11.2', scipy],\next_modules=cythonize(extensions),\ninclude_dirs=[numpy.get_include()],\nclassifiers=[\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 3\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Intended Audience :: Science\/Research\",\n\"Intended Audience :: Information Technology\",\n\"Intended Audience :: Developers\",\n\"Operating System :: MacOS\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: POSIX\",\n\"Topic :: Software Development\",\n\"Topic :: Scientific\/Engineering\",\n],\nkeywords=\"matrix profile time series discord motif analysis data science anomaly pattern\",\n)\n"
    },
    {
        "package_name": "mdx_truly_sane_lists-1.3",
        "file_list": "LICENSE mdx_truly_sane_lists.py tests.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import os.path as path\nfrom setuptools import setup\n\n\ndef get_readme(filename):\nif not path.exists(filename):\nreturn \"\"\n\nwith open(path.join(path.dirname(__file__), filename)) as readme:\ncontent = readme.read()\nreturn content\n\n\nsetup(name=\"mdx_truly_sane_lists\",\nversion=\"1.3\",\nauthor='radude',\nauthor_email='admin@rentry.co',\ndescription=\"Extension for Python-Markdown that makes lists truly sane. Custom indents for nested lists and fix for messy linebreaks.\",\nlicense=\"MIT\",\nkeywords=[\"markdown extension\", 'markup', 'lists', 'markdown'],\nurl=\"https:\/\/github.com\/radude\/mdx_truly_sane_lists\",\npackages=[\"mdx_truly_sane_lists\"],\nlong_description=get_readme(\"README.md\"),\nlong_description_content_type='text\/markdown',\nclassifiers=[\n\"Topic :: Text Processing :: Markup\",\n\"Topic :: Text Processing :: Markup :: Markdown\",\n\"Topic :: Utilities\",\n\"Programming Language :: Python :: 3.3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"License :: OSI Approved :: MIT License\",\n],\ninstall_requires=[\"Markdown>=2.6\"],\ntest_suite=\"mdx_truly_sane_lists.tests\")\n"
    },
    {
        "package_name": "memoized-property-1.0.3",
        "file_list": "AUTHORS.rst CONTRIBUTING.rst HISTORY.rst LICENSE MANIFEST.in dependency_links.txt not-zip-safe pbr.json PKG-INFO SOURCES.txt top_level.txt memoized_property.py PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\nimport os\nimport sys\n\n\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\n\nif sys.argv[-1] == 'publish':\nos.system('python setup.py sdist upload')\nsys.exit()\n\n\nreadme = open('README.rst').read()\nhistory = open('HISTORY.rst').read().replace('.. :changelog:', '')\n\n\nsetup(\nname='memoized-property',\nversion='1.0.3',\ndescription='A simple python decorator for defining properties that only run their fget function once',\nlong_description=readme + '\\n\\n' + history,\nauthor='Steven Cummings',\nauthor_email='cummingscs@gmail.com',\nurl='https:\/\/github.com\/estebistec\/python-memoized-property',\npy_modules=['memoized_property'],\nlicense=\"BSD\",\nzip_safe=False,\nkeywords='memoized property decorator',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Natural Language :: English',\n\"Programming Language :: Python :: 2\",\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n],\ntest_suite='tests',\n)\n"
    },
    {
        "package_name": "minio-7.1.11",
        "file_list": "API.md API.md CONTRIBUTING.md bucket_exists.py compose_object.py copy_object.py delete_bucket_encryption.py delete_bucket_lifecycle.py delete_bucket_notification.py delete_bucket_policy.py delete_bucket_replication.py delete_bucket_tags.py delete_object_lock_config.py delete_object_tags.py disable_object_legal_hold.py enable_object_legal_hold.py fget_object.py fput_object.py get_bucket_encryption.py get_bucket_lifecycle.py get_bucket_notification.py get_bucket_policy.py get_bucket_replication.py get_bucket_tags.py get_bucket_versioning.py get_object.py get_object_lock_config.py get_object_retention.py get_object_tags.py get_presigned_url.py is_object_legal_hold_enabled.py listen_bucket_notification.py list_buckets.py list_objects.py make_bucket.py minio_with_assume_role_provider.py minio_with_aws_config_provider.py minio_with_certificate_identity_provider.py minio_with_chained_provider.py minio_with_client_grants_provider.py minio_with_env_aws_provider.py minio_with_env_minio_provider.py minio_with_iam_aws_provider.py minio_with_ldap_identity_provider.py minio_with_minio_client_config_provider.py minio_with_web_identity_provider.py presigned_get_object.py presigned_post_policy.py presigned_put_object.py progress.py put_object.py remove_bucket.py remove_object.py remove_objects.py select_object_content.py set_bucket_encryption.py set_bucket_lifecycle.py set_bucket_notification.py set_bucket_policy.py set_bucket_replication.py set_bucket_tags.py set_bucket_versioning.py set_object_lock_config.py set_object_retention.py set_object_tags.py stat_object.py LICENSE MANIFEST.in api.py commonconfig.py credentials.py providers.py __init__.py datatypes.py deleteobjects.py error.py helpers.py legalhold.py lifecycleconfig.py minioadmin.py notificationconfig.py objectlockconfig.py replicationconfig.py retention.py select.py signer.py sse.py sseconfig.py tagging.py time.py versioningconfig.py xml.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md README_zh_CN.md setup.cfg setup.py private.key public.crt play.min.io.kes.root.key tests.py bucket_exist_test.py config.json.sample copy_object_test.py credentials.empty credentials.sample credentials_test.py get_bucket_policy_test.py get_object_test.py helpers.py legelhold_test.py lifecycleconfig_test.py list_buckets_test.py list_objects_test.py list_objects_v1_test.py make_bucket_test.py minio_mocks.py minio_test.py notificationconfig_test.py objectlockconfig_test.py presigned_get_object_test.py presigned_put_object_test.py put_object_test.py remove_bucket_test.py remove_objects_test.py remove_object_test.py replicationconfig_test.py retention_test.py sign_test.py sseconfig_test.py stat_object_test.py tagging_test.py trace_test.py versioningconfig_test.py __init__.py __init__.py",
        "setup.py": "# MinIO Python Library for Amazon S3 Compatible Cloud Storage,\n# (C) 2015 MinIO, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport codecs\nimport re\nimport sys\n\nfrom setuptools import setup\n\nif sys.argv[-1] == \"publish\":\nsys.argv = sys.argv[:-1] + [\"sdist\", \"upload\"]\n\nwith codecs.open(\"minio\/__init__.py\") as file:\nversion = re.search(\nr'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]',\nfile.read(),\nre.MULTILINE,\n).group(1)\n\nwith codecs.open(\"README.md\", encoding=\"utf-8\") as file:\nreadme = file.read()\n\nsetup(\nname=\"minio\",\ndescription=\"MinIO Python SDK for Amazon S3 Compatible Cloud Storage\",\nauthor=\"MinIO, Inc.\",\nurl=\"https:\/\/github.com\/minio\/minio-py\",\ndownload_url=\"https:\/\/github.com\/minio\/minio-py\/releases\",\nauthor_email=\"dev@min.io\",\nversion=version,\nlong_description_content_type=\"text\/markdown\",\npackage_dir={\"minio\": \"minio\"},\npackages=[\"minio\", \"minio.credentials\"],\ninstall_requires=[\"certifi\", \"urllib3\"],\ntests_require=[],\nlicense=\"Apache License 2.0\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Natural Language :: English\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\nlong_description=readme,\npackage_data={\"\": [\"LICENSE\", \"README.md\"]},\ninclude_package_data=True,\n)\n"
    },
    {
        "package_name": "mip-1.14.0",
        "file_list": "projDesc.xml bug_report.md github-ci.yml .gitignore .travis.yml .ycm_extra_conf.py bench.sh bmcp.py bmcp_data.py bmcp_sol.py colors.csv GEOM110.col GEOM30.col GEOM50.col GEOM70.col GEOM90.col j1201_1.sm j301_1.sm j601_1.sm queens-gurobi.py queens-jump.csv queens-pulp.py queens.ods queens.py rcpsp.py bench.rst bibliography.rst classes.rst c-cup.pdf c-cup.tex Makefile references.bib conf.py custom.rst examples.rst extern.rst 2dlp.odg 2dlp.pdf belgium-tourism-14-opt-547.png belgium-tourism-14-subtour.png belgium-tourism-14.png bmcpsmall.pdf bmcpsmall.png coin-or-logo.png jssp1.pdf jssp1.png jssp2.pdf jssp2.png location-sol.pdf location-sol.png location.pdf location.png log_cost.pdf log_cost.png notebooks_transportation-problem_48_0.png philadelphia.png quadratic_function_discrete.png rcpsp-opt.eps rcpsp-opt.pdf rcpsp-opt.png rcpsp.eps rcpsp.pdf rcpsp.png roll.pdf roll.png tdlpp-instance.pdf tdlpp-instance.png tspC.pdf tspC.png tspG.pdf tspG.png tspNo2Sub.pdf tspNo2Sub.png tspRoot.pdf tspRoot.png tspSt1.pdf tspSt1.png index.rst install.rst intro.rst Makefile plot_log.py belgium-tourism-14-subtour.png logoSobrapo.pdf Makefile pmip-podes.bib podes-bibstyle.bst podes-template.sty python-mip-tutorial-podes.tex layout.html alabaster.css_t sphinx.css style.css header-bg.png main.js animate.css animate.min.css bootstrap.css bootstrap.min.css bootstrap.bundle.min.js bootstrap.min.js easing.js easing.min.js font-awesome.css font-awesome.min.css fontawesome-webfont.eot fontawesome-webfont.svg fontawesome-webfont.ttf fontawesome-webfont.woff fontawesome-webfont.woff2 FontAwesome.otf ionicons.css ionicons.min.css ionicons.eot ionicons.svg ionicons.ttf ionicons.woff isotope.pkgd.js isotope.pkgd.min.js jquery-migrate.min.js jquery.min.js mobile-nav.js wow.js wow.min.js theme.conf __init__.py quickstart.rst requirements.txt sos.rst bmcp.py bmcp2.py bmcp_data.py bmcp_greedy.py bmcp_mip.py bmcp_sol.py bench.sh rb-bier127.sh rb-gr202.sh rb-lin318.sh rb.sh tsp.py tsplibtodist.py belgium-tourism-14.tsp bmcp.py cgraph.py clique_merge.py conflict_finder.py cuttingstock_cg.py cuttingstock_kantorovich.py cutting_planes.py europe-tourism-22.tsp extract_features_mip.py gen_cuts.py gen_cuts_mip.py belgium-tourism-14.gif europe-tourism-22.gif inplace_linexpr_creation.py jssp.py knapsack.py numpy_tensor.py P1.col plant_location.py queens.py rcpsp.py test.sh tsp-compact-ulysses22.py tsp-compact.py tsp-cuts-ulysses22.py tsp-cuts.py tsp-lazy-ulysses22.py tsp-mipstart.py two-dim-pack.py ulysses22.tsp LICENSE callbacks.py cbc.py conflict.py constants.py entities.py exceptions.py gurobi.py cbc-c-darwin-x86-64.dylib cbc-c-linux-x86-64.so cbc-c-windows-x86-64.dll libbz2-1.dll libgcc_s_seh-1.dll libstdc++-6.dll libwinpthread-1.dll lists.py log.py model.py ndarray.py solver.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt NEWS PKG-INFO README.md buildCBCLinux.sh buildCBCLinuxAs.sh buildCBCLinuxDbg.sh buildCBCMac.sh buildCBCWin.sh buildMSV.bat downloadCBC.sh downloadCBConly.sh downloadCBConlysvn.sh downloadCBCsvn.sh patchLibrariesLinux.sh updateDist.sh uploadPip.sh setup.cfg setup.py conftest.py 10teams.mps.gz 1443_0-9.lp 2050_3_7.lp air04.mps.gz air05.mps.gz arki001.mps.gz bell3a.mps.gz bell5.mps.gz bft.lp blend2.mps.gz cap6000.mps.gz dano3mip.mps.gz danoint.mps.gz dcmulti.mps.gz egout.mps.gz enigma.mps.gz fast0507.bas fast0507.mps.gz fiber.mps.gz fixnet6.mps.gz flugpl.mps.gz gen.mps.gz gesa2.mps.gz gesa2_o.mps.gz gesa3.mps.gz gesa3_o.mps.gz gt2.mps.gz harp2.mps.gz khb05250.mps.gz l152lav.mps.gz lseu.mps.gz markshare1.mps.gz mas74.mps.gz mas76.mps.gz misc03.mps.gz misc06.mps.gz misc07.mps.gz mkc.mps.gz mod008.mps.gz mod010.mps.gz modglob.mps.gz p0033.mps.gz p0201.mps.gz p0282.mps.gz p0548.mps.gz p2756.mps.gz pk1.mps.gz pmp-iss-157.mps.gz pp08a.mps.gz pp08aCUTS.mps.gz qiu.mps.gz qnet1.mps.gz qnet1_o.mps.gz rcpsp-10-1.json rcpsp-10-2.json rcpsp-10-3.json rcpsp-10-4.json rcpsp-10-5.json rcpsp-11-1.json rcpsp-11-2.json rcpsp-11-3.json rcpsp-11-4.json rcpsp-11-5.json rcpsp-5-1.json rcpsp-5-10.json rcpsp-5-2.json rcpsp-5-3.json rcpsp-5-4.json rcpsp-5-5.json rcpsp-5-6.json rcpsp-5-7.json rcpsp-5-8.json rcpsp-5-9.json rcpsp-6-1.json rcpsp-6-10.json rcpsp-6-2.json rcpsp-6-3.json rcpsp-6-4.json rcpsp-6-5.json rcpsp-6-6.json rcpsp-6-7.json rcpsp-6-8.json rcpsp-6-9.json rcpsp-7-1.json rcpsp-7-10.json rcpsp-7-2.json rcpsp-7-3.json rcpsp-7-4.json rcpsp-7-5.json rcpsp-7-6.json rcpsp-7-7.json rcpsp-7-8.json rcpsp-7-9.json rcpsp-8-1.json rcpsp-8-10.json rcpsp-8-2.json rcpsp-8-3.json rcpsp-8-4.json rcpsp-8-5.json rcpsp-8-6.json rcpsp-8-7.json rcpsp-8-8.json rcpsp-8-9.json rcpsp-9-1.json rcpsp-9-10.json rcpsp-9-2.json rcpsp-9-3.json rcpsp-9-4.json rcpsp-9-5.json rcpsp-9-6.json rcpsp-9-7.json rcpsp-9-8.json rcpsp-9-9.json rgn.mps.gz rout.mps.gz set1ch.mps.gz seymour.mps.gz stein27.mps.gz stein45.mps.gz swath.mps.gz two_dim_pack_100_1000_10.json two_dim_pack_100_1000_20.json two_dim_pack_100_10_10.json two_dim_pack_100_10_20.json two_dim_pack_20_1000_10.json two_dim_pack_20_1000_20.json two_dim_pack_20_10_10.json two_dim_pack_20_10_20.json two_dim_pack_40_1000_10.json two_dim_pack_40_1000_20.json two_dim_pack_40_10_10.json two_dim_pack_40_10_20.json two_dim_pack_60_1000_10.json two_dim_pack_60_1000_20.json two_dim_pack_60_10_10.json two_dim_pack_60_10_20.json two_dim_pack_80_1000_10.json two_dim_pack_80_1000_20.json two_dim_pack_80_10_10.json two_dim_pack_80_10_20.json vpm1.mps.gz vpm2.mps.gz dbft_test.py examples_test.py mip_2d_pack.py mip_files_test.py mip_rcpsp.py mip_test.py numpy_test.py rcpsp_test.py test_conflict.py test_gurobi.py test_model.py two_dim_pack_test.py TODO.md",
        "setup.py": "import setuptools\n\n\nwith open(\"README.md\", \"r\") as fh:\nlong_descr = fh.read()\n\nsetuptools.setup(\nname=\"mip\",\npython_requires=\">3.7.0\",\nauthor=\"Santos, H.G. and Toffolo, T.A.M.\",\ndescription=\"Python tools for Modeling and Solving Mixed-Integer Linear \\\nPrograms (MIPs)\",\nlong_description=long_descr,\nlong_description_content_type=\"text\/markdown\",\nkeywords=[\n\"Optimization\",\n\"Linear Programming\",\n\"Integer Programming\",\n\"Operations Research\",\n],\nurl=\"https:\/\/github.com\/coin-or\/python-mip\",\npackages=[\"mip\", \"mip.libraries\"],\npackage_data={\n\"mip.libraries\": [\"*\", \"*.*\", \"win64\/*\", \"win64\/*.*\", \"lin64\/*\", \"lin64\/*.*\",]\n},\ninstall_requires=[\"cffi\"],\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"License :: OSI Approved :: Eclipse Public License 2.0 (EPL-2.0)\",\n\"Operating System :: OS Independent\",\n],\nuse_scm_version={\n\"write_to\": \"mip\/version.py\"\n},\nsetup_requires=['setuptools_scm']\n)\n"
    },
    {
        "package_name": "missingpy-0.2.0",
        "file_list": "knnimpute.py missforest.py pairwise_external.py test_knnimpute.py test_missforest.py __init__.py utils.py utils_external.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import setuptools\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nsetuptools.setup(\nname=\"missingpy\",\nversion=\"0.2.0\",\nauthor=\"Ashim Bhattarai\",\ndescription=\"Missing Data Imputation for Python\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/epsilon-machine\/missingpy\",\npackages=setuptools.find_packages(),\nclassifiers=(\n\"Programming Language :: Python :: 3\",\n\"License :: OSI Approved :: GNU General Public License v3 (GPLv3)\",\n\"Operating System :: OS Independent\",\n),\n)\n"
    },
    {
        "package_name": "mixpanel-4.10.0",
        "file_list": "LICENSE.txt __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "from codecs import open\nfrom os import path\nimport re\nfrom setuptools import setup, find_packages\n\ndef read(*paths):\nfilename = path.join(path.abspath(path.dirname(__file__)), *paths)\nwith open(filename, encoding='utf-8') as f:\nreturn f.read()\n\ndef find_version(*paths):\ncontents = read(*paths)\nmatch = re.search(r'^__version__ = [\\'\"]([^\\'\"]+)[\\'\"]', contents, re.M)\nif not match:\nraise RuntimeError('Unable to find version string.')\nreturn match.group(1)\n\nsetup(\nname='mixpanel',\nversion=find_version('mixpanel', '__init__.py'),\ndescription='Official Mixpanel library for Python',\nlong_description=read('README.rst'),\nurl='https:\/\/github.com\/mixpanel\/mixpanel-python',\nauthor='Mixpanel, Inc.',\nauthor_email='dev@mixpanel.com',\nlicense='Apache',\npython_requires='>=2.7, !=3.4.*',\ninstall_requires=[\n'six>=1.9.0',\n'requests>=2.4.2',\n'urllib3',\n],\nclassifiers=[\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n],\nkeywords='mixpanel analytics',\npackages=find_packages(),\n)\n"
    },
    {
        "package_name": "mkdocs-monorepo-plugin-1.0.3",
        "file_list": "edit_uri.py merger.py parser.py plugin.py test_plugin.py __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import setuptools\n\n\nsetuptools.setup(\nname='mkdocs-monorepo-plugin',\nversion='1.0.3',\ndescription='Plugin for adding monorepository support in Mkdocs.',\nlong_description=\"\"\"\nThis introduces support for the !include syntax in mkdocs.yml, allowing you to import additional Mkdocs navigation.\nIt enables large or complex repositories to have their own sets of docs\/ folders, whilst generating only a single Mkdocs site.\nThis is built and maintained by the engineering community at Spotify.\n\"\"\", # noqa: E501\nkeywords='mkdocs monorepo',\nurl='https:\/\/github.com\/backstage\/mkdocs-monorepo-plugin',\nauthor='Bilawal Hameed',\nauthor_email='bil@spotify.com',\nlicense='Apache-2.0',\npython_requires='>=3',\ninstall_requires=[\n'mkdocs>=1.0.4',\n'python-slugify>=4.0.1'\n],\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'Intended Audience :: Information Technology',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3 :: Only',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7'\n],\npackages=setuptools.find_packages(),\nentry_points={\n'mkdocs.plugins': [\n\"monorepo = mkdocs_monorepo_plugin.plugin:MonorepoPlugin\"\n]\n}\n)\n"
    },
    {
        "package_name": "ml_wrappers-0.2.1",
        "file_list": "LICENSE.txt constants.py gpu_kmeans.py warnings_suppressor.py __init__.py dataset_utils.py dataset_wrapper.py timestamp_featurizer.py __init__.py function_wrapper.py image_model_wrapper.py model_wrapper.py pytorch_wrapper.py tensorflow_wrapper.py text_model_wrapper.py __init__.py version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# ---------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# ---------------------------------------------------------\n\n\"\"\"Setup file for ml-wrappers package.\"\"\"\nimport os\nimport shutil\n\nfrom setuptools import find_packages, setup\n\nwith open('ml_wrappers\/version.py') as f:\ncode = compile(f.read(), f.name, 'exec')\nexec(code)\n\nREADME_FILE = 'README.md'\nLICENSE_FILE = 'LICENSE.txt'\n\n# Note: used when generating the wheel but not on pip install of the package\nif os.path.exists('..\/LICENSE'):\nshutil.copyfile('..\/LICENSE', LICENSE_FILE)\n\n\nCLASSIFIERS = [\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Topic :: Scientific\/Engineering :: Artificial Intelligence',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: MacOS',\n'Operating System :: POSIX :: Linux'\n]\n\nDEPENDENCIES = [\n'numpy',\n'pandas',\n'scipy',\n'scikit-learn'\n]\n\nwith open(README_FILE, 'r', encoding='utf-8') as f:\nREADME = f.read()\n\nsetup(\nname=name, # noqa: F821\nversion=version, # noqa: F821\ndescription='Machine Learning Wrappers SDK for Python',\nlong_description=README,\nlong_description_content_type='text\/markdown',\nauthor='Microsoft Corp',\nauthor_email='ilmat@microsoft.com',\nlicense='MIT License',\nurl='https:\/\/github.com\/microsoft\/ml-wrappers',\nclassifiers=CLASSIFIERS,\npackages=find_packages(exclude=[\"*.tests\"]),\ninstall_requires=DEPENDENCIES,\nzip_safe=False\n)\n"
    },
    {
        "package_name": "mlflow-skinny-1.28.0",
        "file_list": "LICENSE.txt MANIFEST.in __init__.py client.py __init__.py cli.py __init__.py catboost.py cli.py client.py data.py db.py base.py cli.py interface.py plugin_manager.py utils.py __init__.py diviner.py experiment.py experiment_tag.py file_info.py lifecycle_stage.py metric.py model_version.py model_version_stages.py model_version_status.py model_version_tag.py registered_model.py registered_model_tag.py _model_registry_entity.py __init__.py param.py run.py run_data.py run_info.py run_status.py run_tag.py source_type.py view_type.py _mlflow_object.py __init__.py environment_variables.py exceptions.py experiments.py callback.py __init__.py _autolog.py __init__.py h2o.py keras.py lightgbm.py ml-package-versions.yml mleap.py cli.py wsgi.py __init__.py __init__.py docker_utils.py artifacts.py base.py default_evaluator.py evaluator_registry.py lift_curve.py _shap_patch.py __init__.py flavor_backend.py flavor_backend_registry.py model.py signature.py utils.py __init__.py onnx.py _paddle_autolog.py __init__.py __init__.py __init__.py cli.py pipeline.py dag_help_strings.py pipeline.py __init__.py __init__.py step.py evaluate.py datasets.py __init__.py register.py split.py train.py transform.py __init__.py execution.py metrics.py step.py tracking.py __init__.py __init__.py pmdarima.py abstract_backend.py loader.py local.py __init__.py databricks.py docker.py env_type.py kubernetes.py submitted_run.py utils.py _project_spec.py __init__.py prophet.py databricks_artifacts_pb2.py databricks_pb2.py mlflow_artifacts_pb2.py model_registry_pb2.py scalapb_pb2.py __init__.py service_pb2.py __init__.py backend.py mlserver.py model.py client.py wsgi.py __init__.py spark_model_cache.py __init__.py pypi_package_index.json log_model_allowlist.txt _autolog.py __init__.py __init__.py pickle_module.py _pytorch_autolog.py __init__.py backend.py __init__.py runs.py cli.py __init__.py handlers.py prometheus_exporter.py __init__.py shap.py utils.py __init__.py spacy.py spark.py statsmodels.py artifact_repo.py artifact_repository_registry.py azure_blob_artifact_repo.py cli.py databricks_artifact_repo.py databricks_models_artifact_repo.py dbfs_artifact_repo.py ftp_artifact_repo.py gcs_artifact_repo.py hdfs_artifact_repo.py http_artifact_repo.py local_artifact_repo.py mlflow_artifacts_repo.py models_artifact_repo.py runs_artifact_repo.py s3_artifact_repo.py sftp_artifact_repo.py models.py __init__.py __init__.py base_sql_model.py db_types.py utils.py __init__.py alembic.ini env.py 0a8213491aaa_drop_duplicate_killed_constraint.py 0c779009ac13_add_deleted_time_field_to_runs_table.py 181f10493468_allow_nulls_for_metric_values.py 27a6a02d2cf1_add_model_version_tags_table.py 2b4d017a5e9b_add_model_registry_tables_to_db.py 39d1c3be5f05_add_is_nan_constraint_for_metrics_tables_if_necessary.py 451aebb31d03_add_metric_step.py 728d730b5ebd_add_registered_model_tags_table.py 7ac759974ad8_update_run_tags_with_larger_limit.py 84291f40a231_add_run_link_to_model_version.py 89d4b8295536_create_latest_metrics_table.py 90e64c465722_migrate_user_column_to_tags.py a8c4a736bde6_allow_nulls_for_run_id.py bd07f7e963c5_create_index_on_run_uuid.py c48cb773bb87_reset_default_value_for_is_nan_in_metrics_table_for_mysql.py cc1f77228345_change_param_value_length_to_500.py cfd24bdc0731_update_run_status_constraint_with_killed.py df50e92ffc5e_add_experiment_tags_table.py __init__.py __init__.py paged_list.py __init__.py abstract_store.py models.py __init__.py rest_store.py sqlalchemy_store.py __init__.py abstract_store.py initial_models.py models.py __init__.py file_store.py rest_store.py sqlalchemy_store.py __init__.py __init__.py _autolog.py __init__.py artifact_utils.py client.py abstract_context.py databricks_cluster_context.py databricks_command_context.py databricks_job_context.py databricks_notebook_context.py databricks_repo_context.py default_context.py git_context.py registry.py system_environment_context.py __init__.py abstract_context.py databricks_job_experiment_provider.py databricks_notebook_experiment_provider.py registry.py __init__.py fluent.py metric_value_conversion_utils.py registry.py abstract_request_header_provider.py databricks_request_header_provider.py default_request_header_provider.py registry.py __init__.py client.py fluent.py registry.py utils.py __init__.py client.py registry.py utils.py __init__.py __init__.py schema.py utils.py __init__.py annotations.py arguments_utils.py client.py events.py logging_and_warnings.py safety.py versioning.py __init__.py class_utils.py cli_args.py conda.py databricks_utils.py docstring_utils.py env.py environment.py env_manager.py file_utils.py git_utils.py gorilla.py __init__.py logging_utils.py mlflow_tags.py model_utils.py nfs_on_spark.py process.py proto_json_utils.py requirements_utils.py rest_utils.py search_utils.py server_cli_utils.py string_utils.py time_utils.py uri.py validation.py virtualenv.py _capture_modules.py _spark_utils.py __init__.py version.py _autolog.py __init__.py _spark_autologging.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO print_function.py __init__.py unittest_assert_raises.py __init__.py README.rst README_SKINNY.rst core-requirements.txt skinny-requirements.txt setup.cfg setup.py",
        "setup.py": "import os\nimport logging\nimport distutils\n\nfrom importlib.machinery import SourceFileLoader\nfrom setuptools import setup, find_packages\n\n_MLFLOW_SKINNY_ENV_VAR = \"MLFLOW_SKINNY\"\n\nversion = (\nSourceFileLoader(\"mlflow.version\", os.path.join(\"mlflow\", \"version.py\")).load_module().VERSION\n)\n\n\n# Get a list of all files in the directory to include in our module\ndef package_files(directory):\npaths = []\nfor (path, _, filenames) in os.walk(directory):\nfor filename in filenames:\npaths.append(os.path.join(\"..\", path, filename))\nreturn paths\n\n\ndef is_comment_or_empty(line):\nstripped = line.strip()\nreturn stripped == \"\" or stripped.startswith(\"#\")\n\n\ndef remove_comments_and_empty_lines(lines):\nreturn [line for line in lines if not is_comment_or_empty(line)]\n\n\n# Prints out a set of paths (relative to the mlflow\/ directory) of files in mlflow\/server\/js\/build\n# to include in the wheel, e.g. \"..\/mlflow\/server\/js\/build\/index.html\"\njs_files = package_files(\"mlflow\/server\/js\/build\")\nmodels_container_server_files = package_files(\"mlflow\/models\/container\")\nalembic_files = [\n\"..\/mlflow\/store\/db_migrations\/alembic.ini\",\n\"..\/mlflow\/temporary_db_migrations_for_pre_1_users\/alembic.ini\",\n]\nextra_files = [\n\"ml-package-versions.yml\",\n\"pypi_package_index.json\",\n\"pyspark\/ml\/log_model_allowlist.txt\",\n]\npipelines_regression_v1_files = package_files(\"mlflow\/pipelines\/regression\/v1\/resources\")\npipelines_files = package_files(\"mlflow\/pipelines\/cards\/templates\")\n\n\n\"\"\"\nMinimal requirements for the skinny MLflow client which provides a limited\nsubset of functionality such as: RESTful client functionality for Tracking and\nModel Registry, as well as support for Project execution against local backends\nand Databricks.\n\"\"\"\nwith open(os.path.join(\"requirements\", \"skinny-requirements.txt\"), \"r\") as f:\nSKINNY_REQUIREMENTS = remove_comments_and_empty_lines(f.read().splitlines())\n\n\n\"\"\"\nThese are the core requirements for the complete MLflow platform, which augments\nthe skinny client functionality with support for running the MLflow Tracking\nServer & UI. It also adds project backends such as Docker and Kubernetes among\nother capabilities.\n\"\"\"\nwith open(os.path.join(\"requirements\", \"core-requirements.txt\"), \"r\") as f:\nCORE_REQUIREMENTS = SKINNY_REQUIREMENTS + remove_comments_and_empty_lines(f.read().splitlines())\n\n_is_mlflow_skinny = bool(os.environ.get(_MLFLOW_SKINNY_ENV_VAR))\nlogging.debug(\"{} env var is set: {}\".format(_MLFLOW_SKINNY_ENV_VAR, _is_mlflow_skinny))\n\n\nclass ListDependencies(distutils.cmd.Command):\n# `python setup.py <command name>` prints out \"running <command name>\" by default.\n# This logging message must be hidden by specifying `--quiet` (or `-q`) when piping the output\n# of this command to `pip install`.\ndescription = \"List mlflow dependencies\"\nuser_options = [\n(\"skinny\", None, \"List mlflow-skinny dependencies\"),\n]\n\ndef initialize_options(self):\nself.skinny = False\n\ndef finalize_options(self):\npass\n\ndef run(self):\ndependencies = SKINNY_REQUIREMENTS if self.skinny else CORE_REQUIREMENTS\nprint(\"\\n\".join(dependencies))\n\n\nMINIMUM_SUPPORTED_PYTHON_VERSION = \"3.7\"\n\n\nclass MinPythonVersion(distutils.cmd.Command):\ndescription = \"Print out the minimum supported Python version\"\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nprint(MINIMUM_SUPPORTED_PYTHON_VERSION)\n\n\nsetup(\nname=\"mlflow\" if not _is_mlflow_skinny else \"mlflow-skinny\",\nversion=version,\npackages=find_packages(exclude=[\"tests\", \"tests.*\"]),\npackage_data={\n\"mlflow\": (\njs_files\n+ models_container_server_files\n+ alembic_files\n+ extra_files\n+ pipelines_regression_v1_files\n+ pipelines_files\n),\n}\nif not _is_mlflow_skinny\n# include alembic files to enable usage of the skinny client with SQL databases\n# if users install sqlalchemy and alembic independently\nelse {\"mlflow\": alembic_files + extra_files},\ninstall_requires=CORE_REQUIREMENTS if not _is_mlflow_skinny else SKINNY_REQUIREMENTS,\nextras_require={\n\"extras\": [\n\"scikit-learn\",\n# Required to log artifacts and models to HDFS artifact locations\n\"pyarrow\",\n# Required to log artifacts and models to AWS S3 artifact locations\n\"boto3\",\n# Required to log artifacts and models to GCS artifact locations\n\"google-cloud-storage>=1.30.0\",\n\"azureml-core>=1.2.0\",\n# Required to log artifacts to SFTP artifact locations\n\"pysftp\",\n# Required by the mlflow.projects module, when running projects against\n# a remote Kubernetes cluster\n\"kubernetes\",\n# Required to serve models through MLServer\n\"mlserver>=0.5.3\",\n\"mlserver-mlflow>=0.5.3\",\n\"virtualenv\",\n],\n\"pipelines\": [\n\"scikit-learn>=1.0\",\n\"pyarrow>=7.0\",\n\"shap>=0.40\",\n\"pandas-profiling>=3.1\",\n\"ipython>=7.0\",\n\"markdown>=3.3\",\n\"Jinja2>=3.0\",\n],\n\"sqlserver\": [\"mlflow-dbstore\"],\n\"aliyun-oss\": [\"aliyunstoreplugin\"],\n},\nentry_points=\"\"\"\n[console_scripts]\nmlflow=mlflow.cli:cli\nmlp=mlflow.pipelines.cli:commands\n\"\"\",\ncmdclass={\n\"dependencies\": ListDependencies,\n\"min_python_version\": MinPythonVersion,\n},\nzip_safe=False,\nauthor=\"Databricks\",\ndescription=\"MLflow: A Platform for ML Development and Productionization\",\nlong_description=open(\"README.rst\").read()\nif not _is_mlflow_skinny\nelse open(\"README_SKINNY.rst\").read() + open(\"README.rst\").read(),\nlong_description_content_type=\"text\/x-rst\",\nlicense=\"Apache License 2.0\",\nclassifiers=[\n\"Intended Audience :: Developers\",\nf\"Programming Language :: Python :: {MINIMUM_SUPPORTED_PYTHON_VERSION}\",\n],\nkeywords=\"ml ai databricks\",\nurl=\"https:\/\/mlflow.org\/\",\npython_requires=f\">={MINIMUM_SUPPORTED_PYTHON_VERSION}\",\nproject_urls={\n\"Bug Tracker\": \"https:\/\/github.com\/mlflow\/mlflow\/issues\",\n\"Documentation\": \"https:\/\/mlflow.org\/docs\/latest\/index.html\",\n\"Source Code\": \"https:\/\/github.com\/mlflow\/mlflow\",\n},\n)\n"
    },
    {
        "package_name": "mlserver-mlflow-1.1.0",
        "file_list": "LICENSE codecs.py metadata.py runtime.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import os\n\nfrom typing import Dict\nfrom setuptools import setup, find_packages\n\nROOT_PATH = os.path.dirname(__file__)\nPKG_NAME = \"mlserver-mlflow\"\nPKG_PATH = os.path.join(ROOT_PATH, PKG_NAME.replace(\"-\", \"_\"))\n\n\ndef _load_version() -> str:\nversion = \"\"\nversion_path = os.path.join(PKG_PATH, \"version.py\")\nwith open(version_path) as fp:\nversion_module: Dict[str, str] = {}\nexec(fp.read(), version_module)\nversion = version_module[\"__version__\"]\n\nreturn version\n\n\ndef _load_description() -> str:\nreadme_path = os.path.join(ROOT_PATH, \"README.md\")\nwith open(readme_path) as fp:\nreturn fp.read()\n\n\nsetup(\nname=PKG_NAME,\nversion=_load_version(),\nurl=\"https:\/\/github.com\/SeldonIO\/MLServer.git\",\nauthor=\"Seldon Technologies Ltd.\",\nauthor_email=\"hello@seldon.io\",\ndescription=\"MLflow runtime for MLServer\",\npackages=find_packages(exclude=[\"tests\", \"tests.*\"]),\ninstall_requires=[\"mlserver\", \"mlflow\"],\nlong_description=_load_description(),\nlong_description_content_type=\"text\/markdown\",\nlicense=\"Apache 2.0\",\n)\n"
    },
    {
        "package_name": "mmh3-3.0.0",
        "file_list": "MANIFEST.in dependency_links.txt PKG-INFO SOURCES.txt top_level.txt mmh3module.cpp MurmurHash3.cpp MurmurHash3.h PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# MurmurHash3 was written by Austin Appleby, and is placed in the public domain.\n# mmh3 Python module was written by Hajime Senuma, and is also placed in the public domain.\n# The authors hereby disclaim copyright to these source codes.\nimport platform\nimport sys\n\nfrom setuptools import Extension, setup\n\nCOMPILE_OPTIONS = []\nLINK_OPTIONS = []\n\n\ndef is_new_osx():\n\"\"\"Check whether we're on OSX >= 10.7\"\"\"\nif sys.platform != \"darwin\":\nreturn False\nmac_ver = platform.mac_ver()[0]\nif mac_ver.startswith(\"10\"):\nminor_version = int(mac_ver.split(\".\")[1])\nreturn minor_version >= 7\nreturn False\n\n\nif is_new_osx():\n# On Mac, use libc++ because Apple deprecated use of\n# libstdc\nCOMPILE_OPTIONS.append(\"-stdlib=libc++\")\nLINK_OPTIONS.append(\"-lc++\")\n# g++ (used by unix compiler on mac) links to libstdc++ as a default lib.\n# See: https:\/\/stackoverflow.com\/questions\/1653047\/avoid-linking-to-libstdc\nLINK_OPTIONS.append(\"-nodefaultlibs\")\n\nmmh3module = Extension(\n\"mmh3\",\nsources=[\"mmh3module.cpp\", \"MurmurHash3.cpp\"],\nextra_compile_args=COMPILE_OPTIONS,\nextra_link_args=LINK_OPTIONS,\n)\n\nsetup(\nname=\"mmh3\",\nversion=\"3.0.0\",\ndescription=\"Python wrapper for MurmurHash (MurmurHash3), a set of fast and robust hash functions.\",\nlicense=\"License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication\",\nauthor=\"Hajime Senuma\",\nauthor_email=\"hajime.senuma@gmail.com\",\nurl=\"https:\/\/github.com\/hajimes\/mmh3\",\next_modules=[mmh3module],\nkeywords=\"utility hash MurmurHash\",\nlong_description=open(\"README.md\").read(),\nlong_description_content_type=\"text\/markdown\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Topic :: Software Development :: Libraries\",\n\"Topic :: Utilities\",\n],\n)\n"
    },
    {
        "package_name": "mockredispy-2.9.3",
        "file_list": "client.py clock.py exceptions.py lock.py noseplugin.py pipeline.py script.py sortedset.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom setuptools import setup, find_packages\n\n# Match releases to redis-py versions\n__version__ = '2.9.3'\n\n# Jenkins will replace __build__ with a unique value.\n__build__ = ''\n\nsetup(name='mockredispy',\nversion=__version__ + __build__,\ndescription='Mock for redis-py',\nurl='http:\/\/www.github.com\/locationlabs\/mockredis',\nlicense='Apache2',\npackages=find_packages(exclude=['*.tests']),\nsetup_requires=[\n'nose'\n],\nextras_require={\n'lua': ['lunatic-python-bugfix==1.1.1'],\n},\ntests_require=[\n'redis>=2.9.0'\n],\ntest_suite='mockredis.tests',\nentry_points={\n'nose.plugins.0.10': [\n'with_redis = mockredis.noseplugin:WithRedis'\n]\n})\n"
    },
    {
        "package_name": "mojimoji-0.0.12",
        "file_list": "LICENSE MANIFEST.in py.typed __init__.pyi mojimoji.cpp dependency_links.txt PKG-INFO SOURCES.txt top_level.txt mojimoji.pyx PKG-INFO pyproject.toml README.rst requirements.txt setup.cfg setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\n\nimport io\nimport sys\nfrom setuptools import setup, Extension\nfrom Cython.Build import cythonize\n\nif sys.platform.startswith(\"win\"):\ncompile_args = []\nlink_args = []\nelse:\ncompile_args = [\"-std=c++11\"]\nlink_args = [\"-std=c++11\"]\n\nextensions = [\nExtension(\n\"mojimoji\",\n[\"mojimoji.pyx\"],\nextra_compile_args=compile_args,\nextra_link_args=link_args,\n)\n]\n\nsetup(\nname=\"mojimoji\",\nversion=\"0.0.12\",\ndescription=\"A fast converter between Japanese hankaku and zenkaku characters\",\nlong_description=io.open(\"README.rst\", encoding=\"utf-8\").read(),\nauthor=\"Studio Ousia\",\nauthor_email=\"ikuya@ousia.jp\",\nurl=\"http:\/\/github.com\/studio-ousia\/mojimoji\",\next_modules=cythonize(extensions),\npackages=[\"mojimoji\"],\npackage_data={\"mojimoji\":[\"py.typed\",\"__init__.pyi\"]},\nkeywords=[\"japanese\"],\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"Natural Language :: Japanese\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n],\n)\n"
    },
    {
        "package_name": "monorepo-0.1.0",
        "file_list": "LICENSE __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup, find_packages\n\n\nwith open(\"README.md\") as f:\nreadme = f.read()\n\n\nsetup(\nname=\"monorepo\",\nversion=\"0.1.0\",\ndescription=\"Import packages from the root of a monorepo\",\nurl=\"https:\/\/github.com\/myleott\/monorepo\",\nlong_description = readme,\nlong_description_content_type=\"text\/markdown\",\npython_requires=\">=3.8\",\npackages=find_packages(),\n)\n"
    },
    {
        "package_name": "monty-2022.4.26",
        "file_list": "LICENSE.rst MANIFEST.in bisect.py collections.py design_patterns.py dev.py fnmatch.py fractions.py functools.py inspect.py io.py itertools.py json.py logging.py math.py msgpack.py multiprocessing.py operator.py path.py __init__.py pprint.py re.py serialization.py shutil.py string.py subprocess.py tempfile.py termcolor.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO pyproject.toml README.rst setup.cfg setup.py",
        "setup.py": "import os\n\nfrom setuptools import find_packages, setup\n\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\n\nwith open(os.path.join(current_dir, \"README.rst\")) as f:\nlong_desc = f.read()\n\nsetup(\nname=\"monty\",\npackages=find_packages(),\nversion=\"2022.4.26\",\nextras_require={\n\"yaml\": [\"ruamel.yaml\"],\n},\npackage_data={},\nauthor=\"Shyue Ping Ong\",\nauthor_email=\"ongsp@ucsd.edu\",\nmaintainer=\"Shyue Ping Ong\",\nurl=\"https:\/\/github.com\/materialsvirtuallab\/monty\",\nlicense=\"MIT\",\ndescription=\"Monty is the missing complement to Python.\",\nlong_description=long_desc,\nkeywords=[\"monty\"],\npython_requires=\">=3.5\",\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\n)\n"
    },
    {
        "package_name": "more-executors-2.11.1",
        "file_list": "CHANGELOG.md LICENSE MANIFEST.in asyncio.py asyncio.pyi cancel_on_shutdown.py cancel_on_shutdown.pyi flat_map.py flat_map.pyi futures.py futures.pyi map.py map.pyi poll.py poll.pyi py.typed retry.py retry.pyi sync.py sync.pyi throttle.py throttle.pyi timeout.py timeout.pyi asyncio.py asyncio.pyi bind.py bind.pyi cancel_on_shutdown.py cancel_on_shutdown.pyi common.py event.py executors.py executors.pyi flat_map.py flat_map.pyi apply.py apply.pyi base.py base.pyi bool.py bool.pyi check.py map.py map.pyi nocancel.py nocancel.pyi proxy.py proxy.pyi sequence.py sequence.pyi timeout.py timeout.pyi zip.py zip.pyi __init__.py __init__.pyi helpers.py logwrap.py map.py map.pyi null.py prometheus.py __init__.py poll.py poll.pyi retry.py retry.pyi shared_types.pyi sync.py sync.pyi throttle.py throttle.pyi timeout.py timeout.pyi wrap.py wrapped.py __init__.py __init__.pyi __init__.py __init__.pyi dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md requirements.in setup.cfg setup.py",
        "setup.py": "from setuptools import setup, find_packages\n\n\ndef get_description():\nreturn \"A library of composable Python executors and futures\"\n\n\ndef get_long_description():\ntext = open(\"README.md\").read()\n\n# The README starts with the same text as \"description\",\n# which makes sense, but on PyPI causes same text to be\n# displayed twice. So let's strip that.\nreturn text.replace(get_description() + \".\\n\\n\", \"\", 1)\n\n\ndef get_install_requires():\nreturn open(\"requirements.in\").readlines()\n\n\nsetup(\nname=\"more-executors\",\nversion=\"2.11.1\",\nauthor=\"Rohan McGovern\",\nauthor_email=\"rohan@mcgovern.id.au\",\npackages=find_packages(exclude=[\"tests\", \"tests.*\"]),\ninclude_package_data=True,\nzip_safe=False,\nurl=\"https:\/\/github.com\/rohanpm\/more-executors\",\nlicense=\"GNU General Public License\",\ndescription=get_description(),\nlong_description=get_long_description(),\nlong_description_content_type=\"text\/markdown\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.6\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\ninstall_requires=get_install_requires(),\nextras_require={\"prometheus\": [\"prometheus-client\"]},\nproject_urls={\n\"Changelog\": \"https:\/\/github.com\/rohanpm\/more-executors\/blob\/master\/CHANGELOG.md\",\n\"Documentation\": \"https:\/\/rohanpm.github.io\/more-executors\/\",\n},\n)\n"
    },
    {
        "package_name": "moviepy-1.0.3",
        "file_list": "advanced_tools.py advanced_tools.rst advanced_tools.cpython-37.pyc conf.py demo_preview.jpeg docker.rst compo_from_image.jpeg compo_from_image.rst dancing_knights.rst examples.rst example_with_sound.rst headblur.rst logo.rst masked_credits.rst moving_letters.rst painting_effect.rst quick_recipes.rst several_characters.rst star_worms.rst the_end.rst ukulele_concerto.rst FAQ.rst gallery.rst audioclips.rst circle.gif compositing.rst effects.rst efficient_moviepy.rst explanations.jpeg getting_started.rst ipynb_example.jpeg quick_presentation.rst stacked.jpeg videoclips.rst videoWH.jpeg working_with_matplotlib.rst index.rst install.rst logo.png make.bat Makefile makehtml.sh opencv_instructions.rst AudioClip.rst moviepy.audio.fx.all.audio_fadein.rst moviepy.audio.fx.all.audio_fadeout.rst moviepy.audio.fx.all.audio_loop.rst moviepy.audio.fx.all.audio_normalize.rst moviepy.audio.fx.all.volumex.rst audiofx.rst audiotools.rst bideotools_gradient.jpeg Clip.rst code_origanization.rst decorators.rst ffmpeg.rst ref.rst VideoClip.rst moviepy.video.fx.all.accel_decel.rst moviepy.video.fx.all.blackwhite.rst moviepy.video.fx.all.blink.rst moviepy.video.fx.all.colorx.rst moviepy.video.fx.all.crop.rst moviepy.video.fx.all.even_size.rst moviepy.video.fx.all.fadein.rst moviepy.video.fx.all.fadeout.rst moviepy.video.fx.all.freeze.rst moviepy.video.fx.all.freeze_region.rst moviepy.video.fx.all.gamma_corr.rst moviepy.video.fx.all.headblur.rst moviepy.video.fx.all.invert_colors.rst moviepy.video.fx.all.loop.rst moviepy.video.fx.all.lum_contrast.rst moviepy.video.fx.all.make_loopable.rst moviepy.video.fx.all.margin.rst moviepy.video.fx.all.mask_and.rst moviepy.video.fx.all.mask_color.rst moviepy.video.fx.all.mask_or.rst moviepy.video.fx.all.mirror_x.rst moviepy.video.fx.all.mirror_y.rst moviepy.video.fx.all.painting.rst moviepy.video.fx.all.resize.rst moviepy.video.fx.all.rotate.rst moviepy.video.fx.all.scroll.rst moviepy.video.fx.all.speedx.rst moviepy.video.fx.all.supersample.rst moviepy.video.fx.all.time_mirror.rst moviepy.video.fx.all.time_symmetrize.rst videofx.rst videotools.rst videotools_credits.jpeg logo.png logo_small.jpeg moviepy.css .gitignore conf.cpython-37.pyc ez_setup.py LICENCE.txt MANIFEST.in AudioClip.py __init__.py audio_fadein.py audio_fadeout.py audio_left_right.py audio_loop.py audio_normalize.py volumex.py __init__.py AudioFileClip.py ffmpeg_audiowriter.py preview.py readers.py __init__.py cuts.py __init__.py __init__.py Clip.py compat.py config.py config_defaults.py decorators.py editor.py tools.py utils.py version.py CompositeVideoClip.py concatenate.py on_color.py positioning.py transitions.py __init__.py accel_decel.py __init__.py blackwhite.py blink.py colorx.py crop.py even_size.py fadein.py fadeout.py freeze.py freeze_region.py gamma_corr.py headblur.py invert_colors.py loop.py lum_contrast.py make_loopable.py margin.py mask_and.py mask_color.py mask_or.py mirror_x.py mirror_y.py painting.py resize.py rotate.py scroll.py speedx.py supersample.py time_mirror.py time_symmetrize.py __init__.py bindings.py downloader.py ffmpeg_reader.py ffmpeg_tools.py ffmpeg_writer.py gif_writers.py html_tools.py ImageSequenceClip.py preview.py sliders.py VideoFileClip.py __init__.py credits.py cuts.py drawing.py interpolators.py segmenting.py subtitles.py tracking.py __init__.py VideoClip.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py tom_credits.txt",
        "setup.py": "#!\/usr\/bin\/env python\n\n# This will try to import setuptools. If not here, it will reach for the embedded\n# ez_setup (or the ez_setup package). If none, it fails with a message\nimport sys\nfrom codecs import open\n\ntry:\nfrom setuptools import find_packages, setup\nfrom setuptools.command.test import test as TestCommand\nexcept ImportError:\ntry:\nimport ez_setup\nez_setup.use_setuptools()\nexcept ImportError:\nraise ImportError('MoviePy could not be installed, probably because'\n' neither setuptools nor ez_setup are installed on this computer.'\n'\\nInstall ez_setup ([sudo] pip install ez_setup) and try again.')\n\n\nclass PyTest(TestCommand):\n\"\"\"Handle test execution from setup.\"\"\"\n\nuser_options = [('pytest-args=', 'a', \"Arguments to pass into pytest\")]\n\ndef initialize_options(self):\n\"\"\"Initialize the PyTest options.\"\"\"\nTestCommand.initialize_options(self)\nself.pytest_args = \"\"\n\ndef finalize_options(self):\n\"\"\"Finalize the PyTest options.\"\"\"\nTestCommand.finalize_options(self)\nself.test_args = []\nself.test_suite = True\n\ndef run_tests(self):\n\"\"\"Run the PyTest testing suite.\"\"\"\ntry:\nimport pytest\nexcept ImportError:\nraise ImportError('Running tests requires additional dependencies.'\n'\\nPlease run (pip install moviepy[test])')\n\nerrno = pytest.main(self.pytest_args.split(\" \"))\nsys.exit(errno)\n\n\ncmdclass = {'test': PyTest} # Define custom commands.\n\nif 'build_docs' in sys.argv:\ntry:\nfrom sphinx.setup_command import BuildDoc\nexcept ImportError:\nraise ImportError('Running the documenation builds has additional'\n' dependencies. Please run (pip install moviepy[docs])')\n\ncmdclass['build_docs'] = BuildDoc\n\n__version__ = None # Explicitly set version to quieten static code checkers.\nexec(open('moviepy\/version.py').read()) # loads __version__\n\n# Define the requirements for specific execution needs.\nrequires = [\n'decorator>=4.0.2,<5.0',\n\"imageio>=2.5,<3.0; python_version>='3.4'\",\n\"imageio>=2.0,<2.5; python_version<'3.4'\",\n\"imageio_ffmpeg>=0.2.0; python_version>='3.4'\",\n'tqdm>=4.11.2,<5.0',\n\"numpy>=1.17.3; python_version!='2.7'\",\n\"numpy; python_version>='2.7'\",\n'requests>=2.8.1,<3.0',\n'proglog<=1.0.0'\n]\n\noptional_reqs = [\n\"opencv-python>=3.0,<4.0; python_version!='2.7'\",\n\"scikit-image>=0.13.0,<1.0; python_version>='3.4'\",\n\"scikit-learn; python_version>='3.4'\",\n\"scipy>=0.19.0,<1.5; python_version!='3.3'\",\n\"matplotlib>=2.0.0,<3.0; python_version>='3.4'\",\n\"youtube_dl\"\n]\n\ndoc_reqs = [\n\"pygame>=1.9.3,<2.0; python_version<'3.8'\",\n'numpydoc>=0.6.0,<1.0',\n'sphinx_rtd_theme>=0.1.10b0,<1.0', \n'Sphinx>=1.5.2,<2.0',\n]\n\ntest_reqs = [\n'coverage<5.0',\n'coveralls>=1.1,<2.0',\n'pytest-cov>=2.5.1,<3.0',\n'pytest>=3.0.0,<4.0',\n'requests>=2.8.1,<3.0'\n]\n\nextra_reqs = {\n\"optional\": optional_reqs,\n\"doc\": doc_reqs,\n\"test\": test_reqs\n}\n\n# Load the README.\nwith open('README.rst', 'r', 'utf-8') as f:\nreadme = f.read()\n\nsetup(\nname='moviepy',\nversion=__version__,\nauthor='Zulko 2017',\ndescription='Video editing with Python',\nlong_description=readme,\nurl='https:\/\/zulko.github.io\/moviepy\/',\nlicense='MIT License',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Natural Language :: English',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Topic :: Multimedia',\n'Topic :: Multimedia :: Sound\/Audio',\n'Topic :: Multimedia :: Sound\/Audio :: Analysis',\n'Topic :: Multimedia :: Video',\n'Topic :: Multimedia :: Video :: Capture',\n'Topic :: Multimedia :: Video :: Conversion',\n],\nkeywords='video editing audio compositing ffmpeg',\npackages=find_packages(exclude=['docs', 'tests']),\ncmdclass=cmdclass,\ncommand_options={\n'build_docs': {\n'build_dir': ('setup.py', '.\/docs\/build'),\n'config_dir': ('setup.py', '.\/docs'),\n'version': ('setup.py', __version__.rsplit('.', 2)[0]),\n'release': ('setup.py', __version__)}},\ntests_require=test_reqs,\ninstall_requires=requires,\nextras_require=extra_reqs,\n)\n"
    },
    {
        "package_name": "msal-1.18.0",
        "file_list": "LICENSE application.py authority.py cloudshell.py exceptions.py individual_cache.py mex.py assertion.py authcode.py http.py oauth2.py oidc.py __init__.py region.py telemetry.py throttled_http_client.py token_cache.py wstrust_request.py wstrust_response.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "\ufeff#!\/usr\/bin\/env python\n#------------------------------------------------------------------------------\n#\n# Copyright (c) Microsoft Corporation.\n# All rights reserved.\n#\n# This code is licensed under the MIT License.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files(the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and \/ or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions :\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n#\n#------------------------------------------------------------------------------\n\nfrom setuptools import setup, find_packages\nimport re, io\n\n# setup.py shall not import main package\n__version__ = re.search(\nr'__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]', # It excludes inline comment too\nio.open('msal\/application.py', encoding='utf_8_sig').read()\n).group(1)\n\nlong_description = open('README.md').read()\n\nsetup(\nname='msal',\nversion=__version__,\ndescription=' '.join(\n\"\"\"The Microsoft Authentication Library (MSAL) for Python library\nenables your app to access the Microsoft Cloud\nby supporting authentication of users with\nMicrosoft Azure Active Directory accounts (AAD) and Microsoft Accounts (MSA)\nusing industry standard OAuth2 and OpenID Connect.\"\"\".split()),\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nlicense='MIT',\nauthor='Microsoft Corporation',\nauthor_email='nugetaad@microsoft.com',\nurl='https:\/\/github.com\/AzureAD\/microsoft-authentication-library-for-python',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n],\npackages=find_packages(exclude=[\"tests\"]),\npackage_data={'': ['LICENSE']}, # Do not use data_files=[...],\n# which would cause the LICENSE being copied to \/usr\/local,\n# and tend to fail because of insufficient permission.\n# See https:\/\/stackoverflow.com\/a\/14211600\/728675 for more detail\ninstall_requires=[\n'requests>=2.0.0,<3',\n'PyJWT[crypto]>=1.0.0,<3',\n\n'cryptography>=0.6,<40',\n# load_pem_private_key() is available since 0.6\n# https:\/\/github.com\/pyca\/cryptography\/blob\/master\/CHANGELOG.rst#06---2014-09-29\n#\n# And we will use the cryptography (X+3).0.0 as the upper bound,\n# based on their latest deprecation policy\n# https:\/\/cryptography.io\/en\/latest\/api-stability\/#deprecation\n\n\"mock;python_version<'3.3'\",\n]\n)\n\n"
    },
    {
        "package_name": "msgpack-numpy-0.4.8",
        "file_list": ".gitignore .travis.yml AUTHORS.md CHANGES.md LICENSE.md Makefile dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt msgpack_numpy.py PKG-INFO README.md requirements.txt setup.cfg setup.py tests.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport os\nimport re\n\nfrom setuptools import setup\n\nNAME = 'msgpack-numpy'\nVERSION = '0.4.8'\nAUTHOR = 'Lev E. Givon'\nAUTHOR_EMAIL = 'lev@columbia.edu'\nURL = 'https:\/\/github.com\/lebedov\/msgpack-numpy'\nDESCRIPTION = 'Numpy data serialization using msgpack'\nwith open('README.md', 'r') as f:\nLONG_DESCRIPTION = f.read()\nLONG_DESCRIPTION = re.search('.*(^Package Description.*)', LONG_DESCRIPTION, re.MULTILINE|re.DOTALL).group(1)\nLONG_DESCRIPTION_CONTENT_TYPE = 'text\/markdown'\nDOWNLOAD_URL = URL\nLICENSE = 'BSD'\nCLASSIFIERS = [\n'Development Status :: 3 - Alpha',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Topic :: Scientific\/Engineering',\n'Topic :: Software Development']\n\nif __name__ == \"__main__\":\nif os.path.exists('MANIFEST'):\nos.remove('MANIFEST')\n\nsetup(\nname = NAME,\nversion = VERSION,\nauthor = AUTHOR,\nauthor_email = AUTHOR_EMAIL,\nlicense = LICENSE,\nclassifiers = CLASSIFIERS,\ndescription = DESCRIPTION,\nlong_description = LONG_DESCRIPTION,\nlong_description_content_type = LONG_DESCRIPTION_CONTENT_TYPE,\nurl = URL,\npy_modules = ['msgpack_numpy'],\ninstall_requires = ['numpy>=1.9.0',\n'msgpack>=0.5.2']\n)\n"
    },
    {
        "package_name": "multiprocess-0.70.13",
        "file_list": ".codecov.yml .coveragerc .gitignore .readthedocs.yml .travis.yml COPYING LICENSE MANIFEST.in PKG-INFO CHANGES.html connection-objects.html connection-objects.txt connection-ref.html connection-ref.txt COPYING.html header.txt html4css1.css index.html index.txt INSTALL.html intro.html intro.txt manager-objects.html manager-objects.txt pool-objects.html pool-objects.txt process-objects.html process-objects.txt processing-ref.html processing-ref.txt programming-guidelines.html programming-guidelines.txt proxy-objects.html proxy-objects.txt queue-objects.html queue-objects.txt sharedctypes.html sharedctypes.txt tests.html tests.txt THANKS.html version.txt __init__.py benchmarks.py ex_newtype.py ex_pool.py ex_synchronize.py ex_webserver.py ex_workers.py __init__.py index.html connection.h multiprocess.c multiprocess.h pipe_connection.c semaphore.c socket_connection.c win32_functions.c connection.py connection.py __init__.py forking.py heap.py managers.py pool.py process.py queues.py reduction.py sharedctypes.py synchronize.py __init__.py __main__.py util.py __init__.py README_MODS CHANGES.html connection-objects.html connection-objects.txt connection-ref.html connection-ref.txt COPYING.html header.txt html4css1.css index.html index.txt INSTALL.html intro.html intro.txt manager-objects.html manager-objects.txt pool-objects.html pool-objects.txt process-objects.html process-objects.txt processing-ref.html processing-ref.txt programming-guidelines.html programming-guidelines.txt proxy-objects.html proxy-objects.txt queue-objects.html queue-objects.txt sharedctypes.html sharedctypes.txt tests.html tests.txt THANKS.html version.txt __init__.py benchmarks.py ex_newtype.py ex_pool.py ex_synchronize.py ex_webserver.py ex_workers.py __init__.py index.html multiprocessing.c.h posixshmem.c.h semaphore.c.h multiprocess.c multiprocess.h posixshmem.c semaphore.c connection.py context.py connection.py __init__.py forkserver.py heap.py managers.py pool.py popen_fork.py popen_forkserver.py popen_spawn_posix.py popen_spawn_win32.py process.py queues.py reduction.py resource_sharer.py resource_tracker.py sharedctypes.py shared_memory.py spawn.py synchronize.py mp_fork_bomb.py mp_preload.py test_multiprocessing_fork.py test_multiprocessing_forkserver.py test_multiprocessing_main_handling.py test_multiprocessing_spawn.py __init__.py __main__.py util.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README_MODS __init__.py CHANGES.html connection-objects.html connection-objects.txt connection-ref.html connection-ref.txt COPYING.html header.txt html4css1.css index.html index.txt INSTALL.html intro.html intro.txt manager-objects.html manager-objects.txt pool-objects.html pool-objects.txt process-objects.html process-objects.txt processing-ref.html processing-ref.txt programming-guidelines.html programming-guidelines.txt proxy-objects.html proxy-objects.txt queue-objects.html queue-objects.txt sharedctypes.html sharedctypes.txt tests.html tests.txt THANKS.html version.txt __init__.py benchmarks.py ex_newtype.py ex_pool.py ex_synchronize.py ex_webserver.py ex_workers.py __init__.py index.html multiprocessing.c.h posixshmem.c.h semaphore.c.h multiprocess.c multiprocess.h posixshmem.c semaphore.c connection.py context.py connection.py __init__.py forkserver.py heap.py managers.py pool.py popen_fork.py popen_forkserver.py popen_spawn_posix.py popen_spawn_win32.py process.py queues.py reduction.py resource_sharer.py resource_tracker.py sharedctypes.py shared_memory.py spawn.py synchronize.py mp_fork_bomb.py mp_preload.py test_multiprocessing_fork.py test_multiprocessing_forkserver.py test_multiprocessing_main_handling.py test_multiprocessing_spawn.py __init__.py __main__.py util.py __init__.py README_MODS __init__.py CHANGES.html connection-objects.html connection-objects.txt connection-ref.html connection-ref.txt COPYING.html header.txt html4css1.css index.html index.txt INSTALL.html intro.html intro.txt manager-objects.html manager-objects.txt pool-objects.html pool-objects.txt process-objects.html process-objects.txt processing-ref.html processing-ref.txt programming-guidelines.html programming-guidelines.txt proxy-objects.html proxy-objects.txt queue-objects.html queue-objects.txt sharedctypes.html sharedctypes.txt tests.html tests.txt THANKS.html version.txt __init__.py benchmarks.py ex_newtype.py ex_pool.py ex_synchronize.py ex_webserver.py ex_workers.py __init__.py index.html multiprocess.c multiprocess.h semaphore.c connection.py context.py connection.py __init__.py forkserver.py heap.py managers.py pool.py popen_fork.py popen_forkserver.py popen_spawn_posix.py popen_spawn_win32.py process.py queues.py reduction.py resource_sharer.py semaphore_tracker.py sharedctypes.py spawn.py synchronize.py mp_fork_bomb.py mp_preload.py test_multiprocessing_fork.py test_multiprocessing_forkserver.py test_multiprocessing_main_handling.py test_multiprocessing_spawn.py __init__.py __main__.py util.py __init__.py README_MODS __init__.py CHANGES.html connection-objects.html connection-objects.txt connection-ref.html connection-ref.txt COPYING.html header.txt html4css1.css index.html index.txt INSTALL.html intro.html intro.txt manager-objects.html manager-objects.txt pool-objects.html pool-objects.txt process-objects.html process-objects.txt processing-ref.html processing-ref.txt programming-guidelines.html programming-guidelines.txt proxy-objects.html proxy-objects.txt queue-objects.html queue-objects.txt sharedctypes.html sharedctypes.txt tests.html tests.txt THANKS.html version.txt __init__.py benchmarks.py ex_newtype.py ex_pool.py ex_synchronize.py ex_webserver.py ex_workers.py __init__.py index.html posixshmem.c.h multiprocess.c multiprocess.h posixshmem.c semaphore.c connection.py context.py connection.py __init__.py forkserver.py heap.py managers.py pool.py popen_fork.py popen_forkserver.py popen_spawn_posix.py popen_spawn_win32.py process.py queues.py reduction.py resource_sharer.py resource_tracker.py sharedctypes.py shared_memory.py spawn.py synchronize.py mp_fork_bomb.py mp_preload.py test_multiprocessing_fork.py test_multiprocessing_forkserver.py test_multiprocessing_main_handling.py test_multiprocessing_spawn.py __init__.py __main__.py util.py __init__.py README_MODS __init__.py CHANGES.html connection-objects.html connection-objects.txt connection-ref.html connection-ref.txt COPYING.html header.txt html4css1.css index.html index.txt INSTALL.html intro.html intro.txt manager-objects.html manager-objects.txt pool-objects.html pool-objects.txt process-objects.html process-objects.txt processing-ref.html processing-ref.txt programming-guidelines.html programming-guidelines.txt proxy-objects.html proxy-objects.txt queue-objects.html queue-objects.txt sharedctypes.html sharedctypes.txt tests.html tests.txt THANKS.html version.txt __init__.py benchmarks.py ex_newtype.py ex_pool.py ex_synchronize.py ex_webserver.py ex_workers.py __init__.py index.html posixshmem.c.h multiprocess.c multiprocess.h posixshmem.c semaphore.c connection.py context.py connection.py __init__.py forkserver.py heap.py managers.py pool.py popen_fork.py popen_forkserver.py popen_spawn_posix.py popen_spawn_win32.py process.py queues.py reduction.py resource_sharer.py resource_tracker.py sharedctypes.py shared_memory.py spawn.py synchronize.py mp_fork_bomb.py mp_preload.py test_multiprocessing_fork.py test_multiprocessing_forkserver.py test_multiprocessing_main_handling.py test_multiprocessing_spawn.py __init__.py __main__.py util.py __init__.py README_MODS __init__.py pyproject.toml CHANGES.html connection-objects.html connection-objects.txt connection-ref.html connection-ref.txt COPYING.html header.txt html4css1.css index.html index.txt INSTALL.html intro.html intro.txt manager-objects.html manager-objects.txt pool-objects.html pool-objects.txt process-objects.html process-objects.txt processing-ref.html processing-ref.txt programming-guidelines.html programming-guidelines.txt proxy-objects.html proxy-objects.txt queue-objects.html queue-objects.txt sharedctypes.html sharedctypes.txt tests.html tests.txt THANKS.html version.txt __init__.py benchmarks.py ex_newtype.py ex_pool.py ex_synchronize.py ex_webserver.py ex_workers.py __init__.py index.html interp_connection.py interp_memory.py interp_semaphore.py interp_win32.py moduledef.py test_connection.py test_interp_semaphore.py test_memory.py test_semaphore.py test_win32.py test_ztranslation.py __init__.py __init__.py connection.py connection.py __init__.py forking.py heap.py managers.py pool.py process.py queues.py reduction.py sharedctypes.py synchronize.py mp_fork_bomb.py __init__.py __main__.py util.py __init__.py README_MODS __init__.py CHANGES.html connection-objects.html connection-objects.txt connection-ref.html connection-ref.txt COPYING.html header.txt html4css1.css index.html index.txt INSTALL.html intro.html intro.txt manager-objects.html manager-objects.txt pool-objects.html pool-objects.txt process-objects.html process-objects.txt processing-ref.html processing-ref.txt programming-guidelines.html programming-guidelines.txt proxy-objects.html proxy-objects.txt queue-objects.html queue-objects.txt sharedctypes.html sharedctypes.txt tests.html tests.txt THANKS.html version.txt __init__.py benchmarks.py ex_newtype.py ex_pool.py ex_synchronize.py ex_webserver.py ex_workers.py __init__.py index.html interp_memory.py interp_semaphore.py interp_win32_py3.py moduledef.py test_interp_semaphore.py test_semaphore.py test_win32.py test_ztranslation.py __init__.py __init__.py connection.py context.py connection.py __init__.py forkserver.py heap.py managers.py pool.py popen_fork.py popen_forkserver.py popen_spawn_posix.py popen_spawn_win32.py process.py queues.py reduction.py resource_sharer.py semaphore_tracker.py sharedctypes.py spawn.py synchronize.py mp_fork_bomb.py mp_preload.py test_multiprocessing_fork.py test_multiprocessing_forkserver.py test_multiprocessing_main_handling.py test_multiprocessing_spawn.py __init__.py __main__.py util.py __init__.py README_MODS __init__.py CHANGES.html connection-objects.html connection-objects.txt connection-ref.html connection-ref.txt COPYING.html header.txt html4css1.css index.html index.txt INSTALL.html intro.html intro.txt manager-objects.html manager-objects.txt pool-objects.html pool-objects.txt process-objects.html process-objects.txt processing-ref.html processing-ref.txt programming-guidelines.html programming-guidelines.txt proxy-objects.html proxy-objects.txt queue-objects.html queue-objects.txt sharedctypes.html sharedctypes.txt tests.html tests.txt THANKS.html version.txt __init__.py benchmarks.py ex_newtype.py ex_pool.py ex_synchronize.py ex_webserver.py ex_workers.py FAILS.txt __init__.py index.html interp_memory.py interp_semaphore.py interp_win32_py3.py moduledef.py test_interp_semaphore.py test_semaphore.py test_win32.py test_ztranslation.py __init__.py __init__.py connection.py context.py connection.py __init__.py forkserver.py heap.py managers.py pool.py popen_fork.py popen_forkserver.py popen_spawn_posix.py popen_spawn_win32.py process.py queues.py reduction.py resource_sharer.py resource_tracker.py sharedctypes.py shared_memory.py spawn.py synchronize.py mp_fork_bomb.py mp_preload.py test_multiprocessing_fork.py test_multiprocessing_forkserver.py test_multiprocessing_main_handling.py test_multiprocessing_spawn.py __init__.py __main__.py util.py __init__.py README_MODS __init__.py CHANGES.html connection-objects.html connection-objects.txt connection-ref.html connection-ref.txt COPYING.html header.txt html4css1.css index.html index.txt INSTALL.html intro.html intro.txt manager-objects.html manager-objects.txt pool-objects.html pool-objects.txt process-objects.html process-objects.txt processing-ref.html processing-ref.txt programming-guidelines.html programming-guidelines.txt proxy-objects.html proxy-objects.txt queue-objects.html queue-objects.txt sharedctypes.html sharedctypes.txt tests.html tests.txt THANKS.html version.txt __init__.py benchmarks.py ex_newtype.py ex_pool.py ex_synchronize.py ex_webserver.py ex_workers.py FAILS.txt __init__.py index.html interp_memory.py interp_semaphore.py interp_win32_py3.py moduledef.py test_interp_semaphore.py test_semaphore.py test_win32.py test_ztranslation.py __init__.py __init__.py connection.py context.py connection.py __init__.py forkserver.py heap.py managers.py pool.py popen_fork.py popen_forkserver.py popen_spawn_posix.py popen_spawn_win32.py process.py queues.py reduction.py resource_sharer.py resource_tracker.py sharedctypes.py shared_memory.py spawn.py synchronize.py mp_fork_bomb.py mp_preload.py test_multiprocessing_fork.py test_multiprocessing_forkserver.py test_multiprocessing_main_handling.py test_multiprocessing_spawn.py __init__.py __main__.py util.py __init__.py README_MODS __init__.py README.md setup.cfg setup.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\n#\n# Author: Mike McKerns (mmckerns @caltech and @uqfoundation)\n# Copyright (c) 2008-2016 California Institute of Technology.\n# Copyright (c) 2016-2022 The Uncertainty Quantification Foundation.\n# License: 3-clause BSD. The full license text is available at:\n# - https:\/\/github.com\/uqfoundation\/multiprocess\/blob\/master\/LICENSE\n#\n# original code modified from processing\/setup.py\n# original: Copyright (c) 2006-2008, R Oudkerk\n# original: Licence 3-clause BSD. The full license text is available at:\n# - https:\/\/github.com\/uqfoundation\/multiprocess\/blob\/master\/COPYING.txt\n\nimport re\nimport os\nimport sys\nimport glob\n# drop support for older python\nunsupported = None\nif sys.version_info < (2, 7):\nunsupported = 'Versions of Python before 2.7 are not supported'\nelif (3, 0) <= sys.version_info < (3, 7):\nunsupported = 'Versions of Python before 3.7 are not supported'\nif unsupported:\nraise ValueError(unsupported)\n\nis_jython = sys.platform.startswith('java')\nis_pypy = hasattr(sys, 'pypy_version_info')\nis_py3k = sys.version_info[0] == 3\nlt_py33 = sys.version_info < (3, 3)\n\n# the code is version-specific, so get the appropriate root directory\nroot = 'pypy' if is_pypy else 'py'\npymajor,pyminor = sys.version_info[:2]\npkgdir = '%s%s.%s' % (root,pymajor,pyminor)\npkgname = 'multiprocess'\n# if sys.version is higher than explicitly supported, try the latest version\nHERE = os.path.dirname(os.path.abspath(__file__))\nwhile not os.path.exists(os.path.join(HERE,'%s%s.%s' % (root,pymajor,pyminor))):\npyminor -= 1\nif pyminor < 0:\nunsupported = 'Python %s is not supported' % pkgdir[len(root):]\nraise ValueError(unsupported)\nif '%s%s.%s' % (root,pymajor,pyminor) != pkgdir:\nmsg = 'Warning: Python %s is not currently supported, reverting to %s.%s'\nprint(msg % (pkgdir[len(root):],pymajor,pyminor))\npkgdir = '%s%s.%s' % (root,pymajor,pyminor)\nsrcdir = '%s\/Modules\/_%s' % (pkgdir, pkgname)\nlibdir = '%s\/%s' % (pkgdir, pkgname)\n\n# -*- Distribution Meta -*-\nhere = os.path.abspath(os.path.dirname(__file__))\nmeta_fh = open(os.path.join(here, '%s\/__init__.py' % libdir))\ntry:\nmeta = {}\nfor line in meta_fh:\nif line.startswith('__version__'):\nVERSION = line.split()[-1].strip(\"'\").strip('\"')\nbreak\nmeta['VERSION'] = VERSION\nfor line in meta_fh:\nif line.startswith('__author__'):\nAUTHOR = line.split(' = ')[-1].strip().strip(\"'\").strip('\"')\nbreak\nmeta['AUTHOR'] = AUTHOR\nLONG_DOC = \"\"\nDOC_STOP = \"FAKE_STOP_12345\"\nfor line in meta_fh:\nif LONG_DOC:\nif line.startswith(DOC_STOP):\nLONG_DOC = LONG_DOC.strip().strip(\"'\").strip('\"').lstrip()\nbreak\nelse:\nLONG_DOC += line\nelif line.startswith('__doc__'):\nDOC_STOP = line.split(' = ')[-1]\nLONG_DOC = \"\\n\"\nmeta['LONG_DOC'] = LONG_DOC\nfinally:\nmeta_fh.close()\n\n# get version numbers, long_description, etc\nAUTHOR = meta['AUTHOR']\nVERSION = meta['VERSION']\nLONG_DOC = meta['LONG_DOC'] #FIXME: near-duplicate of README.md\n#LICENSE = meta['LICENSE'] #FIXME: duplicate of LICENSE\nAUTHOR_EMAIL = 'mmckerns@uqfoundation.org'\n\n# check if setuptools is available\ntry:\nfrom setuptools import setup, Extension, find_packages\nfrom setuptools.dist import Distribution\nhas_setuptools = True\nexcept ImportError:\nfrom distutils.core import setup, Extension # noqa\nDistribution = object\nfind_packages = lambda **kwds: [pkgname, pkgname+'.dummy', pkgname+'.tests']\nhas_setuptools = False\nfrom distutils import sysconfig\nfrom distutils.errors import CCompilerError, DistutilsExecError, \\\nDistutilsPlatformError\n\next_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError)\nif sys.platform == 'win32' and sys.version_info >= (2, 6):\n# distutils.msvc9compiler can raise IOError if the compiler is missing\next_errors += (IOError, )\n\nBUILD_WARNING = \"\"\"\n\n-----------------------------------------------------------------------\nWARNING: The C extensions could not be compiled\n-----------------------------------------------------------------------\n\nMaybe you do not have a C compiler installed on this system?\nThe reason was:\n%s\n\nThis is just a warning as most of the functionality will work even\nwithout the updated C extension. It will simply fallback to the\nbuilt-in _multiprocessing module. Most notably you will not be able to use\nFORCE_EXECV on POSIX systems. If this is a problem for you then please\ninstall a C compiler or fix the error(s) above.\n-----------------------------------------------------------------------\n\n\"\"\"\n#\n# Macros and libraries\n#\n# The `macros` dict determines the macros that will be defined when\n# the C extension is compiled. Each value should be either 0 or 1.\n# (An undefined macro is assumed to have value 0.) `macros` is only\n# used on Unix platforms.\n#\n# The `libraries` dict determines the libraries to which the C\n# extension will be linked. This should probably be either `['rt']`\n# if you need `librt` or else `[]`.\n#\n# Meaning of macros\n#\n# HAVE_SEM_OPEN\n# Set this to 1 if you have `sem_open()`. This enables the use of\n# posix named semaphores which are necessary for the\n# implementation of the synchronization primitives on Unix. If\n# set to 0 then the only way to create synchronization primitives\n# will be via a manager (e.g. \"m = Manager(); lock = m.Lock()\").\n# \n# HAVE_SEM_TIMEDWAIT\n# Set this to 1 if you have `sem_timedwait()`. Otherwise polling\n# will be necessary when waiting on a semaphore using a timeout.\n# \n# HAVE_FD_TRANSFER\n# Set this to 1 to compile functions for transferring file\n# descriptors between processes over an AF_UNIX socket using a\n# control message with type SCM_RIGHTS. On Unix the pickling of \n# of socket and connection objects depends on this feature.\n#\n# If you get errors about missing CMSG_* macros then you should\n# set this to 0.\n# \n# HAVE_BROKEN_SEM_GETVALUE\n# Set to 1 if `sem_getvalue()` does not work or is unavailable.\n# On Mac OSX it seems to return -1 with message \"[Errno 78]\n# Function not implemented\".\n#\n# HAVE_BROKEN_SEM_UNLINK\n# Set to 1 if `sem_unlink()` is unnecessary. For some reason this\n# seems to be the case on Cygwin where `sem_unlink()` is missing\n# from semaphore.h.\n#\n\nif sys.platform == 'win32': # Windows\nmacros = dict()\nlibraries = ['ws2_32']\nelif sys.platform.startswith('darwin'): # Mac OSX\nmacros = dict(\nHAVE_SEM_OPEN=1,\nHAVE_SEM_TIMEDWAIT=0,\nHAVE_FD_TRANSFER=1,\nHAVE_BROKEN_SEM_GETVALUE=1\n)\nlibraries = []\nelif sys.platform.startswith('cygwin'): # Cygwin\nmacros = dict(\nHAVE_SEM_OPEN=1,\nHAVE_SEM_TIMEDWAIT=1,\nHAVE_FD_TRANSFER=0,\nHAVE_BROKEN_SEM_UNLINK=1\n)\nlibraries = []\nelif sys.platform in ('freebsd4', 'freebsd5', 'freebsd6'):\n# FreeBSD's P1003.1b semaphore support is very experimental\n# and has many known problems. (as of June 2008)\nmacros = dict( # FreeBSD 4-6\nHAVE_SEM_OPEN=0,\nHAVE_SEM_TIMEDWAIT=0,\nHAVE_FD_TRANSFER=1,\n)\nlibraries = []\nelif re.match('^(gnukfreebsd(8|9|10|11)|freebsd(7|8|9|10))', sys.platform):\nmacros = dict( # FreeBSD 7+ and GNU\/kFreeBSD 8+\nHAVE_SEM_OPEN=bool(\nsysconfig.get_config_var('HAVE_SEM_OPEN') and not\nbool(sysconfig.get_config_var('POSIX_SEMAPHORES_NOT_ENABLED'))\n),\nHAVE_SEM_TIMEDWAIT=1,\nHAVE_FD_TRANSFER=1,\n)\nlibraries = []\nelif sys.platform.startswith('openbsd'):\nmacros = dict( # OpenBSD\nHAVE_SEM_OPEN=0, # Not implemented\nHAVE_SEM_TIMEDWAIT=0,\nHAVE_FD_TRANSFER=1,\n)\nlibraries = []\nelse: # Linux and other unices\nmacros = dict(\nHAVE_SEM_OPEN=1,\nHAVE_SEM_TIMEDWAIT=1,\nHAVE_FD_TRANSFER=1,\n)\nlibraries = ['rt']\n\nif sys.platform == 'win32':\nmultiprocessing_srcs = [\n'%s\/%s.c' % (srcdir, pkgname),\n'%s\/semaphore.c' % srcdir,\n]\nif lt_py33:\nmultiprocessing_srcs += [\n'%s\/pipe_connection.c' % srcdir,\n'%s\/socket_connection.c' % srcdir,\n'%s\/win32_functions.c' % srcdir,\n]\nelse:\nmultiprocessing_srcs = [ '%s\/%s.c' % (srcdir, pkgname) ]\nif lt_py33:\nmultiprocessing_srcs.append('%s\/socket_connection.c' % srcdir)\n\nif macros.get('HAVE_SEM_OPEN', False):\nmultiprocessing_srcs.append('%s\/semaphore.c' % srcdir)\n\n#meta['long_doc'] = open(os.path.join(HERE, 'README.md')).read()\n#if not is_py3k:\n# meta['long_doc'] = meta['long_doc'].encode('ascii', 'replace')\n\n# -*- Installation -*-\ndef _is_build_command(argv=sys.argv, cmds=('install', 'build', 'bdist')):\nfor arg in argv:\nif arg.startswith(cmds):\nreturn arg\n\n# force python-, abi-, and platform-specific naming of bdist_wheel\nclass BinaryDistribution(Distribution):\n\"\"\"Distribution which forces a binary package with platform name\"\"\"\ndef has_ext_modules(foo):\nreturn True\n\n# define dependencies\ndill_version = 'dill>=0.3.5.1'\n\ndef run_setup(with_extensions=True):\nextensions = []\nif with_extensions:\nextensions = [\nExtension(\n'_%s' % pkgname,\nsources=multiprocessing_srcs,\ndefine_macros=list(macros.items()),\nlibraries=libraries,\ninclude_dirs=[srcdir],\ndepends=glob.glob('%s\/*.h' % srcdir) + ['setup.py'],\n),\n]\npackages = find_packages(\nwhere=pkgdir,\nexclude=['ez_setup', 'examples', 'doc',],\n)\n# build the 'setup' call\nsetup_kwds = dict(\nname='multiprocess',\nversion=VERSION,\ndescription=('better multiprocessing and multithreading in python'),\nlong_description=LONG_DOC,\nauthor=AUTHOR,\nauthor_email=AUTHOR_EMAIL,\nmaintainer=AUTHOR,\nmaintainer_email=AUTHOR_EMAIL,\nlicense='3-clause BSD',\nplatforms = ['Linux', 'Windows', 'Mac'],\nurl='https:\/\/github.com\/uqfoundation\/multiprocess',\ndownload_url = 'https:\/\/pypi.org\/project\/multiprocess\/#files',\nproject_urls = {\n'Documentation':'http:\/\/multiprocess.rtfd.io',\n'Source Code':'https:\/\/github.com\/uqfoundation\/multiprocess',\n'Bug Tracker':'https:\/\/github.com\/uqfoundation\/multiprocess\/issues',\n},\npython_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: BSD License',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Scientific\/Engineering',\n'Topic :: Software Development',\n],\npackages=packages,\npackage_dir={'': pkgdir},\next_modules=extensions,\n)\n# add dependencies\ndepend = [dill_version]\nextras = {'dill': [dill_version]}\n# update setup kwds\nif has_setuptools:\nsetup_kwds.update(\nzip_safe=False,\ndistclass=BinaryDistribution,\ninstall_requires=depend,\n# extras_require=extras,\n)\n# call setup\nsetup(**setup_kwds)\n\ntry:\nrun_setup(not (is_jython or is_pypy) and lt_py33)\nexcept BaseException:\nif _is_build_command(sys.argv): #XXX: skip WARNING if is_pypy?\nimport traceback\nmsg = BUILD_WARNING % '\\n'.join(traceback.format_stack())\nif not is_py3k:\nexec('print >> sys.stderr, msg')\nelse:\nexec('print(msg, file=sys.stderr)')\nrun_setup(False)\nelse:\nraise\n\n# if dependencies are missing, print a warning\ntry:\nimport dill\nexcept ImportError:\nprint(\"\\n***********************************************************\")\nprint(\"WARNING: One of the following dependencies is unresolved:\")\nprint(\" %s\" % dill_version)\nprint(\"***********************************************************\\n\")\n\n\nif __name__=='__main__':\npass\n\n# end of file\n"
    },
    {
        "package_name": "munkres-1.1.4",
        "file_list": "CHANGELOG.md LICENSE.md MANIFEST.in dependency_links.txt PKG-INFO SOURCES.txt top_level.txt munkres.py PKG-INFO README.md setup.cfg setup.py README.md test_munkres.py",
        "setup.py": "#!\/usr\/bin\/env python\n#\n# Distutils setup script for Munkres\n# ---------------------------------------------------------------------------\n\nfrom setuptools import setup\nimport re\nimport os\nimport sys\nfrom distutils.cmd import Command\nfrom abc import abstractmethod\n\nif sys.version_info[0:2] < (3, 5):\ncolumns = int(os.environ.get('COLUMNS', '80')) - 1\nmsg = ('As of version 1.1.0, this munkres package no longer supports ' +\n'Python 2. Either upgrade to Python 3.5 or better, or use an ' +\n'older version of munkres (e.g., 1.0.12).')\nsys.stderr.write(msg + '\\n')\nraise Exception(msg)\n\n# Load the module.\n\nhere = os.path.dirname(os.path.abspath(sys.argv[0]))\n\ndef import_from_file(file, name):\n# See https:\/\/stackoverflow.com\/a\/19011259\/53495\nimport importlib.machinery\nimport importlib.util\nloader = importlib.machinery.SourceFileLoader(name, file)\nspec = importlib.util.spec_from_loader(loader.name, loader)\nmod = importlib.util.module_from_spec(spec)\nloader.exec_module(mod)\nreturn mod\n\nmf = os.path.join(here, 'munkres.py')\nmunkres = import_from_file(mf, 'munkres')\nlong_description = munkres.__doc__\nversion = str(munkres.__version__)\n(author, email) = re.match('^(.*),\\s*(.*)$', munkres.__author__).groups()\nurl = munkres.__url__\nlicense = munkres.__license__\n\nAPI_DOCS_BUILD = 'apidocs'\n\nclass CommandHelper(Command):\nuser_options = []\n\ndef __init__(self, dist):\nCommand.__init__(self, dist)\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\n@abstractmethod\ndef run(self):\npass\n\nclass Doc(CommandHelper):\ndescription = 'create the API docs'\n\ndef run(self):\nos.environ['PYTHONPATH'] = '.'\ncmd = 'pdoc --html --html-dir {} --overwrite --html-no-source munkres'.format(\nAPI_DOCS_BUILD\n)\nprint('+ {}'.format(cmd))\nrc = os.system(cmd)\nif rc != 0:\nraise Exception(\"Failed to run pdoc. rc={}\".format(rc))\n\nclass Test(CommandHelper):\n\ndef run(self):\nimport pytest\nos.environ['PYTHONPATH'] = '.'\nrc = pytest.main(['-W', 'ignore', '-ra', '--cache-clear', 'test', '.'])\nif rc != 0:\nraise Exception('*** Tests failed.')\n\n# Run setup\n\nsetup(\nname=\"munkres\",\nversion=version,\ndescription=\"Munkres (Hungarian) algorithm for the Assignment Problem\",\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nurl=url,\nlicense=license,\nauthor=author,\nauthor_email=email,\npy_modules=[\"munkres\"],\ncmdclass = {\n'doc': Doc,\n'docs': Doc,\n'apidoc': Doc,\n'apidocs': Doc,\n'test': Test\n},\nclassifiers = [\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Topic :: Scientific\/Engineering :: Mathematics',\n'Topic :: Software Development :: Libraries :: Python Modules'\n]\n)\n"
    },
    {
        "package_name": "mypy-boto3-appconfig-1.24.36.post1",
        "file_list": "LICENSE client.py client.pyi literals.py literals.pyi py.typed type_defs.py type_defs.pyi version.py __init__.py __init__.pyi __main__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from os.path import abspath, dirname\n\nfrom setuptools import setup\n\nLONG_DESCRIPTION = open(dirname(abspath(__file__)) + \"\/README.md\", \"r\").read()\n\n\nsetup(\nname=\"mypy-boto3-appconfig\",\nversion=\"1.24.36.post1\",\npackages=[\"mypy_boto3_appconfig\"],\nurl=\"https:\/\/github.com\/youtype\/mypy_boto3_builder\",\nlicense=\"MIT License\",\nauthor=\"Vlad Emelianov\",\nauthor_email=\"vlad.emelianov.nz@gmail.com\",\ndescription=(\n\"Type annotations for boto3.AppConfig 1.24.36 service generated with mypy-boto3-builder\"\n\" 7.10.0\"\n),\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Environment :: Console\",\n\"License :: OSI Approved :: MIT License\",\n\"Natural Language :: English\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3.11\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Typing :: Typed\",\n],\nkeywords=\"boto3 appconfig type-annotations boto3-stubs mypy typeshed autocomplete\",\nlong_description=LONG_DESCRIPTION,\nlong_description_content_type=\"text\/markdown\",\npackage_data={\"\": [\"LICENSE\"], \"mypy_boto3_appconfig\": [\"py.typed\", \"*.pyi\"]},\npython_requires=\">=3.7\",\nproject_urls={\n\"Documentation\": \"https:\/\/youtype.github.io\/boto3_stubs_docs\/mypy_boto3_appconfig\/\",\n\"Source\": \"https:\/\/github.com\/youtype\/mypy_boto3_builder\",\n\"Tracker\": \"https:\/\/github.com\/youtype\/mypy_boto3_builder\/issues\",\n},\ninstall_requires=[\n\"typing-extensions>=4.1.0\",\n],\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "mypy-boto3-sagemaker-1.24.48",
        "file_list": "LICENSE client.py client.pyi literals.py literals.pyi paginator.py paginator.pyi py.typed type_defs.py type_defs.pyi version.py waiter.py waiter.pyi __init__.py __init__.pyi __main__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "\"\"\"\nSetup script for mypy-boto3-sagemaker.\n\"\"\"\nfrom os.path import abspath, dirname\n\nfrom setuptools import setup\n\nLONG_DESCRIPTION = open(dirname(abspath(__file__)) + \"\/README.md\", \"r\").read()\n\n\nsetup(\nname=\"mypy-boto3-sagemaker\",\nversion=\"1.24.48\",\npackages=[\"mypy_boto3_sagemaker\"],\nurl=\"https:\/\/github.com\/youtype\/mypy_boto3_builder\",\nlicense=\"MIT License\",\nauthor=\"Vlad Emelianov\",\nauthor_email=\"vlad.emelianov.nz@gmail.com\",\ndescription=(\n\"Type annotations for boto3.SageMaker 1.24.48 service generated with mypy-boto3-builder\"\n\" 7.11.6\"\n),\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Environment :: Console\",\n\"License :: OSI Approved :: MIT License\",\n\"Natural Language :: English\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3.11\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Typing :: Typed\",\n],\nkeywords=\"boto3 sagemaker type-annotations boto3-stubs mypy typeshed autocomplete\",\nlong_description=LONG_DESCRIPTION,\nlong_description_content_type=\"text\/markdown\",\npackage_data={\"\": [\"LICENSE\"], \"mypy_boto3_sagemaker\": [\"py.typed\", \"*.pyi\"]},\npython_requires=\">=3.7\",\nproject_urls={\n\"Documentation\": \"https:\/\/youtype.github.io\/boto3_stubs_docs\/mypy_boto3_sagemaker\/\",\n\"Source\": \"https:\/\/github.com\/youtype\/mypy_boto3_builder\",\n\"Tracker\": \"https:\/\/github.com\/youtype\/mypy_boto3_builder\/issues\",\n},\ninstall_requires=[\n\"typing-extensions>=4.1.0\",\n],\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "mypy-boto3-signer-1.24.36.post1",
        "file_list": "LICENSE client.py client.pyi literals.py literals.pyi paginator.py paginator.pyi py.typed type_defs.py type_defs.pyi version.py waiter.py waiter.pyi __init__.py __init__.pyi __main__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from os.path import abspath, dirname\n\nfrom setuptools import setup\n\nLONG_DESCRIPTION = open(dirname(abspath(__file__)) + \"\/README.md\", \"r\").read()\n\n\nsetup(\nname=\"mypy-boto3-signer\",\nversion=\"1.24.36.post1\",\npackages=[\"mypy_boto3_signer\"],\nurl=\"https:\/\/github.com\/youtype\/mypy_boto3_builder\",\nlicense=\"MIT License\",\nauthor=\"Vlad Emelianov\",\nauthor_email=\"vlad.emelianov.nz@gmail.com\",\ndescription=(\n\"Type annotations for boto3.signer 1.24.36 service generated with mypy-boto3-builder 7.10.0\"\n),\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Environment :: Console\",\n\"License :: OSI Approved :: MIT License\",\n\"Natural Language :: English\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3.11\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Typing :: Typed\",\n],\nkeywords=\"boto3 signer type-annotations boto3-stubs mypy typeshed autocomplete\",\nlong_description=LONG_DESCRIPTION,\nlong_description_content_type=\"text\/markdown\",\npackage_data={\"\": [\"LICENSE\"], \"mypy_boto3_signer\": [\"py.typed\", \"*.pyi\"]},\npython_requires=\">=3.7\",\nproject_urls={\n\"Documentation\": \"https:\/\/youtype.github.io\/boto3_stubs_docs\/mypy_boto3_signer\/\",\n\"Source\": \"https:\/\/github.com\/youtype\/mypy_boto3_builder\",\n\"Tracker\": \"https:\/\/github.com\/youtype\/mypy_boto3_builder\/issues\",\n},\ninstall_requires=[\n\"typing-extensions>=4.1.0\",\n],\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "mypy_extensions-0.4.3",
        "file_list": "LICENSE MANIFEST.in dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt mypy_extensions.py PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# NOTE: This package must support Python 2.7 in addition to Python 3.x\n\nfrom setuptools import setup\n\nversion = '0.4.3'\ndescription = 'Experimental type system extensions for programs checked with the mypy typechecker.'\nlong_description = '''\nMypy Extensions\n===============\n\nThe \"mypy_extensions\" module defines experimental extensions to the\nstandard \"typing\" module that are supported by the mypy typechecker.\n'''.lstrip()\n\nclassifiers = [\n'Development Status :: 2 - Pre-Alpha',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Topic :: Software Development',\n]\n\nsetup(\nname='mypy_extensions',\nversion=version,\ndescription=description,\nlong_description=long_description,\nauthor='The mypy developers',\nauthor_email='jukka.lehtosalo@iki.fi',\nurl='https:\/\/github.com\/python\/mypy_extensions',\nlicense='MIT License',\npy_modules=['mypy_extensions'],\nclassifiers=classifiers,\ninstall_requires=[\n'typing >= 3.5.3; python_version < \"3.5\"',\n],\n)\n"
    },
    {
        "package_name": "mysqlclient-2.1.1",
        "file_list": "conf.py FAQ.rst index.rst MySQLdb.constants.rst MySQLdb.rst user_guide.rst HISTORY.rst LICENSE MANIFEST.in metadata.cfg dependency_links.txt PKG-INFO SOURCES.txt top_level.txt connections.py CLIENT.py CR.py ER.py FIELD_TYPE.py FLAG.py __init__.py converters.py cursors.py release.py times.py _exceptions.py _mysql.c __init__.py PKG-INFO README.md setup.cfg setup.py setup_common.py setup_posix.py setup_windows.py site.cfg capabilities.py configdb.py dbapi20.py test_connection.py test_cursor.py test_MySQLdb_capabilities.py test_MySQLdb_dbapi20.py test_MySQLdb_nonstandard.py test_MySQLdb_times.py test__mysql.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport os\n\nimport setuptools\n\nif os.name == \"posix\":\nfrom setup_posix import get_config\nelse: # assume windows\nfrom setup_windows import get_config\n\nwith open(\"README.md\", encoding=\"utf-8\") as f:\nreadme = f.read()\n\nmetadata, options = get_config()\nmetadata[\"ext_modules\"] = [\nsetuptools.Extension(\"MySQLdb._mysql\", sources=[\"MySQLdb\/_mysql.c\"], **options)\n]\nmetadata[\"long_description\"] = readme\nmetadata[\"long_description_content_type\"] = \"text\/markdown\"\nmetadata[\"python_requires\"] = \">=3.5\"\nsetuptools.setup(**metadata)\n"
    },
    {
        "package_name": "names-0.3.0",
        "file_list": "AUTHORS.rst CHANGES.rst CONTRIBUTING.rst MANIFEST.in dist.all.last dist.female.first dist.male.first main.py __init__.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "import names\nfrom setuptools import setup, find_packages\n\n\nsetup(\nname=names.__title__,\nversion=names.__version__,\nauthor=names.__author__,\nurl=\"https:\/\/github.com\/treyhunner\/names\",\ndescription=\"Generate random names\",\nlong_description='\\n\\n'.join((\nopen('README.rst').read(),\nopen('CHANGES.rst').read(),\nopen('CONTRIBUTING.rst').read(),\n)),\nlicense=names.__license__,\npackages=find_packages(),\npackage_data={'names': ['dist.*']},\ninclude_package_data=True,\nentry_points={\n'console_scripts': [\n'names = names.main:main',\n],\n},\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Environment :: Console',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: Implementation :: PyPy',\n],\ntest_suite='test_names',\n)\n"
    },
    {
        "package_name": "natto-py-1.0.0",
        "file_list": "CHANGELOG LICENSE MANIFEST.in api.py binding.py dictionary.py environment.py mecab.py node.py option_parse.py support.py version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py test_binding.py test_dictionary.py test_environment.py test_mecab.py test_option_parse.py test_suite.py test_support.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\nimport codecs\nimport os\nimport sys\nfrom os import path\nfrom setuptools import setup\n\n\ninfo = path.join(path.abspath(os.getcwd()), 'natto', 'version.py')\nexec(open(info).read())\n\nwith codecs.open(path.join(os.getcwd(), 'README.rst'),\nencoding='utf-8') as f:\nLONG_DESC = f.read()\n\nsetup(\nname='natto-py',\n\nversion=__version__,\n\ndescription=('A Tasty Python Binding with MeCab'\n'(FFI-based, no SWIG or compiler necessary)'),\nlong_description=LONG_DESC,\nlong_description_content_type='text\/x-rst',\n\nurl='https:\/\/github.com\/buruzaemon\/natto-py',\n\nauthor='Brooke M. Fujita',\nauthor_email='buruzaemon@gmail.com',\n\nlicense='BSD',\n\nclassifiers=[\n# How mature is this project? Common values are\n# 3 - Alpha\n# 4 - Beta\n# 5 - Production\/Stable\n'Development Status :: 5 - Production\/Stable',\n\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Text Processing :: Linguistic',\n'Natural Language :: Japanese',\n\n'License :: OSI Approved :: BSD License',\n\n'Operating System :: POSIX :: BSD',\n'Operating System :: POSIX :: Linux',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: Microsoft :: Windows',\n\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n],\n\nkeywords=' '.join(['MeCab',\n'\u548c\u5e03\u856a',\n'\u7d0d\u8c46',\n'Japanese morphological analyzer',\n'NLP',\n'\u5f62\u614b\u7d20\u89e3\u6790',\n'\u81ea\u7136\u8a00\u8a9e\u51e6\u7406',\n'FFI',\n'binding',\n'\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0']),\n\npackages=['natto', 'tests'],\n\ninstall_requires=['cffi'],\n\nzip_safe=False,\n\ntest_suite=\"tests.test_suite\",\n\n)\n"
    },
    {
        "package_name": "nbclient-0.6.6",
        "file_list": ".pre-commit-config.yaml CHANGELOG.md CONTRIBUTING.md autogen_config.py client.rst conf.py index.rst installation.rst make.bat Makefile index.rst modules.rst nbclient.rst nbclient.tests.rst requirements-doc.txt UPDATE.md custom.css LICENSE MANIFEST.in cli.py client.py exceptions.py jsonutil.py output_widget.py py.typed base.py conftest.py fake_kernelmanager.py Autokill.ipynb Check History in Memory.ipynb Clear Output.ipynb Disable Stdin.ipynb Empty Cell.ipynb Error.ipynb Factorials.ipynb HelloWorld.ipynb Inline Image.ipynb Interrupt.ipynb JupyterWidgets.ipynb Other Comms.ipynb Output.ipynb Parallel Execute A.ipynb Parallel Execute B.ipynb python.png Skip Exceptions with Cell Tags.ipynb Skip Exceptions.ipynb Skip Execution with Cell Tag.ipynb Sleep1s.ipynb SVG.ipynb Unicode.ipynb UnicodePy3.ipynb update-display-id.ipynb test_client.py test_util.py __init__.py util.py _version.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO pyproject.toml pytest.ini README.md RELEASING.md requirements-dev.txt requirements.txt setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nimport os\n\nfrom setuptools import setup\n\n# the name of the package\nname = 'nbclient'\n\nlocal_path = os.path.dirname(__file__)\nhere = os.path.abspath(local_path)\n\n\ndef read(path):\nwith open(path) as fhandle:\nreturn fhandle.read()\n\n\ndef read_reqs(fname):\nreq_path = os.path.join(here, fname)\nreturn [req.strip() for req in read(req_path).splitlines() if req.strip()]\n\n\nlong_description = read(os.path.join(os.path.dirname(__file__), \"README.md\"))\nrequirements = read(os.path.join(os.path.dirname(__file__), \"requirements.txt\"))\ndev_reqs = read_reqs(os.path.join(os.path.dirname(__file__), 'requirements-dev.txt'))\ndoc_reqs = read_reqs(os.path.join(os.path.dirname(__file__), 'docs\/requirements-doc.txt'))\nextras_require = {\"test\": dev_reqs, \"sphinx\": doc_reqs}\n\nsetup(\nname=name,\nauthor='Jupyter Development Team',\nauthor_email='jupyter@googlegroups.com',\nurl='https:\/\/jupyter.org',\ndescription=(\n\"A client library for executing notebooks. Formerly nbconvert's ExecutePreprocessor.\"\n),\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\npackages=['nbclient'],\ninclude_package_data=True,\npython_requires=\">=3.7.0\",\ninstall_requires=requirements,\nextras_require=extras_require,\nentry_points={\n'console_scripts': [\n'jupyter-execute = nbclient.cli:main',\n],\n},\nproject_urls={\n'Documentation': 'https:\/\/nbclient.readthedocs.io',\n'Funding': 'https:\/\/numfocus.org\/',\n'Source': 'https:\/\/github.com\/jupyter\/nbclient',\n'Tracker': 'https:\/\/github.com\/jupyter\/nbclient\/issues',\n},\nlicense='BSD',\nplatforms=\"Linux, Mac OS X, Windows\",\nkeywords=['jupyter', 'pipeline', 'notebook', 'executor'],\nclassifiers=[\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: BSD License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n],\n)\n"
    },
    {
        "package_name": "nbformat-5.4.0",
        "file_list": ".bumpversion.cfg .mailmap CONTRIBUTING.md COPYING.md api.rst changelog.rst conf.py format_description.rst index.rst make.bat Makefile markup.rst requirements.txt index.js MANIFEST.in converter.py test_words.py __init__.py words.py __init__.py current.py json_compat.py notebooknode.py py.typed reader.py sentinel.py sign.py convert.py nbbase.py nbjson.py rwbase.py __init__.py convert.py nbbase.py nbjson.py nbpy.py nbxml.py rwbase.py __init__.py convert.py nbbase.py nbformat.v3.schema.json nbjson.py nbpy.py rwbase.py __init__.py convert.py nbbase.py nbformat.v4.0.schema.json nbformat.v4.1.schema.json nbformat.v4.2.schema.json nbformat.v4.3.schema.json nbformat.v4.4.schema.json nbformat.v4.5.schema.json nbformat.v4.schema.json nbjson.py rwbase.py __init__.py validator.py _imports.py _struct.py _version.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt package.json PKG-INFO pyproject.toml README.md RELEASING.md setup.cfg setup.py base.py invalid.ipynb invalid_cell_id.ipynb invalid_unique_cell_id.ipynb many_tracebacks.ipynb no_min_version.ipynb test2.ipynb test3.ipynb test3_no_metadata.ipynb test3_no_worksheets.ipynb test3_worksheet_with_no_cells.ipynb test4.ipynb test4custom.ipynb test4docinfo.ipynb test4jupyter_metadata.ipynb test4jupyter_metadata_timings.ipynb test4plus.ipynb test_api.py test_convert.py test_nbformat.py test_reader.py test_sign.py test_validator.py nbexamples.py test_json.py test_nbbase.py __init__.py nbexamples.py test_json.py test_nbbase.py test_nbpy.py __init__.py formattest.py nbexamples.py test_json.py test_misc.py test_nbbase.py test_nbpy.py __init__.py formattest.py nbexamples.py test_convert.py test_json.py test_nbbase.py test_validate.py __init__.py v4_5_invalid_metadata.ipynb v4_5_no_cell_id.ipynb __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n\n\nimport os\nimport subprocess\nimport sys\nfrom glob import glob\nfrom typing import Any, Dict\n\n# the name of the project\nname = \"nbformat\"\n\nfrom setuptools import setup # type:ignore[import]\n\npjoin = os.path.join\nhere = os.path.abspath(os.path.dirname(__file__))\npkg_root = pjoin(here, name)\n\npackages = []\nfor d, _, _ in os.walk(pjoin(here, name)):\nif os.path.exists(pjoin(d, \"__init__.py\")):\npackages.append(d[len(here) + 1 :].replace(os.path.sep, \".\"))\n\npackage_data = {\n\"nbformat.v3\": [\n\"nbformat.v3*.schema.json\",\n],\n\"nbformat.v4\": [\n\"nbformat.v4*.schema.json\",\n],\n\"nbformat\": [\"py.typed\"],\n}\n\nversion_ns: Dict[str, Any] = {}\nwith open(pjoin(here, name, \"_version.py\")) as f:\nexec(f.read(), {}, version_ns)\n\n\nsetup_args = dict(\nname=name,\nversion=version_ns[\"__version__\"],\nscripts=glob(pjoin(\"scripts\", \"*\")),\npackages=packages,\npackage_data=package_data,\ninclude_package_data=True,\ndescription=\"The Jupyter Notebook format\",\nlong_description=\"\"\"\nThis package contains the base implementation of the Jupyter Notebook format,\nand Python APIs for working with notebooks.\n\"\"\",\nauthor=\"Jupyter Development Team\",\nauthor_email=\"jupyter@googlegroups.com\",\nurl=\"http:\/\/jupyter.org\",\nlicense=\"BSD\",\npython_requires=\">=3.7\",\nplatforms=\"Linux, Mac OS X, Windows\",\nkeywords=[\"Interactive\", \"Interpreter\", \"Shell\", \"Web\"],\nproject_urls={\n\"Documentation\": \"http:\/\/nbformat.readthedocs.io\/\",\n\"Funding\": \"https:\/\/numfocus.org\/donate-to-jupyter\",\n\"Source\": \"https:\/\/github.com\/jupyter\/nbformat\",\n\"Tracker\": \"https:\/\/github.com\/jupyter\/nbformat\/issues\",\n},\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"Intended Audience :: System Administrators\",\n\"Intended Audience :: Science\/Research\",\n\"License :: OSI Approved :: BSD License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\n)\n\nif \"develop\" in sys.argv or any(a.startswith(\"bdist\") for a in sys.argv):\nsubprocess.run([sys.executable, \"-m\", \"pre_commit\", \"install\"])\nsubprocess.run([sys.executable, \"-m\", \"pre_commit\", \"install\", \"--hook-type\", \"pre-push\"])\n\nsetuptools_args: Dict[str, Any] = {}\ninstall_requires = setuptools_args[\"install_requires\"] = [\n\"traitlets>=5.1\",\n\"jsonschema>=2.6\",\n\"jupyter_core\",\n\"fastjsonschema\",\n]\n\nextras_require = setuptools_args[\"extras_require\"] = {\n\"test\": [\"check-manifest\", \"testpath\", \"pytest\", \"pre-commit\"],\n}\n\nif \"setuptools\" in sys.modules:\nsetup_args.update(setuptools_args)\nsetup_args[\"entry_points\"] = {\n\"console_scripts\": [\n\"jupyter-trust = nbformat.sign:TrustNotebookApp.launch_instance\",\n]\n}\nsetup_args.pop(\"scripts\", None)\n\nif __name__ == \"__main__\":\nsetup(**setup_args)\n"
    },
    {
        "package_name": "netaddr-0.8.0",
        "file_list": "AUTHORS CHANGELOG COPYRIGHT api.rst authors.rst changes.rst conf.py contributors.rst copyright.rst index.rst installation.rst introduction.rst license.rst references.rst tutorial_01.rst tutorial_02.rst tutorial_03.rst LICENSE Makefile MANIFEST.in cli.py compat.py subnet_splitter.py __init__.py core.py iab.idx iab.txt ieee.py oui.idx oui.txt __init__.py fbsocket.py glob.py iana.py ipv4-address-space.xml ipv6-address-space.xml ipv6-unicast-address-assignments.xml multicast-addresses.xml nmap.py rfc1924.py sets.py __init__.py eui48.py eui64.py ipv4.py ipv6.py __init__.py test_compat.py test_pubsub.py __init__.py sample_iab.txt sample_oui.txt test_eui.py test_ieee_parsers.py __init__.py test_cidr_v4.py test_cidr_v6.py test_dns.py test_ip.py test_ip_categories.py test_ip_comparisons.py test_ip_globs.py test_ip_ranges.py test_ip_rfc1924.py test_ip_sets.py test_ip_splitter.py test_ip_v4.py test_ip_v4_v6_conversions.py test_ip_v6.py test_network_ops.py test_nmap.py test_old_specs.py test_platform_osx.py test_socket_module_fallback.py __init__.py test_eui48_strategy.py test_ipv4_strategy.py test_ipv6_strategy.py __init__.py __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst REFERENCES setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# Copyright (c) 2008 by David P. D. Moss. All rights reserved.\n#\n# Released under the BSD license. See the LICENSE file for details.\n\"\"\"\nA distutils Python setup file. For setuptools support see setup_egg.py.\n\"\"\"\nimport os\nimport sys\n\nfrom setuptools import setup\n\nif os.path.exists('MANIFEST'):\nos.remove('MANIFEST')\n\nkeywords = [\n'Networking', 'Systems Administration', 'IANA', 'IEEE', 'CIDR', 'IP',\n'IPv4', 'IPv6', 'CIDR', 'EUI', 'MAC', 'MAC-48', 'EUI-48', 'EUI-64'\n]\n\n# Required by distutils only.\npackages = [\n'netaddr',\n'netaddr.ip',\n'netaddr.eui',\n'netaddr.strategy',\n'netaddr.contrib',\n]\n\n# Required by distutils only.\npackage_data = {\n'netaddr.ip': [\n'*.xml',\n],\n'netaddr.eui': [\n'*.txt',\n'*.idx'\n],\n}\n\nwith open('README.rst') as f:\nlong_description = f.read()\n\nplatforms = 'OS Independent'\n\nclassifiers = [\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'Intended Audience :: Education',\n'Intended Audience :: Information Technology',\n'Intended Audience :: Science\/Research',\n'Intended Audience :: System Administrators',\n'Intended Audience :: Telecommunications Industry',\n'License :: OSI Approved :: BSD License',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Topic :: Communications',\n'Topic :: Documentation',\n'Topic :: Education',\n'Topic :: Education :: Testing',\n'Topic :: Home Automation',\n'Topic :: Internet',\n'Topic :: Internet :: Log Analysis',\n'Topic :: Internet :: Name Service (DNS)',\n'Topic :: Internet :: Proxy Servers',\n'Topic :: Internet :: WWW\/HTTP',\n'Topic :: Internet :: WWW\/HTTP :: Indexing\/Search',\n'Topic :: Internet :: WWW\/HTTP :: Site Management',\n'Topic :: Security',\n'Topic :: Software Development',\n'Topic :: Software Development :: Libraries',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Software Development :: Quality Assurance',\n'Topic :: Software Development :: Testing',\n'Topic :: Software Development :: Testing :: Traffic Generation',\n'Topic :: System :: Benchmark',\n'Topic :: System :: Clustering',\n'Topic :: System :: Distributed Computing',\n'Topic :: System :: Installation\/Setup',\n'Topic :: System :: Logging',\n'Topic :: System :: Monitoring',\n'Topic :: System :: Networking',\n'Topic :: System :: Networking :: Firewalls',\n'Topic :: System :: Networking :: Monitoring',\n'Topic :: System :: Networking :: Time Synchronization',\n'Topic :: System :: Recovery Tools',\n'Topic :: System :: Shells',\n'Topic :: System :: Software Distribution',\n'Topic :: System :: Systems Administration',\n'Topic :: System :: System Shells',\n'Topic :: Text Processing',\n'Topic :: Text Processing :: Filters',\n'Topic :: Utilities',\n]\n\n\ndef main():\nif sys.version_info[:2] < (2, 5):\nsys.stderr.write(\"netaddr requires Python version 2.5 or higher.\\n\")\nsys.exit(1)\n\nif sys.argv[-1] == 'setup.py':\nsys.stdout.write(\"To install, run 'python setup.py install'\\n\\n\")\n\nsetup_options = dict(\nauthor='David P. D. Moss, Stefan Nordhausen et al',\nauthor_email='drkjam@gmail.com',\nclassifiers=classifiers,\ndescription='A network address manipulation library for Python',\ndownload_url='https:\/\/pypi.org\/project\/netaddr\/',\nkeywords=keywords,\nlicense='BSD License',\nlong_description=long_description,\nname='netaddr',\npackage_data=package_data,\npackages=packages,\nplatforms=platforms,\nentry_points={'console_scripts': ['netaddr = netaddr.cli:main']},\nurl='https:\/\/github.com\/drkjam\/netaddr\/',\nversion=(\n[\nln for ln in open(os.path.join(os.path.dirname(__file__), 'netaddr', '__init__.py'))\nif '__version__' in ln\n][0]\n.split('=')[-1]\n.strip()\n.strip('\\'\"')\n),\ninstall_requires=['importlib-resources;python_version<\"3.7\"'],\n)\n\nsetup(**setup_options)\n\nif __name__ == \"__main__\":\nmain()\n"
    },
    {
        "package_name": "netsuitesdk-2.13.0",
        "file_list": "LICENSE accounts.py adv_inter_company_journal_entries.py base.py billing_account.py classifications.py credit_memos.py currencies.py customers.py custom_lists.py custom_records.py custom_record_types.py custom_segments.py departments.py employees.py expense_categories.py expense_reports.py files.py folders.py invoices.py journal_entries.py locations.py projects.py subsidiaries.py tax_groups.py tax_items.py terms.py usage.py vendors.py vendor_bills.py vendor_credits.py vendor_payments.py __init__.py connection.py client.py constants.py exceptions.py netsuite_types.py utils.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import setuptools\n\nwith open('README.md', 'r') as f:\nlong_description = f.read()\n\nsetuptools.setup(\nname='netsuitesdk',\nversion='2.13.0',\nauthor='Siva Narayanan',\nauthor_email='siva@fyle.in',\ndescription='Python SDK for accessing the NetSuite SOAP webservice',\nlicense='MIT',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nkeywords=['netsuite', 'api', 'python', 'sdk'],\nurl='https:\/\/github.com\/fylein\/netsuite-sdk-py',\npackages=setuptools.find_packages(),\ninstall_requires=['zeep'],\nclassifiers=[\n'Topic :: Internet :: WWW\/HTTP',\n'Intended Audience :: Developers',\n'Programming Language :: Python :: 3',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n]\n)\n"
    },
    {
        "package_name": "nflx-genie-client-3.6.16",
        "file_list": "CHANGES.txt DESCRIPTION.rst LICENSE.txt MANIFEST.in dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO adapter.py genie_2.py genie_3.py genie_x.py __init__.py auth.py client.py conf.py exceptions.py core.py hadoop.py hive.py pig.py presto.py running.py sqoop.py utils.py __init__.py utils.py __init__.py README.md setup.cfg setup.py",
        "setup.py": "\"\"\"\nCopyright 2015 Netflix, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\n# Always prefer setuptools over distutils\nfrom setuptools import setup, find_packages\nfrom codecs import open # To use a consistent encoding\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the relevant file\nwith open(path.join(here, 'DESCRIPTION.rst'), encoding='utf-8') as f:\nlong_description = f.read()\n\nsetup(\nname='nflx-genie-client',\nversioning='devcommit',\nauthor='Netflix Inc.',\nauthor_email='genieoss@googlegroups.com',\nkeywords='genie hadoop cloud netflix client bigdata presto',\npackages=['pygenie',\n'pygenie.adapter',\n'pygenie.jobs'],\npackage_data={\n'pygenie': ['genie.ini']\n},\nscripts=[],\nurl='http:\/\/netflix.github.io\/genie\/',\nlicense='Apache 2.0',\ndescription='Genie Python Client.',\nlong_description=long_description,\ntest_suite='tests',\ninstall_requires=[\n\"decorator\",\n\"multipledispatch\",\n\"pyconfigurator\",\n\"python-dateutil >= 2.4\",\n\"requests\",\n\"six\"\n],\nsetup_requires=['setupmeta'],\n# See https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\nclassifiers=[\n# How mature is this project? Common values are\n# 3 - Alpha\n# 4 - Beta\n# 5 - Production\/Stable\n'Development Status :: 5 - Production\/Stable',\n\n# Indicate who your project is intended for\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'Intended Audience :: System Administrators',\n'Topic :: Scientific\/Engineering',\n'Topic :: Software Development :: Libraries',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: System :: Distributed Computing',\n'Topic :: Utilities',\n\n\n# Pick your license as you wish (should match \"license\" above)\n'License :: OSI Approved :: Apache Software License',\n\n# Specify the Python versions you support here. In particular, ensure\n# that you indicate whether you support Python 2, Python 3 or both.\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n],\n)\n"
    },
    {
        "package_name": "ngboost-0.3.12",
        "file_list": "LICENSE api.py categorical.py cauchy.py distn.py exponential.py laplace.py lognormal.py multivariate_normal.py normal.py poisson.py t.py utils.py __init__.py evaluation.py helpers.py learners.py manifold.py ngboost.py scores.py __init__.py PKG-INFO pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['ngboost', 'ngboost.distns']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['lifelines>=0.25',\n'numpy>=1.17',\n'scikit-learn>=0.21',\n'scipy>=1.3',\n'tqdm>=4.3']\n\nsetup_kwargs = {\n'name': 'ngboost',\n'version': '0.3.12',\n'description': 'Library for probabilistic predictions via gradient boosting.',\n'long_description': '# NGBoost: Natural Gradient Boosting for Probabilistic Prediction\\n\\n![Python package](https:\/\/github.com\/stanfordmlgroup\/ngboost\/workflows\/Python%20package\/badge.svg)\\n[![Github License](https:\/\/img.shields.io\/badge\/License-Apache%202.0-blue.svg)](https:\/\/opensource.org\/licenses\/Apache-2.0)\\n[![Code style: black](https:\/\/img.shields.io\/badge\/code%20style-black-000000.svg)](https:\/\/github.com\/psf\/black)\\n\\nngboost is a Python library that implements Natural Gradient Boosting, as described in [\"NGBoost: Natural Gradient Boosting for Probabilistic Prediction\"](https:\/\/stanfordmlgroup.github.io\/projects\/ngboost\/). It is built on top of [Scikit-Learn](https:\/\/scikit-learn.org\/stable\/), and is designed to be scalable and modular with respect to choice of proper scoring rule, distribution, and base learner. A didactic introduction to the methodology underlying NGBoost is available in this [slide deck](https:\/\/drive.google.com\/file\/d\/183BWFAdFms81MKy6hSku8qI97OwS_JH_\/view?usp=sharing).\\n\\n## Installation\\n\\n```sh\\nvia pip\\n\\npip install --upgrade ngboost\\n\\nvia conda-forge\\n\\nconda install -c conda-forge ngboost\\n```\\n\\n## Usage\\n\\nProbabilistic regression example on the Boston housing dataset:\\n\\n```python\\nfrom ngboost import NGBRegressor\\n\\nfrom sklearn.datasets import load_boston\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.metrics import mean_squared_error\\n\\nX, Y = load_boston(True)\\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)\\n\\nngb = NGBRegressor().fit(X_train, Y_train)\\nY_preds = ngb.predict(X_test)\\nY_dists = ngb.pred_dist(X_test)\\n\\n# test Mean Squared Error\\ntest_MSE = mean_squared_error(Y_preds, Y_test)\\nprint(\\'Test MSE\\', test_MSE)\\n\\n# test Negative Log Likelihood\\ntest_NLL = -Y_dists.logpdf(Y_test).mean()\\nprint(\\'Test NLL\\', test_NLL)\\n```\\n\\nDetails on available distributions, scoring rules, learners, tuning, and model interpretation are available in our [user guide](https:\/\/stanfordmlgroup.github.io\/ngboost\/intro.html), which also includes numerous usage examples and information on how to add new distributions or scores to NGBoost.\\n\\n## License\\n\\n[Apache License 2.0](https:\/\/github.com\/stanfordmlgroup\/ngboost\/blob\/master\/LICENSE).\\n\\n## Reference\\n\\nTony Duan, Anand Avati, Daisy Yi Ding, Khanh K. Thai, Sanjay Basu, Andrew Y. Ng, Alejandro Schuler. 2019.\\nNGBoost: Natural Gradient Boosting for Probabilistic Prediction.\\n[arXiv](https:\/\/arxiv.org\/abs\/1910.03225)\\n',\n'author': 'Stanford ML Group',\n'author_email': 'avati@cs.stanford.edu',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/stanfordmlgroup\/ngboost',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "nteract-scrapbook-0.4.2",
        "file_list": ".bumpversion.cfg CHANGELOG.md CONTRIBUTING.md DEVELOPMENT_GUIDE.md conf.py deprecation-papermill.rst index.rst installation.rst make.bat Makefile models.rst modules.rst scrapbook.rst scrapbook.tests.rst requirements-doc.txt UPDATE.md usage-glue.rst usage-read-notebook.rst usage-read-notebooks.rst custom.css papermill.png scrapbook-logo.png navigation.html page.html relations.html LICENSE MANIFEST.in dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO pytest.ini README.md RELEASING.md requirements-dev.txt requirements.txt api.py encoders.py exceptions.py log.py models.py scrap.v1.json schemas.py scraps.py tiny.png result1.ipynb result2.ipynb record.ipynb result_no_exec.ipynb test_api.py test_encoders.py test_notebooks.py test_scrapbooks.py test_scraps.py test_utils.py __init__.py utils.py version.py __init__.py setup.cfg setup.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\nimport os\nimport sys\nfrom os import path\nfrom setuptools import setup\n\n\ndef read(fname):\nwith open(fname, \"r\") as fhandle:\nreturn fhandle.read()\n\n\nlocal_path = os.path.dirname(__file__)\n# Fix for tox which manipulates execution pathing\nif not local_path:\nlocal_path = \".\"\nhere = path.abspath(path.dirname(__file__))\n\n\ndef version():\nwith open(local_path + \"\/scrapbook\/version.py\", \"r\") as ver:\nfor line in ver.readlines():\nif line.startswith(\"version =\"):\nreturn line.split(\" = \")[-1].strip()[1:-1]\nraise ValueError(\"No version found in scrapbook\/version.py\")\n\n\ndef read_reqs(fname):\nreq_path = os.path.join(here, fname)\nreturn [req.strip() for req in read(req_path).splitlines() if req.strip()]\n\n\nreqs_s3 = [\"papermill[s3]\"]\nreqs_azure = [\"papermill[azure]\"]\nreqs_gcs = [\"papermill[gcs]\"]\nreqs_all = [\"papermill[all]\"]\nreqs_dev = read_reqs(\"requirements-dev.txt\")\nextras_require = {\n\"test\": reqs_dev,\n\"dev\": reqs_dev,\n\"all\": reqs_all,\n\"s3\": reqs_s3,\n\"azure\": reqs_azure,\n\"gcs\": reqs_gcs,\n}\n\n# Get the long description from the README file\nwith open(path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\nlong_description = f.read()\n\nsetup(\nname=\"nteract-scrapbook\",\nversion=version(),\ndescription=\"A library for recording and reading data in Jupyter and nteract Notebooks\",\nauthor=\"nteract contributors\",\nauthor_email=\"nteract@googlegroups.com\",\nlicense=\"BSD\",\nkeywords=[\"jupyter\", \"mapreduce\", \"nteract\", \"pipeline\", \"notebook\"],\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/nteract\/scrapbook\",\npackages=[\"scrapbook\"],\npython_requires='>=3.5',\ninclude_package_data=True,\ninstall_requires=read_reqs(\"requirements.txt\"),\nextras_require=extras_require,\nproject_urls={\n\"Documentation\": \"https:\/\/nteract-scrapbook.readthedocs.io\",\n\"Funding\": \"https:\/\/nteract.io\",\n\"Source\": \"https:\/\/github.com\/nteract\/scrapbook\/\",\n\"Tracker\": \"https:\/\/github.com\/nteract\/scrapbook\/issues\",\n},\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"Intended Audience :: System Administrators\",\n\"Intended Audience :: Science\/Research\",\n\"License :: OSI Approved :: BSD License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n],\n)\n"
    },
    {
        "package_name": "numba-0.56.0",
        "file_list": "numba CHANGE_LOG render.py gh-pages.py Makefile requirements.txt conf.py bindings.rst caching.rst cooperative_groups.rst cudapysupported.rst cuda_array_interface.rst cuda_ffi.rst device-functions.rst device-management.rst examples.rst external-memory.rst faq.rst fastmath.rst index.rst intrinsics.rst ipc.rst kernels.rst memory.rst overview.rst random.rst reduction.rst simulator.rst ufunc.rst host.rst index.rst kernel.rst libdevice.rst memory.rst types.rst architecture.rst caching.rst compiler_pass_example.py contributing.rst custom_pipeline.rst debugging.rst dispatching.rst environment.rst event_api.rst generators.rst hashing.rst index.rst inline_example.py inline_overload_example.py inlining.rst listings.rst literal.rst live_variable_analysis.rst llvm_timings.rst mission.rst numba-runtime.rst release.rst repomap.rst rewrites.rst stencil.rst target_extension.rst threading_implementation.rst entrypoints.rst high-level.rst index.rst interval-example.rst low-level.rst mynorm.py overloading-guide.rst template.py glossary.rst index.rst cfunc.rst extension-points.rst external-memory-management.rst index.rst integer-typing.rst jit-classes.rst np-where-override.py type-inference.rst typing_recursion.rst aot-compilation.rst deprecation.rst envvars.rst fpsemantics.rst index.rst jit-compilation.rst numpysupported.rst pysemantics.rst pysupported.rst types.rst utils.rst release-notes.rst 5minguide.rst cfunc.rst cli.rst examples.rst faq.rst generated-jit.rst index.rst installing.rst jit-module.rst jit.rst jitclass.rst overview.rst parallel.rst performance-tips.rst pycc.rst stencil.rst talks.rst threading-layer.rst troubleshoot.rst vectorize.rst withobjmode.rst ghfiles.py LICENSE MANIFEST.in capsulethunk.h cext.h dictobject.c dictobject.h listobject.c listobject.h utils.c __init__.py cloudpickle.py cloudpickle_fast.py compat.py __init__.py analysis.py pretty_annotate.py template.html type_annotations.py __init__.py base.py boxing.py bytecode.py byteflow.py caching.py callconv.py callwrapper.py ccallback.py cgutils.py codegen.py compiler.py compiler_lock.py compiler_machinery.py config.py consts.py controlflow.py cpu.py cpu_options.py dataflow.py manager.py models.py packer.py registry.py testing.py __init__.py debuginfo.py decorators.py descriptors.py dispatcher.py entrypoints.py environment.py errors.py event.py extending.py externals.py fastmathpass.py funcdesc.py generators.py imputils.py inline_closurecall.py interpreter.py intrinsics.py ir.py ir_utils.py itanium_mangler.py llvm_bindings.py lowering.py object_mode_passes.py optional.py options.py overload_glue.py postproc.py pylowering.py pythonapi.py registry.py removerefctpass.py retarget.py ir_print.py registry.py static_binop.py static_getitem.py static_raise.py __init__.py context.py nrt.c nrt.h nrt.py nrtdynmod.py nrtopt.py nrt_external.h _nrt_python.c _nrt_pythonmod.c __init__.py serialize.py sigutils.py ssa.py targetconfig.py target_extension.py tracing.py transforms.py castgraph.py rules.py test.cpp typeconv.cpp typeconv.hpp typeconv.py _typeconv.cpp __init__.py typed_passes.py typeinfer.py abstract.py common.py containers.py functions.py function_type.py iterators.py misc.py npytypes.py scalars.py __init__.py arraydecl.py asnumbatype.py bufproto.py builtins.py cffi_utils.py cmathdecl.py collections.py context.py ctypes_utils.py dictdecl.py enumdecl.py listdecl.py mathdecl.py npdatetime.py npydecl.py randomdecl.py setdecl.py templates.py typeof.py __init__.py bytes.py eh.py nrt.py refcount.py __init__.py untyped_passes.py utils.py withcontexts.py __init__.py builtins.py charseq.py cmathimpl.py enumimpl.py hashing.py heapq.py iterators.py listobj.py mathimpl.py numbers.py printimpl.py randomimpl.py rangeobj.py setobj.py slicing.py tupleobj.py unicode.py unicode_support.py numbers.py tuple.py __init__.py __init__.py api.py api_util.py args.py codegen.py compiler.py cudadecl.py devicearray.py devices.py driver.py drvapi.py enums.py error.py libs.py ndarray.py nvvm.py rtapi.py runtime.py _extras.c __init__.py cudaimpl.py cudamath.py cuda_paths.py decorators.py descriptor.py device_init.py dispatcher.py errors.py initialize.py intrinsic_wrapper.py reduction.py transpose.py __init__.py libdevice.py libdevicedecl.py libdevicefuncs.py libdeviceimpl.py mathimpl.py models.py nvvmutils.py printimpl.py random.py api.py compiler.py devicearray.py devices.py driver.py drvapi.py error.py libs.py nvvm.py runtime.py __init__.py kernel.py kernelapi.py reduction.py vector_types.py __init__.py simulator_init.py stubs.py target.py testing.py cuda_include.cu error.cu jitlink.cu jitlink.ptx warn.cu __init__.py test_array_attr.py test_context_stack.py test_cuda_array_slicing.py test_cuda_auto_context.py test_cuda_devicerecord.py test_cuda_driver.py test_cuda_libraries.py test_cuda_memory.py test_cuda_ndarray.py test_deallocations.py test_detect.py test_emm_plugins.py test_events.py test_host_alloc.py test_init.py test_inline_ptx.py test_ir_patch.py test_linker.py test_managed_alloc.py test_nvvm_driver.py test_pinned.py test_profiler.py test_ptds.py test_reset_device.py test_runtime.py test_select_device.py test_streams.py __init__.py cache_usecases.py cache_with_cpu_usecases.py extensions_usecases.py recursion_usecases.py test_alignment.py test_array.py test_array_args.py test_array_methods.py test_atomics.py test_blackscholes.py test_boolean.py test_caching.py test_casting.py test_compiler.py test_complex.py test_complex_kernel.py test_constmem.py test_const_string.py test_cooperative_groups.py test_cuda_array_interface.py test_cuda_jit_no_types.py test_datetime.py test_debug.py test_debuginfo.py test_device_func.py test_dispatcher.py test_enums.py test_errors.py test_exception.py test_extending.py test_fastmath.py test_forall.py test_freevar.py test_frexp_ldexp.py test_globals.py test_gufunc.py test_gufunc_scalar.py test_gufunc_scheduling.py test_idiv.py test_inspect.py test_intrinsics.py test_ipc.py test_iterators.py test_lang.py test_laplace.py test_libdevice.py test_lineinfo.py test_localmem.py test_mandel.py test_math.py test_matmul.py test_minmax.py test_montecarlo.py test_multigpu.py test_multiprocessing.py test_multithreads.py test_nondet.py test_operator.py test_optimization.py test_overload.py test_powi.py test_print.py test_py2_div_issue.py test_random.py test_record_dtype.py test_recursion.py test_reduction.py test_retrieve_autoconverted_arrays.py test_serialize.py test_slicing.py test_sm.py test_sm_creation.py test_sync.py test_transpose.py test_userexc.py test_vectorize.py test_vectorize_complex.py test_vectorize_decor.py test_vectorize_device.py test_vectorize_scalar_arg.py test_vector_type.py test_warning.py test_warp_ops.py __init__.py support.py test_cudasim_issues.py __init__.py functions.cu __init__.py test_cg.py test_cpu_gpu_compat.py test_ffi.py test_laplace.py test_matmul.py test_montecarlo.py test_random.py test_reduction.py test_sessionize.py test_vecadd.py __init__.py test_import.py test_library_lookup.py test_nvvm.py __init__.py __init__.py types.py vectorizers.py vector_types.py __init__.py function_type.py base.py boxing.py decorators.py overloads.py _box.c __init__.py structref.py __init__.py extending.py mathnames.h appdirs.py cffiimpl.py cmdlang.gdb dummyarray.py dump_style.py findlib.py firstlinefinder.py gdb_hook.py gdb_print_extension.py inspector.py __init__.py init_utils.py inspection.py literal.py llvm_pass_timings.py mergesort.py numba_entry.py numba_gdbinfo.py numba_sysinfo.py quicksort.py special.py timsort.py __init__.py mviewbuf.c arraymath.py arrayobj.py extensions.py linalg.py npdatetime.py npdatetime_helpers.py npyfuncs.py npyimpl.py numpy_support.py polynomial.py generator_core.py generator_methods.py __init__.py array_exprs.py decorators.py deviceufunc.py dufunc.py gufunc.py gufunc_scheduler.cpp gufunc_scheduler.h omppool.cpp parallel.py sigparse.py tbbpool.cpp ufuncbuilder.py workqueue.c workqueue.h wrappers.py _internal.c _internal.h _num_threads.c _ufunc.c __init__.py ufunc_db.py ndarray.py __init__.py __init__.py array_analysis.py parfor.py parfor_lowering.py parfor_lowering_utils.py __init__.py cc.py compiler.py decorators.py llvm_types.py modulemixin.c platform.py pycc __init__.py runtests.py generate_lower_listing.py __init__.py stencil.py stencilparfor.py __init__.py loader.py main.py notebook.py _runtests.py __init__.py __main__.py annotation_usecases.py cache_usecases.py cffi_usecases.py cfunc_cache_usecases.py cloudpickle_main_class.py compile_with_pycc.py complex_usecases.py ctypes_usecases.py test_examples.py test_jitclass.py test_literally_usage.py test_literal_container_usage.py test_llvm_pass_timings.py test_numpy_generators.py test_parallel_chunksize.py test_rec_array.py test_structref_usage.py test_typed_dict_usage.py test_typed_list_usage.py __init__.py dummy_module.py enum_usecases.py error_usecases.py test_array_arg.py test_basic.py test_break_on_symbol.py test_break_on_symbol_version.py test_conditional_breakpoint.py test_pretty_print.py __init__.py gdb_support.py inlining_usecases.py matmul_usecase.py cache_usecases.py test_caching.py test_dufunc.py test_errors.py test_gufunc.py test_parallel_env_variable.py test_parallel_low_work.py test_parallel_ufunc_issues.py test_ufunc.py test_ufuncbuilding.py test_vectorize_decor.py __init__.py orphaned_semaphore_usecase.py overload_usecases.py parfors_cache_usecases.py parfors_max_label_error.py pdlike_usecase.py source_module.py __init__.py setup_distutils.py setup_distutils_nested.py setup_setuptools.py setup_setuptools_nested.py source_module.py __init__.py recursion_usecases.py serialize_usecases.py support.py test_alignment.py test_analysis.py test_annotations.py test_api.py test_array_analysis.py test_array_attr.py test_array_constants.py test_array_exprs.py test_array_iterators.py test_array_manipulation.py test_array_methods.py test_array_reductions.py test_array_return.py test_asnumbatype.py test_auto_constants.py test_blackscholes.py test_boundscheck.py test_buffer_protocol.py test_builtins.py test_byteflow.py test_caching.py test_casting.py test_cffi.py test_cfunc.py test_cgutils.py test_chained_assign.py test_chrome_trace.py test_cli.py test_closure.py test_codegen.py test_compiler_flags.py test_compiler_lock.py test_compile_cache.py test_complex.py test_comprehension.py test_conditions_as_predicates.py test_config.py test_conversion.py test_copy_propagate.py test_ctypes.py test_dataflow.py test_datamodel.py test_debug.py test_debuginfo.py test_deprecations.py test_dictimpl.py test_dictobject.py test_dicts.py test_dispatcher.py test_dummyarray.py test_dyn_array.py test_dyn_func.py test_entrypoints.py test_enums.py test_errorhandling.py test_errormodels.py test_event.py test_exceptions.py test_extended_arg.py test_extending.py test_extending_types.py test_fancy_indexing.py test_fastmath.py test_firstlinefinder.py test_flow_control.py test_funcdesc.py test_function_type.py test_func_interface.py test_func_lifetime.py test_gdb_bindings.py test_gdb_dwarf.py test_generators.py test_gil.py test_globals.py test_hashing.py test_heapq.py test_help.py test_import.py test_indexing.py test_init_utils.py test_inlining.py test_interpreter.py test_interproc.py test_intwidth.py test_ir.py test_ir_inlining.py test_ir_utils.py test_itanium_mangler.py test_iteration.py test_jitclasses.py test_jitmethod.py test_jit_module.py test_linalg.py test_listimpl.py test_listobject.py test_lists.py test_literal_dispatch.py test_llvm_pass_timings.py test_llvm_version_check.py test_locals.py test_looplifting.py test_make_function_to_jit_function.py test_mandelbrot.py test_mangling.py test_map_filter_reduce.py test_mathlib.py test_maxmin.py test_mixed_tuple_unroller.py test_moved_modules.py test_multi3.py test_nan.py test_ndarray_subclasses.py test_nested_calls.py test_npdatetime.py test_np_functions.py test_np_randomgen.py test_nrt.py test_nrt_refct.py test_numberctor.py test_numbers.py test_numconv.py test_numpyadapt.py test_numpy_support.py test_num_threads.py test_objects.py test_object_mode.py test_obj_lifetime.py test_operators.py test_optional.py test_overlap.py test_parallel_backend.py test_parfors.py test_parfors_caching.py test_parfors_passes.py test_pipeline.py test_polynomial.py test_practical_lowering_issues.py test_print.py test_profiler.py test_pycc.py test_python_int.py test_random.py test_range.py test_recarray_usecases.py test_record_dtype.py test_recursion.py test_refop_pruning.py test_remove_dead.py test_retargeting.py test_return_values.py test_runtests.py test_serialize.py test_sets.py test_slices.py test_sort.py test_ssa.py test_stencils.py test_storeslice.py test_struct_ref.py test_support.py test_svml.py test_sysinfo.py test_sys_stdin_assignment.py test_target_extension.py test_target_overloadselector.py test_threadsafety.py test_tracing.py test_try_except.py test_tuples.py test_typeconv.py test_typedlist.py test_typedobjectutils.py test_typeguard.py test_typeinfer.py test_typenames.py test_typeof.py test_types.py test_typingerror.py test_ufuncs.py test_unicode.py test_unicode_array.py test_unicode_names.py test_unpack_sequence.py test_unpickle_without_module.py test_unsafe_intrinsics.py test_usecases.py test_vectorization.py test_vectorization_type_inference.py test_warnings.py test_withlifting.py test_wrapper.py threading_backend_usecases.py usecases.py __init__.py dictimpl.py dictobject.py listobject.py py.typed typeddict.py typedlist.py typedobjectutils.py __init__.py __init__.py _arraystruct.h _devicearray.cpp _devicearray.h _dispatcher.cpp _dynfunc.c _dynfuncmod.c _hashtable.c _hashtable.h _helperlib.c _helpermod.c _lapack.c _npymath_exports.c _numba_common.h _pymodule.h _random.c _typeof.c _typeof.h _unicodetype_db.h _version.py __init__.py __main__.py PKG-INFO README.rst runtests.py setup.py versioneer.py",
        "setup.py": "import os\nimport platform\nimport sys\nfrom distutils import sysconfig\nfrom distutils.command import build\nfrom distutils.command.build_ext import build_ext\nfrom distutils.spawn import spawn\n\nfrom setuptools import Extension, find_packages, setup\nimport versioneer\n\n_version_module = None\ntry:\nfrom packaging import version as _version_module\nexcept ImportError:\ntry:\nfrom setuptools._vendor.packaging import version as _version_module\nexcept ImportError:\npass\n\n\nmin_python_version = \"3.7\"\nmax_python_version = \"3.11\" # exclusive\nmin_numpy_build_version = \"1.11\"\nmin_numpy_run_version = \"1.18\"\nmax_numpy_run_version = \"1.23\"\nmin_llvmlite_version = \"0.39.0dev0\"\nmax_llvmlite_version = \"0.40\"\n\nif sys.platform.startswith('linux'):\n# Patch for #2555 to make wheels without libpython\nsysconfig.get_config_vars()['Py_ENABLE_SHARED'] = 0\n\n\ndef _guard_py_ver():\nif _version_module is None:\nreturn\n\nparse = _version_module.parse\n\nmin_py = parse(min_python_version)\nmax_py = parse(max_python_version)\ncur_py = parse('.'.join(map(str, sys.version_info[:3])))\n\nif not min_py <= cur_py < max_py:\nmsg = ('Cannot install on Python version {}; only versions >={},<{} '\n'are supported.')\nraise RuntimeError(msg.format(cur_py, min_py, max_py))\n\n\n_guard_py_ver()\n\n\nclass build_doc(build.build):\ndescription = \"build documentation\"\n\ndef run(self):\nspawn(['make', '-C', 'docs', 'html'])\n\n\nversioneer.VCS = 'git'\nversioneer.versionfile_source = 'numba\/_version.py'\nversioneer.versionfile_build = 'numba\/_version.py'\nversioneer.tag_prefix = ''\nversioneer.parentdir_prefix = 'numba-'\n\ncmdclass = versioneer.get_cmdclass()\ncmdclass['build_doc'] = build_doc\n\ninstall_name_tool_fixer = []\nif sys.platform == 'darwin':\ninstall_name_tool_fixer += ['-headerpad_max_install_names']\n\nbuild_ext = cmdclass.get('build_ext', build_ext)\n\nnumba_be_user_options = [\n('werror', None, 'Build extensions with -Werror'),\n('wall', None, 'Build extensions with -Wall'),\n('noopt', None, 'Build extensions without optimization'),\n]\n\n\nclass NumbaBuildExt(build_ext):\n\nuser_options = build_ext.user_options + numba_be_user_options\nboolean_options = build_ext.boolean_options + ['werror', 'wall', 'noopt']\n\ndef initialize_options(self):\nsuper().initialize_options()\nself.werror = 0\nself.wall = 0\nself.noopt = 0\n\ndef run(self):\nextra_compile_args = []\nif self.noopt:\nif sys.platform == 'win32':\nextra_compile_args.append('\/Od')\nelse:\nextra_compile_args.append('-O0')\nif self.werror:\nextra_compile_args.append('-Werror')\nif self.wall:\nextra_compile_args.append('-Wall')\nfor ext in self.extensions:\next.extra_compile_args.extend(extra_compile_args)\n\nsuper().run()\n\n\ncmdclass['build_ext'] = NumbaBuildExt\n\n\ndef is_building():\n\"\"\"\nParse the setup.py command and return whether a build is requested.\nIf False is returned, only an informational command is run.\nIf True is returned, information about C extensions will have to\nbe passed to the setup() function.\n\"\"\"\nif len(sys.argv) < 2:\n# User forgot to give an argument probably, let setuptools handle that.\nreturn True\n\nbuild_commands = ['build', 'build_py', 'build_ext', 'build_clib'\n'build_scripts', 'install', 'install_lib',\n'install_headers', 'install_scripts', 'install_data',\n'sdist', 'bdist', 'bdist_dumb', 'bdist_rpm',\n'bdist_wininst', 'check', 'build_doc', 'bdist_wheel',\n'bdist_egg', 'develop', 'easy_install', 'test']\nreturn any(bc in sys.argv[1:] for bc in build_commands)\n\n\ndef get_ext_modules():\n\"\"\"\nReturn a list of Extension instances for the setup() call.\n\"\"\"\n# Note we don't import Numpy at the toplevel, since setup.py\n# should be able to run without Numpy for pip to discover the\n# build dependencies\nimport numpy.distutils.misc_util as np_misc\n\n# Inject required options for extensions compiled against the Numpy\n# C API (include dirs, library dirs etc.)\nnp_compile_args = np_misc.get_info('npymath')\n\next_devicearray = Extension(name='numba._devicearray',\nsources=['numba\/_devicearray.cpp'],\ndepends=['numba\/_pymodule.h',\n'numba\/_devicearray.h'],\ninclude_dirs=['numba'],\nextra_compile_args=['-std=c++11'],\n)\n\next_dynfunc = Extension(name='numba._dynfunc',\nsources=['numba\/_dynfuncmod.c'],\ndepends=['numba\/_pymodule.h',\n'numba\/_dynfunc.c'])\n\next_dispatcher = Extension(name=\"numba._dispatcher\",\nsources=['numba\/_dispatcher.cpp',\n'numba\/_typeof.c',\n'numba\/_hashtable.c',\n'numba\/core\/typeconv\/typeconv.cpp'],\ndepends=[\"numba\/_pymodule.h\",\n\"numba\/_typeof.h\",\n\"numba\/_hashtable.h\"],\n**np_compile_args)\n\next_helperlib = Extension(name=\"numba._helperlib\",\nsources=[\"numba\/_helpermod.c\",\n\"numba\/cext\/utils.c\",\n\"numba\/cext\/dictobject.c\",\n\"numba\/cext\/listobject.c\",\n],\nextra_link_args=install_name_tool_fixer,\ndepends=[\"numba\/_pymodule.h\",\n\"numba\/_helperlib.c\",\n\"numba\/_lapack.c\",\n\"numba\/_npymath_exports.c\",\n\"numba\/_random.c\",\n\"numba\/mathnames.inc\",\n],\n**np_compile_args)\n\next_typeconv = Extension(name=\"numba.core.typeconv._typeconv\",\nsources=[\"numba\/core\/typeconv\/typeconv.cpp\",\n\"numba\/core\/typeconv\/_typeconv.cpp\"],\ndepends=[\"numba\/_pymodule.h\"],\n)\n\next_np_ufunc = Extension(name=\"numba.np.ufunc._internal\",\nsources=[\"numba\/np\/ufunc\/_internal.c\"],\ndepends=[\"numba\/np\/ufunc\/_ufunc.c\",\n\"numba\/np\/ufunc\/_internal.h\",\n\"numba\/_pymodule.h\"],\n**np_compile_args)\n\next_npyufunc_num_threads = Extension(name=\"numba.np.ufunc._num_threads\",\nsources=[\n\"numba\/np\/ufunc\/_num_threads.c\"],\ndepends=[\"numba\/_pymodule.h\"],\n)\n\next_np_ufunc_backends = []\n\ndef check_file_at_path(path2file):\n\"\"\"\nTakes a list as a path, a single glob (*) is permitted as an entry which\nindicates that expansion at this location is required (i.e. version\nmight not be known).\n\"\"\"\nfound = None\npath2check = [os.path.split(os.path.split(sys.executable)[0])[0]]\npath2check += [os.getenv(n, '') for n in ['CONDA_PREFIX', 'PREFIX']]\nif sys.platform.startswith('win'):\npath2check += [os.path.join(p, 'Library') for p in path2check]\nfor p in path2check:\nif p:\nif '*' in path2file:\nglobloc = path2file.index('*')\nsearchroot = os.path.join(*path2file[:globloc])\ntry:\npotential_locs = os.listdir(os.path.join(p, searchroot))\nexcept BaseException:\ncontinue\nsearchfor = path2file[globloc + 1:]\nfor x in potential_locs:\npotpath = os.path.join(p, searchroot, x, *searchfor)\nif os.path.isfile(potpath):\nfound = p # the latest is used\nelif os.path.isfile(os.path.join(p, *path2file)):\nfound = p # the latest is used\nreturn found\n\n# Set various flags for use in TBB and openmp. On OSX, also find OpenMP!\nhave_openmp = True\nif sys.platform.startswith('win'):\ncpp11flags = []\nompcompileflags = ['-openmp']\nomplinkflags = []\nelif sys.platform.startswith('darwin'):\ncpp11flags = ['-std=c++11']\n# This is a bit unusual but necessary...\n# llvm (clang) OpenMP is used for headers etc at compile time\n# Intel OpenMP (libiomp5) provides the link library.\n# They are binary compatible and may not safely coexist in a process, as\n# libiomp5 is more prevalent and often linked in for NumPy it is used\n# here!\nompcompileflags = ['-fopenmp']\nomplinkflags = ['-fopenmp=libiomp5']\nomppath = ['lib', 'clang', '*', 'include', 'omp.h']\nhave_openmp = check_file_at_path(omppath)\nelse:\ncpp11flags = ['-std=c++11']\nompcompileflags = ['-fopenmp']\nif platform.machine() == 'ppc64le':\nomplinkflags = ['-fopenmp']\nelse:\nomplinkflags = ['-fopenmp']\n\n# Disable tbb if forced by user with NUMBA_DISABLE_TBB=1\nif os.getenv(\"NUMBA_DISABLE_TBB\"):\nprint(\"TBB disabled\")\nelse:\n# Search for Intel TBB, first check env var TBBROOT then conda locations\ntbb_root = os.getenv('TBBROOT')\nif not tbb_root:\ntbb_root = check_file_at_path(['include', 'tbb', 'tbb.h'])\n\nif tbb_root:\nprint(\"Using Intel TBB from:\", tbb_root)\next_np_ufunc_tbb_backend = Extension(\nname='numba.np.ufunc.tbbpool',\nsources=[\n'numba\/np\/ufunc\/tbbpool.cpp',\n'numba\/np\/ufunc\/gufunc_scheduler.cpp',\n],\ndepends=['numba\/np\/ufunc\/workqueue.h'],\ninclude_dirs=[os.path.join(tbb_root, 'include')],\nextra_compile_args=cpp11flags,\nlibraries=['tbb'], # TODO: if --debug or -g, use 'tbb_debug'\nlibrary_dirs=[\n# for Linux\nos.path.join(tbb_root, 'lib', 'intel64', 'gcc4.4'),\n# for MacOS\nos.path.join(tbb_root, 'lib'),\n# for Windows\nos.path.join(tbb_root, 'lib', 'intel64', 'vc_mt'),\n],\n)\next_np_ufunc_backends.append(ext_np_ufunc_tbb_backend)\nelse:\nprint(\"TBB not found\")\n\n# Disable OpenMP if forced by user with NUMBA_DISABLE_OPENMP=1\nif os.getenv('NUMBA_DISABLE_OPENMP'):\nprint(\"OpenMP disabled\")\nelif have_openmp:\nprint(\"Using OpenMP from:\", have_openmp)\n# OpenMP backed work queue\next_np_ufunc_omppool_backend = Extension(\nname='numba.np.ufunc.omppool',\nsources=[\n'numba\/np\/ufunc\/omppool.cpp',\n'numba\/np\/ufunc\/gufunc_scheduler.cpp',\n],\ndepends=['numba\/np\/ufunc\/workqueue.h'],\nextra_compile_args=ompcompileflags + cpp11flags,\nextra_link_args=omplinkflags,\n)\n\next_np_ufunc_backends.append(ext_np_ufunc_omppool_backend)\nelse:\nprint(\"OpenMP not found\")\n\n# Build the Numba workqueue implementation irrespective of whether the TBB\n# version is built. Users can select a backend via env vars.\next_np_ufunc_workqueue_backend = Extension(\nname='numba.np.ufunc.workqueue',\nsources=['numba\/np\/ufunc\/workqueue.c',\n'numba\/np\/ufunc\/gufunc_scheduler.cpp'],\ndepends=['numba\/np\/ufunc\/workqueue.h'])\next_np_ufunc_backends.append(ext_np_ufunc_workqueue_backend)\n\next_mviewbuf = Extension(name='numba.mviewbuf',\nextra_link_args=install_name_tool_fixer,\nsources=['numba\/mviewbuf.c'])\n\next_nrt_python = Extension(name='numba.core.runtime._nrt_python',\nsources=['numba\/core\/runtime\/_nrt_pythonmod.c',\n'numba\/core\/runtime\/nrt.c'],\ndepends=['numba\/core\/runtime\/nrt.h',\n'numba\/_pymodule.h',\n'numba\/core\/runtime\/_nrt_python.c'],\n**np_compile_args)\n\next_jitclass_box = Extension(name='numba.experimental.jitclass._box',\nsources=['numba\/experimental\/jitclass\/_box.c'],\ndepends=['numba\/experimental\/_pymodule.h'],\n)\n\next_cuda_extras = Extension(name='numba.cuda.cudadrv._extras',\nsources=['numba\/cuda\/cudadrv\/_extras.c'],\ndepends=['numba\/_pymodule.h'],\ninclude_dirs=[\"numba\"])\n\next_modules = [ext_dynfunc, ext_dispatcher, ext_helperlib,\next_typeconv, ext_np_ufunc, ext_npyufunc_num_threads,\next_mviewbuf, ext_nrt_python, ext_jitclass_box,\next_cuda_extras, ext_devicearray]\n\next_modules += ext_np_ufunc_backends\n\nreturn ext_modules\n\n\npackages = find_packages(include=[\"numba\", \"numba.*\"])\n\nbuild_requires = ['numpy >={},<{}'.format(min_numpy_build_version,\nmax_numpy_run_version)]\ninstall_requires = [\n'llvmlite >={},<{}'.format(min_llvmlite_version, max_llvmlite_version),\n'numpy >={},<{}'.format(min_numpy_run_version, max_numpy_run_version),\n'setuptools',\n'importlib_metadata; python_version < \"3.9\"',\n]\n\nmetadata = dict(\nname='numba',\ndescription=\"compiling Python code using LLVM\",\nversion=versioneer.get_version(),\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: BSD License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Software Development :: Compilers\",\n],\npackage_data={\n# HTML templates for type annotations\n\"numba.core.annotations\": [\"*.html\"],\n# Various test data\n\"numba.cuda.tests.cudadrv.data\": [\"*.ptx\", \"*.cu\"],\n\"numba.cuda.tests.doc_examples.ffi\": [\"*.cu\"],\n\"numba.tests\": [\"pycc_distutils_usecase\/*.py\"],\n# Some C files are needed by pycc\n\"numba\": [\"*.c\", \"*.h\"],\n\"numba.pycc\": [\"*.c\", \"*.h\"],\n\"numba.core.runtime\": [\"*.c\", \"*.h\"],\n\"numba.cext\": [\"*.c\", \"*.h\"],\n# numba gdb hook init command language file\n\"numba.misc\": [\"cmdlang.gdb\"],\n\"numba.typed\": [\"py.typed\"],\n},\nscripts=[\"numba\/pycc\/pycc\", \"bin\/numba\"],\nurl=\"https:\/\/numba.pydata.org\",\npackages=packages,\nsetup_requires=build_requires,\ninstall_requires=install_requires,\npython_requires=\">={}\".format(min_python_version),\nlicense=\"BSD\",\ncmdclass=cmdclass,\n)\n\nwith open('README.rst') as f:\nmetadata['long_description'] = f.read()\n\nif is_building():\nmetadata['ext_modules'] = get_ext_modules()\n\nsetup(**metadata)\n"
    },
    {
        "package_name": "O365-2.0.19",
        "file_list": "LICENSE account.py address_book.py calendar.py category.py connection.py directory.py drive.py excel.py groups.py mailbox.py message.py planner.py sharepoint.py tasks.py teams.py attachment.py consent.py decorators.py token.py utils.py windows_tz.py __init__.py __init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py test_account.py test_connection.py test_mailbox.py test_message.py test_planner.py test_protocol.py test_teams.py __init__.py",
        "setup.py": "import os\n\nfrom setuptools import setup, find_packages\n\n\nVERSION = '2.0.19'\n\n# Available classifiers: https:\/\/pypi.org\/pypi?%3Aaction=list_classifiers\nCLASSIFIERS = [\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n'Topic :: Office\/Business :: Office Suites',\n'Topic :: Software Development :: Libraries',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3 :: Only',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Operating System :: OS Independent',\n]\n\n\ndef read(fname):\nwith open(os.path.join(os.path.dirname(__file__), fname), 'r') as file:\nreturn file.read()\n\n\nrequires = [\n'requests>=2.18.0',\n'requests_oauthlib>=1.2.0',\n'python-dateutil>=2.7',\n'pytz>=2018.5',\n'tzlocal>=4.0',\n'beautifulsoup4>=4.0.0',\n'stringcase>=1.2.0'\n]\n\nsetup(\nname='O365',\nversion=VERSION,\n# packages=['O365', 'O365.utils'],\npackages=find_packages(),\nurl='https:\/\/github.com\/O365\/python-o365',\nlicense='Apache License 2.0',\nauthor='Janscas, Roycem90, Narcolapser',\nauthor_email='janscas@users.noreply.github.com',\nmaintainer='Janscas',\nmaintainer_email='janscas@users.noreply.github.com',\ndescription='Microsoft Graph and Office 365 API made easy',\nlong_description=read('README.md'),\nlong_description_content_type=\"text\/markdown\",\nclassifiers=CLASSIFIERS,\npython_requires=\">=3.4\",\ninstall_requires=requires,\nsetup_requires=[\"wheel\"],\n)\n"
    },
    {
        "package_name": "oauthlib-3.2.0",
        "file_list": "CHANGELOG.rst LICENSE MANIFEST.in common.py access_token.py authorization.py base.py pre_configured.py request_token.py resource.py signature_only.py __init__.py errors.py parameters.py request_validator.py signature.py utils.py __init__.py __init__.py backend_application.py base.py legacy_application.py mobile_application.py service_application.py web_application.py __init__.py authorization.py base.py introspect.py metadata.py pre_configured.py resource.py revocation.py token.py __init__.py errors.py authorization_code.py base.py client_credentials.py implicit.py refresh_token.py resource_owner_password_credentials.py __init__.py parameters.py request_validator.py tokens.py utils.py __init__.py device.py __init__.py __init__.py __init__.py pre_configured.py userinfo.py __init__.py exceptions.py authorization_code.py base.py dispatchers.py hybrid.py implicit.py refresh_token.py __init__.py request_validator.py tokens.py __init__.py __init__.py __init__.py signals.py uri_validate.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py test_access_token.py test_authorization.py test_base.py test_request_token.py test_resource.py test_signature_only.py __init__.py test_client.py test_parameters.py test_request_validator.py test_signatures.py test_utils.py __init__.py __init__.py test_backend_application.py test_base.py test_legacy_application.py test_mobile_application.py test_service_application.py test_web_application.py __init__.py test_base_endpoint.py test_client_authentication.py test_credentials_preservation.py test_error_responses.py test_extra_credentials.py test_introspect_endpoint.py test_metadata.py test_resource_owner_association.py test_revocation_endpoint.py test_scope_handling.py test_utils.py __init__.py test_authorization_code.py test_client_credentials.py test_implicit.py test_refresh_token.py test_resource_owner_password.py __init__.py test_parameters.py test_request_validator.py test_server.py test_tokens.py test_utils.py __init__.py test_device.py __init__.py __init__.py __init__.py test_claims_handling.py test_openid_connect_params_handling.py test_userinfo_endpoint.py __init__.py test_authorization_code.py test_base.py test_dispatchers.py test_hybrid.py test_implicit.py test_refresh_token.py __init__.py test_request_validator.py test_server.py test_tokens.py __init__.py __init__.py __init__.py test_common.py test_uri_validate.py __init__.py __init__.py",
        "setup.py": "# Hack because logging + setuptools sucks.\ntry:\nimport multiprocessing\nexcept ImportError:\npass\n\nfrom os.path import dirname, join\n\nfrom setuptools import find_packages, setup\n\nimport oauthlib\n\n\ndef fread(fn):\nwith open(join(dirname(__file__), fn), 'r') as f:\nreturn f.read()\n\n\nrsa_require = ['cryptography>=3.0.0']\nsignedtoken_require = ['cryptography>=3.0.0', 'pyjwt>=2.0.0,<3']\nsignals_require = ['blinker>=1.4.0']\n\nsetup(\nname='oauthlib',\nversion=oauthlib.__version__,\ndescription='A generic, spec-compliant, thorough implementation of the OAuth request-signing logic',\nlong_description=fread('README.rst'),\nlong_description_content_type='text\/x-rst',\nauthor='The OAuthlib Community',\nauthor_email='idan@gazit.me',\nmaintainer='Ib Lundgren',\nmaintainer_email='ib.lundgren@gmail.com',\nurl='https:\/\/github.com\/oauthlib\/oauthlib',\nplatforms='any',\nlicense='BSD',\npackages=find_packages(exclude=('docs', 'tests', 'tests.*')),\npython_requires='>=3.6',\nextras_require={\n'rsa': rsa_require,\n'signedtoken': signedtoken_require,\n'signals': signals_require,\n},\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved',\n'License :: OSI Approved :: BSD License',\n'Operating System :: MacOS',\n'Operating System :: POSIX',\n'Operating System :: POSIX :: Linux',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: 3 :: Only',\n'Programming Language :: Python :: Implementation',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Software Development :: Libraries :: Python Modules',\n]\n)\n"
    },
    {
        "package_name": "ocspbuilder-0.10.2",
        "file_list": "__init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py",
        "setup.py": "import os\nimport shutil\n\nfrom setuptools import setup, find_packages, Command\n\nimport ocspbuilder\n\n\nclass CleanCommand(Command):\nuser_options = [\n('all', None, '(Compatibility with original clean command)')\n]\n\ndef initialize_options(self):\nself.all = False\n\ndef finalize_options(self):\npass\n\ndef run(self):\nfolder = os.path.dirname(os.path.abspath(__file__))\nfor sub_folder in ['build', 'dist', 'ocspbuilder.egg-info']:\nfull_path = os.path.join(folder, sub_folder)\nif os.path.exists(full_path):\nshutil.rmtree(full_path)\n\n\nsetup(\nname='ocspbuilder',\nversion=ocspbuilder.__version__,\n\ndescription=(\n'Creates and signs online certificate status protocol (OCSP) '\n'requests and responses for X.509 certificates'\n),\nlong_description='Docs for this project are maintained at https:\/\/github.com\/wbond\/ocspbuilder#readme.',\n\nurl='https:\/\/github.com\/wbond\/ocspbuilder',\n\nauthor='wbond',\nauthor_email='will@wbond.net',\n\nlicense='MIT',\n\nclassifiers=[\n'Development Status :: 4 - Beta',\n\n'Intended Audience :: Developers',\n\n'License :: OSI Approved :: MIT License',\n\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: Implementation :: PyPy',\n\n'Topic :: Security :: Cryptography',\n],\n\nkeywords='crypto pki x509 certificate ocsp',\n\ninstall_requires=[\n'asn1crypto>=0.18.1',\n'oscrypto>=0.16.1'\n],\npackages=find_packages(exclude=['tests*', 'dev*']),\n\ntest_suite='dev.tests.make_suite',\n\ncmdclass={\n'clean': CleanCommand,\n}\n)\n"
    },
    {
        "package_name": "ocspresponder-0.5.0",
        "file_list": "__init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py",
        "setup.py": "from setuptools import setup\nfrom codecs import open\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Load README\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\nlong_description = f.read()\n\n# Load requirements\nwith open(path.join(here, 'requirements.txt'), encoding='utf-8') as f:\nlines = f.readlines()\nrequirements = [l.strip().strip('\\n') for l in lines\nif l.strip() and not l.strip().startswith('#')]\n\nsetup(\nname='ocspresponder',\nversion='0.5.0',\n\ndescription='RFC 6960 compliant OCSP Responder framework written in Python 3.5+.',\nlong_description=long_description,\n\nurl='https:\/\/github.com\/threema-ch\/ocspresponder\/',\n\nauthor='Threema GmbH',\nauthor_email='github@threema.ch',\n\nlicense='Apache Software License',\nclassifiers=[\n'Development Status :: 3 - Alpha',\n'Framework :: Bottle',\n'Intended Audience :: Developers',\n'Intended Audience :: Information Technology',\n'Intended Audience :: System Administrators',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: POSIX',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3 :: Only',\n'Topic :: Security',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\nkeywords='ocsp responder server ssl tls pki',\n\npackages=['ocspresponder'],\ninstall_requires=requirements,\npackage_data={\n'': ['README.md', 'LICENSE.txt', 'CHANGELOG.md', 'requirements.txt'],\n},\n)\n"
    },
    {
        "package_name": "ofxparse-0.21",
        "file_list": "AUTHORS LICENSE MANIFEST.in mcc.py ofxparse.py ofxprinter.py ofxutil.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe PKG-INFO README.rst setup.cfg setup.py account_listing_aggregation.ofx anzcc.ofx bank_medium.ofx bank_small.ofx checking.ofx error_message.ofx date_missing.ofx decimal_error.ofx empty_balance.ofx fidelity-savings.ofx fidelity.ofx investment_401k.ofx investment_medium.ofx multiple_accounts.ofx multiple_accounts2.ofx ofx-v102-empty-tags.ofx signon_fail.ofx signon_success.ofx signon_success_no_message.ofx suncorp.ofx td_ameritrade.ofx tiaacref.ofx vanguard.ofx vanguard401k.ofx support.py test_parse.py test_write.py __init__.py",
        "setup.py": "\nimport codecs\nimport os\nimport re\nimport sys\n\nfrom setuptools import setup, find_packages\n\n# Read the version from __init__ to avoid importing ofxparse while installing.\n# This lets the install work when the user does not have BeautifulSoup\n# installed.\nVERSION = re.search(r\"__version__ = '(.*?)'\",\nopen(\"ofxparse\/__init__.py\").read()).group(1)\n\nREQUIRES = [\n\"beautifulsoup4\",\n\"lxml\",\n'six',\n]\n\nREADME = os.path.join(os.path.dirname(__file__), 'README.rst')\n\nwith codecs.open(README, encoding='utf8') as f:\nLONG_DESCRIPTION = f.read()\n\nsetup_params = dict(\nname='ofxparse',\nversion=VERSION,\ndescription=(\"Tools for working with the OFX (Open Financial Exchange)\"\n\" file format\"),\nlong_description=LONG_DESCRIPTION,\n# Get strings from http:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"Natural Language :: English\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Topic :: Utilities\",\n\"License :: OSI Approved :: MIT License\",\n],\nkeywords='ofx, Open Financial Exchange, file formats',\nauthor='Jerry Seutter',\nauthor_email='jseutter.ofxparse@gmail.com',\nurl='http:\/\/sites.google.com\/site\/ofxparse',\nlicense='MIT License',\npackages=find_packages(exclude=['ez_setup', 'examples', 'tests']),\ninclude_package_data=True,\nzip_safe=True,\ninstall_requires=REQUIRES,\nentry_points=\"\"\"\n\"\"\",\ntest_suite='tests',\n)\n\nif __name__ == '__main__':\nsetup(**setup_params)\n"
    },
    {
        "package_name": "openapi-spec-validator-0.4.0",
        "file_list": "LICENSE constructors.py decorators.py exceptions.py factories.py generators.py base.py file.py requests.py urllib.py utils.py __init__.py loaders.py managers.py readers.py schema.json schema.json schema.json schemas.py shortcuts.py validators.py __init__.py __main__.py PKG-INFO pyproject.toml README.rst setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['openapi_spec_validator', 'openapi_spec_validator.handlers']\n\npackage_data = \\\n{'': ['*'],\n'openapi_spec_validator': ['resources\/schemas\/v2.0\/*',\n'resources\/schemas\/v3.0.0\/*',\n'resources\/schemas\/v3.0\/*']}\n\ninstall_requires = \\\n['PyYAML>=5.1',\n'jsonschema>=3.2.0,<5.0.0',\n'openapi-schema-validator>=0.2.0,<0.3.0',\n'setuptools']\n\nextras_require = \\\n{'requests': ['requests']}\n\nentry_points = \\\n{'console_scripts': ['openapi-spec-validator = '\n'openapi_spec_validator.__main__:main']}\n\nsetup_kwargs = {\n'name': 'openapi-spec-validator',\n'version': '0.4.0',\n'description': 'OpenAPI 2.0 (aka Swagger) and OpenAPI 3.0 spec validator',\n'long_description': \"**********************\\nOpenAPI Spec validator\\n**********************\\n\\n.. image:: https:\/\/img.shields.io\/pypi\/v\/openapi-spec-validator.svg\\n :target: https:\/\/pypi.python.org\/pypi\/openapi-spec-validator\\n.. image:: https:\/\/travis-ci.org\/p1c2u\/openapi-spec-validator.svg?branch=master\\n :target: https:\/\/travis-ci.org\/p1c2u\/openapi-spec-validator\\n.. image:: https:\/\/img.shields.io\/codecov\/c\/github\/p1c2u\/openapi-spec-validator\/master.svg?style=flat\\n :target: https:\/\/codecov.io\/github\/p1c2u\/openapi-spec-validator?branch=master\\n.. image:: https:\/\/img.shields.io\/pypi\/pyversions\/openapi-spec-validator.svg\\n :target: https:\/\/pypi.python.org\/pypi\/openapi-spec-validator\\n.. image:: https:\/\/img.shields.io\/pypi\/format\/openapi-spec-validator.svg\\n :target: https:\/\/pypi.python.org\/pypi\/openapi-spec-validator\\n.. image:: https:\/\/img.shields.io\/pypi\/status\/openapi-spec-validator.svg\\n :target: https:\/\/pypi.python.org\/pypi\/openapi-spec-validator\\n\\nAbout\\n#####\\n\\nOpenAPI Spec Validator is a Python library that validates OpenAPI Specs\\nagainst the `OpenAPI 2.0 (aka\\nSwagger) <https:\/\/github.com\/OAI\/OpenAPI-Specification\/blob\/master\/versions\/2.0.md>`__\\nand `OpenAPI\\n3.0 <https:\/\/github.com\/OAI\/OpenAPI-Specification\/blob\/master\/versions\/3.0.3.md>`__\\nspecification. The validator aims to check for full compliance with the\\nSpecification.\\n\\nInstallation\\n############\\n\\n::\\n\\n $ pip install openapi-spec-validator\\n\\nAlternatively you can download the code and install from the repository:\\n\\n.. code-block:: bash\\n\\n $ pip install -e git+https:\/\/github.com\/p1c2u\/openapi-spec-validator.git#egg=openapi_spec_validator\\n\\n\\nUsage\\n#####\\n\\nCommand Line Interface\\n**********************\\n\\nStraight forward way:\\n\\n.. code:: bash\\n\\n $ openapi-spec-validator openapi.yaml\\n\\npipes way:\\n\\n.. code:: bash\\n\\n $ cat openapi.yaml | openapi-spec-validator -\\n\\ndocker way:\\n\\n.. code:: bash\\n\\n $ docker run -v path\/to\/openapi.yaml:\/openapi.yaml --rm p1c2u\/openapi-spec-validator \/openapi.yaml\\n\\nor more pythonic way:\\n\\n.. code:: bash\\n\\n $ python -m openapi_spec_validator openapi.yaml\\n\\nExamples\\n********\\n\\nBy default, OpenAPI v3 syntax is expected. To validate an OpenAPI v3 spec:\\n\\n.. code:: python\\n\\n from openapi_spec_validator import validate_spec\\n from openapi_spec_validator.readers import read_from_filename\\n\\n spec_dict, spec_url = read_from_filename('openapi.yaml')\\n\\n # If no exception is raised by validate_spec(), the spec is valid.\\n validate_spec(spec_dict)\\n\\n validate_spec({})\\n\\n Traceback (most recent call last):\\n ...\\n OpenAPIValidationError: 'openapi' is a required property\\n \\nIn order to validate a Swagger \/ OpenAPI 2.0 spec file, import ``validate_v2_spec`` instead of ``validate_spec``. You can also explicitly import ``validate_v3_spec`` if you want to disambiguate the expected version.\\n\\nAdd ``spec_url`` to validate spec with relative files:\\n\\n.. code:: python\\n\\n validate_spec(spec_dict, spec_url='file:\/\/\/path\/to\/spec\/openapi.yaml')\\n\\nYou can also validate spec from url:\\n\\n.. code:: python\\n\\n from openapi_spec_validator import validate_spec_url\\n\\n # If no exception is raised by validate_spec_url(), the spec is valid.\\n validate_spec_url('http:\/\/example.com\/openapi.json')\\n\\nIf you want to iterate through validation errors:\\n\\n.. code:: python\\n\\n from openapi_spec_validator import openapi_v3_spec_validator\\n\\n errors_iterator = openapi_v3_spec_validator.iter_errors(spec)\\n\\nRelated projects\\n################\\n\\n* `openapi-core <https:\/\/github.com\/p1c2u\/openapi-core>`__\\n Python library that adds client-side and server-side support for the OpenAPI.\\n* `openapi-schema-validator <https:\/\/github.com\/p1c2u\/openapi-schema-validator>`__\\n Python library that validates schema against the OpenAPI Schema Specification v3.0.\\n\\nLicense\\n#######\\n\\nCopyright (c) 2017-2021, Artur Maciag, All rights reserved. Apache v2\\n\",\n'author': 'Artur Maciag',\n'author_email': 'maciag.artur@gmail.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/p1c2u\/openapi-spec-validator',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'extras_require': extras_require,\n'entry_points': entry_points,\n'python_requires': '>=3.7.0,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "opencensus-ext-stackdriver-0.8.0",
        "file_list": "__init__.py __init__.py __init__.py __init__.py __init__.py dependency_links.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "# Copyright 2019, OpenCensus Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import find_packages, setup\n\nfrom version import __version__\n\nsetup(\nname='opencensus-ext-stackdriver',\nversion=__version__, # noqa\nauthor='OpenCensus Authors',\nauthor_email='census-developers@googlegroups.com',\nclassifiers=[\n'Intended Audience :: Developers',\n'Development Status :: 3 - Alpha',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n],\ndescription='OpenCensus Stackdriver Trace Exporter',\ninclude_package_data=True,\nlong_description=open('README.rst').read(),\ninstall_requires=[\n'google-cloud-monitoring ~= 2.0',\n'google-cloud-trace >= 0.20.0, < 1.0.0',\n'rsa <= 4.0; python_version<=\"3.4\"',\n'opencensus >= 0.7.13, < 1.0.0',\n],\npython_requires=\">=3.6\",\nextras_require={},\nlicense='Apache-2.0',\npackages=find_packages(exclude=('examples', 'tests',)),\nnamespace_packages=[],\nurl='https:\/\/github.com\/census-instrumentation\/opencensus-python\/tree\/master\/contrib\/opencensus-ext-stackdriver', # noqa: E501\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "opentelemetry-instrumentation-botocore-0.33b0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py dynamodb.py lmbd.py sqs.py types.py __init__.py package.py version.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt test_botocore_dynamodb.py test_botocore_instrumentation.py test_botocore_lambda.py __init__.py",
        "setup.py": "# Copyright The OpenTelemetry Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# DO NOT EDIT. THIS FILE WAS AUTOGENERATED FROM templates\/instrumentation_setup.py.txt.\n# RUN `python scripts\/generate_setup.py` TO REGENERATE.\n\n\nimport distutils.cmd\nimport json\nimport os\nfrom configparser import ConfigParser\n\nimport setuptools\n\nconfig = ConfigParser()\nconfig.read(\"setup.cfg\")\n\n# We provide extras_require parameter to setuptools.setup later which\n# overwrites the extras_require section from setup.cfg. To support extras_require\n# section in setup.cfg, we load it here and merge it with the extras_require param.\nextras_require = {}\nif \"options.extras_require\" in config:\nfor key, value in config[\"options.extras_require\"].items():\nextras_require[key] = [v for v in value.split(\"\\n\") if v.strip()]\n\nBASE_DIR = os.path.dirname(__file__)\nPACKAGE_INFO = {}\n\nVERSION_FILENAME = os.path.join(\nBASE_DIR,\n\"src\",\n\"opentelemetry\",\n\"instrumentation\",\n\"botocore\",\n\"version.py\",\n)\nwith open(VERSION_FILENAME, encoding=\"utf-8\") as f:\nexec(f.read(), PACKAGE_INFO)\n\nPACKAGE_FILENAME = os.path.join(\nBASE_DIR,\n\"src\",\n\"opentelemetry\",\n\"instrumentation\",\n\"botocore\",\n\"package.py\",\n)\nwith open(PACKAGE_FILENAME, encoding=\"utf-8\") as f:\nexec(f.read(), PACKAGE_INFO)\n\n# Mark any instruments\/runtime dependencies as test dependencies as well.\nextras_require[\"instruments\"] = PACKAGE_INFO[\"_instruments\"]\ntest_deps = extras_require.get(\"test\", [])\nfor dep in extras_require[\"instruments\"]:\ntest_deps.append(dep)\n\nextras_require[\"test\"] = test_deps\n\n\nclass JSONMetadataCommand(distutils.cmd.Command):\n\ndescription = (\n\"print out package metadata as JSON. This is used by OpenTelemetry dev scripts to \",\n\"auto-generate code in other places\",\n)\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nmetadata = {\n\"name\": config[\"metadata\"][\"name\"],\n\"version\": PACKAGE_INFO[\"__version__\"],\n\"instruments\": PACKAGE_INFO[\"_instruments\"],\n}\nprint(json.dumps(metadata))\n\n\nsetuptools.setup(\ncmdclass={\"meta\": JSONMetadataCommand},\nversion=PACKAGE_INFO[\"__version__\"],\nextras_require=extras_require,\n)\n"
    },
    {
        "package_name": "opentelemetry-instrumentation-pymongo-0.33b0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py package.py version.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt test_pymongo.py __init__.py",
        "setup.py": "# Copyright The OpenTelemetry Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# DO NOT EDIT. THIS FILE WAS AUTOGENERATED FROM templates\/instrumentation_setup.py.txt.\n# RUN `python scripts\/generate_setup.py` TO REGENERATE.\n\n\nimport distutils.cmd\nimport json\nimport os\nfrom configparser import ConfigParser\n\nimport setuptools\n\nconfig = ConfigParser()\nconfig.read(\"setup.cfg\")\n\n# We provide extras_require parameter to setuptools.setup later which\n# overwrites the extras_require section from setup.cfg. To support extras_require\n# section in setup.cfg, we load it here and merge it with the extras_require param.\nextras_require = {}\nif \"options.extras_require\" in config:\nfor key, value in config[\"options.extras_require\"].items():\nextras_require[key] = [v for v in value.split(\"\\n\") if v.strip()]\n\nBASE_DIR = os.path.dirname(__file__)\nPACKAGE_INFO = {}\n\nVERSION_FILENAME = os.path.join(\nBASE_DIR,\n\"src\",\n\"opentelemetry\",\n\"instrumentation\",\n\"pymongo\",\n\"version.py\",\n)\nwith open(VERSION_FILENAME, encoding=\"utf-8\") as f:\nexec(f.read(), PACKAGE_INFO)\n\nPACKAGE_FILENAME = os.path.join(\nBASE_DIR,\n\"src\",\n\"opentelemetry\",\n\"instrumentation\",\n\"pymongo\",\n\"package.py\",\n)\nwith open(PACKAGE_FILENAME, encoding=\"utf-8\") as f:\nexec(f.read(), PACKAGE_INFO)\n\n# Mark any instruments\/runtime dependencies as test dependencies as well.\nextras_require[\"instruments\"] = PACKAGE_INFO[\"_instruments\"]\ntest_deps = extras_require.get(\"test\", [])\nfor dep in extras_require[\"instruments\"]:\ntest_deps.append(dep)\n\nextras_require[\"test\"] = test_deps\n\n\nclass JSONMetadataCommand(distutils.cmd.Command):\n\ndescription = (\n\"print out package metadata as JSON. This is used by OpenTelemetry dev scripts to \",\n\"auto-generate code in other places\",\n)\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nmetadata = {\n\"name\": config[\"metadata\"][\"name\"],\n\"version\": PACKAGE_INFO[\"__version__\"],\n\"instruments\": PACKAGE_INFO[\"_instruments\"],\n}\nprint(json.dumps(metadata))\n\n\nsetuptools.setup(\ncmdclass={\"meta\": JSONMetadataCommand},\nversion=PACKAGE_INFO[\"__version__\"],\nextras_require=extras_require,\n)\n"
    },
    {
        "package_name": "opentelemetry-instrumentation-sklearn-0.33b0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py package.py version.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt fixtures.py test_sklearn.py __init__.py",
        "setup.py": "# Copyright The OpenTelemetry Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# DO NOT EDIT. THIS FILE WAS AUTOGENERATED FROM templates\/instrumentation_setup.py.txt.\n# RUN `python scripts\/generate_setup.py` TO REGENERATE.\n\n\nimport distutils.cmd\nimport json\nimport os\nfrom configparser import ConfigParser\n\nimport setuptools\n\nconfig = ConfigParser()\nconfig.read(\"setup.cfg\")\n\n# We provide extras_require parameter to setuptools.setup later which\n# overwrites the extras_require section from setup.cfg. To support extras_require\n# section in setup.cfg, we load it here and merge it with the extras_require param.\nextras_require = {}\nif \"options.extras_require\" in config:\nfor key, value in config[\"options.extras_require\"].items():\nextras_require[key] = [v for v in value.split(\"\\n\") if v.strip()]\n\nBASE_DIR = os.path.dirname(__file__)\nPACKAGE_INFO = {}\n\nVERSION_FILENAME = os.path.join(\nBASE_DIR,\n\"src\",\n\"opentelemetry\",\n\"instrumentation\",\n\"sklearn\",\n\"version.py\",\n)\nwith open(VERSION_FILENAME, encoding=\"utf-8\") as f:\nexec(f.read(), PACKAGE_INFO)\n\nPACKAGE_FILENAME = os.path.join(\nBASE_DIR,\n\"src\",\n\"opentelemetry\",\n\"instrumentation\",\n\"sklearn\",\n\"package.py\",\n)\nwith open(PACKAGE_FILENAME, encoding=\"utf-8\") as f:\nexec(f.read(), PACKAGE_INFO)\n\n# Mark any instruments\/runtime dependencies as test dependencies as well.\nextras_require[\"instruments\"] = PACKAGE_INFO[\"_instruments\"]\ntest_deps = extras_require.get(\"test\", [])\nfor dep in extras_require[\"instruments\"]:\ntest_deps.append(dep)\n\nextras_require[\"test\"] = test_deps\n\n\nclass JSONMetadataCommand(distutils.cmd.Command):\n\ndescription = (\n\"print out package metadata as JSON. This is used by OpenTelemetry dev scripts to \",\n\"auto-generate code in other places\",\n)\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nmetadata = {\n\"name\": config[\"metadata\"][\"name\"],\n\"version\": PACKAGE_INFO[\"__version__\"],\n\"instruments\": PACKAGE_INFO[\"_instruments\"],\n}\nprint(json.dumps(metadata))\n\n\nsetuptools.setup(\ncmdclass={\"meta\": JSONMetadataCommand},\nversion=PACKAGE_INFO[\"__version__\"],\nextras_require=extras_require,\n)\n"
    },
    {
        "package_name": "opentelemetry-instrumentation-wsgi-0.33b0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py package.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt test_getter.py test_wsgi_middleware.py __init__.py",
        "setup.py": "# Copyright The OpenTelemetry Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# DO NOT EDIT. THIS FILE WAS AUTOGENERATED FROM templates\/instrumentation_setup.py.txt.\n# RUN `python scripts\/generate_setup.py` TO REGENERATE.\n\n\nimport distutils.cmd\nimport json\nimport os\nfrom configparser import ConfigParser\n\nimport setuptools\n\nconfig = ConfigParser()\nconfig.read(\"setup.cfg\")\n\n# We provide extras_require parameter to setuptools.setup later which\n# overwrites the extras_require section from setup.cfg. To support extras_require\n# section in setup.cfg, we load it here and merge it with the extras_require param.\nextras_require = {}\nif \"options.extras_require\" in config:\nfor key, value in config[\"options.extras_require\"].items():\nextras_require[key] = [v for v in value.split(\"\\n\") if v.strip()]\n\nBASE_DIR = os.path.dirname(__file__)\nPACKAGE_INFO = {}\n\nVERSION_FILENAME = os.path.join(\nBASE_DIR, \"src\", \"opentelemetry\", \"instrumentation\", \"wsgi\", \"version.py\"\n)\nwith open(VERSION_FILENAME, encoding=\"utf-8\") as f:\nexec(f.read(), PACKAGE_INFO)\n\nPACKAGE_FILENAME = os.path.join(\nBASE_DIR, \"src\", \"opentelemetry\", \"instrumentation\", \"wsgi\", \"package.py\"\n)\nwith open(PACKAGE_FILENAME, encoding=\"utf-8\") as f:\nexec(f.read(), PACKAGE_INFO)\n\n# Mark any instruments\/runtime dependencies as test dependencies as well.\nextras_require[\"instruments\"] = PACKAGE_INFO[\"_instruments\"]\ntest_deps = extras_require.get(\"test\", [])\nfor dep in extras_require[\"instruments\"]:\ntest_deps.append(dep)\n\nextras_require[\"test\"] = test_deps\n\n\nclass JSONMetadataCommand(distutils.cmd.Command):\n\ndescription = (\n\"print out package metadata as JSON. This is used by OpenTelemetry dev scripts to \",\n\"auto-generate code in other places\",\n)\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nmetadata = {\n\"name\": config[\"metadata\"][\"name\"],\n\"version\": PACKAGE_INFO[\"__version__\"],\n\"instruments\": PACKAGE_INFO[\"_instruments\"],\n}\nprint(json.dumps(metadata))\n\n\nsetuptools.setup(\ncmdclass={\"meta\": JSONMetadataCommand},\nversion=PACKAGE_INFO[\"__version__\"],\nextras_require=extras_require,\n)\n"
    },
    {
        "package_name": "opentelemetry-proto-1.12.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py logs_service_pb2.py logs_service_pb2.pyi logs_service_pb2_grpc.py metrics_service_pb2.py metrics_service_pb2.pyi metrics_service_pb2_grpc.py __init__.py __init__.py trace_service_pb2.py trace_service_pb2.pyi trace_service_pb2_grpc.py __init__.py __init__.py __init__.py common_pb2.py common_pb2.pyi __init__.py __init__.py logs_pb2.py logs_pb2.pyi metrics_config_service_pb2.py metrics_config_service_pb2.pyi metrics_config_service_pb2_grpc.py metrics_pb2.py metrics_pb2.pyi __init__.py __init__.py resource_pb2.py resource_pb2.pyi __init__.py __init__.py trace_config_pb2.py trace_config_pb2.pyi trace_pb2.py trace_pb2.pyi __init__.py __init__.py version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt test_proto.py __init__.py",
        "setup.py": "# Copyright The OpenTelemetry Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\n\nimport setuptools\n\nBASE_DIR = os.path.dirname(__file__)\nVERSION_FILENAME = os.path.join(\nBASE_DIR, \"src\", \"opentelemetry\", \"proto\", \"version.py\"\n)\nPACKAGE_INFO = {}\nwith open(VERSION_FILENAME, encoding=\"utf-8\") as f:\nexec(f.read(), PACKAGE_INFO)\n\nsetuptools.setup(\nversion=PACKAGE_INFO[\"__version__\"],\n)\n"
    },
    {
        "package_name": "opsgenie-sdk-2.1.5",
        "file_list": "LICENSE.txt account_info.py account_plan.py get_account_info_response.py get_account_info_response_all_of.py __init__.py acknowledge_alert_payload.py add_details_to_alert_payload.py add_details_to_alert_payload_all_of.py add_note_to_alert_payload.py add_responder_to_alert_payload.py add_responder_to_alert_payload_all_of.py add_tags_to_alert_payload.py add_tags_to_alert_payload_all_of.py add_team_to_alert_payload.py add_team_to_alert_payload_all_of.py alert.py alert_action_payload.py alert_all_of.py alert_attachment.py alert_attachment_meta.py alert_integration.py alert_log.py alert_note.py alert_paging.py alert_recipient.py alert_report.py alert_request_status.py alert_team_meta.py alert_user_meta.py assign_alert_payload.py assign_alert_payload_all_of.py base_alert.py close_alert_payload.py create_alert_payload.py create_alert_payload_all_of.py create_saved_search_payload.py create_saved_search_response.py create_saved_search_response_all_of.py escalate_alert_to_next_payload.py escalate_alert_to_next_payload_all_of.py execute_custom_alert_action_payload.py get_alert_attachment_response.py get_alert_attachment_response_all_of.py get_alert_response.py get_alert_response_all_of.py get_count_alerts_response.py get_count_alerts_response_all_of.py get_count_alerts_response_all_of_data.py get_request_status_response.py get_request_status_response_all_of.py get_saved_search_response.py get_saved_search_response_all_of.py list_alerts_response.py list_alerts_response_all_of.py list_alert_attachments_response.py list_alert_attachments_response_all_of.py list_alert_logs_response.py list_alert_logs_response_all_of.py list_alert_notes_response.py list_alert_notes_response_all_of.py list_alert_recipients_response.py list_alert_recipients_response_all_of.py list_saved_searches_response.py list_saved_searches_response_all_of.py saved_search.py saved_search_entity.py saved_search_meta.py snooze_alert_payload.py snooze_alert_payload_all_of.py un_acknowledge_alert_payload.py update_alert_description_payload.py update_alert_message_payload.py update_alert_priority_payload.py update_saved_search_payload.py __init__.py create_heartbeat_payload.py create_heartbeat_payload_all_of.py create_heartbeat_payload_all_of_owner_team.py create_heartbeat_response.py create_heartbeat_response_all_of.py disable_heartbeat_response.py disable_heartbeat_response_all_of.py enable_heartbeat_response.py get_heartbeat_response.py heartbeat.py heartbeat_meta.py list_heartbeat_response.py list_heartbeat_response_all_of.py list_heartbeat_response_all_of_data.py update_heartbeat_payload.py update_heartbeat_response.py __init__.py base_incident.py close_incident_payload.py create_incident_payload.py create_incident_payload_all_of.py get_incident_request_status_response.py get_incident_request_status_response_all_of.py get_incident_response.py get_incident_response_all_of.py incident.py incident_action_payload.py incident_all_of.py incident_request_status.py list_incidents_response.py list_incidents_response_all_of.py status_page_entry.py status_page_entry_all_of.py __init__.py __init__.py api_client.py configuration.py errors.py exceptions.py api_metric.py http_metric.py observer.py publisher.py sdk_metric.py __init__.py all_recipient.py base_response.py base_response_with_expandable.py base_response_with_expandable_all_of.py condition.py duration.py error_response.py error_response_all_of.py escalation_recipient.py filter.py group_recipient.py match_all.py match_all_conditions.py match_any_condition.py match_any_condition_all_of.py no_recipient.py page_details.py recipient.py responder.py schedule_recipient.py success_data.py success_response.py success_response_all_of.py team_recipient.py team_recipient_all_of.py team_responder.py time_of_day_restriction.py time_of_day_restriction_interval.py time_of_day_restriction_interval_all_of.py time_restriction_interval.py user_recipient.py user_recipient_all_of.py user_responder.py user_responder_all_of.py weekday_time_restriction.py weekday_time_restriction_interval.py weekday_time_restriction_interval_all_of.py __init__.py proxy_configuration.py rest.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "# coding: utf-8\n\n\"\"\"\nPython SDK for Opsgenie REST API\n\nPython SDK for Opsgenie REST API # noqa: E501\n\nThe version of the OpenAPI document: 2.0.0\nContact: support@opsgenie.com\nGenerated by: https:\/\/openapi-generator.tech\n\"\"\"\n\n\nimport os\n\nfrom setuptools import setup, find_packages # noqa: H301\n\nNAME = \"opsgenie-sdk\"\nVERSION = \"2.1.5\"\n# To install the library, run the following\n#\n# python setup.py install\n#\n# prerequisite: setuptools\n# http:\/\/pypi.python.org\/pypi\/setuptools\n\nREQUIRES = [\"urllib3 >= 1.26.5\", \"six >= 1.10\", \"certifi\", \"python-dateutil\", \"setuptools >= 21.0.0\", \"tenacity >= 5.0.4\"]\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nsetup(\nname=NAME,\nversion=VERSION,\nauthor=\"OpsGenie\",\nauthor_email=\"support@opsgenie.com\",\ndescription=\"Python SDK for Opsgenie REST API\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/opsgenie\/opsgenie-python-sdk\",\npackages=find_packages(exclude=['samples']),\nkeywords=[\"OpenAPI\", \"OpenAPI-Generator\", \"Python SDK for Opsgenie REST API\", \"OpsGenie\", \"Opsgenie\"],\ninstall_requires=REQUIRES,\ninclude_package_data=True,\nproject_urls={\n'Documentation': 'https:\/\/docs.opsgenie.com\/docs\/opsgenie-python-api',\n'Source': 'https:\/\/github.com\/opsgenie\/opsgenie-python-sdk',\n'Tracker': 'https:\/\/github.com\/opsgenie\/opsgenie-python-sdk\/issues',\n},\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'License :: OSI Approved :: Apache Software License',\n\"Operating System :: OS Independent\",\n]\n)\n"
    },
    {
        "package_name": "optuna-2.10.1",
        "file_list": "LICENSE MANIFEST.in cli.py dashboard.py distributions.py exceptions.py _base.py _evaluator.py _fanova.py _tree.py __init__.py _mean_decrease_impurity.py __init__.py _dump_best_config.py _environment.py _executor.py _pruner.py _variables.py __init__.py botorch.py catalyst.py chainer.py chainermn.py cma.py fastaiv1.py fastaiv2.py keras.py lightgbm.py mlflow.py mxnet.py pytorch_distributed.py pytorch_ignite.py pytorch_lightning.py sklearn.py skopt.py skorch.py tensorboard.py tensorflow.py tfkeras.py wandb.py xgboost.py alias.py optimize.py sklearn.py __init__.py __init__.py logging.py _adapter.py _base.py _motpe.py _nsga2.py _random.py __init__.py study.py trial.py _pareto_front.py __init__.py __init__.py progress_bar.py _base.py _hyperband.py _median.py _nop.py _patient.py _percentile.py _successive_halving.py _threshold.py __init__.py py.typed _base.py _cmaes.py _grid.py _nsga2.py _partial_fixed.py _random.py group_decomposed.py intersection.py __init__.py multi_objective_sampler.py parzen_estimator.py sampler.py __init__.py __init__.py _base.py _cached_storage.py _heartbeat.py _in_memory.py env.py script.py.mako v0.9.0.a.py v1.2.0.a.py v1.3.0.a.py v2.4.0.a.py v2.6.0.a_.py alembic.ini models.py storage.py __init__.py _redis.py __init__.py structs.py study.py _dataframe.py _multi_objective.py _optimize.py _study_direction.py _study_summary.py __init__.py distribution.py integration.py sampler.py storage.py threading.py visualization.py __init__.py _base.py _fixed.py _frozen.py _state.py _trial.py __init__.py type_checking.py version.py _contour.py _edf.py _intermediate_values.py _matplotlib_imports.py _optimization_history.py _parallel_coordinate.py _param_importances.py _pareto_front.py _slice.py _utils.py __init__.py _contour.py _edf.py _intermediate_values.py _optimization_history.py _parallel_coordinate.py _param_importances.py _pareto_front.py _plotly_imports.py _slice.py _utils.py __init__.py _callbacks.py _deprecated.py _experimental.py base.py utils.py wfg.py __init__.py _imports.py _transform.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO pyproject.toml README.md setup.cfg setup.py",
        "setup.py": "import os\nfrom typing import Dict\nfrom typing import List\nfrom typing import Optional\n\nimport pkg_resources\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef get_version() -> str:\n\nversion_filepath = os.path.join(os.path.dirname(__file__), \"optuna\", \"version.py\")\nwith open(version_filepath) as f:\nfor line in f:\nif line.startswith(\"__version__\"):\nreturn line.strip().split()[-1][1:-1]\nassert False\n\n\ndef get_long_description() -> str:\n\nreadme_filepath = os.path.join(os.path.dirname(__file__), \"README.md\")\nwith open(readme_filepath) as f:\nreturn f.read()\n\n\ndef get_install_requires() -> List[str]:\n\nrequirements = [\n\"alembic\",\n\"cliff\",\n\"cmaes>=0.8.2\",\n\"colorlog\",\n\"numpy\",\n\"packaging>=20.0\",\n\"scipy!=1.4.0\",\n\"sqlalchemy>=1.1.0\",\n\"tqdm\",\n\"PyYAML\", # Only used in `optuna\/cli.py`.\n]\nreturn requirements\n\n\ndef get_tests_require() -> List[str]:\n\nreturn get_extras_require()[\"testing\"]\n\n\ndef get_extras_require() -> Dict[str, List[str]]:\n\nrequirements = {\n# TODO(HideakiImamura) Unpin mypy version after fixing \"Duplicate modules\" error in\n# tutorials.\n\"checking\": [\"black\", \"hacking\", \"isort\", \"mypy==0.790\", \"blackdoc\"],\n\"codecov\": [\"codecov\", \"pytest-cov\"],\n\"doctest\": [\n\"cma\",\n\"matplotlib>=3.0.0\",\n\"pandas\",\n\"plotly>=4.0.0\",\n# TODO(nzw0301) remove the constraint of sklearn `1.0.0`\n# after skopt supports sklearn >= 1.0.0\n\"scikit-learn>=0.24.2,<1.0.0\",\n\"scikit-optimize\",\n\"mlflow\",\n],\n\"document\": [\n# bokeh v1 does not works with Jinja v3.\n\"Jinja2<3.0.0\",\n# Jinja2 v2 requires the following MarkupSafe.\n\"MarkupSafe<=2.0.1\",\n# TODO(nzw): Remove the version constraint after resolving the issue\n# https:\/\/github.com\/optuna\/optuna\/issues\/2658.\n\"sphinx<=3.5.4\",\n\"sphinx_rtd_theme<=1.0.0\",\n\"sphinx-copybutton<=0.4.0\",\n\"sphinx-gallery<=0.10.0\",\n\"sphinx-plotly-directive<=0.1.3\",\n\"pillow\",\n\"matplotlib\",\n# TODO(nzw0301) remove the constraint of sklearn `1.0.0`\n# after skopt supports sklearn >= 1.0.0\n\"scikit-learn<1.0.0\",\n\"plotly>=4.0.0\", # optuna\/visualization.\n\"pandas\",\n\"lightgbm\",\n\"torch==1.8.0\",\n\"torchvision==0.9.0\",\n\"torchaudio==0.8.0\",\n\"thop\",\n],\n\"experimental\": [\"redis\"],\n\"testing\": [\n# TODO(toshihikoyanase): Remove the version constraint after resolving the issue\n# https:\/\/github.com\/optuna\/optuna\/issues\/1000.\n\"bokeh<2.0.0\",\n\"chainer>=5.0.0\",\n\"cma\",\n\"fakeredis\",\n\"lightgbm\",\n\"matplotlib>=3.0.0\",\n\"mlflow\",\n\"mpi4py\",\n\"mxnet\",\n\"pandas\",\n\"plotly>=4.0.0\",\n\"pytest\",\n# TODO(nzw0301) remove the constraint of sklearn `1.0.0`\n# after skopt supports sklearn >= 1.0.0\n\"scikit-learn>=0.24.2,<1.0.0\",\n\"scikit-optimize\",\n\"xgboost\",\n\"tensorflow\",\n\"tensorflow-datasets\",\n\"pytorch-ignite\",\n\"pytorch-lightning>=1.0.2\",\n\"skorch\",\n\"catalyst>=21.3\",\n\"torch==1.8.0 ; sys_platform=='darwin'\",\n\"torch==1.8.0+cpu ; sys_platform!='darwin'\",\n\"torchvision==0.9.0 ; sys_platform=='darwin'\",\n\"torchvision==0.9.0+cpu ; sys_platform!='darwin'\",\n\"torchaudio==0.8.0\",\n\"allennlp>=2.2.0,<2.7.0\",\n\"botorch>=0.4.0 ; python_version>'3.6'\",\n\"fastai\",\n],\n\"tests\": [\n\"fakeredis\",\n\"pytest\",\n],\n\"optional\": [\n\"bokeh<2.0.0\", # optuna\/cli.py, optuna\/dashboard.py.\n\"matplotlib>=3.0.0\", # optuna\/visualization\/matplotlib\n\"pandas\", # optuna\/study.py\n\"plotly>=4.0.0\", # optuna\/visualization.\n\"redis\", # optuna\/storages\/redis.py.\n# TODO(nzw0301) remove the constraint of sklearn `1.0.0`\n# after skopt supports sklearn >= 1.0.0\n\"scikit-learn>=0.24.2,<1.0.0\",\n# optuna\/visualization\/param_importances.py.\n],\n\"integration\": [\n# TODO(toshihikoyanase): Remove the version constraint after resolving the issue\n# https:\/\/github.com\/optuna\/optuna\/issues\/1000.\n\"chainer>=5.0.0\",\n\"cma\",\n\"lightgbm\",\n\"mlflow\",\n\"wandb\",\n\"mpi4py\",\n\"mxnet\",\n\"pandas\",\n# TODO(nzw0301) remove the constraint of sklearn `1.0.0`\n# after skopt supports sklearn >= 1.0.0\n\"scikit-learn>=0.24.2,<1.0.0\",\n\"scikit-optimize\",\n\"xgboost\",\n\"tensorflow\",\n\"tensorflow-datasets\",\n\"pytorch-ignite\",\n\"pytorch-lightning>=1.0.2\",\n\"skorch\",\n\"catalyst>=21.3\",\n\"torch==1.8.0 ; sys_platform=='darwin'\",\n\"torch==1.8.0+cpu ; sys_platform!='darwin'\",\n\"torchvision==0.9.0 ; sys_platform=='darwin'\",\n\"torchvision==0.9.0+cpu ; sys_platform!='darwin'\",\n\"torchaudio==0.8.0\",\n\"allennlp>=2.2.0,<2.7.0\",\n\"botorch>=0.4.0 ; python_version>'3.6'\",\n\"fastai\",\n],\n\"benchmark\": [\n\"asv\",\n\"virtualenv\",\n],\n}\n\nreturn requirements\n\n\ndef find_any_distribution(pkgs: List[str]) -> Optional[pkg_resources.Distribution]:\n\nfor pkg in pkgs:\ntry:\nreturn pkg_resources.get_distribution(pkg)\nexcept pkg_resources.DistributionNotFound:\npass\nreturn None\n\n\nsetup(\nname=\"optuna\",\nversion=get_version(),\ndescription=\"A hyperparameter optimization framework\",\nlong_description=get_long_description(),\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Takuya Akiba\",\nauthor_email=\"akiba@preferred.jp\",\nurl=\"https:\/\/optuna.org\/\",\npackages=find_packages(exclude=(\"tests\", \"tests.*\", \"benchmarks\")),\npackage_data={\n\"optuna\": [\n\"storages\/_rdb\/alembic.ini\",\n\"storages\/_rdb\/alembic\/*.*\",\n\"storages\/_rdb\/alembic\/versions\/*.*\",\n\"py.typed\",\n]\n},\npython_requires=\">=3.6\",\ninstall_requires=get_install_requires(),\ntests_require=get_tests_require(),\nextras_require=get_extras_require(),\nentry_points={\n\"console_scripts\": [\"optuna = optuna.cli:main\"],\n\"optuna.command\": [\n\"create-study = optuna.cli:_CreateStudy\",\n\"delete-study = optuna.cli:_DeleteStudy\",\n\"study set-user-attr = optuna.cli:_StudySetUserAttribute\",\n\"studies = optuna.cli:_Studies\",\n\"trials = optuna.cli:_Trials\",\n\"best-trial = optuna.cli:_BestTrial\",\n\"best-trials = optuna.cli:_BestTrials\",\n\"dashboard = optuna.cli:_Dashboard\",\n\"study optimize = optuna.cli:_StudyOptimize\",\n\"storage upgrade = optuna.cli:_StorageUpgrade\",\n\"ask = optuna.cli:_Ask\",\n\"tell = optuna.cli:_Tell\",\n],\n},\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Science\/Research\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Topic :: Scientific\/Engineering\",\n\"Topic :: Scientific\/Engineering :: Mathematics\",\n\"Topic :: Scientific\/Engineering :: Artificial Intelligence\",\n\"Topic :: Software Development\",\n\"Topic :: Software Development :: Libraries\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\n)\n"
    },
    {
        "package_name": "opyoid-1.5.1",
        "file_list": "LICENSE.txt abstract_module.py binding.py binding_registry.py binding_to_provider_adapter.py class_binding.py class_binding_to_provider_adapter.py __init__.py condition.py from_instance_provider.py instance_binding.py instance_binding_to_provider_adapter.py __init__.py module.py item_binding.py list_provider.py multi_binding.py multi_binding_to_provider_adapter.py __init__.py private_module.py from_provider_provider.py provider_binding.py provider_binding_to_provider_adapter.py __init__.py registered_binding.py registered_multi_binding.py root_module.py callable_to_provider_adapter.py from_callable_provider.py self_binding.py self_binding_to_provider_adapter.py __init__.py __init__.py conditional_on_env_var.py env_var_condition.py __init__.py exceptions.py frozen_target.py injection_context.py injection_state.py injector.py injector_options.py named.py provider.py from_binding_provider_factory.py from_cache_provider_factory.py from_registered_binding_provider_factory.py jit_provider_factory.py list_provider_factory.py provider_factory.py provider_provider_factory.py set_provider_factory.py tuple_provider_factory.py type_provider_factory.py union_provider_factory.py __init__.py provider_creator.py __init__.py provider_registry.py immediate_scope.py per_lookup_scope.py scope.py singleton_scope.py singleton_scoped_provider.py thread_scope.py thread_scoped_provider.py __init__.py target.py pep484_type_checker.py pep560_type_checker.py pep585_type_checker.py pep604_type_checker.py __init__.py utils.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import os\n\nimport setuptools\n\nwith open(os.path.join(os.path.dirname(__file__), \"README.md\")) as readme:\nlong_description = readme.read()\n\nsetuptools.setup(\nname=\"opyoid\",\nversion=\"1.5.1\",\nurl=\"https:\/\/github.com\/illuin-tech\/opyoid\/\",\nauthor=\"Illuin Technology\",\nauthor_email=\"contact@illuin.tech\",\ndescription=\"Dependency injection library\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nzip_safe=False,\nplatforms=\"any\",\ninstall_requires=[\"attrs>=19.1.0,<23.0.0\"],\npython_requires=\">=3.6,<4.0\",\npackages=setuptools.find_packages(include=[\"opyoid\", \"opyoid.*\"]),\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Software Development :: Libraries\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\n)\n"
    },
    {
        "package_name": "ordered-set-4.1.0",
        "file_list": ".codecov.yml .coveragerc .flake8 .gitignore .mailmap MIT-LICENSE py.typed __init__.py PKG-INFO pyproject.toml pytest.ini README.md setup.py test_ordered_set.py tox.ini",
        "setup.py": "# This is a wrapper for environments that require a `setup.py`-based installation.\n# This is not the primary way of installing ordered-set.\n#\n# The primary setup is in pyproject.toml. You can install ordered-set as a\n# dependency using `poetry` or `pip`.\n\nfrom setuptools import setup\n\npackages = ['ordered_set']\n\nsetup_kwargs = {\n'name': 'ordered-set',\n'version': '4.1.0',\n'description': 'A set that remembers its order, and allows looking up its items by their index in that order.',\n'author': 'Elia Robyn Lake',\n'author_email': 'elial@ec.ai',\n'url': 'https:\/\/github.com\/rspeer\/ordered-set',\n'packages': packages,\n'python_requires': '>=3.7',\n}\n\n\nsetup(**setup_kwargs)\n\n"
    },
    {
        "package_name": "oscrypto-1.3.0",
        "file_list": "changelog.md asymmetric.md kdf.md keys.md oscrypto.md readme.md symmetric.md tls.md trust_list.md util.md LICENSE asymmetric.py errors.py kdf.py keys.py symmetric.py tls.py trust_list.py util.py version.py _asn1.py _asymmetric.py _cipher_suites.py _ecdsa.py _errors.py _ffi.py _int.py trust_list.py __init__.py asymmetric.py symmetric.py tls.py trust_list.py util.py _common_crypto.py _common_crypto_cffi.py _common_crypto_ctypes.py _core_foundation.py _core_foundation_cffi.py _core_foundation_ctypes.py _security.py _security_cffi.py _security_ctypes.py __init__.py asymmetric.py symmetric.py tls.py util.py _libcrypto.py _libcrypto_cffi.py _libcrypto_ctypes.py _libssl.py _libssl_cffi.py _libssl_ctypes.py __init__.py _pkcs1.py _pkcs12.py _pkcs5.py _rand.py _tls.py _types.py asymmetric.py symmetric.py tls.py trust_list.py util.py _advapi32.py _advapi32_cffi.py _advapi32_ctypes.py _cng.py _cng_cffi.py _cng_ctypes.py _crypt32.py _crypt32_cffi.py _crypt32_ctypes.py _decode.py _kernel32.py _kernel32_cffi.py _kernel32_ctypes.py _secur32.py _secur32_cffi.py _secur32_ctypes.py __init__.py __init__.py dependency_links.txt LICENSE PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO readme.md setup.cfg setup.py",
        "setup.py": "import codecs\nimport os\nimport shutil\nimport sys\nimport warnings\n\nimport setuptools\nfrom setuptools import find_packages, setup, Command\nfrom setuptools.command.egg_info import egg_info\n\n\nPACKAGE_NAME = 'oscrypto'\nPACKAGE_VERSION = '1.3.0'\nPACKAGE_ROOT = os.path.dirname(os.path.abspath(__file__))\n\n\n# setuptools 38.6.0 and newer know about long_description_content_type, but\n# distutils still complains about it, so silence the warning\nsv = setuptools.__version__\nsvi = tuple(int(o) if o.isdigit() else o for o in sv.split('.'))\nif svi >= (38, 6):\nwarnings.filterwarnings(\n'ignore',\n\"Unknown distribution option: 'long_description_content_type'\",\nmodule='distutils.dist'\n)\n\n\n# Try to load the tests first from the source repository layout. If that\n# doesn't work, we assume this file is in the release package, and the tests\n# are part of the package {PACKAGE_NAME}_tests.\nif os.path.exists(os.path.join(PACKAGE_ROOT, 'tests')):\ntests_require = []\ntest_suite = 'tests.make_suite'\nelse:\ntests_require = ['%s_tests' % PACKAGE_NAME]\ntest_suite = '%s_tests.make_suite' % PACKAGE_NAME\n\n\n# This allows us to send the LICENSE and docs when creating a sdist. Wheels\n# automatically include the LICENSE, and don't need the docs. For these\n# to be included, the command must be \"python setup.py sdist\".\npackage_data = {}\nif sys.argv[1:] == ['sdist'] or sorted(sys.argv[1:]) == ['-q', 'sdist']:\npackage_data[PACKAGE_NAME] = [\n'..\/LICENSE',\n'..\/*.md',\n'..\/docs\/*.md',\n]\n\n\n# Ensures a copy of the LICENSE is included with the egg-info for\n# install and bdist_egg commands\nclass EggInfoCommand(egg_info):\ndef run(self):\negg_info_path = os.path.join(\nPACKAGE_ROOT,\n'%s.egg-info' % PACKAGE_NAME\n)\nif not os.path.exists(egg_info_path):\nos.mkdir(egg_info_path)\nshutil.copy2(\nos.path.join(PACKAGE_ROOT, 'LICENSE'),\nos.path.join(egg_info_path, 'LICENSE')\n)\negg_info.run(self)\n\n\nclass CleanCommand(Command):\nuser_options = [\n('all', 'a', '(Compatibility with original clean command)'),\n]\n\ndef initialize_options(self):\nself.all = False\n\ndef finalize_options(self):\npass\n\ndef run(self):\nsub_folders = ['build', 'temp', '%s.egg-info' % PACKAGE_NAME]\nif self.all:\nsub_folders.append('dist')\nfor sub_folder in sub_folders:\nfull_path = os.path.join(PACKAGE_ROOT, sub_folder)\nif os.path.exists(full_path):\nshutil.rmtree(full_path)\nfor root, dirs, files in os.walk(os.path.join(PACKAGE_ROOT, PACKAGE_NAME)):\nfor filename in files:\nif filename[-4:] == '.pyc':\nos.unlink(os.path.join(root, filename))\nfor dirname in list(dirs):\nif dirname == '__pycache__':\nshutil.rmtree(os.path.join(root, dirname))\n\n\nreadme = ''\nwith codecs.open(os.path.join(PACKAGE_ROOT, 'readme.md'), 'r', 'utf-8') as f:\nreadme = f.read()\n\n\nsetup(\nname=PACKAGE_NAME,\nversion=PACKAGE_VERSION,\n\ndescription=(\n'TLS (SSL) sockets, key generation, encryption, decryption, signing, '\n'verification and KDFs using the OS crypto libraries. Does not require '\n'a compiler, and relies on the OS for patching. Works on Windows, OS X '\n'and Linux\/BSD.'\n),\nlong_description=readme,\nlong_description_content_type='text\/markdown',\n\nurl='https:\/\/github.com\/wbond\/oscrypto',\n\nauthor='wbond',\nauthor_email='will@wbond.net',\n\nlicense='MIT',\n\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n\n'Intended Audience :: Developers',\n\n'License :: OSI Approved :: MIT License',\n\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: Implementation :: PyPy',\n\n'Topic :: Security :: Cryptography',\n],\n\nkeywords='crypto pki tls ssl x509 certificate encrypt decrypt sign verify rsa dsa ec dh',\n\ninstall_requires=['asn1crypto>=1.5.1'],\n\npackages=find_packages(exclude=['tests*', 'dev*']),\npackage_data=package_data,\n\ntests_require=tests_require,\ntest_suite=test_suite,\n\ncmdclass={\n'clean': CleanCommand,\n'egg_info': EggInfoCommand,\n}\n)\n"
    },
    {
        "package_name": "osmnx-1.2.2",
        "file_list": "CHANGELOG.md LICENSE.txt MANIFEST.in bearing.py distance.py downloader.py elevation.py folium.py geocoder.py geometries.py graph.py io.py osm_xml.py plot.py projection.py settings.py simplification.py speed.py stats.py truncate.py utils.py utils_geo.py utils_graph.py _api.py _errors.py _polygon_features.py _version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md requirements.txt setup.cfg setup.py",
        "setup.py": "\"\"\"\nOSMnx setup script.\n\nSee license in LICENSE.txt.\n\"\"\"\n\nimport os\n\nfrom setuptools import setup\n\n# provide a long description using reStructuredText\nLONG_DESCRIPTION = r\"\"\"\n**OSMnx** is a Python package that lets you download spatial data and\nmodel, project, visualize, and analyze real-world street networks from\nOpenStreetMap's APIs. Users can download and model walkable, drivable, or\nbikeable urban networks with a single line of Python code, and then easily\nanalyze and visualize them. You can just as easily download and work with\namenities\/points of interest, building footprints, elevation data, street\nbearings\/orientations, speed\/travel time, and network routing.\n\nCitation info: Boeing, G. 2017. `OSMnx: New Methods for Acquiring,\nConstructing, Analyzing, and Visualizing Complex Street Networks`_.\n*Computers, Environment and Urban Systems* 65, 126-139.\ndoi:10.1016\/j.compenvurbsys.2017.05.004\n\nRead the `docs`_ or see usage examples and demos on `GitHub`_.\n\n.. _GitHub: https:\/\/github.com\/gboeing\/osmnx-examples\n.. _docs: https:\/\/osmnx.readthedocs.io\n.. _OSMnx\\: New Methods for Acquiring, Constructing, Analyzing, and Visualizing Complex Street Networks: http:\/\/geoffboeing.com\/publications\/osmnx-complex-street-networks\/\n\"\"\"\n\n# list of classifiers from the PyPI classifiers trove\nCLASSIFIERS = [\n\"Development Status :: 5 - Production\/Stable\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Intended Audience :: Science\/Research\",\n\"Topic :: Scientific\/Engineering :: GIS\",\n\"Topic :: Scientific\/Engineering :: Visualization\",\n\"Topic :: Scientific\/Engineering :: Physics\",\n\"Topic :: Scientific\/Engineering :: Mathematics\",\n\"Topic :: Scientific\/Engineering :: Information Analysis\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n]\n\nDESC = (\n\"Retrieve, model, analyze, and visualize OpenStreetMap street networks and other spatial data\"\n)\n\n# only specify install_requires if not in RTD environment\nif os.getenv(\"READTHEDOCS\") == \"True\":\nINSTALL_REQUIRES = []\nelse:\nwith open(\"requirements.txt\") as f:\nINSTALL_REQUIRES = [line.strip() for line in f.readlines()]\n\n# now call setup\nsetup(\nname=\"osmnx\",\nversion=\"1.2.2\",\ndescription=DESC,\nlong_description=LONG_DESCRIPTION,\nclassifiers=CLASSIFIERS,\nurl=\"https:\/\/github.com\/gboeing\/osmnx\",\nauthor=\"Geoff Boeing\",\nauthor_email=\"boeing@usc.edu\",\nlicense=\"MIT\",\nplatforms=\"any\",\npackages=[\"osmnx\"],\npython_requires=\">=3.8\",\ninstall_requires=INSTALL_REQUIRES,\nextras_require={\n\"entropy\": [\"scipy\"],\n\"nearest_neighbor\": [\"scikit-learn\", \"scipy\"],\n\"raster\": [\"gdal\", \"rasterio\"],\n\"web_map\": [\"folium\"],\n},\n)\n"
    },
    {
        "package_name": "overrides-6.2.0",
        "file_list": "LICENSE MANIFEST.in enforce.py final.py overrides.py py.typed signature.py typing_utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py test_decorator_params.py test_enforce__py38.py test_final.py test_named_and_positional__py38.py test_overrides.py test_signatures.py test_somefinalpackage.py test_somepackage.py test_special_cases.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom distutils.core import setup\nfrom setuptools import find_packages # type: ignore\nfrom os.path import abspath, join, dirname\n\nname = \"Mikko Korpela\"\n# I might be just a little bit too much afraid of those bots..\naddress = name.lower().replace(\" \", \".\") + chr(64) + \"gmail.com\"\n\ndesc = \"A decorator to automatically detect mismatch when overriding a method.\"\n\nCURDIR = dirname(abspath(__file__))\n\nwith open(join(CURDIR, \"README.rst\")) as f:\nLONG_DESCRIPTION = f.read()\n\nsetup(\nname=\"overrides\",\nversion=\"6.2.0\",\ndescription=desc,\nlong_description=LONG_DESCRIPTION,\nauthor=name,\nauthor_email=address,\nurl=\"https:\/\/github.com\/mkorpela\/overrides\",\npackages=find_packages(),\npackage_data={\n\"overrides\": [\"*.pyi\", \"py.typed\"],\n},\ninclude_package_data=True,\ninstall_requires=['typing;python_version<\"3.5\"'],\npython_requires=\">=3.6\",\nlicense=\"Apache License, Version 2.0\",\nkeywords=[\"override\", \"inheritence\", \"OOP\"],\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n],\n)\n"
    },
    {
        "package_name": "oyaml-1.0",
        "file_list": "LICENSE MANIFEST.in dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt oyaml.py PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "from setuptools import setup\n\nsetup(\nname=\"oyaml\",\nversion=\"1.0\",\ndescription=\"Ordered YAML: drop-in replacement for PyYAML which preserves dict ordering\",\nlong_description=open(\"README.rst\").read(),\nauthor=\"Wim Glenn\",\nauthor_email=\"hey@wimglenn.com\",\nurl=\"https:\/\/github.com\/wimglenn\/oyaml\",\nlicense=\"MIT\",\npy_modules=[\"oyaml\"],\ninstall_requires=[\"pyyaml\"],\n)\n"
    },
    {
        "package_name": "palettable-3.3.0",
        "file_list": "ez_setup.py license.txt MANIFEST.in cartocolorspalette.py colormaps.py diverging.py qualitative.py sequential.py __init__.py cmoceanpalette.py colormaps.py diverging.py sequential.py __init__.py colorbrewer.py colorbrewer_all_schemes.csv colorbrewer_all_schemes.json colorbrewer_licence.txt colorbrewer_schemes_csv_to_json.py diverging.py qualitative.py sequential.py __init__.py cubehelix.py __init__.py colordata.py diverging.py lightbartlein.py sequential.py __init__.py colormaps.py matplotlib.py __init__.py colordata.py mycarta.py __init__.py palette.py colordata.py diverging.py scientific.py sequential.py __init__.py tableau.py __init__.py utils.py wesanderson.py __init__.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py test_installed.py",
        "setup.py": "from ez_setup import use_setuptools\nuse_setuptools()\n\nfrom setuptools import setup, find_packages\n\nwith open('README.rst', 'r') as f:\nlong_description = f.read()\n\nsetup(\nname='palettable',\nversion='3.3.0',\ndescription=(\n'Color palettes for Python'),\nlong_description=long_description,\nauthor='Matt Davis',\nauthor_email='jiffyclub@gmail.com',\nurl='https:\/\/jiffyclub.github.io\/palettable\/',\npackages=find_packages(exclude=[\"*.test\"]),\npackage_data={'palettable.colorbrewer': ['data\/colorbrewer*']},\nclassifiers=[\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Topic :: Scientific\/Engineering :: Visualization'])\n"
    },
    {
        "package_name": "pandas-1.4.3",
        "file_list": "README.txt iris.data make.py conf.py code_style.rst contributing.rst contributing_codebase.rst contributing_docstring.rst contributing_documentation.rst contributing_environment.rst debugging_extensions.rst developer.rst extending.rst index.rst internals.rst maintaining.rst meeting.rst policies.rst roadmap.rst test_writing.rst ecosystem.rst comparison_with_r.rst comparison_with_sas.rst comparison_with_spreadsheets.rst comparison_with_sql.rst comparison_with_stata.rst case.rst column_operations.rst column_selection.rst construct_dataframe.rst copies.rst extract_substring.rst filtering.rst find_substring.rst groupby.rst if_then.rst introduction.rst length.rst limit.rst merge.rst merge_setup.rst missing.rst missing_intro.rst nth_word.rst sorting.rst time_date.rst transform.rst index.rst index.rst install.rst 01_table_oriented.rst 02_read_write.rst 03_subset_data.rst 04_plotting.rst 05_add_columns.rst 06_calculate_statistics.rst 07_reshape_table_layout.rst 08_combine_dataframes.rst 09_timeseries.rst 10_text_data.rst air_quality_no2.rst titanic.rst index.rst overview.rst tutorials.rst index.rst.template arrays.rst extensions.rst frame.rst general_functions.rst general_utility_functions.rst groupby.rst index.rst indexing.rst io.rst offset_frequency.rst plotting.rst resampling.rst series.rst style.rst window.rst 10min.rst advanced.rst basics.rst boolean.rst categorical.rst computation.rst cookbook.rst dsintro.rst duplicates.rst enhancingperf.rst gotchas.rst groupby.rst index.rst indexing.rst integer_na.rst io.rst merging.rst missing_data.rst options.rst reshaping.rst scale.rst sparse.rst style.ipynb myhtml.tpl text.rst timedeltas.rst timeseries.rst visualization.rst window.rst index.rst v0.10.0.rst v0.10.1.rst v0.11.0.rst v0.12.0.rst v0.13.0.rst v0.13.1.rst v0.14.0.rst v0.14.1.rst v0.15.0.rst v0.15.1.rst v0.15.2.rst v0.16.0.rst v0.16.1.rst v0.16.2.rst v0.17.0.rst v0.17.1.rst v0.18.0.rst v0.18.1.rst v0.19.0.rst v0.19.1.rst v0.19.2.rst v0.20.0.rst v0.20.2.rst v0.20.3.rst v0.21.0.rst v0.21.1.rst v0.22.0.rst v0.23.0.rst v0.23.1.rst v0.23.2.rst v0.23.3.rst v0.23.4.rst v0.24.0.rst v0.24.1.rst v0.24.2.rst v0.25.0.rst v0.25.1.rst v0.25.2.rst v0.25.3.rst v0.4.x.rst v0.5.0.rst v0.6.0.rst v0.6.1.rst v0.7.0.rst v0.7.1.rst v0.7.2.rst v0.7.3.rst v0.8.0.rst v0.8.1.rst v0.9.0.rst v0.9.1.rst v1.0.0.rst v1.0.1.rst v1.0.2.rst v1.0.3.rst v1.0.4.rst v1.0.5.rst v1.1.0.rst v1.1.1.rst v1.1.2.rst v1.1.3.rst v1.1.4.rst v1.1.5.rst v1.2.0.rst v1.2.1.rst v1.2.2.rst v1.2.3.rst v1.2.4.rst v1.2.5.rst v1.3.0.rst v1.3.1.rst v1.3.2.rst v1.3.3.rst v1.3.4.rst v1.3.5.rst v1.4.0.rst v1.4.1.rst v1.4.2.rst v1.4.3.rst getting_started.css pandas.css index_api.svg index_contribute.svg index_getting_started.svg index_user_guide.svg logo_r.svg logo_sas.svg logo_sql.svg logo_stata.svg question_mark_noback.svg 01_table_dataframe.svg 01_table_series.svg 02_io_readwrite.svg 03_subset_columns.svg 03_subset_columns_rows.svg 03_subset_rows.svg 04_plot_overview.svg 05_newcolumn_1.svg 05_newcolumn_2.svg 05_newcolumn_3.svg 06_aggregate.svg 06_groupby.svg 06_groupby_agg_detail.svg 06_groupby_select_detail.svg 06_reduction.svg 06_valuecounts.svg 07_melt.svg 07_pivot.svg 07_pivot_table.svg 08_concat_column.svg 08_concat_row.svg 08_merge_left.svg logo_excel.svg stub announce.py contributors.py README.rst accessor.rst accessor_attribute.rst accessor_callable.rst accessor_method.rst class.rst class_without_autosummary.rst LICENSE DATEUTIL_LICENSE HAVEN_LICENSE HAVEN_MIT MUSL_LICENSE NUMPY_LICENSE OTHER PACKAGING_LICENSE PSF_LICENSE PYUPGRADE_LICENSE SAS7BDAT_LICENSE SCIPY_LICENSE ULTRAJSON_LICENSE XARRAY_LICENSE MANIFEST.in __init__.py __init__.py __init__.py __init__.py __init__.py chainmap.py function.py __init__.py pickle_compat.py pyarrow.py _optional.py __init__.py conftest.py accessor.py algorithms.py api.py apply.py arraylike.py base.py boolean.py categorical.py datetimelike.py datetimes.py floating.py integer.py interval.py masked.py numeric.py numpy_.py period.py accessor.py array.py dtype.py scipy_sparse.py __init__.py string_.py string_arrow.py timedeltas.py _arrow_utils.py _mixins.py _ranges.py __init__.py masked_reductions.py putmask.py quantile.py replace.py take.py transforms.py __init__.py base.py common.py align.py api.py check.py common.py engines.py eval.py expr.py expressions.py ops.py parsing.py pytables.py scope.py __init__.py config_init.py construction.py describe.py api.py base.py cast.py common.py concat.py dtypes.py generic.py inference.py missing.py __init__.py flags.py frame.py generic.py base.py categorical.py generic.py groupby.py grouper.py indexing.py numba_.py ops.py __init__.py index.py objects.py utils.py __init__.py accessors.py api.py base.py category.py datetimelike.py datetimes.py extension.py frozen.py interval.py multi.py numeric.py period.py range.py timedeltas.py __init__.py indexing.py api.py array_manager.py base.py blocks.py concat.py construction.py managers.py ops.py __init__.py missing.py nanops.py array_ops.py common.py dispatch.py docstrings.py invalid.py mask_ops.py methods.py missing.py __init__.py resample.py api.py concat.py melt.py merge.py pivot.py reshape.py tile.py util.py __init__.py roperator.py sample.py series.py shared_docs.py sorting.py api.py __init__.py accessor.py base.py object_array.py __init__.py datetimes.py numeric.py timedeltas.py times.py __init__.py hashing.py numba_.py __init__.py common.py doc.py ewm.py expanding.py numba_.py online.py rolling.py __init__.py executor.py mean_.py min_max_.py shared.py sum_.py var_.py __init__.py __init__.py __init__.py __init__.py api.py __init__.py clipboards.py common.py date_converters.py _base.py _odfreader.py _odswriter.py _openpyxl.py _pyxlsb.py _util.py _xlrd.py _xlsxwriter.py _xlwt.py __init__.py feather_format.py console.py css.py csvs.py excel.py format.py html.py info.py latex.py printing.py string.py style.py style_render.py html.tpl html_style.tpl html_table.tpl latex.tpl latex_longtable.tpl latex_table.tpl xml.py _color_data.py __init__.py gbq.py html.py _json.py _normalize.py _table_schema.py __init__.py orc.py parquet.py arrow_parser_wrapper.py base_parser.py c_parser_wrapper.py python_parser.py readers.py __init__.py pickle.py pytables.py sas.pyx sas7bdat.py sasreader.py sas_constants.py sas_xport.py __init__.py spss.py sql.py stata.py xml.py __init__.py _core.py boxplot.py compat.py converter.py core.py groupby.py hist.py misc.py style.py timeseries.py tools.py __init__.py _misc.py __init__.py testing.py test_api.py test_types.py __init__.py common.py conftest.py test_frame_apply.py test_frame_apply_relabeling.py test_frame_transform.py test_invalid_arg.py test_series_apply.py test_series_apply_relabeling.py test_series_transform.py test_str.py __init__.py common.py conftest.py test_array_ops.py test_categorical.py test_datetime64.py test_interval.py test_numeric.py test_object.py test_period.py test_timedelta64.py __init__.py test_arithmetic.py test_astype.py test_comparison.py test_construction.py test_function.py test_indexing.py test_logical.py test_ops.py test_reduction.py test_repr.py __init__.py common.py conftest.py test_algos.py test_analytics.py test_api.py test_astype.py test_constructors.py test_dtypes.py test_indexing.py test_missing.py test_operators.py test_replace.py test_repr.py test_sorting.py test_subclass.py test_take.py test_warnings.py __init__.py test_constructors.py test_reductions.py __init__.py conftest.py test_arithmetic.py test_astype.py test_comparison.py test_concat.py test_construction.py test_function.py test_repr.py test_to_numpy.py __init__.py conftest.py test_arithmetic.py test_comparison.py test_concat.py test_construction.py test_dtypes.py test_function.py test_indexing.py test_repr.py __init__.py test_astype.py test_interval.py test_ops.py __init__.py test_arithmetic.py test_arrow_compat.py test_function.py __init__.py masked_shared.py test_arrow_compat.py test_astype.py test_constructors.py test_reductions.py __init__.py test_accessor.py test_arithmetics.py test_array.py test_combine_concat.py test_dtype.py test_libsparse.py __init__.py test_string.py test_string_arrow.py __init__.py test_array.py test_datetimelike.py test_datetimes.py test_ndarray_backed.py test_numpy.py test_period.py test_timedeltas.py test_constructors.py test_reductions.py __init__.py __init__.py common.py test_constructors.py test_conversion.py test_fillna.py test_misc.py test_transpose.py test_unique.py test_value_counts.py __init__.py test_compat.py test_eval.py __init__.py test_config.py test_localization.py __init__.py test_extract_array.py __init__.py test_can_hold_element.py test_construct_from_scalar.py test_construct_ndarray.py test_construct_object_arr.py test_dict_compat.py test_downcast.py test_find_common_type.py test_infer_datetimelike.py test_infer_dtype.py test_maybe_box_native.py test_promote.py __init__.py test_common.py test_concat.py test_dtypes.py test_generic.py test_inference.py test_missing.py __init__.py arrays.py test_bool.py test_string.py test_timestamp.py __init__.py base.py casting.py constructors.py dim2.py dtype.py getitem.py groupby.py index.py interface.py io.py methods.py missing.py ops.py printing.py reduce.py reshaping.py setitem.py __init__.py conftest.py array.py __init__.py array.py test_decimal.py __init__.py array.py test_json.py __init__.py array.py test_list.py __init__.py test_boolean.py test_categorical.py test_common.py test_datetime.py test_extension.py test_external_block.py test_floating.py test_integer.py test_interval.py test_numpy.py test_period.py test_sparse.py test_string.py __init__.py common.py conftest.py test_from_dict.py test_from_records.py __init__.py test_delitem.py test_get.py test_getitem.py test_get_value.py test_indexing.py test_insert.py test_lookup.py test_mask.py test_setitem.py test_set_value.py test_take.py test_where.py test_xs.py __init__.py test_add_prefix_suffix.py test_align.py test_append.py test_asfreq.py test_asof.py test_assign.py test_astype.py test_at_time.py test_between_time.py test_clip.py test_combine.py test_combine_first.py test_compare.py test_convert.py test_convert_dtypes.py test_copy.py test_count.py test_count_with_level_deprecated.py test_cov_corr.py test_describe.py test_diff.py test_dot.py test_drop.py test_droplevel.py test_dropna.py test_drop_duplicates.py test_dtypes.py test_duplicated.py test_equals.py test_explode.py test_fillna.py test_filter.py test_first_and_last.py test_first_valid_index.py test_get_numeric_data.py test_head_tail.py test_infer_objects.py test_interpolate.py test_isin.py test_is_homogeneous_dtype.py test_join.py test_matmul.py test_nlargest.py test_pct_change.py test_pipe.py test_pop.py test_quantile.py test_rank.py test_reindex.py test_reindex_like.py test_rename.py test_rename_axis.py test_reorder_levels.py test_replace.py test_reset_index.py test_round.py test_sample.py test_select_dtypes.py test_set_axis.py test_set_index.py test_shift.py test_sort_index.py test_sort_values.py test_swapaxes.py test_swaplevel.py test_to_csv.py test_to_dict.py test_to_dict_of_blocks.py test_to_numpy.py test_to_period.py test_to_records.py test_to_timestamp.py test_transpose.py test_truncate.py test_tz_convert.py test_tz_localize.py test_update.py test_values.py test_value_counts.py __init__.py test_alter_axes.py test_api.py test_arithmetic.py test_block_internals.py test_constructors.py test_cumulative.py test_iteration.py test_logical_ops.py test_nonunique_indexes.py test_npfuncs.py test_query_eval.py test_reductions.py test_repr_info.py test_stack_unstack.py test_subclass.py test_ufunc.py test_unary.py test_validate.py __init__.py test_duplicate_labels.py test_finalize.py test_frame.py test_generic.py test_label_or_level_utils.py test_series.py test_to_xarray.py __init__.py test_aggregate.py test_cython.py test_numba.py test_other.py __init__.py conftest.py test_allowlist.py test_any_all.py test_apply.py test_apply_mutate.py test_bin_groupby.py test_categorical.py test_counting.py test_filters.py test_frame_value_counts.py test_function.py test_groupby.py test_groupby_dropna.py test_groupby_shift_diff.py test_groupby_subclass.py test_grouping.py test_indexing.py test_index_as_string.py test_libgroupby.py test_min_max.py test_missing.py test_nth.py test_numba.py test_nunique.py test_pipe.py test_quantile.py test_rank.py test_sample.py test_size.py test_timegrouper.py test_value_counts.py test_numba.py test_transform.py __init__.py __init__.py test_constructors.py test_formats.py test_indexing.py test_pickle.py test_reshape.py test_setops.py test_where.py __init__.py test_append.py test_astype.py test_category.py test_constructors.py test_equals.py test_fillna.py test_formats.py test_indexing.py test_map.py test_reindex.py __init__.py common.py conftest.py datetimelike.py test_drop_duplicates.py test_equals.py test_indexing.py test_is_monotonic.py test_nat.py test_sort_values.py test_value_counts.py __init__.py test_astype.py test_factorize.py test_fillna.py test_insert.py test_isocalendar.py test_repeat.py test_shift.py test_snap.py test_to_frame.py test_to_period.py test_to_series.py __init__.py test_asof.py test_constructors.py test_datetime.py test_datetimelike.py test_date_range.py test_delete.py test_formats.py test_freq_attr.py test_indexing.py test_join.py test_map.py test_misc.py test_npfuncs.py test_ops.py test_partial_slicing.py test_pickle.py test_reindex.py test_scalar_compat.py test_setops.py test_timezones.py test_unique.py __init__.py test_astype.py test_base.py test_constructors.py test_equals.py test_formats.py test_indexing.py test_interval.py test_interval_range.py test_interval_tree.py test_join.py test_pickle.py test_setops.py __init__.py conftest.py test_analytics.py test_astype.py test_compat.py test_constructors.py test_conversion.py test_copy.py test_drop.py test_duplicates.py test_equivalence.py test_formats.py test_get_level_values.py test_get_set.py test_indexing.py test_integrity.py test_isin.py test_join.py test_lexsort.py test_missing.py test_monotonic.py test_names.py test_partial_indexing.py test_pickle.py test_reindex.py test_reshape.py test_setops.py test_sorting.py test_take.py __init__.py test_astype.py test_indexing.py test_join.py test_numeric.py test_setops.py __init__.py test_astype.py test_indexing.py __init__.py test_asfreq.py test_astype.py test_factorize.py test_fillna.py test_insert.py test_is_full.py test_repeat.py test_shift.py test_to_timestamp.py __init__.py test_constructors.py test_formats.py test_freq_attr.py test_indexing.py test_join.py test_monotonic.py test_partial_slicing.py test_period.py test_period_range.py test_pickle.py test_resolution.py test_scalar_compat.py test_searchsorted.py test_setops.py test_tools.py __init__.py test_constructors.py test_indexing.py test_join.py test_range.py test_setops.py __init__.py test_any_index.py test_base.py test_common.py test_engines.py test_frozen.py test_indexing.py test_index_new.py test_numpy_compat.py test_setops.py test_astype.py test_factorize.py test_fillna.py test_insert.py test_repeat.py test_shift.py __init__.py test_constructors.py test_delete.py test_formats.py test_freq_attr.py test_indexing.py test_join.py test_ops.py test_pickle.py test_scalar_compat.py test_searchsorted.py test_setops.py test_timedelta.py test_timedelta_range.py __init__.py __init__.py common.py test_interval.py test_interval_new.py __init__.py test_chaining_and_caching.py test_datetime.py test_getitem.py test_iloc.py test_indexing_slow.py test_loc.py test_multiindex.py test_partial.py test_setitem.py test_slice.py test_sorted.py __init__.py test_at.py test_categorical.py test_chaining_and_caching.py test_check_indexer.py test_coercion.py test_datetime.py test_floats.py test_iat.py test_iloc.py test_indexers.py test_indexing.py test_loc.py test_na_indexing.py test_partial.py test_scalar.py __init__.py test_api.py test_internals.py test_managers.py __init__.py conftest.py fixed_width_format.txt gbq_fake_job.txt empty_frame_v1_2_4-GH#42345.pkl simple.parquet test_mi_py27.pkl test_py27.pkl baby_names.xml books.xml cta_rail_lines.kml flatten_doc.xsl row_field_output.xsl conftest.py test_odf.py test_odswriter.py test_openpyxl.py test_readers.py test_style.py test_writers.py test_xlrd.py test_xlsxwriter.py test_xlwt.py __init__.py test_bar.py test_deprecated.py test_format.py test_highlight.py test_html.py test_matplotlib.py test_non_unique.py test_style.py test_tooltip.py test_to_latex.py __init__.py test_console.py test_css.py test_eng_formatting.py test_format.py test_info.py test_printing.py test_series_info.py test_to_csv.py test_to_excel.py test_to_html.py test_to_latex.py test_to_markdown.py test_to_string.py __init__.py generate_legacy_storage_files.py conftest.py test_compression.py test_deprecated_kwargs.py test_json_table_schema.py test_json_table_schema_ext_dtype.py test_normalize.py test_pandas.py test_readlines.py test_ujson.py __init__.py test_chunksize.py test_common_basic.py test_data_list.py test_decimal.py test_file_buffer_url.py test_float.py test_index.py test_inf.py test_ints.py test_iterator.py test_read_errors.py test_verbose.py __init__.py conftest.py test_categorical.py test_dtypes_basic.py test_empty.py __init__.py test_comment.py test_compression.py test_converters.py test_c_parser_only.py test_dialect.py test_encoding.py test_header.py test_index_col.py test_mangle_dupes.py test_multi_thread.py test_na_values.py test_network.py test_parse_dates.py test_python_parser_only.py test_quoting.py test_read_fwf.py test_skiprows.py test_textreader.py test_unsupported.py test_parse_dates.py test_strings.py test_usecols_basic.py __init__.py __init__.py common.py conftest.py test_append.py test_categorical.py test_compat.py test_complex.py test_errors.py test_file_handling.py test_keys.py test_put.py test_pytables_missing.py test_read.py test_retain_attributes.py test_round_trip.py test_select.py test_store.py test_subclass.py test_timezones.py test_time_series.py __init__.py test_sas.py test_sas7bdat.py test_xport.py __init__.py test_clipboard.py test_common.py test_compression.py test_date_converters.py test_feather.py test_fsspec.py test_gcs.py test_html.py test_orc.py test_parquet.py test_pickle.py test_s3.py test_spss.py test_sql.py test_stata.py test_user_agent.py test_to_xml.py test_xml.py __init__.py __init__.py test_hashtable.py test_join.py test_lib.py __init__.py common.py test_frame.py test_frame_color.py test_frame_groupby.py test_frame_legend.py test_frame_subplots.py test_hist_box_by.py __init__.py test_backend.py test_boxplot_method.py test_common.py test_converter.py test_datetimelike.py test_groupby.py test_hist_method.py test_misc.py test_series.py test_style.py __init__.py test_reductions.py test_stat_reductions.py __init__.py conftest.py test_base.py test_datetime_index.py test_deprecated.py test_period_index.py test_resampler_grouper.py test_resample_api.py test_timedelta.py test_time_grouper.py __init__.py conftest.py test_append.py test_append_common.py test_categorical.py test_concat.py test_dataframe.py test_datetimes.py test_empty.py test_index.py test_invalid.py test_series.py test_sort.py __init__.py test_join.py test_merge.py test_merge_asof.py test_merge_cross.py test_merge_index_as_string.py test_merge_ordered.py test_multi.py __init__.py test_crosstab.py test_cut.py test_get_dummies.py test_melt.py test_pivot.py test_pivot_multilevel.py test_qcut.py test_union_categoricals.py test_util.py __init__.py test_arithmetic.py test_interval.py test_ops.py __init__.py test_asfreq.py test_period.py __init__.py test_nat.py test_na_scalar.py test_arithmetic.py test_constructors.py test_formats.py test_timedelta.py __init__.py test_arithmetic.py test_comparisons.py test_constructors.py test_formats.py test_rendering.py test_timestamp.py test_timezones.py test_unary_ops.py __init__.py __init__.py test_cat_accessor.py test_dt_accessor.py test_sparse_accessor.py test_str_accessor.py __init__.py test_datetime.py test_delitem.py test_get.py test_getitem.py test_indexing.py test_mask.py test_setitem.py test_set_value.py test_take.py test_where.py test_xs.py __init__.py test_align.py test_append.py test_argsort.py test_asof.py test_astype.py test_autocorr.py test_between.py test_clip.py test_combine.py test_combine_first.py test_compare.py test_convert.py test_convert_dtypes.py test_copy.py test_count.py test_cov_corr.py test_describe.py test_diff.py test_drop.py test_dropna.py test_drop_duplicates.py test_dtypes.py test_duplicated.py test_equals.py test_explode.py test_fillna.py test_get_numeric_data.py test_head_tail.py test_infer_objects.py test_interpolate.py test_isin.py test_isna.py test_is_monotonic.py test_is_unique.py test_item.py test_matmul.py test_nlargest.py test_nunique.py test_pct_change.py test_pop.py test_quantile.py test_rank.py test_reindex.py test_reindex_like.py test_rename.py test_rename_axis.py test_repeat.py test_replace.py test_reset_index.py test_round.py test_searchsorted.py test_set_name.py test_sort_index.py test_sort_values.py test_to_csv.py test_to_dict.py test_to_frame.py test_truncate.py test_tz_localize.py test_unique.py test_unstack.py test_update.py test_values.py test_value_counts.py test_view.py __init__.py test_api.py test_arithmetic.py test_constructors.py test_cumulative.py test_iteration.py test_logical_ops.py test_missing.py test_npfuncs.py test_reductions.py test_repr.py test_subclass.py test_ufunc.py test_unary.py test_validate.py __init__.py conftest.py test_api.py test_case_justify.py test_cat.py test_extract.py test_find_replace.py test_get_dummies.py test_split_partition.py test_strings.py test_string_array.py __init__.py test_aggregation.py test_algos.py test_common.py test_downstream.py test_errors.py test_expressions.py test_flags.py test_multilevel.py test_nanops.py test_optional_dependency.py test_register_accessor.py test_sorting.py test_take.py test_to_datetime.py test_to_numeric.py test_to_time.py test_to_timedelta.py __init__.py test_frequencies.py test_freq_code.py test_inference.py __init__.py test_calendar.py test_federal.py test_holiday.py test_observance.py __init__.py common.py conftest.py test_business_day.py test_business_hour.py test_business_month.py test_business_quarter.py test_business_year.py test_custom_business_day.py test_custom_business_hour.py test_custom_business_month.py test_dst.py test_easter.py test_fiscal.py test_index.py test_month.py test_offsets.py test_offsets_properties.py test_quarter.py test_ticks.py test_week.py test_year.py __init__.py __init__.py test_api.py test_array_to_datetime.py test_ccalendar.py test_conversion.py test_fields.py test_libfrequencies.py test_liboffsets.py test_parse_iso8601.py test_parsing.py test_period_asfreq.py test_timedeltas.py test_timezones.py test_to_offset.py __init__.py conftest.py test_assert_almost_equal.py test_assert_attr_equal.py test_assert_categorical_equal.py test_assert_extension_array_equal.py test_assert_frame_equal.py test_assert_index_equal.py test_assert_interval_array_equal.py test_assert_numpy_array_equal.py test_assert_produces_warning.py test_assert_series_equal.py test_deprecate.py test_deprecate_kwarg.py test_deprecate_nonkeyword_arguments.py test_doc.py test_hashing.py test_numba.py test_safe_import.py test_shares_memory.py test_show_versions.py test_util.py test_validate_args.py test_validate_args_and_kwargs.py test_validate_inclusive.py test_validate_kwargs.py __init__.py conftest.py conftest.py test_moments_consistency_ewm.py test_moments_consistency_expanding.py test_moments_consistency_rolling.py __init__.py test_api.py test_apply.py test_base_indexer.py test_cython_aggregations.py test_dtypes.py test_ewm.py test_expanding.py test_groupby.py test_numba.py test_online.py test_pairwise.py test_rolling.py test_rolling_functions.py test_rolling_quantile.py test_rolling_skew_kurt.py test_timeseries_window.py test_win_type.py __init__.py __init__.py api.py frequencies.py holiday.py offsets.py __init__.py testing.py __init__.py _decorators.py _doctools.py _exceptions.py _print_versions.py _tester.py _test_decorators.py _validators.py __init__.py config.py dates.py display.py localization.py __init__.py algos.pxd algos.pyi algos.pyx algos_common_helper.pxi.in algos_take_helper.pxi.in arrays.pxd arrays.pyi arrays.pyx dtypes.pxd groupby.pyi groupby.pyx hashing.pyi hashing.pyx hashtable.pxd hashtable.pyi hashtable.pyx hashtable_class_helper.pxi.in hashtable_func_helper.pxi.in index.pyi index.pyx indexing.pyx index_class_helper.pxi.in internals.pyi internals.pyx interval.pyx intervaltree.pxi.in join.pyi join.pyx khash.pxd khash_for_primitive_helper.pxi.in lib.pxd lib.pyi lib.pyx missing.pxd missing.pyi missing.pyx ops.pyi ops.pyx ops_dispatch.pyi ops_dispatch.pyx parsers.pyi parsers.pyx properties.pyi properties.pyx reduction.pyx reshape.pyi reshape.pyx sparse.pyi sparse.pyx sparse_op_helper.pxi.in cmath ms_inttypes.h ms_stdint.h portable.h stdint.h inline_helper.h khash.h khash_python.h io.c io.h tokenizer.c tokenizer.h parse_helper.h skiplist.h ultrajson.h ultrajsondec.c ultrajsonenc.c date_conversions.c date_conversions.h JSONtoObj.c objToJSON.c ujson.c version.h testing.pyi testing.pyx tslib.pyi tslib.pyx base.pxd base.pyx ccalendar.pxd ccalendar.pyi ccalendar.pyx conversion.pxd conversion.pyi conversion.pyx dtypes.pxd dtypes.pyi dtypes.pyx fields.pyi fields.pyx nattype.pxd nattype.pyi nattype.pyx np_datetime.pxd np_datetime.pyi np_datetime.pyx offsets.pxd offsets.pyx parsing.pxd parsing.pyi parsing.pyx period.pxd period.pyi period.pyx np_datetime.c np_datetime.h np_datetime_strings.c np_datetime_strings.h strptime.pyi strptime.pyx timedeltas.pxd timedeltas.pyi timedeltas.pyx timestamps.pxd timestamps.pyi timestamps.pyx timezones.pxd timezones.pyi timezones.pyx tzconversion.pxd tzconversion.pyi tzconversion.pyx util.pxd vectorized.pyi vectorized.pyx __init__.py util.pxd aggregations.pyi aggregations.pyx indexers.pyi indexers.pyx __init__.py writers.pyi writers.pyx __init__.py asserters.py compat.py contexts.py _hypothesis.py _io.py _random.py _warnings.py __init__.py _typing.py _version.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO pyproject.toml README.md RELEASE.md setup.cfg setup.py versioneer.py",
        "setup.py": "#!\/usr\/bin\/env python3\n\n\"\"\"\nParts of this file were taken from the pyzmq project\n(https:\/\/github.com\/zeromq\/pyzmq) which have been permitted for use under the\nBSD license. Parts are from lxml (https:\/\/github.com\/lxml\/lxml)\n\"\"\"\n\nimport argparse\nimport multiprocessing\nimport os\nfrom os.path import join as pjoin\nimport platform\nimport shutil\nimport sys\nfrom sysconfig import get_config_vars\n\nimport numpy\nfrom pkg_resources import parse_version\nfrom setuptools import (\nCommand,\nExtension,\nsetup,\n)\nfrom setuptools.command.build_ext import build_ext as _build_ext\n\nimport versioneer\n\ncmdclass = versioneer.get_cmdclass()\n\n\ndef is_platform_windows():\nreturn sys.platform == \"win32\" or sys.platform == \"cygwin\"\n\n\ndef is_platform_mac():\nreturn sys.platform == \"darwin\"\n\n\n# note: sync with pyproject.toml, environment.yml and asv.conf.json\nmin_cython_ver = \"0.29.30\"\n\ntry:\nfrom Cython import (\nTempita,\n__version__ as _CYTHON_VERSION,\n)\nfrom Cython.Build import cythonize\n\n_CYTHON_INSTALLED = parse_version(_CYTHON_VERSION) >= parse_version(min_cython_ver)\nexcept ImportError:\n_CYTHON_VERSION = None\n_CYTHON_INSTALLED = False\ncythonize = lambda x, *args, **kwargs: x # dummy func\n\n\n_pxi_dep_template = {\n\"algos\": [\"_libs\/algos_common_helper.pxi.in\", \"_libs\/algos_take_helper.pxi.in\"],\n\"hashtable\": [\n\"_libs\/hashtable_class_helper.pxi.in\",\n\"_libs\/hashtable_func_helper.pxi.in\",\n\"_libs\/khash_for_primitive_helper.pxi.in\",\n],\n\"index\": [\"_libs\/index_class_helper.pxi.in\"],\n\"sparse\": [\"_libs\/sparse_op_helper.pxi.in\"],\n\"interval\": [\"_libs\/intervaltree.pxi.in\"],\n}\n\n_pxifiles = []\n_pxi_dep = {}\nfor module, files in _pxi_dep_template.items():\npxi_files = [pjoin(\"pandas\", x) for x in files]\n_pxifiles.extend(pxi_files)\n_pxi_dep[module] = pxi_files\n\n\nclass build_ext(_build_ext):\n@classmethod\ndef render_templates(cls, pxifiles):\nfor pxifile in pxifiles:\n# build pxifiles first, template extension must be .pxi.in\nassert pxifile.endswith(\".pxi.in\")\noutfile = pxifile[:-3]\n\nif (\nos.path.exists(outfile)\nand os.stat(pxifile).st_mtime < os.stat(outfile).st_mtime\n):\n# if .pxi.in is not updated, no need to output .pxi\ncontinue\n\nwith open(pxifile) as f:\ntmpl = f.read()\npyxcontent = Tempita.sub(tmpl)\n\nwith open(outfile, \"w\") as f:\nf.write(pyxcontent)\n\ndef build_extensions(self):\n# if building from c files, don't need to\n# generate template output\nif _CYTHON_INSTALLED:\nself.render_templates(_pxifiles)\n\nsuper().build_extensions()\n\n\nclass CleanCommand(Command):\n\"\"\"Custom command to clean the .so and .pyc files.\"\"\"\n\nuser_options = [(\"all\", \"a\", \"\")]\n\ndef initialize_options(self):\nself.all = True\nself._clean_me = []\nself._clean_trees = []\n\nbase = pjoin(\"pandas\", \"_libs\", \"src\")\ntsbase = pjoin(\"pandas\", \"_libs\", \"tslibs\", \"src\")\ndt = pjoin(tsbase, \"datetime\")\nutil = pjoin(\"pandas\", \"util\")\nparser = pjoin(base, \"parser\")\nujson_python = pjoin(base, \"ujson\", \"python\")\nujson_lib = pjoin(base, \"ujson\", \"lib\")\nself._clean_exclude = [\npjoin(dt, \"np_datetime.c\"),\npjoin(dt, \"np_datetime_strings.c\"),\npjoin(parser, \"tokenizer.c\"),\npjoin(parser, \"io.c\"),\npjoin(ujson_python, \"ujson.c\"),\npjoin(ujson_python, \"objToJSON.c\"),\npjoin(ujson_python, \"JSONtoObj.c\"),\npjoin(ujson_python, \"date_conversions.c\"),\npjoin(ujson_lib, \"ultrajsonenc.c\"),\npjoin(ujson_lib, \"ultrajsondec.c\"),\npjoin(util, \"move.c\"),\n]\n\nfor root, dirs, files in os.walk(\"pandas\"):\nfor f in files:\nfilepath = pjoin(root, f)\nif filepath in self._clean_exclude:\ncontinue\n\nif os.path.splitext(f)[-1] in (\n\".pyc\",\n\".so\",\n\".o\",\n\".pyo\",\n\".pyd\",\n\".c\",\n\".cpp\",\n\".orig\",\n):\nself._clean_me.append(filepath)\nfor d in dirs:\nif d == \"__pycache__\":\nself._clean_trees.append(pjoin(root, d))\n\n# clean the generated pxi files\nfor pxifile in _pxifiles:\npxifile = pxifile.replace(\".pxi.in\", \".pxi\")\nself._clean_me.append(pxifile)\n\nfor d in (\"build\", \"dist\"):\nif os.path.exists(d):\nself._clean_trees.append(d)\n\ndef finalize_options(self):\npass\n\ndef run(self):\nfor clean_me in self._clean_me:\ntry:\nos.unlink(clean_me)\nexcept OSError:\npass\nfor clean_tree in self._clean_trees:\ntry:\nshutil.rmtree(clean_tree)\nexcept OSError:\npass\n\n\n# we need to inherit from the versioneer\n# class as it encodes the version info\nsdist_class = cmdclass[\"sdist\"]\n\n\nclass CheckSDist(sdist_class):\n\"\"\"Custom sdist that ensures Cython has compiled all pyx files to c.\"\"\"\n\n_pyxfiles = [\n\"pandas\/_libs\/arrays.pyx\",\n\"pandas\/_libs\/lib.pyx\",\n\"pandas\/_libs\/hashtable.pyx\",\n\"pandas\/_libs\/tslib.pyx\",\n\"pandas\/_libs\/index.pyx\",\n\"pandas\/_libs\/internals.pyx\",\n\"pandas\/_libs\/algos.pyx\",\n\"pandas\/_libs\/join.pyx\",\n\"pandas\/_libs\/indexing.pyx\",\n\"pandas\/_libs\/interval.pyx\",\n\"pandas\/_libs\/hashing.pyx\",\n\"pandas\/_libs\/missing.pyx\",\n\"pandas\/_libs\/reduction.pyx\",\n\"pandas\/_libs\/testing.pyx\",\n\"pandas\/_libs\/sparse.pyx\",\n\"pandas\/_libs\/ops.pyx\",\n\"pandas\/_libs\/parsers.pyx\",\n\"pandas\/_libs\/tslibs\/base.pyx\",\n\"pandas\/_libs\/tslibs\/ccalendar.pyx\",\n\"pandas\/_libs\/tslibs\/dtypes.pyx\",\n\"pandas\/_libs\/tslibs\/period.pyx\",\n\"pandas\/_libs\/tslibs\/strptime.pyx\",\n\"pandas\/_libs\/tslibs\/np_datetime.pyx\",\n\"pandas\/_libs\/tslibs\/timedeltas.pyx\",\n\"pandas\/_libs\/tslibs\/timestamps.pyx\",\n\"pandas\/_libs\/tslibs\/timezones.pyx\",\n\"pandas\/_libs\/tslibs\/conversion.pyx\",\n\"pandas\/_libs\/tslibs\/fields.pyx\",\n\"pandas\/_libs\/tslibs\/offsets.pyx\",\n\"pandas\/_libs\/tslibs\/parsing.pyx\",\n\"pandas\/_libs\/tslibs\/tzconversion.pyx\",\n\"pandas\/_libs\/tslibs\/vectorized.pyx\",\n\"pandas\/_libs\/window\/indexers.pyx\",\n\"pandas\/_libs\/writers.pyx\",\n\"pandas\/io\/sas\/sas.pyx\",\n]\n\n_cpp_pyxfiles = [\n\"pandas\/_libs\/window\/aggregations.pyx\",\n]\n\ndef initialize_options(self):\nsdist_class.initialize_options(self)\n\ndef run(self):\nif \"cython\" in cmdclass:\nself.run_command(\"cython\")\nelse:\n# If we are not running cython then\n# compile the extensions correctly\npyx_files = [(self._pyxfiles, \"c\"), (self._cpp_pyxfiles, \"cpp\")]\n\nfor pyxfiles, extension in pyx_files:\nfor pyxfile in pyxfiles:\nsourcefile = pyxfile[:-3] + extension\nmsg = (\nf\"{extension}-source file '{sourcefile}' not found.\\n\"\n\"Run 'setup.py cython' before sdist.\"\n)\nassert os.path.isfile(sourcefile), msg\nsdist_class.run(self)\n\n\nclass CheckingBuildExt(build_ext):\n\"\"\"\nSubclass build_ext to get clearer report if Cython is necessary.\n\"\"\"\n\ndef check_cython_extensions(self, extensions):\nfor ext in extensions:\nfor src in ext.sources:\nif not os.path.exists(src):\nprint(f\"{ext.name}: -> [{ext.sources}]\")\nraise Exception(\nf\"\"\"Cython-generated file '{src}' not found.\nCython is required to compile pandas from a development branch.\nPlease install Cython or download a release package of pandas.\n\"\"\"\n)\n\ndef build_extensions(self):\nself.check_cython_extensions(self.extensions)\nbuild_ext.build_extensions(self)\n\n\nclass CythonCommand(build_ext):\n\"\"\"\nCustom command subclassed from Cython.Distutils.build_ext\nto compile pyx->c, and stop there. All this does is override the\nC-compile method build_extension() with a no-op.\n\"\"\"\n\ndef build_extension(self, ext):\npass\n\n\nclass DummyBuildSrc(Command):\n\"\"\"numpy's build_src command interferes with Cython's build_ext.\"\"\"\n\nuser_options = []\n\ndef initialize_options(self):\nself.py_modules_dict = {}\n\ndef finalize_options(self):\npass\n\ndef run(self):\npass\n\n\ncmdclass[\"clean\"] = CleanCommand\ncmdclass[\"build_ext\"] = CheckingBuildExt\n\nif _CYTHON_INSTALLED:\nsuffix = \".pyx\"\ncmdclass[\"cython\"] = CythonCommand\nelse:\nsuffix = \".c\"\ncmdclass[\"build_src\"] = DummyBuildSrc\n\n# ----------------------------------------------------------------------\n# Preparation of compiler arguments\n\ndebugging_symbols_requested = \"--with-debugging-symbols\" in sys.argv\nif debugging_symbols_requested:\nsys.argv.remove(\"--with-debugging-symbols\")\n\n\nif sys.byteorder == \"big\":\nendian_macro = [(\"__BIG_ENDIAN__\", \"1\")]\nelse:\nendian_macro = [(\"__LITTLE_ENDIAN__\", \"1\")]\n\n\nextra_compile_args = []\nextra_link_args = []\nif is_platform_windows():\nif debugging_symbols_requested:\nextra_compile_args.append(\"\/Z7\")\nextra_link_args.append(\"\/DEBUG\")\nelse:\n# PANDAS_CI=1 is set by ci\/setup_env.sh\nif os.environ.get(\"PANDAS_CI\", \"0\") == \"1\":\nextra_compile_args.append(\"-Werror\")\nif debugging_symbols_requested:\nextra_compile_args.append(\"-g\")\nextra_compile_args.append(\"-UNDEBUG\")\nextra_compile_args.append(\"-O0\")\n\n# Build for at least macOS 10.9 when compiling on a 10.9 system or above,\n# overriding CPython distuitls behaviour which is to target the version that\n# python was built for. This may be overridden by setting\n# MACOSX_DEPLOYMENT_TARGET before calling setup.py\nif is_platform_mac():\nif \"MACOSX_DEPLOYMENT_TARGET\" not in os.environ:\ncurrent_system = platform.mac_ver()[0]\npython_target = get_config_vars().get(\n\"MACOSX_DEPLOYMENT_TARGET\", current_system\n)\ntarget_macos_version = \"10.9\"\nparsed_macos_version = parse_version(target_macos_version)\nif (\nparse_version(str(python_target)) < parsed_macos_version\nand parse_version(current_system) >= parsed_macos_version\n):\nos.environ[\"MACOSX_DEPLOYMENT_TARGET\"] = target_macos_version\n\nif sys.version_info[:2] == (3, 8): # GH 33239\nextra_compile_args.append(\"-Wno-error=deprecated-declarations\")\n\n# https:\/\/github.com\/pandas-dev\/pandas\/issues\/35559\nextra_compile_args.append(\"-Wno-error=unreachable-code\")\n\n# enable coverage by building cython files by setting the environment variable\n# \"PANDAS_CYTHON_COVERAGE\" (with a Truthy value) or by running build_ext\n# with `--with-cython-coverage`enabled\nlinetrace = os.environ.get(\"PANDAS_CYTHON_COVERAGE\", False)\nif \"--with-cython-coverage\" in sys.argv:\nlinetrace = True\nsys.argv.remove(\"--with-cython-coverage\")\n\n# Note: if not using `cythonize`, coverage can be enabled by\n# pinning `ext.cython_directives = directives` to each ext in extensions.\n# github.com\/cython\/cython\/wiki\/enhancements-compilerdirectives#in-setuppy\ndirectives = {\"linetrace\": False, \"language_level\": 3}\nmacros = []\nif linetrace:\n# https:\/\/pypkg.com\/pypi\/pytest-cython\/f\/tests\/example-project\/setup.py\ndirectives[\"linetrace\"] = True\nmacros = [(\"CYTHON_TRACE\", \"1\"), (\"CYTHON_TRACE_NOGIL\", \"1\")]\n\n# silence build warnings about deprecated API usage\n# we can't do anything about these warnings because they stem from\n# cython+numpy version mismatches.\nmacros.append((\"NPY_NO_DEPRECATED_API\", \"0\"))\n\n\n# ----------------------------------------------------------------------\n# Specification of Dependencies\n\n# TODO(cython#4518): Need to check to see if e.g. `linetrace` has changed and\n# possibly re-compile.\ndef maybe_cythonize(extensions, *args, **kwargs):\n\"\"\"\nRender tempita templates before calling cythonize. This is skipped for\n\n* clean\n* sdist\n\"\"\"\nif \"clean\" in sys.argv or \"sdist\" in sys.argv:\n# See https:\/\/github.com\/cython\/cython\/issues\/1495\nreturn extensions\n\nelif not _CYTHON_INSTALLED:\n# GH#28836 raise a helfpul error message\nif _CYTHON_VERSION:\nraise RuntimeError(\nf\"Cannot cythonize with old Cython version ({_CYTHON_VERSION} \"\nf\"installed, needs {min_cython_ver})\"\n)\nraise RuntimeError(\"Cannot cythonize without Cython installed.\")\n\n# reuse any parallel arguments provided for compilation to cythonize\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--parallel\", \"-j\", type=int, default=1)\nparsed, _ = parser.parse_known_args()\n\nkwargs[\"nthreads\"] = parsed.parallel\nbuild_ext.render_templates(_pxifiles)\nreturn cythonize(extensions, *args, **kwargs)\n\n\ndef srcpath(name=None, suffix=\".pyx\", subdir=\"src\"):\nreturn pjoin(\"pandas\", subdir, name + suffix)\n\n\nlib_depends = [\"pandas\/_libs\/src\/parse_helper.h\"]\n\nklib_include = [\"pandas\/_libs\/src\/klib\"]\n\ntseries_depends = [\n\"pandas\/_libs\/tslibs\/src\/datetime\/np_datetime.h\",\n\"pandas\/_libs\/tslibs\/src\/datetime\/np_datetime_strings.h\",\n]\n\next_data = {\n\"_libs.algos\": {\n\"pyxfile\": \"_libs\/algos\",\n\"include\": klib_include,\n\"depends\": _pxi_dep[\"algos\"],\n},\n\"_libs.arrays\": {\"pyxfile\": \"_libs\/arrays\"},\n\"_libs.groupby\": {\"pyxfile\": \"_libs\/groupby\"},\n\"_libs.hashing\": {\"pyxfile\": \"_libs\/hashing\", \"depends\": []},\n\"_libs.hashtable\": {\n\"pyxfile\": \"_libs\/hashtable\",\n\"include\": klib_include,\n\"depends\": (\n[\"pandas\/_libs\/src\/klib\/khash_python.h\", \"pandas\/_libs\/src\/klib\/khash.h\"]\n+ _pxi_dep[\"hashtable\"]\n),\n},\n\"_libs.index\": {\n\"pyxfile\": \"_libs\/index\",\n\"include\": klib_include,\n\"depends\": _pxi_dep[\"index\"],\n},\n\"_libs.indexing\": {\"pyxfile\": \"_libs\/indexing\"},\n\"_libs.internals\": {\"pyxfile\": \"_libs\/internals\"},\n\"_libs.interval\": {\n\"pyxfile\": \"_libs\/interval\",\n\"include\": klib_include,\n\"depends\": _pxi_dep[\"interval\"],\n},\n\"_libs.join\": {\"pyxfile\": \"_libs\/join\", \"include\": klib_include},\n\"_libs.lib\": {\n\"pyxfile\": \"_libs\/lib\",\n\"depends\": lib_depends + tseries_depends,\n\"include\": klib_include, # due to tokenizer import\n\"sources\": [\"pandas\/_libs\/src\/parser\/tokenizer.c\"],\n},\n\"_libs.missing\": {\"pyxfile\": \"_libs\/missing\", \"depends\": tseries_depends},\n\"_libs.parsers\": {\n\"pyxfile\": \"_libs\/parsers\",\n\"include\": klib_include + [\"pandas\/_libs\/src\"],\n\"depends\": [\n\"pandas\/_libs\/src\/parser\/tokenizer.h\",\n\"pandas\/_libs\/src\/parser\/io.h\",\n],\n\"sources\": [\n\"pandas\/_libs\/src\/parser\/tokenizer.c\",\n\"pandas\/_libs\/src\/parser\/io.c\",\n],\n},\n\"_libs.reduction\": {\"pyxfile\": \"_libs\/reduction\"},\n\"_libs.ops\": {\"pyxfile\": \"_libs\/ops\"},\n\"_libs.ops_dispatch\": {\"pyxfile\": \"_libs\/ops_dispatch\"},\n\"_libs.properties\": {\"pyxfile\": \"_libs\/properties\"},\n\"_libs.reshape\": {\"pyxfile\": \"_libs\/reshape\", \"depends\": []},\n\"_libs.sparse\": {\"pyxfile\": \"_libs\/sparse\", \"depends\": _pxi_dep[\"sparse\"]},\n\"_libs.tslib\": {\"pyxfile\": \"_libs\/tslib\", \"depends\": tseries_depends},\n\"_libs.tslibs.base\": {\"pyxfile\": \"_libs\/tslibs\/base\"},\n\"_libs.tslibs.ccalendar\": {\"pyxfile\": \"_libs\/tslibs\/ccalendar\"},\n\"_libs.tslibs.dtypes\": {\"pyxfile\": \"_libs\/tslibs\/dtypes\"},\n\"_libs.tslibs.conversion\": {\n\"pyxfile\": \"_libs\/tslibs\/conversion\",\n\"depends\": tseries_depends,\n\"sources\": [\"pandas\/_libs\/tslibs\/src\/datetime\/np_datetime.c\"],\n},\n\"_libs.tslibs.fields\": {\n\"pyxfile\": \"_libs\/tslibs\/fields\",\n\"depends\": tseries_depends,\n},\n\"_libs.tslibs.nattype\": {\"pyxfile\": \"_libs\/tslibs\/nattype\"},\n\"_libs.tslibs.np_datetime\": {\n\"pyxfile\": \"_libs\/tslibs\/np_datetime\",\n\"depends\": tseries_depends,\n\"sources\": [\n\"pandas\/_libs\/tslibs\/src\/datetime\/np_datetime.c\",\n\"pandas\/_libs\/tslibs\/src\/datetime\/np_datetime_strings.c\",\n],\n},\n\"_libs.tslibs.offsets\": {\n\"pyxfile\": \"_libs\/tslibs\/offsets\",\n\"depends\": tseries_depends,\n},\n\"_libs.tslibs.parsing\": {\n\"pyxfile\": \"_libs\/tslibs\/parsing\",\n\"include\": klib_include,\n\"depends\": [\"pandas\/_libs\/src\/parser\/tokenizer.h\"],\n\"sources\": [\"pandas\/_libs\/src\/parser\/tokenizer.c\"],\n},\n\"_libs.tslibs.period\": {\n\"pyxfile\": \"_libs\/tslibs\/period\",\n\"depends\": tseries_depends,\n\"sources\": [\"pandas\/_libs\/tslibs\/src\/datetime\/np_datetime.c\"],\n},\n\"_libs.tslibs.strptime\": {\n\"pyxfile\": \"_libs\/tslibs\/strptime\",\n\"depends\": tseries_depends,\n},\n\"_libs.tslibs.timedeltas\": {\n\"pyxfile\": \"_libs\/tslibs\/timedeltas\",\n\"depends\": tseries_depends,\n},\n\"_libs.tslibs.timestamps\": {\n\"pyxfile\": \"_libs\/tslibs\/timestamps\",\n\"depends\": tseries_depends,\n},\n\"_libs.tslibs.timezones\": {\"pyxfile\": \"_libs\/tslibs\/timezones\"},\n\"_libs.tslibs.tzconversion\": {\n\"pyxfile\": \"_libs\/tslibs\/tzconversion\",\n\"depends\": tseries_depends,\n},\n\"_libs.tslibs.vectorized\": {\"pyxfile\": \"_libs\/tslibs\/vectorized\"},\n\"_libs.testing\": {\"pyxfile\": \"_libs\/testing\"},\n\"_libs.window.aggregations\": {\n\"pyxfile\": \"_libs\/window\/aggregations\",\n\"language\": \"c++\",\n\"suffix\": \".cpp\",\n\"depends\": [\"pandas\/_libs\/src\/skiplist.h\"],\n},\n\"_libs.window.indexers\": {\"pyxfile\": \"_libs\/window\/indexers\"},\n\"_libs.writers\": {\"pyxfile\": \"_libs\/writers\"},\n\"io.sas._sas\": {\"pyxfile\": \"io\/sas\/sas\"},\n}\n\nextensions = []\n\nfor name, data in ext_data.items():\nsource_suffix = suffix if suffix == \".pyx\" else data.get(\"suffix\", \".c\")\n\nsources = [srcpath(data[\"pyxfile\"], suffix=source_suffix, subdir=\"\")]\n\nsources.extend(data.get(\"sources\", []))\n\ninclude = data.get(\"include\", [])\ninclude.append(numpy.get_include())\n\nundef_macros = []\n\nif (\nsys.platform == \"zos\"\nand data.get(\"language\") == \"c++\"\nand os.path.basename(os.environ.get(\"CXX\", \"\/bin\/xlc++\")) in (\"xlc\", \"xlc++\")\n):\ndata.get(\"macros\", macros).append((\"__s390__\", \"1\"))\nextra_compile_args.append(\"-qlanglvl=extended0x:nolibext\")\nundef_macros.append(\"_POSIX_THREADS\")\n\nobj = Extension(\nf\"pandas.{name}\",\nsources=sources,\ndepends=data.get(\"depends\", []),\ninclude_dirs=include,\nlanguage=data.get(\"language\", \"c\"),\ndefine_macros=data.get(\"macros\", macros),\nextra_compile_args=extra_compile_args,\nextra_link_args=extra_link_args,\nundef_macros=undef_macros,\n)\n\nextensions.append(obj)\n\n# ----------------------------------------------------------------------\n# ujson\n\nif suffix == \".pyx\":\n# undo dumb setuptools bug clobbering .pyx sources back to .c\nfor ext in extensions:\nif ext.sources[0].endswith((\".c\", \".cpp\")):\nroot, _ = os.path.splitext(ext.sources[0])\next.sources[0] = root + suffix\n\nujson_ext = Extension(\n\"pandas._libs.json\",\ndepends=[\n\"pandas\/_libs\/src\/ujson\/lib\/ultrajson.h\",\n\"pandas\/_libs\/src\/ujson\/python\/date_conversions.h\",\n],\nsources=(\n[\n\"pandas\/_libs\/src\/ujson\/python\/ujson.c\",\n\"pandas\/_libs\/src\/ujson\/python\/objToJSON.c\",\n\"pandas\/_libs\/src\/ujson\/python\/date_conversions.c\",\n\"pandas\/_libs\/src\/ujson\/python\/JSONtoObj.c\",\n\"pandas\/_libs\/src\/ujson\/lib\/ultrajsonenc.c\",\n\"pandas\/_libs\/src\/ujson\/lib\/ultrajsondec.c\",\n]\n+ [\n\"pandas\/_libs\/tslibs\/src\/datetime\/np_datetime.c\",\n\"pandas\/_libs\/tslibs\/src\/datetime\/np_datetime_strings.c\",\n]\n),\ninclude_dirs=[\n\"pandas\/_libs\/src\/ujson\/python\",\n\"pandas\/_libs\/src\/ujson\/lib\",\n\"pandas\/_libs\/src\/datetime\",\nnumpy.get_include(),\n],\nextra_compile_args=([\"-D_GNU_SOURCE\"] + extra_compile_args),\nextra_link_args=extra_link_args,\ndefine_macros=macros,\n)\n\n\nextensions.append(ujson_ext)\n\n# ----------------------------------------------------------------------\n\n\nif __name__ == \"__main__\":\n# Freeze to support parallel compilation when using spawn instead of fork\nmultiprocessing.freeze_support()\nsetup(\nversion=versioneer.get_version(),\next_modules=maybe_cythonize(extensions, compiler_directives=directives),\ncmdclass=cmdclass,\n)\n"
    },
    {
        "package_name": "pandas_flavor-0.3.0",
        "file_list": "LICENSE MANIFEST.in register.py xarray.py __init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO pyproject.toml README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n# $ pip install twine\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\n\nfrom setuptools import find_packages, setup, Command\n\n# Package meta-data.\nNAME = \"pandas_flavor\"\nDESCRIPTION = \"The easy way to write your own Pandas flavor.\"\nURL = \"https:\/\/github.com\/Zsailer\/pandas_flavor\"\nEMAIL = \"zachsailer@gmail.com\"\nAUTHOR = \"Zach Sailer\"\n\n# What packages are required for this module to be executed?\nREQUIRED = [\"pandas>=0.23\", \"xarray\", \"lazy-loader==0.1rc2\"]\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.rst' is present in your MANIFEST.in file!\nwith io.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\nlong_description = \"\\n\" + f.read()\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nwith open(os.path.join(here, NAME, \"__version__.py\")) as f:\nexec(f.read(), about)\n\n\nclass UploadCommand(Command):\n\"\"\"Support setup.py upload.\"\"\"\n\ndescription = \"Build and publish the package.\"\nuser_options = []\n\n@staticmethod\ndef status(s):\n\"\"\"Prints things in bold.\"\"\"\nprint(\"\\033[1m{0}\\033[0m\".format(s))\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\ntry:\nself.status(\"Removing previous builds\u2026\")\nrmtree(os.path.join(here, \"dist\"))\nexcept OSError:\npass\n\nself.status(\"Building Source and Wheel (universal) distribution\u2026\")\nos.system(\n\"{0} setup.py sdist bdist_wheel --universal\".format(sys.executable)\n)\n\nself.status(\"Uploading the package to PyPi via Twine\u2026\")\nos.system(\"twine upload dist\/*\")\n\nsys.exit()\n\n\n# Where the magic happens:\nsetup(\nname=NAME,\nversion=about[\"__version__\"],\ndescription=DESCRIPTION,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nauthor=AUTHOR,\nauthor_email=EMAIL,\nurl=URL,\npackages=find_packages(exclude=(\"tests\",)),\ninstall_requires=REQUIRED,\ninclude_package_data=True,\nlicense=\"MIT\",\nclassifiers=[\n# Trove classifiers\n# Full list: https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2.6\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n],\n# $ setup.py publish support.\ncmdclass={\n\"upload\": UploadCommand,\n},\n)\n"
    },
    {
        "package_name": "pandera-0.11.0",
        "file_list": "LICENSE.txt checks.py check_utils.py dask_accessor.py decorators.py dtypes.py engine.py numpy_engine.py pandas_engine.py type_aliases.py utils.py __init__.py errors.py error_formatters.py error_handlers.py extensions.py external_config.py hypotheses.py inspection_utils.py io.py json_schema.py model.py model_components.py modin_accessor.py mypy.py pandas_accessor.py py.typed pyspark_accessor.py schemas.py schema_components.py schema_inference.py schema_statistics.py strategies.py system.py common.py config.py dask.py fastapi.py formats.py geopandas.py modin.py pandas.py pyspark.py __init__.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO pyproject.toml README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup, find_packages\n\nwith open(\"README.md\") as f:\nlong_description = f.read()\n\nversion = {}\nwith open(\"pandera\/version.py\") as fp:\nexec(fp.read(), version)\n\n_extras_require = {\n\"strategies\": [\"hypothesis >= 5.41.1\"],\n\"hypotheses\": [\"scipy\"],\n\"io\": [\"pyyaml >= 5.1\", \"black\", \"frictionless\"],\n\"pyspark\": [\"pyspark\"],\n\"modin\": [\"modin\", \"ray <= 1.7.0\", \"dask\"],\n\"modin-ray\": [\"modin\", \"ray <= 1.7.0\"],\n\"modin-dask\": [\"modin\", \"dask\"],\n\"dask\": [\"dask\"],\n\"mypy\": [\"pandas-stubs\"],\n\"fastapi\": [\"fastapi\"],\n\"geopandas\": [\"geopandas\", \"shapely\"],\n}\n\nextras_require = {\n**_extras_require,\n\"all\": list(set(x for y in _extras_require.values() for x in y)),\n}\n\nsetup(\nname=\"pandera\",\nversion=version[\"__version__\"],\nauthor=\"Niels Bantilan\",\nauthor_email=\"niels.bantilan@gmail.com\",\ndescription=\"A light-weight and flexible data validation and testing tool for dataframes.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/pandera-dev\/pandera\",\nproject_urls={\n\"Documentation\": \"https:\/\/pandera.readthedocs.io\",\n\"Issue Tracker\": \"https:\/\/github.com\/pandera-dev\/pandera\/issues\",\n},\nkeywords=[\"pandas\", \"validation\", \"data-structures\"],\nlicense=\"MIT\",\ndata_files=[(\"\", [\"LICENSE.txt\"])],\npackages=find_packages(include=[\"pandera*\"]),\npackage_data={\"pandera\": [\"py.typed\"]},\ninstall_requires=[\n\"packaging >= 20.0\",\n\"numpy >= 1.19.0\",\n\"pandas >= 1.2.0\",\n\"pydantic\",\n\"typing_extensions >= 3.7.4.3 ; python_version<'3.8'\",\n\"typing_inspect >= 0.6.0\",\n\"wrapt\",\n\"pyarrow\",\n],\nextras_require=extras_require,\npython_requires=\">=3.8\",\nplatforms=\"any\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Operating System :: OS Independent\",\n\"License :: OSI Approved :: MIT License\",\n\"Intended Audience :: Science\/Research\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Scientific\/Engineering\",\n],\n)\n"
    },
    {
        "package_name": "pantab-2.1.1",
        "file_list": "benchmarks.py custom.py __init__.py LICENSE.txt numpy_datetime.c pantab.c reader.c type.c writer.c conftest.py dates.hyper geography.hyper non_pantab_writeable.hyper test_reader.py test_roundtrip.py test_writer.py __init__.py _compat.py _hyper_util.py _reader.py _tester.py _types.py _writer.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO pyproject.toml README.md setup.cfg setup.py",
        "setup.py": "import os\nimport sys\nfrom glob import glob\n\nimport numpy as np\nfrom setuptools import Extension, find_packages, setup\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\nlong_description = f.read()\n\n\n# MSVC compiler has different flags; assume that's what we are using on Windows\nif os.name == \"nt\":\n# Enable extra warnings except implicit cast, which throws a few\n# see https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=857863 for justification\nextra_compile_args = [\"\/WX\", \"\/wd4244\"]\nelse:\nextra_compile_args = [\"-Wextra\", \"-Werror\"]\nif \"--debug\" in sys.argv:\nextra_compile_args.extend([\"-g\", \"-UNDEBUG\", \"-O0\"])\n\n\npantab_module = Extension(\n\"libpantab\",\ninclude_dirs=[np.get_include()],\ndefine_macros=[(\"NPY_NO_DEPRECATED_API\", \"0\")],\nsources=list(glob(\"pantab\/src\/*.c\")),\ndepends=list(glob(\"pantab\/src\/*.h\")),\nextra_compile_args=extra_compile_args,\n)\n\n\nsetup(\nname=\"pantab\",\nversion=\"2.1.1\",\ndescription=\"Converts pandas DataFrames into Tableau Hyper Extracts and back\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/WillAyd\/pantab\",\nauthor=\"Will Ayd\",\nauthor_email=\"william.ayd@icloud.com\",\nlicense=\"BSD\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Topic :: Office\/Business\",\n\"License :: OSI Approved :: BSD License\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\nkeywords=\"tableau visualization pandas dataframe\",\npackages=find_packages(),\npackage_data={\"\": [\"*.h\"], \"pantab.tests\": [\"data\/*\"]},\ndata_files=[(\"\", [\"LICENSE.txt\", \"README.md\"])],\npython_requires=\">=3.8\",\ninstall_requires=[\"pandas>=1.0.0\", \"tableauhyperapi<0.0.14567\", \"numpy\"],\nextras_require={\"dev\": [\"pytest\"]},\next_modules=[pantab_module],\n)\n"
    },
    {
        "package_name": "patch-ng-1.17.4",
        "file_list": "dependency_links.txt PKG-INFO SOURCES.txt top_level.txt patch_ng.py PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "\"\"\"A setuptools based setup module.\nSee:\nhttps:\/\/packaging.python.org\/en\/latest\/distributing.html\nhttps:\/\/github.com\/pypa\/sampleproject\n\"\"\"\n\n# Always prefer setuptools over distutils\nimport re\nimport os\nfrom setuptools import setup, find_packages\n# To use a consistent encoding\nfrom codecs import open\n\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(os.path.join(here, 'README.md'), encoding='utf-8') as f:\nlong_description = f.read()\n\n\ndef get_requires(filename):\nrequirements = []\nwith open(filename) as req_file:\nfor line in req_file.read().splitlines():\nif not line.strip().startswith(\"#\"):\nrequirements.append(line)\nreturn requirements\n\n\ndef load_version():\n\"\"\"Loads a file content\"\"\"\nfilename = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\n\"patch_ng.py\"))\nwith open(filename, \"rt\") as version_file:\ncontent = version_file.read()\nversion = re.search('__version__ = \"([0-9a-z.-]+)\"', content).group(1)\nreturn version\n\nsetup(\nname='patch-ng',\n# Versions should comply with PEP440. For a discussion on single-sourcing\n# the version across setup.py and the project code, see\n# https:\/\/packaging.python.org\/en\/latest\/single_source_version.html\nversion=load_version(),\n\n# This is an optional longer description of your project that represents\n# the body of text which users will see when they visit PyPI.\n#\n# Often, this is the same as your README, so you can just read it in from\n# that file directly (as we have already done above)\n#\n# This field corresponds to the \"Description\" metadata field:\n# https:\/\/packaging.python.org\/specifications\/core-metadata\/#description-optional\nlong_description=long_description, # Optional\n\ndescription='Library to parse and apply unified diffs.',\n\n# The project's main homepage.\nurl='https:\/\/github.com\/conan-io\/python-patch',\n\n# Author details\nauthor='Conan.io',\nauthor_email='info@conan.io',\n\n# Choose your license\nlicense='MIT',\n\n# See https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Topic :: Software Development :: Build Tools',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n],\n\n# What does your project relate to?\nkeywords=['patch', 'parse', 'diff', 'strip', 'diffstat'],\n\n# You can just specify the packages manually here if your project is\n# simple. Or you can use find_packages().\n# packages=find_packages(exclude=['tests']),\n\n# Alternatively, if you want to distribute just a my_module.py, uncomment\n# this:\npy_modules=[\"patch_ng\"],\n\n# List run-time dependencies here. These will be installed by pip when\n# your project is installed. For an analysis of \"install_requires\" vs pip's\n# requirements files see:\n# https:\/\/packaging.python.org\/en\/latest\/requirements.html\n# install_requires=get_requires('requirements.txt'),\n\n# List additional groups of dependencies here (e.g. development\n# dependencies). You can install these using the following syntax,\n# for example:\n# $ pip install -e .[dev,test]\n#extras_require={\n# 'test': get_requires(os.path.join('tests', 'requirements_test.txt'))\n#},\n\n# If there are data files included in your packages that need to be\n# installed, specify them here. If using Python 2.6 or less, then these\n# have to be included in MANIFEST.in as well.\npackage_data={\n'': ['*.md', 'LICENSE'],\n},\n\n# Although 'package_data' is the preferred approach, in some case you may\n# need to place data files outside of your packages. See:\n# http:\/\/docs.python.org\/3.4\/distutils\/setupscript.html#installing-additional-files # noqa\n# In this case, 'data_file' will be installed into '<sys.prefix>\/my_data'\n# data_files=[('my_data', ['data\/data_file'])],\n\n# To provide executable scripts, use entry points in preference to the\n# \"scripts\" keyword. Entry points provide cross-platform support and allow\n# pip to create the appropriate form of executable for the target platform.\n#entry_points={\n# 'console_scripts': [\n# 'patch_ng.py=patch',\n# ],\n#},\n)\n"
    },
    {
        "package_name": "pathmagic-0.3.14",
        "file_list": "accessor.py dir.py file.py formats.py path.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup, find_packages\nfrom os import path\n\n__version__ = \"0.3.14\"\n\nhere = path.abspath(path.dirname(__file__))\n\nwith open(path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\nlong_description = f.read()\n\nwith open(path.join(here, \"requirements.txt\"), encoding=\"utf-8\") as f:\ndependencies = [line for line in f if line]\n\nsetup(\nname=\"pathmagic\",\nversion=__version__,\ndescription=\"Provides ORM path classes (File and Dir), which automatically emit file system IO operations upon having their attributes modified. File objects allow for easy content manipulation of many forms of files.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/matthewgdv\/pathmagic\",\nlicense=\"MIT\",\nclassifiers=[\n\"Development Status :: 3 - Alpha\",\n\"Intended Audience :: Developers\",\n\"Programming Language :: Python :: 3.8\",\n],\npackages=find_packages(exclude=[\"tests*\"]),\ninstall_requires=dependencies,\nauthor=\"Matt GdV\",\nauthor_email=\"matthewgdv@gmail.com\"\n)\n"
    },
    {
        "package_name": "pathvalidate-2.5.1",
        "file_list": "summary.txt LICENSE MANIFEST.in argparse.py click.py error.py handler.py py.typed _base.py _common.py _const.py _filename.py _filepath.py _ltsv.py _symbol.py __init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO pyproject.toml README.rst docs_requirements.txt requirements.txt test_requirements.txt setup.cfg setup.py test_argparse.py test_click.py test_common.py test_filename.py test_filepath.py test_ltsv.py test_symbol.py _common.py __init__.py tox.ini",
        "setup.py": "\"\"\"\n.. codeauthor:: Tsuyoshi Hombashi <tsuyoshi.hombashi@gmail.com>\n\"\"\"\n\nimport os.path\nfrom typing import Dict\n\nimport setuptools\n\n\nMODULE_NAME = \"pathvalidate\"\nREPOSITORY_URL = f\"https:\/\/github.com\/thombashi\/{MODULE_NAME:s}\"\nREQUIREMENT_DIR = \"requirements\"\nENCODING = \"utf8\"\n\npkg_info: Dict[str, str] = {}\n\n\ndef get_release_command_class() -> Dict[str, setuptools.Command]:\ntry:\nfrom releasecmd import ReleaseCommand\nexcept ImportError:\nreturn {}\n\nreturn {\"release\": ReleaseCommand}\n\n\nwith open(os.path.join(MODULE_NAME, \"__version__.py\")) as f:\nexec(f.read(), pkg_info)\n\nwith open(\"README.rst\", encoding=ENCODING) as fp:\nlong_description = fp.read()\n\nwith open(os.path.join(\"docs\", \"pages\", \"introduction\", \"summary.txt\"), encoding=ENCODING) as f:\nsummary = f.read().strip()\n\nwith open(os.path.join(REQUIREMENT_DIR, \"test_requirements.txt\")) as f:\nTESTS_REQUIRES = [line.strip() for line in f if line.strip()]\n\nsetuptools.setup(\nname=MODULE_NAME,\nversion=pkg_info[\"__version__\"],\nurl=REPOSITORY_URL,\nauthor=pkg_info[\"__author__\"],\nauthor_email=pkg_info[\"__email__\"],\ndescription=summary,\nkeywords=[\"file\", \"path\", \"validation\", \"validator\", \"sanitization\", \"sanitizer\"],\nlicense=pkg_info[\"__license__\"],\nlong_description=long_description,\nlong_description_content_type=\"text\/x-rst\",\ninclude_package_data=True,\npackages=setuptools.find_packages(exclude=[\"test*\"]),\npackage_data={MODULE_NAME: [\"py.typed\"]},\nproject_urls={\n\"Documentation\": f\"https:\/\/{MODULE_NAME:s}.rtfd.io\/\",\n\"Source\": REPOSITORY_URL,\n\"Tracker\": f\"{REPOSITORY_URL:s}\/issues\",\n\"Changes\": f\"{REPOSITORY_URL:s}\/releases\",\n},\npython_requires=\">=3.6\",\nextras_require={\"test\": TESTS_REQUIRES},\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Information Technology\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3.11\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Topic :: Software Development :: Libraries\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Topic :: System :: Filesystems\",\n\"Topic :: Text Processing\",\n],\ncmdclass=get_release_command_class(),\n)\n"
    },
    {
        "package_name": "patool-1.12",
        "file_list": "COPYING changelog.txt development.txt favicon.ico logo16x16.png logo32x32.png Makefile install.txt patool.1 patool.txt README.txt Makefile MANIFEST.in patool patool.bash-completion dependency_links.txt PKG-INFO SOURCES.txt top_level.txt configuration.py ar.py arc.py archmage.py arj.py bsdcpio.py bsdtar.py bzip2.py cabextract.py chmlib.py clzip.py compress.py cpio.py dpkg.py flac.py genisoimage.py gzip.py isoinfo.py lbzip2.py lcab.py lha.py lhasa.py lrzip.py lzip.py lzma.py lzop.py mac.py nomarch.py p7azip.py p7rzip.py p7zip.py pbzip2.py pdlzip.py pigz.py plzip.py py_bz2.py py_echo.py py_gzip.py py_lzma.py py_tarfile.py py_zipfile.py rar.py rpm.py rpm2cpio.py rzip.py shar.py shorten.py star.py tar.py unace.py unadf.py unalz.py uncompress.py unrar.py unshar.py unzip.py xdms.py xz.py zip.py zoo.py zopfli.py zpaq.py __init__.py util.py __init__.py PKG-INFO build.bat dist.bat test.bat setup.cfg setup.py test_7z.py test_7za.py test_7zr.py test_ar.py test_arc.py test_archmage.py test_arj.py test_bsdcpio.py test_bsdtar.py test_bzip2.py test_cabextract.py test_chmlib.py test_clzip.py test_compress.py test_cpio.py test_dpkg.py test_flac.py test_genisoimage.py test_gzip.py test_isoinfo.py test_lbzip2.py test_lcab.py test_lha.py test_lhasa.py test_lrzip.py test_lzip.py test_lzma.py test_lzop.py test_mac.py test_nomarch.py test_pbzip2.py test_pdlzip.py test_pigz.py test_plzip.py test_pybz2.py test_pyecho.py test_pygzip.py test_pylzma.py test_pytarfile.py test_pyzipfile.py test_rar.py test_rpm.py test_rpm2cpio.py test_rzip.py test_shar.py test_shorten.py test_star.py test_tar.py test_unace.py test_unadf.py test_unalz.py test_uncompressreal.py test_unrar.py test_unshar.py test_unzip.py test_xdms.py test_xz.py test_zip.py test_zoo.py test_zopfli.py test_zpaq.py __init__.py test_config.py test_create.py test_diff.py test_extract.py test_formats.py test_list.py test_mime.py test_recompress.py test_repack.py test_search.py test_test.py test_util.py __init__.py",
        "setup.py": "#!\/usr\/bin\/python\n# -*- coding: iso-8859-1 -*-\n# Copyright (C) 2010-2016 Bastian Kleineidam\n#\n# This program is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\"\"\"\nSetup file for the distuils module.\n\"\"\"\nfrom __future__ import print_function\nimport sys\nif not hasattr(sys, \"version_info\") or sys.version_info < (2, 7, 0, \"final\", 0):\nraise SystemExit(\"This program requires Python 2.7 or later.\")\nimport os\nimport re\nfrom setuptools import setup\nfrom distutils.core import Distribution\nfrom distutils.command.install_lib import install_lib\nfrom distutils import util\nfrom distutils.file_util import write_file\n\nAppName = \"patool\"\nAppVersion = \"1.12\"\nMyName = \"Bastian Kleineidam\"\nMyEmail = \"bastian.kleineidam@web.de\"\n\n\ndef normpath (path):\n\"\"\"Norm a path name to platform specific notation.\"\"\"\nreturn os.path.normpath(path)\n\n\ndef cnormpath (path):\n\"\"\"Norm a path name to platform specific notation and make it absolute.\"\"\"\npath = normpath(path)\nif os.name == 'nt':\n# replace slashes with backslashes\npath = path.replace(\"\/\", \"\\\\\")\nif not os.path.isabs(path):\npath = normpath(os.path.join(sys.prefix, path))\nreturn path\n\n\nrelease_ro = re.compile(r\"\\(released (.+)\\)\")\ndef get_release_date ():\n\"\"\"Parse and return relase date as string from doc\/changelog.txt.\"\"\"\nfname = os.path.join(\"doc\", \"changelog.txt\")\nrelease_date = \"unknown\"\nwith open(fname) as fd:\n# the release date is on the first line\nline = fd.readline()\nmo = release_ro.search(line)\nif mo:\nrelease_date = mo.groups(1)\nreturn release_date\n\n\ndata_files = []\nif os.name == 'nt':\ndata_files.append(('share', ['doc\/patool.txt']))\nelse:\ndata_files.append(('share\/man\/man1', ['doc\/patool.1']))\n\n\nclass MyInstallLib (install_lib, object):\n\"\"\"Custom library installation.\"\"\"\n\ndef install (self):\n\"\"\"Install the generated config file.\"\"\"\nouts = super(MyInstallLib, self).install()\ninfile = self.create_conf_file()\noutfile = os.path.join(self.install_dir, os.path.basename(infile))\nself.copy_file(infile, outfile)\nouts.append(outfile)\nreturn outs\n\ndef create_conf_file (self):\n\"\"\"Create configuration file.\"\"\"\ncmd_obj = self.distribution.get_command_obj(\"install\")\ncmd_obj.ensure_finalized()\n# we have to write a configuration file because we need the\n# <install_data> directory (and other stuff like author, url, ...)\n# all paths are made absolute by cnormpath()\ndata = []\nfor d in ['purelib', 'platlib', 'lib', 'headers', 'scripts', 'data']:\nattr = 'install_%s' % d\nif cmd_obj.root:\n# cut off root path prefix\ncutoff = len(cmd_obj.root)\n# don't strip the path separator\nif cmd_obj.root.endswith(os.sep):\ncutoff -= 1\nval = getattr(cmd_obj, attr)[cutoff:]\nelse:\nval = getattr(cmd_obj, attr)\nif attr == 'install_data':\ncdir = os.path.join(val, \"share\", AppName)\ndata.append('config_dir = %r' % cnormpath(cdir))\nelif attr == 'install_lib':\nif cmd_obj.root:\n_drive, tail = os.path.splitdrive(val)\nif tail.startswith(os.sep):\ntail = tail[1:]\nself.install_lib = os.path.join(cmd_obj.root, tail)\nelse:\nself.install_lib = val\ndata.append(\"%s = %r\" % (attr, cnormpath(val)))\nself.distribution.create_conf_file(data, directory=self.install_lib)\nreturn self.get_conf_output()\n\ndef get_conf_output (self):\n\"\"\"Get filename for distribution configuration file.\"\"\"\nreturn self.distribution.get_conf_filename(self.install_lib)\n\ndef get_outputs (self):\n\"\"\"Add the generated config file to the list of outputs.\"\"\"\nouts = super(MyInstallLib, self).get_outputs()\nconf_output = self.get_conf_output()\nouts.append(conf_output)\nif self.compile:\nouts.extend(self._bytecode_filenames([conf_output]))\nreturn outs\n\n\nclass MyDistribution (Distribution, object):\n\"\"\"Custom distribution class generating config file.\"\"\"\n\ndef __init__ (self, attrs):\n\"\"\"Set console and windows scripts.\"\"\"\nsuper(MyDistribution, self).__init__(attrs)\nself.console = ['patool']\n\ndef run_commands (self):\n\"\"\"Generate config file and run commands.\"\"\"\ncwd = os.getcwd()\ndata = []\ndata.append('config_dir = %r' % os.path.join(cwd, \"config\"))\ndata.append(\"install_data = %r\" % cwd)\ndata.append(\"install_scripts = %r\" % cwd)\nself.create_conf_file(data)\nsuper(MyDistribution, self).run_commands()\n\ndef get_conf_filename (self, directory):\n\"\"\"Get name for config file.\"\"\"\nreturn os.path.join(directory, \"_%s_configdata.py\" % self.get_name())\n\ndef create_conf_file (self, data, directory=None):\n\"\"\"Create local config file from given data (list of lines) in\nthe directory (or current directory if not given).\"\"\"\ndata.insert(0, \"# this file is automatically created by setup.py\")\ndata.insert(0, \"# -*- coding: iso-8859-1 -*-\")\nif directory is None:\ndirectory = os.getcwd()\nfilename = self.get_conf_filename(directory)\n# add metadata\nmetanames = (\"name\", \"version\", \"author\", \"author_email\",\n\"maintainer\", \"maintainer_email\", \"url\",\n\"license\", \"description\", \"long_description\",\n\"keywords\", \"platforms\", \"fullname\", \"contact\",\n\"contact_email\")\nfor name in metanames:\nmethod = \"get_\" + name\nval = getattr(self.metadata, method)()\ndata.append(\"%s = %r\" % (name, val))\ndata.append('release_date = \"%s\"' % get_release_date())\n# write the config file\nutil.execute(write_file, (filename, data),\n\"creating %s\" % filename, self.verbose >= 1, self.dry_run)\n\n\nargs = dict(\nname = AppName,\nversion = AppVersion,\ndescription = \"portable archive file manager\",\nlong_description = \"\"\"Various archive formats can be created, extracted, tested, listed,\nsearched, compared and repacked by patool. The advantage of patool\nis its simplicity in handling archive files without having to remember\na myriad of programs and options.\n\nThe archive format is determined by the file(1) program and as a\nfallback by the archive file extension.\n\npatool supports 7z (.7z), ACE (.ace), ADF (.adf), ALZIP (.alz), APE (.ape),\nAR (.a), ARC (.arc), ARJ (.arj), BZIP2 (.bz2),\nCAB (.cab), COMPRESS (.Z), CPIO (.cpio),\nDEB (.deb), DMS (.dms), FLAC (.flac), GZIP (.gz), ISO (.iso), LRZIP (.lrz),\nLZH (.lha, .lzh), LZIP (.lz), LZMA (.lzma), LZOP (.lzo), RPM (.rpm),\nRAR (.rar), RZIP (.rz), SHN (.shn), TAR (.tar), XZ (.xz), ZIP (.zip, .jar),\nZOO (.zoo) and ZPAQ (.zpaq) formats.\nIt relies on helper applications to handle those archive formats\n(for example bzip2 for BZIP2 archives).\n\nThe archive formats TAR, ZIP, BZIP2 and GZIP\nare supported natively and do not require helper applications to be\ninstalled.\n\"\"\",\nauthor = MyName,\nauthor_email = MyEmail,\nmaintainer = MyName,\nmaintainer_email = MyEmail,\nlicense = \"GPL\",\nurl = \"http:\/\/wummel.github.io\/patool\/\",\npackages = ['patoolib', 'patoolib.programs'],\ndata_files = data_files,\nscripts = ['patool'],\nkeywords = \"archiver,archive,compression,commandline,manager\",\nclassifiers = [\n'Environment :: Console',\n'Topic :: System :: Archiving',\n'Development Status :: 5 - Production\/Stable',\n'License :: OSI Approved :: GNU General Public License (GPL)',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Operating System :: OS Independent',\n],\ndistclass = MyDistribution,\ncmdclass = {\n'install_lib': MyInstallLib,\n},\n)\nsetup(**args)\n"
    },
    {
        "package_name": "paypalrestsdk-1.13.1",
        "file_list": "api.py config.py DigiCertHighAssuranceEVRootCA.crt.pem DigiCertSHA2ExtendedValidationServerCA.crt.pem exceptions.py invoices.py invoice_templates.py notifications.py openid_connect.py payments.py payment_experience.py resource.py util.py vault.py __init__.py PKG-INFO README.md setup.py",
        "setup.py": "from distutils.core import setup\n\nimport sys, os\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), 'paypalrestsdk'))\nfrom config import __version__, __pypi_packagename__, __github_username__, __github_reponame__\n\nlong_description=\"\"\"\nThe PayPal REST SDK provides Python APIs to create, process and manage payments.\n\n1. https:\/\/github.com\/paypal\/PayPal-Python-SDK\/ - README and Samples\n2. https:\/\/developer.paypal.com\/webapps\/developer\/docs\/api\/ - API Reference\n\"\"\"\n\nlicense='PayPal SDK License'\n\nurl='https:\/\/github.com\/' + __github_username__ + '\/' + __github_reponame__\n\nsetup(\nname=__pypi_packagename__,\nversion= __version__,\nauthor='PayPal',\nauthor_email='DL-PP-PYTHON-SDK@paypal.com',\npackages=['paypalrestsdk'],\nscripts=[],\nurl=url,\nlicense=license,\ndescription='The PayPal REST SDK provides Python APIs to create, process and manage payments.',\nlong_description=long_description,\npackage_data={'paypalrestsdk': ['data\/*.crt.pem']},\ninstall_requires=['requests>=1.0.0', 'six>=1.0.0', 'pyopenssl>=0.15'],\nclassifiers=[\n'Intended Audience :: Developers',\n'Natural Language :: English',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Software Development :: Libraries :: Python Modules'\n],\nkeywords=['paypal', 'rest', 'sdk', 'payments', 'invoice', 'subscription', 'webhook']\n)\n"
    },
    {
        "package_name": "pdfservices-sdk-1.0.2",
        "file_list": "LICENSE.md MANIFEST.in PKG-INFO README.md setup.cfg setup.py credentials.py service_account_credentials.py __init__.py client_config.py exceptions.py __init__.py execution_context.py cpf_api.py document.py extract_pdf_outputs.p extract_pdf_params.py cpf_content_ cpf_params.p engine.py inline_param inputs.py outputs.py __init__.py __init__.py extract_pdf_output_m cpf_content cpf_status. __init__.py __init__.py __init__.py __init__.py authenticator.py auth_factory.py jwt_authenticator.py session_token.py __init__.py exceptions.py extension_media_type_mapping.py http_client.py http_method.py http_request.py request_header_const.py response_util.py __init__.py internal_client_config.py internal_execution_context.py file_ref_impl.py __init__.py extract_data_parser.py extract_data_zipper.py extract_pdf_api.py rendition_output.py __init__.py service_constants.py file_utils.py json_hint_encoder.py path_util.py validation_util.py __init__.py __init__.py file_ref.py __init__.py operation.py extract_pdf_operation.py extract_element_type extract_pdf_options. extract_renditions_e pdf_element_type.py table_structure_type __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "import setuptools\n\n\ndef parse_requirements(filename, session=None):\n\"\"\" load requirements from a pip requirements file \"\"\"\nlineiter = (line.strip() for line in open(filename))\nreturn [line for line in lineiter if line and not line.startswith(\"#\")]\n\n\nwith open(\"README.md\", \"r\", encoding='utf-8') as fh:\nlong_description = fh.read()\n\nsetuptools.setup(\nname=\"pdfservices-sdk\",\nversion=\"1.0.2\",\nauthor='Adobe Document Services',\nauthor_email='extractapi@adobe.com',\nlicense='Apache2',\ndescription=\"Adobe PDFServices Client Library\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/www.adobe.com\/go\/pdftoolsapi_doc\",\npackage_dir={'': 'src'},\npackages=setuptools.find_packages('src'),\npython_requires=\">=3.6\",\ninstall_requires=parse_requirements('requirements.txt', session=False),\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: OS Independent\",\n],\nzip_safe=False\n)\n"
    },
    {
        "package_name": "Pebble-4.6.3",
        "file_list": "LICENSE MANIFEST.in common.py process.py thread.py __init__.py decorators.py functions.py base_pool.py channel.py process.py thread.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py test_concurrent_process_fork.py test_concurrent_process_forkserver.py test_concurrent_process_spawn.py test_concurrent_thread.py test_pebble.py test_process_pool_fork.py test_process_pool_forkserver.py test_process_pool_spawn.py test_thread_pool.py",
        "setup.py": "import os\nimport fileinput\nfrom setuptools import setup, find_packages\n\n\nCWD = os.path.dirname(__file__)\n\n\ndef package_version():\nmodule_path = os.path.join(CWD, 'pebble', '__init__.py')\nfor line in fileinput.input(module_path):\nif line.startswith('__version__'):\nreturn line.split('=')[-1].strip().replace('\\'', '')\n\n\nsetup(\nname=\"Pebble\",\nversion=package_version(),\nauthor=\"Matteo Cafasso\",\nauthor_email=\"noxdafox@gmail.com\",\ndescription=(\"Threading and multiprocessing eye-candy.\"),\nlicense=\"LGPL\",\nkeywords=\"thread process pool decorator\",\nurl=\"https:\/\/github.com\/noxdafox\/pebble\",\npackages=find_packages(exclude=[\"tests\"]),\nextras_require={\":python_version<'3'\": [\"futures\"]},\nlong_description=open(os.path.join(CWD, 'README.rst')).read(),\nclassifiers=[\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Operating System :: OS Independent\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"License :: OSI Approved :: \" +\n\"GNU Library or Lesser General Public License (LGPL)\"\n],\n)\n"
    },
    {
        "package_name": "pep8-naming-0.13.1",
        "file_list": "CHANGELOG.rst LICENSE MANIFEST.in PKG-INFO README.rst run_tests.py setup.cfg setup.py pep8ext_naming.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt N801.py N802.py N803.py N804.py N805.py N805_py38.py N806.py N806_py38.py N807.py N80x.py N815.py N816.py N816_py38.py N818.py N81x.py N8xx.py",
        "setup.py": "from setuptools import setup\nfrom setuptools.command.test import test as TestCommand\n\n\ndef get_version(fname='src\/pep8ext_naming.py'):\nwith open(fname) as f:\nfor line in f:\nif line.startswith('__version__'):\nreturn eval(line.split('=')[-1])\n\n\ndef get_long_description():\ndescr = []\nfor fname in ('README.rst',):\nwith open(fname) as f:\ndescr.append(f.read())\nreturn '\\n\\n'.join(descr)\n\n\nclass RunTests(TestCommand):\ndef finalize_options(self):\nTestCommand.finalize_options(self)\nself.test_args = []\nself.test_suite = True\n\ndef run_tests(self):\nimport run_tests\nimport sys\nerrno = run_tests.main()\nsys.exit(errno)\n\n\nsetup(\nname='pep8-naming',\nversion=get_version(),\ndescription=\"Check PEP-8 naming conventions, plugin for flake8\",\nlong_description=get_long_description(),\nkeywords='flake8 pep8 naming',\nauthor='Florent Xicluna',\nauthor_email='florent.xicluna@gmail.com',\nurl='https:\/\/github.com\/PyCQA\/pep8-naming',\nlicense='Expat license',\npackage_dir={'': 'src'},\npy_modules=['pep8ext_naming'],\ninstall_requires=['flake8>=3.9.1'],\nzip_safe=False,\nentry_points={\n'flake8.extension': [\n'N8 = pep8ext_naming:NamingChecker',\n],\n},\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Framework :: Flake8',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: 3 :: Only',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Software Development :: Quality Assurance',\n],\ncmdclass={'test': RunTests},\n)\n"
    },
    {
        "package_name": "phonenumbers-8.12.53",
        "file_list": "HISTORY.md LICENSE MANIFEST.in asyoutypeformatter.py asyoutypeformatter.pyi carrier.py carrier.pyi data0.py data1.py data2.py __init__.py __init__.pyi alt_format_255.py alt_format_27.py alt_format_30.py alt_format_31.py alt_format_34.py alt_format_350.py alt_format_351.py alt_format_352.py alt_format_358.py alt_format_359.py alt_format_36.py alt_format_372.py alt_format_373.py alt_format_380.py alt_format_381.py alt_format_385.py alt_format_39.py alt_format_43.py alt_format_44.py alt_format_49.py alt_format_505.py alt_format_506.py alt_format_52.py alt_format_54.py alt_format_55.py alt_format_58.py alt_format_595.py alt_format_61.py alt_format_62.py alt_format_64.py alt_format_66.py alt_format_675.py alt_format_676.py alt_format_679.py alt_format_7.py alt_format_81.py alt_format_84.py alt_format_855.py alt_format_856.py alt_format_90.py alt_format_91.py alt_format_94.py alt_format_95.py alt_format_971.py alt_format_972.py alt_format_995.py region_800.py region_808.py region_870.py region_878.py region_881.py region_882.py region_883.py region_888.py region_979.py region_AC.py region_AD.py region_AE.py region_AF.py region_AG.py region_AI.py region_AL.py region_AM.py region_AO.py region_AR.py region_AS.py region_AT.py region_AU.py region_AW.py region_AX.py region_AZ.py region_BA.py region_BB.py region_BD.py region_BE.py region_BF.py region_BG.py region_BH.py region_BI.py region_BJ.py region_BL.py region_BM.py region_BN.py region_BO.py region_BQ.py region_BR.py region_BS.py region_BT.py region_BW.py region_BY.py region_BZ.py region_CA.py region_CC.py region_CD.py region_CF.py region_CG.py region_CH.py region_CI.py region_CK.py region_CL.py region_CM.py region_CN.py region_CO.py region_CR.py region_CU.py region_CV.py region_CW.py region_CX.py region_CY.py region_CZ.py region_DE.py region_DJ.py region_DK.py region_DM.py region_DO.py region_DZ.py region_EC.py region_EE.py region_EG.py region_EH.py region_ER.py region_ES.py region_ET.py region_FI.py region_FJ.py region_FK.py region_FM.py region_FO.py region_FR.py region_GA.py region_GB.py region_GD.py region_GE.py region_GF.py region_GG.py region_GH.py region_GI.py region_GL.py region_GM.py region_GN.py region_GP.py region_GQ.py region_GR.py region_GT.py region_GU.py region_GW.py region_GY.py region_HK.py region_HN.py region_HR.py region_HT.py region_HU.py region_ID.py region_IE.py region_IL.py region_IM.py region_IN.py region_IO.py region_IQ.py region_IR.py region_IS.py region_IT.py region_JE.py region_JM.py region_JO.py region_JP.py region_KE.py region_KG.py region_KH.py region_KI.py region_KM.py region_KN.py region_KP.py region_KR.py region_KW.py region_KY.py region_KZ.py region_LA.py region_LB.py region_LC.py region_LI.py region_LK.py region_LR.py region_LS.py region_LT.py region_LU.py region_LV.py region_LY.py region_MA.py region_MC.py region_MD.py region_ME.py region_MF.py region_MG.py region_MH.py region_MK.py region_ML.py region_MM.py region_MN.py region_MO.py region_MP.py region_MQ.py region_MR.py region_MS.py region_MT.py region_MU.py region_MV.py region_MW.py region_MX.py region_MY.py region_MZ.py region_NA.py region_NC.py region_NE.py region_NF.py region_NG.py region_NI.py region_NL.py region_NO.py region_NP.py region_NR.py region_NU.py region_NZ.py region_OM.py region_PA.py region_PE.py region_PF.py region_PG.py region_PH.py region_PK.py region_PL.py region_PM.py region_PR.py region_PS.py region_PT.py region_PW.py region_PY.py region_QA.py region_RE.py region_RO.py region_RS.py region_RU.py region_RW.py region_SA.py region_SB.py region_SC.py region_SD.py region_SE.py region_SG.py region_SH.py region_SI.py region_SJ.py region_SK.py region_SL.py region_SM.py region_SN.py region_SO.py region_SR.py region_SS.py region_ST.py region_SV.py region_SX.py region_SY.py region_SZ.py region_TA.py region_TC.py region_TD.py region_TG.py region_TH.py region_TJ.py region_TK.py region_TL.py region_TM.py region_TN.py region_TO.py region_TR.py region_TT.py region_TV.py region_TW.py region_TZ.py region_UA.py region_UG.py region_US.py region_UY.py region_UZ.py region_VA.py region_VC.py region_VE.py region_VG.py region_VI.py region_VN.py region_VU.py region_WF.py region_WS.py region_XK.py region_YE.py region_YT.py region_ZA.py region_ZM.py region_ZW.py __init__.py __init__.pyi geocoder.py geocoder.pyi data0.py data1.py data10.py data11.py data12.py data13.py data14.py data15.py data16.py data17.py data18.py data19.py data2.py data20.py data21.py data22.py data23.py data24.py data25.py data26.py data27.py data28.py data3.py data4.py data5.py data6.py data7.py data8.py data9.py locale.py locale.pyi __init__.py __init__.pyi phonemetadata.py phonemetadata.pyi phonenumber.py phonenumber.pyi phonenumbermatcher.py phonenumbermatcher.pyi phonenumberutil.py phonenumberutil.pyi prefix.py prefix.pyi py.typed re_util.py re_util.pyi region_AC.py region_AD.py region_AE.py region_AF.py region_AG.py region_AI.py region_AL.py region_AM.py region_AO.py region_AR.py region_AS.py region_AT.py region_AU.py region_AW.py region_AX.py region_AZ.py region_BA.py region_BB.py region_BD.py region_BE.py region_BF.py region_BG.py region_BH.py region_BI.py region_BJ.py region_BL.py region_BM.py region_BN.py region_BO.py region_BQ.py region_BR.py region_BS.py region_BT.py region_BW.py region_BY.py region_BZ.py region_CA.py region_CC.py region_CD.py region_CF.py region_CG.py region_CH.py region_CI.py region_CK.py region_CL.py region_CM.py region_CN.py region_CO.py region_CR.py region_CU.py region_CV.py region_CW.py region_CX.py region_CY.py region_CZ.py region_DE.py region_DJ.py region_DK.py region_DM.py region_DO.py region_DZ.py region_EC.py region_EE.py region_EG.py region_EH.py region_ER.py region_ES.py region_ET.py region_FI.py region_FJ.py region_FK.py region_FM.py region_FO.py region_FR.py region_GA.py region_GB.py region_GD.py region_GE.py region_GF.py region_GG.py region_GH.py region_GI.py region_GL.py region_GM.py region_GN.py region_GP.py region_GR.py region_GT.py region_GU.py region_GW.py region_GY.py region_HK.py region_HN.py region_HR.py region_HT.py region_HU.py region_ID.py region_IE.py region_IL.py region_IM.py region_IN.py region_IQ.py region_IR.py region_IS.py region_IT.py region_JE.py region_JM.py region_JO.py region_JP.py region_KE.py region_KG.py region_KH.py region_KI.py region_KM.py region_KN.py region_KP.py region_KR.py region_KW.py region_KY.py region_KZ.py region_LA.py region_LB.py region_LC.py region_LI.py region_LK.py region_LR.py region_LS.py region_LT.py region_LU.py region_LV.py region_LY.py region_MA.py region_MC.py region_MD.py region_ME.py region_MF.py region_MG.py region_MH.py region_MK.py region_ML.py region_MM.py region_MN.py region_MO.py region_MP.py region_MQ.py region_MR.py region_MS.py region_MT.py region_MU.py region_MV.py region_MW.py region_MX.py region_MY.py region_MZ.py region_NA.py region_NC.py region_NE.py region_NF.py region_NG.py region_NI.py region_NL.py region_NO.py region_NP.py region_NR.py region_NU.py region_NZ.py region_OM.py region_PA.py region_PE.py region_PF.py region_PG.py region_PH.py region_PK.py region_PL.py region_PM.py region_PR.py region_PS.py region_PT.py region_PW.py region_PY.py region_QA.py region_RE.py region_RO.py region_RS.py region_RU.py region_RW.py region_SA.py region_SB.py region_SC.py region_SD.py region_SE.py region_SG.py region_SH.py region_SI.py region_SJ.py region_SK.py region_SL.py region_SM.py region_SN.py region_SO.py region_SR.py region_SS.py region_ST.py region_SV.py region_SX.py region_SY.py region_SZ.py region_TC.py region_TD.py region_TG.py region_TH.py region_TJ.py region_TL.py region_TM.py region_TN.py region_TO.py region_TR.py region_TT.py region_TV.py region_TW.py region_TZ.py region_UA.py region_UG.py region_US.py region_UY.py region_UZ.py region_VA.py region_VC.py region_VE.py region_VG.py region_VI.py region_VN.py region_VU.py region_WF.py region_WS.py region_XK.py region_YE.py region_YT.py region_ZA.py region_ZM.py region_ZW.py __init__.py __init__.pyi shortnumberinfo.py shortnumberinfo.pyi timezone.py timezone.pyi data0.py __init__.py __init__.pyi unicode_util.py unicode_util.pyi util.py util.pyi __init__.py __init__.pyi dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py asyoutypetest.py carriertest.py examplenumberstest.py geocodertest.py converttest.py __init__.py phonenumbermatchertest.py phonenumbertest.py phonenumberutiltest.py shortnumberinfotest.py data0.py __init__.py __init__.pyi region_800.py region_882.py region_979.py region_AD.py region_AE.py region_AM.py region_AO.py region_AR.py region_AU.py region_BB.py region_BR.py region_BS.py region_BY.py region_CA.py region_CC.py region_CN.py region_CO.py region_CX.py region_DE.py region_FR.py region_GB.py region_GG.py region_IT.py region_JP.py region_KR.py region_MX.py region_NZ.py region_PL.py region_RE.py region_RU.py region_SE.py region_SG.py region_TA.py region_US.py region_UZ.py region_YT.py __init__.py __init__.pyi data0.py __init__.py __init__.pyi testmetadatatest.py data0.py __init__.py __init__.pyi timezonetest.py __init__.py testwrapper.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n# Original libphonenumber Java code:\n# Copyright (C) 2009-2011 The Libphonenumber Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport distutils.core\nimport io\nimport sys\n# Importing setuptools adds some features like \"setup.py test\", but\n# it's optional so swallow the error if it's not there.\ntry:\nimport setuptools\nexcept ImportError:\npass\n\nmajor, minor = sys.version_info[:2]\npython_25 = (major > 2 or (major == 2 and minor >= 5))\nif not python_25:\nraise RuntimeError(\"Python 2.5 or newer is required\")\n\n# Discover version of phonenumbers package\nfrom phonenumbers import __version__\n\n# Discover whether per-prefix data is available\nif 'lite' in sys.argv:\nlite = True\ndel sys.argv[sys.argv.index('lite')]\nelse:\nlite = False\nif not lite:\ntry:\nimport phonenumbers.tzdata\nexcept ImportError:\nlite = True\n\nwith io.open(\"README.md\", mode=\"r\", encoding=\"utf-8\") as readme:\nlong_description = readme.read()\n\n# Various parameters depend on whether we are the lite package or not\nif lite:\npkgname = 'phonenumberslite'\npkgs = ['phonenumbers', 'phonenumbers.data', 'phonenumbers.shortdata']\nelse:\npkgname = 'phonenumbers'\npkgs = ['phonenumbers', 'phonenumbers.data', 'phonenumbers.geodata', 'phonenumbers.shortdata',\n'phonenumbers.carrierdata', 'phonenumbers.tzdata']\n\ndistutils.core.setup(name=pkgname,\nversion=__version__,\ndescription=\"Python version of Google's common library for parsing, formatting, storing and validating international phone numbers.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nauthor='David Drysdale',\nauthor_email='dmd@lurklurk.org',\nurl='https:\/\/github.com\/daviddrysdale\/python-phonenumbers',\nlicense='Apache License 2.0',\npackages=pkgs,\ntest_suite=\"tests.examplenumberstest\",\nplatforms='Posix; MacOS X; Windows',\npackage_data={\"\": [\"*.pyi\", \"py.typed\"]},\nclassifiers=['Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: OS Independent',\n'Topic :: Communications :: Telephony',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.5',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n],\n)\n"
    },
    {
        "package_name": "pinecone-client-2.0.13",
        "file_list": "LICENSE.txt MANIFEST.in config.py api_action.py api_base.py index_operations_api.py vector_operations_api.py __init__.py __init__.py api_client.py configuration.py exceptions.py approximated_config.py collection_meta.py create_collection_request.py create_request.py delete_request.py describe_index_stats_request.py describe_index_stats_response.py fetch_response.py hnsw_config.py index_meta.py index_meta_database.py index_meta_database_status.py index_meta_status.py namespace_summary.py patch_request.py protobuf_any.py protobuf_null_value.py query_request.py query_response.py query_vector.py rpc_status.py scored_vector.py single_query_results.py update_request.py upsert_request.py upsert_response.py vector.py __init__.py __init__.py model_utils.py rest.py __init__.py exceptions.py index_grpc.py vector_column_service_pb2.py vector_column_service_pb2_grpc.py vector_service_pb2.py vector_service_pb2_grpc.py __init__.py retry.py __init__.py constants.py error_handling.py __init__.py __init__.py exceptions.py index.py info.py manage.py __environment__ __init__.py __version__ dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO pyproject.toml README.md requirements-grpc.txt requirements.txt setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n#\n# Copyright (c) 2020-2021 Pinecone Systems Inc. All right reserved.\n#\n\nimport os\n\nimport setuptools\n\nlong_desc = \"\"\"# Pinecone\n\nPinecone is the vector database for machine learning applications. Build vector-based personalization, ranking, and search systems that are accurate, fast, and scalable. Use simple APIs with zero maintenance.\n\"\"\"\n\ndef read(fname):\nwith open(os.path.join(os.path.dirname(__file__), fname), \"r\", encoding=\"utf-8\") as fh:\nreturn fh.read()\n\n\nsetuptools.setup(\nname=\"pinecone-client\",\nversion=read(\"pinecone\/__version__\").strip(),\ndescription=\"Pinecone client and SDK\",\nlicense=\"Proprietary License\",\nlong_description=read(\"README.md\"),\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/www.pinecone.io\/\",\nproject_urls={\n\"Homepage\": \"https:\/\/www.pinecone.io\",\n\"Documentation\": \"https:\/\/pinecone.io\/docs\",\n\"Contact\": \"https:\/\/www.pinecone.io\/contact\/\",\n\"End-User License Agreement\": \"https:\/\/www.pinecone.io\/thin-client-user-agreement\/\"\n},\nauthor=\"Pinecone Systems, Inc.\",\nauthor_email=\"support@pinecone.io\",\nkeywords=\"Pinecone vector database cloud\",\npackages=setuptools.find_packages(),\ninstall_requires=read(\"requirements.txt\"),\nextras_require={\n\"grpc\": read(\"requirements-grpc.txt\"),\n},\ninclude_package_data=True,\npython_requires=\">=3.6\",\nentry_points={\n'console_scripts': ['pinecone=pinecone.cli:main'],\n},\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Environment :: Console\",\n\"Environment :: Other Environment\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Information Technology\",\n\"Intended Audience :: Science\/Research\",\n\"Intended Audience :: System Administrators\",\n\"License :: Other\/Proprietary License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Topic :: Database\",\n\"Topic :: Software Development\",\n\"Topic :: Software Development :: Libraries\",\n\"Topic :: Software Development :: Libraries :: Application Frameworks\",\n\"Topic :: Software Development :: Libraries :: Python Modules\"\n]\n)\n"
    },
    {
        "package_name": "pip-licenses-3.5.4",
        "file_list": "CHANGELOG.md LICENSE MANIFEST.in piplicenses.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py unicode_characters.txt test_piplicenses.py",
        "setup.py": "# -*- coding: utf-8 -*-\n# vim:fenc=utf-8 ff=unix ft=python ts=4 sw=4 sts=4 si et\n\"\"\"\npip-licenses\n\nMIT License\n\nCopyright (c) 2018 raimon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"\n\nimport os\nfrom setuptools import setup\nfrom codecs import open\nfrom os import path\n\nfrom piplicenses import (__pkgname__ as PKG_NAME, __version__ as VERSION,\n__author__ as AUTHOR, __license__ as LICENSE,\n__summary__ as SUMMARY, __url__ as URL)\n\n\nhere = path.abspath(path.dirname(__file__))\n\n\ndef read_file(filename):\ncontent = ''\nwith open(path.join(here, filename), encoding='utf-8') as f:\ncontent = f.read()\n\nreturn content\n\n\nLONG_DESC = ''\ntry:\nfrom pypandoc import convert_file\n\nabout_this = convert_file('README.md', 'rst', format='markdown_github')\nseparate = '\\n\\n'\nchange_log = convert_file('CHANGELOG.md', 'rst', format='markdown_github')\n\nLONG_DESC = about_this + separate + change_log\nexcept (IOError, ImportError):\nLONG_DESC = read_file('README.md')\n\n\nsetup(\nname=PKG_NAME,\nversion=VERSION,\ndescription=SUMMARY,\nlong_description=LONG_DESC,\nurl=URL,\nauthor=AUTHOR,\nlicense=LICENSE,\nentry_points={\n'console_scripts': [\nPKG_NAME + '=piplicenses:main',\n],\n},\n)\n"
    },
    {
        "package_name": "pip_shims-0.7.3",
        "file_list": "CHANGELOG.rst CHANGELOG.rst conf.py pip_shims.compat.rst pip_shims.environment.rst pip_shims.models.rst pip_shims.rst pip_shims.shims.rst pip_shims.utils.rst pip_shims.compat.rst pip_shims.environment.rst pip_shims.models.rst pip_shims.shims.rst pip_shims.utils.rst index.rst make.bat Makefile pip_shims.compat.rst pip_shims.environment.rst pip_shims.models.rst pip_shims.rst pip_shims.shims.rst pip_shims.utils.rst quickstart.rst pip_shims.compat.rst pip_shims.environment.rst pip_shims.models.rst pip_shims.rst pip_shims.shims.rst pip_shims.utils.rst pip_shims.compat.rst pip_shims.environment.rst pip_shims.models.rst pip_shims.shims.rst pip_shims.utils.rst _autosummary.rst module.rst LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py compat.py environment.py models.py shims.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe",
        "setup.py": "import ast\nimport os\n\n# fmt: off\nif os.environ.get(\"PIP_SHIMS_BASE_MODULE\", None):\nos.environ.pop(\"PIP_SHIMS_BASE_MODULE\")\n\n# fmt: on\n\nfrom setuptools import find_packages, setup # isort:skip\n\n\nROOT = os.path.dirname(__file__)\n\nPACKAGE_NAME = \"pip_shims\"\n\n# Can't set this in setup.cfg because of the pip import hackery we do\nVERSION = None\n\nwith open(os.path.join(ROOT, \"src\", PACKAGE_NAME, \"__init__.py\")) as f:\nfor line in f:\nif line.startswith(\"__version__ = \"):\nVERSION = ast.literal_eval(line[len(\"__version__ = \") :].strip())\nbreak\nif VERSION is None:\nraise EnvironmentError(\"failed to read version\")\n\n\n# Put everything in setup.cfg, except those that don't actually work?\nsetup(\n# These really don't work.\npackage_dir={\"\": \"src\"},\npackages=find_packages(\"src\"),\n# I don't know how to specify an empty key in setup.cfg.\npackage_data={\"\": [\"LICENSE*\", \"README*\"]},\n# I need this to be dynamic.\nversion=VERSION,\n)\n"
    },
    {
        "package_name": "pip-with-requires-python-1.0.1",
        "file_list": ".gitignore LICENSE pip_with_requires_python.py PKG-INFO pyproject.toml readme.md setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# setup.py generated by flit for tools that don't yet use PEP 517\n\nfrom distutils.core import setup\n\nextras_require = \\\n{\":python_version < '3'\": ['pip~=20.3'],\n\":python_version == '3.3.*'\": ['pip~=10.0'],\n\":python_version == '3.4.*'\": ['pip~=19.1.1'],\n\":python_version == '3.5.*'\": ['pip~=20.3'],\n\":python_version > '3.5'\": ['pip>=21']}\n\nsetup(name='pip-with-requires-python',\nversion='1.0.1',\ndescription='install pip with Requires-Python support',\nauthor='Thomas Grainger',\nauthor_email='pip-with-requires-python@graingert.co.uk',\nurl='https:\/\/github.com\/graingert\/pip-with-requires-python',\npy_modules=['pip_with_requires_python'],\nextras_require=extras_require,\n)\n"
    },
    {
        "package_name": "pipdeptree-2.2.1",
        "file_list": "CHANGES.md LICENSE MANIFEST.in dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt pipdeptree.py PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "import re\nimport ast\n\nfrom setuptools import setup\n\n\n_version_re = re.compile(r'__version__\\s+=\\s+(.*)')\n\nwith open('pipdeptree.py', 'rb') as f:\nversion = str(ast.literal_eval(_version_re.search(\nf.read().decode('utf-8')).group(1)))\n\n\nwith open('.\/README.rst') as f:\nlong_desc = f.read()\n\n\ninstall_requires = [\"pip >= 6.0.0\"]\n\n\nsetup(\nname='pipdeptree',\nversion=version,\nauthor='Vineet Naik',\nauthor_email='naikvin@gmail.com',\nurl='https:\/\/github.com\/naiquevin\/pipdeptree',\nlicense='MIT License',\nlicense_file='LICENSE',\ndescription='Command line utility to show dependency tree of packages',\nlong_description=long_desc,\ninstall_requires=install_requires,\nextras_require={'graphviz': ['graphviz']},\npython_requires='>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*',\npy_modules=['pipdeptree'],\nentry_points={\n'console_scripts': [\n'pipdeptree = pipdeptree:main'\n]\n},\nclassifiers=[\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9'\n]\n)\n"
    },
    {
        "package_name": "pkgconfig-1.5.5",
        "file_list": "LICENSE PKG-INFO pkgconfig.py __init__.py pyproject.toml README.rst setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['pkgconfig']\n\npackage_data = \\\n{'': ['*']}\n\nsetup_kwargs = {\n'name': 'pkgconfig',\n'version': '1.5.5',\n'description': 'Interface Python with pkg-config',\n'long_description': \"pkgconfig\\n=========\\n\\n.. image:: https:\/\/travis-ci.org\/matze\/pkgconfig.png?branch=master\\n :target: https:\/\/travis-ci.org\/matze\/pkgconfig\\n\\n``pkgconfig`` is a Python module to interface with the ``pkg-config``\\ncommand line tool for Python 3.3+.\\n\\nIt can be used to\\n\\n- find all pkg-config packages ::\\n\\n >>> packages = pkgconfig.list_all()\\n\\n- check if a package exists ::\\n\\n >>> pkgconfig.exists('glib-2.0')\\n True\\n\\n- check if a package meets certain version requirements ::\\n\\n >>> pkgconfig.installed('glib-2.0', '< 2.26')\\n False\\n\\n- return the version ::\\n\\n >>> pkgconfig.modversion('glib-2.0')\\n '2.56.3'\\n\\n- query CFLAGS and LDFLAGS ::\\n\\n >>> pkgconfig.cflags('glib-2.0')\\n '-I\/usr\/include\/glib-2.0 -I\/usr\/lib\/glib-2.0\/include'\\n\\n >>> pkgconfig.libs('glib-2.0')\\n '-lglib-2.0'\\n\\n- get all variables defined for a package::\\n\\n >>> pkgconfig.variables('glib-2.0')\\n {u'exec_prefix': u'\/usr'}\\n\\n- parse the output to build extensions with setup.py ::\\n\\n >>> d = pkgconfig.parse('glib-2.0 gtk+-2.0')\\n >>> d['libraries']\\n [u'gtk+-2.0', u'glib-2.0']\\n\\n or ::\\n\\n >>> ext = Extension('foo', ['foo.c'])\\n >>> # sets extension attributes as needed\\n >>> pkgconfig.configure_extension(ext, 'glib-2.0 gtk+-2.0')\\n\\n The ``pkgconfig.parse`` function returns a dictonary of lists.\\n The lists returned are accurate representations of the equivalent\\n ``pkg-config`` call's result, both in content and order.\\n\\nIf ``pkg-config`` is not on the path, raises ``EnvironmentError``.\\n\\nThe ``pkgconfig`` module is licensed under the MIT license.\\n\\n\\nChangelog\\n---------\\n\\nVersion 1.5.4\\n~~~~~~~~~~~~~\\n\\n- Adjust pyproject.toml and drop Python 2 support\\n\\nVersion 1.5.3\\n~~~~~~~~~~~~~\\n\\n- Add ``configure_extension`` API\\n\\nVersion 1.5.2\\n~~~~~~~~~~~~~\\n\\n- Update poetry dep\\n- Improve CI\\n\\nVersion 1.5.0\\n~~~~~~~~~~~~~\\n\\n- Use poetry instead of setuptools directly\\n- Fix #42: raise exception if package is missing\\n- Fix version parsing for openssl-like version numbers, fixes #32\\n- Fix #31: expose --modversion\\n- Fix #30: strip whitespace from variable names\\n\\nVersion 1.4.0\\n~~~~~~~~~~~~~\\n\\n- Add boolean ``static`` keyword to output private libraries as well\\n- Raise original ``OSError`` as well\\n\\nVersion 1.3.1\\n~~~~~~~~~~~~~\\n\\n- Fix compatibility problems with Python 2.6\\n\\nVersion 1.3.0\\n~~~~~~~~~~~~~\\n\\n- Add variables() API to query defined variables\\n- Disable Python 3.2 and enable Python 3.5 and 3.6 tests\\n- Fix #16: handle spaces of values in .pc files correctly\\n\\nVersion 1.2.1 and 1.2.2\\n~~~~~~~~~~~~~~~~~~~~~~~\\n\\nBug fix releases released on December 1st and 2nd 2016.\\n\\n- Include the ``data`` folder in the distribution in order to run tests\\n- Improve the tests\\n\\n\\nVersion 1.2.0\\n~~~~~~~~~~~~~\\n\\nReleased on November 30th 2016.\\n\\n- Potential break: switch from result set to list\\n- Expose --list-all query\\n- Added support for PKG_CONFIG environment variable\\n\\n\\nVersion 1.1.0\\n~~~~~~~~~~~~~\\n\\nReleased on November 6th 2013.\\n\\n- Multiple packages can now be parsed with a single call to ``.parse``.\\n\\n\\nVersion 1.0.0\\n~~~~~~~~~~~~~\\n\\nFirst release on September 8th 2013.\\n\",\n'author': 'Matthias Vogelgesang',\n'author_email': 'matthias.vogelgesang@gmail.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/matze\/pkgconfig',\n'packages': packages,\n'package_data': package_data,\n'python_requires': '>=3.3,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "plac-1.3.5",
        "file_list": "CHANGES.md annotations.py conf.py dry_run.py example1.py example10.help example10.py example11.help example11.py example12.help example12.py example13.help example13.py example14.help example14.py example15.help example15.py example16.help example16.py example2.py example3.help example3.py example4.py example5.help example5.py example5_.py example6.help example6.py example7.help example7.py example7_.help example7_.py example8.help example8.py example8_.help example8_.py example9.help example9.py example_all.help example_all.py importer1.py importer2.py importer3.py importer_ui.py ishelve.help ishelve.py ishelve2.py ishelve3.py picalculator.py read_stdin.py server_ex.py test_ishelve.py test_ishelve_more.py test_pi.py test_plac.py test_runp.py test_server.py tkmon.py vcs.help vcs.py LICENSE.txt MANIFEST.in PKG-INFO dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt plac.py plac_core.py plac_ext.py plac_runner.py plac_tk.py README.md RELEASE.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup\nimport os.path\n\n\ndef require(*modules):\n\"\"\"Check if the given modules are already available; if not add them to\nthe dependency list.\"\"\"\ndeplist = []\nfor module in modules:\ntry:\n__import__(module)\nexcept ImportError:\ndeplist.append(module)\nreturn deplist\n\n\ndef getversion(fname):\n\"Get the __version__ without importing plac\"\nfor line in open(fname):\nif line.startswith('__version__'):\nreturn eval(line[13:])\n\n\nif __name__ == '__main__':\nsetup(name='plac',\nversion=getversion(\nos.path.join(os.path.dirname(__file__), 'plac.py')),\ndescription=('The smartest command line arguments parser '\n'in the world'),\nlong_description=open('README.md').read(),\nlong_description_content_type=\"text\/markdown\",\nauthor='Michele Simionato',\nauthor_email='michele.simionato@gmail.com',\nurl='https:\/\/github.com\/ialbert\/plac',\nlicense=\"BSD License\",\npy_modules=['plac_core', 'plac_ext', 'plac_tk', 'plac'],\nscripts=['plac_runner.py'],\ninstall_requires=require('argparse'),\nkeywords=\"command line arguments parser\",\nplatforms=[\"All\"],\nclassifiers=['Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Natural Language :: English',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Topic :: Software Development :: Libraries',\n'Topic :: Utilities'],\nzip_safe=False)\n"
    },
    {
        "package_name": "plone.app.layout-3.5.1",
        "file_list": "CHANGES.rst CONTRIBUTING.rst LICENSE.GPL LICENSE.txt MANIFEST.in PKG-INFO configure.zcml analytics.txt test_doctests.py __init__.py view.pt view.py __init__.py configure.zcml configure.zcml dashboard.pt dashboard.py user_actions.pt user_actions.py __init__.py configure.zcml context.py interface.py interfaces.py layout.py patterns_settings.py portal.py bodyclass_nametest.pt test_context.py test_interface.py test_layout.py test_portal.py test_tools.py __init__.py tools.py __init__.py configure.zcml icons.py interfaces.py __init__.py author.pt configure.zcml favicon.pt rsslink.pt search.pt test_canonical_url.py test_rssviewlet.py __init__.py viewlets.py __init__.py configure.zcml defaultpage.py interfaces.py navtree.py root.py test_root.py __init__.py __init__.py configure.zcml interfaces.py links.pt nextprevious.pt view.py __init__.py permissions.zcml configure.zcml README.txt sitemap.py sitemap.xml test_sitemap.py __init__.py __init__.py testing.py anontools.pt colophon.pt common.py configure.zcml content.py contentactions_blank.pt contentviews.pt content_history.pt document_actions.pt document_byline.pt document_relateditems.pt dublin_core.pt footer.pt globalstatusmessage.pt globalstatusmessage.py history_view.pt httpheaders.py interfaces.py keywords.pt logo.pt manage_portlets_fallback.pt membertools.pt menu.pt path_bar.pt popup_content_history.pt portal_header.pt review_history.pt searchbox.pt sections.pt site_actions.pt social.py social_tags.pt social_tags_body.pt base.py history.txt test_common.py test_content.py test_functional.py test_history.py test_social.py __init__.py tiny_logo.pt title.pt toc.pt toolbar.pt toolbar.py viewport.pt __init__.py __init__.py __init__.py __init__.py dependency_links.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt pyproject.toml README.rst setup.cfg setup.py",
        "setup.py": "from setuptools import find_packages\nfrom setuptools import setup\n\n\nversion = \"3.5.1\"\n\nlong_description = open(\"README.rst\").read() + \"\\n\" + open(\"CHANGES.rst\").read()\n\nsetup(\nname=\"plone.app.layout\",\nversion=version,\ndescription=\"Layout mechanisms for Plone\",\nlong_description=long_description,\nclassifiers=[\n\"Development Status :: 6 - Mature\",\n\"Environment :: Web Environment\",\n\"Framework :: Plone\",\n\"Framework :: Plone :: 5.2\",\n\"Framework :: Plone :: Core\",\n\"Framework :: Zope2\",\n\"Framework :: Zope :: 4\",\n\"License :: OSI Approved :: GNU General Public License v2 (GPLv2)\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n],\nkeywords=\"plone layout viewlet\",\nauthor=\"Plone Foundation\",\nauthor_email=\"plone-developers@lists.sourceforge.net\",\nurl=\"https:\/\/pypi.org\/project\/plone.app.layout\",\nlicense=\"GPL version 2\",\npackages=find_packages(),\nnamespace_packages=[\"plone\", \"plone.app\"],\ninclude_package_data=True,\nzip_safe=False,\ninstall_requires=[\n\"Acquisition\",\n\"DateTime\",\n\"plone.app.content\",\n\"plone.app.portlets\",\n\"plone.app.viewletmanager >=1.2\",\n\"plone.batching >1.0.999\",\n\"plone.i18n\",\n\"plone.memoize\",\n\"plone.portlets\",\n\"plone.registry\",\n\"Products.CMFCore\",\n\"Products.CMFDynamicViewFTI\",\n\"Products.CMFEditions >=1.2.2\",\n\"Products.CMFPlone >=5.0b3.dev0\",\n\"setuptools\",\n\"six\",\n\"zope.component\",\n\"zope.deferredimport\",\n\"zope.deprecation\",\n\"zope.dottedname\",\n\"zope.i18n\",\n\"zope.interface\",\n\"zope.publisher\",\n\"zope.schema\",\n\"zope.viewlet\",\n\"Zope2\",\n],\nextras_require=dict(\ntest=[\n\"plone.app.contenttypes\",\n\"plone.app.intid\",\n\"plone.app.relationfield\",\n\"plone.app.testing\",\n\"plone.dexterity\",\n\"plone.locking\",\n\"plone.testing\",\n\"z3c.relationfield\",\n\"zope.annotation\",\n]\n),\n)\n"
    },
    {
        "package_name": "plone.behavior-1.4.0",
        "file_list": "CHANGES.rst CONTRIBUTING.rst INSTALL.txt LICENSE.txt MANIFEST.in PKG-INFO annotation.py annotation.rst behaviors.rst configure.zcml directives.rst factory.py interfaces.py markers.py meta.zcml metaconfigure.py registration.py tests.py vocab.py __init__.py __init__.py dependency_links.txt entry_points.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt pyproject.toml README.rst setup.cfg setup.py",
        "setup.py": "from setuptools import find_packages\nfrom setuptools import setup\n\n\nversion = '1.4.0'\ndesc = \"Infrastructure for maintaining a registry of available behaviors\"\ndoc_files = [\n\"README.rst\",\n\"CHANGES.rst\",\n]\nlongdesc = '\\n'.join([open(_).read() for _ in doc_files])\n\n\nsetup(\nname='plone.behavior',\nversion=version,\ndescription=desc,\nlong_description=longdesc,\n# more strings from https:\/\/pypi.org\/classifiers\/\nclassifiers=[\n\"Development Status :: 6 - Mature\",\n\"Framework :: Plone\",\n\"Framework :: Plone :: 5.1\",\n\"Framework :: Plone :: 5.2\",\n\"Framework :: Plone :: Core\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"License :: OSI Approved :: BSD License\",\n],\nkeywords='Plone behavior registry',\nauthor='Martin Aspeli',\nauthor_email='optilude@gmail.com',\nurl='https:\/\/pypi.org\/project\/plone.behavior',\nlicense='BSD',\npackages=find_packages(),\nnamespace_packages=['plone'],\ninclude_package_data=True,\nzip_safe=False,\ninstall_requires=[\n'setuptools',\n'zope.annotation',\n'zope.component',\n'zope.configuration',\n'zope.interface',\n'zope.schema',\n],\nextras_require={\n'test': [\n'zope.lifecycleevent',\n],\n},\nentry_points=\"\"\"\n\"\"\",\n)\n"
    },
    {
        "package_name": "plover-3.1.1",
        "file_list": "ISSUE_TEMPLATE.md PULL_REQUEST_TEMPLATE.md .gitignore .travis.yml Plover.desktop appveyor.yml .gitignore PKGBUILD bootstrap.bat bootstrap.sh CHANGELOG.rst CONTRIBUTING.md changelog compat control copyright rules format plover_guide.md plover_guide.pdf plover_guide.tex SCOWL_README.txt launch.bat launch.sh LICENSE.txt debuild.sh makepkg.sh README.md MANIFEST.in app2dmg.sh plover.icns plover_template.dmg.gz README.md PKG-INFO app.py american_english_words.txt commands.json connected.png disconnected.png down.png main.json plover-icon.svg plover.ico plover.png refresh.png remove.png spinner.gif up.png user.json config.py base.py json_dict.py loading_manager.py rtfcre_dict.py __init__.py dictionary_editor_store.py exception.py formatting.py add_translation.py config.py dictionary_editor.py keyboard_config.py log.py log_wx.py lookup.py main.py paper_tape.py serial_config.py suggestions.py util.py __init__.py key_combo.py log.py base.py geminipr.py keyboard.py keymap.py passport.py procat.py registry.py stentura.py treal.py txbolt.py __init__.py main.py misc.py orthography.py config.py keyboardcontrol.py log_dbus.py log_osx.py osxkeyboardcontrol.py osxkeyboardlayout.py processlock.py winkeyboardcontrol.py winkeyboardlayout.py xkeyboardcontrol.py __init__.py steno.py steno_dictionary.py suggestions.py english_stenotype.py __init__.py translation.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe README.rst README_es.rst setup.cfg setup.py test_blackbox.py test_config.py test_default_dict.py test_engine.py test_formatting.py test_json_dict.py test_key_combo.py test_loading_manager.py test_log.py test_misc.py test_orthography.py test_passport.py test_registry.py test_rtfcre_dict.py test_steno.py test_steno_dictionary.py test_stentura.py test_translation.py __init__.py test.bat test.sh metadata.py __init__.py bootstrap.ps1 build.bat helper.py hook-plover.py main.py README.md",
        "setup.py": "#!\/usr\/bin\/env python2\n# Copyright (c) 2010 Joshua Harlan Lifton.\n# See LICENSE.txt for details.\n\nimport contextlib\nimport os\nimport re\nimport shutil\nimport subprocess\nimport sys\n\nfrom distutils import log\nimport pkg_resources\nimport setuptools\n\nfrom plover import (\n__name__ as __software_name__,\n__version__,\n__description__,\n__long_description__,\n__url__,\n__download_url__,\n__license__,\n__copyright__,\n)\n\nfrom utils.metadata import copy_metadata\n\n\n# Don't use six to avoid dependency with 'write_requirements' command.\nPY3 = sys.version_info[0] >= 3\n\nPACKAGE = '%s-%s-%s' % (\n__software_name__,\n__version__,\n'py3' if PY3 else 'py2',\n)\n\n\ndef get_version():\nif not os.path.exists('.git'):\nreturn None\nversion = subprocess.check_output('git describe --tags --match=v[0-9]*'.split()).strip().decode()\nm = re.match(r'^v(\\d[\\d.]*)(-\\d+-g[a-f0-9]*)?$', version)\nassert m is not None, version\nversion = m.group(1)\nif m.group(2) is not None:\nversion += '+' + m.group(2)[1:].replace('-', '.')\nreturn version\n\n\ndef pyinstaller(*args):\npy_args = [\n'--log-level=INFO',\n'--specpath=build',\n'--additional-hooks-dir=windows',\n'--name=%s' % PACKAGE,\n'--noconfirm',\n'--windowed',\n'--onefile',\n]\npy_args.extend(args)\npy_args.append('windows\/main.py')\nmain = pkg_resources.load_entry_point('PyInstaller', 'console_scripts', 'pyinstaller')\nreturn main(py_args) or 0\n\n\nclass Command(setuptools.Command):\n\ndef build_in_place(self):\nself.run_command('build_py')\nself.reinitialize_command('build_ext', inplace=1)\nself.run_command('build_ext')\n\n@contextlib.contextmanager\ndef project_on_sys_path(self):\nself.build_in_place()\nei_cmd = self.get_finalized_command(\"egg_info\")\nold_path = sys.path[:]\nold_modules = sys.modules.copy()\ntry:\nsys.path.insert(0, pkg_resources.normalize_path(ei_cmd.egg_base))\npkg_resources.working_set.__init__()\npkg_resources.add_activation_listener(lambda dist: dist.activate())\npkg_resources.require('%s==%s' % (ei_cmd.egg_name, ei_cmd.egg_version))\nyield\nfinally:\nsys.path[:] = old_path\nsys.modules.clear()\nsys.modules.update(old_modules)\npkg_resources.working_set.__init__()\n\n\nclass PyInstallerDist(Command):\n\nuser_options = []\nextra_args = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nself.build_in_place()\ncode = pyinstaller(*self.extra_args)\nif code != 0:\nsys.exit(code)\n\n\nclass BinaryDistWin(PyInstallerDist):\ndescription = 'create an executable for MS Windows'\nextra_args = [\n'--icon=plover\/assets\/plover.ico',\n]\n\n\nclass Launch(Command):\n\ndescription = 'run %s from source' % __software_name__.capitalize()\ncommand_consumes_arguments = True\nuser_options = []\n\ndef initialize_options(self):\nself.args = None\n\ndef finalize_options(self):\npass\n\ndef run(self):\nwith self.project_on_sys_path():\nfrom plover.main import main\nsys.argv = [' '.join(sys.argv[0:2]) + ' --'] + self.args\nsys.exit(main())\n\n\nclass PatchVersion(Command):\n\ndescription = 'patch package version from VCS'\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nversion = get_version()\nif version is None:\nsys.exit(1)\nlog.info('patching version to %s', version)\nversion_file = os.path.join('plover', '__init__.py')\nwith open(version_file, 'r') as fp:\ncontents = fp.read().split('\\n')\ncontents = [re.sub(r'^__version__ = .*$', \"__version__ = '%s'\" % version, line)\nfor line in contents]\nwith open(version_file, 'w') as fp:\nfp.write('\\n'.join(contents))\n\n\nclass TagWeekly(Command):\n\ndescription = 'tag weekly version'\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nversion = get_version()\nif version is None:\nsys.exit(1)\nweekly_version = 'weekly-v%s' % version\nlog.info('tagging as %s', weekly_version)\nsubprocess.check_call('git tag -f'.split() + [weekly_version])\n\n\nclass Test(Command):\n\ndescription = 'run unit tests after in-place build'\ncommand_consumes_arguments = True\nuser_options = []\n\ndef initialize_options(self):\nself.args = []\n\ndef finalize_options(self):\npass\n\ndef run(self):\nwith self.project_on_sys_path():\nself.run_tests()\n\ndef run_tests(self):\ntest_dir = os.path.join(os.path.dirname(__file__), 'test')\n# Remove __pycache__ directory so pytest does not freak out\n# when switching between the Linux\/Windows versions.\npycache = os.path.join(test_dir, '__pycache__')\nif os.path.exists(pycache):\nshutil.rmtree(pycache)\ncustom_testsuite = None\nargs = []\nfor a in self.args:\nif '-' == a[0]:\nargs.append(a)\nelif os.path.exists(a):\ncustom_testsuite = a\nargs.append(a)\nelse:\nargs.extend(('-k', a))\nif custom_testsuite is None:\nargs.insert(0, test_dir)\nsys.argv[1:] = args\nmain = pkg_resources.load_entry_point('pytest',\n'console_scripts',\n'py.test')\nsys.exit(main())\n\n\nclass BinaryDistApp(setuptools.Command):\n\nuser_options = []\nextra_args = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\n# Make sure metadata are up-to-date first.\nself.run_command('egg_info')\nself.run_command('py2app')\napp = 'dist\/%s.app' % PACKAGE\nlibdir = '%s\/Contents\/Resources\/lib\/python2.7' % app\nsitezip = '%s\/site-packages.zip' % libdir\n# Add version to filename and strip other architectures.\n# (using py2app --arch is not enough).\ntmp_app = 'dist\/%s.app' % __software_name__\ncmd = 'ditto --arch x86_64 %s %s' % (tmp_app, app)\nlog.info('running %s', cmd)\nsubprocess.check_call(cmd.split())\nshutil.rmtree(tmp_app)\n# We can't access package resources from the site zip,\n# so extract module and package data to the lib directory.\ncmd = 'unzip -d %s %s plover\/*' % (libdir, sitezip)\nlog.info('running %s', cmd)\nsubprocess.check_call(cmd.split())\ncmd = 'zip -d %s plover\/*' % sitezip\nlog.info('running %s', cmd)\nsubprocess.check_call(cmd.split())\n# Add packages metadata.\ncopy_metadata('.', libdir)\n\n\nclass BinaryDistDmg(Command):\n\nuser_options = []\nextra_args = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nself.run_command('bdist_app')\napp = 'dist\/%s.app' % PACKAGE\ndmg = 'dist\/%s.dmg' % PACKAGE\ncmd = 'bash -x osx\/app2dmg.sh %s %s' % (app, dmg)\nlog.info('running %s', cmd)\nsubprocess.check_call(cmd.split())\n\n\ncmdclass = {\n'launch': Launch,\n'patch_version': PatchVersion,\n'tag_weekly': TagWeekly,\n'test': Test,\n}\nsetup_requires = ['setuptools-scm']\noptions = {}\nkwargs = {}\n\nif sys.platform.startswith('darwin'):\nsetup_requires.append('py2app')\noptions['py2app'] = {\n'arch': 'x86_64',\n'argv_emulation': False,\n'iconfile': 'osx\/plover.icns',\n'plist': {\n'CFBundleName': __software_name__.capitalize(),\n'CFBundleShortVersionString': __version__,\n'CFBundleVersion': __version__,\n'CFBundleIdentifier': 'org.openstenoproject.plover',\n'NSHumanReadableCopyright': __copyright__,\n'CFBundleDevelopmentRegion': 'English',\n}\n}\n# Py2app will not look at entry_points.\nkwargs['app'] = 'plover\/main.py',\ncmdclass['bdist_app'] = BinaryDistApp\ncmdclass['bdist_dmg'] = BinaryDistDmg\n\nif sys.platform.startswith('win32'):\nsetup_requires.append('PyInstaller==3.1.1')\ncmdclass['bdist_win'] = BinaryDistWin\n\nsetup_requires.append('pytest')\n\ndependency_links = [\n'https:\/\/github.com\/benoit-pierre\/pyobjc\/releases\/download\/pyobjc-3.1.1+plover2\/pyobjc-core-3.1.1-plover2.tar.gz#egg=pyobjc-core',\n'https:\/\/github.com\/benoit-pierre\/pyobjc\/releases\/download\/pyobjc-3.1.1+plover2\/pyobjc-framework-Cocoa-3.1.1-plover2.tar.gz#egg=pyobjc-framework-Cocoa',\n]\n\ninstall_requires = [\n'six',\n'setuptools',\n'pyserial>=2.7',\n'appdirs>=1.3.0',\n'hidapi',\n]\n\nextras_require = {\n':\"win32\" in sys_platform': [\n],\n':\"linux\" in sys_platform': [\n'python-xlib>=0.16',\n],\n':\"darwin\" in sys_platform': [\n'pyobjc-core==3.1.1+plover2',\n'pyobjc-framework-Cocoa==3.1.1+plover2',\n'pyobjc-framework-Quartz==3.1.1',\n'appnope>=0.1.0',\n],\n}\n\ntests_require = [\n'mock',\n]\n\n\ndef write_requirements(extra_features=()):\nrequirements = setup_requires + install_requires + tests_require\nfor feature, dependencies in extras_require.items():\nif feature.startswith(':'):\ncondition = feature[1:]\nfor require in dependencies:\nrequirements.append('%s; %s' % (require, condition))\nelif feature in extra_features:\nrequirements.extend(dependencies)\nrequirements = sorted(set(requirements))\nwith open('requirements.txt', 'w') as fp:\nfp.write('\\n'.join(requirements))\nfp.write('\\n')\nwith open('requirements_constraints.txt', 'w') as fp:\nfp.write('\\n'.join(dependency_links))\nfp.write('\\n')\n\n\nif __name__ == '__main__':\n\nif len(sys.argv) > 1 and sys.argv[1] == 'write_requirements':\nwrite_requirements(extra_features=sys.argv[2:])\nsys.exit(0)\n\nsetuptools.setup(\nname=__software_name__,\nversion=__version__,\ndescription=__description__,\nlong_description=__long_description__,\nurl=__url__,\ndownload_url=__download_url__,\nlicense=__license__,\nauthor='Joshua Harlan Lifton',\nauthor_email='joshua.harlan.lifton@gmail.com',\nmaintainer='Ted Morin',\nmaintainer_email='morinted@gmail.com',\ninclude_package_data=True,\nzip_safe=True,\noptions=options,\ncmdclass=cmdclass,\nsetup_requires=setup_requires,\ninstall_requires=install_requires,\nextras_require=extras_require,\ntests_require=tests_require,\ndependency_links=dependency_links,\nentry_points={\n'console_scripts': ['plover=plover.main:main'],\n'setuptools.installation': ['eggsecutable=plover.main:main'],\n},\npackages=[\n'plover', 'plover.machine', 'plover.gui',\n'plover.oslayer', 'plover.dictionary',\n'plover.system',\n],\ndata_files=[\n('share\/applications', ['application\/Plover.desktop']),\n('share\/pixmaps', ['plover\/assets\/plover.png']),\n],\nclassifiers=[\n'Programming Language :: Python :: 2.7',\n'License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)',\n'Development Status :: 5 - Production\/Stable',\n'Environment :: X11 Applications',\n'Environment :: MacOS X',\n'Environment :: Win32 (MS Windows)',\n'Intended Audience :: End Users\/Desktop',\n'Natural Language :: English',\n'Operating System :: POSIX :: Linux',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: Microsoft :: Windows',\n'Topic :: Adaptive Technologies',\n'Topic :: Desktop Environment',\n],\n**kwargs\n)\n\n"
    },
    {
        "package_name": "policy_sentry-0.12.4",
        "file_list": "MANIFEST.in PKG-INFO analyze.py expand.py __init__.py cli.py version.py __init__.py create_template.py initialize.py query.py write_policy.py __init__.py actions.py all.py arns.py conditions.py __init__.py awsdocs.py constants.py access-level-overrides.yml credentials-exposure.txt privilege-escalation.txt resource-exposure.txt resource-policies.txt list_alexaforbusiness.html list_amazonapigateway.html list_amazonapigatewaymanagement.html list_amazonapigatewaymanagementv2.html list_amazonappflow.html list_amazonappintegrations.html list_amazonappstream2.0.html list_amazonathena.html list_amazonbraket.html list_amazonchime.html list_amazonclouddirectory.html list_amazoncloudfront.html list_amazoncloudsearch.html list_amazoncloudwatch.html list_amazoncloudwatchevidently.html list_amazoncloudwatchlogs.html list_amazoncloudwatchsynthetics.html list_amazoncodeguru.html list_amazoncodeguruprofiler.html list_amazoncodegurureviewer.html list_amazoncognitoidentity.html list_amazoncognitosync.html list_amazoncognitouserpools.html list_amazoncomprehend.html list_amazoncomprehendmedical.html list_amazonconnect.html list_amazonconnectcustomerprofiles.html list_amazonconnectvoiceid.html list_amazonconnectwisdom.html list_amazondatalifecyclemanager.html list_amazondetective.html list_amazondevopsguru.html list_amazondynamodb.html list_amazondynamodbacceleratordax.html list_amazonec2.html list_amazonec2autoscaling.html list_amazonec2imagebuilder.html list_amazonec2instanceconnect.html list_amazonelasticache.html list_amazonelasticblockstore.html list_amazonelasticcontainerregistry.html list_amazonelasticcontainerregistrypublic.html list_amazonelasticcontainerservice.html list_amazonelasticfilesystem.html list_amazonelasticinference.html list_amazonelastickubernetesservice.html list_amazonelasticmapreduce.html list_amazonelastictranscoder.html list_amazonemroneksemrcontainers.html list_amazonemrserverless.html list_amazoneventbridge.html list_amazoneventbridgeschemas.html list_amazonfinspace.html list_amazonforecast.html list_amazonfrauddetector.html list_amazonfreertos.html list_amazonfsx.html list_amazongamelift.html list_amazongamesparks.html list_amazonglacier.html list_amazongroundtruthlabeling.html list_amazonguardduty.html list_amazonhealthlake.html list_amazonhoneycode.html list_amazoninspector.html list_amazoninspector2.html list_amazoninteractivevideoservice.html list_amazoninteractivevideoservicechat.html list_amazonkendra.html list_amazonkeyspacesforapachecassandra.html list_amazonkinesis.html list_amazonkinesisanalytics.html list_amazonkinesisanalyticsv2.html list_amazonkinesisfirehose.html list_amazonkinesisvideostreams.html list_amazonlex.html list_amazonlexv2.html list_amazonlightsail.html list_amazonlocation.html list_amazonlookoutforequipment.html list_amazonlookoutformetrics.html list_amazonlookoutforvision.html list_amazonmachinelearning.html list_amazonmacie.html list_amazonmacieclassic.html list_amazonmanagedblockchain.html list_amazonmanagedgrafana.html list_amazonmanagedserviceforprometheus.html list_amazonmanagedstreamingforapachekafka.html list_amazonmanagedstreamingforkafkaconnect.html list_amazonmanagedworkflowsforapacheairflow.html list_amazonmechanicalturk.html list_amazonmediaimport.html list_amazonmemorydb.html list_amazonmessagedeliveryservice.html list_amazonmobileanalytics.html list_amazonmonitron.html list_amazonmq.html list_amazonneptune.html list_amazonnimblestudio.html list_amazonopensearchservicesuccessortoamazonelasticsearchservice.html list_amazonpersonalize.html list_amazonpinpoint.html list_amazonpinpointemailservice.html list_amazonpinpointsmsandvoiceservice.html list_amazonpinpointsmsvoicev2.html list_amazonpolly.html list_amazonqldb.html list_amazonquicksight.html list_amazonrds.html list_amazonrdsdataapi.html list_amazonrdsiamauthentication.html list_amazonredshift.html list_amazonredshiftdataapi.html list_amazonrekognition.html list_amazonresourcegrouptaggingapi.html list_amazonrhelknowledgebaseportal.html list_amazonroute53.html list_amazonroute53domains.html list_amazonroute53recoverycluster.html list_amazonroute53recoverycontrols.html list_amazonroute53recoveryreadiness.html list_amazonroute53resolver.html list_amazons3.html list_amazons3glacier.html list_amazons3objectlambda.html list_amazons3onoutposts.html list_amazonsagemaker.html list_amazonsagemakergroundtruthsynthetic.html list_amazonses.html list_amazonsessionmanagermessagegatewayservice.html list_amazonsimpledb.html list_amazonsimpleemailservicev2.html list_amazonsimpleworkflowservice.html list_amazonsns.html list_amazonsqs.html list_amazonstoragegateway.html list_amazonsumerian.html list_amazontextract.html list_amazontimestream.html list_amazontranscribe.html list_amazontranslate.html list_amazonworkdocs.html list_amazonworklink.html list_amazonworkmail.html list_amazonworkmailmessageflow.html list_amazonworkspaces.html list_amazonworkspacesapplicationmanager.html list_amazonworkspacesweb.html list_apachekafkaapisforamazonmskclusters.html list_applicationdiscovery.html list_applicationdiscoveryarsenal.html list_awsaccountmanagement.html list_awsactivate.html list_awsamplify.html list_awsamplifyadmin.html list_awsamplifyuibuilder.html list_awsappconfig.html list_awsapplicationautoscaling.html list_awsapplicationcostprofilerservice.html list_awsapplicationdiscoveryservice.html list_awsapplicationmigrationservice.html list_awsappmesh.html list_awsappmeshpreview.html list_awsapprunner.html list_awsappsync.html list_awsartifact.html list_awsauditmanager.html list_awsautoscaling.html list_awsbackup.html list_awsbackupgateway.html list_awsbackupstorage.html list_awsbatch.html list_awsbilling.html list_awsbillingconductor.html list_awsbudgetservice.html list_awsbugbust.html list_awscertificatemanager.html list_awscertificatemanagerprivatecertificateauthority.html list_awschatbot.html list_awscloud9.html list_awscloudcontrolapi.html list_awscloudformation.html list_awscloudhsm.html list_awscloudmap.html list_awscloudshell.html list_awscloudtrail.html list_awscloudwatchrum.html list_awscodeartifact.html list_awscodebuild.html list_awscodecommit.html list_awscodedeploy.html list_awscodedeploysecurehostcommandsservice.html list_awscodepipeline.html list_awscodestar.html list_awscodestarconnections.html list_awscodestarnotifications.html list_awscomputeoptimizer.html list_awsconfig.html list_awsconnectorservice.html list_awscontroltower.html list_awscostandusagereport.html list_awscostexplorerservice.html list_awsdatabasemigrationservice.html list_awsdataexchange.html list_awsdatapipeline.html list_awsdatasync.html list_awsdeepcomposer.html list_awsdeeplens.html list_awsdeepracer.html list_awsdevicefarm.html list_awsdirectconnect.html list_awsdirectoryservice.html list_awselasticbeanstalk.html list_awselasticdisasterrecovery.html list_awselementalappliancesandsoftware.html list_awselementalappliancesandsoftwareactivationservice.html list_awselementalmediaconnect.html list_awselementalmediaconvert.html list_awselementalmedialive.html list_awselementalmediapackage.html list_awselementalmediapackagevod.html list_awselementalmediastore.html list_awselementalmediatailor.html list_awsfaultinjectionsimulator.html list_awsfirewallmanager.html list_awsglobalaccelerator.html list_awsglue.html list_awsgluedatabrew.html list_awsgroundstation.html list_awshealthapisandnotifications.html list_awsiamaccessanalyzer.html list_awsidentitystore.html list_awsidentitysynchronizationservice.html list_awsimportexportdiskservice.html list_awsiot.html list_awsiot1-click.html list_awsiotanalytics.html list_awsiotcoredeviceadvisor.html list_awsiotcoreforlorawan.html list_awsiotdevicetester.html list_awsiotevents.html list_awsiotfleethubfordevicemanagement.html list_awsiotfleetwise.html list_awsiotgreengrass.html list_awsiotgreengrassv2.html list_awsiotjobsdataplane.html list_awsiotroborunner.html list_awsiotsitewise.html list_awsiotthingsgraph.html list_awsiottwinmaker.html list_awsiq.html list_awsiqpermissions.html list_awskeymanagementservice.html list_awslakeformation.html list_awslambda.html list_awslicensemanager.html list_awsmainframemodernizationservice.html list_awsmarketplace.html list_awsmarketplacecatalog.html list_awsmarketplacecommerceanalyticsservice.html list_awsmarketplaceentitlementservice.html list_awsmarketplaceimagebuildingservice.html list_awsmarketplacemanagementportal.html list_awsmarketplacemeteringservice.html list_awsmarketplaceprivatemarketplace.html list_awsmarketplaceprocurementsystemsintegration.html list_awsmicroserviceextractorfor.net.html list_awsmigrationhub.html list_awsmigrationhuborchestrator.html list_awsmigrationhubrefactorspaces.html list_awsmigrationhubstrategyrecommendations..html list_awsmigrationhubstrategyrecommendations.html list_awsmobilehub.html list_awsnetworkfirewall.html list_awsopsworks.html list_awsopsworksconfigurationmanagement.html list_awsorganizations.html list_awsoutposts.html list_awspanorama.html list_awsperformanceinsights.html list_awspricelist.html list_awsproton.html list_awspurchaseordersconsole.html list_awsrecyclebin.html list_awsresiliencehubservice.html list_awsresourceaccessmanager.html list_awsresourcegroups.html list_awsrobomaker.html list_awssavingsplans.html list_awssecretsmanager.html list_awssecurityhub.html list_awssecuritytokenservice.html list_awsserverlessapplicationrepository.html list_awsservermigrationservice.html list_awsservicecatalog.html list_awsshield.html list_awssigner.html list_awssnowball.html list_awssnowdevicemanagement.html list_awssqlworkbench.html list_awssso.html list_awsssodirectory.html list_awsstepfunctions.html list_awssupport.html list_awssustainability.html list_awssystemsmanager.html list_awssystemsmanagerguiconnect.html list_awssystemsmanagerincidentmanager.html list_awssystemsmanagerincidentmanagercontacts.html list_awstageditor.html list_awstaxsettings.html list_awstiros.html list_awstransferfamily.html list_awstrustedadvisor.html list_awswaf.html list_awswafregional.html list_awswafv2.html list_awswell-architectedtool.html list_awsx-ray.html list_cloudwatchapplicationinsights.html list_databasequerymetadataservice.html list_datapipeline.html list_elasticloadbalancing.html list_elasticloadbalancingv2.html list_elementalsupportcases.html list_elementalsupportcontent.html list_high-volumeoutboundcommunications.html list_identityandaccessmanagement.html list_launchwizard.html list_networkmanager.html list_recyclebin.html list_servicequotas.html iam-definition.json overrides-resource-policies.yml iam_data.py __init__.py access_levels.py actions.py arns.py conditions.py file.py policy_files.py text.py __init__.py minimize.py sid_group.py template.py validate.py __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe README.md setup.cfg setup.py",
        "setup.py": "\"\"\"Setup script for Policy Sentry\"\"\"\nimport setuptools\nimport os\nimport re\n\nHERE = os.path.abspath(os.path.dirname(__file__))\nVERSION_RE = re.compile(r'''__version__ = ['\"]([0-9.]+)['\"]''')\nTESTS_REQUIRE = [\n'coverage',\n'nose',\n'pytest'\n]\nREQUIRED_PACKAGES = [\n'beautifulsoup4',\n'click',\n'requests',\n'schema',\n'PyYAML',\n]\nPROJECT_URLS = {\n\"Documentation\": \"https:\/\/policy-sentry.readthedocs.io\/\",\n\"Code\": \"https:\/\/github.com\/salesforce\/policy_sentry\/\",\n\"Twitter\": \"https:\/\/twitter.com\/kmcquade3\",\n\"Red Team Report\": \"https:\/\/opensource.salesforce.com\/policy_sentry\"\n}\n\n\ndef get_version():\ninit = open(\nos.path.join(\nHERE,\n\"policy_sentry\",\n\"bin\",\n\"version.py\"\n)\n).read()\nreturn VERSION_RE.search(init).group(1)\n\n\ndef get_description():\nreturn open(\nos.path.join(os.path.abspath(HERE), \"README.md\"), encoding=\"utf-8\"\n).read()\n\n\nsetuptools.setup(\nname=\"policy_sentry\",\ninclude_package_data=True,\nversion=get_version(),\nauthor=\"Kinnaird McQuade\",\nauthor_email=\"kinnairdm@gmail.com\",\ndescription=\"Generate locked-down AWS IAM Policies\",\nlong_description=get_description(),\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/salesforce\/policy_sentry\",\npackages=setuptools.find_packages(exclude=['test*']),\ntests_require=TESTS_REQUIRE,\ninstall_requires=REQUIRED_PACKAGES,\nproject_urls=PROJECT_URLS,\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n],\nentry_points={\"console_scripts\": \"policy_sentry=policy_sentry.bin.cli:main\"},\nzip_safe=True,\nkeywords='aws iam roles policy policies privileges security',\npython_requires='>=3.6',\n)\n"
    },
    {
        "package_name": "polling-0.3.2",
        "file_list": "LICENSE.md MANIFEST.in PKG-INFO dependency_links.txt PKG-INFO SOURCES.txt top_level.txt polling.py README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom setuptools import setup\nfrom polling import __version__\n\n\nsetup(\nname='polling',\ndescription='Powerful polling utility with many configurable options',\nversion=__version__,\nauthor='Polling',\nauthor_email='',\nurl='http:\/\/github.com\/justiniso\/polling',\nlicense='MIT',\ndownload_url='',\npy_modules=['polling'],\ntests_require=[\n'mock==3.0.5',\n'pytest==5.1.1'\n],\ntest_suite='tests'\n)"
    },
    {
        "package_name": "polyfuzz-0.4.0",
        "file_list": "LICENSE PKG-INFO _load_data.py __init__.py error.py linkage.py metrics.py _base.py _distance.py _embeddings.py _gensim.py _rapidfuzz.py _sbert.py _spacy.py _tfidf.py _use.py _utils.py __init__.py polyfuzz.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py test_linkage.py test_metrics.py test_polyfuzz.py utils.py __init__.py",
        "setup.py": "from setuptools import setup, find_packages\n\n\ntest_packages = [\n\"pytest>=5.4.3\",\n\"pytest-cov>=2.6.1\"\n]\n\ndocs_packages = [\n\"mkdocs==1.1\",\n\"mkdocs-material==4.6.3\",\n\"mkdocstrings==0.8.0\",\n]\n\nbase_packages = [\n\"numpy>=1.20.0\",\n\"scipy>= 1.3.1\",\n\"pandas>= 0.25.3\",\n\"tqdm>=4.41.1\",\n\"joblib>= 0.14.0\",\n\"matplotlib>= 3.2.2\",\n\"seaborn>= 0.11.0\",\n\"rapidfuzz>= 0.13.1\",\n\"scikit_learn>= 0.22.2.post1\"\n]\n\ngensim_packages = [\n\"gensim>=4.0.0\"\n]\n\nsbert_packages = [\n\"sentence-transformers>=0.4.1\"\n]\n\nfast_cosine = [\n\"sparse_dot_topn>=0.2.9\"\n]\n\nembeddings_packages = [\n\"torch>=1.4.0,<1.7.1\", \n\"flair>= 0.7\"\n]\n\nspacy_packages = [\n\"spacy>=3.0.1\"\n]\n\nuse_packages = [\n\"tensorflow\",\n\"tensorflow_hub\",\n\"tensorflow_text\"\n]\n\n\nextra_packages = embeddings_packages + fast_cosine + sbert_packages + spacy_packages + use_packages\n\ndev_packages = docs_packages + test_packages + extra_packages\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nsetup(\nname=\"polyfuzz\",\npackages=find_packages(exclude=[\"notebooks\", \"docs\"]),\nversion=\"0.4.0\",\nauthor=\"Maarten Grootendorst\",\nauthor_email=\"maartengrootendorst@gmail.com\",\ndescription=\"PolyFuzz performs fuzzy string matching, grouping, and evaluation.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nproject_urls={\n\"Documentation\": \"https:\/\/maartengr.github.io\/polyfuzz\/\",\n\"Source Code\": \"https:\/\/github.com\/MaartenGr\/PolyFuzz\/\",\n\"Issue Tracker\": \"https:\/\/github.com\/MaartenGr\/PolyFuzz\/issues\",\n},\nurl=\"https:\/\/github.com\/MaartenGr\/PolyFuzz\",\nkeywords=\"nlp string matching embeddings levenshtein tfidf bert\",\nclassifiers=[\n\"Programming Language :: Python\",\n\"Intended Audience :: Science\/Research\",\n\"Intended Audience :: Developers\",\n\"Topic :: Scientific\/Engineering :: Artificial Intelligence\",\n\"License :: OSI Approved :: MIT License\",\n\"Topic :: Scientific\/Engineering\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: POSIX\",\n\"Operating System :: Unix\",\n\"Operating System :: MacOS\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.8\",\n],\ninstall_requires=base_packages,\nextras_require={\n\"test\": test_packages,\n\"docs\": docs_packages,\n\"dev\": dev_packages,\n\"flair\": embeddings_packages,\n\"fast\": fast_cosine,\n\"sbert\": sbert_packages,\n\"use\": use_packages,\n\"gensim\": gensim_packages,\n},\npython_requires='>=3.6',\n)\n"
    },
    {
        "package_name": "prefect-2.0.4",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.md requirements-dev.txt requirements.txt setup.cfg setup.py .prefectignore agent.py core.py kubernetes.py notifications.py system.py __init__.py agent.py block.py cloud.py concurrency_limit.py config.py deployment.py dev.py flow.py flow_run.py kubernetes.py orion.py profile.py root.py kubernetes-dev.yaml kubernetes.yaml work_queue.py _types.py _utilities.py __init__.py client.py context.py deployments.py docker.py engine.py exceptions.py filesystems.py flows.py futures.py base.py docker.py kubernetes.py process.py submission.py __init__.py configuration.py formatters.py handlers.py loggers.py logging.yml __init__.py manifests.py admin.py block_capabilities.py block_documents.py block_schemas.py block_types.py concurrency_limits.py dependencies.py deployments.py flows.py flow_runs.py flow_run_notification_policies.py flow_run_states.py logs.py root.py run_history.py saved_searches.py server.py prefect-logo-mark-gradient.png task_runs.py task_run_states.py flow_runs.py __init__.py work_queues.py __init__.py alembic.ini alembic_commands.py configurations.py dependencies.py interface.py env.py MIGRATION-NOTES.md script.py.mako 2021_01_20_122127_25f4b90a7a 2022_02_13_125213_5f376def75 2022_02_13_125213_679e695af6 2022_02_17_140821_5bff7878e7 2022_02_19_205543_d9d98a9ebb 2022_02_20_103844_4799f657a6 2022_02_21_111050_d115556a8a 2022_02_21_150017_b68b3cad6b 2022_03_10_102713_2e7e1428ff 2022_04_20_113011_605ebb4e91 2022_04_21_095519_14dc68cc58 2022_04_23_132803_d38c5e6a91 2022_05_10_145956_1c9390e2f9 2022_05_12_202952_dc7a3c6fd3 2022_05_26_135743_724e6dcc6b 2022_05_28_081821_2fe6fe6ca1 2022_05_30_112549_cdcb4018dd 2022_06_04_133535_d60c18774a 2022_06_08_121753_3a7c41d3b4 2022_06_13_104234_61c76ee09e 2022_06_17_204409_d335ad57d5 2022_06_20_123921_7296741dff 2022_06_21_093732_29ad9bef61 2022_06_29_135432_813ddf14e2 2022_06_29_152219_2f46fc3f3b 2022_07_06_152528_4cdc2ba709 2022_07_07_112809_e905fd1992 2022_07_11_170700_112c68143f 2022_07_14_114039_0f27d462bf 2022_07_19_160058_bb4dc90d3e 2022_07_21_133134_e085c9cbf8 2022_07_21_205820_0cf7311d6e 2022_07_25_214717_4ff2f2bf81 2022_07_25_233637_add97ce193 2022_07_29_181713_fa985d4749 2022_08_01_211251_97e212ea65 2022_08_06_145817_60e428f92a 2022_08_07_154550_7737221bf8 2022_01_20_115236_9725c1cbee35_i 2022_02_04_093838_619bea85701a_b 2022_02_15_211737_28ae48128c75_a 2022_02_17_151416_7c91cb86dc4e_a 2022_02_19_210255_4c4a6a138053_r 2022_02_20_103610_e1ff4973a9eb_a 2022_02_21_111238_f327e877e423_i 2022_02_21_145916_c8ff35f94028_a 2022_03_10_102500_71a57ec351d1_i 2022_04_19_181604_7f5f335cace3_a 2022_04_21_113057_db6bde582447_b 2022_04_23_114831_fd966d4ad99c_r 2022_04_25_135207_b75d279ba985_r 2022_05_12_203158_888a0bb0df7b_a 2022_05_19_165808_33439667aeea_a 2022_05_28_081650_e73c6f1fe752_a 2022_05_30_100855_d76326ed0d06_r 2022_06_04_104048_f65b6ad0b869_a 2022_06_08_121702_84892301571a_a 2022_06_13_103943_2d900af9cd07_a 2022_06_17_204530_9e2a1c08c6f1_a 2022_06_20_123823_dff8da7a6c2c_a 2022_06_21_093640_a205b458d997_a 2022_06_29_133432_3bd87ecdac38_a 2022_06_29_151832_42762c37b7bc_r 2022_07_06_142824_e2dae764a603_m 2022_07_07_111208_061c7e518b40_r 2022_07_11_113314_638cbcc2a158_a 2022_07_14_113138_56be24fdb383_r 2022_07_19_153432_628a873f0d1a_r 2022_07_20_113451_2fe8ef6a6514_r 2022_07_25_142515_f335f9633eec_a 2022_07_25_151028_88c2112b668f_u 2022_07_29_181111_905134444e17_a 2022_08_01_211039_24bb2e4a195c_a 2022_08_06_130009_296e2665785f_e 2022_08_07_154319_53c19b31aa09_f orm_models.py query_components.py __init__.py exceptions.py agents.py block_documents.py block_schemas.py block_types.py concurrency_limits.py configuration.py deployments.py flows.py flow_runs.py flow_run_notification_policies.py flow_run_states.py logs.py saved_searches.py task_runs.py task_run_states.py work_queues.py __init__.py core_policy.py dependencies.py global_policy.py policies.py rules.py __init__.py actions.py core.py data.py filters.py responses.py schedules.py sorting.py states.py __init__.py serializers.py flow_run_notifications.py late_runs.py loop_service.py scheduler.py telemetry.py __init__.py 404.7afb54ce.js BlockEdit.3241b140.js Blocks.5883bf01.js BlocksCatalog.bbe380aa.js BlocksCatalogCreate.d8dd5bd1.js BlocksCatalogView.73ddd4fe.js BlockView.7dfd42b0.js Deployment.cba8e156.js DeploymentEdit.85f50ff9.js Deployments.3a1b7159.js Flow.4b1230be.js FlowRun.2c6d3e7c.js FlowRun.6d9cdc4b.css FlowRunCreate.827ab433.js FlowRunRadar.490b6745.js FlowRunRadar.8ac7702c.css Flows.814b566d.js index.731de270.css index.b58d3601.js NotificationCreate.7645fba1.js NotificationEdit.4c117aa6.js Notifications.f38cbf20.js Settings.679b2d7f.js Settings.b37dae5e.css useRouteParam.3d5be483.js useSubscriptionWithDependencies.92462f49.js WorkQueue.38a8a450.js WorkQueue.dd554a5d.css WorkQueueCreate.007fc24d.js WorkQueueEdit.5e66a347.js WorkQueues.ea867114.js android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png browserconfig.xml favicon-16x16.png favicon-32x32.png favicon.ico mstile-150x150.png safari-pinned-tab.svg site.webmanifest index.html robots.txt database.py encryption.py names.py schemas.py server.py __init__.py __init__.py base.py docker.py file.py orion.py serializers.py __init__.py plugins.py profiles.toml py.typed results.py serializers.py settings.py base.py conda.py pip.py python.py __init__.py states.py tasks.py task_runners.py cli.py docker.py fixtures.py standard_test_suites.py utilities.py __init__.py annotations.py asyncutils.py callables.py collections.py compat.py dispatch.py filesystem.py hashing.py importtools.py processutils.py pydantic.py render_swagger.py services.py __init__.py _version.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt versioneer.py",
        "setup.py": "from setuptools import find_packages, setup\n\nimport versioneer\n\ninstall_requires = open(\"requirements.txt\").read().strip().split(\"\\n\")\ndev_requires = open(\"requirements-dev.txt\").read().strip().split(\"\\n\")\n\nsetup(\n# Package metadata\nname=\"prefect\",\ndescription=\"Workflow orchestration and management.\",\nauthor=\"Prefect Technologies, Inc.\",\nauthor_email=\"help@prefect.io\",\nurl=\"https:\/\/github.com\/PrefectHQ\/prefect\/tree\/orion\",\nlong_description=open(\"README.md\").read(),\nlong_description_content_type=\"text\/markdown\",\n# Versioning\nversion=versioneer.get_version(),\ncmdclass=versioneer.get_cmdclass(),\n# Package setup\npackages=find_packages(where=\"src\"),\npackage_dir={\"\": \"src\"},\ninclude_package_data=True,\n# CLI\nentry_points={\n\"console_scripts\": [\"prefect=prefect.cli:app\"],\n\"mkdocs.plugins\": [\n\"render_swagger = prefect.utilities.render_swagger:SwaggerPlugin\",\n],\n},\n# Requirements\npython_requires=\">=3.7\",\ninstall_requires=install_requires,\nextras_require={\"dev\": dev_requires},\nclassifiers=[\n\"Natural Language :: English\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: System Administrators\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Software Development :: Libraries\",\n],\n)\n"
    },
    {
        "package_name": "premailer-3.10.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO cache.py merge_style.py premailer.py __init__.py __main__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "import os.path\nimport re\n\nfrom setuptools import setup, find_packages\n\n\nREADME = os.path.join(os.path.dirname(__file__), \"README.rst\")\nlong_description = open(README).read().strip() + \"\\n\\n\"\n\n\ndef find_version(*file_paths):\nversion_file_path = os.path.join(os.path.dirname(__file__), *file_paths)\nwith open(version_file_path) as f:\nversion_file = f.read()\nversion_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", version_file, re.M)\nif version_match:\nreturn version_match.group(1)\nraise RuntimeError(\"Unable to find version string.\")\n\n\ninstall_requires = [\"lxml\", \"cssselect\", \"cssutils\", \"requests\", \"cachetools\"]\n\ntests_require = [\"nose\", \"mock\"]\n\nsetup(\nname=\"premailer\",\nversion=find_version(\"premailer\", \"__init__.py\"),\ndescription=\"Turns CSS blocks into style attributes\",\nlong_description=long_description,\nkeywords=\"html lxml email mail style\",\nauthor=\"Peter Bengtsson\",\nauthor_email=\"mail@peterbe.com\",\nurl=\"http:\/\/github.com\/peterbe\/premailer\",\nlicense=\"Python\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Other Environment\",\n\"Environment :: Web Environment\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Python Software Foundation License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Topic :: Communications\",\n\"Topic :: Internet :: WWW\/HTTP\",\n\"Topic :: Other\/Nonlisted Topic\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\npackages=find_packages(),\ninclude_package_data=True,\ntest_suite=\"nose.collector\",\ntests_require=tests_require,\nextras_require={\n\"dev\": [\"tox\", \"twine\", \"therapist\", \"black\", \"flake8\", \"wheel\"],\n\"test\": tests_require,\n},\nzip_safe=False,\ninstall_requires=install_requires,\n)\n"
    },
    {
        "package_name": "prince-0.7.1",
        "file_list": "LICENSE MANIFEST.in PKG-INFO ca.py famd.py mca.py mfa.py pca.py plot.py svd.py util.py __init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n# $ pip install twine\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\n\nfrom setuptools import find_packages, setup, Command\n\n# Package meta-data.\nNAME = 'prince'\nDESCRIPTION = 'Statistical factor analysis in Python'\nLONG_DESCRIPTION_CONTENT_TYPE = 'text\/markdown'\nURL = 'https:\/\/github.com\/MaxHalford\/prince'\nEMAIL = 'maxhalford25@gmail.com'\nAUTHOR = 'Max Halford'\nREQUIRES_PYTHON = '>=3.4.0'\nVERSION = None\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.rst' is present in your MANIFEST.in file!\nwith io.open(os.path.join(here, 'README.md'), encoding='utf-8') as f:\nlong_description = '\\n' + f.read()\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nif not VERSION:\nwith open(os.path.join(here, NAME, '__version__.py')) as f:\nexec(f.read(), about)\nelse:\nabout['__version__'] = VERSION\n\n\nclass UploadCommand(Command):\n\"\"\"Support setup.py upload.\"\"\"\n\ndescription = 'Build and publish the package.'\nuser_options = []\n\n@staticmethod\ndef status(s):\n\"\"\"Prints things in bold.\"\"\"\nprint('\\033[1m{0}\\033[0m'.format(s))\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\ntry:\nself.status('Removing previous builds\u2026')\nrmtree(os.path.join(here, 'dist'))\nexcept OSError:\npass\n\nself.status('Building Source and Wheel (universal) distribution\u2026')\nos.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\nself.status('Uploading the package to PyPi via Twine\u2026')\nos.system('twine upload dist\/*')\n\n# self.status('Pushing git tags\u2026')\n# os.system('git tag v{0}'.format(about['__version__']))\n# os.system('git push --tags')\n\nsys.exit()\n\n\n# Where the magic happens:\nsetup(\nname=NAME,\nversion=about['__version__'],\ndescription=DESCRIPTION,\nlong_description=long_description,\nlong_description_content_type=LONG_DESCRIPTION_CONTENT_TYPE,\nauthor=AUTHOR,\nauthor_email=EMAIL,\npython_requires=REQUIRES_PYTHON,\nurl=URL,\npackages=find_packages(exclude=('tests',)),\n# If your package is a single module, use this instead of 'packages':\n# py_modules=['mypackage'],\n\n# entry_points={\n# 'console_scripts': ['mycli=mymodule:cli'],\n# },\ninstall_requires=[\n'matplotlib>=3.0.2',\n'numpy>=1.17.1',\n'pandas>=1.0.3',\n'scipy>=1.3.0',\n'scikit-learn>=0.22.1'\n],\nextras_require={\n'dev': [\n'nose>=1.3.7',\n'pytest>=3.5.1',\n'pytest-cov>=2.6.0',\n'fbpca>=1.0'\n]\n},\ninclude_package_data=True,\nlicense='MIT',\nclassifiers=[\n# Trove classifiers\n# Full list: https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy'\n],\n# $ setup.py publish support.\ncmdclass={\n'upload': UploadCommand,\n},\n)\n"
    },
    {
        "package_name": "priority-2.0.0",
        "file_list": "CHANGELOG.rst CONTRIBUTORS.rst make.bat Makefile api.rst authors.rst conf.py index.rst installation.rst license.rst CVE-2016-6580.rst index.rst using-priority.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py priority.py py.typed __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt test_priority.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python3\n\nimport os\nimport re\n\nfrom setuptools import setup, find_packages\n\nPROJECT_ROOT = os.path.dirname(__file__)\n\nwith open(os.path.join(PROJECT_ROOT, 'README.rst')) as file_:\nlong_description = file_.read()\n\nversion_regex = r'__version__ = [\"\\']([^\"\\']*)[\"\\']'\nwith open(os.path.join(PROJECT_ROOT, 'src\/priority\/__init__.py')) as file_:\ntext = file_.read()\nmatch = re.search(version_regex, text)\nif match:\nversion = match.group(1)\nelse:\nraise RuntimeError(\"No version number found!\")\n\nsetup(\nname='priority',\nversion=version,\ndescription='A pure-Python implementation of the HTTP\/2 priority tree',\nlong_description=long_description,\nlong_description_content_type='text\/x-rst',\nauthor='Cory Benfield',\nauthor_email='cory@lukasa.co.uk',\nurl='https:\/\/github.com\/python-hyper\/priority\/',\nproject_urls={\n'Documentation': 'https:\/\/python-hyper.org\/projects\/priority\/',\n'Source': 'https:\/\/github.com\/python-hyper\/priority\/',\n'Tracker': 'https:\/\/github.com\/python-hyper\/priority\/issues',\n'Changelog': 'https:\/\/github.com\/python-hyper\/priority\/blob\/master\/HISTORY.rst',\n},\npackages=find_packages(where='src'),\npackage_data={'priority': ['py.typed']},\npackage_dir={'': 'src'},\npython_requires='>=3.6.1',\nlicense='MIT License',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n],\n)\n"
    },
    {
        "package_name": "probableparsing-0.0.1",
        "file_list": "PKG-INFO __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt setup.cfg setup.py",
        "setup.py": "try:\nfrom setuptools import setup\nexcept ImportError :\nraise ImportError(\"setuptools module required, please go to https:\/\/pypi.python.org\/pypi\/setuptools and follow the instructions for installing setuptools\")\n\n\nsetup(\nversion='0.0.1',\nurl='https:\/\/github.com\/datamade\/probableparsing',\ndescription='Common methods for propbable parsers',\nname='probableparsing',\npackages=['probableparsing'],\nlicense='The MIT License: http:\/\/www.opensource.org\/licenses\/mit-license.php',\nclassifiers=[\n'Development Status :: 3 - Alpha',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: POSIX',\n'Programming Language :: Python :: 2.7',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Scientific\/Engineering',\n'Topic :: Scientific\/Engineering :: Information Analysis'],\n)\n"
    },
    {
        "package_name": "prometheus_client-0.14.1",
        "file_list": "LICENSE MANIFEST.in NOTICE PKG-INFO asgi.py graphite.py __init__.py context_managers.py core.py decorator.py exposition.py gc_collector.py metrics.py metrics_core.py mmap_dict.py multiprocess.py exposition.py parser.py __init__.py parser.py platform_collector.py process_collector.py py.typed registry.py samples.py _exposition.py __init__.py utils.py values.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py test_exposition.py test_parser.py __init__.py 0 1 2 3 4 limits stat stat stat test_asgi.py test_core.py test_exposition.py test_gc_collector.py test_graphite_bridge.py test_multiprocess.py test_parser.py test_platform_collector.py test_process_collector.py test_twisted.py test_wsgi.py __init__.py",
        "setup.py": "from os import path\n\nfrom setuptools import setup\n\nwith open(path.join(path.abspath(path.dirname(__file__)), 'README.md')) as f:\nlong_description = f.read()\n\n\nsetup(\nname=\"prometheus_client\",\nversion=\"0.14.1\",\nauthor=\"Brian Brazil\",\nauthor_email=\"brian.brazil@robustperception.io\",\ndescription=\"Python client for the Prometheus monitoring system.\",\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nlicense=\"Apache Software License 2.0\",\nkeywords=\"prometheus monitoring instrumentation client\",\nurl=\"https:\/\/github.com\/prometheus\/client_python\",\npackages=[\n'prometheus_client',\n'prometheus_client.bridge',\n'prometheus_client.openmetrics',\n'prometheus_client.twisted',\n],\npackage_data={\n'prometheus_client': ['py.typed']\n},\nextras_require={\n'twisted': ['twisted'],\n},\ntest_suite=\"tests\",\npython_requires=\">=3.6\",\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Information Technology\",\n\"Intended Audience :: System Administrators\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Topic :: System :: Monitoring\",\n\"License :: OSI Approved :: Apache Software License\",\n],\n)\n"
    },
    {
        "package_name": "prometheus-fastapi-instrumentator-5.8.2",
        "file_list": "LICENSE PKG-INFO instrumentation.py metrics.py middleware.py __init__.py pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['prometheus_fastapi_instrumentator']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['fastapi>=0.38.1,<1.0.0', 'prometheus-client>=0.8.0,<1.0.0']\n\nsetup_kwargs = {\n'name': 'prometheus-fastapi-instrumentator',\n'version': '5.8.2',\n'description': 'Instrument your FastAPI with Prometheus metrics',\n'long_description': '> Disclaimer: I\\'m happy to see that people find use in this project. In 2020 I\\n> created it to handle instrumentation of a bunch of microservices I was working\\n> on. Since then I (mostly) moved on to other things.\\n>\\n> The project is **still maintained** and good at doing what it\\'s supposed to\\n> do. At the same time, please **don\\'t expect exciting new features** anytime\\n> soon. If you know of any good alternatives, feel free to point them out in\\n> [#140][project-status-issue] and I\\'ll gladly include them in this document.\\n\\n[project-status-issue]:\\n https:\/\/github.com\/trallnag\/prometheus-fastapi-instrumentator\/issues\/140\\n\\n# Prometheus FastAPI Instrumentator\\n\\n[![PyPI version](https:\/\/badge.fury.io\/py\/prometheus-fastapi-instrumentator.svg)](https:\/\/pypi.python.org\/pypi\/prometheus-fastapi-instrumentator\/)\\n[![PyPI](https:\/\/img.shields.io\/pypi\/pyversions\/prometheus-fastapi-instrumentator.svg)](https:\/\/pypi.python.org\/pypi\/prometheus-fastapi-instrumentator)\\n[![downloads](https:\/\/pepy.tech\/badge\/prometheus-fastapi-instrumentator\/month)](https:\/\/pepy.tech\/project\/prometheus-fastapi-instrumentator\/month)\\n[![primary](https:\/\/github.com\/trallnag\/prometheus-fastapi-instrumentator\/actions\/workflows\/primary.yaml\/badge.svg)](https:\/\/github.com\/trallnag\/prometheus-fastapi-instrumentator\/actions\/workflows\/primary.yaml)\\n[![codecov](https:\/\/codecov.io\/gh\/trallnag\/prometheus-fastapi-instrumentator\/branch\/master\/graph\/badge.svg)](https:\/\/codecov.io\/gh\/trallnag\/prometheus-fastapi-instrumentator)\\n\\nA configurable and modular Prometheus Instrumentator for your FastAPI. Install\\n`prometheus-fastapi-instrumentator` from\\n[PyPI](https:\/\/pypi.python.org\/pypi\/prometheus-fastapi-instrumentator\/). Here is\\nthe fast track to get started with a preconfigured instrumentator:\\n\\n```python\\nfrom prometheus_fastapi_instrumentator import Instrumentator\\n\\nInstrumentator().instrument(app).expose(app)\\n```\\n\\nWith this, your FastAPI is instrumented and metrics are ready to be scraped. The\\ndefaults give you:\\n\\n- Counter `http_requests_total` with `handler`, `status` and `method`. Total\\n number of requests.\\n- Summary `http_request_size_bytes` with `handler`. Added up total of the\\n content lengths of all incoming requests.\\n- Summary `http_response_size_bytes` with `handler`. Added up total of the\\n content lengths of all outgoing responses.\\n- Histogram `http_request_duration_seconds` with `handler`. Only a few buckets\\n to keep cardinality low.\\n- Histogram `http_request_duration_highr_seconds` without any labels. Large\\n number of buckets (>20).\\n\\nIn addition, following behaviour is active:\\n\\n- Status codes are grouped into `2xx`, `3xx` and so on.\\n- Requests without a matching template are grouped into the handler `none`.\\n\\nIf one of these presets does not suit your needs you can multiple things:\\n\\n- Pick one of the already existing closures from\\n [`metrics`](https:\/\/trallnag.github.io\/prometheus-fastapi-instrumentator\/metrics.html)\\n and pass it to the instrumentator instance. See [here](#adding-metrics) how to\\n do that.\\n- Create your own instrumentation function that you can pass to an\\n instrumentator instance. See [here](#creating-new-metrics) to learn how more.\\n- Don\\'t use this package at all and just use the sorce code as inspiration on\\n how to instrument your FastAPI.\\n\\nImportant: This package is not made for generic Prometheus instrumentation in\\nPython. Use the Prometheus client library for that. This packages uses it as\\nwell.\\n\\n## Table of Contents\\n\\n<!--TOC-->\\n\\n- [Prometheus FastAPI Instrumentator](#prometheus-fastapi-instrumentator)\\n - [Table of Contents](#table-of-contents)\\n - [Features](#features)\\n - [Advanced Usage](#advanced-usage)\\n - [Creating the Instrumentator](#creating-the-instrumentator)\\n - [Adding metrics](#adding-metrics)\\n - [Creating new metrics](#creating-new-metrics)\\n - [Perform instrumentation](#perform-instrumentation)\\n - [Exposing endpoint](#exposing-endpoint)\\n - [Prerequesites](#prerequesites)\\n - [Contributing](#contributing)\\n\\n<!--TOC-->\\n\\n## Features\\n\\nBeyond the fast track, this instrumentator is **highly configurable** and it is\\nvery easy to customize and adapt to your specific use case. Here is a list of\\nsome of these options you may opt-in to:\\n\\n- Regex patterns to ignore certain routes.\\n- Completely ignore untemplated routes.\\n- Control instrumentation and exposition with an env var.\\n- Rounding of latencies to a certain decimal number.\\n- Renaming of labels and the metric.\\n- Metrics endpoint can compress data with gzip.\\n- Opt-in metric to monitor the number of requests in progress.\\n\\nIt also features a **modular approach to metrics** that should instrument all\\nFastAPI endpoints. You can either choose from a set of already existing metrics\\nor create your own. And every metric function by itself can be configured as\\nwell. You can see ready to use metrics\\n[here](https:\/\/trallnag.github.io\/prometheus-fastapi-instrumentator\/metrics.html).\\n\\n## Advanced Usage\\n\\nThis chapter contains an example on the advanced usage of the Prometheus FastAPI\\nInstrumentator to showcase most of it\\'s features. Fore more concrete info check\\nout the\\n[automatically generated documentation](https:\/\/trallnag.github.io\/prometheus-fastapi-instrumentator\/).\\n\\n### Creating the Instrumentator\\n\\nWe start by creating an instance of the Instrumentator. Notice the additional\\n`metrics` import. This will come in handy later.\\n\\n```python\\nfrom prometheus_fastapi_instrumentator import Instrumentator, metrics\\n\\ninstrumentator = Instrumentator(\\n should_group_status_codes=False,\\n should_ignore_untemplated=True,\\n should_respect_env_var=True,\\n should_instrument_requests_inprogress=True,\\n excluded_handlers=[\".*admin.*\", \"\/metrics\"],\\n env_var_name=\"ENABLE_METRICS\",\\n inprogress_name=\"inprogress\",\\n inprogress_labels=True,\\n)\\n```\\n\\nUnlike in the fast track example, now the instrumentation and exposition will\\nonly take place if the environment variable `ENABLE_METRICS` is `true` at\\nrun-time. This can be helpful in larger deployments with multiple services\\ndepending on the same base FastAPI.\\n\\n### Adding metrics\\n\\nLet\\'s say we also want to instrument the size of requests and responses. For\\nthis we use the `add()` method. This method does nothing more than taking a\\nfunction and adding it to a list. Then during run-time every time FastAPI\\nhandles a request all functions in this list will be called while giving them a\\nsingle argument that stores useful information like the request and response\\nobjects. If no `add()` at all is used, the default metric gets added in the\\nbackground. This is what happens in the fast track example.\\n\\nAll instrumentation functions are stored as closures in the `metrics` module.\\nFore more concrete info check out the\\n[automatically generated documentation](https:\/\/trallnag.github.io\/prometheus-fastapi-instrumentator\/).\\n\\nClosures come in handy here because it allows us to configure the functions\\nwithin.\\n\\n```python\\ninstrumentator.add(metrics.latency(buckets=(1, 2, 3,)))\\n```\\n\\nThis simply adds the metric you also get in the fast track example with a\\nmodified buckets argument. But we would also like to record the size of all\\nrequests and responses.\\n\\n```python\\ninstrumentator.add(\\n metrics.request_size(\\n should_include_handler=True,\\n should_include_method=False,\\n should_include_status=True,\\n metric_namespace=\"a\",\\n metric_subsystem=\"b\",\\n )\\n).add(\\n metrics.response_size(\\n should_include_handler=True,\\n should_include_method=False,\\n should_include_status=True,\\n metric_namespace=\"namespace\",\\n metric_subsystem=\"subsystem\",\\n )\\n)\\n```\\n\\nYou can add as many metrics you like to the instrumentator.\\n\\n### Creating new metrics\\n\\nAs already mentioned, it is possible to create custom functions to pass on to\\n`add()`. This is also how the default metrics are implemented. The documentation\\nand code\\n[here](https:\/\/trallnag.github.io\/prometheus-fastapi-instrumentator\/metrics.html)\\nis helpful to get an overview.\\n\\nThe basic idea is that the instrumentator creates an `info` object that contains\\neverything necessary for instrumentation based on the configuration of the\\ninstrumentator. This includes the raw request and response objects but also the\\nmodified handler, grouped status code and duration. Next, all registered\\ninstrumentation functions are called. They get `info` as their single argument.\\n\\nLet\\'s say we want to count the number of times a certain language has been\\nrequested.\\n\\n```python\\nfrom typing import Callable\\nfrom prometheus_fastapi_instrumentator.metrics import Info\\nfrom prometheus_client import Counter\\n\\ndef http_requested_languages_total() -> Callable[[Info], None]:\\n METRIC = Counter(\\n \"http_requested_languages_total\",\\n \"Number of times a certain language has been requested.\",\\n labelnames=(\"langs\",)\\n )\\n\\n def instrumentation(info: Info) -> None:\\n langs = set()\\n lang_str = info.request.headers[\"Accept-Language\"]\\n for element in lang_str.split(\",\")\\n element = element.split(\";\")[0].strip().lower()\\n langs.add(element)\\n for language in langs:\\n METRIC.labels(language).inc()\\n\\n return instrumentation\\n```\\n\\nThe function `http_requested_languages_total` is used for persistent elements\\nthat are stored between all instrumentation executions (for example the metric\\ninstance itself). Next comes the closure. This function must adhere to the shown\\ninterface. It will always get an `Info` object that contains the request,\\nresponse and a few other modified informations. For example the (grouped) status\\ncode or the handler. Finally, the closure is returned.\\n\\n**Important:** The response object inside `info` can either be the response\\nobject or `None`. In addition, errors thrown in the handler are not caught by\\nthe instrumentator. I recommend to check the documentation and\/or the source\\ncode before creating your own metrics.\\n\\nTo use it, we hand over the closure to the instrumentator object.\\n\\n```python\\ninstrumentator.add(http_requested_languages_total())\\n```\\n\\n### Perform instrumentation\\n\\nUp to this point, the FastAPI has not been touched at all. Everything has been\\nstored in the `instrumentator` only. To actually register the instrumentation\\nwith FastAPI, the `instrument()` method has to be called.\\n\\n```python\\ninstrumentator.instrument(app)\\n```\\n\\nNotice that this will do nothing if `should_respect_env_var` has been set during\\nconstruction of the instrumentator object and the respective env var is not\\nfound.\\n\\n### Exposing endpoint\\n\\nTo expose an endpoint for the metrics either follow\\n[Prometheus Python Client](https:\/\/github.com\/prometheus\/client_python) and add\\nthe endpoint manually to the FastAPI or serve it on a separate server. You can\\nalso use the included `expose` method. It will add an endpoint to the given\\nFastAPI. With `should_gzip` you can instruct the endpoint to compress the data\\nas long as the client accepts gzip encoding. Prometheus for example does by\\ndefault. Beware that network bandwith is often cheaper than CPU cycles.\\n\\n```python\\ninstrumentator.expose(app, include_in_schema=False, should_gzip=True)\\n```\\n\\nNotice that this will to nothing if `should_respect_env_var` has been set during\\nconstruction of the instrumentator object and the respective env var is not\\nfound.\\n\\n## Prerequesites\\n\\nYou can always check [`pyproject.toml`](\/pyproject.toml) for dependencies.\\n\\n- `python = \"^3.7\"` (tested with 3.7 and 3.10)\\n- `fastapi = \">=0.38.1, <=1.0.0\"` (tested with 0.38.1 and 0.61.0)\\n\\n## Contributing\\n\\nPlease refer to [`CONTRIBUTING.md`](CONTRIBUTING).\\n',\n'author': 'Tim Schwenke',\n'author_email': 'tim.schwenke@trallnag.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/trallnag\/prometheus-fastapi-instrumentator',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'python_requires': '>=3.7.0,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "psutil-5.9.1",
        "file_list": ".coveragerc .flake8 .gitignore .isort.cfg CONTRIBUTING.md CREDITS conf.py DEVGUIDE.rst DEVNOTES index.rst make.bat Makefile README copybutton.js custom.css favicon.ico sidebar.js HISTORY.rst INSTALL.rst LICENSE make.bat Makefile MANIFEST.in PKG-INFO common.c common.h ifaddrs.c ifaddrs.h net_connections.c net_connections.h net_kernel_structs.h cpu.c cpu.h disk.c disk.h mem.c mem.h proc.c proc.h proc_socks.c proc_socks.h sensors.c sensors.h sys_socks.c sys_socks.h socks.c socks.h specific.c specific.h cpu.c cpu.h disk.c disk.h mem.c mem.h proc.c proc.h cpu.c cpu.h process_info.c process_info.h environ.c environ.h ifaddrs.c ifaddrs.h cpu.c cpu.h disk.c disk.h net.c net.h ntextapi.h process_handles.c process_handles.h process_info.c process_info.h process_utils.c process_utils.h security.c security.h services.c services.h socks.c socks.h wmi.c wmi.h foo.py README.rst runner.py test_aix.py test_bsd.py test_connections.py test_contracts.py test_linux.py test_memleaks.py test_misc.py test_osx.py test_posix.py test_process.py test_sunos.py test_system.py test_testutils.py test_unicode.py test_windows.py __init__.py __main__.py _common.py _compat.py _psaix.py _psbsd.py _pslinux.py _psosx.py _psposix.py _pssunos.py _psutil_aix.c _psutil_bsd.c _psutil_common.c _psutil_common.h _psutil_linux.c _psutil_osx.c _psutil_posix.c _psutil_posix.h _psutil_sunos.c _psutil_windows.c _pswindows.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt pyproject.toml README.rst battery.py cpu_distribution.py disk_usage.py fans.py free.py ifconfig.py bench_oneshot.py bench_oneshot_2.py check_broken_links.py clinter.py convert_readme.py download_wheels_appveyor.py download_wheels_github.py generate_manifest.py git_pre_commit.py print_access_denied.py print_announce.py print_api_speed.py print_downloads.py print_hashes.py print_timeline.py print_wheels.py purge_installation.py README tidelift.py winmake.py iotop.py killall.py meminfo.py netstat.py nettop.py pidof.py pmap.py procinfo.py procsmem.py ps.py pstree.py sensors.py temperatures.py top.py who.py winservices.py setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python3\n\n# Copyright (c) 2009 Giampaolo Rodola'. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n\"\"\"Cross-platform lib for process and system monitoring in Python.\"\"\"\n\nfrom __future__ import print_function\n\nimport contextlib\nimport io\nimport os\nimport platform\nimport re\nimport shutil\nimport struct\nimport subprocess\nimport sys\nimport tempfile\nimport warnings\n\n\nwith warnings.catch_warnings():\nwarnings.simplefilter(\"ignore\")\ntry:\nimport setuptools\nfrom setuptools import Extension\nfrom setuptools import setup\nexcept ImportError:\nsetuptools = None\nfrom distutils.core import Extension\nfrom distutils.core import setup\n\nHERE = os.path.abspath(os.path.dirname(__file__))\n\n# ...so we can import _common.py and _compat.py\nsys.path.insert(0, os.path.join(HERE, \"psutil\"))\n\nfrom _common import AIX # NOQA\nfrom _common import BSD # NOQA\nfrom _common import FREEBSD # NOQA\nfrom _common import LINUX # NOQA\nfrom _common import MACOS # NOQA\nfrom _common import NETBSD # NOQA\nfrom _common import OPENBSD # NOQA\nfrom _common import POSIX # NOQA\nfrom _common import SUNOS # NOQA\nfrom _common import WINDOWS # NOQA\nfrom _common import hilite # NOQA\nfrom _compat import PY3 # NOQA\nfrom _compat import which # NOQA\n\n\nPYPY = '__pypy__' in sys.builtin_module_names\nmacros = []\nif POSIX:\nmacros.append((\"PSUTIL_POSIX\", 1))\nif BSD:\nmacros.append((\"PSUTIL_BSD\", 1))\n\n# Needed to determine _Py_PARSE_PID in case it's missing (Python 2, PyPy).\n# Taken from Lib\/test\/test_fcntl.py.\n# XXX: not bullet proof as the (long long) case is missing.\nif struct.calcsize('l') <= 8:\nmacros.append(('PSUTIL_SIZEOF_PID_T', '4')) # int\nelse:\nmacros.append(('PSUTIL_SIZEOF_PID_T', '8')) # long\n\n\nsources = ['psutil\/_psutil_common.c']\nif POSIX:\nsources.append('psutil\/_psutil_posix.c')\n\n\nextras_require = {\"test\": [\n\"enum34; python_version <= '3.4'\",\n\"ipaddress; python_version < '3.0'\",\n\"mock; python_version < '3.0'\",\n]}\nif not PYPY:\nextras_require['test'].extend([\n\"pywin32; sys.platform == 'win32'\",\n\"wmi; sys.platform == 'win32'\"])\n\n\ndef get_version():\nINIT = os.path.join(HERE, 'psutil\/__init__.py')\nwith open(INIT, 'r') as f:\nfor line in f:\nif line.startswith('__version__'):\nret = eval(line.strip().split(' = ')[1])\nassert ret.count('.') == 2, ret\nfor num in ret.split('.'):\nassert num.isdigit(), ret\nreturn ret\nraise ValueError(\"couldn't find version string\")\n\n\nVERSION = get_version()\nmacros.append(('PSUTIL_VERSION', int(VERSION.replace('.', ''))))\n\n\ndef get_description():\nscript = os.path.join(HERE, \"scripts\", \"internal\", \"convert_readme.py\")\nreadme = os.path.join(HERE, 'README.rst')\np = subprocess.Popen([sys.executable, script, readme],\nstdout=subprocess.PIPE, stderr=subprocess.PIPE)\nstdout, stderr = p.communicate()\nif p.returncode != 0:\nraise RuntimeError(stderr)\ndata = stdout.decode('utf8')\nif WINDOWS:\ndata = data.replace('\\r\\n', '\\n')\nreturn data\n\n\n@contextlib.contextmanager\ndef silenced_output(stream_name):\nclass DummyFile(io.BytesIO):\n# see: https:\/\/github.com\/giampaolo\/psutil\/issues\/678\nerrors = \"ignore\"\n\ndef write(self, s):\npass\n\norig = getattr(sys, stream_name)\ntry:\nsetattr(sys, stream_name, DummyFile())\nyield\nfinally:\nsetattr(sys, stream_name, orig)\n\n\ndef missdeps(msg):\ns = hilite(\"C compiler or Python headers are not installed \", color=\"red\")\ns += hilite(\"on this system. Try to run:\\n\", color=\"red\")\ns += hilite(msg, color=\"red\", bold=True)\nprint(s, file=sys.stderr)\n\n\nif WINDOWS:\ndef get_winver():\nmaj, min = sys.getwindowsversion()[0:2]\nreturn '0x0%s' % ((maj * 100) + min)\n\nif sys.getwindowsversion()[0] < 6:\nmsg = \"this Windows version is too old (< Windows Vista); \"\nmsg += \"psutil 3.4.2 is the latest version which supports Windows \"\nmsg += \"2000, XP and 2003 server\"\nraise RuntimeError(msg)\n\nmacros.append((\"PSUTIL_WINDOWS\", 1))\nmacros.extend([\n# be nice to mingw, see:\n# http:\/\/www.mingw.org\/wiki\/Use_more_recent_defined_functions\n('_WIN32_WINNT', get_winver()),\n('_AVAIL_WINVER_', get_winver()),\n('_CRT_SECURE_NO_WARNINGS', None),\n# see: https:\/\/github.com\/giampaolo\/psutil\/issues\/348\n('PSAPI_VERSION', 1),\n])\n\next = Extension(\n'psutil._psutil_windows',\nsources=sources + [\n'psutil\/_psutil_windows.c',\n'psutil\/arch\/windows\/process_utils.c',\n'psutil\/arch\/windows\/process_info.c',\n'psutil\/arch\/windows\/process_handles.c',\n'psutil\/arch\/windows\/disk.c',\n'psutil\/arch\/windows\/net.c',\n'psutil\/arch\/windows\/cpu.c',\n'psutil\/arch\/windows\/security.c',\n'psutil\/arch\/windows\/services.c',\n'psutil\/arch\/windows\/socks.c',\n'psutil\/arch\/windows\/wmi.c',\n],\ndefine_macros=macros,\nlibraries=[\n\"psapi\", \"kernel32\", \"advapi32\", \"shell32\", \"netapi32\",\n\"ws2_32\", \"PowrProf\", \"pdh\",\n],\n# extra_compile_args=[\"\/W 4\"],\n# extra_link_args=[\"\/DEBUG\"]\n)\n\nelif MACOS:\nmacros.append((\"PSUTIL_OSX\", 1))\next = Extension(\n'psutil._psutil_osx',\nsources=sources + [\n'psutil\/_psutil_osx.c',\n'psutil\/arch\/osx\/process_info.c',\n'psutil\/arch\/osx\/cpu.c',\n],\ndefine_macros=macros,\nextra_link_args=[\n'-framework', 'CoreFoundation', '-framework', 'IOKit'\n])\n\nelif FREEBSD:\nmacros.append((\"PSUTIL_FREEBSD\", 1))\next = Extension(\n'psutil._psutil_bsd',\nsources=sources + [\n'psutil\/_psutil_bsd.c',\n'psutil\/arch\/freebsd\/cpu.c',\n'psutil\/arch\/freebsd\/mem.c',\n'psutil\/arch\/freebsd\/disk.c',\n'psutil\/arch\/freebsd\/sensors.c',\n'psutil\/arch\/freebsd\/proc.c',\n'psutil\/arch\/freebsd\/sys_socks.c',\n'psutil\/arch\/freebsd\/proc_socks.c',\n],\ndefine_macros=macros,\nlibraries=[\"devstat\"])\n\nelif OPENBSD:\nmacros.append((\"PSUTIL_OPENBSD\", 1))\next = Extension(\n'psutil._psutil_bsd',\nsources=sources + [\n'psutil\/_psutil_bsd.c',\n'psutil\/arch\/openbsd\/cpu.c',\n'psutil\/arch\/openbsd\/disk.c',\n'psutil\/arch\/openbsd\/mem.c',\n'psutil\/arch\/openbsd\/proc.c',\n],\ndefine_macros=macros,\nlibraries=[\"kvm\"])\n\nelif NETBSD:\nmacros.append((\"PSUTIL_NETBSD\", 1))\next = Extension(\n'psutil._psutil_bsd',\nsources=sources + [\n'psutil\/_psutil_bsd.c',\n'psutil\/arch\/netbsd\/specific.c',\n'psutil\/arch\/netbsd\/socks.c',\n],\ndefine_macros=macros,\nlibraries=[\"kvm\"])\n\nelif LINUX:\ndef get_ethtool_macro():\n# see: https:\/\/github.com\/giampaolo\/psutil\/issues\/659\nfrom distutils.errors import CompileError\nfrom distutils.unixccompiler import UnixCCompiler\n\nwith tempfile.NamedTemporaryFile(\nsuffix='.c', delete=False, mode=\"wt\") as f:\nf.write(\"#include <linux\/ethtool.h>\")\n\noutput_dir = tempfile.mkdtemp()\ntry:\ncompiler = UnixCCompiler()\n# https:\/\/github.com\/giampaolo\/psutil\/pull\/1568\nif os.getenv('CC'):\ncompiler.set_executable('compiler_so', os.getenv('CC'))\nwith silenced_output('stderr'):\nwith silenced_output('stdout'):\ncompiler.compile([f.name], output_dir=output_dir)\nexcept CompileError:\nreturn (\"PSUTIL_ETHTOOL_MISSING_TYPES\", 1)\nelse:\nreturn None\nfinally:\nos.remove(f.name)\nshutil.rmtree(output_dir)\n\nmacros.append((\"PSUTIL_LINUX\", 1))\nETHTOOL_MACRO = get_ethtool_macro()\nif ETHTOOL_MACRO is not None:\nmacros.append(ETHTOOL_MACRO)\next = Extension(\n'psutil._psutil_linux',\nsources=sources + ['psutil\/_psutil_linux.c'],\ndefine_macros=macros)\n\nelif SUNOS:\nmacros.append((\"PSUTIL_SUNOS\", 1))\next = Extension(\n'psutil._psutil_sunos',\nsources=sources + [\n'psutil\/_psutil_sunos.c',\n'psutil\/arch\/solaris\/v10\/ifaddrs.c',\n'psutil\/arch\/solaris\/environ.c'\n],\ndefine_macros=macros,\nlibraries=['kstat', 'nsl', 'socket'])\n\nelif AIX:\nmacros.append((\"PSUTIL_AIX\", 1))\next = Extension(\n'psutil._psutil_aix',\nsources=sources + [\n'psutil\/_psutil_aix.c',\n'psutil\/arch\/aix\/net_connections.c',\n'psutil\/arch\/aix\/common.c',\n'psutil\/arch\/aix\/ifaddrs.c'],\nlibraries=['perfstat'],\ndefine_macros=macros)\n\nelse:\nsys.exit('platform %s is not supported' % sys.platform)\n\n\nif POSIX:\nposix_extension = Extension(\n'psutil._psutil_posix',\ndefine_macros=macros,\nsources=sources)\nif SUNOS:\ndef get_sunos_update():\n# See https:\/\/serverfault.com\/q\/524883\n# for an explanation of Solaris \/etc\/release\nwith open('\/etc\/release') as f:\nupdate = re.search(r'(?<=s10s_u)[0-9]{1,2}', f.readline())\nif update is None:\nreturn 0\nelse:\nreturn int(update.group(0))\n\nposix_extension.libraries.append('socket')\nif platform.release() == '5.10':\n# Detect Solaris 5.10, update >= 4, see:\n# https:\/\/github.com\/giampaolo\/psutil\/pull\/1638\nif get_sunos_update() >= 4:\n# MIB compliancy starts with SunOS 5.10 Update 4:\nposix_extension.define_macros.append(('NEW_MIB_COMPLIANT', 1))\nposix_extension.sources.append('psutil\/arch\/solaris\/v10\/ifaddrs.c')\nposix_extension.define_macros.append(('PSUTIL_SUNOS10', 1))\nelse:\n# Other releases are by default considered to be new mib compliant.\nposix_extension.define_macros.append(('NEW_MIB_COMPLIANT', 1))\nelif AIX:\nposix_extension.sources.append('psutil\/arch\/aix\/ifaddrs.c')\n\nextensions = [ext, posix_extension]\nelse:\nextensions = [ext]\n\n\ndef main():\nkwargs = dict(\nname='psutil',\nversion=VERSION,\ndescription=__doc__ .replace('\\n', ' ').strip() if __doc__ else '',\nlong_description=get_description(),\nlong_description_content_type='text\/x-rst',\nkeywords=[\n'ps', 'top', 'kill', 'free', 'lsof', 'netstat', 'nice', 'tty',\n'ionice', 'uptime', 'taskmgr', 'process', 'df', 'iotop', 'iostat',\n'ifconfig', 'taskset', 'who', 'pidof', 'pmap', 'smem', 'pstree',\n'monitoring', 'ulimit', 'prlimit', 'smem', 'performance',\n'metrics', 'agent', 'observability',\n],\nauthor='Giampaolo Rodola',\nauthor_email='g.rodola@gmail.com',\nurl='https:\/\/github.com\/giampaolo\/psutil',\nplatforms='Platform Independent',\nlicense='BSD',\npackages=['psutil', 'psutil.tests'],\next_modules=extensions,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Environment :: Win32 (MS Windows)',\n'Intended Audience :: Developers',\n'Intended Audience :: Information Technology',\n'Intended Audience :: System Administrators',\n'License :: OSI Approved :: BSD License',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: Microsoft :: Windows :: Windows 10',\n'Operating System :: Microsoft :: Windows :: Windows 7',\n'Operating System :: Microsoft :: Windows :: Windows 8',\n'Operating System :: Microsoft :: Windows :: Windows 8.1',\n'Operating System :: Microsoft :: Windows :: Windows Server 2003',\n'Operating System :: Microsoft :: Windows :: Windows Server 2008',\n'Operating System :: Microsoft :: Windows :: Windows Vista',\n'Operating System :: Microsoft',\n'Operating System :: OS Independent',\n'Operating System :: POSIX :: AIX',\n'Operating System :: POSIX :: BSD :: FreeBSD',\n'Operating System :: POSIX :: BSD :: NetBSD',\n'Operating System :: POSIX :: BSD :: OpenBSD',\n'Operating System :: POSIX :: BSD',\n'Operating System :: POSIX :: Linux',\n'Operating System :: POSIX :: SunOS\/Solaris',\n'Operating System :: POSIX',\n'Programming Language :: C',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Programming Language :: Python',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Software Development :: Libraries',\n'Topic :: System :: Benchmark',\n'Topic :: System :: Hardware :: Hardware Drivers',\n'Topic :: System :: Hardware',\n'Topic :: System :: Monitoring',\n'Topic :: System :: Networking :: Monitoring :: Hardware Watchdog',\n'Topic :: System :: Networking :: Monitoring',\n'Topic :: System :: Networking',\n'Topic :: System :: Operating System',\n'Topic :: System :: Systems Administration',\n'Topic :: Utilities',\n],\n)\nif setuptools is not None:\nkwargs.update(\npython_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\",\nextras_require=extras_require,\nzip_safe=False,\n)\nsuccess = False\ntry:\nsetup(**kwargs)\nsuccess = True\nfinally:\nif not success and POSIX and not which('gcc'):\npy3 = \"3\" if PY3 else \"\"\nif LINUX:\nif which('dpkg'):\nmissdeps(\"sudo apt-get install gcc python%s-dev\" % py3)\nelif which('rpm'):\nmissdeps(\"sudo yum install gcc python%s-devel\" % py3)\nelif MACOS:\nprint(hilite(\"XCode (https:\/\/developer.apple.com\/xcode\/) \"\n\"is not installed\"), color=\"red\", file=sys.stderr)\nelif FREEBSD:\nif which('pkg'):\nmissdeps(\"pkg install gcc python%s\" % py3)\nelif which('mport'): # MidnightBSD\nmissdeps(\"mport install gcc python%s\" % py3)\nelif OPENBSD:\nmissdeps(\"pkg_add -v gcc python%s\" % py3)\nelif NETBSD:\nmissdeps(\"pkgin install gcc python%s\" % py3)\nelif SUNOS:\nmissdeps(\"sudo ln -s \/usr\/bin\/gcc \/usr\/local\/bin\/cc && \"\n\"pkg install gcc\")\n\n\nif __name__ == '__main__':\nmain()\n"
    },
    {
        "package_name": "psycopg2cffi-2.9.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO compat.py errorcodes.py extensions.py extras.py pool.py psycopg1.py test_errorcodes.py test_extensions.py test_notify.py __init__.py tz.py adapters.py connection.py consts.py cursor.py encodings.py exceptions.py libpq.py lobject.py notify.py typecasts.py util.py xid.py _build_libpq.py __init__.py _json.py _range.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "# setup.py\n\nimport os\nimport sys\n\nfrom setuptools import setup\n\n\n# read the version number from the package\nf = open(os.path.join(os.path.dirname(__file__), 'psycopg2cffi\/__init__.py'))\ntry:\nfor line in f:\nif line.startswith('__version__'):\nPSYCOPG_VERSION = line.split('=')[1].replace('\"', '').replace(\"'\", '').strip()\nbreak\nelse:\nraise ValueError('__version__ not found in psycopg2cffi package')\nfinally:\nf.close()\n\n\nREADME = []\nwith open('README.rst', 'r') as fh:\nREADME = fh.readlines()\n\n\nif '_cffi_backend' in sys.builtin_module_names: # pypy\nimport _cffi_backend\nnew_cffi = _cffi_backend.__version__ >= \"1\"\nelse:\nnew_cffi = True # assume at least 1.0.0 will be installed\n\n\nsetup_kwargs = dict(\nname='psycopg2cffi',\nauthor='Konstantin Lopuhin',\nauthor_email='konstantin.lopuhin@chtd.ru',\nlicense='LGPL',\nurl='http:\/\/github.com\/chtd\/psycopg2cffi',\nversion=PSYCOPG_VERSION,\nclassifiers=[\n'Development Status :: 3 - Alpha',\n'License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)',\n'Intended Audience :: Developers',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Programming Language :: SQL',\n'Topic :: Database',\n'Topic :: Database :: Front-Ends',\n],\nplatforms=['any'],\ndescription=README[0].strip(),\nlong_description=''.join(README),\ntest_suite='psycopg2cffi.tests.suite',\npackages=['psycopg2cffi', 'psycopg2cffi._impl', 'psycopg2cffi.tests'],\ninstall_requires=['six'],\n)\n\nif new_cffi:\nsetup_kwargs.update(dict(\nsetup_requires=[\n'cffi>=1.0',\n],\ncffi_modules=['psycopg2cffi\/_impl\/_build_libpq.py:ffi'],\ninstall_requires=setup_kwargs['install_requires'] + [\n'cffi>=1.0',\n],\n))\nelse:\nfrom setuptools.command.build_py import build_py as _build_py\n\nclass build_py(_build_py):\nhas_been_run = False\n\ndef run(self):\nif not self.dry_run:\n# A hack to import psycopg2cffi._impl._build_libpq\n# without importing psycopg2cffi\nsys.path.append(\nos.path.join('psycopg2cffi', '_impl'))\nfrom _build_libpq import _config\nfor target_path in [\n# used for installation\nos.path.join(self.build_lib, 'psycopg2cffi'),\n# only for running test from the source tree\n'psycopg2cffi',\n]:\nself.mkpath(target_path)\nwith open(os.path.join(\ntarget_path, '_config.py'), 'w') as f:\nf.write('# Auto-generated by setup.py\\n')\nf.write('PG_LIB_DIR = %r\\n' % _config.libpq_lib_dir)\nf.write('PG_VERSION = 0x%x\\n' % _config.libpq_version)\nf.write('PG_INCLUDE_DIR = %r\\n' %\n_config.libpq_include_dir)\n\n_build_py.run(self)\nself.has_been_run = True\n\nif build_py.has_been_run:\n# building bdist\nfrom psycopg2cffi._impl.libpq import ffi\next_modules = [ffi.verifier.get_extension()]\nelse:\next_modules = []\n\nsetup_kwargs.update(dict(\ncmdclass={\n'build_py': build_py\n},\ninstall_requires=setup_kwargs['install_requires'] + [\n'cffi<1.0',\n],\nsetup_requires=[\n'cffi<1.0',\n],\next_package='psycopg2cffi',\next_modules=ext_modules,\n))\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "PTable-0.9.2",
        "file_list": "CHANGELOG COPYING MANIFEST.in PKG-INFO cli.py factory.py prettytable.py _compact.py __init__.py dependency_links.txt entry_points.txt not-zip-safe pbr.json PKG-INFO SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nfrom setuptools import setup\nfrom prettytable import __version__ as version\n\n\ndef fread(filepath):\nwith open(filepath, 'r') as f:\nreturn f.read()\n\n\nsetup(\nname='PTable',\nversion=version,\ninclude_package_data=True,\nzip_safe=False,\nentry_points={\n'console_scripts': [\n'ptable = prettytable.cli:main',\n]\n},\nclassifiers=[\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.4',\n'Programming Language :: Python :: 2.5',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'License :: OSI Approved :: BSD License',\n'Topic :: Text Processing'\n],\nlicense=\"BSD (3 clause)\",\ndescription='A simple Python library for easily displaying tabular data in a visually appealing ASCII table format',\nlong_description=fread('README.rst'),\nauthor='Luke Maurits',\nauthor_email='luke@maurits.id.au',\nmaintainer='Kane Blueriver',\nmaintainer_email='kxxoling@gmail.com',\nurl='https:\/\/github.com\/kxxoling\/PTable',\npy_modules=['prettytable', 'prettytable.cli', 'prettytable.prettytable',\n'prettytable.factory', 'prettytable._compact'],\ntest_suite=\"test_prettytable\",\n)\n"
    },
    {
        "package_name": "publicsuffix-1.1.1",
        "file_list": "ChangeLog LICENSE MANIFEST.in PKG-INFO public_suffix_list.dat __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt README.rst setup.cfg setup.py tests.py",
        "setup.py": "#!\/usr\/bin\/python\n\nimport os\nimport codecs\nfrom setuptools import setup\n\ndef read_doc(name):\nreturn codecs.open(os.path.join(os.path.dirname(__file__), name), encoding='utf8').read()\n\n\ndef get_long_description():\nreturn read_doc(\"README.rst\") + \\\n\"\\n\\nLicense\\n-------\\n\\n\" + \\\nread_doc(\"LICENSE\")\n\nsetup(name='publicsuffix',\nversion='1.1.1',\ndescription='Get a public suffix for a domain name using the Public Suffix List.',\nlicense='MIT',\nlong_description=get_long_description(),\nauthor='Tomaz Solc',\nauthor_email='tomaz.solc@tablix.org',\n\npackages = ['publicsuffix'],\npackage_data = {\n'publicsuffix' : ['public_suffix_list.dat']\n},\n\ntest_suite = 'tests',\n\nclassifiers = [\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 3\",\n\"Topic :: Internet :: Name Service (DNS)\",\n],\n)\n"
    },
    {
        "package_name": "pure-sasl-0.6.2",
        "file_list": "CHANGES.rst LICENSE MANIFEST.in PKG-INFO client.py mechanisms.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nfrom setuptools import setup\n\nimport platform\nimport puresasl\nimport sys\n\nsetup(name='pure-sasl',\nversion=puresasl.__version__,\nauthor='Tyler Hobbs',\nauthor_email='tylerlhobbs@gmail.com',\nmaintainer='Alex Shafer',\nmaintainer_email='ashafer01@gmail.com',\ndescription='Pure Python client SASL implementation',\nlong_description=\n\"\"\"This package provides a reasonably high-level SASL client written\nin pure Python. New mechanisms may be integrated easily, but by default,\nsupport for PLAIN, ANONYMOUS, EXTERNAL, CRAM-MD5, DIGEST-MD5, and GSSAPI are\nprovided.\"\"\",\nlicense='MIT',\nurl='http:\/\/github.com\/thobbs\/pure-sasl',\nkeywords='sasl',\npackages=['puresasl'],\nextras_require={\n'GSSAPI': [\"winkerberos==0.7.0\"] if platform.system() == 'Windows' else ['kerberos>=1.3.0']\n},\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Topic :: Software Development :: Libraries :: Python Modules'\n]\n)\n"
    },
    {
        "package_name": "pwntools-4.8.0",
        "file_list": ".travis.yml CHANGELOG.md CONTRIBUTING.md DOCKER.md output.txt dashbuild.py Makefile requirements.txt about.rst adb.rst args.rst asm.rst atexception.rst atexit.rst commandline.rst conf.py config.rst constants.rst context.rst dynelf.rst config.rst corefile.rst elf.rst elf.rst encoders.rst exception.rst filepointer.rst filesystem.rst flag.rst fmtstr.rst gdb.rst globals.rst index.rst binutils.rst headers.rst install.rst intro.rst libcdb.rst log.rst logo.png memleak.rst protocols.rst qemu.rst regsort.rst replacements.rst ret2dlresolve.rst rop.rst srop.rst rop.rst runner.rst aarch64.rst amd64.rst arm.rst common.rst i386.rst mips.rst thumb.rst shellcraft.rst readline.rst term.rst testexample.rst timeout.rst buffer.rst processes.rst serial.rst sockets.rst ssh.rst tubes.rst ui.rst update.rst useragents.rst crc.rst cyclic.rst fiddling.rst getdents.rst hashes.rst iters.rst lists.rst misc.rst net.rst packing.rst proc.rst safeeval.rst sh_string.rst web.rst android.py args.py asm.py attach.py clean_and_log.py exploit.py exploit2.py Makefile printf-loop.c printf-loop.native printf-loop.native32 printf.aarch64 printf.arm printf.c printf.mips printf.mips64 printf.mips64el printf.mipsel printf.native printf.native32 printf.ppc printf.ppc64 printf.sparc64 gdb_api.py gen-README.py indented.py listen_uroboros.py options.py port_forward.py readline_completers.py README.md remote.py remote_gdb_debugging.py sigreturn_corefile_aarch64.py sigreturn_corefile_amd64.py sigreturn_corefile_arm.py sigreturn_corefile_i386.py spinners.py splash.py ssh.py text.py yesno.py install.sh pwn README.md shellcraft Dockerfile Dockerfile Dockerfile Dockerfile 10-import.py Dockerfile ipython_config.py Makefile README.md Dockerfile pwntools.tmLanguage pwntools.YAML-tmLanguage README.md screenshot.png install.zsh README.md _pwn LICENSE-pwntools.txt MANIFEST.in PKG-INFO toplevel.py __init__.py abi.py adb.py bootimg.py bootloader.py protocol.py __init__.py args.py asm.py atexception.py atexit.py asm.py checksec.py common.py constgrep.py cyclic.py debug.py disablenx.py disasm.py elfdiff.py elfpatch.py errno.py hex.py main.py phd.py pwnstrip.py scramble.py shellcraft.py template.py unhex.py update.py version.py __init__.py config.py aarch64.py alpha.py amd64.py arm.py i386.py ia64.py mips.py powerpc.py powerpc64.py s390.py s390x.py sparc.py sparc64.py thumb.py __init__.py aarch64.py alpha.py amd64.py arm.py i386.py ia64.py mips.py powerpc.py powerpc64.py s390.py s390x.py sparc.py sparc64.py thumb.py __init__.py constant.py freebsd.py LICENSE.txt aarch64.py alpha.py amd64.py arm.py i386.py ia64.py mips.py powerpc.py powerpc64.py s390.py s390x.py sparc.py sparc64.py thumb.py __init__.py __init__.py __init__.py crcsums.txt __init__.py __init__.py __init__.py __init__.py aarch64.h alpha.h amd64.h arm.h i386.h ia64.h mips.h powerpc.h powerpc64.h s390.h s390x.h sparc.h sparc64.h thumb.h aarch64.h alpha.h amd64.h arm.h i386.h ia64.h mips.h powerpc.h powerpc64.h s390.h s390x.h sparc.h sparc64.h thumb.h aarch64.h alpha.h amd64.h arm.h i386.h ia64.h mips.h powerpc.h powerpc64.h s390.h s390x.h sparc.h sparc64.h thumb.h freebsd.h generate_constants.sh load_constants.py LICENSE.txt aarch64.h alpha.h amd64.h arm.h i386.h ia64.h mips.h powerpc.h powerpc64.h s390.h s390x.h sparc.h sparc64.h thumb.h generate.py pwnup.mako download-useragents.py LICENSE.txt useragents.txt __init__.py device.py dynelf.py config.py corefile.py datatypes.py elf.py maps.py plt.py __init__.py delta.py __init__.py alphanumeric.py alphanum_byte.py ARM_Instructions.py builder.py random_funcs.py __init__.py xor.py __init__.py encoder.py ascii_shellcode.py delta.py xor.py __init__.py xor.py __init__.py __init__.py exception.py filepointer.py path.py ssh.py __init__.py flag.py __init__.py fmtstr.py gdb.py gdb_api_bridge.py gdb_faketerminal.py dochelper.py __init__.py lexer.py libcdb.py log.py memleak.py pep237.py __init__.py __init__.py qemu.py regsort.py replacements.py call.py gadgets.py ret2csu.py ret2dlresolve.py rop.py srop.py __init__.py runner.py internal.py registers.py cat.asm cat2.asm connect.asm echo.asm forkexit.asm kill.asm killparent.asm loader.asm loader_append.asm open.asm readn.asm sh.asm socket.asm stage.asm syscall.asm accept.asm accept4.asm access.asm acct.asm add_key.asm adjtimex.asm afs_syscall.asm alarm.asm arch_prctl.asm arch_specific_syscall.asm arm_fadvise64_64.asm arm_sync_file_range.asm bdflush.asm bind.asm bpf.asm break_.asm brk.asm cachectl.asm cacheflush.asm capget.asm capset.asm chdir.asm chmod.asm chown.asm chown32.asm chroot.asm clock_adjtime.asm clock_adjtime64.asm clock_getres.asm clock_getres_time64.asm clock_gettime.asm clock_gettime64.asm clock_nanosleep.asm clock_nanosleep_time64.asm clock_settime.asm clock_settime64.asm clone.asm clone3.asm close.asm connect.asm copy_file_range.asm creat.asm create_module.asm delete_module.asm dup.asm dup2.asm dup3.asm epoll_create.asm epoll_create1.asm epoll_ctl.asm epoll_ctl_old.asm epoll_pwait.asm epoll_wait.asm epoll_wait_old.asm eventfd.asm eventfd2.asm execve.asm execveat.asm exit.asm exit_group.asm faccessat.asm fadvise64.asm fadvise64_64.asm fallocate.asm fanotify_init.asm fanotify_mark.asm fchdir.asm fchmod.asm fchmodat.asm fchown.asm fchown32.asm fchownat.asm fcntl.asm fcntl64.asm fdatasync.asm fgetxattr.asm finit_module.asm flistxattr.asm flock.asm fork.asm fremovexattr.asm fsconfig.asm fsetxattr.asm fsmount.asm fsopen.asm fspick.asm fstat.asm fstat64.asm fstatat.asm fstatat64.asm fstatfs.asm fstatfs64.asm fsync.asm ftime.asm ftruncate.asm ftruncate64.asm futex.asm futex_time64.asm futimesat.asm getcpu.asm getcwd.asm getdents.asm getdents64.asm getegid.asm getegid32.asm geteuid.asm geteuid32.asm getgid.asm getgid32.asm getgroups.asm getgroups32.asm getitimer.asm getpeername.asm getpgid.asm getpgrp.asm getpid.asm getpmsg.asm getppid.asm getpriority.asm getrandom.asm getresgid.asm getresgid32.asm getresuid.asm getresuid32.asm getrlimit.asm getrusage.asm getsid.asm getsockname.asm getsockopt.asm gettid.asm gettimeofday.asm getuid.asm getuid32.asm getxattr.asm get_kernel_syms.asm get_mempolicy.asm get_robust_list.asm get_thread_area.asm gtty.asm ia32_arch_prctl.asm ia32_io_pgetevents.asm ia32_rseq.asm ia32_statx.asm idle.asm init_module.asm inotify_add_watch.asm inotify_init.asm inotify_init1.asm inotify_rm_watch.asm ioctl.asm ioperm.asm iopl.asm ioprio_get.asm ioprio_set.asm io_cancel.asm io_destroy.asm io_getevents.asm io_pgetevents.asm io_pgetevents_time64.asm io_setup.asm io_submit.asm io_uring_enter.asm io_uring_register.asm io_uring_setup.asm ipc.asm kcmp.asm kexec_file_load.asm kexec_load.asm keyctl.asm kill.asm lchown.asm lchown32.asm lgetxattr.asm link.asm linkat.asm listen.asm listxattr.asm llistxattr.asm lock.asm lookup_dcookie.asm lremovexattr.asm lseek.asm lsetxattr.asm lstat.asm lstat64.asm madvise.asm madvise1.asm mbind.asm membarrier.asm memfd_create.asm migrate_pages.asm mincore.asm mkdir.asm mkdirat.asm mknod.asm mknodat.asm mlock.asm mlock2.asm mlockall.asm mmap.asm mmap2.asm modify_ldt.asm mount.asm move_mount.asm move_pages.asm mprotect.asm mpx.asm mq_getsetattr.asm mq_notify.asm mq_open.asm mq_timedreceive.asm mq_timedreceive_time64.asm mq_timedsend.asm mq_timedsend_time64.asm mq_unlink.asm mremap.asm msgctl.asm msgget.asm msgrcv.asm msgsnd.asm msync.asm munlock.asm munlockall.asm munmap.asm name_to_handle_at.asm nanosleep.asm newfstatat.asm nfsservctl.asm nice.asm oldfstat.asm oldlstat.asm oldolduname.asm oldstat.asm olduname.asm open.asm openat.asm openat2.asm open_by_handle_at.asm open_tree.asm pause.asm pciconfig_iobase.asm pciconfig_read.asm pciconfig_write.asm perf_event_open.asm personality.asm pidfd_getfd.asm pidfd_open.asm pidfd_send_signal.asm pipe.asm pipe2.asm pivot_root.asm pkey_alloc.asm pkey_free.asm pkey_mprotect.asm poll.asm ppoll.asm ppoll_time64.asm prctl.asm pread.asm pread64.asm preadv.asm preadv2.asm prlimit64.asm process_vm_readv.asm process_vm_writev.asm prof.asm profil.asm pselect6.asm pselect6_time64.asm ptrace.asm putpmsg.asm pwrite.asm pwrite64.asm pwritev.asm pwritev2.asm query_module.asm quotactl.asm read.asm readahead.asm readdir.asm readlink.asm readlinkat.asm readv.asm reboot.asm recv.asm recvfrom.asm recvmmsg.asm recvmmsg_time64.asm recvmsg.asm remap_file_pages.asm removexattr.asm rename.asm renameat.asm renameat2.asm request_key.asm reserved221.asm reserved82.asm restart_syscall.asm rmdir.asm rseq.asm sched_getaffinity.asm sched_getattr.asm sched_getparam.asm sched_getscheduler.asm sched_get_priority_max.asm sched_get_priority_min.asm sched_rr_get_interval.asm sched_rr_get_interval_time64.asm sched_setaffinity.asm sched_setattr.asm sched_setparam.asm sched_setscheduler.asm sched_yield.asm seccomp.asm security.asm select.asm semctl.asm semget.asm semop.asm semtimedop.asm semtimedop_time64.asm send.asm sendfile.asm sendfile64.asm sendmmsg.asm sendmsg.asm sendto.asm setdomainname.asm setfsgid.asm setfsgid32.asm setfsuid.asm setfsuid32.asm setgid.asm setgid32.asm setgroups.asm setgroups32.asm sethostname.asm setitimer.asm setns.asm setpgid.asm setpriority.asm setregid.asm setregid32.asm setresgid.asm setresgid32.asm setresuid.asm setresuid32.asm setreuid.asm setreuid32.asm setrlimit.asm setsid.asm setsockopt.asm settimeofday.asm setuid.asm setuid32.asm setxattr.asm set_mempolicy.asm set_robust_list.asm set_thread_area.asm set_tid_address.asm sgetmask.asm shmat.asm shmctl.asm shmdt.asm shmget.asm shutdown.asm sigaction.asm sigaltstack.asm signal.asm signalfd.asm signalfd4.asm sigpending.asm sigprocmask.asm sigqueueinfo.asm sigreturn.asm sigsuspend.asm sigtimedwait.asm sigtimedwait_time64.asm socket.asm socketcall.asm socketcall_accept.asm socketcall_bind.asm socketcall_connect.asm socketcall_getpeername.asm socketcall_getsockname.asm socketcall_getsockopt.asm socketcall_listen.asm socketcall_recv.asm socketcall_recvfrom.asm socketcall_recvmsg.asm socketcall_send.asm socketcall_sendmsg.asm socketcall_sendto.asm socketcall_setsockopt.asm socketcall_shutdown.asm socketcall_socket.asm socketcall_socketpair.asm socketpair.asm splice.asm ssetmask.asm stat.asm stat64.asm statfs.asm statfs64.asm statx.asm stime.asm stty.asm swapoff.asm swapon.asm symlink.asm symlinkat.asm sync.asm syncfs.asm sync_file_range.asm sync_file_range2.asm syscall.asm sysfs.asm sysinfo.asm syslog.asm sysmips.asm sys_kexec_load.asm tee.asm tgkill.asm tgsigqueueinfo.asm time.asm timerfd.asm timerfd_create.asm timerfd_gettime.asm timerfd_gettime64.asm timerfd_settime.asm timerfd_settime64.asm timer_create.asm timer_delete.asm timer_getoverrun.asm timer_gettime.asm timer_gettime64.asm timer_settime.asm timer_settime64.asm times.asm tkill.asm truncate.asm truncate64.asm tuxcall.asm ugetrlimit.asm ulimit.asm umask.asm umount.asm umount2.asm uname.asm unlink.asm unlinkat.asm unshare.asm uselib.asm userfaultfd.asm ustat.asm utime.asm utimensat.asm utimensat_time64.asm utimes.asm vfork.asm vhangup.asm vm86.asm vm86old.asm vmsplice.asm vserver.asm wait4.asm waitid.asm waitpid.asm write.asm writev.asm _llseek.asm _newselect.asm _sysctl.asm __doc__ __doc__ breakpoint.asm crash.asm syscall.asm __doc__ infloop.asm cat.asm cat2.asm connect.asm echo.asm forkexit.asm kill.asm killparent.asm loader.asm loader_append.asm open.asm readn.asm sh.asm socket.asm stage.asm syscall.asm accept.asm accept4.asm access.asm acct.asm add_key.asm adjtimex.asm afs_syscall.asm alarm.asm arch_prctl.asm arch_specific_syscall.asm arm_fadvise64_64.asm arm_sync_file_range.asm bdflush.asm bind.asm bpf.asm break_.asm brk.asm cachectl.asm cacheflush.asm capget.asm capset.asm chdir.asm chmod.asm chown.asm chown32.asm chroot.asm clock_adjtime.asm clock_adjtime64.asm clock_getres.asm clock_getres_time64.asm clock_gettime.asm clock_gettime64.asm clock_nanosleep.asm clock_nanosleep_time64.asm clock_settime.asm clock_settime64.asm clone.asm clone3.asm close.asm connect.asm copy_file_range.asm creat.asm create_module.asm delete_module.asm dup.asm dup2.asm dup3.asm epoll_create.asm epoll_create1.asm epoll_ctl.asm epoll_ctl_old.asm epoll_pwait.asm epoll_wait.asm epoll_wait_old.asm eventfd.asm eventfd2.asm execve.asm execveat.asm exit.asm exit_group.asm faccessat.asm fadvise64.asm fadvise64_64.asm fallocate.asm fanotify_init.asm fanotify_mark.asm fchdir.asm fchmod.asm fchmodat.asm fchown.asm fchown32.asm fchownat.asm fcntl.asm fcntl64.asm fdatasync.asm fgetxattr.asm finit_module.asm flistxattr.asm flock.asm fork.asm fremovexattr.asm fsconfig.asm fsetxattr.asm fsmount.asm fsopen.asm fspick.asm fstat.asm fstat64.asm fstatat.asm fstatat64.asm fstatfs.asm fstatfs64.asm fsync.asm ftime.asm ftruncate.asm ftruncate64.asm futex.asm futex_time64.asm futimesat.asm getcpu.asm getcwd.asm getdents.asm getdents64.asm getegid.asm getegid32.asm geteuid.asm geteuid32.asm getgid.asm getgid32.asm getgroups.asm getgroups32.asm getitimer.asm getpeername.asm getpgid.asm getpgrp.asm getpid.asm getpmsg.asm getppid.asm getpriority.asm getrandom.asm getresgid.asm getresgid32.asm getresuid.asm getresuid32.asm getrlimit.asm getrusage.asm getsid.asm getsockname.asm getsockopt.asm gettid.asm gettimeofday.asm getuid.asm getuid32.asm getxattr.asm get_kernel_syms.asm get_mempolicy.asm get_robust_list.asm get_thread_area.asm gtty.asm ia32_arch_prctl.asm ia32_io_pgetevents.asm ia32_rseq.asm ia32_statx.asm idle.asm init_module.asm inotify_add_watch.asm inotify_init.asm inotify_init1.asm inotify_rm_watch.asm ioctl.asm ioperm.asm iopl.asm ioprio_get.asm ioprio_set.asm io_cancel.asm io_destroy.asm io_getevents.asm io_pgetevents.asm io_pgetevents_time64.asm io_setup.asm io_submit.asm io_uring_enter.asm io_uring_register.asm io_uring_setup.asm ipc.asm kcmp.asm kexec_file_load.asm kexec_load.asm keyctl.asm kill.asm lchown.asm lchown32.asm lgetxattr.asm link.asm linkat.asm listen.asm listxattr.asm llistxattr.asm lock.asm lookup_dcookie.asm lremovexattr.asm lseek.asm lsetxattr.asm lstat.asm lstat64.asm madvise.asm madvise1.asm mbind.asm membarrier.asm memfd_create.asm migrate_pages.asm mincore.asm mkdir.asm mkdirat.asm mknod.asm mknodat.asm mlock.asm mlock2.asm mlockall.asm mmap.asm mmap2.asm modify_ldt.asm mount.asm move_mount.asm move_pages.asm mprotect.asm mpx.asm mq_getsetattr.asm mq_notify.asm mq_open.asm mq_timedreceive.asm mq_timedreceive_time64.asm mq_timedsend.asm mq_timedsend_time64.asm mq_unlink.asm mremap.asm msgctl.asm msgget.asm msgrcv.asm msgsnd.asm msync.asm munlock.asm munlockall.asm munmap.asm name_to_handle_at.asm nanosleep.asm newfstatat.asm nfsservctl.asm nice.asm oldfstat.asm oldlstat.asm oldolduname.asm oldstat.asm olduname.asm open.asm openat.asm openat2.asm open_by_handle_at.asm open_tree.asm pause.asm pciconfig_iobase.asm pciconfig_read.asm pciconfig_write.asm perf_event_open.asm personality.asm pidfd_getfd.asm pidfd_open.asm pidfd_send_signal.asm pipe.asm pipe2.asm pivot_root.asm pkey_alloc.asm pkey_free.asm pkey_mprotect.asm poll.asm ppoll.asm ppoll_time64.asm prctl.asm pread.asm pread64.asm preadv.asm preadv2.asm prlimit64.asm process_vm_readv.asm process_vm_writev.asm prof.asm profil.asm pselect6.asm pselect6_time64.asm ptrace.asm putpmsg.asm pwrite.asm pwrite64.asm pwritev.asm pwritev2.asm query_module.asm quotactl.asm read.asm readahead.asm readdir.asm readlink.asm readlinkat.asm readv.asm reboot.asm recv.asm recvfrom.asm recvmmsg.asm recvmmsg_time64.asm recvmsg.asm remap_file_pages.asm removexattr.asm rename.asm renameat.asm renameat2.asm request_key.asm reserved221.asm reserved82.asm restart_syscall.asm rmdir.asm rseq.asm sched_getaffinity.asm sched_getattr.asm sched_getparam.asm sched_getscheduler.asm sched_get_priority_max.asm sched_get_priority_min.asm sched_rr_get_interval.asm sched_rr_get_interval_time64.asm sched_setaffinity.asm sched_setattr.asm sched_setparam.asm sched_setscheduler.asm sched_yield.asm seccomp.asm security.asm select.asm semctl.asm semget.asm semop.asm semtimedop.asm semtimedop_time64.asm send.asm sendfile.asm sendfile64.asm sendmmsg.asm sendmsg.asm sendto.asm setdomainname.asm setfsgid.asm setfsgid32.asm setfsuid.asm setfsuid32.asm setgid.asm setgid32.asm setgroups.asm setgroups32.asm sethostname.asm setitimer.asm setns.asm setpgid.asm setpriority.asm setregid.asm setregid32.asm setresgid.asm setresgid32.asm setresuid.asm setresuid32.asm setreuid.asm setreuid32.asm setrlimit.asm setsid.asm setsockopt.asm settimeofday.asm setuid.asm setuid32.asm setxattr.asm set_mempolicy.asm set_robust_list.asm set_thread_area.asm set_tid_address.asm sgetmask.asm shmat.asm shmctl.asm shmdt.asm shmget.asm shutdown.asm sigaction.asm sigaltstack.asm signal.asm signalfd.asm signalfd4.asm sigpending.asm sigprocmask.asm sigqueueinfo.asm sigreturn.asm sigsuspend.asm sigtimedwait.asm sigtimedwait_time64.asm socket.asm socketcall.asm socketcall_accept.asm socketcall_bind.asm socketcall_connect.asm socketcall_getpeername.asm socketcall_getsockname.asm socketcall_getsockopt.asm socketcall_listen.asm socketcall_recv.asm socketcall_recvfrom.asm socketcall_recvmsg.asm socketcall_send.asm socketcall_sendmsg.asm socketcall_sendto.asm socketcall_setsockopt.asm socketcall_shutdown.asm socketcall_socket.asm socketcall_socketpair.asm socketpair.asm splice.asm ssetmask.asm stat.asm stat64.asm statfs.asm statfs64.asm statx.asm stime.asm stty.asm swapoff.asm swapon.asm symlink.asm symlinkat.asm sync.asm syncfs.asm sync_file_range.asm sync_file_range2.asm syscall.asm sysfs.asm sysinfo.asm syslog.asm sysmips.asm sys_kexec_load.asm tee.asm tgkill.asm tgsigqueueinfo.asm time.asm timerfd.asm timerfd_create.asm timerfd_gettime.asm timerfd_gettime64.asm timerfd_settime.asm timerfd_settime64.asm timer_create.asm timer_delete.asm timer_getoverrun.asm timer_gettime.asm timer_gettime64.asm timer_settime.asm timer_settime64.asm times.asm tkill.asm truncate.asm truncate64.asm tuxcall.asm ugetrlimit.asm ulimit.asm umask.asm umount.asm umount2.asm uname.asm unlink.asm unlinkat.asm unshare.asm uselib.asm userfaultfd.asm ustat.asm utime.asm utimensat.asm utimensat_time64.asm utimes.asm vfork.asm vhangup.asm vm86.asm vm86old.asm vmsplice.asm vserver.asm wait4.asm waitid.asm waitpid.asm write.asm writev.asm _llseek.asm _newselect.asm _sysctl.asm __doc__ __doc__ memcpy.asm mov.asm push.asm pushstr.asm pushstr_array.asm setregs.asm trap.asm xor.asm __doc__ amd64_to_i386.asm bindsh.asm cat.asm cat2.asm connect.asm connectstager.asm dup.asm dupsh.asm echo.asm egghunter.asm findpeer.asm findpeersh.asm findpeerstager.asm forkbomb.asm forkexit.asm getpid.asm kill.asm killparent.asm listen.asm loader.asm loader_append.asm membot.asm migrate_stack.asm mmap_rwx.asm read.asm readfile.asm readinto.asm readloop.asm readn.asm readptr.asm read_upto.asm recvsize.asm setregid.asm setreuid.asm sh.asm socket.asm stage.asm stager.asm strace_dos.asm syscall.asm accept.asm accept4.asm access.asm acct.asm add_key.asm adjtimex.asm afs_syscall.asm alarm.asm arch_prctl.asm arch_specific_syscall.asm arm_fadvise64_64.asm arm_sync_file_range.asm bdflush.asm bind.asm bpf.asm break_.asm brk.asm cachectl.asm cacheflush.asm capget.asm capset.asm chdir.asm chmod.asm chown.asm chown32.asm chroot.asm clock_adjtime.asm clock_adjtime64.asm clock_getres.asm clock_getres_time64.asm clock_gettime.asm clock_gettime64.asm clock_nanosleep.asm clock_nanosleep_time64.asm clock_settime.asm clock_settime64.asm clone.asm clone3.asm close.asm connect.asm copy_file_range.asm creat.asm create_module.asm delete_module.asm dup.asm dup2.asm dup3.asm epoll_create.asm epoll_create1.asm epoll_ctl.asm epoll_ctl_old.asm epoll_pwait.asm epoll_wait.asm epoll_wait_old.asm eventfd.asm eventfd2.asm execve.asm execveat.asm exit.asm exit_group.asm faccessat.asm fadvise64.asm fadvise64_64.asm fallocate.asm fanotify_init.asm fanotify_mark.asm fchdir.asm fchmod.asm fchmodat.asm fchown.asm fchown32.asm fchownat.asm fcntl.asm fcntl64.asm fdatasync.asm fgetxattr.asm finit_module.asm flistxattr.asm flock.asm fork.asm fremovexattr.asm fsconfig.asm fsetxattr.asm fsmount.asm fsopen.asm fspick.asm fstat.asm fstat64.asm fstatat.asm fstatat64.asm fstatfs.asm fstatfs64.asm fsync.asm ftime.asm ftruncate.asm ftruncate64.asm futex.asm futex_time64.asm futimesat.asm getcpu.asm getcwd.asm getdents.asm getdents64.asm getegid.asm getegid32.asm geteuid.asm geteuid32.asm getgid.asm getgid32.asm getgroups.asm getgroups32.asm getitimer.asm getpeername.asm getpgid.asm getpgrp.asm getpid.asm getpmsg.asm getppid.asm getpriority.asm getrandom.asm getresgid.asm getresgid32.asm getresuid.asm getresuid32.asm getrlimit.asm getrusage.asm getsid.asm getsockname.asm getsockopt.asm gettid.asm gettimeofday.asm getuid.asm getuid32.asm getxattr.asm get_kernel_syms.asm get_mempolicy.asm get_robust_list.asm get_thread_area.asm gtty.asm ia32_arch_prctl.asm ia32_io_pgetevents.asm ia32_rseq.asm ia32_statx.asm idle.asm init_module.asm inotify_add_watch.asm inotify_init.asm inotify_init1.asm inotify_rm_watch.asm ioctl.asm ioperm.asm iopl.asm ioprio_get.asm ioprio_set.asm io_cancel.asm io_destroy.asm io_getevents.asm io_pgetevents.asm io_pgetevents_time64.asm io_setup.asm io_submit.asm io_uring_enter.asm io_uring_register.asm io_uring_setup.asm ipc.asm kcmp.asm kexec_file_load.asm kexec_load.asm keyctl.asm kill.asm lchown.asm lchown32.asm lgetxattr.asm link.asm linkat.asm listen.asm listxattr.asm llistxattr.asm lock.asm lookup_dcookie.asm lremovexattr.asm lseek.asm lsetxattr.asm lstat.asm lstat64.asm madvise.asm madvise1.asm mbind.asm membarrier.asm memfd_create.asm migrate_pages.asm mincore.asm mkdir.asm mkdirat.asm mknod.asm mknodat.asm mlock.asm mlock2.asm mlockall.asm mmap.asm mmap2.asm modify_ldt.asm mount.asm move_mount.asm move_pages.asm mprotect.asm mpx.asm mq_getsetattr.asm mq_notify.asm mq_open.asm mq_timedreceive.asm mq_timedreceive_time64.asm mq_timedsend.asm mq_timedsend_time64.asm mq_unlink.asm mremap.asm msgctl.asm msgget.asm msgrcv.asm msgsnd.asm msync.asm munlock.asm munlockall.asm munmap.asm name_to_handle_at.asm nanosleep.asm newfstatat.asm nfsservctl.asm nice.asm oldfstat.asm oldlstat.asm oldolduname.asm oldstat.asm olduname.asm open.asm openat.asm openat2.asm open_by_handle_at.asm open_tree.asm pause.asm pciconfig_iobase.asm pciconfig_read.asm pciconfig_write.asm perf_event_open.asm personality.asm pidfd_getfd.asm pidfd_open.asm pidfd_send_signal.asm pipe.asm pipe2.asm pivot_root.asm pkey_alloc.asm pkey_free.asm pkey_mprotect.asm poll.asm ppoll.asm ppoll_time64.asm prctl.asm pread.asm pread64.asm preadv.asm preadv2.asm prlimit64.asm process_vm_readv.asm process_vm_writev.asm prof.asm profil.asm pselect6.asm pselect6_time64.asm ptrace.asm putpmsg.asm pwrite.asm pwrite64.asm pwritev.asm pwritev2.asm query_module.asm quotactl.asm read.asm readahead.asm readdir.asm readlink.asm readlinkat.asm readv.asm reboot.asm recv.asm recvfrom.asm recvmmsg.asm recvmmsg_time64.asm recvmsg.asm remap_file_pages.asm removexattr.asm rename.asm renameat.asm renameat2.asm request_key.asm reserved221.asm reserved82.asm restart_syscall.asm rmdir.asm rseq.asm sched_getaffinity.asm sched_getattr.asm sched_getparam.asm sched_getscheduler.asm sched_get_priority_max.asm sched_get_priority_min.asm sched_rr_get_interval.asm sched_rr_get_interval_time64.asm sched_setaffinity.asm sched_setattr.asm sched_setparam.asm sched_setscheduler.asm sched_yield.asm seccomp.asm security.asm select.asm semctl.asm semget.asm semop.asm semtimedop.asm semtimedop_time64.asm send.asm sendfile.asm sendfile64.asm sendmmsg.asm sendmsg.asm sendto.asm setdomainname.asm setfsgid.asm setfsgid32.asm setfsuid.asm setfsuid32.asm setgid.asm setgid32.asm setgroups.asm setgroups32.asm sethostname.asm setitimer.asm setns.asm setpgid.asm setpriority.asm setregid.asm setregid32.asm setresgid.asm setresgid32.asm setresuid.asm setresuid32.asm setreuid.asm setreuid32.asm setrlimit.asm setsid.asm setsockopt.asm settimeofday.asm setuid.asm setuid32.asm setxattr.asm set_mempolicy.asm set_robust_list.asm set_thread_area.asm set_tid_address.asm sgetmask.asm shmat.asm shmctl.asm shmdt.asm shmget.asm shutdown.asm sigaction.asm sigaltstack.asm signal.asm signalfd.asm signalfd4.asm sigpending.asm sigprocmask.asm sigqueueinfo.asm sigreturn.asm sigsuspend.asm sigtimedwait.asm sigtimedwait_time64.asm socket.asm socketcall.asm socketcall_accept.asm socketcall_bind.asm socketcall_connect.asm socketcall_getpeername.asm socketcall_getsockname.asm socketcall_getsockopt.asm socketcall_listen.asm socketcall_recv.asm socketcall_recvfrom.asm socketcall_recvmsg.asm socketcall_send.asm socketcall_sendmsg.asm socketcall_sendto.asm socketcall_setsockopt.asm socketcall_shutdown.asm socketcall_socket.asm socketcall_socketpair.asm socketpair.asm splice.asm ssetmask.asm stat.asm stat64.asm statfs.asm statfs64.asm statx.asm stime.asm stty.asm swapoff.asm swapon.asm symlink.asm symlinkat.asm sync.asm syncfs.asm sync_file_range.asm sync_file_range2.asm syscall.asm sysfs.asm sysinfo.asm syslog.asm sysmips.asm sys_kexec_load.asm tee.asm tgkill.asm tgsigqueueinfo.asm time.asm timerfd.asm timerfd_create.asm timerfd_gettime.asm timerfd_gettime64.asm timerfd_settime.asm timerfd_settime64.asm timer_create.asm timer_delete.asm timer_getoverrun.asm timer_gettime.asm timer_gettime64.asm timer_settime.asm timer_settime64.asm times.asm tkill.asm truncate.asm truncate64.asm tuxcall.asm ugetrlimit.asm ulimit.asm umask.asm umount.asm umount2.asm uname.asm unlink.asm unlinkat.asm unshare.asm uselib.asm userfaultfd.asm ustat.asm utime.asm utimensat.asm utimensat_time64.asm utimes.asm vfork.asm vhangup.asm vm86.asm vm86old.asm vmsplice.asm vserver.asm wait4.asm waitid.asm waitpid.asm write.asm writev.asm _llseek.asm _newselect.asm _sysctl.asm __doc__ writeloop.asm __doc__ crash.asm syscall.asm __doc__ infloop.asm itoa.asm amd64_to_i386.asm bindsh.asm cat.asm cat2.asm connect.asm connectstager.asm dup.asm dupsh.asm echo.asm egghunter.asm findpeer.asm findpeersh.asm findpeerstager.asm forkbomb.asm forkexit.asm getpid.asm kill.asm killparent.asm listen.asm loader.asm loader_append.asm membot.asm migrate_stack.asm mmap_rwx.asm read.asm readfile.asm readinto.asm readloop.asm readn.asm readptr.asm read_upto.asm recvsize.asm setregid.asm setreuid.asm sh.asm socket.asm stage.asm stager.asm strace_dos.asm syscall.asm accept.asm accept4.asm access.asm acct.asm add_key.asm adjtimex.asm afs_syscall.asm alarm.asm arch_prctl.asm arch_specific_syscall.asm arm_fadvise64_64.asm arm_sync_file_range.asm bdflush.asm bind.asm bpf.asm break_.asm brk.asm cachectl.asm cacheflush.asm capget.asm capset.asm chdir.asm chmod.asm chown.asm chown32.asm chroot.asm clock_adjtime.asm clock_adjtime64.asm clock_getres.asm clock_getres_time64.asm clock_gettime.asm clock_gettime64.asm clock_nanosleep.asm clock_nanosleep_time64.asm clock_settime.asm clock_settime64.asm clone.asm clone3.asm close.asm connect.asm copy_file_range.asm creat.asm create_module.asm delete_module.asm dup.asm dup2.asm dup3.asm epoll_create.asm epoll_create1.asm epoll_ctl.asm epoll_ctl_old.asm epoll_pwait.asm epoll_wait.asm epoll_wait_old.asm eventfd.asm eventfd2.asm execve.asm execveat.asm exit.asm exit_group.asm faccessat.asm fadvise64.asm fadvise64_64.asm fallocate.asm fanotify_init.asm fanotify_mark.asm fchdir.asm fchmod.asm fchmodat.asm fchown.asm fchown32.asm fchownat.asm fcntl.asm fcntl64.asm fdatasync.asm fgetxattr.asm finit_module.asm flistxattr.asm flock.asm fork.asm fremovexattr.asm fsconfig.asm fsetxattr.asm fsmount.asm fsopen.asm fspick.asm fstat.asm fstat64.asm fstatat.asm fstatat64.asm fstatfs.asm fstatfs64.asm fsync.asm ftime.asm ftruncate.asm ftruncate64.asm futex.asm futex_time64.asm futimesat.asm getcpu.asm getcwd.asm getdents.asm getdents64.asm getegid.asm getegid32.asm geteuid.asm geteuid32.asm getgid.asm getgid32.asm getgroups.asm getgroups32.asm getitimer.asm getpeername.asm getpgid.asm getpgrp.asm getpid.asm getpmsg.asm getppid.asm getpriority.asm getrandom.asm getresgid.asm getresgid32.asm getresuid.asm getresuid32.asm getrlimit.asm getrusage.asm getsid.asm getsockname.asm getsockopt.asm gettid.asm gettimeofday.asm getuid.asm getuid32.asm getxattr.asm get_kernel_syms.asm get_mempolicy.asm get_robust_list.asm get_thread_area.asm gtty.asm ia32_arch_prctl.asm ia32_io_pgetevents.asm ia32_rseq.asm ia32_statx.asm idle.asm init_module.asm inotify_add_watch.asm inotify_init.asm inotify_init1.asm inotify_rm_watch.asm ioctl.asm ioperm.asm iopl.asm ioprio_get.asm ioprio_set.asm io_cancel.asm io_destroy.asm io_getevents.asm io_pgetevents.asm io_pgetevents_time64.asm io_setup.asm io_submit.asm io_uring_enter.asm io_uring_register.asm io_uring_setup.asm ipc.asm kcmp.asm kexec_file_load.asm kexec_load.asm keyctl.asm kill.asm lchown.asm lchown32.asm lgetxattr.asm link.asm linkat.asm listen.asm listxattr.asm llistxattr.asm lock.asm lookup_dcookie.asm lremovexattr.asm lseek.asm lsetxattr.asm lstat.asm lstat64.asm madvise.asm madvise1.asm mbind.asm membarrier.asm memfd_create.asm migrate_pages.asm mincore.asm mkdir.asm mkdirat.asm mknod.asm mknodat.asm mlock.asm mlock2.asm mlockall.asm mmap.asm mmap2.asm modify_ldt.asm mount.asm move_mount.asm move_pages.asm mprotect.asm mpx.asm mq_getsetattr.asm mq_notify.asm mq_open.asm mq_timedreceive.asm mq_timedreceive_time64.asm mq_timedsend.asm mq_timedsend_time64.asm mq_unlink.asm mremap.asm msgctl.asm msgget.asm msgrcv.asm msgsnd.asm msync.asm munlock.asm munlockall.asm munmap.asm name_to_handle_at.asm nanosleep.asm newfstatat.asm nfsservctl.asm nice.asm oldfstat.asm oldlstat.asm oldolduname.asm oldstat.asm olduname.asm open.asm openat.asm openat2.asm open_by_handle_at.asm open_tree.asm pause.asm pciconfig_iobase.asm pciconfig_read.asm pciconfig_write.asm perf_event_open.asm personality.asm pidfd_getfd.asm pidfd_open.asm pidfd_send_signal.asm pipe.asm pipe2.asm pivot_root.asm pkey_alloc.asm pkey_free.asm pkey_mprotect.asm poll.asm ppoll.asm ppoll_time64.asm prctl.asm pread.asm pread64.asm preadv.asm preadv2.asm prlimit64.asm process_vm_readv.asm process_vm_writev.asm prof.asm profil.asm pselect6.asm pselect6_time64.asm ptrace.asm putpmsg.asm pwrite.asm pwrite64.asm pwritev.asm pwritev2.asm query_module.asm quotactl.asm read.asm readahead.asm readdir.asm readlink.asm readlinkat.asm readv.asm reboot.asm recv.asm recvfrom.asm recvmmsg.asm recvmmsg_time64.asm recvmsg.asm remap_file_pages.asm removexattr.asm rename.asm renameat.asm renameat2.asm request_key.asm reserved221.asm reserved82.asm restart_syscall.asm rmdir.asm rseq.asm sched_getaffinity.asm sched_getattr.asm sched_getparam.asm sched_getscheduler.asm sched_get_priority_max.asm sched_get_priority_min.asm sched_rr_get_interval.asm sched_rr_get_interval_time64.asm sched_setaffinity.asm sched_setattr.asm sched_setparam.asm sched_setscheduler.asm sched_yield.asm seccomp.asm security.asm select.asm semctl.asm semget.asm semop.asm semtimedop.asm semtimedop_time64.asm send.asm sendfile.asm sendfile64.asm sendmmsg.asm sendmsg.asm sendto.asm setdomainname.asm setfsgid.asm setfsgid32.asm setfsuid.asm setfsuid32.asm setgid.asm setgid32.asm setgroups.asm setgroups32.asm sethostname.asm setitimer.asm setns.asm setpgid.asm setpriority.asm setregid.asm setregid32.asm setresgid.asm setresgid32.asm setresuid.asm setresuid32.asm setreuid.asm setreuid32.asm setrlimit.asm setsid.asm setsockopt.asm settimeofday.asm setuid.asm setuid32.asm setxattr.asm set_mempolicy.asm set_robust_list.asm set_thread_area.asm set_tid_address.asm sgetmask.asm shmat.asm shmctl.asm shmdt.asm shmget.asm shutdown.asm sigaction.asm sigaltstack.asm signal.asm signalfd.asm signalfd4.asm sigpending.asm sigprocmask.asm sigqueueinfo.asm sigreturn.asm sigsuspend.asm sigtimedwait.asm sigtimedwait_time64.asm socket.asm socketcall.asm socketcall_accept.asm socketcall_bind.asm socketcall_connect.asm socketcall_getpeername.asm socketcall_getsockname.asm socketcall_getsockopt.asm socketcall_listen.asm socketcall_recv.asm socketcall_recvfrom.asm socketcall_recvmsg.asm socketcall_send.asm socketcall_sendmsg.asm socketcall_sendto.asm socketcall_setsockopt.asm socketcall_shutdown.asm socketcall_socket.asm socketcall_socketpair.asm socketpair.asm splice.asm ssetmask.asm stat.asm stat64.asm statfs.asm statfs64.asm statx.asm stime.asm stty.asm swapoff.asm swapon.asm symlink.asm symlinkat.asm sync.asm syncfs.asm sync_file_range.asm sync_file_range2.asm syscall.asm sysfs.asm sysinfo.asm syslog.asm sysmips.asm sys_kexec_load.asm tee.asm tgkill.asm tgsigqueueinfo.asm time.asm timerfd.asm timerfd_create.asm timerfd_gettime.asm timerfd_gettime64.asm timerfd_settime.asm timerfd_settime64.asm timer_create.asm timer_delete.asm timer_getoverrun.asm timer_gettime.asm timer_gettime64.asm timer_settime.asm timer_settime64.asm times.asm tkill.asm truncate.asm truncate64.asm tuxcall.asm ugetrlimit.asm ulimit.asm umask.asm umount.asm umount2.asm uname.asm unlink.asm unlinkat.asm unshare.asm uselib.asm userfaultfd.asm ustat.asm utime.asm utimensat.asm utimensat_time",
        "setup.py": "#!\/usr\/bin\/env python\nfrom __future__ import print_function\n\nimport glob\nimport os\nimport platform\nimport subprocess\nimport sys\nimport traceback\nfrom distutils.command.install import INSTALL_SCHEMES\nfrom distutils.sysconfig import get_python_inc\nfrom distutils.util import convert_path\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n# Get all template files\ntemplates = []\nfor dirpath, dirnames, filenames in os.walk(convert_path('pwnlib\/shellcraft\/templates'), followlinks=True):\nfor f in filenames:\ntemplates.append(os.path.relpath(os.path.join(dirpath, f), 'pwnlib'))\n\n# This makes pwntools-LICENSE.txt appear with the package folders\nfor scheme in INSTALL_SCHEMES.values():\nscheme['data'] = scheme['purelib']\n\nconsole_scripts = ['pwn=pwnlib.commandline.main:main']\n\n# Find all of the ancillary console scripts\n# We have a magic flag --include-all-scripts\nflag = '--only-use-pwn-command'\nif flag in sys.argv:\nsys.argv.remove(flag)\nelse:\nflag = False\n\nfor filename in glob.glob('pwnlib\/commandline\/*'):\nfilename = os.path.basename(filename)\nfilename, ext = os.path.splitext(filename)\n\nif ext != '.py' or '__init__' in filename:\ncontinue\n\nscript = '%s=pwnlib.commandline.common:main' % filename\nif not flag:\nconsole_scripts.append(script)\n\ninstall_requires = ['paramiko>=1.15.2',\n'mako>=1.0.0',\n'pyelftools>=0.2.4',\n'capstone>=3.0.5rc2', # See Gallopsled\/pwntools#971, Gallopsled\/pwntools#1160\n'ropgadget>=5.3',\n'pyserial>=2.7',\n'requests>=2.0',\n'pip>=6.0.8',\n'pygments>=2.0',\n'pysocks',\n'python-dateutil',\n'packaging',\n'psutil>=3.3.0',\n'intervaltree>=3.0',\n'sortedcontainers',\n# see unicorn-engine\/unicorn#1100 and #1170\n'unicorn>=1.0.2rc1',\n'six>=1.12.0',\n'rpyc',\n'colored_traceback',\n]\n\nif platform.python_version_tuple()[0] == '2':\ninstall_requires += ['pathlib2']\n\n# Check that the user has installed the Python development headers\nPythonH = os.path.join(get_python_inc(), 'Python.h')\nif not os.path.exists(PythonH):\nprint(\"You must install the Python development headers!\", file=sys.stderr)\nprint(\"$ apt-get install python-dev\", file=sys.stderr)\nsys.exit(-1)\n\n# Convert README.md to reStructuredText for PyPI\nlong_description = ''\ntry:\nlong_description = subprocess.check_output(['pandoc', 'README.md', '--to=rst'], universal_newlines=True)\nexcept Exception as e:\nprint(\"Failed to convert README.md through pandoc, proceeding anyway\", file=sys.stderr)\ntraceback.print_exc()\n\nsetup(\nname = 'pwntools',\npython_requires = '>=2.7',\npackages = find_packages(),\nversion = '4.8.0',\ndata_files = [('pwntools-doc',\nglob.glob('*.md') + glob.glob('*.txt')),\n],\npackage_data = {\n'pwnlib': [\n'data\/crcsums.txt',\n'data\/useragents\/useragents.txt',\n'data\/binutils\/*',\n'data\/includes\/*.h',\n'data\/includes\/*\/*.h',\n'data\/templates\/*.mako',\n] + templates,\n},\nentry_points = {'console_scripts': console_scripts},\nscripts = glob.glob(\"bin\/*\"),\ndescription = \"Pwntools CTF framework and exploit development library.\",\nlong_description = long_description,\nauthor = \"Gallopsled et al.\",\nauthor_email = \"pwntools-users@googlegroups.com\",\nurl = 'https:\/\/pwntools.com',\ndownload_url = \"https:\/\/github.com\/Gallopsled\/pwntools\/releases\",\ninstall_requires = install_requires,\nlicense = \"Mostly MIT, some GPL\/BSD, see LICENSE-pwntools.txt\",\nkeywords = 'pwntools exploit ctf capture the flag binary wargame overflow stack heap defcon',\nclassifiers = [\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'Intended Audience :: System Administrators',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Operating System :: POSIX :: Linux',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Topic :: Security',\n'Topic :: Software Development :: Assemblers',\n'Topic :: Software Development :: Debuggers',\n'Topic :: Software Development :: Disassemblers',\n'Topic :: Software Development :: Embedded Systems',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: System :: System Shells',\n'Topic :: Utilities',\n]\n)\n"
    },
    {
        "package_name": "py-healthcheck-1.10.1",
        "file_list": "environmentdump.py healthcheck.py security.py timeout.py tornado_handler.py __init__.py PKG-INFO dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nimport os\nfrom setuptools import setup, find_packages\n\n__version__ = \"1.10.1\"\n__repo__ = \"https:\/\/github.com\/ateliedocodigo\/py-healthcheck\"\n\n\ndef read(fname):\nreturn open(os.path.join(os.path.dirname(__file__), fname)).read()\n\n\nsetup(\nname=\"py-healthcheck\",\nversion=__version__,\ndescription=\"Adds healthcheck endpoints to Flask or Tornado apps\",\nlong_description=read(\"README.rst\"),\nauthor=\"Luis Fernando Gomes\",\nauthor_email=\"luiscoms@ateliedocodigo.com.br\",\nurl=__repo__,\ndownload_url=\"{}\/tarball\/{}\".format(__repo__, __version__),\npackages=find_packages(exclude=[\"tests\", \"tests.*\"]),\nzip_safe=False,\ninclude_package_data=True,\nlicense=\"MIT\",\nplatforms=\"any\",\ninstall_requires=[\"six\"],\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Web Environment\",\n\"Framework :: Flask\",\n# \"Framework :: Tornado\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n]\n)\n"
    },
    {
        "package_name": "py-rouge-1.1",
        "file_list": "PKG-INFO dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt README.md example.py rouge.py rouge_augmented.py synonyms.py wordnet_key_value.txt wordnet_key_value_special_cases.txt __init__.py setup.cfg setup.py",
        "setup.py": "from setuptools import setup\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nsetup(name='py-rouge',\nversion='1.1',\ndescription='Full Python implementation of the ROUGE metric, producing same results as in the official perl implementation.',\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl='https:\/\/github.com\/Diego999\/py-rouge',\nauthor='Diego Antognini',\nauthor_email='diegoantognini@gmail.com',\nlicense='Apache License 2.0',\npackages=['rouge'],\npackage_data={'': ['wordnet_key_value.txt', 'wordnet_key_value_special_cases.txt']},\nzip_safe=False)\n"
    },
    {
        "package_name": "py-solc-3.2.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py exceptions.py install.py main.py filesystem.py string.py types.py __init__.py wrapper.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import (\nsetup,\nfind_packages,\n)\n\n\nsetup(\nname='py-solc',\n# *IMPORTANT*: Don't manually change the version here. Use the 'bumpversion' utility.\nversion='3.2.0',\ndescription=\"\"\"Python wrapper around the solc binary\"\"\",\nlong_description_markdown_filename='README.md',\nauthor='Piper Merriam',\nauthor_email='pipermerriam@gmail.com',\nurl='https:\/\/github.com\/ethereum\/py-solc',\ninclude_package_data=True,\npy_modules=['solc'],\nsetup_requires=['setuptools-markdown'],\npython_requires='>=3.4, <4',\ninstall_requires=[\n\"semantic_version>=2.6.0\",\n],\nlicense=\"MIT\",\nzip_safe=False,\nkeywords='ethereum solidity solc',\npackages=find_packages(exclude=[\"tests\", \"tests.*\"]),\nclassifiers=[\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n],\n)\n"
    },
    {
        "package_name": "py27hash-1.1.0",
        "file_list": "PKG-INFO README.md setup.cfg setup.py dict.py hash.py key.py set.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "# pylint: disable = C0111\nfrom setuptools import find_packages, setup\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as f:\nDESCRIPTION = f.read()\n\nsetup(\nname=\"py27hash\",\nversion=\"1.1.0\",\nauthor=\"NeuML\",\ndescription=\"Python 2.7 hashing and iteration in Python 3+\",\nlong_description=DESCRIPTION,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/neuml\/py27hash\",\nproject_urls={\n\"Documentation\": \"https:\/\/github.com\/neuml\/py27hash\",\n\"Issue Tracker\": \"https:\/\/github.com\/neuml\/py27hash\/issues\",\n\"Source Code\": \"https:\/\/github.com\/neuml\/py27hash\",\n},\ndownload_url=\"https:\/\/pypi.org\/project\/py27hash\/\",\nlicense=\"MIT License: http:\/\/opensource.org\/licenses\/MIT\",\npackages=find_packages(where=\"src\/python\"),\npackage_dir={\"\": \"src\/python\"},\nkeywords=\"python hash iteration migration\",\npython_requires=\">=2.7\",\nclassifiers=[\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 3\",\n\"Topic :: Software Development :: Libraries\"\n])\n"
    },
    {
        "package_name": "pyactiveresource-2.2.2",
        "file_list": "LICENSE MANIFEST.in PKG-INFO activeresource.py collection.py connection.py element_containers.py fake_connection.py formats.py http_fake.py __init__.py util.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py",
        "setup.py": "from setuptools import setup\nimport sys\n\nversion = '2.2.2'\n\nif sys.version_info >= (3,):\npython_dateutils_version = 'python-dateutil>=2.0'\nelse:\npython_dateutils_version = 'python-dateutil<2.0'\n\n\nsetup(name='pyactiveresource',\nversion=version,\ndescription='ActiveResource for Python',\nauthor='Shopify',\nauthor_email='developers@shopify.com',\nurl='https:\/\/github.com\/Shopify\/pyactiveresource\/',\npackages=['pyactiveresource', 'pyactiveresource\/testing'],\nlicense='MIT License',\ntest_suite='test',\ninstall_requires=[\n'six',\n],\ntests_require=[\npython_dateutils_version,\n'PyYAML',\n],\nplatforms=['any'],\nclassifiers=['Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Topic :: Software Development',\n'Topic :: Software Development :: Libraries',\n'Topic :: Software Development :: Libraries :: Python Modules']\n)\n"
    },
    {
        "package_name": "pyangbind-0.8.1",
        "file_list": "CONTRIBUTING.md LICENSE MANIFEST.in PKG-INFO identity.py misc.py __init__.py base.py pybindJSON.py serialise.py xpathhelper.py yangtypes.py __init__.py pybind.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.md README.rst requirements.DEVELOPER.txt requirements.txt setup.cfg setup.py",
        "setup.py": "import os\nfrom codecs import open\nfrom setuptools import find_packages, setup\n\nimport pyangbind\n\n\n# allow setup.py to be run from any path\nos.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))\n\nwith open('requirements.txt', 'r') as fp:\nreqs = [r for r in fp.read().splitlines() if (len(r) > 0 and not r.startswith(\"#\"))]\n\nwith open('README.rst') as readme:\nlong_description = readme.read()\n\n\nsetup(\nname='pyangbind',\n\n# PyangBind uses the same versioning approach as OpenConfig - see\n# http:\/\/www.openconfig.net\/file-cabinet\/Semantic_Versioning_for_OpenConfig.pdf?attredirects=0&d=1\nversion=pyangbind.__version__,\n\ndescription=\"PyangBind is a plugin for pyang which converts YANG data\" + \\\n\"models into a Python class hierarchy, such that Python \" + \\\n\"can be used to manipulate data that conforms with a YANG\" + \\\n\" model.\",\nlong_description=long_description,\n\nurl=\"https:\/\/github.com\/robshakir\/pyangbind\",\n\nauthor=\"Rob Shakir\",\nauthor_email=\"rjs@rob.sh\",\n\nlicense=\"Apache\",\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Telecommunications Industry',\n'Intended Audience :: Developers',\n'Topic :: Software Development :: Code Generators',\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n],\ninclude_package_data=True,\nkeywords=\"yang pyang\",\npackages=find_packages(exclude=[\"tests.*\", \"tests\"]),\ninstall_requires=reqs,\nzip_safe=False,\ntest_suite='tests.test_suite'\n)\n"
    },
    {
        "package_name": "PyAudio-0.2.12",
        "file_list": "CHANGELOG play_wave.py play_wave_callback.py play_wave_macosx_channelmap.py record.py system_info.py wire_callback.py wire_full.py wire_half.py INSTALL LICENSE.txt Makefile MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py conf.py examples.rst index.rst dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt pyaudio.py _portaudiomodule.c _portaudiomodule.h error_tests.py pyaudio_tests.py",
        "setup.py": "\"\"\"PyAudio: Cross-platform audio I\/O with PortAudio.\n\nPyAudio provides Python bindings for PortAudio, the cross-platform audio I\/O\nlibrary. With PyAudio, you can easily use Python to play and record audio on a\nvariety of platforms, such as GNU\/Linux, Microsoft Windows, and Apple macOS.\n\nPyAudio is distributed under the MIT License:\n\nCopyright (c) 2006 Hubert Pham\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\"\"\"\n\nimport os\nimport logging\nimport platform\nfrom setuptools import setup, Extension\nimport sys\n\n__version__ = \"0.2.12\"\n\n# setup.py\/setuptools will try to locate and link dynamically against portaudio,\n# except on Windows. On Windows, setup.py will attempt to statically link in\n# portaudio, since most users will install PyAudio from pre-compiled wheels.\n#\n# If you wish to compile PyAudio on Windows, use vcpkg to install portaudio with\n# either:\n# - vcpkg install portaudio (for dynamic linking)\n# - vcpkg install portaudio:x86-windows-static (for 32-bit static linking)\n# - vcpkg install portaudio:x64-windows-static (for 64-bit static linking)\n\nMAC_SYSROOT_PATH = os.environ.get(\"SYSROOT_PATH\", None)\nWIN_VCPKG_PATH = os.environ.get(\"VCPKG_PATH\", None)\n\ndef setup_extension():\npyaudio_module_sources = ['src\/_portaudiomodule.c']\ninclude_dirs = []\nexternal_libraries = [\"portaudio\"]\nexternal_libraries_path = []\nextra_compile_args = []\nextra_link_args = []\ndefines = []\n\nif sys.platform == 'darwin':\n# Support only dynamic linking with portaudio, since the supported path\n# is to install portaudio using a package manager (e.g., Homebrew).\n# TODO: let users pass in location of portaudio library on command line.\ndefines += [('MACOSX', '1')]\n\ninclude_dirs += ['\/usr\/local\/include', '\/usr\/include']\nexternal_libraries_path += ['\/usr\/local\/lib', '\/usr\/lib']\n\nif MAC_SYSROOT_PATH:\nextra_compile_args += [\"-isysroot\", MAC_SYSROOT_PATH]\nextra_link_args += [\"-isysroot\", MAC_SYSROOT_PATH]\nelif sys.platform == 'win32':\n# Only supports statically linking with portaudio, since the typical\n# way users install PyAudio on win32 is through pre-compiled wheels.\nbits = platform.architecture()[0]\nif '64' in bits:\ndefines.append(('MS_WIN64', '1'))\n\nif WIN_VCPKG_PATH:\ninclude_dirs += [os.path.join(WIN_VCPKG_PATH, 'include')]\nexternal_libraries_path = [os.path.join(WIN_VCPKG_PATH, 'lib')]\nelse:\n# If VCPKG_PATH is not set, it is likely a user oversight, as the\n# extension compiler likely won't be able to find the portaudio\n# library to link against.\nlogging.warning(\"Warning: VCPKG_PATH envrionment variable not set.\")\n# So if VCPKG_PATH is not set, be sure to manually add the correct\n# path to portaudio's include and lib dirs, or use setuptools\n# build_ext to specify them on the command line.\nexternal_libraries.remove(\"portaudio\")\n\n# The static portaudio lib does not include user32 and advapi32, so\n# those need to be linked manually.\nexternal_libraries += [\"user32\", \"Advapi32\"]\n# For static linking, use MT flag to match both vcpkg's portaudio and\n# the standard portaudio cmake settings. For details, see:\n# https:\/\/devblogs.microsoft.com\/cppblog\/vcpkg-updates-static-linking-is-now-available\/\nextra_compile_args += [\"\/MT\"]\nelse:\n# GNU\/Linux and other posix-like OSes will dynamically link to\n# portaudio, installed by the package manager.\ninclude_dirs += ['\/usr\/local\/include', '\/usr\/include']\nexternal_libraries_path += ['\/usr\/local\/lib', '\/usr\/lib']\n\nreturn Extension(\n'_portaudio',\nsources=pyaudio_module_sources,\ninclude_dirs=include_dirs,\ndefine_macros=defines,\nlibraries=external_libraries,\nextra_compile_args=extra_compile_args,\nextra_link_args=extra_link_args,\nlibrary_dirs=external_libraries_path)\n\n\nwith open('README.md', 'r') as fh:\nlong_description = fh.read()\n\n\nsetup(\nname='PyAudio',\nversion=__version__,\nauthor=\"Hubert Pham\",\nurl=\"https:\/\/people.csail.mit.edu\/hubert\/pyaudio\/\",\ndescription=\"Cross-platform audio I\/O with PortAudio\",\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nlicense=\"MIT\",\nscripts=[],\npy_modules=['pyaudio'],\npackage_dir={'': 'src'},\nextras_require={\n\"test\": [\"numpy\"],\n},\next_modules=[setup_extension()],\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python :: 3\",\n\"Topic :: Multimedia :: Sound\/Audio\"\n])\n"
    },
    {
        "package_name": "pybetter-0.4.1",
        "file_list": "LICENSE PKG-INFO cli.py improvements.py all_attribute.py base.py boolean_equality.py empty_fstring.py equals_none.py mutable_args.py nested_withs.py not_in.py not_is.py parenthesized_return.py unhashable_list.py __init__.py utils.py __init__.py __main__.py pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['pybetter', 'pybetter.transformers']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['click>8.0',\n'hypothesmith>=0.1.8,<0.2.0',\n'libcst>=0.4.1,<0.5.0',\n'pyemojify>=0.2.0,<0.3.0',\n'pygments>=2.5.2,<3.0.0']\n\nentry_points = \\\n{'console_scripts': ['pybetter = pybetter.cli:main']}\n\nsetup_kwargs = {\n'name': 'pybetter',\n'version': '0.4.1',\n'description': 'Tool for fixing trivial problems with your code.',\n'long_description': '# pybetter\\n![PyPI](https:\/\/img.shields.io\/pypi\/v\/pybetter) \\n![Downloads](https:\/\/img.shields.io\/pypi\/dm\/pybetter)\\n![Travis CI](https:\/\/img.shields.io\/travis\/com\/lensvol\/pybetter)\\n![Code coverage](https:\/\/img.shields.io\/codecov\/c\/github\/lensvol\/pybetter)\\n![PyPI - Python Version](https:\/\/img.shields.io\/pypi\/pyversions\/pybetter)\\n![License](https:\/\/img.shields.io\/github\/license\/lensvol\/pybetter)\\n[![Code style: black](https:\/\/img.shields.io\/badge\/code%20style-black-000000.svg)](https:\/\/github.com\/psf\/black)\\n\\nTool for fixing trivial problems with your code.\\n\\nOriginally intended as an example for my PyCon Belarus 2020 talk about [LibCST](https:\/\/github.com\/Instagram\/LibCST).\\n\\n## Usage\\n\\nSimply provide a valid Python source code file as one of the argument and it will try to fix any issues it could find.\\n\\n```\\nUsage: pybetter [OPTIONS] [PATHS]...\\n\\nOptions:\\n --noop Do not make any changes to the source files.\\n --diff Show diff-like output of the changes made.\\n --select CODES Apply only improvements with the provided codes.\\n --exclude CODES Exclude improvements with the provided codes.\\n --exit-code <CODE> Exit with provided code if fixes were applied.\\n --help Show this message and exit.\\n```\\n\\n\\n\\n## Example\\n\\n```shell\\n# cat test.py\\ndef f():\\n return (42, \"Hello, world\")\\n\\n# pybetter test.py\\n--> Processing \\'test.py\\'...\\n [+] (B003) Remove parentheses from the tuple in \\'return\\' statement.\\nAll done!\\n\\n# cat test.py\\ndef f():\\n return 42, \"Hello, world\"\\n\\n```\\n\\n\\n\\n## Available fixers\\n\\n* **B001: Replace \\'not A in B\\' with \\'A not in B\\'**\\n\\n Usage of `A not in B` over `not A in B` is recommended both by Google and [PEP-8](https:\/\/www.python.org\/dev\/peps\/pep-0008\/#programming-recommendations). Both of those forms are compiled to the same bytecode, but second form has some potential of confusion for the reader. \\n\\n ```python\\n # BEFORE:\\n if not 42 in counts:\\n sys.exit(-1)\\n \\n # AFTER:\\n if 42 not in counts:\\n sys.exit(-1)\\n ```\\n\\n \\n\\n* **B002: Default values for `kwargs` are mutable.**\\n\\n As described in [Common Gotchas](https:\/\/docs.python-guide.org\/writing\/gotchas\/#mutable-default-arguments) section of \"The Hitchhiker\\'s Guide to Python\", mutable arguments can be a tricky thing. This fixer replaces any default values that happen to be lists or dicts with **None** value, moving initialization from function definition into function body.\\n\\n ```python\\n # BEFORE\\n def p(a=[]):\\n print(a)\\n \\n # AFTER\\n def p(a=None):\\n if a is None:\\n a = []\\n \\n print(a)\\n ```\\n\\n Be warned, that this fix may break code which *intentionally* uses mutable default arguments (e.g. caching).\\n\\n* **B003: Remove parentheses from the tuple in \\'return\\' statement.**\\n\\n If you are returning a tuple from the function by implicitly constructing it, then additional parentheses around it are redundant.\\n\\n ```python\\n # BEFORE:\\n def hello():\\n return (\"World\", 42)\\n \\n # AFTER:\\n def hello():\\n return \"World\", 42\\n ```\\n\\n* **B004: `__all__` attribute is missing.**\\n\\n Regenerate missing `__all__` attribute, filling it with the list of top-level function and class names.\\n\\n *NB*: It will ignore any names starting with `_` to prevent any private members from ending up in the list.\\n \\n ```python\\n # BEFORE:\\n def hello():\\n return (\"World\", 42)\\n \\n class F:\\n pass\\n \\n # AFTER:\\n def hello():\\n return \"World\", 42\\n \\n class F:\\n pass\\n \\n __all__ = [\\n \"F\",\\n \"hello\",\\n ]\\n ```\\n \\n* **B005: Replace \"A == None\" with \"A is None\"**\\n\\n \"Comparisons to singletons like None should always be done with `is` or `is not`, never the equality operators.\" ([PEP8](https:\/\/www.python.org\/dev\/peps\/pep-0008\/))\\n\\n ```python\\n # BEFORE:\\n \\n if a == None:\\n pass\\n \\n # AFTER:\\n \\n if a is None:\\n pass\\n ```\\n \\n* **B006: Remove comparisons with either \\'False\\' or \\'True\\'.**\\n\\n [PEP8](https:\/\/www.python.org\/dev\/peps\/pep-0008\/) recommends that conditions should be evaluated without explicit equality comparison with `True`\/`False` singletons. In Python, every non-empty value is treated as `True` and vice versa,\\n\\n so in most cases those comparisons can be safely eliminated.\\n\\n *NB*: `is True` and `is False` checks are not affected, since they can be used to explicitly check for equality with a specific singleton, instead of using abovementioned \"non-empty\" heuristic.\\n\\n ```python\\n # BEFORE:\\n \\n if a == False or b == True or c == False == True:\\n pass\\n \\n # AFTER:\\n \\n if a or b or c:\\n pass\\n ```\\n \\n* **B007: Convert f-strings without expressions into regular strings.**\\n\\n It is wasteful to use f-string mechanism if there are no expressions to be extrapolated. \\n\\n ```python\\n # BEFORE:\\n a = f\"Hello, world\"\\n \\n # AFTER:\\n a = \"Hello, world\"\\n ```\\n\\n* **B008: Collapse nested `with` statements**\\n\\n Degenerate `with` statements can be rewritten as a single compound `with` statement, if following conditions are satisfied:\\n\\n * There are no statements between `with` statements being collapsed;\\n * Neither of `with` statements has any leading or inline comments.\\n\\n ```python\\n # BEFORE:\\n with a():\\n with b() as other_b:\\n print(\"Hello, world!\")\\n\\n # AFTER:\\n with a(), b() as other_b:\\n print(\"Hello, world!\")\\n ```\\n\\n* **B009: Replace unhashable list literals in set constructors**\\n\\n Lists cannot be used as elements of the sets due to them being mutable and hence \"unhashable\". We can fix the more trivial cases of list literals being used to create a set by converting them into tuples.\\n\\n ```python\\n # BEFORE:\\n a = {\\n [1, 2, 3],\\n }\\n b = set([[1, 2], [\"a\", \"b\"]])\\n c = frozenset([[1, 2], [\"a\", \"b\"]])\\n\\n # AFTER:\\n a = {\\n (1, 2, 3)\\n }\\n b = set([(1, 2), (\"a\", \"b\")])\\n c = frozenset([(1, 2), (\"a\", \"b\")])\\n ```\\n\\n* **B010: Replace \\'not A is B\\' with \\'A is not B\\'**\\n\\n Usage of `A is not B` over `not A is B` is recommended both by Google and [PEP-8](https:\/\/www.python.org\/dev\/peps\/pep-0008\/#programming-recommendations). Both of those forms are compiled to the same bytecode, but second form has some potential of confusion for the reader.\\n (thanks to @rs2 for submitting this!). \\n\\n ```python\\n # BEFORE:\\n if not obj is Record:\\n sys.exit(-1)\\n \\n # AFTER:\\n if obj is not Record:\\n sys.exit(-1)\\n ```\\n\\n**NB:** Each of the fixers can be disabled on per-line basis using [flake8\\'s \"noqa\" comments](http:\/\/flake8.pycqa.org\/en\/3.1.1\/user\/ignoring-errors.html#in-line-ignoring-errors).\\n\\n## Installation\\n\\n```shell script\\n# pip install pybetter\\n```\\n\\n## Getting started with development\\n\\n```shell script\\n# git clone https:\/\/github.com\/lensvol\/pybetter\\n# poetry install\\n```\\n\\n## License\\n\\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\\n\\n## Authors\\n\\n* **Kirill Borisov** ([lensvol@gmail.com](mailto:lensvol@gmail.com))\\n',\n'author': 'Kirill Borisov',\n'author_email': 'lensvol@gmail.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/lensvol\/pybetter',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'entry_points': entry_points,\n'python_requires': '>3.6',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "pybind11-2.10.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO commands.py attr.h buffer_info.h cast.h chrono.h common.h complex.h class.h common.h descr.h init.h internals.h typeid.h type_caster_base.h eigen.h embed.h eval.h functional.h gil.h iostream.h numpy.h operators.h options.h pybind11.h pytypes.h filesystem.h stl.h stl_bind.h py.typed setup_helpers.py FindPythonLibsNew.cmake pybind11Common.cmake pybind11Config.cmake pybind11ConfigVersion.cmake pybind11NewTools.cmake pybind11Targets.cmake pybind11Tools.cmake _version.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt pyproject.toml README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python3\n\n# Setup script (in the sdist or in tools\/setup_main.py in the repository)\n\nfrom setuptools import setup\n\ncmdclass = {}\n\n\nsetup(\nname=\"pybind11\",\nversion=\"2.10.0\",\ndownload_url='https:\/\/github.com\/pybind\/pybind11\/tarball\/v2.10.0',\npackages=[\n\"pybind11\",\n\"pybind11.include.pybind11\",\n\"pybind11.include.pybind11.detail\",\n\"pybind11.include.pybind11.stl\",\n\"pybind11.share.cmake.pybind11\",\n],\npackage_data={\n\"pybind11\": [\"py.typed\"],\n\"pybind11.include.pybind11\": [\"*.h\"],\n\"pybind11.include.pybind11.detail\": [\"*.h\"],\n\"pybind11.include.pybind11.stl\": [\"*.h\"],\n\"pybind11.share.cmake.pybind11\": [\"*.cmake\"],\n},\nextras_require={\n\"global\": [\"pybind11_global==2.10.0\"]\n},\nentry_points={\n\"console_scripts\": [\n\"pybind11-config = pybind11.__main__:main\",\n],\n\"pipx.run\": [\n\"pybind11 = pybind11.__main__:main\",\n]\n},\ncmdclass=cmdclass\n)\n"
    },
    {
        "package_name": "pybuildkite-1.2.1",
        "file_list": "LICENSE PKG-INFO agents.py annotations.py artifacts.py buildkite.py builds.py client.py decorators.py emojis.py exceptions.py jobs.py organizations.py pipelines.py teams.py users.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport setuptools\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nsetuptools.setup(\nname=\"pybuildkite\",\nversion=\"1.2.1\",\nurl=\"https:\/\/github.com\/pyasi\/pybuildkite\",\ndownload_url=\"https:\/\/github.com\/pyasi\/pybuildkite\/archive\/master.zip\",\nauthor=\"Peter Yasi\",\npackages=[\"pybuildkite\"],\ndescription=\"Python wrapper for the Buildkite API\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nkeywords=[\"Buildkite\", \"Continuos Integration\", \"API\", \"CI\", \"wrapper\", \"python\"],\ninstall_requires=[\"requests\"],\n)\n"
    },
    {
        "package_name": "pycodestyle-2.9.1",
        "file_list": "CHANGES.txt CONTRIBUTING.rst dev-requirements.txt advanced.rst api.rst conf.py developer.rst index.rst intro.rst make.bat Makefile LICENSE MANIFEST.in PKG-INFO dependency_links.txt entry_points.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt pycodestyle.py README.rst setup.cfg setup.py crlf.py E10.py E11.py E12.py E12not.py E20.py E21.py E22.py E23.py E24.py E25.py E26.py E27.py E30.py E30not.py E40.py E50.py E70.py E71.py E72.py E73.py E90.py latin-1.py noqa.py python3.py python310.py python311.py python35.py python38.py support.py test_all.py test_api.py test_blank_lines.py test_parser.py test_shell.py test_util.py utf-8-bom.py utf-8.py W19.py W29.py W39.py W60.py __init__.py",
        "setup.py": "from setuptools import setup\n\n\ndef get_version():\nwith open('pycodestyle.py') as f:\nfor line in f:\nif line.startswith('__version__'):\nreturn eval(line.split('=')[-1])\n\n\ndef get_long_description():\ndescr = []\nfor fname in 'README.rst', 'CHANGES.txt':\nwith open(fname) as f:\ndescr.append(f.read())\nreturn '\\n\\n'.join(descr)\n\n\nsetup(\nname='pycodestyle',\nversion=get_version(),\ndescription=\"Python style guide checker\",\nlong_description=get_long_description(),\nkeywords='pycodestyle, pep8, PEP 8, PEP-8, PEP8',\nauthor='Johann C. Rocholl',\nauthor_email='johann@rocholl.net',\nmaintainer='Ian Lee',\nmaintainer_email='IanLee1521@gmail.com',\nurl='https:\/\/pycodestyle.pycqa.org\/',\nlicense='Expat license',\npy_modules=['pycodestyle'],\ninclude_package_data=True,\nzip_safe=False,\npython_requires='>=3.6',\nentry_points={\n'console_scripts': [\n'pycodestyle = pycodestyle:_main',\n],\n},\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\nproject_urls={\n'Changes':\n'https:\/\/pycodestyle.pycqa.org\/en\/latest\/developer.html#changes',\n},\n)\n"
    },
    {
        "package_name": "pycodestyle_magic-0.5",
        "file_list": ".gitignore flake8.PNG pycodestyle.PNG LICENSE example flake8_magic.ipynb example pycodestyle_magic.ipynb PKG-INFO pycodestyle_magic.py pyproject.toml README.md setup.py test_flake8_magic.py test_pycodestyle_magic.py",
        "setup.py": "#!\/usr\/bin\/env python\n# setup.py generated by flit for tools that don't yet use PEP 517\n\nfrom distutils.core import setup\n\n\nsetup(name='pycodestyle_magic',\nversion='0.5',\ndescription='magic function that checks a cell for pep8 compliance, using pycodestyle',\nauthor='Mattijn van Hoek',\nauthor_email='mattijn@gmail.com',\nurl='https:\/\/github.com\/mattijn\/pycodestyle_magic',\npy_modules=['pycodestyle_magic'],\n)\n"
    },
    {
        "package_name": "pycoingecko-2.2.0",
        "file_list": "PKG-INFO api.py utils.py _version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "#from distutils.core import setup\nimport setuptools\n\nsetuptools.setup(\nname='pycoingecko',\nversion='2.2.0',\npackages=['pycoingecko',],\nlicense='MIT',\ndescription = 'Python wrapper around the CoinGecko API',\nlong_description=open('README.md').read(),\nlong_description_content_type=\"text\/markdown\",\nauthor = 'Christoforou Manolis',\nauthor_email = 'emchristoforou@gmail.com',\ninstall_requires=['requests'],\nurl = 'https:\/\/github.com\/man-c\/pycoingecko',\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 2\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n],\n)\n"
    },
    {
        "package_name": "pycountry-convert-0.7.2",
        "file_list": "AUTHORS.rst HISTORY.rst LICENSE MANIFEST.in PKG-INFO convert_continent_code_to_continent_name.py convert_countries.py convert_country_alpha2_to_continent_code.py country_mappings.py country_name_format.py country_wikipedia.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst requirements.txt setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\n# @namespace pycountry-convert\n#\n# Copyright (c) 2018 TUNE, Inc.\n# All rights reserved.\n#\n\nfrom __future__ import with_statement\n\n# To install the tune-mv-integration-python library, open a Terminal shell,\n# then run this file by typing:\n#\n# python setup.py install\n#\n\nimport sys\nimport re\nimport codecs\n\nfrom setuptools import setup\n\nREQUIREMENTS = [\nreq for req in open('requirements.txt')\n.read().split('\\n')\nif req != ''\n]\n\nPACKAGES = [\n'pycountry_convert'\n]\n\nTEST_REQUIREMENTS = ['pytest>=3.3.1', 'pytest-cov']\n\nwith open('pycountry_convert\/__init__.py', 'r') as fd:\nversion = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]', fd.read(), re.MULTILINE).group(1)\n\nif not version:\nraise RuntimeError('Cannot find version information')\n\nif len(sys.argv) < 2 or sys.argv[1] == 'version':\nprint(version)\nsys.exit()\n\nCLASSIFIERS = [\n# How mature is this project? Common values are\n# 3 - Alpha\n# 4 - Beta\n# 5 - Production\/Stable\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Operating System :: OS Independent',\n'Natural Language :: English',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.0',\n'Programming Language :: Python :: 3.1',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: Implementation :: PyPy'\n]\n\nwith codecs.open('README.rst', 'r', 'utf-8') as f:\nreadme = f.read()\nwith codecs.open('HISTORY.rst', 'r', 'utf-8') as f:\nhistory = f.read()\n\nsetup(\nname='pycountry-convert',\nversion=version,\ndescription='Extension of Python package pycountry providing conversion functions.',\nlong_description=readme + '\\n\\n' + history,\nauthor='TUNE Inc.',\nauthor_email='jefft@tune.com',\nurl='https:\/\/github.com\/TuneLab\/pycountry-convert',\ndownload_url='https:\/\/github.com\/TuneLab\/pycountry-convert\/archive\/v{0}.tar.gz'.format(version),\nkeywords=\"pycountry conversion tune\",\nlicense='MIT License',\nzip_safe=False,\ninstall_requires=REQUIREMENTS,\npackages=PACKAGES,\npackage_data={'': ['LICENSE']},\npackage_dir={'pycountry-convert': 'pycountry-convert'},\nsetup_requires=[\n'pytest-runner',\n],\ntests_require=TEST_REQUIREMENTS,\nclassifiers=CLASSIFIERS\n)\n"
    },
    {
        "package_name": "pycron-3.0.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nfrom setuptools import setup\n\nsetup(\nname='pycron',\nversion='3.0.0',\ndescription='Simple cron-like parser, which determines if current datetime matches conditions.',\nauthor='Kimmo Huoman',\nauthor_email='kipenroskaposti@gmail.com',\nlicense='MIT',\nkeywords='cron parser',\nurl='https:\/\/github.com\/kipe\/pycron',\npackages=[\n'pycron',\n],\npython_requires='>=3.5',\ntests_require=[\n\"arrow>=0.12.0\",\n\"coverage>=4.4.2\",\n\"coveralls>=1.2.0\",\n\"Delorean>=0.6.0\",\n\"nose>=1.0\",\n\"pendulum>=1.3.2\",\n\"pytz>=2017.3\",\n\"udatetime>=0.0.14\"\n]\n)\n"
    },
    {
        "package_name": "pyexcel-io-0.6.6",
        "file_list": "CHANGELOG.rst CONTRIBUTORS.rst make.bat Makefile pyexcel_io.get_data.rst pyexcel_io.iget_data.rst pyexcel_io.save_data.rst common_parameters.rst conf.py csvz.rst django.rst extendedcsv.rst extensions.rst index.rst pagination.rst plaincsv.rst pyinstaller.rst renderer.rst sqlalchemy.rst theme_overrides.css LICENSE Makefile MANIFEST.in PKG-INFO book.py constants.py common.py django.py queryset.py sqlalchemy.py __init__.py django.py sqlalchemy.py __init__.py querysets.py __init__.py exceptions.py io.py manager.py plugins.py abstract_reader.py abstract_sheet.py abstract_writer.py __init__.py reader.py csvz.py csv_content.py csv_in_file.py csv_in_memory.py csv_sheet.py __init__.py service.py sheet.py utils.py writer.py csvz_sheet.py csvz_writer.py csv_in_file.py csv_in_memory.py csv_sheet.py __init__.py _compact.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst setup.cfg setup.py test.sh csv-encoding-utf16.csv force_file_type.txt issue20.csv issue23.csv test.csv requirements.txt test_base.py test_book.py test_csv_book.py test_django_book.py test_filter.py test_io.py test_issues.py test_new_csvz_book.py test_new_csv_book.py test_plugin_api.py test_pyexcel_integration.py test_renderer.py test_service.py test_sheet.py test_sql_book.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python3\n\n\"\"\"\nTemplate by pypi-mobans\n\"\"\"\n\nimport os\nimport sys\nimport codecs\nimport locale\nimport platform\nfrom shutil import rmtree\n\nfrom setuptools import Command, setup, find_packages\n\nPY2 = sys.version_info[0] == 2\nPY26 = PY2 and sys.version_info[1] < 7\nPY33 = sys.version_info < (3, 4)\n\n# Work around mbcs bug in distutils.\n# http:\/\/bugs.python.org\/issue10945\n# This work around is only if a project supports Python < 3.4\n\n# Work around for locale not being set\ntry:\nlc = locale.getlocale()\npf = platform.system()\nif pf != \"Windows\" and lc == (None, None):\nlocale.setlocale(locale.LC_ALL, \"C.UTF-8\")\nexcept (ValueError, UnicodeError, locale.Error):\nlocale.setlocale(locale.LC_ALL, \"en_US.UTF-8\")\n\nNAME = \"pyexcel-io\"\nAUTHOR = \"C.W.\"\nVERSION = \"0.6.6\"\nEMAIL = \"info@pyexcel.org\"\nLICENSE = \"New BSD\"\nDESCRIPTION = (\n\"A python library to read and write structured data in csv, zipped csv\" +\n\"format and to\/from databases\"\n)\nURL = \"https:\/\/github.com\/pyexcel\/pyexcel-io\"\nDOWNLOAD_URL = \"%s\/archive\/0.6.6.tar.gz\" % URL\nFILES = [\"README.rst\", \"CHANGELOG.rst\"]\nKEYWORDS = [\n\"python\",\n\"API\",\n\"tsv\",\n\"tsvz\",\n\"csv\",\n\"csvz\",\n\"django\",\n\"sqlalchemy\",\n]\n\nCLASSIFIERS = [\n\"Topic :: Software Development :: Libraries\",\n\"Programming Language :: Python\",\n\"Intended Audience :: Developers\",\n\n\"Programming Language :: Python :: 3 :: Only\",\n\n\n\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\n'License :: OSI Approved :: BSD License',\n'Programming Language :: Python :: Implementation :: PyPy'\n]\n\nPYTHON_REQUIRES = \">=3.6\"\n\nINSTALL_REQUIRES = [\n\"lml>=0.0.4\",\n]\nSETUP_COMMANDS = {}\n\nPACKAGES = find_packages(exclude=[\"ez_setup\", \"examples\", \"tests\", \"tests.*\"])\nEXTRAS_REQUIRE = {\n\"xls\": ['pyexcel-xls>=0.6.0'],\n\"xlsx\": ['pyexcel-xlsx>=0.6.0'],\n\"ods\": ['pyexcel-ods3>=0.6.0'],\n}\n# You do not need to read beyond this line\nPUBLISH_COMMAND = \"{0} setup.py sdist bdist_wheel upload -r pypi\".format(sys.executable)\nHERE = os.path.abspath(os.path.dirname(__file__))\n\nGS_COMMAND = (\"gease pyexcel-io v0.6.6 \" +\n\"Find 0.6.6 in changelog for more details\")\nNO_GS_MESSAGE = (\"Automatic github release is disabled. \" +\n\"Please install gease to enable it.\")\nUPLOAD_FAILED_MSG = (\n'Upload failed. please run \"%s\" yourself.' % PUBLISH_COMMAND)\n\n\nclass PublishCommand(Command):\n\"\"\"Support setup.py upload.\"\"\"\n\ndescription = \"Build and publish the package on github and pypi\"\nuser_options = []\n\n@staticmethod\ndef status(s):\n\"\"\"Prints things in bold.\"\"\"\nprint(\"\\033[1m{0}\\033[0m\".format(s))\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\ntry:\nself.status(\"Removing previous builds...\")\nrmtree(os.path.join(HERE, \"dist\"))\nrmtree(os.path.join(HERE, \"build\"))\nrmtree(os.path.join(HERE, \"pyexcel_io.egg-info\"))\nexcept OSError:\npass\n\nself.status(\"Building Source and Wheel (universal) distribution...\")\nrun_status = True\nif has_gease():\nrun_status = os.system(GS_COMMAND) == 0\nelse:\nself.status(NO_GS_MESSAGE)\nif run_status:\nif os.system(PUBLISH_COMMAND) != 0:\nself.status(UPLOAD_FAILED_MSG)\n\nsys.exit()\n\n\nSETUP_COMMANDS.update({\n\"publish\": PublishCommand\n})\n\ndef has_gease():\n\"\"\"\ntest if github release command is installed\n\nvisit http:\/\/github.com\/moremoban\/gease for more info\n\"\"\"\ntry:\nimport gease # noqa\nreturn True\nexcept ImportError:\nreturn False\n\n\ndef read_files(*files):\n\"\"\"Read files into setup\"\"\"\ntext = \"\"\nfor single_file in files:\ncontent = read(single_file)\ntext = text + content + \"\\n\"\nreturn text\n\n\ndef read(afile):\n\"\"\"Read a file into setup\"\"\"\nthe_relative_file = os.path.join(HERE, afile)\nwith codecs.open(the_relative_file, \"r\", \"utf-8\") as opened_file:\ncontent = filter_out_test_code(opened_file)\ncontent = \"\".join(list(content))\nreturn content\n\n\ndef filter_out_test_code(file_handle):\nfound_test_code = False\nfor line in file_handle.readlines():\nif line.startswith(\".. testcode:\"):\nfound_test_code = True\ncontinue\nif found_test_code is True:\nif line.startswith(\" \"):\ncontinue\nelse:\nempty_line = line.strip()\nif len(empty_line) == 0:\ncontinue\nelse:\nfound_test_code = False\nyield line\nelse:\nfor keyword in [\"|version|\", \"|today|\"]:\nif keyword in line:\nbreak\nelse:\nyield line\n\n\nif __name__ == \"__main__\":\nsetup(\ntest_suite=\"tests\",\nname=NAME,\nauthor=AUTHOR,\nversion=VERSION,\nauthor_email=EMAIL,\ndescription=DESCRIPTION,\nurl=URL,\ndownload_url=DOWNLOAD_URL,\nlong_description=read_files(*FILES),\nlicense=LICENSE,\nkeywords=KEYWORDS,\npython_requires=PYTHON_REQUIRES,\nextras_require=EXTRAS_REQUIRE,\ntests_require=[\"nose\"],\ninstall_requires=INSTALL_REQUIRES,\npackages=PACKAGES,\ninclude_package_data=True,\nzip_safe=False,\nclassifiers=CLASSIFIERS,\ncmdclass=SETUP_COMMANDS\n)\n"
    },
    {
        "package_name": "pyfakefs-4.6.3",
        "file_list": "bug_report.md feature_request.md builddocs.yml Dockerfile_centos Dockerfile_debian Dockerfile_fedora Dockerfile_ubuntu dockertests.yml pythonpackage.yml run_pytest.sh .gitignore CHANGES.md CONTRIBUTING.md COPYING Dockerfile api.rst autopatch.rst conf.py index.rst intro.rst make.bat Makefile modules.rst pyfakefs.css theme.conf usage.rst extra_requirements.txt MANIFEST.in mypy.ini PKG-INFO deprecator.py extra_packages.py fake_filesystem.py fake_filesystem_shutil.py fake_filesystem_unittest.py fake_pathlib.py fake_scandir.py helpers.py mox3_stubout.py patched_packages.py pytest_plugin.py conftest.py example.py pytest_check_failed_plugin_test.py pytest_doctest_test.py pytest_fixture_param_test.py pytest_fixture_test.py pytest_plugin_failing_helper.py pytest_plugin_test.py __init__.py all_tests.py all_tests_without_extra_packages.py dynamic_patch_test.py example.py example_test.py fake_filesystem_glob_test.py fake_filesystem_shutil_test.py fake_filesystem_test.py fake_filesystem_unittest_test.py fake_filesystem_vs_real_test.py fake_open_test.py fake_os_test.py fake_pathlib_test.py fake_stat_time_test.py fake_tempfile_test.py config_module.py deprecated_property.py excel_test.xlsx module_with_attributes.py __init__.py import_as_example.py logsio.py mox3_stubout_example.py mox3_stubout_test.py patched_packages_test.py performance_test.py test_utils.py __init__.py _version.py __init__.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt README.md requirements.txt setup.cfg setup.py tox.ini",
        "setup.py": "#! \/usr\/bin\/env python\n\n# Copyright 2009 Google Inc. All Rights Reserved.\n# Copyright 2014 Altera Corporation. All Rights Reserved.\n# Copyright 2014-2018 John McGehee\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport os\nfrom typing import List\n\nfrom setuptools import setup, find_packages\n\nfrom pyfakefs import __version__\n\nNAME = 'pyfakefs'\nREQUIRES: List[str] = []\nDESCRIPTION = ('pyfakefs implements a fake file system that mocks '\n'the Python file system modules.')\n\nURL = \"http:\/\/pyfakefs.org\"\n\nBASE_PATH = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(BASE_PATH, 'README.md')) as f:\nLONG_DESCRIPTION = f.read()\n\nCLASSIFIERS = [\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n\"Programming Language :: Python :: 3\",\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: 3.11',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Operating System :: POSIX',\n'Operating System :: MacOS',\n'Operating System :: Microsoft :: Windows',\n'Topic :: Software Development :: Libraries',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Software Development :: Testing',\n'Topic :: System :: Filesystems',\n'Framework :: Pytest',\n]\n\nAUTHOR = 'Google'\nAUTHOR_EMAIL = 'google-pyfakefs@google.com'\nMAINTAINER = 'John McGehee'\nMAINTAINER_EMAIL = 'pyfakefs@johnnado.com'\nKEYWORDS = (\"testing test file os shutil glob mocking unittest \"\n\"fakes filesystem unit\").split(' ')\n\nparams = dict(\nname=NAME,\nentry_points={\n'pytest11': ['pytest_fakefs = pyfakefs.pytest_plugin'],\n},\nversion=__version__,\ninstall_requires=REQUIRES,\n\n# metadata for upload to PyPI\nauthor=AUTHOR,\nauthor_email=AUTHOR_EMAIL,\nmaintainer=MAINTAINER,\nmaintainer_email=MAINTAINER_EMAIL,\nlicense='http:\/\/www.apache.org\/licenses\/LICENSE-2.0',\ndescription=DESCRIPTION,\nlong_description=LONG_DESCRIPTION,\nlong_description_content_type='text\/markdown',\nkeywords=KEYWORDS,\nurl=URL,\nclassifiers=CLASSIFIERS,\npython_requires='>=3.6',\ntest_suite='pyfakefs.tests',\npackages=find_packages(exclude=['docs'])\n)\n\nsetup(**params)\n"
    },
    {
        "package_name": "pyfarmhash-0.3.2",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py farmhash.cc farmhash.h dependency_links.txt PKG-INFO SOURCES.txt top_level.txt python-farmhash.cc python-farmhash.h",
        "setup.py": "#!\/usr\/bin\/env python\n\n\nfrom setuptools import setup, find_packages, Extension\n\nVERSION = (0, 3, 2)\n\nsetup(\nname='pyfarmhash',\nversion=\".\".join([str(x) for x in VERSION]),\nkeywords=['farmhash', 'google'],\ndescription=\"Google FarmHash Bindings for Python\",\nlong_description=open('README.md', 'r', encoding='utf8').read(),\nlong_description_content_type='text\/markdown',\nauthor='Veelion Chong',\nauthor_email='veelion@gmail.com',\nurl='https:\/\/github.com\/veelion\/python-farmhash',\npackages=find_packages('src'),\npackage_dir={'': 'src'},\next_modules=[\nExtension('farmhash', [\n'src\/farmhash.cc',\n'src\/python-farmhash.cc'\n], extra_compile_args=[\"-O4\"])\n],\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'License :: OSI Approved :: MIT License',\n'Intended Audience :: Developers',\n'Programming Language :: C',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n],\n)\n"
    },
    {
        "package_name": "pyfiglet-0.8.post1",
        "file_list": "figfont.txt pyfiglet.1 LICENSE MANIFEST.in PKG-INFO 1943____.flf 3-d.flf 3x5.flf 4x4_offr.flf 5lineoblique.flf 5x7.flf 5x8.flf 64f1____.flf 6x10.flf 6x9.flf acrobatic.flf advenger.flf alligator.flf alligator2.flf alphabet.flf aquaplan.flf arrows.flf ascii___.flf asc_____.flf assalt_m.flf asslt__m.flf atc_gran.flf atc_____.flf avatar.flf a_zooloo.flf banner.flf banner3-D.flf banner3.flf banner4.flf barbwire.flf basic.flf battlesh.flf battle_s.flf baz__bil.flf beer_pub.flf bell.flf big.flf bigchief.flf binary.flf block.flf brite.flf briteb.flf britebi.flf britei.flf broadway.flf bubble.flf bubble_b.flf bubble__.flf bulbhead.flf b_m__200.flf c1______.flf c2______.flf calgphy2.flf caligraphy.flf catwalk.flf caus_in_.flf char1___.flf char2___.flf char3___.flf char4___.flf charact1.flf charact2.flf charact3.flf charact4.flf charact5.flf charact6.flf characte.flf charset_.flf chartr.flf chartri.flf chunky.flf clb6x10.flf clb8x10.flf clb8x8.flf cli8x8.flf clr4x6.flf clr5x10.flf clr5x6.flf clr5x8.flf clr6x10.flf clr6x6.flf clr6x8.flf clr7x10.flf clr7x8.flf clr8x10.flf clr8x8.flf coil_cop.flf coinstak.flf colossal.flf computer.flf com_sen_.flf contessa.flf contrast.flf convoy__.flf cosmic.flf cosmike.flf cour.flf courb.flf courbi.flf couri.flf crawford.flf cricket.flf cursive.flf cyberlarge.flf cybermedium.flf cybersmall.flf c_ascii_.flf c_consen.flf dcs_bfmo.flf decimal.flf deep_str.flf defleppard.flf demo_1__.flf demo_2__.flf demo_m__.flf devilish.flf diamond.flf digital.flf doh.flf doom.flf dotmatrix.flf double.flf drpepper.flf druid___.flf dwhistled.flf d_dragon.flf ebbs_1__.flf ebbs_2__.flf eca_____.flf eftichess.flf eftifont.flf eftipiti.flf eftirobot.flf eftitalic.flf eftiwall.flf eftiwater.flf epic.flf etcrvs__.flf e__fist_.flf f15_____.flf faces_of.flf fairligh.flf fair_mea.flf fantasy_.flf fbr12___.flf fbr1____.flf fbr2____.flf fbr_stri.flf fbr_tilt.flf fender.flf finalass.flf fireing_.flf flyn_sh.flf fourtops.flf fp1_____.flf fp2_____.flf fraktur.flf funky_dr.flf future_1.flf future_2.flf future_3.flf future_4.flf future_5.flf future_6.flf future_7.flf future_8.flf fuzzy.flf gauntlet.flf ghost_bo.flf goofy.flf gothic.flf gothic__.flf graceful.flf gradient.flf graffiti.flf grand_pr.flf greek.flf green_be.flf hades___.flf heavy_me.flf helv.flf helvb.flf helvbi.flf helvi.flf heroboti.flf hex.flf high_noo.flf hills___.flf hollywood.flf home_pak.flf house_of.flf hypa_bal.flf hyper___.flf inc_raw_.flf invita.flf isometric1.flf isometric2.flf isometric3.flf isometric4.flf italic.flf italics_.flf ivrit.flf jazmine.flf jerusalem.flf joust___.flf katakana.flf kban.flf kgames_i.flf kik_star.flf krak_out.flf larry3d.flf lazy_jon.flf lcd.flf lean.flf letters.flf letterw3.flf letter_w.flf lexible_.flf linux.flf lockergnome.flf lower.flc madrid.flf mad_nurs.flf magic_ma.flf marquee.flf master_o.flf maxfour.flf mayhem_d.flf mcg_____.flf mig_ally.flf mike.flf mini.flf mirror.flf mnemonic.flf modern__.flf morse.flf moscow.flf mshebrew210.flf nancyj-fancy.flf nancyj-underlined.flf nancyj.flf new_asci.flf nfi1____.flf nipples.flf notie_ca.flf npn_____.flf ntgreek.flf null.flc nvscript.flf o8.flf octal.flf odel_lak.flf ogre.flf ok_beer_.flf os2.flf outrun__.flf pacos_pe.flf panther_.flf pawn_ins.flf pawp.flf peaks.flf pebbles.flf pepper.flf phonix__.flf platoon2.flf platoon_.flf pod_____.flf poison.flf puffy.flf pyramid.flf p_skateb.flf p_s_h_m_.flf r2-d2___.flf radical_.flf rad_phan.flf rad_____.flf rainbow_.flf rally_s2.flf rally_sp.flf rampage_.flf rastan__.flf raw_recu.flf rci_____.flf rectangles.flf relief.flf relief2.flf rev.flf ripper!_.flf road_rai.flf rockbox_.flf rok_____.flf roman.flf roman___.flf rot13.flc rot13.flf rounded.flf rowancap.flf rozzo.flf runic.flf runyc.flf sans.flf sansb.flf sansbi.flf sansi.flf sblood.flf sbook.flf sbookb.flf sbookbi.flf sbooki.flf script.flf script__.flf serifcap.flf shadow.flf shimrod.flf short.flf skateord.flf skateroc.flf skate_ro.flf sketch_s.flf slant.flf slide.flf slscript.flf small.flf smisome1.flf smkeyboard.flf smscript.flf smshadow.flf smslant.flf smtengwar.flf sm______.flf space_op.flf spc_demo.flf speed.flf stacey.flf stampatello.flf standard.flf starwars.flf star_war.flf stealth_.flf stellar.flf stencil1.flf stencil2.flf stop.flf straight.flf street_s.flf subteran.flf super_te.flf tanja.flf tav1____.flf taxi____.flf tec1____.flf tecrvs__.flf tec_7000.flf tengwar.flf term.flf thick.flf thin.flf threepoint.flf ticks.flf ticksslant.flf tiles.flf times.flf timesofl.flf tinker-toy.flf ti_pan__.flf tomahawk.flf tombstone.flf top_duck.flf trashman.flf trek.flf triad_st.flf ts1_____.flf tsalagi.flf tsm_____.flf tsn_base.flf tty.flf ttyb.flf tubular.flf twin_cob.flf twopoint.flf type_set.flf t__of_ap.flf ucf_fan_.flf ugalympi.flf unarmed_.flf univers.flf upper.flc usaflag.flf usa_pq__.flf usa_____.flf utopia.flf utopiab.flf utopiabi.flf utopiai.flf vortron_.flf war_of_w.flf wavy.flf weird.flf whimsy.flf xbrite.flf xbriteb.flf xbritebi.flf xbritei.flf xchartr.flf xchartri.flf xcour.flf xcourb.flf xcourbi.flf xcouri.flf xhelv.flf xhelvb.flf xhelvbi.flf xhelvi.flf xsans.flf xsansb.flf xsansbi.flf xsansi.flf xsbook.flf xsbookb.flf xsbookbi.flf xsbooki.flf xtimes.flf xtty.flf xttyb.flf yie-ar__.flf yie_ar_k.flf z-pilot_.flf zig_zag_.flf zone7___.flf __init__.py test.py version.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt README setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom setuptools import setup\nimport sys\n\n\ndef get_version():\nsys.path.insert(0, 'pyfiglet')\nfrom version import __version__\nsys.path.pop(0)\nreturn __version__\n\nsetup(\nname='pyfiglet',\nversion=get_version(),\ndescription='Pure-python FIGlet implementation',\nlicense='MIT',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n# For Katakana\n'Natural Language :: Japanese',\n# For Cyrillic\n'Natural Language :: Bulgarian',\n'Natural Language :: Bosnian',\n'Natural Language :: Macedonian',\n'Natural Language :: Russian',\n'Natural Language :: Serbian',\n'Operating System :: Unix',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.1',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Topic :: Text Processing',\n'Topic :: Text Processing :: Fonts',\n],\nauthor='Peter Waller (Thanks to Christopher Jones and Stefano Rivera)',\nauthor_email='p@pwaller.net',\nurl='https:\/\/github.com\/pwaller\/pyfiglet',\npackages=['pyfiglet', 'pyfiglet.fonts'],\npackage_data={'pyfiglet.fonts': ['*.flf', '*.flc']},\nentry_points={\n'console_scripts': [\n'pyfiglet = pyfiglet:main',\n],\n}\n)\n"
    },
    {
        "package_name": "pygame-2.1.2",
        "file_list": "bundle_docs.py conanfile.txt README.md config.py config_conan.py config_darwin.py config_msys2.py config_unix.py config_win.py download_msys2_prebuilt.py download_win_prebuilt.py build_mac_deps.sh clean_usr_local.sh install_mac_deps.py install_mac_deps.sh README.rst Makefile makeref.py MANIFEST.in msysio.py scale_mmx.obj scale_mmx.obj .flake8 bufferproxy.pyi camera.pyi color.pyi constants.pyi cursors.pyi display.pyi draw.pyi event.pyi fastevent.pyi font.pyi freetype.pyi gfxdraw.pyi image.pyi joystick.pyi key.pyi mask.pyi math.pyi midi.pyi mixer.pyi mouse.pyi music.pyi pixelarray.pyi pixelcopy.pyi py.typed rect.pyi scrap.pyi sndarray.pyi sprite.pyi surface.pyi surfarray.pyi time.pyi transform.pyi version.pyi _common.pyi controller.pyi touch.pyi video.pyi __init__.pyi __init__.pyi Setup.Android.SDL2.in Setup.SDL2.in Setup_Darwin.in Setup_Unix.in Setup_Win_Camera.in Setup_Win_Common.in setup_win_common.py version.py.in vstools.py __init__.py __main__.py config.cpython-38.pyc config_unix.cpython-38.pyc msysio.cpython-38.pyc __init__.cpython-38.pyc .buildinfo base.html bufferproxy.html cdrom.html color.html display.html event.html freetype.html mixer.html rect.html rwobject.html slots.html surface.html surflock.html version.html c_api.html base.doctree bufferproxy.doctree cdrom.doctree color.doctree display.doctree event.doctree freetype.doctree mixer.doctree rect.doctree rwobject.doctree slots.doctree surface.doctree surflock.doctree version.doctree c_api.doctree environment.pickle filepaths.doctree index.doctree bufferproxy.doctree camera.doctree cdrom.doctree color.doctree color_list.doctree cursors.doctree display.doctree draw.doctree event.doctree examples.doctree fastevent.doctree font.doctree freetype.doctree gfxdraw.doctree image.doctree joystick.doctree key.doctree locals.doctree mask.doctree math.doctree midi.doctree mixer.doctree mouse.doctree music.doctree overlay.doctree pixelarray.doctree pixelcopy.doctree pygame.doctree rect.doctree scrap.doctree sdl2_controller.doctree sdl2_video.doctree sndarray.doctree sprite.doctree surface.doctree surfarray.doctree tests.doctree time.doctree touch.doctree transform.doctree CameraIntro.doctree chimp.py.doctree ChimpLineByLine.doctree DisplayModes.doctree introduction.doctree Basic TEMPLATE and OUTPUT.doct Basic PROCESS.doctree Basic INPUT.doctree Advanced OUTPUT with Advanced PROC Advanced INPUT with Advanced OUTP Advanced OUTPUT and plus alpha Epilog.doctree ImportInit.doctree __.doctree __ ____ __.doctree __ __.doctree __ __.doctree __ __ ___ __ __.doctree __ __ ___ __ __.doctree __ __ ___ __ _.doctree ____.doctree overview.doctree MakeGames.doctree MoveIt.doctree newbieguide.doctree PygameIntro.doctree SpriteIntro.doctree SurfarrayIntro.doctree tom_games2.doctree tom_games3.doctree tom_games4.doctree tom_games5.doctree tom_games6.doctree filepaths.html genindex.html index.html objects.inv py-modindex.html bufferproxy.html camera.html cdrom.html color.html color_list.html cursors.html display.html draw.html event.html examples.html fastevent.html font.html freetype.html gfxdraw.html image.html joystick.html key.html locals.html mask.html math.html midi.html mixer.html mouse.html music.html overlay.html pixelarray.html pixelcopy.html pygame.html rect.html scrap.html sdl2_controller.html sdl2_video.html sndarray.html sprite.html surface.html surfarray.html tests.html time.html touch.html transform.html search.html searchindex.js CameraIntro.html chimp.py.html ChimpLineByLine.html DisplayModes.html introduction.html Basic TEMPLATE and OUTPUT.html Basic PROCESS.html Basic INPUT.html Advanced OUTPUT with Advanced PROCESS.html Advanced INPUT with Advanced OUTPUT.html Advanced OUTPUT and plus alpha.html Epilog.html ImportInit.html __.html __ ____ __.html __ __.html __ __.html __ __ ___ __ __.html __ __ ___ __ __.html __ __ ___ __ _.html ____.html overview.html MakeGames.html MoveIt.html newbieguide.html PygameIntro.html SpriteIntro.html SurfarrayIntro.html tom_games2.html tom_games3.html tom_games4.html tom_games5.html tom_games6.html AdvancedInputOutput1.gif AdvancedInputOutput11.gif AdvancedInputOutput2.gif AdvancedInputOutput21.gif AdvancedInputOutput3.gif AdvancedInputOutput31.gif AdvancedInputOutput4.gif AdvancedInputOutput41.gif AdvancedInputOutput5.gif AdvancedInputOutput51.gif AdvancedOutputAlpha1.gif AdvancedOutputAlpha11.gif AdvancedOutputAlpha2.gif AdvancedOutputAlpha21.gif AdvancedOutputAlpha3.gif AdvancedOutputAlpha31.gif AdvancedOutputProcess1.gif AdvancedOutputProcess11.gif AdvancedOutputProcess2.gif AdvancedOutputProcess21.gif AdvancedOutputProcess3.gif AdvancedOutputProcess31.gif AdvancedOutputProcess4.gif AdvancedOutputProcess41.gif AdvancedOutputProcess5.gif AdvancedOutputProcess51.gif AdvancedOutputProcess6.gif AdvancedOutputProcess61.gif Bagic-INPUT-resultscreen.png Bagic-INPUT-resultscreen1.png Bagic-INPUT-sourcecode.png Bagic-INPUT-sourcecode1.png Bagic-ouput-result-screen.png Bagic-ouput-result-screen1.png Bagic-PROCESS-resultscreen.png Bagic-PROCESS-resultscreen1.png Bagic-PROCESS-sourcecode.png Bagic-PROCESS-sourcecode1.png Basic-ouput-sourcecode.png Basic-ouput-sourcecode1.png camera_average.jpg camera_background.jpg camera_green.jpg camera_hsv.jpg camera_mask.jpg camera_rgb.jpg camera_thresh.jpg camera_thresholded.jpg camera_yuv.jpg chimpshot.gif draw_module_example.png introduction-Battleship.png introduction-Battleship1.png introduction-PuyoPuyo.png introduction-PuyoPuyo1.png introduction-TPS.png introduction-TPS1.png intro_ball.gif intro_blade.jpg intro_freedom.jpg joystick_calls.png surfarray_allblack.png surfarray_flipped.png surfarray_redimg.png surfarray_rgbarray.png surfarray_scaledown.png surfarray_scaleup.png surfarray_soften.png surfarray_striped.png surfarray_xfade.png tom_basic.png tom_event-flowchart.png tom_formulae.png tom_radians.png base.rst.txt bufferproxy.rst.txt cdrom.rst.txt color.rst.txt display.rst.txt event.rst.txt freetype.rst.txt mixer.rst.txt rect.rst.txt rwobject.rst.txt slots.rst.txt surface.rst.txt surflock.rst.txt version.rst.txt c_api.rst.txt filepaths.rst.txt index.rst.txt bufferproxy.rst.txt camera.rst.txt cdrom.rst.txt color.rst.txt color_list.rst.txt cursors.rst.txt display.rst.txt draw.rst.txt event.rst.txt examples.rst.txt fastevent.rst.txt font.rst.txt freetype.rst.txt gfxdraw.rst.txt image.rst.txt joystick.rst.txt key.rst.txt locals.rst.txt mask.rst.txt math.rst.txt midi.rst.txt mixer.rst.txt mouse.rst.txt music.rst.txt overlay.rst.txt pixelarray.rst.txt pixelcopy.rst.txt pygame.rst.txt rect.rst.txt scrap.rst.txt sdl2_controller.rst.txt sdl2_video.rst.txt sndarray.rst.txt sprite.rst.txt surface.rst.txt surfarray.rst.txt tests.rst.txt time.rst.txt touch.rst.txt transform.rst.txt CameraIntro.rst.txt chimp.py.rst.txt ChimpLineByLine.rst.txt DisplayModes.rst.txt introduction.rst.txt Basic TEMPLATE and OUTPUT.rst. Basic PROCESS.rst.txt Basic INPUT.rst.txt Advanced OUTPUT with Advanced PROC Advanced INPUT with Advanced OUTP Advanced OUTPUT and plus alpha Epilog.rst.txt ImportInit.rst.txt __.rst.txt __ ____ __.rst.txt __ __.rst.txt __ __.rst.txt __ __ ___ __ __.rst.txt __ __ ___ __ __.rst.txt __ __ ___ __ _.rst.txt ____.rst.txt overview.rst.txt MakeGames.rst.txt MoveIt.rst.txt newbieguide.rst.txt PygameIntro.rst.txt SpriteIntro.rst.txt SurfarrayIntro.rst.txt tom_games2.rst.txt tom_games3.rst.txt tom_games4.rst.txt tom_games5.rst.txt tom_games6.rst.txt basic.css doctools.js documentation_options.js file.png jquery-3.5.1.js jquery.js language_data.js minus.png plus.png pygame.css pygame.ico pygame_tiny.png pygments.css reset.css searchtools.js tooltip.css underscore-1.13.1.js underscore.js legacy_logos.zip LGPL.txt LICENSE.FLAC.txt LICENSE.fluidsynth.txt LICENSE.freetype.txt LICENSE.jpeg.txt LICENSE.modplug.txt LICENSE.mpg123.txt LICENSE.numpy.txt LICENSE.ogg-vorbis.txt LICENSE.opus.txt LICENSE.opusfile.txt LICENSE.png.txt LICENSE.portmidi.txt LICENSE.sdl2.txt LICENSE.sdl2_image.txt LICENSE.sdl2_mixer.txt LICENSE.sdl_gfx.txt LICENSE.sse2neon-h.txt LICENSE.tiff.txt LICENSE.webp.txt LICENSE.zlib.txt logos.html pygame_lofi.png pygame_lofi.svg pygame_logo.png pygame_logo.svg pygame_powered.png pygame_powered.svg pygame_tiny.png README.md common.txt conf.py base.rst bufferproxy.rst cdrom.rst color.rst display.rst event.rst freetype.rst mixer.rst rect.rst rwobject.rst slots.rst surface.rst surflock.rst version.rst c_api.rst boilerplate.py customversion.py edit_on_github.py headers.py indexer.py utils.py boilerplate.cpython-38.pyc customversion.cpython-38.pyc edit_on_github.cpython-38.pyc headers.cpython-38.pyc indexer.cpython-38.pyc utils.cpython-38.pyc filepaths.rst index.rst bufferproxy.rst camera.rst cdrom.rst cursors_module_example.py draw_module_example.png draw_module_example.py joystick_calls.png joystick_calls.py color.rst color_list.rst common.txt cursors.rst display.rst draw.rst event.rst examples.rst fastevent.rst font.rst freetype.rst gfxdraw.rst image.rst joystick.rst key.rst locals.rst mask.rst math.rst midi.rst mixer.rst mouse.rst music.rst overlay.rst pixelarray.rst pixelcopy.rst pygame.rst rect.rst scrap.rst sdl2_controller.rst sdl2_video.rst sndarray.rst sprite.rst surface.rst surfarray.rst tests.rst time.rst touch.rst transform.rst elements.html page.html pygame.css_t theme.conf CameraIntro.rst camera_average.jpg camera_background.jpg camera_green.jpg camera_hsv.jpg camera_mask.jpg camera_rgb.jpg camera_thresh.jpg camera_thresholded.jpg camera_yuv.jpg chimp.py.rst ChimpLineByLine.rst chimpshot.gif common.txt DisplayModes.rst introduction-Battleship.png introduction-PuyoPuyo.png introduction-TPS.png introduction.rst Bagic-ouput-result-screen.png Basic TEMPLATE and OUTPUT.rst Basic-ouput-sourcecode.png Bagic-PROCESS-resultscreen.png Bagic-PROCESS-sourcecode.png Basic PROCESS.rst Bagic-INPUT-resultscreen.png Bagic-INPUT-sourcecode.png Basic INPUT.rst Advanced OUTPUT with Advanced PROCESS.rst AdvancedOutputProcess1.gif AdvancedOutputProcess2.gif AdvancedOutputProcess3.gif AdvancedOutputProcess4.gif AdvancedOutputProcess5.gif AdvancedOutputProcess6.gif Advanced INPUT with Advanced OUTPUT.rst AdvancedInputOutput1.gif AdvancedInputOutput2.gif AdvancedInputOutput3.gif AdvancedInputOutput4.gif AdvancedInputOutput5.gif Advanced OUTPUT and plus alpha.rst AdvancedOutputAlpha1.gif AdvancedOutputAlpha2.gif AdvancedOutputAlpha3.gif Epilog.rst ImportInit.rst intro_ball.gif intro_blade.jpg intro_freedom.jpg introduction-Battleship.png introduction-PuyoPuyo.png introduction-TPS.png __.rst Bagic-ouput-result-screen.png Basic-ouput-sourcecode.png __ ____ __.rst Bagic-PROCESS-resultscreen.png Bagic-PROCESS-sourcecode.png __ __.rst Bagic-INPUT-resultscreen.png Bagic-INPUT-sourcecode.png __ __.rst AdvancedOutputProcess1.gif AdvancedOutputProcess2.gif AdvancedOutputProcess3.gif AdvancedOutputProcess4.gif AdvancedOutputProcess5.gif AdvancedOutputProcess6.gif __ __ ___ __ __.rst AdvancedInputOutput1.gif AdvancedInputOutput2.gif AdvancedInputOutput3.gif AdvancedInputOutput4.gif AdvancedInputOutput5.gif __ __ ___ __ __.rst AdvancedOutputAlpha1.gif AdvancedOutputAlpha2.gif AdvancedOutputAlpha3.gif __ __ ___ __ _.rst ____.rst overview.rst MakeGames.rst MoveIt.rst newbieguide.rst PygameIntro.rst SpriteIntro.rst surfarray.png SurfarrayIntro-rest SurfarrayIntro.rst surfarray_allblack.png surfarray_flipped.png surfarray_redimg.png surfarray_rgbarray.png surfarray_scaledown.png surfarray_scaleup.png surfarray_soften.png surfarray_striped.png surfarray_xfade.png tom_basic.png tom_event-flowchart.png tom_formulae.png tom_games2.rst tom_games3.rst tom_games4.rst tom_games5.rst tom_games6.rst tom_radians.png pygame.ico pygame_tiny.png reset.css tooltip.css header.h __main__.py .editorconfig aacircle.py aliens.py arraydemo.py audiocapture.py blend_fill.py blit_blends.py camera.py chimp.py cursors.py alien1.gif alien1.jpg alien1.png alien2.gif alien2.png alien3.gif alien3.png arraydemo.bmp asprite.bmp background.gif BGR.png black.ppm blue.gif blue.mpg bomb.gif boom.wav brick.png car_door.wav chimp.png city.png crimson.pnm danger.gif explosion1.gif fist.png green.pcx grey.pgm house_lo.mp3 house_lo.ogg house_lo.wav laplacian.png liquid.bmp midikeys.png player1.gif punch.wav purple.xpm red.jpg sans.ttf scarlet.webp secosmic_lo.wav shot.gif static.png teal.svg turquoise.tif whiff.wav yellow.tga dropevent.py eventlist.py fonty.py font_viewer.py freetype_misc.py glcube.py headless_no_windows_needed.py joystick.py liquid.py mask.py midi.py moveit.py music_drop_fade.py pixelarray.py playmus.py prevent_display_stretching.py README.rst resizing_new.py scaletest.py scrap_clipboard.py scroll.py setmodescale.py sound.py sound_array_demos.py sprite_texture.py stars.py testsprite.py textinput.py vgrade.py video.py __init__.py PKG-INFO README.rst setup.cfg setup.py .clang-format .editorconfig alphablit.c base.c bitmask.c bufferproxy.c camera.h camera_v4l2.c camera_windows.c cdrom.c color.c constants.c pypm.pyx audio.pxd audio.pyx controller.pxd controller.pyx mixer.pxd mixer.pyx sdl2.pxd sdl2.pyx video.pxd video.pyx __init__.pxd _sprite.pyx __init__.pxd display.c bufferproxy_doc.h camera_doc.h cdrom_doc.h color_doc.h cursors_doc.h display_doc.h draw_doc.h event_doc.h examples_doc.h fastevent_doc.h font_doc.h freetype_doc.h gfxdraw_doc.h image_doc.h joystick_doc.h key_doc.h locals_doc.h mask_doc.h math_doc.h midi_doc.h mixer_doc.h mouse_doc.h music_doc.h overlay_doc.h pixelarray_doc.h pixelcopy_doc.h pygame_doc.h README.rst rect_doc.h scrap_doc.h sdl2_controller_doc.h sdl2_video_doc.h sndarray_doc.h sprite_doc.h surface_doc.h surfarray_doc.h tests_doc.h time_doc.h touch_doc.h transform_doc.h draw.c event.c font.c font.h ft_cache.c ft_layout.c ft_pixel.h ft_render.c ft_render_cb.c ft_unicode.c ft_wrap.c ft_wrap.h freetype.h gfxdraw.c image.c imageext.c bitmask.h pgcompat.h pgimport.h pgplatform.h pygame.h pygame_bufferproxy.h pygame_font.h pygame_freetype.h pygame_mask.h pygame_mixer.h sse2neon.h _pygame.h joystick.c key.c mask.c mask.h math.c mixer.c mixer.h mouse.c music.c newbuffer.c overlay.c palette.h pgarrinter.h pgbufferproxy.h pgcompat.c pgcompat.h pgopengl.h pgplatform.h pixelarray.c pixelarray_methods.c pixelcopy.c pygame.h pypm.c rect.c rotozoom.c rwobject.c scale.h scale2x.c scale_mmx.c scale_mmx32.c scale_mmx64.c scale_mmx64_gcc.c scale_mmx64_msvc.c scrap.c scrap.h scrap_mac.c scrap_qnx.c scrap_sdl2.c scrap_win.c scrap_x11.c sdlmain_osx.m SDL_gfxPrimitives.c SDL_gfxPrimitives.h SDL_gfxPrimitives_font.h surface.c surface.h surface_fill.c surflock.c time.c transform.c _camera.c _camera.h _freetype.c _pygame.h audio.c controller.c mixer.c sdl2.c touch.c video.c _sprite.c _surface.h .editorconfig camera.py colordict.py cursors.py draw_py.py fastevent.py freesansbold.ttf freetype.py ftfont.py locals.py macosx.py midi.py pkgdata.py pygame.ico pygame_icon.bmp pygame_icon.icns pygame_icon_mac.bmp sndarray.py sprite.py surfarray.py sysfont.py __init__.py version.py _camera_opencv.py _camera_vidcapture.py __init__.py __init__.py hook-pygame.py __init__.py .editorconfig base_test.py blit_test.py bufferproxy_test.py camera_test.py color_test.py constants_test.py controller_test.py cursors_test.py display_test.py docs_test.py draw_test.py event_test.py A_PyGameMono-8.png PyGameMono-18-100dpi.bdf PyGameMono-18-75dpi.bdf PyGameMono-8.bdf PyGameMono.otf PyGameMono.sfd test_fixed.otf test_sans.ttf u13079_PyGameMono-8.png white_sizing.xbm white_sizing_mask.xbm font_test.py freetype_tags.py freetype_test.py ftfont_tags.py ftfont_test.py gfxdraw_test.py imageext_tags.py imageext_test.py image_tags.py image_test.py image__save_gl_surface_test.py joystick_test.py key_test.py mask_test.py math_test.py midi_test.py mixer_music_tags.py mixer_music_test.py mixer_tags.py mixer_test.py mouse_test.py pixelarray_test.py pixelcopy_test.py README.TXT rect_test.py fake_2_test.py fake_3_test.py fake_4_test.py fake_5_test.py fake_6_test.py no_assertions__ret_code_of_1__test.py zero_tests_test.py __init__.py fake_2_test.py incomplete_todo_test.py magic_tag_test.py sleep_test.py __init__.py fake_2_test.py invisible_tag_test.py magic_tag_test.py __init__.py fake_2_test.py fake_3_test.py fake_4_test.py __init__.py fake_2_test.py fake_3_test.py __init__.py fake_2_test.py fake_3_test.py __init__.py fake_1_test.py fake_2_test.py __init__.py fake_2_test.py fake_3_test.py fake_4_test.py __init__.py fake_2_test.py fake_3_test.py fake_4_test.py __init__.py run_tests__test.py fake_2_test.py sleep_test.py __init__.py __init__.py rwobject_test.py scrap_tags.py scrap_test.py sndarray_tags.py sndarray_test.py sprite_test.py surface_test.py surfarray_tags.py surfarray_test.py surflock_test.py sysfont_test.py test_test_.py arrinter.py async_sub.py buftools.py endian.py png.py run_tests.py test_machinery.py test_runner.py __init__.py threads_test.py time_test.py touch_test.py transform_test.py version_test.py video_test.py __init__.py __main__.py",
        "setup.py": "#!\/usr\/bin\/env python\n#\n# This is the distutils setup script for pygame.\n# Full instructions are in https:\/\/www.pygame.org\/wiki\/GettingStarted\n#\n# To configure, compile, install, just run this script.\n# python setup.py install\n\nimport io\n\nwith io.open('README.rst', encoding='utf-8') as readme:\nLONG_DESCRIPTION = readme.read()\n\nEXTRAS = {}\n\nMETADATA = {\n\"name\": \"pygame\",\n\"version\": \"2.1.2\",\n\"license\": \"LGPL\",\n\"url\": \"https:\/\/www.pygame.org\",\n\"author\": \"A community project.\",\n\"author_email\": \"pygame@pygame.org\",\n\"description\": \"Python Game Development\",\n\"long_description\": LONG_DESCRIPTION,\n\"long_description_content_type\": \"text\/x-rst\",\n\"project_urls\": {\n\"Documentation\": \"https:\/\/pygame.org\/docs\",\n\"Bug Tracker\": \"https:\/\/github.com\/pygame\/pygame\/issues\",\n\"Source\": \"https:\/\/github.com\/pygame\/pygame\",\n\"Twitter\": \"https:\/\/twitter.com\/pygame_org\",\n},\n\"classifiers\": [\n\"Development Status :: 6 - Mature\",\n\"License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)\",\n\"Programming Language :: Assembly\",\n\"Programming Language :: C\",\n\"Programming Language :: Cython\",\n\"Programming Language :: Objective C\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Topic :: Games\/Entertainment\",\n\"Topic :: Multimedia :: Sound\/Audio\",\n\"Topic :: Multimedia :: Sound\/Audio :: MIDI\",\n\"Topic :: Multimedia :: Sound\/Audio :: Players\",\n\"Topic :: Multimedia :: Graphics\",\n\"Topic :: Multimedia :: Graphics :: Capture :: Digital Camera\",\n\"Topic :: Multimedia :: Graphics :: Capture :: Screen Capture\",\n\"Topic :: Multimedia :: Graphics :: Graphics Conversion\",\n\"Topic :: Multimedia :: Graphics :: Viewers\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: POSIX\",\n\"Operating System :: Unix\",\n\"Operating System :: MacOS\",\n],\n\"python_requires\": '>=3.6',\n}\n\nimport re\nimport sys\nimport os\n\n# just import these always and fail early if not present\nimport distutils\nfrom setuptools import setup\n\n\n# A (bit hacky) fix for https:\/\/github.com\/pygame\/pygame\/issues\/2613\n# This is due to the fact that distutils uses command line args to \n# export PyInit_* functions on windows, but those functions are already exported\n# and that is why compiler gives warnings\nfrom distutils.command.build_ext import build_ext\nbuild_ext.get_export_symbols = lambda self, ext: []\n\nIS_PYPY = '__pypy__' in sys.builtin_module_names\n\ndef compilation_help():\n\"\"\" On failure point people to a web page for help.\n\"\"\"\nimport platform\nthe_system = platform.system()\nif the_system == 'Linux':\nif hasattr(platform, 'linux_distribution'):\ndistro = platform.linux_distribution()\nif distro[0].lower() == 'ubuntu':\nthe_system = 'Ubuntu'\nelif distro[0].lower() == 'debian':\nthe_system = 'Debian'\n\nhelp_urls = {\n'Linux': 'https:\/\/www.pygame.org\/wiki\/Compilation',\n'Ubuntu': 'https:\/\/www.pygame.org\/wiki\/CompileUbuntu',\n'Windows': 'https:\/\/www.pygame.org\/wiki\/CompileWindows',\n'Darwin': 'https:\/\/www.pygame.org\/wiki\/MacCompile',\n'RedHat': 'https:\/\/www.pygame.org\/wiki\/CompileRedHat',\n# TODO There is nothing in the following pages yet\n'Suse': 'https:\/\/www.pygame.org\/wiki\/CompileSuse',\n'Python (from pypy.org)': 'https:\/\/www.pygame.org\/wiki\/CompilePyPy',\n'Free BSD': 'https:\/\/www.pygame.org\/wiki\/CompileFreeBSD',\n'Debian': 'https:\/\/www.pygame.org\/wiki\/CompileDebian',\n}\n\ndefault = 'https:\/\/www.pygame.org\/wiki\/Compilation'\nurl = help_urls.get(the_system, default)\n\nif IS_PYPY:\nurl += '\\n https:\/\/www.pygame.org\/wiki\/CompilePyPy'\n\nprint ('\\n---')\nprint ('For help with compilation see:')\nprint (' %s' % url)\nprint ('To contribute to pygame development see:')\nprint (' https:\/\/www.pygame.org\/contribute.html')\nprint ('---\\n')\n\n\n\nif not hasattr(sys, 'version_info') or sys.version_info < (3, 5):\ncompilation_help()\nraise SystemExit(\"Pygame requires Python3 version 3.6 or above.\")\nif IS_PYPY and sys.pypy_version_info < (7,):\nraise SystemExit(\"Pygame requires PyPy version 7.0.0 above, compatible with CPython >= 3.6\")\n\ndef consume_arg(name):\nif name in sys.argv:\nsys.argv.remove(name)\nreturn True\nreturn False\n\n# get us to the correct directory\npath = os.path.split(os.path.abspath(sys.argv[0]))[0]\nos.chdir(path)\n#os.environ[\"CFLAGS\"] = \"-W -Wall -Wpointer-arith -Wcast-qual -Winline \" + \\\n# \"-Wcast-align -Wconversion -Wstrict-prototypes \" + \\\n# \"-Wmissing-prototypes -Wmissing-declarations \" + \\\n# \"-Wnested-externs -Wshadow -Wredundant-decls\"\nif consume_arg(\"-warnings\"):\nos.environ[\"CFLAGS\"] = \"-W -Wimplicit-int \" + \\\n\"-Wimplicit-function-declaration \" + \\\n\"-Wimplicit -Wmain -Wreturn-type -Wunused -Wswitch \" + \\\n\"-Wcomment -Wtrigraphs -Wformat -Wchar-subscripts \" + \\\n\"-Wuninitialized -Wparentheses \" +\\\n\"-Wpointer-arith -Wcast-qual -Winline -Wcast-align \" + \\\n\"-Wconversion -Wstrict-prototypes \" + \\\n\"-Wmissing-prototypes -Wmissing-declarations \" + \\\n\"-Wnested-externs -Wshadow -Wredundant-decls\"\n\nif consume_arg('-pygame-ci'):\ncflags = os.environ.get('CFLAGS', '')\nif cflags:\ncflags += ' '\ncflags += '-Werror=nested-externs -Werror=switch -Werror=implicit ' + \\\n'-Werror=implicit-function-declaration -Werror=return-type ' + \\\n'-Werror=implicit-int -Werror=main -Werror=pointer-arith ' + \\\n'-Werror=format-security -Werror=uninitialized ' + \\\n'-Werror=trigraphs -Werror=parentheses -Werror=unused-value ' + \\\n'-Werror=cast-align -Werror=int-conversion ' + \\\n'-Werror=incompatible-pointer-types'\nos.environ['CFLAGS'] = cflags\n\nSTRIPPED=False\n\n# STRIPPED builds don't have developer resources like docs or tests\nif \"PYGAME_ANDROID\" in os.environ:\n# test cases and docs are useless inside an APK\nSTRIPPED=True\n\nif consume_arg('-stripped'):\nSTRIPPED=True\n\nenable_arm_neon = False\nif consume_arg('-enable-arm-neon'):\nenable_arm_neon = True\ncflags = os.environ.get('CFLAGS', '')\nif cflags:\ncflags += ' '\ncflags += '-mfpu=neon'\nos.environ['CFLAGS'] = cflags\n\nif consume_arg('cython'):\n# compile .pyx files\n# So you can `setup.py cython` or `setup.py cython install`\ntry:\nfrom Cython.Build.Dependencies import cythonize_one\nexcept ImportError:\nprint(\"You need cython. https:\/\/cython.org\/, pip install cython --user\")\nsys.exit(1)\n\nfrom Cython.Build.Dependencies import create_extension_list\nfrom Cython.Build.Dependencies import create_dependency_tree\n\ntry:\nfrom Cython.Compiler.Main import Context\nfrom Cython.Compiler.Options import CompilationOptions, default_options\n\nc_options = CompilationOptions(default_options)\nctx = Context.from_options(c_options)\nexcept ImportError:\nfrom Cython.Compiler.Main import Context, CompilationOptions, default_options\n\nc_options = CompilationOptions(default_options)\nctx = c_options.create_context()\n\nimport glob\npyx_files = glob.glob(os.path.join('src_c', 'cython', 'pygame', '*.pyx')) + \\\nglob.glob(os.path.join('src_c', 'cython', 'pygame', '**', '*.pyx'))\n\npyx_files, pyx_meta = create_extension_list(pyx_files, ctx=ctx)\ndeps = create_dependency_tree(ctx)\n\nqueue = []\n\nfor ext in pyx_files:\npyx_file = ext.sources[0] # TODO: check all sources, extension\n\nc_file = os.path.splitext(pyx_file)[0].split(os.path.sep)\ndel c_file[1:3] # output in src_c\/\nc_file = os.path.sep.join(c_file) + '.c'\n\n# update outdated .c files\nif os.path.isfile(c_file):\nc_timestamp = os.path.getmtime(c_file)\nif c_timestamp < deps.timestamp(pyx_file):\ndep_timestamp, dep = deps.timestamp(pyx_file), pyx_file\npriority = 0\nelse:\ndep_timestamp, dep = deps.newest_dependency(pyx_file)\npriority = 2 - (dep in deps.immediate_dependencies(pyx_file))\nif dep_timestamp > c_timestamp:\noutdated = True\nelse:\noutdated = False\nelse:\noutdated = True\npriority = 0\nif outdated:\nprint('Compiling {} because it changed.'.format(pyx_file))\nqueue.append((priority, dict( pyx_file=pyx_file, c_file=c_file, fingerprint=None, quiet=False,\noptions=c_options, full_module_name=ext.name,\nembedded_metadata=pyx_meta.get(ext.name) )))\n\n# compile in right order\nqueue.sort(key=lambda a: a[0])\nqueue = [pair[1] for pair in queue]\n\ncount = len(queue)\nfor i, kwargs in enumerate(queue):\nkwargs['progress'] = '[{}\/{}] '.format(i + 1, count)\ncythonize_one(**kwargs)\n\nno_compilation = any(x in ['lint', 'format', 'docs'] for x in sys.argv)\nAUTO_CONFIG = not os.path.isfile('Setup') and not no_compilation\nif consume_arg('-auto'):\nAUTO_CONFIG = True\n\nimport os.path, glob, stat, shutil\nimport distutils.sysconfig\nfrom distutils.core import setup, Command\nfrom distutils.extension import read_setup_file\nfrom distutils.command.install_data import install_data\nfrom distutils.command.sdist import sdist\n\n\nrevision = ''\n\ndef add_datafiles(data_files, dest_dir, pattern):\n\"\"\"Add directory structures to data files according to a pattern\"\"\"\nsrc_dir, elements = pattern\ndef do_directory(root_dest_path, root_src_path, elements):\nfiles = []\nfor e in elements:\nif isinstance(e, list):\nsrc_dir, elems = e\ndest_path = '\/'.join([root_dest_path, src_dir])\nsrc_path = os.path.join(root_src_path, src_dir)\ndo_directory(dest_path, src_path, elems)\nelse:\nfiles.extend(glob.glob(os.path.join(root_src_path, e)))\nif files:\ndata_files.append((root_dest_path, files))\ndo_directory(dest_dir, src_dir, elements)\n\n# # allow optionally using setuptools for bdist_egg.\n# if consume_arg(\"-setuptools\") in sys.argv:\n# from setuptools import setup\n# sys.argv.remove (\"-setuptools\")\n\n# we need to eat this argument in to distutils doesn't trip over it\nconsume_arg(\"-setuptools\")\n\n\n# NOTE: the bdist_mpkg_support is for darwin.\ntry:\nimport bdist_mpkg_support\nexcept ImportError:\npass\nelse:\nEXTRAS.update({\n'options': bdist_mpkg_support.options,\n'setup_requires': ['bdist_mpkg>=0.4.2'],\n#'install_requires': ['pyobjc'],\n#'dependency_links': ['http:\/\/rene.f0o.com\/~rene\/stuff\/macosx\/']\n})\n\n# headers to install\nheaders = glob.glob(os.path.join('src_c', '*.h'))\nheaders.remove(os.path.join('src_c', 'scale.h'))\nheaders.append(os.path.join('src_c', 'include'))\n\nimport distutils.command.install_headers\n\n# monkey patch distutils header install to copy over directories\ndef run_install_headers(self):\nheaders = self.distribution.headers\nif not headers:\nreturn\n\nself.mkpath(self.install_dir)\nfor header in headers:\nif os.path.isdir(header):\ndestdir=os.path.join(self.install_dir, os.path.basename(header))\nself.mkpath(destdir)\nfor entry in os.listdir(header):\nheader1=os.path.join(header, entry)\nif not os.path.isdir(header1):\n(out, _) = self.copy_file(header1, destdir)\nself.outfiles.append(out)\nelse:\n(out, _) = self.copy_file(header, self.install_dir)\nself.outfiles.append(out)\n\ndistutils.command.install_headers.install_headers.run = run_install_headers\n\n# option for not installing the headers.\nif consume_arg(\"-noheaders\"):\nheaders = []\n\n# sanity check for any arguments\nif len(sys.argv) == 1 and sys.stdout.isatty():\nif sys.version_info[0] >= 3:\nreply = input('\\nNo Arguments Given, Perform Default Install? [Y\/n]')\nelse:\nreply = raw_input('\\nNo Arguments Given, Perform Default Install? [Y\/n]')\nif not reply or reply[0].lower() != 'n':\nsys.argv.append('install')\n\n\n# make sure there is a Setup file\nif AUTO_CONFIG:\nprint ('\\n\\nWARNING, No \"Setup\" File Exists, Running \"buildconfig\/config.py\"')\nimport buildconfig.config\ntry:\nbuildconfig.config.main(AUTO_CONFIG)\nexcept:\ncompilation_help()\nraise\nif '-config' in sys.argv:\nsys.exit(0)\nprint ('\\nContinuing With \"setup.py\"')\n\n\ntry:\ns_mtime = os.stat(\"Setup\")[stat.ST_MTIME]\nsin_mtime = os.stat(os.path.join('buildconfig', 'Setup.SDL2.in'))[stat.ST_MTIME]\nif sin_mtime > s_mtime:\nprint ('\\n\\nWARNING, \"buildconfig\/Setup.SDL2.in\" newer than \"Setup\",'\n'you might need to modify \"Setup\".')\nexcept OSError:\npass\n\nif no_compilation:\nextensions = []\nelse:\n# get compile info for all extensions\ntry:\nextensions = read_setup_file('Setup')\nexcept:\nprint (\"\"\"Error with the \"Setup\" file,\nperhaps make a clean copy from \"Setup.in\".\"\"\")\ncompilation_help()\nraise\n\n# Only define the ARM_NEON defines if they have been enabled at build time.\nif enable_arm_neon:\nfor e in extensions:\ne.define_macros.append(('PG_ENABLE_ARM_NEON', '1'))\n\n# if not building font, try replacing with ftfont\nalternate_font = os.path.join('src_py', 'font.py')\nif os.path.exists(alternate_font):\nos.remove(alternate_font)\n\nhave_font = False\nhave_freetype = False\nfor e in extensions:\nif e.name == 'font':\nhave_font = True\nif e.name == '_freetype':\nhave_freetype = True\nif not have_font and have_freetype:\nshutil.copyfile(os.path.join('src_py', 'ftfont.py'), alternate_font)\n\n# extra files to install\ndata_path = os.path.join(distutils.sysconfig.get_python_lib(), 'pygame')\npygame_data_files = []\ndata_files = [('pygame', pygame_data_files)]\n\n# add files in distribution directory\n# pygame_data_files.append('LGPL')\n# pygame_data_files.append('readme.html')\n# pygame_data_files.append('install.html')\n\nadd_stubs = True\n# add *.pyi files into distribution directory\nif add_stubs:\npygame_data_files.append(os.path.join('buildconfig', 'pygame-stubs', 'py.typed'))\ntype_files = glob.glob(os.path.join('buildconfig', 'pygame-stubs', '*.pyi'))\nfor type_file in type_files:\npygame_data_files.append(type_file)\n_sdl2 = glob.glob(os.path.join('buildconfig', 'pygame-stubs', '_sdl2', '*.pyi'))\nif _sdl2:\n_sdl2_data_files = []\ndata_files.append(('pygame\/_sdl2', _sdl2_data_files))\nfor type_file in _sdl2:\n_sdl2_data_files.append(type_file)\n\n\n# add non .py files in lib directory\nfor f in glob.glob(os.path.join('src_py', '*')):\nif not f[-3:] == '.py' and not f[-4:] == '.doc' and os.path.isfile(f):\npygame_data_files.append(f)\n\n# We don't need to deploy tests, example code, or docs inside a game\n\n# tests\/fixtures\nadd_datafiles(data_files, 'pygame\/tests',\n['test',\n[['fixtures',\n[['xbm_cursors',\n['*.xbm']],\n['fonts',\n['*.ttf', '*.otf', '*.bdf', '*.png']]]]]])\n\n# examples\nadd_datafiles(data_files, 'pygame\/examples',\n['examples', ['README.rst', ['data', ['*']]]])\n\n# docs\nadd_datafiles(data_files, 'pygame\/docs\/generated',\n['docs\/generated',\n['*.html', # Navigation and help pages\n'*.gif', # pygame logos\n'*.js', # For doc search\n['ref', # pygame reference\n['*.html', # Reference pages\n'*.js', # Comments script\n'*.json']], # Comment data\n['c_api', # pygame C API\n['*.html']],\n['tut', # Tutorials\n['*.html',\n['tom',\n['*.html',\n'*.png']]]],\n['_static', # Sphinx added support files\n['*.css',\n'*.png',\n'*.ico',\n'*.js']],\n['_images', # Sphinx added reST \".. image::\" refs\n['*.jpg',\n'*.png',\n'*.gif']],\n['_sources', # Used for ref search\n['*.txt',\n['ref',\n['*.txt']]]]]])\n\n# generate the version module\ndef parse_version(ver):\nreturn ', '.join(s for s in re.findall(r'\\d+', ver)[0:3])\n\ndef parse_source_version():\npgh_major = -1\npgh_minor = -1\npgh_patch = -1\nmajor_exp_search = re.compile(r'define\\s+PG_MAJOR_VERSION\\s+([0-9]+)').search\nminor_exp_search = re.compile(r'define\\s+PG_MINOR_VERSION\\s+([0-9]+)').search\npatch_exp_search = re.compile(r'define\\s+PG_PATCH_VERSION\\s+([0-9]+)').search\npg_header = os.path.join('src_c', 'include', '_pygame.h')\nwith open(pg_header) as f:\nfor line in f:\nif pgh_major == -1:\nm = major_exp_search(line)\nif m: pgh_major = int(m.group(1))\nif pgh_minor == -1:\nm = minor_exp_search(line)\nif m: pgh_minor = int(m.group(1))\nif pgh_patch == -1:\nm = patch_exp_search(line)\nif m: pgh_patch = int(m.group(1))\nif pgh_major == -1:\nraise SystemExit(\"_pygame.h: cannot find PG_MAJOR_VERSION\")\nif pgh_minor == -1:\nraise SystemExit(\"_pygame.h: cannot find PG_MINOR_VERSION\")\nif pgh_patch == -1:\nraise SystemExit(\"_pygame.h: cannot find PG_PATCH_VERSION\")\nreturn (pgh_major, pgh_minor, pgh_patch)\n\ndef write_version_module(pygame_version, revision):\nvernum = parse_version(pygame_version)\nsrc_vernum = parse_source_version()\nif vernum != ', '.join(str(e) for e in src_vernum):\nraise SystemExit(\"_pygame.h version differs from 'METADATA' version\"\n\": %s vs %s\" % (vernum, src_vernum))\nwith open(os.path.join('buildconfig', 'version.py.in'), 'r') as header_file:\nheader = header_file.read()\nwith open(os.path.join('src_py', 'version.py'), 'w') as version_file:\nversion_file.write(header)\nversion_file.write('ver = \"' + pygame_version + '\" # pylint: disable=invalid-name\\n')\nversion_file.write('vernum = PygameVersion(%s)\\n' % vernum)\nversion_file.write('rev = \"' + revision + '\" # pylint: disable=invalid-name\\n')\nversion_file.write('\\n__all__ = [\"SDL\", \"ver\", \"vernum\", \"rev\"]\\n')\n\nwrite_version_module(METADATA['version'], revision)\n\n# required. This will be filled if doing a Windows build.\ncmdclass = {}\n\ndef add_command(name):\ndef decorator(command):\nassert issubclass(command, distutils.cmd.Command)\ncmdclass[name]=command\nreturn command\nreturn decorator\n\n# try to find DLLs and copy them too (only on windows)\nif sys.platform == 'win32' and not 'WIN32_DO_NOT_INCLUDE_DEPS' in os.environ:\n\nfrom distutils.command.build_ext import build_ext\n\n# add dependency DLLs to the project\nlib_dependencies = {}\nfor e in extensions:\nif e.name.startswith('COPYLIB_'):\nlib_dependencies[e.name[8:]] = e.libraries\n\ndef dependencies(roots):\n\"\"\"Return a set of dependencies for the list of library file roots\n\nThe return set is a dictionary keyed on library root name with values of 1.\n\"\"\"\n\nroot_set = {}\nfor root in roots:\ntry:\ndeps = lib_dependencies[root]\nexcept KeyError:\npass\nelse:\nroot_set[root] = 1\nroot_set.update(dependencies(deps))\nreturn root_set\n\nthe_dlls = {}\nrequired_dlls = {}\nfor e in extensions:\nif e.name.startswith('COPYLIB_'):\nthe_dlls[e.name[8:]] = e.library_dirs[0]\nelse:\nrequired_dlls.update(dependencies(e.libraries))\n\n# join the required_dlls and the_dlls keys together.\nlib_names = {}\nfor lib in list(required_dlls.keys()) + list(the_dlls.keys()):\nlib_names[lib] = 1\n\nfor lib in lib_names.keys():\n#next DLL; a distutils bug requires the paths to have Windows separators\nf = the_dlls[lib].replace('\/', os.sep)\nif f == '_':\nprint (\"WARNING, DLL for %s library not found.\" % lib)\nelse:\npygame_data_files.append(f)\n\n\nif '-enable-msvc-analyze' in sys.argv:\n# calculate the MSVC compiler version as an int\nmsc_pos = sys.version.find('MSC v.')\nmsc_ver = 1900\nif msc_pos != -1:\nmsc_ver = int(sys.version[msc_pos + 6:msc_pos + 10])\nprint ('Analyzing with MSC_VER =', msc_ver)\n\n# excluding system headers from analyze out put was only added after MSCV_VER 1913\nif msc_ver >= 1913:\nos.environ['CAExcludePath'] = 'C:\\\\Program Files (x86)\\\\'\nfor e in extensions:\ne.extra_compile_args += ['\/analyze', '\/experimental:external',\n'\/external:W0', '\/external:env:CAExcludePath' ]\nelse:\nfor e in extensions:\ne.extra_compile_args += ['\/analyze']\n\ndef has_flag(compiler, flagname):\n\"\"\"\nAdapted from here: https:\/\/github.com\/pybind\/python_example\/blob\/master\/setup.py#L37\n\"\"\"\nfrom distutils.errors import CompileError\nimport tempfile\nroot_drive = os.path.splitdrive(sys.executable)[0] + '\\\\'\nwith tempfile.NamedTemporaryFile('w', suffix='.cpp', delete=False) as f:\nf.write('int main (int argc, char **argv) { return 0; }')\nfname = f.name\ntry:\ncompiler.compile([fname], output_dir=root_drive, extra_postargs=[flagname])\nexcept CompileError:\nreturn False\nelse:\ntry:\nbase_file = os.path.splitext(fname)[0]\nobj_file = base_file + '.obj'\nos.remove(obj_file)\nexcept OSError:\npass\nfinally:\ntry:\nos.remove(fname)\nexcept OSError:\npass\nreturn True\n\n# filter flags, returns list of accepted flags\ndef flag_filter(compiler, *flags):\nreturn [flag for flag in flags if has_flag(compiler, flag)]\n\n# Only on win32, not MSYS2\nif 'MSYSTEM' not in os.environ:\n@add_command('build_ext')\nclass WinBuildExt(build_ext):\n\"\"\"This build_ext sets necessary environment variables for MinGW\"\"\"\n\n# __sdl_lib_dir is possible location of msvcrt replacement import\n# libraries, if they exist. Pygame module base only links to SDL so\n# should have the SDL library directory as its only -L option.\nfor e in extensions:\nif e.name == 'base':\n__sdl_lib_dir = e.library_dirs[0].replace('\/', os.sep)\nbreak\n\ndef build_extensions(self):\n# Add supported optimisations flags to reduce code size with MSVC\nopts = flag_filter(self.compiler, \"\/GF\", \"\/Gy\")\nfor extension in extensions:\nextension.extra_compile_args += opts\n\nbuild_ext.build_extensions(self)\n\n# Add the precompiled smooth scale MMX functions to transform.\ndef replace_scale_mmx():\nfor e in extensions:\nif e.name == 'transform':\nif '64 bit' in sys.version:\ne.extra_objects.append(\nos.path.join('buildconfig', 'obj', 'win64', 'scale_mmx.obj'))\nelse:\ne.extra_objects.append(\nos.path.join('buildconfig', 'obj', 'win32', 'scale_mmx.obj'))\nfor i in range(len(e.sources)):\nif e.sources[i].endswith('scale_mmx.c'):\ndel e.sources[i]\nreturn\nreplace_scale_mmx()\n\n\n# clean up the list of extensions\nfor e in extensions[:]:\nif e.name.startswith('COPYLIB_'):\nextensions.remove(e) #don't compile the COPYLIBs, just clean them\nelse:\ne.name = 'pygame.' + e.name #prepend package name on modules\n\n\n# data installer with improved intelligence over distutils\n# data files are copied into the project directory instead\n# of willy-nilly\n@add_command('install_data')\nclass smart_install_data(install_data):\ndef run(self):\n#need to change self.install_dir to the actual library dir\ninstall_cmd = self.get_finalized_command('install')\nself.install_dir = getattr(install_cmd, 'install_lib')\nreturn install_data.run(self)\n\n\n@add_command('sdist')\nclass OurSdist(sdist):\ndef initialize_options(self):\nsdist.initialize_options(self)\n# we do not want MANIFEST.in to appear in the root cluttering up things.\nself.template = os.path.join('buildconfig', 'MANIFEST.in')\n\n\nif \"bdist_msi\" in sys.argv:\n# if you are making an msi, we want it to overwrite files\n# we also want to include the repository revision in the file name\nfrom distutils.command import bdist_msi\nimport msilib\n\n@add_command('bdist_msi')\nclass bdist_msi_overwrite_on_install(bdist_msi.bdist_msi):\ndef run(self):\nbdist_msi.bdist_msi.run(self)\n\n# Remove obsolete files.\ncomp = \"pygame1\" # Pygame component\nprop = comp # Directory property\nrecords = [(\"surfarray.pyd\", comp,\n\"SURFAR~1.PYD|surfarray.pyd\", prop, 1),\n(\"sndarray.pyd\", comp,\n\"SNDARRAY.PYD|sndarray.pyd\", prop, 1),\n(\"camera.pyd\", comp, \"CAMERA.PYD|camera.pyd\", prop, 1),\n(\"color.py\", comp, \"COLOR.PY|color.py\", prop, 1),\n(\"color.pyc\", comp, \"COLOR.PYC|color.pyc\", prop, 1),\n(\"color.pyo\", comp, \"COLOR.PYO|color.pyo\", prop, 1)]\nmsilib.add_data(self.db, \"RemoveFile\", records)\n\n# Overwrite outdated files.\nfullname = self.distribution.get_fullname()\ninstaller_name = self.get_installer_filename(fullname)\nprint (\"changing %s to overwrite files on install\" % installer_name)\nmsilib.add_data(self.db, \"Property\", [(\"REINSTALLMODE\", \"amus\")])\nself.db.Commit()\n\ndef get_installer_filename(self, fullname):\nif revision:\nfullname += '-hg_' + revision\nreturn bdist_msi.bdist_msi.get_installer_filename(self, fullname)\n\n\n# test command. For doing 'python setup.py test'\n\n@add_command('test')\nclass TestCommand(Command):\nuser_options = [ ]\n\ndef initialize_options(self):\nself._dir = os.getcwd()\n\ndef finalize_options(self):\npass\n\ndef run(self):\n'''\nruns the tests with default options.\n'''\nimport subprocess\nreturn subprocess.call([sys.executable, os.path.join('test', '__main__.py')])\n\n\nclass LintFormatCommand(Command):\n\"\"\" Used for formatting or linting. See Lint and Format Sub classes.\n\"\"\"\nuser_options = []\nlint = False\nformat = False\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\n\"\"\"Check the existence and launch linters.\"\"\"\nimport subprocess\nimport sys\nimport warnings\n\ndef check_linter_exists(linter):\nif shutil.which(linter) is None:\nmsg = \"Please install '%s' in your environment. (hint: 'python3 -m pip install %s')\"\nwarnings.warn(msg % (linter, linter))\nsys.exit(1)\n\nc_files_unfiltered = glob.glob(\"src_c\/**\/*.[ch]\", recursive=True)\nc_file_disallow = [\"_sdl2\", \"pypm\", \"SDL_gfx\", \"sse2neon.h\", \"src_c\/doc\/\", \"_sprite.c\"]\nc_files = [x for x in c_files_unfiltered if not any([d for d in c_file_disallow if d in x])]\n\n# Other files have too many issues for now. setup.py, buildconfig, etc\npython_directories = [\"src_py\", \"test\"]\nif self.lint:\ncommands = {\n\"clang-format\": [\"--dry-run\", \"--Werror\", \"-i\"] + c_files,\n\"black\": [\"--check\", \"--diff\"] + python_directories,\n# Test directory has too much pylint warning for now\n\"pylint\": [\"src_py\"],\n}\nelse:\ncommands = {\n\"clang-format\": [\"-i\"] + c_files,\n\"black\": python_directories,\n}\n\nformatters = [\"black\", \"clang-format\"]\nfor linter, option in commands.items():\nprint(\" \".join([linter] + option))\ncheck_linter_exists(linter)\nresult = subprocess.run([linter] + option)\nif result.returncode:\nmsg = f\"'{linter}' failed.\"\nmsg += \" Please run: python setup.py format\" if linter in formatters else \"\"\nmsg += f\" Do you have the latest version of {linter}?\"\nraise SystemExit(msg)\n\n\n@add_command(\"lint\")\nclass LintCommand(LintFormatCommand):\nlint = True\n\n\n@add_command(\"format\")\nclass FormatCommand(LintFormatCommand):\nformat = True\n\n\n@add_command('docs')\nclass DocsCommand(Command):\n\"\"\" For building the pygame documentation with `python setup.py docs`.\nThis generates html, and documentation .h header files.\n\"\"\"\nuser_options = [\n(\n'fullgeneration',\n'f',\n'Full generation. Do not use a saved environment, always read all files.'\n)\n]\nboolean_options = ['fullgeneration']\n\ndef initialize_options(self):\nself._dir = os.getcwd()\nself.fullgeneration = None\n\ndef finalize_options(self):\npass\n\ndef run(self):\n'''\nruns Sphinx to build the docs.\n'''\nimport subprocess\nprint(\"Using python:\", sys.executable)\ncommand_line = [\nsys.executable, os.path.join('buildconfig', 'makeref.py')\n]\nif self.fullgeneration:\ncommand_line.append('full_generation')\nif subprocess.call(command_line) != 0:\nraise SystemExit(\"Failed to build documentation\")\n\n\n# Prune empty file lists.\ndata_files = [(path, files) for path, files in data_files if files]\n\n# finally,\n# call distutils with all needed info\nPACKAGEDATA = {\n\"cmdclass\": cmdclass,\n\"packages\": ['pygame',\n'pygame.threads',\n'pygame._sdl2',\n'pygame.tests',\n'pygame.tests.test_utils',\n'pygame.tests.run_tests__tests',\n'pygame.tests.run_tests__tests.all_ok',\n'pygame.tests.run_tests__tests.failures1',\n'pygame.tests.run_tests__tests.incomplete',\n'pygame.tests.run_tests__tests.infinite_loop',\n'pygame.tests.run_tests__tests.print_stderr',\n'pygame.tests.run_tests__tests.print_stdout',\n'pygame.tests.run_tests__tests.incomplete_todo',\n'pygame.tests.run_tests__tests.exclude',\n'pygame.tests.run_tests__tests.timeout',\n'pygame.tests.run_tests__tests.everything',\n'pygame.docs',\n'pygame.examples',\n'pygame.__pyinstaller'],\n\"package_dir\": {'pygame': 'src_py',\n'pygame._sdl2': 'src_py\/_sdl2',\n'pygame.threads': 'src_py\/threads',\n'pygame.tests': 'test',\n'pygame.docs': 'docs',\n'pygame.examples': 'examples',\n'pygame.__pyinstaller': 'src_py\/__pyinstaller'},\n\"headers\": headers,\n\"ext_modules\": extensions,\n\"data_files\": data_files,\n\"zip_safe\": False,\n}\nif STRIPPED:\npygame_data_files = []\ndata_files = [('pygame', [\"src_py\/freesansbold.ttf\",\n\"src_py\/pygame.ico\",\n\"src_py\/pygame_icon.icns\",\n\"src_py\/pygame_icon.bmp\",\n\"src_py\/pygame_icon_mac.bmp\"])]\n\n\nPACKAGEDATA = {\n\"cmdclass\": cmdclass,\n\"packages\": ['pygame',\n'pygame.threads',\n'pygame._sdl2'],\n\"package_dir\": {'pygame': 'src_py',\n'pygame._sdl2': 'src_py\/_sdl2',\n'pygame.threads': 'src_py\/threads'},\n\"ext_modules\": extensions,\n\"zip_safe\": False,\n\"data_files\": data_files\n}\n\nPACKAGEDATA.update(METADATA)\nPACKAGEDATA.update(EXTRAS)\n\ntry:\nsetup(**PACKAGEDATA)\nexcept:\ncompilation_help()\nraise\n"
    },
    {
        "package_name": "pygdbmi-0.10.0.2",
        "file_list": "CHANGELOG.md LICENSE MANIFEST.in PKG-INFO constants.py gdbcontroller.py gdbescapes.py gdbmiparser.py IoManager.py printcolor.py py.typed StringStream.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport io\nimport os\nimport re\nfrom codecs import open\n\nfrom setuptools import find_packages, setup # type: ignore\n\nEXCLUDE_FROM_PACKAGES = [\"tests\"]\nCURDIR = os.path.abspath(os.path.dirname(__file__))\nREADME = io.open(\"README.md\", \"r\", encoding=\"utf-8\").read()\n\nwith open(\"pygdbmi\/__init__.py\", \"r\") as fd:\nmatches = re.search(\nr'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]', fd.read(), re.MULTILINE\n)\nversion = \"0.0.0.0\"\nif matches:\nversion = matches.group(1)\n\n\nsetup(\nname=\"pygdbmi\",\nversion=version,\nauthor=\"Chad Smith\",\nauthor_email=\"grassfedcode@gmail.com\",\ndescription=\"Parse gdb machine interface output with Python\",\nlong_description=README,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/cs01\/pygdbmi\",\nlicense=\"MIT\",\npackages=find_packages(exclude=EXCLUDE_FROM_PACKAGES),\ninclude_package_data=True,\nkeywords=[\"gdb\", \"python\", \"machine-interface\", \"parse\", \"frontend\"],\nscripts=[],\nentry_points={},\nzip_safe=False,\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n# If modifying the list of supported versions, also update the versions pygdbmi is tested\n# with, see noxfile.py and .github\/workflows\/tests.yml.\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n],\n)\n"
    },
    {
        "package_name": "pygeoif-0.7",
        "file_list": "CONTRIBUTORS.txt HISTORY.txt LICENSE.GPL LICENSE.txt MANIFEST.in PKG-INFO geometry.py test_main.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "from setuptools import setup\nfrom setuptools import find_packages\nfrom setuptools.command.test import test as TestCommand\nimport sys\nimport os\n\n\nclass PyTest(TestCommand):\ndef finalize_options(self):\nTestCommand.finalize_options(self)\nself.test_args = []\nself.test_suite = True\n\ndef run_tests(self):\n#import here, cause outside the eggs aren't loaded\nimport pytest\nerrno = pytest.main(self.test_args)\nsys.exit(errno)\n\nversion = '0.7'\n\nREADME = open(\"README.rst\").read()\nHISTORY = open(os.path.join(\"docs\", \"HISTORY.txt\")).read()\n\nsetup(name='pygeoif',\nversion=version,\ndescription=\"A basic implementation of the __geo_interface__\",\nlong_description=README + \"\\n\" + HISTORY,\nclassifiers=[\n\"Topic :: Scientific\/Engineering :: GIS\",\n\"Programming Language :: Python\",\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)',\n'Development Status :: 5 - Production\/Stable',\n'Operating System :: OS Independent',\n],\n# Get strings from http:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\nkeywords='GIS Spatial WKT',\nauthor='Christian Ledermann',\nauthor_email='christian.ledermann@gmail.com',\nurl='https:\/\/github.com\/cleder\/pygeoif\/',\nlicense='LGPL',\npackages=find_packages(exclude=['ez_setup', 'examples', 'tests']),\ninclude_package_data=True,\nzip_safe=False,\ntests_require=['pytest'],\ncmdclass={'test': PyTest},\ninstall_requires=[\n# -*- Extra requirements: -*-\n],\nentry_points=\"\"\"\n# -*- Entry points: -*-\n\"\"\",\n)\n"
    },
    {
        "package_name": "pygeoip-0.3.2",
        "file_list": "CHANGELOG.md DEVELOPER.md LICENSE.md MANIFEST.in PKG-INFO const.py timezone.py util.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt README.rst setup.cfg setup.py config.py test.py test_asnum.py test_cache.py test_city.py test_country.py test_isp.py test_memory.py test_mmap.py test_netspeed.py test_netspeed_cell.py test_org.py test_region.py test_thread.py test_tz.py test_unicode.py __init__.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\"\"\"\nCopyright (c) 2010-2014 Jennifer Ennis, William Tis\u00e4ter.\n\nThis program is free software: you can redistribute it and\/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with this program. If not, see <http:\/\/www.gnu.org\/licenses\/lgpl.txt>.\n\"\"\"\n\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\nfrom pygeoip import __version__\n\nsetup(name='pygeoip',\nversion=__version__,\ndescription='Pure Python GeoIP API',\nauthor='Jennifer Ennis',\nauthor_email='zaylea@gmail.com',\nmaintainer='William Tis\u00e4ter',\nmaintainer_email='william@defunct.cc',\nurl='https:\/\/github.com\/appliedsec\/pygeoip',\nclassifiers=['Programming Language :: Python',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4'],\npackages=['pygeoip'],\nlicense='LGPLv3+',\nkeywords='geoip')\n"
    },
    {
        "package_name": "pygit2-1.10.0",
        "file_list": "AUTHORS.rst build.sh build_tag.py CHANGELOG.rst COPYING Makefile mypy-stubtest.ini PKG-INFO blame.py callbacks.py config.py credentials.py attr.h blame.h buffer.h callbacks.h checkout.h clone.h commit.h common.h config.h describe.h diff.h errors.h graph.h index.h indexer.h merge.h net.h oid.h pack.h proxy.h refspec.h remote.h repository.h revert.h stash.h strarray.h submodule.h transport.h types.h errors.py ffi.py index.py packbuilder.py refspec.py remote.py repository.py settings.py submodule.py utils.py _build.py _pygit2.pyi _run.py __init__.py pyproject.toml pytest.ini README.rst requirements-test.txt requirements.txt setup.cfg setup.py SPONSORS.rst blob.c branch.c branch.h commit.c diff.c diff.h error.c error.h mailmap.c mailmap.h note.c note.h object.c object.h odb.c odb.h odb_backend.c odb_backend.h oid.c oid.h options.c options.h patch.c patch.h pygit2.c refdb.c refdb.h refdb_backend.c refdb_backend.h reference.c reference.h repository.c repository.h revspec.c revspec.h signature.c signature.h stash.c tag.c tree.c tree.h treebuilder.c treebuilder.h types.h utils.c utils.h walker.c walker.h wildmatch.c wildmatch.h worktree.c worktree.h conftest.py barerepo.zip binaryfilerepo.zip blameflagsrepo.zip dirtyrepo.zip emptyrepo.zip encoding.zip gpgsigned.zip submodulerepo.zip testrepo.zip testrepoformerging.zip testrepopacked.zip trailerrepo.zip utf8branchrepo.zip pygit2_empty pygit2_empty.pub test_apply_diff.py test_archive.py test_attributes.py test_blame.py test_blob.py test_branch.py test_branch_empty.py test_cherrypick.py test_commit.py test_commit_gpg.py test_commit_trailer.py test_config.py test_credentials.py test_describe.py test_diff.py test_diff_binary.py test_index.py test_mailmap.py test_merge.py test_note.py test_object.py test_odb.py test_odb_backend.py test_oid.py test_options.py test_packbuilder.py test_patch.py test_patch_encoding.py test_refdb_backend.py test_refs.py test_remote.py test_remote_prune.py test_remote_utf8.py test_repository.py test_repository_bare.py test_repository_custom.py test_repository_empty.py test_revparse.py test_revwalk.py test_signature.py test_status.py test_submodule.py test_tag.py test_tree.py test_treebuilder.py utils.py __init__.py",
        "setup.py": "# Copyright 2010-2021 The pygit2 contributors\n#\n# This file is free software; you can redistribute it and\/or modify\n# it under the terms of the GNU General Public License, version 2,\n# as published by the Free Software Foundation.\n#\n# In addition to the permissions in the GNU General Public License,\n# the authors give you unlimited permission to link the compiled\n# version of this file into combinations with other programs,\n# and to distribute those combinations without any restriction\n# coming from the use of this file. (The General Public License\n# restrictions do apply in other respects; for example, they cover\n# modification of the file, and distribution when not linked into\n# a combined executable.)\n#\n# This file is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; see the file COPYING. If not, write to\n# the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n# Boston, MA 02110-1301, USA.\n\n# Import setuptools before distutils to avoid user warning\nfrom setuptools import setup, Extension\n\n# Import from the Standard Library\nimport codecs\nfrom distutils.command.build import build\nfrom distutils.command.sdist import sdist\nfrom distutils import log\nimport os\nfrom pathlib import Path\nfrom subprocess import Popen, PIPE\nimport sys\n\n# Import stuff from pygit2\/_utils.py without loading the whole pygit2 package\nsys.path.insert(0, 'pygit2')\nfrom _build import __version__, get_libgit2_paths\ndel sys.path[0]\n\n\nlibgit2_bin, libgit2_kw = get_libgit2_paths()\n\n\nclass sdist_files_from_git(sdist):\ndef get_file_list(self):\npopen = Popen(['git', 'ls-files'], stdout=PIPE, stderr=PIPE,\nuniversal_newlines=True)\nstdoutdata, stderrdata = popen.communicate()\nif popen.returncode != 0:\nprint(stderrdata)\nsys.exit()\n\ndef exclude(line):\nfor prefix in ['.', 'appveyor.yml', 'docs\/', 'misc\/']:\nif line.startswith(prefix):\nreturn True\nreturn False\n\nfor line in stdoutdata.splitlines():\nif not exclude(line):\nself.filelist.append(line)\n\n# Ok\nself.filelist.sort()\nself.filelist.remove_duplicates()\nself.write_manifest()\n\n\nclassifiers = [\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Topic :: Software Development :: Version Control\"]\n\nwith codecs.open('README.rst', 'r', 'utf-8') as readme:\nlong_description = readme.read()\n\ncmdclass = {\n'sdist': sdist_files_from_git,\n}\n\n\n# On Windows, we install the git2.dll too.\nclass BuildWithDLLs(build):\ndef _get_dlls(self):\n# return a list of (FQ-in-name, relative-out-name) tuples.\nret = []\nbld_ext = self.distribution.get_command_obj('build_ext')\ncompiler_type = bld_ext.compiler.compiler_type\nlibgit2_dlls = []\nif compiler_type == 'msvc':\nlibgit2_dlls.append('git2.dll')\nelif compiler_type == 'mingw32':\nlibgit2_dlls.append('libgit2.dll')\nlook_dirs = [libgit2_bin] + os.getenv(\"PATH\", \"\").split(os.pathsep)\n\ntarget = Path(self.build_lib).absolute() \/ 'pygit2'\nfor dll in libgit2_dlls:\nfor look in look_dirs:\nf = Path(look) \/ dll\nif f.is_file():\nret.append((f, target))\nbreak\nelse:\nlog.warn('\"Could not find required DLL {dll} to include')\nlog.debug(f'(looked in {look_dirs})')\nreturn ret\n\ndef run(self):\nbuild.run(self)\nfor s, d in self._get_dlls():\nself.copy_file(s, d)\n\n# On Windows we package up the dlls with the plugin.\nif os.name == 'nt':\ncmdclass['build'] = BuildWithDLLs\n\nsrc = Path('src')\npygit2_exts = [str(path) for path in sorted(src.iterdir()) if path.suffix == '.c']\next_modules = [\nExtension('pygit2._pygit2', pygit2_exts, **libgit2_kw)\n]\n\nwith open('requirements.txt') as f:\ninstall_requires = f.read().splitlines()\n\nsetup(\nname='pygit2',\ndescription='Python bindings for libgit2.',\nkeywords='git',\nversion=__version__,\nclassifiers=classifiers,\nlicense='GPLv2 with linking exception',\nmaintainer='J. David Ib\u00e1\u00f1ez',\nmaintainer_email='jdavid.ibp@gmail.com',\nlong_description=long_description,\npackages=['pygit2'],\npackage_data={'pygit2': ['decl\/*.h', '*.pyi']},\nzip_safe=False,\ncmdclass=cmdclass,\ncffi_modules=['pygit2\/_run.py:ffi'],\next_modules=ext_modules,\n# Requirements\npython_requires='>=3.7',\nsetup_requires=['cffi>=1.9.1'],\ninstall_requires=install_requires,\n# URLs\nurl='https:\/\/github.com\/libgit2\/pygit2',\nproject_urls={\n'Documentation': 'https:\/\/www.pygit2.org\/',\n'Changelog': 'https:\/\/github.com\/libgit2\/pygit2\/blob\/master\/CHANGELOG.rst',\n'Funding': 'https:\/\/github.com\/sponsors\/jdavid',\n},\n)\n"
    },
    {
        "package_name": "PyGithub-1.55",
        "file_list": "COPYING COPYING.LESSER AccessToken.py AccessToken.pyi ApplicationOAuth.py ApplicationOAuth.pyi AuthenticatedUser.py AuthenticatedUser.pyi Authorization.py Authorization.pyi AuthorizationApplication.py AuthorizationApplication.pyi Branch.py Branch.pyi BranchProtection.py BranchProtection.pyi CheckRun.py CheckRun.pyi CheckRunAnnotation.py CheckRunAnnotation.pyi CheckRunOutput.py CheckRunOutput.pyi CheckSuite.py CheckSuite.pyi Clones.py Clones.pyi Commit.py Commit.pyi CommitCombinedStatus.py CommitCombinedStatus.pyi CommitComment.py CommitComment.pyi CommitStats.py CommitStats.pyi CommitStatus.py CommitStatus.pyi Comparison.py Comparison.pyi Consts.py ContentFile.py ContentFile.pyi Deployment.py Deployment.pyi DeploymentStatus.py DeploymentStatus.pyi Download.py Download.pyi Event.py Event.pyi File.py File.pyi Gist.py Gist.pyi GistComment.py GistComment.pyi GistFile.py GistFile.pyi GistHistoryState.py GistHistoryState.pyi GitAuthor.py GitAuthor.pyi GitBlob.py GitBlob.pyi GitCommit.py GitCommit.pyi GithubApp.py GithubApp.pyi GithubException.py GithubException.pyi GithubObject.py GithubObject.pyi GitignoreTemplate.py GitignoreTemplate.pyi GitObject.py GitObject.pyi GitRef.py GitRef.pyi GitRelease.py GitRelease.pyi GitReleaseAsset.py GitReleaseAsset.pyi GitTag.py GitTag.pyi GitTree.py GitTree.pyi GitTreeElement.py GitTreeElement.pyi Hook.py Hook.pyi HookDescription.py HookDescription.pyi HookResponse.py HookResponse.pyi InputFileContent.py InputFileContent.pyi InputGitAuthor.py InputGitAuthor.pyi InputGitTreeElement.py InputGitTreeElement.pyi Installation.py Installation.pyi InstallationAuthorization.py InstallationAuthorization.pyi Invitation.py Invitation.pyi Issue.py Issue.pyi IssueComment.py IssueComment.pyi IssueEvent.py IssueEvent.pyi IssuePullRequest.py IssuePullRequest.pyi Label.py Label.pyi License.py License.pyi MainClass.py MainClass.pyi Membership.py Membership.pyi Migration.py Migration.pyi Milestone.py Milestone.pyi NamedUser.py NamedUser.pyi Notification.py Notification.pyi NotificationSubject.py NotificationSubject.pyi Organization.py Organization.pyi PaginatedList.py PaginatedList.pyi Path.py Path.pyi Permissions.py Permissions.pyi Plan.py Plan.pyi Project.py Project.pyi ProjectCard.py ProjectCard.pyi ProjectColumn.py ProjectColumn.pyi PublicKey.py PublicKey.pyi PullRequest.py PullRequest.pyi PullRequestComment.py PullRequestComment.pyi PullRequestMergeStatus.py PullRequestMergeStatus.pyi PullRequestPart.py PullRequestPart.pyi PullRequestReview.py PullRequestReview.pyi py.typed Rate.py Rate.pyi RateLimit.py RateLimit.pyi Reaction.py Reaction.pyi Referrer.py Referrer.pyi Repository.py Repository.pyi RepositoryKey.py RepositoryKey.pyi RepositoryPreferences.py RepositoryPreferences.pyi Requester.py Requester.pyi RequiredPullRequestReviews.py RequiredPullRequestReviews.pyi RequiredStatusChecks.py RequiredStatusChecks.pyi SelfHostedActionsRunner.py SelfHostedActionsRunner.pyi SourceImport.py SourceImport.pyi Stargazer.py Stargazer.pyi StatsCodeFrequency.py StatsCodeFrequency.pyi StatsCommitActivity.py StatsCommitActivity.pyi StatsContributor.py StatsContributor.pyi StatsParticipation.py StatsParticipation.pyi StatsPunchCard.py StatsPunchCard.pyi Tag.py Tag.pyi Team.py Team.pyi TeamDiscussion.py TeamDiscussion.pyi TimelineEvent.py TimelineEvent.pyi TimelineEventSource.py TimelineEventSource.pyi Topic.py Topic.pyi UserKey.py UserKey.pyi View.py View.pyi Workflow.py Workflow.pyi WorkflowRun.py WorkflowRun.pyi __init__.py __init__.pyi MANIFEST.in PKG-INFO dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n############################ Copyrights and license ############################\n# #\n# Copyright 2012 Vincent Jacques <vincent@vincent-jacques.net> #\n# Copyright 2012 Zearin <zearin@gonk.net> #\n# Copyright 2013 Vincent Jacques <vincent@vincent-jacques.net> #\n# Copyright 2014 Tomas Radej <tradej@redhat.com> #\n# Copyright 2014 Vincent Jacques <vincent@vincent-jacques.net> #\n# Copyright 2015 Jimmy Zelinskie <jimmyzelinskie@gmail.com> #\n# Copyright 2016 Felix Yan <felixonmars@archlinux.org> #\n# Copyright 2016 Jakub Wilk <jwilk@jwilk.net> #\n# Copyright 2016 Jannis Gebauer <ja.geb@me.com> #\n# Copyright 2016 Peter Buckley <dx-pbuckley@users.noreply.github.com> #\n# Copyright 2017 Hugo <hugovk@users.noreply.github.com> #\n# Copyright 2017 Jannis Gebauer <ja.geb@me.com> #\n# Copyright 2017 Jannis Gebauer <jayfk@users.noreply.github.com> #\n# Copyright 2017 Nhomar Hernandez <nhomar@vauxoo.com> #\n# Copyright 2017 Paul Ortman <paul.ortman@gmail.com> #\n# Copyright 2018 Jason White <jasonaw0@gmail.com> #\n# Copyright 2018 Mike Miller <github@mikeage.net> #\n# Copyright 2018 Wan Liuyang <tsfdye@gmail.com> #\n# Copyright 2018 sfdye <tsfdye@gmail.com> #\n# #\n# This file is part of PyGithub. #\n# http:\/\/pygithub.readthedocs.io\/ #\n# #\n# PyGithub is free software: you can redistribute it and\/or modify it under #\n# the terms of the GNU Lesser General Public License as published by the Free #\n# Software Foundation, either version 3 of the License, or (at your option) #\n# any later version. #\n# #\n# PyGithub is distributed in the hope that it will be useful, but WITHOUT ANY #\n# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS #\n# FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more #\n# details. #\n# #\n# You should have received a copy of the GNU Lesser General Public License #\n# along with PyGithub. If not, see <http:\/\/www.gnu.org\/licenses\/>. #\n# #\n################################################################################\n\nimport textwrap\n\nimport setuptools\n\nversion = \"1.55\"\n\n\nif __name__ == \"__main__\":\nsetuptools.setup(\nname=\"PyGithub\",\nversion=version,\ndescription=\"Use the full Github API v3\",\nauthor=\"Vincent Jacques\",\nauthor_email=\"vincent@vincent-jacques.net\",\nurl=\"https:\/\/github.com\/pygithub\/pygithub\",\nproject_urls={\n\"Documentation\": \"http:\/\/pygithub.readthedocs.io\/en\/latest\/\",\n\"Source\": \"https:\/\/github.com\/pygithub\/pygithub\",\n\"Tracker\": \"https:\/\/github.com\/pygithub\/pygithub\/issues\",\n},\nlong_description=textwrap.dedent(\n\"\"\"\\\n(Very short) Tutorial\n=====================\n\nFirst create a Github instance::\n\nfrom github import Github\n\n# using username and password\ng = Github(\"user\", \"password\")\n\n# or using an access token\ng = Github(\"access_token\")\n\nThen play with your Github objects::\n\nfor repo in g.get_user().get_repos():\nprint(repo.name)\nrepo.edit(has_wiki=False)\n\nReference documentation\n=======================\n\nSee http:\/\/pygithub.readthedocs.io\/en\/latest\/\"\"\"\n),\npackages=[\"github\"],\npackage_data={\"github\": [\"py.typed\", \"*.pyi\"]},\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Web Environment\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Topic :: Software Development\",\n],\npython_requires=\">=3.6\",\ninstall_requires=[\n\"deprecated\",\n\"pyjwt>=2.0\",\n\"pynacl>=1.4.0\",\n\"requests>=2.14.0\",\n],\nextras_require={\"integrations\": [\"cryptography\"]},\ntests_require=[\"cryptography\", \"httpretty>=1.0.3\"],\n)\n"
    },
    {
        "package_name": "pyinstrument_cext-0.2.4",
        "file_list": "LICENSE MANIFEST.in PKG-INFO pyinstrument_cext.c dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup, find_packages, Extension\nimport sys\n\nsetup(\nname=\"pyinstrument_cext\",\next_modules=[Extension('pyinstrument_cext', sources=['pyinstrument_cext.c'])],\nversion=\"0.2.4\",\ndescription=\"A CPython extension supporting pyinstrument\",\nauthor='Joe Rickerby',\nauthor_email='joerick@mac.com',\nurl='https:\/\/github.com\/joerick\/pyinstrument_cext',\nkeywords=['profiling', 'profile', 'profiler', 'statistical', 'setstatprofile'],\nzip_safe=False,\ntest_suite='nose.collector',\ntests_require=['nose'],\n)\n"
    },
    {
        "package_name": "pyjsparser-2.7.1",
        "file_list": "PKG-INFO parser.py pyjsparserdata.py std_nodes.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "try:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\nsetup(\nname='pyjsparser',\nversion='2.7.1',\npackages=['pyjsparser'],\nurl='https:\/\/github.com\/PiotrDabkowski\/pyjsparser',\ninstall_requires=[],\nlicense='MIT',\nauthor='Piotr Dabkowski',\nauthor_email='piodrus@gmail.com',\ndescription='Fast javascript parser (based on esprima.js)')\n"
    },
    {
        "package_name": "PyKCS11-1.5.10",
        "file_list": "Changes.txt COPYING dev-requirements.txt api.rst conf.py generate.sh index.rst license.rst Makefile samples.rst Makefile Makefile.win32 MANIFEST.in PKG-INFO __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt pykcs11.rc README.md resource.h run_test.py destroy_by_ID.py dumpit.py ec_generate.py ec_signature.py encrypt.py events.py generate.py genkeypair_import_cert.py getinfo.py dumpit.py InitTokenPin.py rand.py test.py test1.py modulus.py rsa_encrypt.py signature.py unblock.py setup.cfg setup.py ck_attribute_smart.cpp ck_attribute_smart.h dyn_generic.h dyn_unix.c dyn_win32.c LowLevel.py pkcs11.h pkcs11lib.cpp pkcs11lib.h pykcs11.cpp pykcs11.h pykcs11.i pykcs11string.cpp pykcs11string.h stdafx.cpp stdafx.h utility.cpp utility.h test_asymetric.py test_asymetric_ECC.py test_asymetric_gost.py test_CK.py test_ckbytelist.py test_digest.py test_exception.py test_info.py test_init.py test_load.py test_LowLevel.py test_objects.py test_pin.py test_random.py test_symetric.py test_wrap.py tox.ini",
        "setup.py": "#! \/usr\/bin\/env python\n\n# python setup.py install --root=\/tmp\/p\n# PYTHONPATH=\/tmp\/p\/usr\/lib\/python2.4\/site-packages python test.py\n\nfrom setuptools import setup, Extension\nfrom distutils.command.build import build\nfrom distutils.file_util import copy_file\nfrom sys import version_info as pyver\nfrom os import path, system\nimport platform\n\ndescription = \"\"\"A complete PKCS#11 wrapper for Python.\nYou can use any PKCS#11 (aka CryptoKi) module such as the PSM which\ncomes as part of mozilla or the various modules supplied by vendors of\nhardware crypto tokens, and almost all PKCS#11 functions and data types.\nThe wrapper has been generated with the help of the SWIG compiler.\"\"\"\n\nclassifiers = [\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: GNU General Public License (GPL)\",\n\"Natural Language :: English\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: OS Independent\",\n\"Operating System :: Unix\",\n\"Programming Language :: C\",\n\"Programming Language :: C++\",\n\"Programming Language :: Python\",\n\"Topic :: Security :: Cryptography\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n]\n\nlib_dirs = []\ninc_dirs = [\"src\"]\n# some OS, such as FreeBSD, uses \/usr\/local folders\nif path.exists(\"\/usr\/local\"):\nlib_dirs.append(\"\/usr\/local\/lib\")\ninc_dirs.append(\"\/usr\/local\/include\")\nsource_files = [\n\"src\/ck_attribute_smart.cpp\",\n\"src\/pkcs11lib.cpp\",\n\"src\/pykcs11string.cpp\",\n\"src\/utility.cpp\",\n\"src\/pykcs11.i\",\n\"src\/pykcs11.cpp\",\n]\ndefine_macros = []\nextra_compile_args = []\nextra_link_args = []\nif platform.system().lower() == \"windows\":\nsource_files.append(\"src\/dyn_win32.c\")\nsource_files.append(\"pykcs11.rc\")\nlibraries_val = [\"python%d%d\" % pyver[:2]]\nextra_compile_args = [\"\/Fdvc70.pdb\", \"\/Zi\", \"\/GR\", \"\/EHsc\"]\nextra_link_args = [\n\"\/DEBUG\",\n\"\/PDB:_LowLevel.pdb\",\n\"\/SUBSYSTEM:WINDOWS\",\n\"\/OPT:REF\",\n\"\/OPT:ICF\",\n]\nelse:\nsource_files.append(\"src\/dyn_unix.c\")\nlibraries_val = []\n\n\nclass my_build(build):\ndef run(self):\nself.run_command(\"build_ext\")\ncopy_file(\"src\/LowLevel.py\", \"PyKCS11\")\nself.run_command(\"build_py\")\nbuild.run(self)\n\n\nsetup(\nname=\"PyKCS11\",\nversion=\"1.5.10\",\ndescription=\"A Full PKCS#11 wrapper for Python\",\nkeywords=\"crypto,pki,pkcs11,c++\",\nclassifiers=classifiers,\nplatforms=\"Win32 Unix\",\nlong_description=description,\nauthor=\"Giuseppe Amato (Midori)\",\nauthor_email=\"paipai@tiscali.it\",\nmaintainer=\"Ludovic Rousseau\",\nmaintainer_email=\"ludovic.rousseau@free.fr\",\nurl=\"https:\/\/github.com\/LudovicRousseau\/PyKCS11\",\ndownload_url=\"http:\/\/sourceforge.net\/projects\/pkcs11wrap\/files\/pykcs11\/\",\nlicense=\"GPL\",\ncmdclass={\"build\": my_build},\next_modules=[\nExtension(\n\"PyKCS11._LowLevel\",\nsources=source_files,\ninclude_dirs=inc_dirs,\nlibrary_dirs=lib_dirs,\nlibraries=libraries_val,\ndefine_macros=define_macros,\nswig_opts=[\"-c++\"],\nextra_compile_args=extra_compile_args,\nextra_link_args=extra_link_args,\n)\n],\npy_modules=[\"PyKCS11.__init__\", \"PyKCS11.LowLevel\"],\n)\n"
    },
    {
        "package_name": "PyKMIP-0.10.0",
        "file_list": "attributes.py config_helper.py enums.py exceptions.py attributes.py attribute_values.py credentials.py request.py response.py __init__.py secrets.py __init__.py contents.py messages.py activate.py archive.py base.py cancel.py check.py create.py create_key_pair.py decrypt.py delete_attribute.py derive_key.py destroy.py discover_versions.py encrypt.py get.py get_attributes.py get_attribute_list.py get_usage_allocation.py locate.py mac.py modify_attribute.py obtain_lease.py poll.py query.py recover.py register.py rekey.py rekey_key_pair.py revoke.py set_attribute.py sign.py signature_verify.py __init__.py __init__.py misc.py objects.py policy.py primitives.py secrets.py utils.py __init__.py server.crt server.key create.py create_key_pair.py decrypt.py delete_attribute.py derive_key.py destroy.py encrypt.py get.py get_attributes.py get_attribute_list.py locate.py mac.py modify_attribute.py register_certificate.py register_opaque_object.py register_private_key.py register_public_key.py register_secret_data.py register_split_key.py register_symmetric_key.py revoke.py set_attribute.py sign.py signature_verify.py __init__.py activate.py create.py create_key_pair.py destroy.py discover_versions.py get.py locate.py query.py register.py revoke.py __init__.py utils.py __init__.py client.py exceptions.py factory.py objects.py sqltypes.py __init__.py auth.py kmip_client.py kmip_protocol.py results.py api.py slugs.py utils.py __init__.py config.py api.py engine.py __init__.py engine.py monitor.py policy.py server.py session.py __init__.py __init__.py conftest.py test_authentication.py __init__.py __init__.py conftest.py test_integration.py test_kmip_client.py test_proxykmipclient.py __init__.py __init__.py test_application_specific_information.py test_attributes.py test_digest.py __init__.py test_payload.py test_request.py test_response.py __init__.py test_attribute.py test_attribute_values.py __init__.py test_authentication.py test_protocol_version.py __init__.py test_activate.py test_archive.py test_cancel.py test_check.py test_create.py test_create_key_pair.py test_decrypt.py test_delete_attribute.py test_derive_key.py test_destroy.py test_discover_versions.py test_encrypt.py test_get.py test_get_attributes.py test_get_attribute_list.py test_get_usage_allocation.py test_locate.py test_mac.py test_modify_attribute.py test_obtain_lease.py test_poll.py test_query.py test_recover.py test_register.py test_rekey.py test_rekey_key_pair.py test_revoke.py test_set_attribute.py test_sign.py test_signature_verify.py __init__.py test_messages.py test_operations.py __init__.py test_misc.py test_server_information.py __init__.py test_attribute.py test_credentials.py test_current_attribute.py test_extension_information.py test_new_attribute.py test_objects.py __init__.py test_base.py test_big_integer.py test_boolean.py test_byte_string.py test_date_time.py test_enumeration.py test_integer.py test_interval.py test_long_integer.py test_text_string.py __init__.py test_certificate.py test_split_key.py __init__.py test_config_helper.py test_enums.py test_policy.py test_utils.py __init__.py test_application_specific_information.py test_certificate.py test_cryptographic_object.py test_key.py test_managed_object.py test_object_group.py test_opaque_object.py test_private_key.py test_public_key.py test_secret_data.py test_split_key.py test_sqltypes.py test_symmetric_key.py test_x509_certificate.py __init__.py test_client.py test_exceptions.py test_factory.py __init__.py test_slugs.py test_utils.py __init__.py test_engine.py __init__.py test_config.py test_engine.py test_monitor.py test_policy.py test_server.py test_session.py __init__.py test_auth.py test_kmip_client.py test_kmip_protocol.py __init__.py test_kmip.py __init__.py __init__.py version.py __init__.py LICENSE.txt MANIFEST.in PKG-INFO dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n# implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport re\nimport setuptools\n\n# Dynamically set __version__\nversion_path = os.path.join(\nos.path.dirname(os.path.realpath(__file__)),\n\"kmip\",\n\"version.py\"\n)\nwith open(version_path, 'r') as f:\nm = re.search(\nr\"^__version__ = \\\"(\\d+\\.\\d+\\..*)\\\"$\",\nf.read(),\nre.MULTILINE\n)\n__version__ = m.group(1)\n\nsetuptools.setup(\nname='PyKMIP',\nversion=__version__,\ndescription='KMIP library',\nkeywords='KMIP',\nauthor='Peter Hamilton',\nauthor_email='peter.hamilton@jhuapl.edu',\nurl='https:\/\/github.com\/OpenKMIP\/PyKMIP',\nlicense='Apache License, Version 2.0',\npackages=setuptools.find_packages(exclude=[\"kmip.tests\", \"kmip.tests.*\"]),\npackage_data={'kmip': ['kmipconfig.ini', 'logconfig.ini'],\n'kmip.demos': ['certs\/server.crt', 'certs\/server.key']},\nentry_points={\n'console_scripts':[\n'pykmip-server = kmip.services.server.server:main'\n]\n},\ninstall_requires=[\n\"cryptography\",\n\"enum-compat\",\n\"requests\",\n\"six\",\n\"sqlalchemy\"\n],\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Natural Language :: English\",\n\"Operating System :: POSIX\",\n\"Operating System :: POSIX :: BSD\",\n\"Operating System :: POSIX :: Linux\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n],\n)\n"
    },
    {
        "package_name": "pyknp-0.6.1",
        "file_list": "AUTHORS COPYING PKG-INFO dep.py mrph.py phrase.py scorer.py __init__.py juman.py mlist.py morpheme.py __init__.py blist.py bunsetsu.py drawtree.py features.py knp.py pas.py rel.py syngraph.py tag.py tlist.py __init__.py knp_drawtree.py analyzer.py loader.py process.py __init__.py __init__.py pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['pyknp',\n'pyknp.evaluate',\n'pyknp.juman',\n'pyknp.knp',\n'pyknp.scripts',\n'pyknp.utils']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['six']\n\nentry_points = \\\n{'console_scripts': ['knp-drawtree = pyknp.scripts.knp_drawtree:main']}\n\nsetup_kwargs = {\n'name': 'pyknp',\n'version': '0.6.1',\n'description': 'Python module for JUMAN\/KNP',\n'long_description': '# pyknp: Python Module for JUMAN++\/KNP\\n\\n\u5f62\u614b\u7d20\u89e3\u6790\u5668JUMAN++(JUMAN)\u3068\u69cb\u6587\u89e3\u6790\u5668KNP\u306ePython\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0 (Python2\u7cfb\u30683\u7cfb\u306e\u4e21\u65b9\u306b\u5bfe\u5fdc)\u3002\\n\\n## Requirements\\n- Python\\n - Verified Versions: 2.7.15, 3.7.11\\n- \u5f62\u614b\u7d20\u89e3\u6790\u5668 [JUMAN++](http:\/\/nlp.ist.i.kyoto-u.ac.jp\/index.php?JUMAN++) [[EN](http:\/\/nlp.ist.i.kyoto-u.ac.jp\/EN\/index.php?JUMAN++)]\\n(or [JUMAN](http:\/\/nlp.ist.i.kyoto-u.ac.jp\/index.php?JUMAN)[[EN](http:\/\/nlp.ist.i.kyoto-u.ac.jp\/EN\/index.php?JUMAN)])\\n - JUMAN++ \u306fJUMAN\u306e\u5f8c\u7d99\u306b\u3042\u305f\u308b\u5f62\u614b\u7d20\u89e3\u6790\u5668\\n- \u69cb\u6587\u89e3\u6790\u5668 [KNP](http:\/\/nlp.ist.i.kyoto-u.ac.jp\/index.php?KNP) [[EN](http:\/\/nlp.ist.i.kyoto-u.ac.jp\/EN\/index.php?KNP)]\\n\\n## Installation\\n```\\n$ pip install pyknp\\n```\\n\\n## Documents\\nhttps:\/\/pyknp.readthedocs.io\/en\/latest\/\\n\\n\\n## Authors\/Contact\\n\u4eac\u90fd\u5927\u5b66 \u9ed2\u6a4b\u30fb\u6cb3\u539f\u7814\u7a76\u5ba4 (contact@nlp.ist.i.kyoto-u.ac.jp)\\n- John Richardson, Tomohide Shibata, Yuta Hayashibe, Tomohiro Sakaguchi\\n',\n'author': 'Kurohashi-Kawahara Lab, Kyoto Univ',\n'author_email': 'contact@nlp.ist.i.kyoto-u.ac.jp',\n'maintainer': 'Nobuhiro Ueda',\n'maintainer_email': 'ueda@nlp.ist.i.kyoto-u.ac.jp',\n'url': 'https:\/\/github.com\/ku-nlp\/pyknp',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'entry_points': entry_points,\n'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "pylint-django-2.5.3",
        "file_list": "CHANGELOG.rst CONTRIBUTORS.md LICENSE MANIFEST.in PKG-INFO __init__.py auth_user.py django_installed.py foreign_key_strings.py forms.py json_response.py migrations.py models.py __init__.py compat.py plugin.py external_django_tables2_noerror_meta_class.py external_drf_noerror_serializer.py external_drf_noerror_serializer.rc external_factory_boy_noerror.py external_factory_boy_noerror.rc external_model_utils_noerror_override_manager.py external_model_utils_noerror_override_manager.rc external_psycopg2_noerror_postgres_fields.py external_psycopg2_noerror_postgres_fields.rc external_tastypie_noerror_foreign_key.py func_hard_coded_auth_user.py func_hard_coded_auth_user.txt func_json_response.py func_json_response.txt func_modelform_exclude.py func_modelform_exclude.txt func_model_does_not_use_unicode_py33.py func_model_does_not_use_unicode_py33.txt func_model_no_explicit_unicode_str_compat.py func_model_no_explicit_unicode_str_compat.txt func_noerror_classviews.py func_noerror_duplicate_except_doesnotexist.py func_noerror_factory_post_generation.py func_noerror_foreignkeys.py func_noerror_foreign_key_attributes.py func_noerror_foreign_key_ids.py func_noerror_foreign_key_key_cls_unbound.py func_noerror_foreign_key_package.py func_noerror_foreign_key_sets.py func_noerror_forms_py33.py func_noerror_formview_ancestors.py func_noerror_form_fields.py func_noerror_generic_foreign_key.py func_noerror_gettext_lazy_format.py func_noerror_ignore_meta_subclass.py func_noerror_import_q.py func_noerror_issue_46.py func_noerror_managers_return_querysets.py func_noerror_manytomanyfield.py func_noerror_models_py33.py func_noerror_model_fields.py func_noerror_model_methods.py func_noerror_model_objects.py func_noerror_model_unicode_callable.py func_noerror_model_unicode_lambda.py func_noerror_protected_meta_access.py func_noerror_string_foreignkey.py func_noerror_style_members.py func_noerror_test_wsgi_request.py func_noerror_ugettext_lazy_format.py func_noerror_unicode_py2_compatible.py func_noerror_urls.py func_noerror_uuid_field.py func_noerror_views.py func_noerror_wsgi.py func_unused_arguments.py func_unused_arguments.txt 0001_noerror_initial.py 0002_new_column.py 0002_new_column.txt 0003_without_backwards.py 0003_without_backwards.txt 0004_noerror_with_backwards.py __init__.py author.py func_noerror_foreign_key_key_cls_unbound_in_sam __init__.py apps.py models.py __init__.py __init__.py settings.py testing_pylint.rc test_django_not_installed.sh test_func.py __init__.py fields.py foreignkey.py django_db_models_fields_files.py django_utils_translation.py __init__.py __init__.py utils.py __init__.py __pkginfo__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst SECURITY.md setup.cfg setup.py",
        "setup.py": "# -*- coding: UTF-8 -*-\n\"\"\"\nSetup module for Pylint plugin for Django.\n\"\"\"\nfrom setuptools import find_packages, setup\n\nwith open(\"README.rst\", encoding=\"utf-8\") as readme, open(\"CHANGELOG.rst\", encoding=\"utf-8\") as changelog:\nLONG_DESCRIPTION = readme.read() + \"\\n\" + changelog.read()\n\nsetup(\nname=\"pylint-django\",\nurl=\"https:\/\/github.com\/PyCQA\/pylint-django\",\nauthor=\"landscape.io\",\nauthor_email=\"code@landscape.io\",\ndescription=\"A Pylint plugin to help Pylint understand the Django web framework\",\nlong_description=LONG_DESCRIPTION,\nversion=\"2.5.3\",\npackages=find_packages(),\ninclude_package_data=True,\ninstall_requires=[\n\"pylint-plugin-utils>=0.7\",\n\"pylint>=2.0,<3\",\n],\nextras_require={\n\"with_django\": [\"Django\"],\n\"for_tests\": [\n\"django_tables2\",\n\"factory-boy\",\n\"coverage\",\n\"pytest\",\n\"wheel\",\n\"django-tastypie\",\n\"pylint>=2.13\",\n],\n},\nlicense=\"GPLv2\",\nclassifiers=[\n\"Environment :: Console\",\n\"Intended Audience :: Developers\",\n\"Operating System :: Unix\",\n\"Topic :: Software Development :: Quality Assurance\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Framework :: Django :: 1.11\",\n\"Framework :: Django :: 2.0\",\n\"Framework :: Django :: 2.2\",\n\"Framework :: Django :: 3.0\",\n\"Framework :: Django :: 3.1\",\n\"Framework :: Django :: 3.2\",\n],\nkeywords=[\"pylint\", \"django\", \"plugin\"],\nzip_safe=False,\nproject_urls={\n\"Changelog\": \"https:\/\/github.com\/PyCQA\/pylint-django\/blob\/master\/CHANGELOG.rst\",\n},\n)\n"
    },
    {
        "package_name": "pylint-plugin-utils-0.7",
        "file_list": "LICENSE MANIFEST.in PKG-INFO __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "# -*- coding: UTF-8 -*-\nfrom setuptools import find_packages, setup\n\n_version = \"0.7\"\n_packages = find_packages(exclude=[\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"])\n\n_short_description = \"Utilities and helpers for writing Pylint plugins\"\n\n_classifiers = [\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Console\",\n\"Intended Audience :: Developers\",\n\"Operating System :: Unix\",\n\"Topic :: Software Development :: Quality Assurance\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n]\n\nsetup(\nname=\"pylint-plugin-utils\",\nurl=\"https:\/\/github.com\/PyCQA\/pylint-plugin-utils\",\nauthor=\"Python Code Quality Authority\",\nauthor_email=\"code-quality@python.org\",\ndescription=_short_description,\nversion=_version,\ninstall_requires=[\"pylint>=1.7\"],\npackages=_packages,\nlicense=\"GPLv2\",\nclassifiers=_classifiers,\nkeywords=\"pylint plugin helpers\",\npython_requires=\">=3.6.2\",\n)\n"
    },
    {
        "package_name": "pylzma-0.5.0",
        "file_list": "CHANGELOG.md THANKS.md USAGE.md ez_setup.py LICENSE MANIFEST.in PKG-INFO py7zlib.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.md RELEASE-VERSION ci-install.sh pylzma.spec setup.cfg setup.py copying.txt LzmaCompatDecode.c LzmaCompatDecode.h pylzma.c pylzma.h pylzma_aes.c pylzma_aes.h pylzma_compress.c pylzma_compress.h pylzma_compressfile.c pylzma_compressfile.h pylzma_compressobj.c pylzma_compressobj.h pylzma_decompress.c pylzma_decompress.h pylzma_decompressobj.c pylzma_decompressobj.h pylzma_decompressobj_compat.c pylzma_decompressobj_compat.h pylzma_decompress_compat.c pylzma_decompress_compat.h pylzma_streams.c pylzma_streams.h 7z.h 7zAlloc.c 7zAlloc.h 7zArcIn.c 7zBuf.c 7zBuf.h 7zBuf2.c 7zCrc.c 7zCrc.h 7zCrcOpt.c 7zDec.c 7zFile.c 7zFile.h 7zStream.c 7zTypes.h 7zVersion.h Aes.c Aes.h AesOpt.c Alloc.c Alloc.h Bcj2.c Bcj2.h Bcj2Enc.c Bra.c Bra.h Bra86.c BraIA64.c Compiler.h CpuArch.c CpuArch.h Delta.c Delta.h DllSecur.c DllSecur.h LzFind.c LzFind.h LzFindMt.c LzFindMt.h LzHash.h Lzma2Dec.c Lzma2Dec.h Lzma2DecMt.c Lzma2DecMt.h Lzma2Enc.c Lzma2Enc.h Lzma86.h Lzma86Dec.c Lzma86Enc.c LzmaDec.c LzmaDec.h LzmaEnc.c LzmaEnc.h LzmaLib.c LzmaLib.h MtCoder.c MtCoder.h MtDec.c MtDec.h Ppmd.h Ppmd7.c Ppmd7.h Ppmd7Dec.c Ppmd7Enc.c Precomp.h RotateDefs.h Sha256.c Sha256.h Sort.c Sort.h Threads.c Threads.h 7zMain.c Precomp.c Precomp.h LzmaUtil.c LzmaLibExports.c Precomp.c Precomp.h SfxSetup.c Xz.c Xz.h XzCrc64.c XzCrc64.h XzCrc64Opt.c XzDec.c XzEnc.c XzEnc.h XzIn.c 7zC.txt 7zFormat.txt history.txt installer.txt lzma-history.txt lzma-sdk.txt lzma-specification.txt lzma.txt Methods.txt bugzilla_16.7z bugzilla_4.7z bzip2.7z copy.7z deflate.7z deflate64.7z empty.7z encrypted-names.7z encrypted-short.7z encrypted.7z github_14.7z github_14_multi.7z github_33.7z github_37_dummy.7z github_43.7z github_53.7z non_solid.7z regress_1.7z solid.7z test-issue-43.7z umlaut-non_solid.7z umlaut-solid.7z test_7zfiles.py test_compatibility.py test_pylzma.py test_usage.py __init__.py version.py",
        "setup.py": "#!\/usr\/bin\/python -u\n#\n# Python Bindings for LZMA\n#\n# Copyright (c) 2004-2015 by Joachim Bauch, mail@joachim-bauch.de\n# 7-Zip Copyright (C) 1999-2010 Igor Pavlov\n# LZMA SDK Copyright (C) 1999-2010 Igor Pavlov\n#\n# This library is free software; you can redistribute it and\/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation; either\n# version 2.1 of the License, or (at your option) any later version.\n#\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n#\n# $Id$\n#\nimport sys, os\nfrom warnings import warn\nfrom distutils import log\nfrom distutils.command.build_ext import build_ext as _build_ext\nfrom version import get_git_version\n\ntry:\nfrom setuptools import setup, Extension\nexcept ImportError:\nfrom ez_setup import use_setuptools\nuse_setuptools()\n\nfrom setuptools import setup, Extension\n\nclass UnsupportedPlatformWarning(Warning):\npass\n\ntry:\nunicode\nexcept NameError:\n# Python 3.x\nclass unicode(object):\ndef __new__(cls, s):\nif isinstance(s, str):\nreturn s\nreturn s and s.decode('utf-8') or None\n\nversion = get_git_version()\nif version and not isinstance(version, unicode):\nversion = unicode(version)\n\n# set this to any true value to enable multithreaded compression\nENABLE_MULTITHREADING = True\n\n# set this to any true value to add the compatibility decoder\n# from version 0.0.3 to be able to decompress strings without\n# the end of stream mark and you don't know their lengths\nENABLE_COMPATIBILITY = True\n\n# compile including debug symbols on Windows?\nCOMPILE_DEBUG = False\n\n# are we running on Windows?\nIS_WINDOWS = sys.platform in ('win32', )\n\nlibraries = []\nif IS_WINDOWS:\nlibraries += ['user32', 'oleaut32']\n\ninclude_dirs = [\n'src\/sdk\/C',\n]\n\nif sys.platform == 'darwin':\n# additional include directories are required when compiling on Darwin platforms\ninclude_dirs += [\n\"\/var\/include\",\n]\n\nlibrary_dirs = []\n\n# platforms that multithreaded compression is supported on\nmt_platforms = (\n'win32',\n)\n\nif IS_WINDOWS:\n# don't try to import MSVC compiler on non-windows platforms\n# as this triggers unnecessary warnings\nfrom distutils.msvccompiler import MSVCCompiler\nelse:\nclass MSVCCompiler(object):\n# dummy marker class\npass\n\nclass build_ext(_build_ext):\n\ndef build_extension(self, ext):\nself.with_mt = ENABLE_MULTITHREADING\nif self.with_mt and not sys.platform in mt_platforms:\nwarn(\"\"\"\\\nMultithreading is not supported on the platform \"%s\",\nplease contact mail@joachim-bauch.de for more informations.\"\"\" % (sys.platform), UnsupportedPlatformWarning)\nself.with_mt = False\n\nif self.with_mt:\nlog.info('adding support for multithreaded compression')\next.define_macros.append(('COMPRESS_MF_MT', 1))\next.sources += (\n'src\/sdk\/C\/LzFindMt.c',\n'src\/sdk\/C\/MtCoder.c',\n'src\/sdk\/C\/MtDec.c',\n'src\/sdk\/C\/Threads.c',\n)\nelse:\next.define_macros.append(('_7ZIP_ST', 1))\n\nif isinstance(self.compiler, MSVCCompiler):\n# set flags only available when using MSVC\next.extra_link_args.append('\/MANIFEST')\nif COMPILE_DEBUG:\next.extra_compile_args.append('\/Zi')\next.extra_compile_args.append('\/MTd')\next.extra_link_args.append('\/DEBUG')\nelse:\next.extra_compile_args.append('\/MT')\n\n_build_ext.build_extension(self, ext)\n\ndescr = \"Python bindings for the LZMA library by Igor Pavlov.\"\nlong_descr = \"\"\"PyLZMA provides a platform independent way to read and write data\nthat has been compressed or can be decompressed by the LZMA library by Igor Pavlov.\"\"\"\nmodules = ['py7zlib']\nc_files = [\n'src\/pylzma\/pylzma.c',\n'src\/pylzma\/pylzma_aes.c',\n'src\/pylzma\/pylzma_compress.c',\n'src\/pylzma\/pylzma_compressfile.c',\n'src\/pylzma\/pylzma_decompress.c',\n'src\/pylzma\/pylzma_decompressobj.c',\n'src\/pylzma\/pylzma_streams.c',\n]\ncompile_args = []\nlink_args = []\nmacros = [\n('PY_SSIZE_T_CLEAN', 1),\n]\nlzma_files = (\n'src\/sdk\/C\/Aes.c',\n'src\/sdk\/C\/AesOpt.c',\n'src\/sdk\/C\/Bra.c',\n'src\/sdk\/C\/Bra86.c',\n'src\/sdk\/C\/BraIA64.c',\n'src\/sdk\/C\/CpuArch.c',\n'src\/sdk\/C\/LzFind.c',\n'src\/sdk\/C\/LzmaDec.c',\n'src\/sdk\/C\/LzmaEnc.c',\n'src\/sdk\/C\/Lzma2Dec.c',\n'src\/sdk\/C\/Lzma2Enc.c',\n'src\/sdk\/C\/Sha256.c',\n)\nif ENABLE_COMPATIBILITY:\nc_files += (\n'src\/pylzma\/pylzma_decompress_compat.c',\n'src\/pylzma\/pylzma_decompressobj_compat.c',\n)\nlzma_files += (\n'src\/compat\/LzmaCompatDecode.c',\n)\nmacros.append(('WITH_COMPAT', 1))\n\nif version:\nmacros.append(('PYLZMA_VERSION', version))\n\nc_files += [os.path.normpath(os.path.join('.', x)) for x in lzma_files]\nextens = [\nExtension('pylzma', c_files, include_dirs=include_dirs, libraries=libraries,\nlibrary_dirs=library_dirs, define_macros=macros, extra_compile_args=compile_args,\nextra_link_args=link_args),\n]\n\ninstall_requires = []\ntests_require = []\n\nsetup(\nname = \"pylzma\",\nversion = version,\ndescription = descr,\nauthor = \"Joachim Bauch\",\nauthor_email = \"mail@joachim-bauch.de\",\nurl = \"http:\/\/www.joachim-bauch.de\/projects\/pylzma\/\",\ndownload_url = \"http:\/\/pypi.python.org\/pypi\/pylzma\/\",\nlicense = 'LGPL',\nkeywords = \"lzma compression\",\nlong_description = long_descr,\nclassifiers = [\n'Development Status :: 5 - Production\/Stable',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)',\n'Operating System :: OS Independent',\n],\npy_modules = modules,\next_modules = extens,\ncmdclass = {\n'build_ext': build_ext,\n},\ninstall_requires = install_requires,\nextras_require = {\n'decrypt': [],\n},\ntests_require = tests_require,\ntest_suite = 'tests.suite',\nzip_safe = False,\n)\n"
    },
    {
        "package_name": "pymiscutils-0.3.14",
        "file_list": "base.py context.py functions.py mixin.py parser.py __init__.py PKG-INFO dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup, find_packages\nfrom os import path\n\n__version__ = \"0.3.14\"\n\nhere = path.abspath(path.dirname(__file__))\n\nwith open(path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\nlong_description = f.read()\n\nwith open(path.join(here, \"requirements.txt\"), encoding=\"utf-8\") as f:\ndependencies = [line for line in f if line]\n\nsetup(\nname=\"pymiscutils\",\nversion=__version__,\ndescription=\"Provides a wide range of useful classes and functions.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/matthewgdv\/miscutils\",\nlicense=\"MIT\",\nclassifiers=[\n\"Development Status :: 3 - Alpha\",\n\"Intended Audience :: Developers\",\n\"Programming Language :: Python :: 3.8\",\n],\npackages=find_packages(exclude=[\"tests*\"]),\ninstall_requires=dependencies,\nauthor=\"Matt GdV\",\nauthor_email=\"matthewgdv@gmail.com\"\n)\n"
    },
    {
        "package_name": "pymobiledetect-1.3.2",
        "file_list": "detect.py Mobile_Detect.json test_user_agents.json test_user_agents.py __init__.py version.py __init__.py PKG-INFO dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README setup.cfg setup.py",
        "setup.py": "import os\nfrom setuptools import setup\n\n\ndef read(fname):\nwith open(os.path.join(os.path.dirname(__file__), fname)) as f:\nreturn f.read()\n\n\ndef get_version():\nwith open(\"mobiledetect\/version.py\") as f:\nline = f.readline()\nversion = line.split(\"=\")[1].strip().strip('\"')\nreturn version\n\n\nsetup(\nname=\"pymobiledetect\",\nversion=get_version(),\nauthor=\"Bas van Oostveen\",\nauthor_email=\"v.oostveen@gmail.com\",\ndescription=\"Detect mobile and tablet browsers\",\nlicense=\"AGPL\",\nkeywords=\"mobile tabled detect browser\",\nurl=\"https:\/\/bitbucket.org\/trbs\/pymobiledetect\/overview\",\npackages=['mobiledetect', 'mobiledetect.test'],\npackage_data={'mobiledetect': ['Mobile_Detect.json'], 'mobiledetect.test': ['test_user_agents.json']},\ntest_suite='nose.collector',\nlong_description=read('README'),\ninstall_requires=[\n'six',\n],\ntests_require=[\n'six',\n'nose'\n],\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Web Environment\",\n\"Framework :: Django\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Topic :: Internet :: WWW\/HTTP\",\n\"Topic :: Internet :: WWW\/HTTP :: WSGI :: Middleware\",\n\"Topic :: Software Development :: Libraries\",\n],\n)\n"
    },
    {
        "package_name": "pymodbus-2.5.3",
        "file_list": "CHANGELOG.rst LICENSE MANIFEST.in PKG-INFO bit_read_message.py bit_write_message.py __init__.py asynchronous.py __init__.py serial.py tcp.py tls.py udp.py __init__.py mixins.py __init__.py serial.py tcp.py thread.py tls.py __init__.py __init__.py udp.py __init__.py common.py sync.py sync_diag.py __init__.py compat.py constants.py context.py redis_datastore.py sql_datastore.py __init__.py remote.py store.py __init__.py device.py diag_message.py events.py exceptions.py factory.py file_message.py ascii_framer.py binary_framer.py rtu_framer.py socket_framer.py tls_framer.py __init__.py interfaces.py ptwisted.py __init__.py mei_message.py other_message.py payload.py pdu.py register_read_message.py register_write_message.py completer.py helper.py main.py mclient.py __init__.py cli.py main.py __init__.py __init__.py asynchronous.py async_io.py default_config.py main.py __init__.py sync.py __init__.py transaction.py utilities.py version.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe README.rst requirements.txt setup.cfg setup.py test_all_messages.py test_bit_read_messages.py test_bit_write_messages.py test_client_async.py test_client_async_asyncio.py test_client_async_tornado.py test_client_async_twisted.py test_client_common.py test_client_sync.py test_client_sync_diag.py test_datastore.py test_device.py test_diag_messages.py test_events.py test_exceptions.py test_factory.py test_file_message.py test_fixes.py test_framers.py test_interfaces.py test_mei_messages.py test_other_messages.py test_payload.py test_pdu.py test_ptwisted.py test_register_read_messages.py test_register_write_messages.py test_remote_datastore.py test_server_async.py test_server_asyncio.py test_server_context.py test_server_sync.py test_transaction.py test_utilities.py test_version.py",
        "setup.py": "#!\/usr\/bin\/env python\n\"\"\"\nInstalls pymodbus using distutils\n\nRun:\npython setup.py install\nto install the package from the source archive.\n\nFor information about setuptools\nhttp:\/\/peak.telecommunity.com\/DevCenter\/setuptools#new-and-changed-setup-keywords\n\"\"\"\n\n# --------------------------------------------------------------------------- #\n# initialization\n# --------------------------------------------------------------------------- #\ntry: # if not installed, install and proceed\nfrom setuptools import setup, find_packages\nexcept ImportError:\nfrom ez_setup import use_setuptools\nuse_setuptools()\nfrom setuptools import setup, find_packages\n\ntry:\nfrom setup_commands import command_classes\nexcept ImportError:\ncommand_classes = {}\nfrom pymodbus import __version__, __author__, __maintainer__\nfrom pymodbus.utilities import IS_PYTHON3\n\nCONSOLE_SCRIPTS = [\n'pymodbus.console=pymodbus.repl.client.main:main'\n]\nif IS_PYTHON3:\nCONSOLE_SCRIPTS.append('pymodbus.server=pymodbus.repl.server.main:server')\nwith open('requirements.txt') as reqs:\ninstall_requires = [\nline for line in reqs.read().split('\\n')\nif (line and not line.startswith('--'))\n]\ninstall_requires.append(\"pyserial >= 3.4\")\n# --------------------------------------------------------------------------- #\n# configuration\n# --------------------------------------------------------------------------- #\nsetup(\nname=\"pymodbus\",\nversion=__version__,\ndescription=\"A fully featured modbus protocol stack in python\",\nlong_description=\"\"\"\nPymodbus aims to be a fully implemented modbus protocol stack\nimplemented using twisted\/asyncio\/tornado.\nIts orignal goal was to allow simulation of thousands of modbus devices\non a single machine for monitoring software testing.\n\"\"\",\nclassifiers=[\n'Development Status :: 4 - Beta',\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n'Environment :: Console',\n'Environment :: X11 Applications :: GTK',\n'Framework :: Twisted',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: POSIX :: Linux',\n'Operating System :: Unix',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Topic :: System :: Networking',\n'Topic :: Utilities'\n],\nkeywords='modbus, twisted, scada',\nauthor=__author__,\nauthor_email='bashwork@gmail.com',\nmaintainer=__maintainer__,\nmaintainer_email='otlasanju@gmail.com',\nurl='https:\/\/github.com\/riptideio\/pymodbus\/',\nlicense='BSD-3-Clause',\npackages=find_packages(exclude=['examples', 'test']),\nexclude_package_data={'': ['examples', 'test', 'tools', 'doc']},\nplatforms=['Linux', 'Mac OS X', 'Win'],\ninclude_package_data=True,\nzip_safe=True,\npython_requires='>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*',\ninstall_requires=install_requires,\nextras_require={\n'quality': [\n'coverage >= 3.5.3',\n'nose >= 1.2.1',\n'mock >= 1.0.0',\n'pep8 >= 1.3.3'\n],\n'documents': ['sphinx >= 1.1.3',\n'sphinx_rtd_theme',\n'humanfriendly'],\n'twisted': [\n# using platform_python_implementation rather than\n# implementation_name for Python 2 support\n'Twisted[conch,serial]>=20.3.0; platform_python_implementation != \"PyPy\" or sys_platform != \"win32\"',\n# pywin32 isn't supported on pypy\n# https:\/\/github.com\/mhammond\/pywin32\/issues\/1289\n'Twisted[conch]>=20.3.0; platform_python_implementation == \"PyPy\" and sys_platform == \"win32\"',\n],\n'tornado': [\n'tornado == 4.5.3'\n],\n\n'repl:python_version <= \"2.7\"': [\n'click>=7.0',\n'prompt-toolkit==2.0.4',\n'pygments>=2.2.0'\n],\n'repl:python_version >= \"3.6\"': [\n'click>=7.0',\n'prompt-toolkit>=3.0.8',\n'pygments>=2.2.0',\n'aiohttp>=3.7.3',\n'pyserial-asyncio>=0.5'\n]\n},\nentry_points={\n'console_scripts': CONSOLE_SCRIPTS,\n},\ntest_suite='nose.collector',\ncmdclass=command_classes,\n)\n\n"
    },
    {
        "package_name": "pymoo-0.6.0",
        "file_list": "LICENSE Makefile MANIFEST.in PKG-INFO bracket.py genetic.py line.py local.py meta.py __init__.py hyperparameters.py age.py age2.py ctaea.py dnsga2.py moead.py nsga2.py nsga3.py rnsga2.py rnsga3.py rvea.py sms.py spea2.py unsga3.py __init__.py __init__.py brkga.py cmaes.py de.py direct.py es.py g3pcx.py ga.py ga_niching.py isres.py nelder.py optuna.py pattern.py pso.py pso_ep.py random_search.py sres.py __init__.py backtracking.py exp.py golden.py quadr_interp.py wolfe.py __init__.py __init__.py __init__.py config.py adaptive.py as_obj.py as_penalty.py eps.py from_bounds.py __init__.py algorithm.py callback.py crossover.py decision_making.py decomposition.py duplicate.py evaluator.py indicator.py individual.py infill.py initialization.py mating.py meta.py mixed.py mutation.py operator.py parameters.py plot.py population.py problem.py recorder.py repair.py replacement.py result.py sampling.py selection.py solution.py survival.py termination.py variable.py __init__.py calc_perpendicular_distance.cpp calc_perpendicular_distance.pyx decomposition.cpp decomposition.pyx hv.cpp hv.pyx info.cpp info.pyx non_dominated_sorting.cpp non_dominated_sorting.pyx stochastic_ranking.cpp stochastic_ranking.pyx defs.h hypervolume.cpp hypervolume.h __init__.py __init__.py aasf.py asf.py pbi.py perp_dist.py tchebicheff.py util.py weighted_sum.py __init__.py docs.py gde3.py __init__.py __init__.py factory.py automatic.py grad_autograd.py grad_complex.py grad_jax.py __init__.py __init__.py distance_indicator.py gd.py gd_plus.py exact.py exact_2d.py monte_carlo.py __init__.py igd.py igd_plus.py kktpm.py migd.py rmetric.py __init__.py compromise_programming.py high_tradeoff.py pseudo_weights.py __init__.py control.py binx.py dex.py erx.py expx.py hux.py nox.py ox.py pcx.py pntx.py sbx.py spx.py ux.py __init__.py bitflip.py gauss.py inversion.py nom.py pm.py rm.py __init__.py bounce_back.py bounds_repair.py inverse_penalty.py rounding.py to_bound.py vtype.py __init__.py lhs.py rnd.py __init__.py rnd.py tournament.py __init__.py __init__.py __init__.py optimize.py dyn.py cec2015.py df.py misc.py __init__.py functional.py cdtlz.py dcdtlz.py dtlz.py wfg.py __init__.py bnh.py carside.py clutch.py csi.py ctp.py dascmop.py kursawe.py modact.py mw.py omnitest.py osy.py srn.py sympart.py tnk.py truss2d.py welded_beam.py wrm.py zdt.py __init__.py multi_to_single.py ackley.py cantilevered_beam.py flowshop_scheduling.py g.py griewank.py himmelblau.py knapsack.py mopta08.py multimodal.py pressure_vessel.py rastrigin.py rosenbrock.py schwefel.py simple.py sphere.py traveling_salesman.py zakharov.py __init__.py static.py util.py zero_to_one.py __init__.py collection.py cv.py default.py delta.py fmin.py ftol.py indicator.py max_eval.py max_gen.py max_time.py robust.py xtol.py __init__.py archive.py cache.py clearing.py column.py display.py multi.py output.py progress.py single.py __init__.py dominator.py function_loader.py hv.py matlab_engine.py misc.py efficient_non_dominated_sort.py fast_non_dominated_sort.py naive_non_dominated_sort.py non_dominated_sorting.py tree_based_non_dominated_sort.py __init__.py normalization.py optimum.py plotting.py randomized_argsort.py reference_direction.py construction.py das_dennis.py energy.py energy_layer.py genetic_algorithm.py misc.py optimizer.py performance.py reduction.py sample_and_map.py __init__.py remote.py roulette.py running_metric.py sliding_window.py stochastic_ranking.py vectors.py __init__.py cec2018.py gta.py hv.py vendor_cmaes.py vendor_coco.py vendor_scipy.py __init__.py version.py fitness_landscape.py heatmap.py pcp.py petal.py radar.py radviz.py scatter.py star_coordinate.py util.py callback_video.py one_var_one_obj.py two_var_one_obj.py __init__.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "import argparse\nimport copy\nimport distutils\nimport os\nimport sys\nimport traceback\n\nfrom setuptools import setup, Extension, find_packages\nfrom setuptools.command.build_ext import build_ext\n\nfrom pymoo.version import __version__\n\n# ---------------------------------------------------------------------------------------------------------\n# GENERAL\n# ---------------------------------------------------------------------------------------------------------\n\n\n__name__ = \"pymoo\"\n__author__ = \"Julian Blank\"\n__url__ = \"https:\/\/pymoo.org\"\ndata = dict(\nname=__name__,\nversion=__version__,\nauthor=__author__,\nurl=__url__,\npython_requires='>=3.7',\nauthor_email=\"blankjul@msu.edu\",\ndescription=\"Multi-Objective Optimization in Python\",\nlicense='Apache License 2.0',\nkeywords=\"optimization\",\n# packages=[\"pymoo\"] + [\"pymoo.\" + e for e in find_packages(where='pymoo')],\npackages=find_packages(include=['pymoo', 'pymoo.*']),\ninclude_package_data=True,\nexclude_package_data={\n'': ['*.c', '*.cpp', '*.pyx'],\n},\ninstall_requires=['numpy>=1.15',\n'scipy>=1.1',\n'matplotlib>=3',\n'autograd>=1.4',\n'cma==3.2.2',\n'alive-progress',\n'dill',\n'Deprecated'],\nplatforms='any',\nclassifiers=[\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'Operating System :: OS Independent',\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Topic :: Scientific\/Engineering',\n'Topic :: Scientific\/Engineering :: Artificial Intelligence',\n'Topic :: Scientific\/Engineering :: Mathematics'\n]\n)\n\n# ---------------------------------------------------------------------------------------------------------\n# OTHER METADATA\n# ---------------------------------------------------------------------------------------------------------\n\n\n# update the readme.rst to be part of setup\ndef readme():\nwith open('README.rst') as f:\nreturn f.read()\n\n\ndata['long_description'] = readme()\ndata['long_description_content_type'] = 'text\/x-rst'\n\n\n# ---------------------------------------------------------------------------------------------------------\n# OPTIONS\n# ---------------------------------------------------------------------------------------------------------\n\n\nparser = argparse.ArgumentParser()\nparser.add_argument('--nopyx', action='store_true', help='Whether the pyx files shall be considered at all.')\nparser.add_argument('--nocython', action='store_true', help='Whether pyx files shall be cythonized.')\nparser.add_argument('--nolibs', action='store_true', help='Whether the libraries should be compiled.')\nargs, _ = parser.parse_known_args()\n\nsys.argv = [e for e in sys.argv if not e in args]\n\n\n# ============================================================\n# MacOSX FIX for compiling modules\n# ============================================================\n\ndef is_new_osx():\nname = distutils.util.get_platform()\nif sys.platform != \"darwin\":\nreturn False\nelif name.startswith(\"macosx-10\"):\nminor_version = int(name.split(\"-\")[1].split(\".\")[1])\nif minor_version >= 7:\nreturn True\nelse:\nreturn False\nelse:\nreturn False\n\n\n# fix compiling for new macosx!\nif is_new_osx():\nos.environ['CFLAGS'] = '-stdlib=libc++'\n\n\n# ============================================================\n# Module for Compilation - Throws an Exception if Failing\n# ============================================================\n\n\n# exception that is thrown when the build fails\nclass CompilingFailed(Exception):\npass\n\n\n# try to compile, if not possible throw exception\ndef construct_build_ext(build_ext):\nclass WrappedBuildExt(build_ext):\ndef run(self):\ntry:\nbuild_ext.run(self)\nexcept BaseException as e:\nraise CompilingFailed(e)\n\ndef build_extension(self, ext):\ntry:\nbuild_ext.build_extension(self, ext)\nexcept BaseException as e:\nraise CompilingFailed(e)\n\nreturn WrappedBuildExt\n\n\n# ============================================================\n# SETUP\n# ============================================================\n\nROOT = os.path.dirname(os.path.realpath(__file__))\nbackup = copy.deepcopy(data)\n\ntry:\n\nif args.nopyx:\next = []\nelif args.nocython:\npath = os.path.join(ROOT, \"pymoo\", \"cython\")\npyx = [os.path.join(path, f) for f in os.listdir() if f.endswith(\".pyx\")]\next = [Extension(f\"pymoo.cython.{source[:-4]}\", [source]) for source in pyx]\nelse:\nfrom Cython.Build import cythonize\next = cythonize(\"pymoo\/cython\/*.pyx\")\n\nif not args.nolibs:\n\nif len(ext) > 0:\ndata['ext_modules'] = ext\n\ntry:\nimport numpy as np\n\ndata['include_dirs'] = [np.get_include()]\nexcept BaseException:\nraise CompilingFailed(\n\"NumPy libraries must be installed for compiled extensions! Speedups are not enabled.\")\n\n# return the object for building which allows installation with no compilation\ndata['cmdclass'] = dict(build_ext=construct_build_ext(build_ext))\n\nsetup(**data)\nprint('*' * 75)\nprint(\"Compilation Successful.\")\nprint(\"Installation with compiled libraries succeeded.\")\nprint('*' * 75)\n\nexcept BaseException:\n\n# retrieve the original input arguments and execute default setup\nsetup(**backup)\n\n# get information why compiling has failed\nex_type, ex_value, ex_traceback = sys.exc_info()\n\nprint('*' * 75)\nprint(\"WARNING: Compilation Failed.\")\nprint(\"WARNING:\", ex_type)\nprint(\"WARNING:\", ex_value)\nprint()\nprint(\"=\" * 75)\ntraceback.print_exc()\nprint(\"=\" * 75)\nprint()\nprint(\"WARNING: For the compiled libraries numpy is required. Please make sure they are installed\")\nprint(\"WARNING: pip install numpy\")\nprint(\"WARNING: Also, make sure you have a compiler for C++!\")\n\nprint('*' * 75)\nprint(\"Plain Python installation succeeded.\")\nprint('*' * 75)\n"
    },
    {
        "package_name": "pymorphy2-0.9.1",
        "file_list": "AUTHORS.rst CHANGES.rst conf.py glossary.rst index.rst char-substitutes.rst dict.rst index.rst prediction.rst umlauts.rst make.bat Makefile 2trie.rst api_reference.rst citing.rst index.rst _authors.rst _changes.rst contributing.rst grammemes.rst guide.rst index.rst MANIFEST.in PKG-INFO analyzer.py cache.py cli.py dawg.py config.py __init__.py config.py _prefixes.py __init__.py __init__.py compile.py parse.py preprocess.py probability.py storage.py wrapper.py __init__.py shapes.py tagset.py tokenizers.py abbreviations.py base.py by_analogy.py by_hyphen.py by_lookup.py by_shape.py unkn.py utils.py __init__.py utils.py version.py __init__.py dependency_links.txt entry_points.txt not-zip-safe pbr.json PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nimport sys\nimport platform\nfrom setuptools import setup\n# from Cython.Build import cythonize\n\n\ndef get_version():\nwith open(\"pymorphy2\/version.py\", \"rt\") as f:\nreturn f.readline().split(\"=\")[1].strip(' \"\\n')\n\n\n# TODO: use environment markres instead of Python code in order to\n# allow building proper wheels. Markers are not enabled right now because\n# of setuptools\/wheel incompatibilities and the 'pip >= 6.0' requirement.\n\n# extras_require = {\n# 'fast:platform_python_implementation==CPython': [\"DAWG>=0.7.7\"],\n# 'fast:platform_python_implementation==CPython and python_version<3.5': [\n# \"fastcache>=1.0.2\"\n# ],\n# ':python_version<\"3.0\"': [\n# \"backports.functools_lru_cache>=1.0.1\",\n# ],\n# }\n\nis_cpython = platform.python_implementation() == 'CPython'\npy_version = sys.version_info[:2]\n\n\ninstall_requires = [\n'dawg-python >= 0.7.1',\n'pymorphy2-dicts-ru >=2.4, <3.0',\n'docopt >= 0.6',\n]\nif py_version < (3, 0):\ninstall_requires.append(\"backports.functools_lru_cache >= 1.0.1\")\n\n\nextras_require = {'fast': []}\nif is_cpython:\nextras_require['fast'].append(\"DAWG >= 0.8\")\nif py_version < (3, 5):\n# lru_cache is optimized in Python 3.5\nextras_require['fast'].append(\"fastcache >= 1.0.2\")\n\n\nsetup(\nname='pymorphy2',\nversion=get_version(),\nauthor='Mikhail Korobov',\nauthor_email='kmike84@gmail.com',\nurl='https:\/\/github.com\/kmike\/pymorphy2\/',\n\ndescription='Morphological analyzer (POS tagger + inflection engine) for Russian language.',\nlong_description=open('README.rst').read(),\n\nlicense='MIT license',\npackages=[\n'pymorphy2',\n'pymorphy2.units',\n'pymorphy2.lang',\n'pymorphy2.lang.ru',\n'pymorphy2.lang.uk',\n'pymorphy2.opencorpora_dict',\n],\nentry_points={\n'console_scripts': ['pymorphy = pymorphy2.cli:main']\n},\ninstall_requires=install_requires,\nextras_require=extras_require,\nzip_safe=False,\n\n# ext_modules=cythonize([\n# 'pymorphy2\/*.py',\n# 'pymorphy2\/units\/*.py',\n# 'pymorphy2\/opencorpora_dict\/*.py',\n# ], annotate=True, profile=True),\n\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: Russian',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Scientific\/Engineering :: Information Analysis',\n'Topic :: Text Processing :: Linguistic',\n],\n)\n"
    },
    {
        "package_name": "pynamodb-5.2.1",
        "file_list": "LICENSE MANIFEST.in mypy.ini PKG-INFO attributes.py base.py table.py __init__.py constants.py exceptions.py condition.py operand.py projection.py update.py util.py __init__.py indexes.py models.py pagination.py py.typed settings.py signals.py transactions.py types.py util.py _compat.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst requirements-dev.txt setup.cfg setup.py tox.ini",
        "setup.py": "from setuptools import setup, find_packages\n\n\ninstall_requires = [\n'botocore>=1.12.54',\n'typing-extensions>=3.7; python_version<\"3.8\"'\n]\n\nsetup(\nname='pynamodb',\nversion=__import__('pynamodb').__version__,\npackages=find_packages(exclude=('tests', 'tests.integration',)),\nurl='http:\/\/jlafon.io\/pynamodb.html',\nauthor='Jharrod LaFon',\nauthor_email='jlafon@eyesopen.com',\ndescription='A Pythonic Interface to DynamoDB',\nlong_description=open('README.rst').read(),\nzip_safe=False,\nlicense='MIT',\nkeywords='python dynamodb amazon',\npython_requires=\">=3.6\",\ninstall_requires=install_requires,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Programming Language :: Python',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'License :: OSI Approved :: MIT License',\n],\nextras_require={\n'signals': ['blinker>=1.3,<2.0'],\n},\npackage_data={'pynamodb': ['py.typed']},\n)\n"
    },
    {
        "package_name": "pynput-1.7.6",
        "file_list": "COPYING.LGPL _base.py _darwin.py _dummy.py _uinput.py _win32.py _xorg.py __init__.py _base.py _darwin.py _dummy.py _win32.py _xorg.py __init__.py _info.py darwin.py darwin_vks.py uinput.py win32.py win32_vks.py xorg.py xorg_keysyms.py __init__.py __init__.py dependency_links.txt pbr.json PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe PKG-INFO README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# coding: utf-8\n\nimport os\nimport setuptools\n\n\n#: The name of the package on PyPi\nPYPI_PACKAGE_NAME = 'pynput'\n\n#: The name of the main Python package\nMAIN_PACKAGE_NAME = 'pynput'\n\n#: The package URL\nPACKAGE_URL = 'https:\/\/github.com\/moses-palmer\/pynput'\n\n#: The author email\nAUTHOR_EMAIL = 'moses.palmer@gmail.com'\n\n#: The runtime requirements\nRUNTIME_PACKAGES = [\n'six']\n\n#: Additional requirements used during setup\nSETUP_PACKAGES = [\n'setuptools-lint >=0.5',\n'sphinx >=1.3.1']\n\n#: Packages requires for different environments\nEXTRA_PACKAGES = {\n':sys_platform == \"darwin\"': [\n'pyobjc-framework-ApplicationServices >=8.0',\n'pyobjc-framework-Quartz >=8.0'],\n':\"linux\" in sys_platform': [\n'evdev >= 1.3',\n'python-xlib >= 0.17'],\n':python_version == \"2.7\"': [\n'enum34']}\n\n\n# Read globals from ._info without loading it\nINFO = {}\nwith open(os.path.join(\nos.path.dirname(__file__),\n'lib',\nMAIN_PACKAGE_NAME,\n'_info.py'), 'rb') as f:\nfor line in f.read().decode('utf-8').splitlines():\ntry:\nname, value = (i.strip() for i in line.split('='))\nif name.startswith('__') and name.endswith('__'):\nINFO[name[2:-2]] = eval(value)\nexcept ValueError:\npass\n\n\n# Load the read me\ntry:\nwith open(os.path.join(\nos.path.dirname(__file__),\n'README.rst'), 'rb') as f:\nREADME = f.read().decode('utf-8')\n\nwith open(os.path.join(\nos.path.dirname(__file__),\nos.path.join('docs', 'mouse-usage.rst')), 'rb') as f:\nREADME += '\\n\\n' + f.read().decode('utf-8')\n\nwith open(os.path.join(\nos.path.dirname(__file__),\nos.path.join('docs', 'keyboard-usage.rst')), 'rb') as f:\nREADME += '\\n\\n' + f.read().decode('utf-8')\nexcept IOError:\nREADME = ''\n\n\n# Load the release notes\ntry:\nwith open(os.path.join(\nos.path.dirname(__file__),\n'CHANGES.rst'), 'rb') as f:\nCHANGES = f.read().decode('utf-8')\nexcept IOError:\nCHANGES = ''\n\n\nsetuptools.setup(\nname=PYPI_PACKAGE_NAME,\nversion='.'.join(str(i) for i in INFO['version']),\ndescription='Monitor and control user input devices',\nlong_description=README + '\\n\\n' + CHANGES,\n\ninstall_requires=RUNTIME_PACKAGES,\nsetup_requires=RUNTIME_PACKAGES + SETUP_PACKAGES,\nextras_require=EXTRA_PACKAGES,\n\nauthor=INFO['author'],\nauthor_email=AUTHOR_EMAIL,\n\nurl=PACKAGE_URL,\n\npackages=setuptools.find_packages(\nos.path.join(\nos.path.dirname(__file__),\n'lib')),\npackage_dir={'': 'lib'},\nzip_safe=True,\n\ntest_suite='tests',\n\nlicense='LGPLv3',\nkeywords='control mouse, mouse input, control keyboard, keyboard input',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: GNU Lesser General Public License v3 '\n'(LGPLv3)',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: Microsoft :: Windows :: Windows NT\/2000',\n'Operating System :: POSIX',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: System :: Monitoring'])\n"
    },
    {
        "package_name": "pynvml-11.4.1",
        "file_list": "LICENSE.txt MANIFEST.in PKG-INFO nvml.py smi.py _version.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt README.md setup.cfg setup.py versioneer.py",
        "setup.py": "from setuptools import setup, find_packages\nfrom os import path\nfrom io import open\n\nimport versioneer\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\nlong_description = f.read()\n\n# earlier versions don't support all classifiers\n#if version < '2.2.3':\n# from distutils.dist import DistributionMetadata\n# DistributionMetadata.classifiers = None\n# DistributionMetadata.download_url = None\n\nsetup(name='pynvml',\nversion=versioneer.get_version(),\ncmdclass=versioneer.get_cmdclass(),\npython_requires='>=3.6',\ndescription='Python Bindings for the NVIDIA Management Library',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\npackages=find_packages(exclude=['notebooks', 'docs', 'tests']),\npackage_data={'pynvml': ['README.md','help_query_gpu.txt']},\nlicense=\"BSD\",\nurl=\"http:\/\/www.nvidia.com\/\",\nauthor=\"NVIDIA Corporation\",\nauthor_email=\"rzamora@nvidia.com\",\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'License :: OSI Approved :: BSD License',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: POSIX :: Linux',\n'Programming Language :: Python',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: System :: Hardware',\n'Topic :: System :: Systems Administration',\n],\n)\n"
    },
    {
        "package_name": "pyobjc-framework-Contacts-8.5",
        "file_list": "print-contacts.py _metadata.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt License.txt MANIFEST.in Contacts.fwinfo metadata.ini arm64-12.0.fwinfo arm64-12.3.fwinfo x86_64-10.15.fwinfo x86_64-10.16.fwinfo x86_64-12.0.fwinfo x86_64-12.3.fwinfo pyobjc-api.h pyobjc-compat.h _Contacts.m _Contacts_protocols.m PKG-INFO test_cnchangehistoryevent.py test_cnchangehistoryfetchrequest.py test_cncontact.py test_cncontactfetchrequest.py test_cncontactformatter.py test_cncontactrelation.py test_cncontactsstore.py test_cncontactstore.py test_cncontactvcardserialization.py test_cncontainer.py test_cnerror.py test_cngroup.py test_cninstantmessageaddress.py test_cnlabeledvalue.py test_cnphonenumber.py test_cnpostaladdress.py test_cnpostaladdressformatter.py test_cnsaverequest.py test_cnsocialprofile.py test_contacts.py __init__.py pyobjc_setup.py setup.cfg setup.py",
        "setup.py": "\"\"\"\nWrappers for the \"Contacts\" framework on macOS 10.11.\n\nThese wrappers don't include documentation, please check Apple's documentation\nfor information on how to use this framework and PyObjC's documentation\nfor general tips and tricks regarding the translation between Python\nand (Objective-)C frameworks\n\"\"\"\n\nimport os\n\nfrom pyobjc_setup import Extension, setup\n\nVERSION = \"8.5\"\n\nsetup(\nname=\"pyobjc-framework-Contacts\",\ndescription=\"Wrappers for the framework Contacts on macOS\",\nmin_os_level=\"10.11\",\npackages=[\"Contacts\"],\next_modules=[\nExtension(\n\"Contacts._Contacts\",\n[\"Modules\/_Contacts.m\"],\nextra_link_args=[\"-framework\", \"Contacts\"],\npy_limited_api=True,\ndepends=[\nos.path.join(\"Modules\", fn)\nfor fn in os.listdir(\"Modules\")\nif fn.startswith(\"_Contacts\")\n],\n)\n],\nversion=VERSION,\ninstall_requires=[\"pyobjc-core>=\" + VERSION, \"pyobjc-framework-Cocoa>=\" + VERSION],\nlong_description=__doc__,\noptions={\"bdist_wheel\": {\"py_limited_api\": \"cp36\"}},\n)\n"
    },
    {
        "package_name": "pyobjc-framework-CoreAudio-8.5",
        "file_list": "_metadata.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt License.txt MANIFEST.in CoreAudio.fwinfo metadata.ini arm64-12.0.fwinfo arm64-12.3.fwinfo x86_64-10.13.fwinfo x86_64-10.14.fwinfo x86_64-10.15.fwinfo x86_64-10.16.fwinfo x86_64-12.0.fwinfo x86_64-12.3.fwinfo pyobjc-api.h pyobjc-compat.h _CoreAudio.m _CoreAudio_AudioBuffer.m _CoreAudio_AudioBufferList.m _CoreAudio_AudioChannelDescription.m _CoreAudio_AudioChannelLayout.m _CoreAudio_AudioValueTranslation.m _CoreAudio_inlines.mm PKG-INFO test_audiodriverplugin.py test_audiohardware.py test_audiohardwarebase.py test_audiohardwaredeprecated.py test_audiohardwareplugIn.py test_audioserverplugIn.py test_coreaudio.py test_coreaudiotypes.py test_coreaudiotypes_audiosessiontypes.py test_coreaudiotypes_coreaudiobasetypes.py test_hosttime.py __init__.py pyobjc_setup.py setup.cfg setup.py",
        "setup.py": "\"\"\"\nWrappers for the \"CoreAudio\" framework on macOS.\n\nThese wrappers don't include documentation, please check Apple's documentation\nfor information on how to use this framework and PyObjC's documentation\nfor general tips and tricks regarding the translation between Python\nand (Objective-)C frameworks\n\"\"\"\n\n#\n# Distutils doesn't understand '.mm' as an extension\n#\nimport distutils.unixccompiler\nimport os\n\nfrom pyobjc_setup import Extension, setup\n\nVERSION = \"8.5\"\n\n\ndistutils.unixccompiler.UnixCCompiler.src_extensions.append(\".mm\")\n\nsetup(\nname=\"pyobjc-framework-CoreAudio\",\ndescription=\"Wrappers for the framework CoreAudio on macOS\",\npackages=[\"CoreAudio\"],\next_modules=[\nExtension(\n\"CoreAudio._inlines\",\n[\"Modules\/_CoreAudio_inlines.mm\"],\nextra_link_args=[\"-framework\", \"CoreAudio\"],\npy_limited_api=True,\n),\nExtension(\n\"CoreAudio._CoreAudio\",\n[\"Modules\/_CoreAudio.m\"],\nextra_link_args=[\"-framework\", \"CoreAudio\"],\n# py_limited_api=True,\ndepends=[\nos.path.join(\"Modules\", fn)\nfor fn in os.listdir(\"Modules\")\nif fn.startswith(\"_CoreAudio\")\n],\n),\n],\nversion=VERSION,\ninstall_requires=[\"pyobjc-core>=\" + VERSION, \"pyobjc-framework-Cocoa>=\" + VERSION],\nlong_description=__doc__,\n)\n"
    },
    {
        "package_name": "pyobjc-framework-GameCenter-8.5",
        "file_list": "_metadata.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt License.txt MANIFEST.in GameCenter.fwinfo metadata.ini pyobjc-api.h pyobjc-compat.h _GameCenter.m _GameCenter_protocols.m PKG-INFO test_gamecenter.py test_gkachievement.py test_gkachievementdescription.py test_gkachievementviewcontroller.py test_gkchallenge.py test_gkchallengeeventhandler.py test_gkchallengesviewcontroller.py test_gkdialogcontroller.py test_gkerror.py test_gkeventlistener.py test_gkfriendrequestcomposeviewcontroller.py test_gkgamecenterviewcontroller.py test_gkleaderboard.py test_gkleaderboardset.py test_gkleaderboardviewcontroller.py test_gklocalplayer.py test_gkmatch.py test_gkmatchmaker.py test_gkmatchmakerviewcontroller.py test_gknotificationbanner.py test_gkplayer.py test_gkpublicconstants.py test_gkpublicprotocols.py test_gksavedgame.py test_gksavedgamelistener.py test_gkscore.py test_gksession.py test_gksessionerror.py test_gkturnbasedmatch.py test_gkturnbasedmatchmakerviewcontroller.py test_gkvoicechat.py test_gkvoicechatservice.py __init__.py pyobjc_setup.py setup.cfg setup.py",
        "setup.py": "\"\"\"\nWrappers for the \"GameCenter\" framework on macOS.\n\nThese wrappers don't include documentation, please check Apple's documentation\nfor information on how to use this framework and PyObjC's documentation\nfor general tips and tricks regarding the translation between Python\nand (Objective-)C frameworks\n\"\"\"\n\nimport os\n\nfrom pyobjc_setup import Extension, setup\n\nVERSION = \"8.5\"\n\nsetup(\nname=\"pyobjc-framework-GameCenter\",\ndescription=\"Wrappers for the framework GameCenter on macOS\",\nmin_os_level=\"10.8\",\npackages=[\"GameCenter\"],\next_modules=[\nExtension(\n\"GameCenter._GameCenter\",\n[\"Modules\/_GameCenter.m\"],\nextra_link_args=[\"-framework\", \"GameKit\"],\npy_limited_api=True,\ndepends=[\nos.path.join(\"Modules\", fn)\nfor fn in os.listdir(\"Modules\")\nif fn.startswith(\"_GameCenter\")\n],\n)\n],\nversion=VERSION,\ninstall_requires=[\"pyobjc-core>=\" + VERSION, \"pyobjc-framework-Cocoa>=\" + VERSION],\nlong_description=__doc__,\noptions={\"bdist_wheel\": {\"py_limited_api\": \"cp36\"}},\n)\n"
    },
    {
        "package_name": "pyobjc-framework-GameController-8.5",
        "file_list": "_metadata.py __init__.py dependency_links.tx not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt License.txt MANIFEST.in GameController.fwinfo metadata.ini arm64-12.1.fwinfo arm64-12.3.fwinfo x86_64-10.10.fwinfo x86_64-10.15.fwinfo x86_64-10.16.fwinfo x86_64-10.9.fwinfo x86_64-12.1.fwinfo x86_64-12.3.fwinfo pyobjc-api.h pyobjc-compat.h _GameController.m _GameController_protocols.m PKG-INFO test_gamecontroller.py test_gamepad.py test_gccontroller.py test_gccontrolleraxisinput.py test_gccontrollerbuttoninput.py test_gccontrollerdirectionpad.py test_gccontrollerelement.py test_gccontrollertouchpad.py test_gcdevice.py test_gcdevicebattery.py test_gcdevicehaptics.py test_gcdirectionalgamepad.py test_gcdualsenseadaptivetrigger.py test_gceventviewcontroller.py test_gcextendedgamepad.py test_gcextendedgamepadsnapshot.py test_gcgamepadsnapshot.py test_gcinputnames.py test_gckeyboard.py test_gckeyboardinput.py test_gckeycodes.py test_gckeynames.py test_gcmicrogamepad.py test_gcmicrogamepadsnapshot.py test_gcmotion.py test_gcmouse.py test_gcmouseinput.py test_gcphysicalinputprofile.py test_gcproductcategories.py __init__.py pyobjc_setup.py setup.cfg setup.py",
        "setup.py": "\"\"\"\nWrappers for the \"GameController\" framework on macOS introduced in macOS 10.9.\n\nThese wrappers don't include documentation, please check Apple's documentation\nfor information on how to use this framework and PyObjC's documentation\nfor general tips and tricks regarding the translation between Python\nand (Objective-)C frameworks\n\"\"\"\nimport os\n\nfrom pyobjc_setup import setup, Extension\n\nVERSION = \"8.5\"\n\nsetup(\nname=\"pyobjc-framework-GameController\",\ndescription=\"Wrappers for the framework GameController on macOS\",\npackages=[\"GameController\"],\next_modules=[\nExtension(\n\"GameController._GameController\",\n[\"Modules\/_GameController.m\"],\nextra_link_args=[\"-framework\", \"GameController\"],\npy_limited_api=True,\ndepends=[\nos.path.join(\"Modules\", fn)\nfor fn in os.listdir(\"Modules\")\nif fn.startswith(\"_GameController\")\n],\n)\n],\nversion=VERSION,\ninstall_requires=[\"pyobjc-core>=\" + VERSION, \"pyobjc-framework-Cocoa>=\" + VERSION],\nlong_description=__doc__,\noptions={\"bdist_wheel\": {\"py_limited_api\": \"cp36\"}},\n)\n"
    },
    {
        "package_name": "pyobjc-framework-GameKit-8.5",
        "file_list": "_metadata.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt License.txt MANIFEST.in GameKit.fwinfo metadata.ini arm64-12.0.fwinfo arm64-12.3.fwinfo x86_64-10.13.fwinfo x86_64-10.15.fwinfo x86_64-10.16.fwinfo x86_64-12.0.fwinfo x86_64-12.3.fwinfo pyobjc-api.h pyobjc-compat.h _GameKit.m _GameKit_protocols.m PKG-INFO test_gamekit.py test_gkaccesspoint.py test_gkachievement.py test_gkachievementdescription.py test_gkachievementviewcontroller.py test_gkchallenge.py test_gkchallengeeventhandler.py test_gkchallengesviewcontroller.py test_gkcloudplayer.py test_gkdialogcontroller.py test_gkerror.py test_gkeventlistener.py test_gkfriendrequestcomposeviewcontroller.py test_gkgamecenterviewcontroller.py test_gkgamesession.py test_gkgamesessionerror.py test_gkgamesessioneventlistener.py test_gkleaderboard.py test_gkleaderboardset.py test_gkleaderboardviewcontroller.py test_gklocalplayer.py test_gkmatch.py test_gkmatchmaker.py test_gkmatchmakerviewcontroller.py test_gknotificationhander.py test_gkplayer.py test_gkpublicconstants.py test_gkpublicprotocols.py test_gksavedgame.py test_gksavedgamelistener.py test_gkscore.py test_gksession.py test_gksessionerror.py test_gkturnbasedmatch.py test_gkturnbasedmatchmakerviewcontroller.py test_gkvoicechat.py __init__.py pyobjc_setup.py setup.cfg setup.py",
        "setup.py": "\"\"\"\nWrappers for the \"GameKit\" framework on macOS.\n\nThese wrappers don't include documentation, please check Apple's documentation\nfor information on how to use this framework and PyObjC's documentation\nfor general tips and tricks regarding the translation between Python\nand (Objective-)C frameworks\n\"\"\"\n\nimport os\n\nfrom pyobjc_setup import Extension, setup\n\nVERSION = \"8.5\"\n\nsetup(\nname=\"pyobjc-framework-GameKit\",\ndescription=\"Wrappers for the framework GameKit on macOS\",\nmin_os_level=\"10.8\",\npackages=[\"GameKit\"],\next_modules=[\nExtension(\n\"GameKit._GameKit\",\n[\"Modules\/_GameKit.m\"],\nextra_link_args=[\"-framework\", \"GameKit\"],\npy_limited_api=True,\ndepends=[\nos.path.join(\"Modules\", fn)\nfor fn in os.listdir(\"Modules\")\nif fn.startswith(\"_GameKit\")\n],\n)\n],\nversion=VERSION,\ninstall_requires=[\n\"pyobjc-core>=\" + VERSION,\n\"pyobjc-framework-Cocoa>=\" + VERSION,\n\"pyobjc-framework-Quartz>=\" + VERSION,\n],\nlong_description=__doc__,\noptions={\"bdist_wheel\": {\"py_limited_api\": \"cp36\"}},\n)\n"
    },
    {
        "package_name": "pyobjc-framework-GameplayKit-8.5",
        "file_list": "_metadata.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt License.txt MANIFEST.in GameplayKit.fwinfo metadata.ini arm64-12.0.fwinfo arm64-12.3.fwinfo x86_64-10.13.fwinfo x86_64-10.16.fwinfo x86_64-12.0.fwinfo x86_64-12.3.fwinfo pyobjc-api.h pyobjc-compat.h _GameplayKit.m _GameplayKit_protocols.m PKG-INFO test_gameplaykit.py test_gkagent.py test_gkdecisiontree.py test_gkgamemodel.py test_gkgoal.py test_gkgraph.py test_gkgraphnode.py test_gkgridgraph.py test_gkmeshgraph.py test_gknoise.py test_gknoisemap.py test_gknoisesource.py test_gkobstacle.py test_gkobstaclegraph.py test_gkoctree.py test_gkpath.py test_gkprimitives.py test_gkquadtree.py test_gkrandomsource.py test_gkrtree.py test_gkrulesystem.py test_gkscene.py test_gkstate.py test_gkstatemachine.py test_gkstrategist.py test_gkversion.py __init__.py pyobjc_setup.py setup.cfg setup.py",
        "setup.py": "\"\"\"\nWrappers for the \"GameplayKit\" framework on macOS.\n\nThese wrappers don't include documentation, please check Apple's documentation\nfor information on how to use this framework and PyObjC's documentation\nfor general tips and tricks regarding the translation between Python\nand (Objective-)C frameworks\n\"\"\"\n\nimport os\n\nfrom pyobjc_setup import Extension, setup\n\nVERSION = \"8.5\"\n\nsetup(\nname=\"pyobjc-framework-GameplayKit\",\ndescription=\"Wrappers for the framework GameplayKit on macOS\",\nmin_os_level=\"10.11\",\npackages=[\"GameplayKit\"],\next_modules=[\nExtension(\n\"GameplayKit._GameplayKit\",\n[\"Modules\/_GameplayKit.m\"],\nextra_link_args=[\"-framework\", \"GameplayKit\"],\npy_limited_api=True,\ndepends=[\nos.path.join(\"Modules\", fn)\nfor fn in os.listdir(\"Modules\")\nif fn.startswith(\"_GameplayKit\")\n],\n)\n],\nversion=VERSION,\ninstall_requires=[\n\"pyobjc-core>=\" + VERSION,\n\"pyobjc-framework-Cocoa>=\" + VERSION,\n\"pyobjc-framework-SpriteKit>=\" + VERSION,\n],\nlong_description=__doc__,\noptions={\"bdist_wheel\": {\"py_limited_api\": \"cp36\"}},\n)\n"
    },
    {
        "package_name": "pyobjc-framework-ModelIO-8.5",
        "file_list": "_metadata.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt License.txt MANIFEST.in metadata.ini ModelIO.fwinfo arm64-12.0.fwinfo arm64-12.3.fwinfo x86_64-10.15.fwinfo x86_64-10.16.fwinfo x86_64-12.0.fwinfo x86_64-12.3.fwinfo pyobjc-api.h pyobjc-compat.h _ModelIO.m _ModelIO_protocols.m PKG-INFO protocols.txt test_mdlanimatedvaluetypes.py test_mdlanimation.py test_mdlasset.py test_mdlassetresolver.py test_mdlcamera.py test_mdllight.py test_mdlmaterial.py test_mdlmesh.py test_mdlmeshbuffer.py test_mdlobject.py test_mdlprimitive.py test_mdltexture.py test_mdltransform.py test_mdltransformstack.py test_mdltypes.py test_mdlvaluetypes.py test_mdlvertexdescriptor.py test_mdlvoxelarray.py test_modelio.py __init__.py pyobjc_setup.py setup.cfg setup.py",
        "setup.py": "\"\"\"\nWrappers for the \"ModelIO\" framework on macOS.\n\nThese wrappers don't include documentation, please check Apple's documentation\nfor information on how to use this framework and PyObjC's documentation\nfor general tips and tricks regarding the translation between Python\nand (Objective-)C frameworks\n\"\"\"\n\nimport os\n\nfrom pyobjc_setup import Extension, setup\n\nVERSION = \"8.5\"\n\nsetup(\nname=\"pyobjc-framework-ModelIO\",\ndescription=\"Wrappers for the framework ModelIO on macOS\",\nmin_os_level=\"10.11\",\npackages=[\"ModelIO\"],\next_modules=[\nExtension(\n\"ModelIO._ModelIO\",\n[\"Modules\/_ModelIO.m\"],\nextra_link_args=[\"-framework\", \"ModelIO\"],\npy_limited_api=True,\ndepends=[\nos.path.join(\"Modules\", fn)\nfor fn in os.listdir(\"Modules\")\nif fn.startswith(\"_ModelIO\")\n],\n)\n],\nversion=VERSION,\ninstall_requires=[\n\"pyobjc-core>=\" + VERSION,\n\"pyobjc-framework-Cocoa>=\" + VERSION,\n\"pyobjc-framework-Quartz>=\" + VERSION,\n],\nlong_description=__doc__,\noptions={\"bdist_wheel\": {\"py_limited_api\": \"cp36\"}},\n)\n"
    },
    {
        "package_name": "pyobjc-framework-NotificationCenter-8.5",
        "file_list": "_metadata.py __init__.py dependency_ not-zip-saf PKG-INFO requires.tx SOURCES.txt top_level.t License.txt MANIFEST.in metadata.ini NotificationCenter.fwinfo arm64-12.0.fwinfo arm64-12.3.fwinfo x86_64-10.16.fwinfo x86_64-12.0.fwinfo x86_64-12.3.fwinfo pyobjc-api.h pyobjc-compat.h _NotificationCenter.m _NotificationCenter_protocols.m PKG-INFO test_ncwidgetcontroller.py test_ncwidgetlistviewcontroller.py test_ncwidgetproviding.py test_ncwidgetsearchviewcontroller.py test_notificationcenter.py __init__.py pyobjc_setup.py setup.cfg setup.py",
        "setup.py": "\"\"\"\nWrappers for the \"NotificationCenter\" framework on macOS.\n\nThese wrappers don't include documentation, please check Apple's documentation\nfor information on how to use this framework and PyObjC's documentation\nfor general tips and tricks regarding the translation between Python\nand (Objective-)C frameworks\n\"\"\"\n\nimport os\n\nfrom pyobjc_setup import Extension, setup\n\nVERSION = \"8.5\"\n\nsetup(\nname=\"pyobjc-framework-NotificationCenter\",\ndescription=\"Wrappers for the framework NotificationCenter on macOS\",\nmin_os_level=\"10.10\",\npackages=[\"NotificationCenter\"],\next_modules=[\nExtension(\n\"NotificationCenter._NotificationCenter\",\n[\"Modules\/_NotificationCenter.m\"],\nextra_link_args=[\"-framework\", \"NotificationCenter\"],\npy_limited_api=True,\ndepends=[\nos.path.join(\"Modules\", fn)\nfor fn in os.listdir(\"Modules\")\nif fn.startswith(\"_NotificationCenter\")\n],\n)\n],\nversion=VERSION,\ninstall_requires=[\"pyobjc-core>=\" + VERSION, \"pyobjc-framework-Cocoa>=\" + VERSION],\nlong_description=__doc__,\noptions={\"bdist_wheel\": {\"py_limited_api\": \"cp36\"}},\n)\n"
    },
    {
        "package_name": "pyobjc-framework-Photos-8.5",
        "file_list": "_metadata.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt License.txt MANIFEST.in metadata.ini Photos.fwinfo arm64-12.0.fwinfo arm64-12.3.fwinfo x86_64-10.15.fwinfo x86_64-10.16.fwinfo x86_64-12.0.fwinfo x86_64-12.3.fwinfo pyobjc-api.h pyobjc-compat.h _Photos.m _Photos_protocols.m PKG-INFO test_phadjustmentdata.py test_phasset.py test_phassetchangerequest.py test_phassetresourcecreationoptions.py test_phassetresourcemanager.py test_phchange.py test_phcloudidentifier.py test_phcollection.py test_phcontenteditinginput.py test_phcontenteditingoutput.py test_pherror.py test_phfetchoptions.py test_phfetchresult.py test_phimagemanager.py test_phlivephoto.py test_phlivephotoeditingcontext.py test_photos.py test_photostypes.py test_phphotolibrary.py test_phproject.py __init__.py pyobjc_setup.py setup.cfg setup.py",
        "setup.py": "\"\"\"\nWrappers for the \"Photos\" framework on macOS.\n\nThese wrappers don't include documentation, please check Apple's documentation\nfor information on how to use this framework and PyObjC's documentation\nfor general tips and tricks regarding the translation between Python\nand (Objective-)C frameworks\n\"\"\"\nimport os\n\nfrom pyobjc_setup import Extension, setup\n\nVERSION = \"8.5\"\n\nsetup(\nname=\"pyobjc-framework-Photos\",\ndescription=\"Wrappers for the framework Photos on macOS\",\nmin_os_level=\"10.11\",\npackages=[\"Photos\"],\next_modules=[\nExtension(\n\"Photos._Photos\",\n[\"Modules\/_Photos.m\"],\nextra_link_args=[\"-framework\", \"Photos\"],\npy_limited_api=True,\ndepends=[\nos.path.join(\"Modules\", fn)\nfor fn in os.listdir(\"Modules\")\nif fn.startswith(\"_Photos\")\n],\n)\n],\nversion=VERSION,\ninstall_requires=[\"pyobjc-core>=\" + VERSION, \"pyobjc-framework-Cocoa>=\" + VERSION],\nlong_description=__doc__,\noptions={\"bdist_wheel\": {\"py_limited_api\": \"cp36\"}},\n)\n"
    },
    {
        "package_name": "pyobjc-framework-SceneKit-8.5",
        "file_list": "dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt _metadata.py __init__.py License.txt MANIFEST.in metadata.ini arm64-12.0.fwinfo arm64-12.3.fwinfo x86_64-10.10.fwinfo x86_64-10.15.fwinfo x86_64-10.16.fwinfo x86_64-12.0.fwinfo x86_64-12.3.fwinfo SceneKit.fwinfo pyobjc-api.h pyobjc-compat.h _SceneKit.m _SceneKit_inlines.m _SceneKit_protocols.m PKG-INFO test_scenekit.py test_scenekittypes.py test_scenekit_simd.py test_scnaction.py test_scnanimation.py test_scnaudiosource.py test_scnboundingvolume.py test_scncamera.py test_scncameracontroller.py test_scnconstraint.py test_scngeometry.py test_scnhittest.py test_scnjavascript.py test_scnlight.py test_scnmaterial.py test_scnmaterialproperty.py test_scnmorpher.py test_scnnode.py test_scnparametricgeometry.py test_scnparticlesystem.py test_scnphysicsbody.py test_scnphysicsfield.py test_scnphysicsshape.py test_scnphysicsworld.py test_scnreferencenode.py test_scnscene.py test_scnscenerenderer.py test_scnscenesource.py test_scnshadable.py test_scntechnique.py test_scntransaction.py test_scnview.py __init__.py pyobjc_setup.py setup.cfg setup.py",
        "setup.py": "\"\"\"\nWrappers for the \"SceneKit\" framework on macOS introduced in macOS 10.8.\n\nThese wrappers don't include documentation, please check Apple's documentation\nfor information on how to use this framework and PyObjC's documentation\nfor general tips and tricks regarding the translation between Python\nand (Objective-)C frameworks\n\"\"\"\n\nimport os\n\nfrom pyobjc_setup import Extension, setup\n\nVERSION = \"8.5\"\n\nsetup(\nname=\"pyobjc-framework-SceneKit\",\ndescription=\"Wrappers for the framework SceneKit on macOS\",\nmin_os_level=\"10.7\",\npackages=[\"SceneKit\"],\next_modules=[\nExtension(\n\"SceneKit._SceneKit\",\n[\"Modules\/_SceneKit.m\"],\nextra_link_args=[\"-framework\", \"SceneKit\"],\npy_limited_api=True,\ndepends=[\nos.path.join(\"Modules\", fn)\nfor fn in os.listdir(\"Modules\")\nif fn.startswith(\"_SceneKit\")\n],\n),\nExtension(\n\"SceneKit._inlines\",\n[\"Modules\/_SceneKit_inlines.m\"],\nextra_link_args=[\"-framework\", \"SceneKit\"],\npy_limited_api=True,\n),\n],\nversion=VERSION,\ninstall_requires=[\n\"pyobjc-core>=\" + VERSION,\n\"pyobjc-framework-Cocoa>=\" + VERSION,\n\"pyobjc-framework-Quartz>=\" + VERSION,\n],\nlong_description=__doc__,\noptions={\"bdist_wheel\": {\"py_limited_api\": \"cp36\"}},\n)\n"
    },
    {
        "package_name": "pyppeteer-1.0.2",
        "file_list": "LICENSE PKG-INFO browser.py chromium_downloader.py command.py connection.py coverage.py dialog.py element_handle.py emulation_manager.py errors.py execution_context.py frame_manager.py helper.py input.py launcher.py multimap.py navigator_watcher.py network_manager.py options.py page.py target.py tracing.py us_keyboard_layout.py util.py worker.py __init__.py pyproject.toml README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['pyppeteer']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['appdirs>=1.4.3,<2.0.0',\n'certifi>=2021',\n'importlib-metadata>=1.4',\n'pyee>=8.1.0,<9.0.0',\n'tqdm>=4.42.1,<5.0.0',\n'urllib3>=1.25.8,<2.0.0',\n'websockets>=10.0,<11.0']\n\nentry_points = \\\n{'console_scripts': ['pyppeteer-install = pyppeteer.command:install']}\n\nsetup_kwargs = {\n'name': 'pyppeteer',\n'version': '1.0.2',\n'description': 'Headless chrome\/chromium automation library (unofficial port of puppeteer)',\n'long_description': \"pyppeteer\\n==========\\n\\n[![PyPI](https:\/\/img.shields.io\/pypi\/v\/pyppeteer.svg)](https:\/\/pypi.python.org\/pypi\/pyppeteer)\\n[![PyPI version](https:\/\/img.shields.io\/pypi\/pyversions\/pyppeteer.svg)](https:\/\/pypi.python.org\/pypi\/pyppeteer)\\n[![Documentation](https:\/\/img.shields.io\/badge\/docs-latest-brightgreen.svg)](https:\/\/pyppeteer.github.io\/pyppeteer\/)\\n[![CircleCI](https:\/\/circleci.com\/gh\/pyppeteer\/pyppeteer.svg?style=shield)](https:\/\/circleci.com\/gh\/pyppeteer\/pyppeteer)\\n[![codecov](https:\/\/codecov.io\/gh\/pyppeteer\/pyppeteer\/branch\/dev\/graph\/badge.svg)](https:\/\/codecov.io\/gh\/pyppeteer\/pyppeteer)\\n\\n_Note: this is a continuation of the [pyppeteer project](https:\/\/github.com\/miyakogi\/pyppeteer)_. Before undertaking any sort of developement, it is highly recommended that you take a look at [#16](https:\/\/github.com\/pyppeteer\/pyppeteer\/pull\/16) for the ongoing effort to update this library to avoid duplicating efforts.\\n\\nUnofficial Python port of [puppeteer](https:\/\/github.com\/GoogleChrome\/puppeteer) JavaScript (headless) chrome\/chromium browser automation library.\\n\\n* Free software: MIT license (including the work distributed under the Apache 2.0 license)\\n* Documentation: https:\/\/pyppeteer.github.io\/pyppeteer\/\\n\\n## Installation\\n\\npyppeteer requires Python >= 3.6\\n\\nInstall with `pip` from PyPI:\\n\\n```\\npip install pyppeteer\\n```\\n\\nOr install the latest version from [this github repo](https:\/\/github.com\/pyppeteer\/pyppeteer\/):\\n\\n```\\npip install -U git+https:\/\/github.com\/pyppeteer\/pyppeteer@dev\\n```\\n\\n## Usage\\n\\n> **Note**: When you run pyppeteer for the first time, it downloads the latest version of Chromium (~150MB) if it is not found on your system. If you don't prefer this behavior, ensure that a suitable Chrome binary is installed. One way to do this is to run `pyppeteer-install` command before prior to using this library.\\n\\nFull documentation can be found [here](https:\/\/pyppeteer.github.io\/pyppeteer\/reference.html). [Puppeteer's documentation](https:\/\/github.com\/GoogleChrome\/puppeteer\/blob\/master\/docs\/api.md#) and [its troubleshooting guide](https:\/\/github.com\/GoogleChrome\/puppeteer\/blob\/master\/docs\/troubleshooting.md) are also great resources for pyppeteer users.\\n\\n### Examples\\n\\nOpen web page and take a screenshot:\\n```py\\nimport asyncio\\nfrom pyppeteer import launch\\n\\nasync def main():\\n browser = await launch()\\n page = await browser.newPage()\\n await page.goto('https:\/\/example.com')\\n await page.screenshot({'path': 'example.png'})\\n await browser.close()\\n\\nasyncio.get_event_loop().run_until_complete(main())\\n```\\n\\nEvaluate javascript on a page:\\n```py\\nimport asyncio\\nfrom pyppeteer import launch\\n\\nasync def main():\\n browser = await launch()\\n page = await browser.newPage()\\n await page.goto('https:\/\/example.com')\\n await page.screenshot({'path': 'example.png'})\\n\\n dimensions = await page.evaluate('''() => {\\n return {\\n width: document.documentElement.clientWidth,\\n height: document.documentElement.clientHeight,\\n deviceScaleFactor: window.devicePixelRatio,\\n }\\n }''')\\n\\n print(dimensions)\\n # >>> {'width': 800, 'height': 600, 'deviceScaleFactor': 1}\\n await browser.close()\\n\\nasyncio.get_event_loop().run_until_complete(main())\\n```\\n\\n## Differences between puppeteer and pyppeteer\\n\\npyppeteer strives to replicate the puppeteer API as close as possible, however, fundamental differences between Javascript and Python make this difficult to do precisely. More information on specifics can be found in the [documentation](https:\/\/pyppeteer.github.io\/pyppeteer\/reference.html).\\n\\n### Keyword arguments for options\\n\\npuppeteer uses an object for passing options to functions\/methods. pyppeteer methods\/functions accept both dictionary (python equivalent to JavaScript's objects) and keyword arguments for options.\\n\\nDictionary style options (similar to puppeteer):\\n\\n```python\\nbrowser = await launch({'headless': True})\\n```\\n\\nKeyword argument style options (more pythonic, isn't it?):\\n\\n```python\\nbrowser = await launch(headless=True)\\n```\\n\\n### Element selector method names\\n\\nIn python, `$` is not a valid identifier. The equivalent methods to Puppeteer's `$`, `$$`, and `$x` methods are listed below, along with some shorthand methods for your convenience:\\n\\n| puppeteer | pyppeteer | pyppeteer shorthand |\\n|-----------|-------------------------|----------------------|\\n| Page.$() | Page.querySelector() | Page.J() |\\n| Page.$$() | Page.querySelectorAll() | Page.JJ() |\\n| Page.$x() | Page.xpath() | Page.Jx() |\\n\\n### Arguments of `Page.evaluate()` and `Page.querySelectorEval()`\\n\\npuppeteer's version of `evaluate()` takes a JavaScript function or a string representation of a JavaScript expression. pyppeteer takes string representation of JavaScript expression or function. pyppeteer will try to automatically detect if the string is function or expression, but it will fail sometimes. If an expression is erroneously treated as function and an error is raised, try setting `force_expr` to `True`, to force pyppeteer to treat the string as expression.\\n\\n### Examples:\\n\\nGet a page's `textContent`:\\n\\n```python\\ncontent = await page.evaluate('document.body.textContent', force_expr=True)\\n```\\n\\nGet an element's `textContent`:\\n\\n```python\\nelement = await page.querySelector('h1')\\ntitle = await page.evaluate('(element) => element.textContent', element)\\n```\\n\\n## Roadmap\\n\\nSee [projects](https:\/\/github.com\/pyppeteer\/pyppeteer\/projects)\\n\\n## Credits\\n\\n###### This package was created with [Cookiecutter](https:\/\/github.com\/audreyr\/cookiecutter) and the [audreyr\/cookiecutter-pypackage](https:\/\/github.com\/audreyr\/cookiecutter-pypackage) project template.\\n\",\n'author': 'granitosaurus',\n'author_email': 'bernardas.alisauskas@pm.me',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/pyppeteer\/pyppeteer',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'entry_points': entry_points,\n'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "pyqtgraph-0.12.4",
        "file_list": "arrayToQPath.py renderImageItem.py __init__.py CHANGELOG CODE_OF_CONDUCT.md CONTRIBUTING.md qt_doc.py listmissing.py make.bat Makefile glaxisitem.rst glgraphicsitem.rst glgraphitem.rst glgriditem.rst glimageitem.rst gllineplotitem.rst glmeshitem.rst glscatterplotitem.rst glsurfaceplotitem.rst glviewwidget.rst glvolumeitem.rst index.rst meshdata.rst 3dgraphics.rst apireference.rst colormap.rst conf.py config_options.rst dockarea.rst exporting.rst flowchart.rst index.rst node.rst terminal.rst functions.rst arrowitem.rst axisitem.rst bargraphitem.rst buttonitem.rst colorbaritem.rst curvearrow.rst curvepoint.rst dateaxisitem.rst errorbaritem.rst fillbetweenitem.rst gradienteditoritem.rst gradientlegend.rst graphicsitem.rst graphicslayout.rst graphicsobject.rst graphicswidget.rst graphicswidgetanchor.rst graphitem.rst griditem.rst histogramlutitem.rst imageitem.rst index.rst infiniteline.rst isocurveitem.rst labelitem.rst legenditem.rst linearregionitem.rst multiplotitem.rst pcolormeshitem.rst plotcurveitem.rst plotdataitem.rst plotitem.rst roi.rst scalebar.rst scatterplotitem.rst targetitem.rst textitem.rst uigraphicsitem.rst viewbox.rst vtickgroup.rst graphicsscene.rst hoverevent.rst index.rst mouseclickevent.rst mousedragevent.rst graphicswindow.rst how_to_use.rst example_false_color_image.png example_gradient_plot.png example_imageitem_transform.png gen_example_false_color_image.py gen_example_gradient_plot.py gen_example_imageitem_transform.py plottingClasses.png plottingClasses.svg images.rst index.rst installation.rst internals.rst introduction.rst mouse_interaction.rst apiref.rst index.rst parameter.rst parameteritem.rst parametertree.rst parametertypes.rst plotting.rst prototyping.rst qtcrashcourse.rst region_of_interest.rst style.rst busycursor.rst checktable.rst colorbutton.rst colormapwidget.rst combobox.rst consolewidget.rst datatreewidget.rst feedbackbutton.rst filedialog.rst gradientwidget.rst graphicslayoutwidget.rst graphicsview.rst histogramlutwidget.rst imageview.rst index.rst joystickbutton.rst layoutwidget.rst matplotlibwidget.rst multiplotwidget.rst pathbutton.rst plotwidget.rst progressdialog.rst remotegraphicsview.rst scatterplotwidget.rst spinbox.rst tablewidget.rst treewidget.rst valuelabel.rst verticallabel.rst LICENSE.txt MANIFEST.in PKG-INFO pyproject.toml Canvas.py CanvasItem.py CanvasManager.py CanvasTemplate.ui CanvasTemplate_pyqt5.py CanvasTemplate_pyqt6.py CanvasTemplate_pyside2.py CanvasTemplate_pyside6.py TransformGuiTemplate.ui TransformGuiTemplate_pyqt5.py TransformGuiTemplate_pyqt6.py TransformGuiTemplate_pyside2.py TransformGuiTemplate_pyside6.py __init__.py colormap.py CC-BY license - applies to CET color map data.txt CC0 legal code - applies to virids, magma, plasma, inferno an CET-C1.csv CET-C1s.csv CET-C2.csv CET-C2s.csv CET-C3.csv CET-C3s.csv CET-C4.csv CET-C4s.csv CET-C5.csv CET-C5s.csv CET-C6.csv CET-C6s.csv CET-C7.csv CET-C7s.csv CET-CBC1.csv CET-CBC2.csv CET-CBD1.csv CET-CBL1.csv CET-CBL2.csv CET-CBTC1.csv CET-CBTC2.csv CET-CBTD1.csv CET-CBTL1.csv CET-CBTL2.csv CET-D1.csv CET-D10.csv CET-D11.csv CET-D12.csv CET-D13.csv CET-D1A.csv CET-D2.csv CET-D3.csv CET-D4.csv CET-D6.csv CET-D7.csv CET-D8.csv CET-D9.csv CET-I1.csv CET-I2.csv CET-I3.csv CET-L1.csv CET-L10.csv CET-L11.csv CET-L12.csv CET-L13.csv CET-L14.csv CET-L15.csv CET-L16.csv CET-L17.csv CET-L18.csv CET-L19.csv CET-L2.csv CET-L3.csv CET-L4.csv CET-L5.csv CET-L6.csv CET-L7.csv CET-L8.csv CET-L9.csv CET-R1.csv CET-R2.csv CET-R3.csv CET-R4.csv cividis.csv inferno.csv magma.csv PAL-relaxed.hex PAL-relaxed_bright.hex plasma.csv viridis.csv palette.py __init__.py configfile.py CmdInput.py Console.py template.ui template_pyqt5.py template_pyqt6.py template_pyside2.py template_pyside6.py __init__.py debug.py Container.py Dock.py DockArea.py DockDrop.py __init__.py Arrow.py BarGraphItem.py beeswarm.py CLIexample.py ColorBarItem.py ColorButton.py ColorGradientPlots.py colorMaps.py colorMapsLinearized.py ConsoleWidget.py contextMenu.py crosshair.py customGraphicsItem.py CustomGraphItem.py customPlot.py plotTest.py setup.py DataSlicing.py DataTreeWidget.py DateAxisItem.py DateAxisItem_QtDesigner.py DateAxisItem_QtDesigner.ui designerExample.py designerExample.ui DiffTreeWidget.py dockarea.py Draw.py ErrorBarItem.py ExampleApp.py exampleLoaderTemplate.ui exampleLoaderTemplate_pyqt5.py exampleLoaderTemplate_pyqt6.py exampleLoaderTemplate_pyside2.py exampleLoaderTemplate_pyside6.py FillBetweenItem.py Flowchart.py FlowchartCustomNode.py fractal.py GLBarGraphItem.py GLGradientLegendItem.py GLGraphItem.py GLImageItem.py GLIsosurface.py GLLinePlotItem.py GLMeshItem.py GLPainterItem.py GLScatterPlotItem.py GLshaders.py GLSurfacePlot.py GLTextItem.py GLViewWidget.py GLVolumeItem.py GradientEditor.py GradientWidget.py GraphicsLayout.py GraphicsScene.py GraphItem.py hdf5.py histogram.py HistogramLUT.py imageAnalysis.py ImageItem.py ImageView.py InfiniteLine.py infiniteline_performance.py isocurve.py JoystickButton.py Legend.py linkedViews.py logAxis.py LogPlotTest.py MatrixDisplayExample.py MouseSelection.py MultiplePlotAxes.py multiplePlotSpeedTest.py MultiPlotSpeedTest.py MultiPlotWidget.py multiprocess.py NonUniformImage.py pyoptic.py schott_glasses.csv.gz __init__.py optics_demos.py PanningPlot.py parallelize.py parametertree.py PColorMeshItem.py PlotAutoRange.py PlotSpeedTest.py Plotting.py PlotWidget.py ProgressDialog.py plotTest.py setup.py Grid Expansion.cfg Twin Paradox (grid).cfg Twin Paradox.cfg relativity.py __init__.py relativity_demo.py RemoteGraphicsView.py RemoteSpeedTest.py ROIExamples.py ROItypes.py RunExampleApp.py ScaleBar.py ScatterPlot.py ScatterPlotSpeedTest.py ScatterPlotWidget.py scrollingPlots.py SimplePlot.py SpinBox.py Symbols.py syntax.py TableWidget.py template.py test_examples.py text.py TreeWidget.py utils.py chain.py relax.py __init__.py verlet_chain_demo.py VideoSpeedTest.py VideoTemplate.ui VideoTemplate_pyqt5.py VideoTemplate_pyqt6.py VideoTemplate_pyside2.py VideoTemplate_pyside6.py ViewBox.py ViewBoxFeatures.py ViewLimits.py _buildParamTypes.py _paramtreecfg.py __init__.py __main__.py exceptionHandling.py CSVExporter.py Exporter.py HDF5Exporter.py ImageExporter.py Matplotlib.py PrintExporter.py SVGExporter.py __init__.py Flowchart.py FlowchartCtrlTemplate.ui FlowchartCtrlTemplate_pyqt5.py FlowchartCtrlTemplate_pyqt6.py FlowchartCtrlTemplate_pyside2.py FlowchartCtrlTemplate_pyside6.py FlowchartGraphicsView.py FlowchartTemplate.ui FlowchartTemplate_pyqt5.py FlowchartTemplate_pyqt6.py FlowchartTemplate_pyside2.py FlowchartTemplate_pyside6.py common.py Data.py Display.py Filters.py functions.py Operators.py __init__.py Node.py NodeLibrary.py Terminal.py __init__.py frozenSupport.py functions.py functions_numba.py ArrowItem.py AxisItem.py BarGraphItem.py ButtonItem.py ColorBarItem.py CurvePoint.py DateAxisItem.py ErrorBarItem.py FillBetweenItem.py GradientEditorItem.py GradientLegend.py GraphicsItem.py GraphicsLayout.py GraphicsObject.py GraphicsWidget.py GraphicsWidgetAnchor.py GraphItem.py GridItem.py HistogramLUTItem.py ImageItem.py InfiniteLine.py IsocurveItem.py ItemGroup.py LabelItem.py LegendItem.py LinearRegionItem.py MultiPlotItem.py NonUniformImage.py PColorMeshItem.py PlotCurveItem.py PlotDataItem.py plotConfigTemplate.ui plotConfigTemplate_pyqt5.py plotConfigTemplate_pyqt6.py plotConfigTemplate_pyside2.py plotConfigTemplate_pyside6.py PlotItem.py __init__.py ROI.py ScaleBar.py ScatterPlotItem.py TargetItem.py TextItem.py UIGraphicsItem.py axisCtrlTemplate.ui axisCtrlTemplate_pyqt5.py axisCtrlTemplate_pyqt6.py axisCtrlTemplate_pyside2.py axisCtrlTemplate_pyside6.py ViewBox.py ViewBoxMenu.py __init__.py VTickGroup.py __init__.py exportDialog.py exportDialogTemplate.ui exportDialogTemplate_pyqt5.py exportDialogTemplate_pyqt6.py exportDialogTemplate_pyside2.py exportDialogTemplate_pyside6.py GraphicsScene.py mouseEvents.py __init__.py graphicsWindows.py auto.png ctrl.png default.png icons.svg invisibleEye.svg lock.png __init__.py ImageView.py ImageViewTemplate.ui ImageViewTemplate_pyqt5.py ImageViewTemplate_pyqt6.py ImageViewTemplate_pyside2.py ImageViewTemplate_pyside6.py __init__.py GraphicsView.py __init__.py license.txt MetaArray.py readMeta.m __init__.py bootstrap.py parallelizer.py processes.py remoteproxy.py __init__.py GLGraphicsItem.py GLViewWidget.py GLAxisItem.py GLBarGraphItem.py GLBoxItem.py GLGradientLegendItem.py GLGraphItem.py GLGridItem.py GLImageItem.py GLLinePlotItem.py GLMeshItem.py GLScatterPlotItem.py GLSurfacePlotItem.py GLTextItem.py GLVolumeItem.py __init__.py MeshData.py shaders.py __init__.py ordereddict.py Parameter.py ParameterItem.py ParameterSystem.py ParameterTree.py action.py basetypes.py bool.py calendar.py checklist.py color.py colormap.py file.py font.py list.py numeric.py pen.py progress.py qtenum.py slider.py str.py text.py __init__.py SystemSolver.py __init__.py pgcollections.py PlotData.py Point.py ptime.py __init__.py __init__.py __init__.py __init__.py reload.py SignalProxy.py SRTTransform.py SRTTransform3D.py ThreadsafeTimer.py Transform3D.py units.py LICENSE.txt README.txt win32.py winterm.py __init__.py cprint.py cupy_helper.py garbage_collector.py get_resolution.py glinfo.py lru_cache.py mutex.py numba_helper.py pil_fix.py __init__.py Vector.py WidgetGroup.py BusyCursor.py CheckTable.py ColorButton.py ColorMapWidget.py ComboBox.py DataFilterWidget.py DataTreeWidget.py DiffTreeWidget.py FeedbackButton.py FileDialog.py GradientWidget.py GraphicsLayoutWidget.py GraphicsView.py GroupBox.py HistogramLUTWidget.py JoystickButton.py LayoutWidget.py MatplotlibWidget.py MultiPlotWidget.py PathButton.py PenPreviewLabel.py PlotWidget.py ProgressDialog.py RawImageWidget.py RemoteGraphicsView.py ScatterPlotWidget.py SpinBox.py TableWidget.py TreeWidget.py ValueLabel.py VerticalLabel.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py conftest.py test_dock.py test_dockarea.py test_csv.py test_hdf5.py test_image.py test_matplotlib.py test_svg.py __init__.py test_PlotItem.py test_ArrowItem.py test_AxisItem.py test_ErrorBarItem.py test_GraphicsItem.py test_ImageItem.py test_ImageItemFormat.py test_InfiniteLine.py test_LegendItem.py test_LinearRegionItem.py test_NonUniformImage.py test_PlotCurveItem.py test_PlotDataItem.py test_ROI.py test_ScatterPlotItem.py test_TextItem.py test_ViewBox.py test_ViewBoxZoom.py bool.png gradient_mono_byte.png gradient_mono_byte_levels.png gradient_mono_int.png gradient_mono_int_levels.png gradient_rgba_byte.png gradient_rgba_byte_levels.png gradient_rgba_float.png gradient_rgba_float_additive.png gradient_rgba_float_alpha.png init.png levels1.png lut.png monochrome.png resolution_without_downsampling.png resolution_with_downsampling_x.png resolution_with_downsampling_y.png colormap-3x3.png lut-3x3.png connectall.png connectarray.png connectfinite.png connectpairs.png roi_getarrayregion.png roi_getarrayregion_anisotropic.png roi_getarrayregion_halfpx.png roi_getarrayregion_img_trans.png roi_getarrayregion_inverty.png roi_getarrayregion_resize.png roi_getarrayregion_rotate.png roi_getarrayregion.png roi_getarrayregion_anisotropic.png roi_getarrayregion_halfpx.png roi_getarrayregion_img_trans.png roi_getarrayregion_inverty.png roi_getarrayregion_resize.png roi_getarrayregion_rotate.png closed_clear.png closed_click_segment.png closed_drag_handle.png closed_drag_new_handle.png closed_drag_roi.png closed_hover_handle.png closed_hover_roi.png closed_hover_segment.png closed_init.png closed_setpoints.png closed_setstate.png open_clear.png open_click_segment.png open_drag_handle.png open_drag_new_handle.png open_drag_roi.png open_hover_handle.png open_hover_roi.png open_hover_segment.png open_init.png open_setpoints.png open_setstate.png roi_getarrayregion.png roi_getarrayregion_anisotropic.png roi_getarrayregion_halfpx.png roi_getarrayregion_img_trans.png roi_getarrayregion_inverty.png roi_getarrayregion_rotate.png roi_getarrayregion.png roi_getarrayregion_anisotropic.png roi_getarrayregion_halfpx.png roi_getarrayregion_img_trans.png roi_getarrayregion_inverty.png roi_getarrayregion_resize.png roi_getarrayregion_rotate.png test_imageview.py image_testing.py test_Parameter.py test_parametertypes.py test_colormap.py test_configparser.py test_functions.py test_makeARGB.py test_Point.py test_qimage_writethru.py test_qt.py test_ref_cycles.py test_reload.py test_signalproxy.py test_srttransform3d.py test_stability.py test_Vector.py uictest.ui ui_testing.py test_lru_cache.py test_busycursor.py test_combobox.py test_graphics_view.py test_histogramlutwidget.py test_progressdialog.py test_spinbox.py test_tablewidget.py __init__.py generateChangelog.py pg-release.py py2exe.bat py2exeSetupWindows.py pyuic5 rebuildPtreeRst.py rebuildUi.py release_instructions.md setupHelpers.py shell.py tox.ini",
        "setup.py": "# Build with `python setup.py build_exe`\nimport shutil\nfrom pathlib import Path\n\nfrom cx_Freeze import Executable, setup\n\n# Remove the build folder\nshutil.rmtree(\"build\", ignore_errors=True)\nshutil.rmtree(\"dist\", ignore_errors=True)\nimport sys\n\nincludes = ['pyqtgraph.graphicsItems',\n'numpy', 'atexit']\nexcludes = ['cvxopt','_gtkagg', '_tkagg', 'bsddb', 'curses', 'email', 'pywin.debugger',\n'pywin.debugger.dbgcon', 'pywin.dialogs', 'tcl','tables',\n'Tkconstants', 'Tkinter', 'zmq','PySide','pysideuic','scipy','matplotlib']\n\n# Workaround for making sure the templates are included in the frozen app package\ninclude_files = []\nimport pyqtgraph\n\npg_folder = Path(pyqtgraph.__file__).parent\ntemplates = pg_folder.rglob('*template*.py')\nsources = [str(w) for w in templates]\ndestinations = ['lib' + w.replace(str(pg_folder.parent), '') for w in sources]\nfor a in zip(sources, destinations):\ninclude_files.append(a)\n\nprint(include_files)\n\nif sys.version[0] == '2':\n# causes syntax error on py2\nexcludes.append('PyQt4.uic.port_v3')\n\nbase = None\nif sys.platform == \"win32\":\nbase = \"Win32GUI\"\n\nbuild_exe_options = {'excludes': excludes,\n'includes':includes, 'include_msvcr':True,\n'optimize':1, \"include_files\": include_files,}\n\nsetup(name = \"cx_freeze plot test\",\nversion = \"0.2\",\ndescription = \"cx_freeze plot test\",\noptions = {\"build_exe\": build_exe_options},\nexecutables = [Executable(\"plotTest.py\", base=base)])\n"
    },
    {
        "package_name": "pyre2-0.3.6",
        "file_list": "AUTHORS CHANGELOG.rst FindCython.cmake CMakeLists.txt HISTORY LICENSE MANIFEST.in PKG-INFO pyproject.toml dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst setup.cfg setup.py .agignore CMakeLists.txt compile.pxi includes.pxi match.pxi pattern.pxi re2.pyx _re2macros.h cnn_homepage.dat performance.py re_utils.py test_charliterals.txt test_count.txt test_emptygroups.txt test_findall.txt test_finditer.txt test_match_expand.txt test_mmap.txt test_namedgroups.txt test_pattern.txt test_re.py test_search.txt test_split.txt test_sub.txt test_unicode.txt wikipages.xml.gz __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\n#\n\nimport os\nimport sys\nimport subprocess\n\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\n\n\n# update the release version both here and in conda.recipe\/meta.yaml\n__version__ = '0.3.6'\n\n# Convert distutils Windows platform specifiers to CMake -A arguments\nPLAT_TO_CMAKE = {\n\"win32\": \"Win32\",\n\"win-amd64\": \"x64\",\n\"win-arm32\": \"ARM\",\n\"win-arm64\": \"ARM64\",\n}\n\n# A CMakeExtension needs a sourcedir instead of a file list.\nclass CMakeExtension(Extension):\ndef __init__(self, name, sourcedir=\"\"):\nExtension.__init__(self, name, sources=[], libraries=['re2'])\nself.sourcedir = os.path.abspath(sourcedir)\n\n\nclass CMakeBuild(build_ext):\n\ndef build_extension(self, ext):\nextdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))\n\n# required for auto-detection of auxiliary \"native\" libs\nif not extdir.endswith(os.path.sep):\nextdir += os.path.sep\n\n# Set a sensible default build type for packaging\nif \"CMAKE_BUILD_OVERRIDE\" not in os.environ:\ncfg = \"Debug\" if self.debug else \"RelWithDebInfo\"\nelse:\ncfg = os.environ.get(\"CMAKE_BUILD_OVERRIDE\", \"\")\n\n# CMake lets you override the generator - we need to check this.\n# Can be set with Conda-Build, for example.\ncmake_generator = os.environ.get(\"CMAKE_GENERATOR\", \"\")\n\n# Set Python_EXECUTABLE instead if you use PYBIND11_FINDPYTHON\n# SCM_VERSION_INFO shows you how to pass a value into the C++ code\n# from Python.\ncmake_args = [\n\"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={}\".format(extdir),\n\"-DPYTHON_EXECUTABLE={}\".format(sys.executable),\n\"-DSCM_VERSION_INFO={}\".format(__version__),\n\"-DCMAKE_BUILD_TYPE={}\".format(cfg), # not used on MSVC, but no harm\n]\nbuild_args = [\"--verbose\"]\n\n# CMake also lets you provide a toolchain file.\n# Can be set in CI build environments for example.\ncmake_toolchain_file = os.environ.get(\"CMAKE_TOOLCHAIN_FILE\", \"\")\nif cmake_toolchain_file:\ncmake_args += [\"-DCMAKE_TOOLCHAIN_FILE={}\".format(cmake_toolchain_file)]\n\nif self.compiler.compiler_type != \"msvc\":\n# Using Ninja-build since it a) is available as a wheel and b)\n# multithreads automatically. MSVC would require all variables be\n# exported for Ninja to pick it up, which is a little tricky to do.\n# Users can override the generator with CMAKE_GENERATOR in CMake\n# 3.15+.\nif not cmake_generator:\ncmake_args += [\"-GNinja\"]\n\nelse:\n\n# Single config generators are handled \"normally\"\nsingle_config = any(x in cmake_generator for x in {\"NMake\", \"Ninja\"})\n\n# CMake allows an arch-in-generator style for backward compatibility\ncontains_arch = any(x in cmake_generator for x in {\"ARM\", \"Win64\"})\n\n# Specify the arch if using MSVC generator, but only if it doesn't\n# contain a backward-compatibility arch spec already in the\n# generator name.\nif not single_config and not contains_arch:\ncmake_args += [\"-A\", PLAT_TO_CMAKE[self.plat_name]]\n\n# Multi-config generators have a different way to specify configs\nif not single_config:\ncmake_args += [\n\"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{}={}\".format(cfg.upper(), extdir)\n]\nbuild_args += [\"--config\", cfg]\n\n# Set CMAKE_BUILD_PARALLEL_LEVEL to control the parallel build level\n# across all generators.\nif \"CMAKE_BUILD_PARALLEL_LEVEL\" not in os.environ:\n# self.parallel is a Python 3 only way to set parallel jobs by hand\n# using -j in the build_ext call, not supported by pip or PyPA-build.\nif hasattr(self, \"parallel\") and self.parallel:\n# CMake 3.12+ only.\nbuild_args += [\"-j{}\".format(self.parallel)]\n\nif not os.path.exists(self.build_temp):\nos.makedirs(self.build_temp)\n\nsubprocess.check_call(\n[\"cmake\", ext.sourcedir] + cmake_args, cwd=self.build_temp\n)\nsubprocess.check_call(\n[\"cmake\", \"--build\", \".\"] + build_args, cwd=self.build_temp\n)\n\n\nsetup(\nversion=__version__,\next_modules=[CMakeExtension('re2')],\ncmdclass={'build_ext': CMakeBuild},\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "PyReact-0.6.0",
        "file_list": "CONTRIBUTING.md DESCRIPTION LICENSE MANIFEST.in PKG-INFO dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt JSXTransformer.js react-with-addons.js react-with-addons.min.js react.js react.min.js jsx.py source.py test.js jsx.py source.py __init__.py __main__.py pipeline.py __init__.py __init__.py README.md setup.cfg setup.py VERSIONS.md",
        "setup.py": "from setuptools import setup, find_packages\nfrom react import VERSION\n\n\nsetup(\nname='PyReact',\nversion=VERSION,\nauthor='Kunal Mehta',\nauthor_email='kunalm@fb.com',\nurl='https:\/\/github.com\/reactjs\/react-python\/',\nlicense='Apache-2.0',\ndescription='Python bridge to JSX & the React JavaScript library.',\nlong_description=open('DESCRIPTION').read(),\nclassifiers =[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Topic :: Software Development :: Code Generators',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\npackages=find_packages(),\ninclude_package_data=True,\npackage_data={'js': [\n'js\/react\/react.js',\n'js\/react\/react.min.js',\n'js\/react\/react-with-addons.js',\n'js\/react\/react-with-addons.min.js',\n'js\/react\/JSXTransformer.js',\n]},\ninstall_requires=[\n'PyExecJS >= 1.0.5',\n]\n)\n"
    },
    {
        "package_name": "Pyrebase-3.0.27",
        "file_list": "PKG-INFO pyrebase.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py sseclient.py __init__.py",
        "setup.py": "from setuptools import setup, find_packages\n\nsetup(\nname='Pyrebase',\nversion='3.0.27',\nurl='https:\/\/github.com\/thisbejim\/Pyrebase',\ndescription='A simple python wrapper for the Firebase API',\nauthor='James Childs-Maidment',\nlicense='MIT',\nclassifiers=[\n'Development Status :: 3 - Alpha',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 3.4',\n],\nkeywords='Firebase',\npackages=find_packages(exclude=['tests']),\ninstall_requires=[\n'requests==2.11.1',\n'gcloud==0.17.0',\n'oauth2client==3.0.0',\n'requests_toolbelt==0.7.0',\n'python_jwt==2.0.1',\n'pycryptodome==3.4.3'\n]\n)\n"
    },
    {
        "package_name": "PyRect-0.2.0",
        "file_list": "AUTHORS.txt conf.py index.rst make.bat Makefile modules.rst pyrect.rst roadmap.rst LICENSE.txt PKG-INFO __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt README.rst setup.cfg setup.py test_pyrect.py",
        "setup.py": "from setuptools import setup\nimport os\nimport re\n\n# Load version from module (without loading the whole module)\nwith open('pyrect\/__init__.py', 'r') as fd:\nversion = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]',\nfd.read(), re.MULTILINE).group(1)\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(os.path.join(here, 'README.rst')) as f:\nlong_description = f.read()\n\n\nsetup(\nname='PyRect',\nversion=version,\nurl='https:\/\/github.com\/asweigart\/pyrect',\nauthor='Al Sweigart',\nauthor_email='al@inventwithpython.com',\ndescription=('PyRect is a simple module with a Rect class for Pygame-like rectangular areas.'),\nlicense='BSD',\nlong_description=long_description,\npackages=['pyrect'],\ntest_suite='tests',\ninstall_requires=[],\nkeywords=\"pygame rect rectangular rectangle area\",\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Environment :: Win32 (MS Windows)',\n'Environment :: MacOS X',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.5',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.1',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: 3.11',\n],\n)"
    },
    {
        "package_name": "pyro-ppl-1.8.1",
        "file_list": "LICENSE.md MANIFEST.in PKG-INFO autoguide.py autoname.py named.py scoping.py __init__.py hidden_layer.py utils.py __init__.py __init__.py infer.py __init__.py easyguide.py __init__.py compartmental.py distributions.py models.py util.py __init__.py bart.py finance.py multi_mnist.py nextstrain.py polyphonic_data_loader.py scanvi_data.py util.py __init__.py evaluate.py forecaster.py util.py __init__.py enum_messenger.py named_messenger.py plate_messenger.py primitives.py replay_messenger.py runtime.py trace_messenger.py __init__.py discrete.py elbo.py traceenum_elbo.py tracetmc_elbo.py trace_elbo.py __init__.py __init__.py brownian.py coregionalize.py dot_product.py isotropic.py kernel.py periodic.py static.py __init__.py binary.py gaussian.py likelihood.py multi_class.py poisson.py __init__.py gplvm.py gpr.py model.py sgpr.py vgp.py vsgp.py __init__.py parameterized.py util.py __init__.py minipyro.py dataloaders.py missingdatahmm.py models.py statearrangers.py __init__.py eig.py glmm.py guides.py __init__.py search.py util.py __init__.py random_variable.py __init__.py base.py gp.py lgssm.py lgssmgp.py __init__.py assignment.py distributions.py dynamic_models.py extended_kalman_filter.py hashing.py measurements.py __init__.py util.py __init__.py affine_beta.py asymmetriclaplace.py avf_mvn.py coalescent.py conditional.py conjugate.py constraints.py delta.py diag_normal_mixture.py diag_normal_mixture_shared_cov.py distribution.py empirical.py extended.py folded.py gaussian_scale_mixture.py hmm.py improper_uniform.py inverse_gamma.py kl.py lkj.py logistic.py log_normal_negative_binomial.py mixture.py multivariate_studentt.py omt_mvn.py one_one_matching.py one_two_matching.py ordered_logistic.py polya_gamma.py projected_normal.py rejector.py relaxed_straight_through.py score_parts.py sine_bivariate_von_mises.py sine_skewed.py softlaplace.py spanning_tree.cpp spanning_tree.py stable.py fakes.py gof.py naive_dirichlet.py rejection_exponential.py rejection_gamma.py special.py __init__.py torch.py torch_distribution.py torch_patch.py torch_transform.py affine_autoregressive.py affine_coupling.py basic.py batchnorm.py block_autoregressive.py cholesky.py discrete_cosine.py generalized_channel_permute.py haar.py householder.py lower_cholesky_affine.py matrix_exponential.py neural_autoregressive.py normalize.py ordered.py permute.py planar.py polynomial.py power.py radial.py softplus.py spline.py spline_autoregressive.py spline_coupling.py sylvester.py unit_cholesky.py utils.py __init__.py unit.py util.py von_mises_3d.py zero_inflated.py __init__.py generic.py abstract_infer.py effect.py gaussian.py guides.py initialization.py structured.py utils.py __init__.py csis.py discrete.py elbo.py energy_distance.py enum.py importance.py inspect.py adaptation.py api.py hmc.py logger.py mcmc_kernel.py nuts.py util.py __init__.py predictive.py renyi_elbo.py conjugate.py discrete_cosine.py haar.py hmm.py loc_scale.py neutra.py projected_normal.py reparam.py softmax.py split.py stable.py strategies.py structured.py studentt.py transform.py unit_jacobian.py __init__.py rws.py smcfilter.py svgd.py svi.py traceenum_elbo.py tracegraph_elbo.py tracetmc_elbo.py trace_elbo.py trace_mean_field_elbo.py trace_mmd.py trace_tail_adaptive_elbo.py util.py __init__.py logger.py auto_reg_nn.py dense_nn.py module.py __init__.py arrowhead.py contract.py dual_averaging.py adjoint.py torch_log.py torch_map.py torch_marginal.py torch_sample.py util.py __init__.py gamma_gaussian.py gaussian.py hessian.py indexing.py integrator.py jit.py linalg.py newton.py packed.py provenance.py rings.py special.py ssm_gp.py stats.py streaming.py tensor_utils.py welford.py __init__.py adagrad_rmsprop.py clipped_adam.py dct_adam.py horovod.py lr_scheduler.py multi.py optim.py pytorch_optimizers.py __init__.py param_store.py __init__.py block_messenger.py broadcast_messenger.py collapse_messenger.py condition_messenger.py do_messenger.py enum_messenger.py escape_messenger.py guide.py handlers.py indep_messenger.py infer_config_messenger.py lift_messenger.py markov_messenger.py mask_messenger.py messenger.py plate_messenger.py reentrant_messenger.py reparam_messenger.py replay_messenger.py runtime.py scale_messenger.py seed_messenger.py subsample_messenger.py trace_messenger.py trace_struct.py uncondition_messenger.py util.py __init__.py primitives.py util.py _version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "# Copyright (c) 2017-2019 Uber Technologies, Inc.\n# SPDX-License-Identifier: Apache-2.0\n\nimport os\nimport subprocess\nimport sys\n\nfrom setuptools import find_packages, setup\n\nPROJECT_PATH = os.path.dirname(os.path.abspath(__file__))\nVERSION = \"\"\"\n# This file is auto-generated with the version information during setup.py installation.\n\n__version__ = '{}'\n\"\"\"\n\n# Find pyro version.\nfor line in open(os.path.join(PROJECT_PATH, \"pyro\", \"__init__.py\")):\nif line.startswith(\"version_prefix = \"):\nversion = line.strip().split()[2][1:-1]\n\n# Append current commit sha to version\ncommit_sha = \"\"\ntry:\ncurrent_tag = (\nsubprocess.check_output([\"git\", \"tag\", \"--points-at\", \"HEAD\"], cwd=PROJECT_PATH)\n.decode(\"ascii\")\n.strip()\n)\n# only add sha if HEAD does not point to the release tag\nif not current_tag == version:\ncommit_sha = (\nsubprocess.check_output(\n[\"git\", \"rev-parse\", \"--short\", \"HEAD\"], cwd=PROJECT_PATH\n)\n.decode(\"ascii\")\n.strip()\n)\n# catch all exception to be safe\nexcept Exception:\npass # probably not a git repo\n\n# Write version to _version.py\nif commit_sha:\nversion += \"+{}\".format(commit_sha)\nwith open(os.path.join(PROJECT_PATH, \"pyro\", \"_version.py\"), \"w\") as f:\nf.write(VERSION.format(version))\n\n\n# READ README.md for long description on PyPi.\n# This requires uploading via twine, e.g.:\n# $ python setup.py sdist bdist_wheel\n# $ twine upload --repository-url https:\/\/test.pypi.org\/legacy\/ dist\/* # test version\n# $ twine upload dist\/*\ntry:\nlong_description = open(\"README.md\", encoding=\"utf-8\").read()\nexcept Exception as e:\nsys.stderr.write(\"Failed to read README.md: {}\\n\".format(e))\nsys.stderr.flush()\nlong_description = \"\"\n\n# Remove badges since they will always be obsolete.\n# This assumes the first 12 lines contain badge info.\nlong_description = \"\\n\".join([str(line) for line in long_description.split(\"\\n\")[12:]])\n\n# examples\/tutorials\nEXTRAS_REQUIRE = [\n\"jupyter>=1.0.0\",\n\"graphviz>=0.8\",\n\"matplotlib>=1.3\",\n\"torchvision>=0.12.0\",\n\"visdom>=0.1.4\",\n\"pandas\",\n\"pillow==8.2.0\", # https:\/\/github.com\/pytorch\/pytorch\/issues\/61125\n\"scikit-learn\",\n\"seaborn\",\n\"wget\",\n\"lap\",\n# 'biopython>=1.54',\n# 'scanpy>=1.4', # Requires HDF5\n# 'scvi>=0.6', # Requires loopy and other fragile packages\n]\n\nsetup(\nname=\"pyro-ppl\",\nversion=version,\ndescription=\"A Python library for probabilistic modeling and inference\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\npackages=find_packages(include=[\"pyro\", \"pyro.*\"]),\npackage_data={\"pyro.distributions\": [\"*.cpp\"]},\nauthor=\"Uber AI Labs\",\nurl=\"http:\/\/pyro.ai\",\nproject_urls={\n\"Documentation\": \"https:\/\/docs.pyro.ai\",\n\"Source\": \"https:\/\/github.com\/pyro-ppl\/pyro\",\n},\ninstall_requires=[\n# if you add any additional libraries, please also\n# add them to `docs\/requirements.txt`\n# numpy is necessary for some functionality of PyTorch\n\"numpy>=1.7\",\n\"opt_einsum>=2.3.2\",\n\"pyro-api>=0.1.1\",\n\"torch>=1.11.0\",\n\"tqdm>=4.36\",\n],\nextras_require={\n\"extras\": EXTRAS_REQUIRE,\n\"test\": EXTRAS_REQUIRE\n+ [\n\"black>=21.4b0\",\n\"flake8\",\n\"nbval\",\n\"pytest>=5.0\",\n\"pytest-cov\",\n\"scipy>=1.1\",\n],\n\"profile\": [\"prettytable\", \"pytest-benchmark\", \"snakeviz\"],\n\"dev\": EXTRAS_REQUIRE\n+ [\n\"black>=21.4b0\",\n\"flake8\",\n\"isort>=5.0\",\n\"mypy>=0.812\",\n\"nbformat\",\n\"nbsphinx>=0.3.2\",\n\"nbstripout\",\n\"nbval\",\n\"ninja\",\n\"pypandoc\",\n\"pytest>=5.0\",\n\"pytest-xdist\",\n\"scipy>=1.1\",\n\"sphinx\",\n\"sphinx_rtd_theme\",\n\"yapf\",\n],\n\"horovod\": [\"horovod[pytorch]>=0.19\"],\n\"funsor\": [\n# This must be a released version when Pyro is released.\n# \"funsor[torch] @ git+git:\/\/github.com\/pyro-ppl\/funsor.git@7bb52d0eae3046d08a20d1b288544e1a21b4f461\",\n\"funsor[torch]==0.4.3\",\n],\n},\npython_requires=\">=3.7\",\nkeywords=\"machine learning statistics probabilistic programming bayesian modeling pytorch\",\nlicense=\"Apache 2.0\",\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Education\",\n\"Intended Audience :: Science\/Research\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: POSIX :: Linux\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n],\n# yapf\n)\n"
    },
    {
        "package_name": "pyscrypt-1.6.2",
        "file_list": "LICENSE.txt PKG-INFO aesctr.py file.py hash.orig.py hash.py __init__.py README.md setup.py run-tests-file.py run-tests-hash.py test1.scrypt test1.txt test2.scrypt test2.txt",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom distutils.core import setup\n\nLONG_DESCRIPTION = '''A very simple, pure-Python implementation of the scrypt\npassword-based key derivation function and scrypt file format library with no\ndependencies beyond standard Python libraries. See README.md for API\nreference and details.'''\n\nsetup(name = 'pyscrypt',\nversion = '1.6.2',\ndescription = 'Pure-Python Implementation of the scrypt password-based key derivation function and scrypt file format library',\nlong_description = LONG_DESCRIPTION,\nauthor = 'Richard Moore',\nauthor_email = 'pyscrypt@ricmoo.com',\nurl = 'https:\/\/github.com\/ricmoo\/pyscrypt',\npackages = ['pyscrypt'],\nclassifiers = [\n'Topic :: Security :: Cryptography',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 3',\n],\nlicense = \"License :: OSI Approved :: MIT License\",\n)\n"
    },
    {
        "package_name": "pyshark-0.5.3",
        "file_list": "MANIFEST.in PKG-INFO cache.py capture.py file_capture.py inmem_capture.py live_capture.py live_ring_capture.py pipe_capture.py remote_capture.py __init__.py config.ini config.py ek_field_mapping.py common.py consts.py fields.py base.py ek_layer.py json_layer.py xml_layer.py __init__.py packet.py packet_summary.py __init__.py base_parser.py tshark_ek.py tshark_json.py tshark_xml.py __init__.py tshark.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.txt setup.cfg setup.py",
        "setup.py": "import os\nfrom setuptools import setup, find_packages\n\nwith open(os.path.join(os.path.dirname(__file__), 'README.txt')) as f:\nlong_description = f.read()\n\nsetup(\nname=\"pyshark\",\nversion=\"0.5.3\",\npackages=find_packages(),\npackage_data={'': ['*.ini', '*.pcapng']},\ninstall_requires=['lxml', 'py', 'packaging', 'appdirs'],\ntests_require=['pytest'],\nurl=\"https:\/\/github.com\/KimiNewt\/pyshark\",\nlicense=\"MIT\",\nlong_description=long_description,\nauthor=\"KimiNewt\",\ndescription=\"Python wrapper for tshark, allowing python packet parsing using wireshark dissectors\",\nkeywords=\"wireshark capture packets parsing packet\",\n\nclassifiers=[\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n],\n)\n"
    },
    {
        "package_name": "pysql-beam-0.2",
        "file_list": "PKG-INFO cloud_sql_to_file.py __init__.py exceptions.py sql.py wrapper.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "\"\"\"\nMaking the module installable\n\n\"\"\"\n\nimport setuptools\nwith open(\".\/README.md\", \"r\") as fh:\nreadme = fh.read()\n\nwith open(\".\/requirements.txt\", \"r\") as dependency:\nREQUIRED_PACKAGES = dependency.read().split(\"\\n\")\n\nversion = \"0.2\"\n\nsetuptools.setup(\nname='pysql-beam',\nversion=version,\nauthor=\"Deepak Verma\",\nauthor_email=\"yesdeepakverma@gmail.com\",\ndescription=\"Apache beam mysql and postgres io connector in pure python\",\nlong_description=readme,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/bitbucket.org\/dverma90\/pysql-beam\",\ninstall_requires=REQUIRED_PACKAGES,\npackages=setuptools.find_packages(),\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3\",\n'License :: OSI Approved :: MIT License',\n'Intended Audience :: Developers',\n\"Operating System :: OS Independent\",\n],\nkeywords=\"apache-beam,mysql,postgres,python,io,source,sink,read,write,database\",\n)\n"
    },
    {
        "package_name": "pytabcmd-9.2.0",
        "file_list": "PKG-INFO pytabcmd.py settings.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "from setuptools import setup, find_packages\n\nsetup(\nname='pytabcmd',\nversion='9.2.0',\ndescription='A tabcmd wrapper for Python',\nurl='https:\/\/github.com\/AccesoGroup\/pytabcmd',\nauthor='MiguelSR',\nauthor_email='miguelsr87@gmail.com',\nlicense='MIT',\npackages=find_packages(exclude=['tests']),\nkeywords='tabcmb tableau',\ninstall_requires=['configparser']\n)\n"
    },
    {
        "package_name": "pytest-deadfixtures-2.2.1",
        "file_list": "AUTHORS.rst CHANGES.rst LICENSE MANIFEST.in PKG-INFO dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt pytest_deadfixtures.py README.rst setup.cfg setup.py",
        "setup.py": "import codecs\nimport os\nimport re\n\nfrom setuptools import Command, setup\n\nBASE_PATH = os.path.abspath(os.path.dirname(__file__))\n\n\ndef read(fname):\nfile_path = os.path.join(os.path.dirname(__file__), fname)\nreturn codecs.open(file_path, encoding=\"utf-8\").read()\n\n\ndef get_version():\nchanges_path = os.path.join(BASE_PATH, \"CHANGES.rst\")\nregex = r\"^#*\\s*(?P<version>[0-9]+\\.[0-9]+(\\.[0-9]+)?)$\"\nwith codecs.open(changes_path, encoding=\"utf-8\") as changes_file:\nfor line in changes_file:\nres = re.match(regex, line)\nif res:\nreturn res.group(\"version\")\nreturn \"0.0.0\"\n\n\nversion = get_version()\n\n\nclass VersionCommand(Command):\ndescription = \"print current library version\"\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nprint(version)\n\n\nsetup(\nname=\"pytest-deadfixtures\",\nversion=version,\nauthor=\"Jo\u00e3o Luiz Lorencetti\",\nauthor_email=\"me@dirtycoder.net\",\nmaintainer=\"Jo\u00e3o Luiz Lorencetti\",\nmaintainer_email=\"me@dirtycoder.net\",\nlicense=\"MIT\",\nurl=\"https:\/\/github.com\/jllorencetti\/pytest-deadfixtures\",\ndescription=\"A simple plugin to list unused fixtures in pytest\",\nlong_description=read(\"README.rst\"),\npy_modules=[\"pytest_deadfixtures\"],\ninstall_requires=[\"pytest>=3.0.0\"],\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Framework :: Pytest\",\n\"Intended Audience :: Developers\",\n\"Topic :: Software Development :: Testing\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Operating System :: OS Independent\",\n\"License :: OSI Approved :: MIT License\",\n],\ncmdclass={\"version\": VersionCommand},\nentry_points={\"pytest11\": [\"deadfixtures = pytest_deadfixtures\"]},\n)\n"
    },
    {
        "package_name": "pytest-dotenv-0.5.2",
        "file_list": "LICENSE MANIFEST.in PKG-INFO plugin.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "from setuptools import setup\nfrom os import path\n\ndescription = 'A py.test plugin that parses environment files before running tests'\n\n# read the contents of the README file\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, 'README.md'), encoding='utf-8') as f:\nlong_description = f.read()\n\nsetup(\nname='pytest-dotenv',\ndescription=description,\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nversion='0.5.2',\nauthor='Marcel Radischat',\nauthor_email='marcel@quiqua.eu',\nurl='https:\/\/github.com\/quiqua\/pytest-dotenv',\ndownload_url='https:\/\/github.com\/quiqua\/pytest-dotenv\/tarball\/0.5.2',\npackages=['pytest_dotenv'],\nentry_points={'pytest11': ['dotenv = pytest_dotenv.plugin']},\ninstall_requires=['pytest>=5.0.0', 'python-dotenv>=0.9.1'],\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n]\n)"
    },
    {
        "package_name": "pytest-echo-1.7.1",
        "file_list": "CHANGELOG changelog.rst conf.py index.rst Makefile readme.rst LICENSE MANIFEST.in PKG-INFO dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt pytest_echo.py README.rst setup.cfg setup.py test_echo.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import setup\nfrom pytest_echo import __version__\n\nsetup(\nname='pytest-echo',\ndescription='pytest plugin with mechanisms for echoing environment '\n'variables, package version and generic attributes',\nlong_description=open('README.rst').read(),\nlong_description_content_type='text\/x-rst',\nversion=__version__,\nauthor='Stefano Apostolico',\nauthor_email='s.apostolico@gmail.com',\nurl='https:\/\/github.com\/pytest-dev\/pytest-echo',\npy_modules=['pytest_echo'],\nentry_points={'pytest11': ['echo = pytest_echo']},\ninstall_requires=['pytest>=2.2'],\nlicense=\"MIT License\",\npython_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\",\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Plugins',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: POSIX',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: MacOS :: MacOS X',\n'Topic :: Software Development :: Testing',\n'Topic :: Software Development :: Libraries',\n'Topic :: Utilities',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n])\n"
    },
    {
        "package_name": "pytest-github-actions-annotate-failures-0.1.7",
        "file_list": "CHANGELOG.md LICENSE MANIFEST.in PKG-INFO plugin_test.py plugin.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py tox.ini",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import find_packages, setup\n\n\nwith open(\".\/README.md\") as f:\nlong_description = f.read()\n\nsetup(\nname=\"pytest-github-actions-annotate-failures\",\nversion=\"0.1.7\",\ndescription=\"pytest plugin to annotate failed tests with a workflow command for GitHub Actions\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nauthor=\"utgwkk\",\nauthor_email=\"utagawakiki@gmail.com\",\nurl=\"https:\/\/github.com\/utgwkk\/pytest-github-actions-annotate-failures\",\nlicense=\"MIT\",\nclassifiers=[\"Framework :: Pytest\",],\npackages=find_packages(),\nentry_points={\n\"pytest11\": [\n\"pytest_github_actions_annotate_failures = pytest_github_actions_annotate_failures.plugin\",\n],\n},\ninstall_requires=[\"pytest>=4.0.0\",],\n)\n"
    },
    {
        "package_name": "pytest-icdiff-0.6",
        "file_list": "HISTORY.rst LICENSE MANIFEST.in PKG-INFO dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt pytest_icdiff.py README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport codecs\nfrom setuptools import setup\n\n\ndef read(fname):\nfile_path = os.path.join(os.path.dirname(__file__), fname)\nreturn codecs.open(file_path, encoding=\"utf-8\").read()\n\n\nsetup(\nname=\"pytest-icdiff\",\nversion=\"0.6\",\nauthor=\"Harry Percival\",\nauthor_email=\"obeythetestinggoat@gmail.com\",\nmaintainer=\"Harry Percival\",\nmaintainer_email=\"obeythetestinggoat@gmail.com\",\nlicense=\"Unlicense\",\nurl=\"https:\/\/github.com\/hjwp\/pytest-icdiff\",\ndescription=\"use icdiff for better error messages in pytest assertions\",\nlong_description=read(\"README.rst\") + read(\"HISTORY.rst\"),\nlong_description_content_type=\"text\/x-rst\",\npy_modules=[\"pytest_icdiff\"],\npython_requires=\">=3.6\",\ninstall_requires=[\"pytest\", \"icdiff\", \"pprintpp\"],\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Framework :: Pytest\",\n\"Intended Audience :: Developers\",\n\"Topic :: Software Development :: Testing\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Operating System :: OS Independent\",\n\"License :: Public Domain\",\n],\nentry_points={\n\"pytest11\": [\n\"icdiff = pytest_icdiff\",\n],\n},\n)\n"
    },
    {
        "package_name": "pytest-instafail-0.4.2",
        "file_list": "CHANGES.rst LICENSE MANIFEST.in PKG-INFO dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt pytest_instafail.py README.rst setup.cfg setup.py test_instafail.py",
        "setup.py": "from setuptools import setup\n\nsetup(\nname='pytest-instafail',\ndescription='pytest plugin to show failures instantly',\nlong_description=open(\"README.rst\").read(),\nversion='0.4.2',\nurl='https:\/\/github.com\/pytest-dev\/pytest-instafail',\nlicense='BSD',\nauthor='Janne Vanhala',\nauthor_email='janne.vanhala@gmail.com',\npy_modules=['pytest_instafail'],\nentry_points={'pytest11': ['instafail = pytest_instafail']},\nzip_safe=False,\ninclude_package_data=True,\nplatforms='any',\ninstall_requires=['pytest>=2.9'],\npython_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: POSIX',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: MacOS :: MacOS X',\n'Topic :: Software Development :: Testing',\n'Topic :: Software Development :: Libraries',\n'Topic :: Utilities',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: Implementation :: PyPy',\n]\n)\n"
    },
    {
        "package_name": "pytest-mypy-0.9.1",
        "file_list": "validation.yml .gitignore .travis.yml changelog.md CONTRIBUTING.rst LICENSE PKG-INFO pyproject.toml README.rst setup.cfg setup.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt pytest_mypy.py conftest.py test_pytest_mypy.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport glob\nimport os\nimport codecs\nfrom setuptools import setup, find_packages # type: ignore\n\n\ndef read(fname):\nfile_path = os.path.join(os.path.dirname(__file__), fname)\nreturn codecs.open(file_path, encoding=\"utf-8\").read()\n\n\nsetup(\nname=\"pytest-mypy\",\nuse_scm_version=True,\nauthor=\"Daniel Bader\",\nauthor_email=\"mail@dbader.org\",\nmaintainer=\"David Tucker\",\nmaintainer_email=\"david@tucker.name\",\nlicense=\"MIT\",\nurl=\"https:\/\/github.com\/dbader\/pytest-mypy\",\ndescription=\"Mypy static type checker plugin for Pytest\",\nlong_description=read(\"README.rst\"),\nlong_description_content_type=\"text\/x-rst\",\npackages=find_packages(\"src\"),\npackage_dir={\"\": \"src\"},\npy_modules=[\nos.path.splitext(os.path.basename(path))[0] for path in glob.glob(\"src\/*.py\")\n],\npython_requires=\">=3.5\",\nsetup_requires=[\"setuptools-scm>=3.5\"],\ninstall_requires=[\n\"attrs>=19.0\",\n\"filelock>=3.0\",\n'pytest>=4.6,<7.0; python_version>=\"3.5\" and python_version<\"3.6\"',\n'pytest>=4.6; python_version>=\"3.6\" and python_version<\"3.10\"',\n'pytest>=6.2; python_version>=\"3.10\"',\n'mypy>=0.500; python_version<\"3.8\"',\n'mypy>=0.700; python_version>=\"3.8\" and python_version<\"3.9\"',\n'mypy>=0.780; python_version>=\"3.9\"',\n],\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Framework :: Pytest\",\n\"Intended Audience :: Developers\",\n\"Topic :: Software Development :: Testing\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Operating System :: OS Independent\",\n\"License :: OSI Approved :: MIT License\",\n],\nentry_points={\"pytest11\": [\"mypy = pytest_mypy\"]},\n)\n"
    },
    {
        "package_name": "pytest-order-1.0.1",
        "file_list": "AUTHORS CHANGELOG.md make.bat Makefile requirements.txt conf.py configuration.rst index.rst intro.rst other_plugins.rst usage.rst test_a.py test_b.py __init__.py test_a.py test_b.py __init__.py test.py test_classes.py test_combined.py test_module1.py test_module2.py test_modules_b.py test_module_a.py test_submodule.py __init__.py test_number.py test_ordinals.py test_ordinal_class_mark.py test_quickstart.py test_relative.py test_relative_class_marker.py test_sort_breaks_dependency.py test_sort_dependency.py test_sparse_ordering.py __init__.py LICENSE MANIFEST.in PKG-INFO item.py plugin.py settings.py sorter.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py conftest.py test_class_marks.py test_dependency.py test_indulgent_ordering.py test_misc.py test_ordering.py test_order_group_scope.py test_order_group_scope_dep.py test_order_group_scope_named_dep.py test_order_group_scope_relative.py test_order_scope.py test_order_scope_level.py test_relative_ordering.py test_sparse_ordinals.py test_xdist_handling.py __init__.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom setuptools import setup\nimport os\n\n__here__ = os.path.abspath(os.path.dirname(__file__))\n\nfrom pytest_order import __version__\n\nwith open(os.path.join(__here__, \"README.md\")) as f:\nLONG_DESCRIPTION = f.read()\n\n\nsetup(\nname=\"pytest-order\",\ndescription=\"pytest plugin to run your tests in a specific order\",\nlong_description=LONG_DESCRIPTION,\nlong_description_content_type=\"text\/markdown\",\nversion=__version__,\nauthor=\"mrbean-bremen\",\nauthor_email=\"hansemrbean@googlemail.com\",\nurl=\"https:\/\/github.com\/pytest-dev\/pytest-order\",\npackages=[\"pytest_order\"],\nlicense=\"MIT\",\nentry_points={\n\"pytest11\": [\n\"pytest_order = pytest_order.plugin\",\n]\n},\npython_requires=\">=3.6\",\ninstall_requires=[\n\"pytest>=5.0; python_version < '3.10'\",\n\"pytest>=6.2.4; python_version >= '3.10'\"\n],\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: POSIX\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Topic :: Software Development :: Testing\",\n\"Topic :: Software Development :: Quality Assurance\",\n\"Topic :: Utilities\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n'Programming Language :: Python :: 3 :: Only',\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n],\n)\n"
    },
    {
        "package_name": "pytest-parallel-0.1.1",
        "file_list": "CONTRIBUTING.md LICENSE MANIFEST.in Pipfile PKG-INFO __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py conftest.py test_concurrent.py test_general.py",
        "setup.py": "from setuptools import setup\nfrom codecs import open\nfrom os import path\nimport re\n\n# Get the long description from the README file\nwith open(path.join('README.md'), encoding='utf-8') as f:\nlong_description = f.read()\n\n# Get the version from the module\nwith open(path.join('pytest_parallel', '__init__.py'), encoding='utf-8') as f:\nversion = re.search(r'__version__ = \\'(.*?)\\'', f.read()).group(1)\n\n# Get the install_requires from the Pipfile\nwith open(path.join('Pipfile'), encoding='utf-8') as f:\npkgs = re.search(r'^\\[packages\\]([^\\[]*)', f.read(), re.M).group(1).strip()\npkg_pattern = re.compile(r'\"?(.*?)\"? = [\"\\'](.*?)[\"\\']')\ninstall_requires = [name if version == '*' else name + version\nfor (name, version)\nin re.findall(pkg_pattern, pkgs)]\n\nsetup(\nname='pytest-parallel',\nversion=version,\nlicense='MIT',\ndescription='a pytest plugin for parallel and concurrent testing',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nurl='https:\/\/github.com\/browsertron\/pytest-parallel',\nauthor='Browsertron',\nauthor_email='team@browsertron.com',\n\ninclude_package_data=True,\ninstall_requires=install_requires,\npackages=['pytest_parallel'],\nentry_points={\n'pytest11': [\n'parallel = pytest_parallel',\n]\n},\n\n# For a list of valid classifiers, see https:\/\/pypi.org\/classifiers\/\nclassifiers=[\n'Development Status :: 3 - Alpha',\n'Intended Audience :: Developers',\n'Topic :: Software Development :: Testing',\n'Topic :: Software Development :: Quality Assurance',\n'Topic :: Utilities',\n'License :: OSI Approved :: MIT License',\n'Framework :: Pytest',\n\n'Operating System :: POSIX',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: MacOS :: MacOS X',\n\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n],\n)\n"
    },
    {
        "package_name": "pytest-pythonpath-0.7.4",
        "file_list": "LICENSE.txt MANIFEST.in PKG-INFO pytest.ini dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt pytest_pythonpath.py README.md setup.cfg setup.py hey.py __init__.py __init__.py hello.py __init__.py yo.py __init__.py hola.py test.pth __init__.py pow.py __init__.py __init__.py test_pythonpath.py",
        "setup.py": "from setuptools import setup\n\ndescription = 'pytest plugin for adding to the PYTHONPATH from command line or configs.'\ntry:\nlong_description = open(\"README.md\").read()\nexcept:\nlong_description = description\n\nsetup(\nname='pytest-pythonpath',\ndescription=description,\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nlicense='MIT',\nversion='0.7.4',\nauthor='Eric Palakovich Carr',\nauthor_email='carreric@gmail.com',\nurl='https:\/\/github.com\/bigsassy\/pytest-pythonpath',\npy_modules=['pytest_pythonpath'],\nentry_points={'pytest11': ['pythonpath = pytest_pythonpath']},\ninstall_requires=['pytest>=2.5.2,<7'],\npython_requires='>=2.6, <4',\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Plugins\",\n\"Framework :: Pytest\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n'Programming Language :: Python :: 2',\n\"Programming Language :: Python :: 2.6\",\n\"Programming Language :: Python :: 2.7\",\n'Programming Language :: Python :: 3',\n\"Programming Language :: Python :: 3.0\",\n\"Programming Language :: Python :: 3.1\",\n\"Programming Language :: Python :: 3.2\",\n\"Programming Language :: Python :: 3.3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Software Development :: Testing\",\n],\n)\n"
    },
    {
        "package_name": "pytest-vcr-1.0.2",
        "file_list": "LICENSE MANIFEST.in PKG-INFO dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt pytest_vcr.py README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport codecs\nfrom setuptools import setup\n\n\ndef read(fname):\nfile_path = os.path.join(os.path.dirname(__file__), fname)\nreturn codecs.open(file_path, encoding='utf-8').read()\n\n\nsetup(\nname='pytest-vcr',\nversion='1.0.2',\nauthor='Tomasz Kontusz',\nauthor_email='tomasz.kontusz@gmail.com',\nmaintainer='Tomasz Kontusz',\nmaintainer_email='tomasz.kontusz@gmail.com',\nlicense='MIT',\nurl='https:\/\/github.com\/ktosiek\/pytest-vcr',\ndescription='Plugin for managing VCR.py cassettes',\nlong_description=read('README.rst'),\npy_modules=['pytest_vcr'],\ninstall_requires=['pytest>=3.6.0', 'vcrpy'],\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Framework :: Pytest',\n'Intended Audience :: Developers',\n'Topic :: Software Development :: Testing',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Operating System :: OS Independent',\n'License :: OSI Approved :: MIT License',\n],\nentry_points={\n'pytest11': [\n'vcr = pytest_vcr',\n],\n},\n)\n"
    },
    {
        "package_name": "pytest-watch-4.2.0",
        "file_list": "AUTHORS.md CHANGES.md MANIFEST.in PKG-INFO command.py config.py constants.py helpers.py util.py watcher.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md README.rst requirements-dev.txt requirements.txt setup.cfg setup.py",
        "setup.py": "import io\nimport os\nfrom setuptools import setup, find_packages\n\n\ndef read(filename):\nfilepath = os.path.join(os.path.dirname(__file__), filename)\nwith io.open(filepath, mode='r', encoding='utf-8') as f:\nreturn f.read()\n\n\nsetup(\nname='pytest-watch',\nversion='4.2.0',\ndescription='Local continuous test runner with pytest and watchdog.',\nlong_description=read('README.rst'),\nauthor='Joe Esposito',\nauthor_email='joe@joeyespo.com',\nurl='http:\/\/github.com\/joeyespo\/pytest-watch',\nlicense='MIT',\nplatforms='any',\npackages=find_packages(),\ninstall_requires=read('requirements.txt').splitlines(),\nentry_points={\n'console_scripts': [\n'pytest-watch = pytest_watch:main',\n'ptw = pytest_watch:main',\n]\n},\n)\n"
    },
    {
        "package_name": "python-arango-7.4.1",
        "file_list": "build.yaml codeql.yaml pypi.yaml .gitignore .pre-commit-config.yaml api.py aql.py backup.py client.py cluster.py collection.py connection.py cursor.py database.py errno.py exceptions.py executor.py formatter.py foxx.py graph.py http.py job.py pregel.py replication.py request.py resolver.py response.py result.py typings.py utils.py version.py wal.py __init__.py CONTRIBUTING.md admin.rst analyzer.rst aql.rst async.rst auth.rst backup.rst batch.rst certificates.rst cluster.rst collection.rst conf.py contributing.rst cursor.rst database.rst document.rst errno.rst errors.rst foxx.rst graph.rst http.rst index.rst indexes.rst logging.rst make.bat Makefile overview.rst pregel.rst replication.rst schema.rst serializer.rst simple.rst specs.rst logo.png task.rst threading.rst transaction.rst user.rst view.rst wal.rst LICENSE MANIFEST.in PKG-INFO pyproject.toml dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "from setuptools import find_packages, setup\n\nwith open(\".\/README.md\") as fp:\nlong_description = fp.read()\n\nsetup(\nname=\"python-arango\",\ndescription=\"Python Driver for ArangoDB\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Joohwan Oh\",\nauthor_email=\"joohwan.oh@outlook.com\",\nurl=\"https:\/\/github.com\/ArangoDB-Community\/python-arango\",\nkeywords=[\"arangodb\", \"python\", \"driver\"],\npackages=find_packages(exclude=[\"tests\"]),\ninclude_package_data=True,\npython_requires=\">=3.7\",\nlicense=\"MIT\",\ninstall_requires=[\n\"urllib3>=1.26.0\",\n\"dataclasses>=0.6; python_version < '3.7'\",\n\"requests\",\n\"requests_toolbelt\",\n\"PyJWT\",\n\"setuptools>=42\",\n],\nextras_require={\n\"dev\": [\n\"black>=22.3.0\",\n\"flake8>=4.0.1\",\n\"isort>=5.10.1\",\n\"mypy>=0.942\",\n\"mock\",\n\"pre-commit>=2.17.0\",\n\"pytest>=7.1.1\",\n\"pytest-cov>=3.0.0\",\n\"sphinx\",\n\"sphinx_rtd_theme\",\n\"types-pkg_resources\",\n\"types-requests\",\n\"types-setuptools\",\n],\n},\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Natural Language :: English\",\n\"Operating System :: MacOS\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: Unix\",\n\"Programming Language :: Python :: 3\",\n\"Topic :: Documentation :: Sphinx\",\n],\n)\n"
    },
    {
        "package_name": "python_arq-6.0.5",
        "file_list": "LICENSE PKG-INFO arq.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "import setuptools\n\nwith open(\"README.md\", encoding=\"utf8\") as readme, open(\n\"requirements.txt\", encoding=\"utf8\"\n) as requirements:\nlong_description = readme.read()\nrequires = requirements.read().splitlines(keepends=False)\n\nsetuptools.setup(\nname=\"python_arq\",\npackages=setuptools.find_packages(),\nversion=\"6.0.5\",\nlicense=\"MIT\",\ndescription=\"Asynchronous Python Wrapper For A.R.Q API.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nauthor=\"TheHamkerCat\",\nauthor_email=\"thehamkercat@gmail.com\",\nurl=\"https:\/\/github.com\/thehamkercat\/Python_ARQ\",\nkeywords=[\"API\", \"ARQ_API\", \"Python-ARQ\", \"ARQ\", \"A.R.Q\"],\ninstall_requires=requires,\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n],\n)\n"
    },
    {
        "package_name": "python-augeas-1.1.0",
        "file_list": "ffi.py __init__.py AUTHORS COPYING Makefile MANIFEST.in PKG-INFO python-augeas.spec dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.txt setup.cfg setup.py aliases auto.master crontab crypttab dnsmasq.conf ethers exports filesystems fstab group grub.conf host.conf hosts hosts.allow hosts.deny inittab krb5.conf ldap.conf libuser.conf logrotate.conf access domaintable local-host-names mailertable sendmail.mc local.cf submit.mc trusted-users virtusertable mail.rc motd networks nsswitch.conf pw keys ntpservers step-tickers ntp.conf passwd chap-secrets ioptions options pap-secrets wvdial pppoe-server-options resolv.conf lmhosts smb.conf smbusers sensors.conf smartd.conf sudoers atd auditd authconfig autofs bittorrent bluetooth clock cpuspeed crond crontab dund firstboot grub hsqldb httpd hwconf i18n init ip6tables ip6tables-config iptables iptables-config irda irqbalance kernel keyboard libvirtd lirc lm_sensors nasd netconsole network ifcfg-eth0 ifcfg-lo nfs nspluginwrapper ntpd ntpdate packagekit-background pand prelink readonly-root rsyslog samba saslauthd sendmail smartmontools snmpd spamassassin system-config-firewall system-config-securitylevel system-config-users tomcat5 udev wpa_supplicant sysctl.conf warnquota.conf wvdial.conf yp.conf yum.conf Fedora-install-media.repo fedora-rawhide.repo fedora-updates-testing.repo fedora-updates.repo fedora.repo test_augeas.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n\"\"\"\nsetup.py file for augeas\n\"\"\"\n\nimport os\n\nfrom setuptools import setup, find_packages\n\nprefix = os.environ.get(\"prefix\", \"\/usr\")\n\nname = 'python-augeas'\nversion = '1.1.0'\n\nsetup(name=name,\nversion=version,\nauthor=\"Harald Hoyer\",\nauthor_email=\"augeas-devel@redhat.com\",\ndescription=\"\"\"Python bindings for Augeas\"\"\",\npackages=find_packages(exclude=('test')),\nsetup_requires=[\"cffi>=1.0.0\"],\ncffi_modules=[\"augeas\/ffi.py:ffi\"],\ninstall_requires=[\"cffi>=1.0.0\"],\nurl=\"http:\/\/augeas.net\/\",\nclassifiers=[\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n],\ncommand_options={\n'build_sphinx': {\n'project': ('setup.py', name),\n'version': ('setup.py', version),\n'release': ('setup.py', version),\n}\n},\ntest_suite=\"test.test_augeas\",\n)\n"
    },
    {
        "package_name": "python-baseconv-1.2.2",
        "file_list": "baseconv.py LICENSE MANIFEST.in PKG-INFO dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "#\/usr\/bin\/env python\n\nimport codecs\nimport os\nimport sys\n\nfrom os.path import join, dirname\nfrom setuptools import setup\n\n\nread = lambda filepath: codecs.open(filepath, 'r', 'utf-8').read()\nversion = __import__('baseconv').__version__\n\nif 'publish' in sys.argv:\nos.system('python setup.py sdist upload')\nsys.exit()\n\nsetup(\nname='python-baseconv',\nversion=version,\ndescription=(\n'Convert numbers from base 10 integers to base X strings '\n'and back again.'\n),\nlong_description=read(join(dirname(__file__), 'README.rst')),\nkeywords='converter numbers math',\nauthor='Drew Perttula, Guilherme Gondim, Simon Willison',\nmaintainer='Guilherme Gondim',\nlicense='Python Software Foundation License',\nurl='https:\/\/github.com\/semente\/python-baseconv',\ndownload_url='https:\/\/github.com\/semente\/python-baseconv\/releases',\nzip_safe=False,\ninclude_package_data=True,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Python Software Foundation License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\npy_modules=['baseconv'],\n)\n"
    },
    {
        "package_name": "python-benedict-0.25.2",
        "file_list": "clean.py clone.py dump.py filter.py find.py flatten.py groupby.py invert.py items_sorted.py keylists.py keypaths.py match.py merge.py move.py nest.py remove.py rename.py search.py standardize.py subset.py swap.py traverse.py unflatten.py unique.py __init__.py base_dict.py __init__.py io_dict.py io_util.py __init__.py keylist_dict.py keylist_util.py __init__.py keypath_dict.py keypath_util.py __init__.py parse_dict.py parse_util.py __init__.py __init__.py metadata.py abstract.py base64.py csv.py ini.py json.py pickle.py plist.py query_string.py toml.py xml.py yaml.py __init__.py type_util.py __init__.py __init__.py LICENSE.txt MANIFEST.in PKG-INFO dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nfrom setuptools import find_packages, setup\n\nimport os\n\nexec(open(\"benedict\/metadata.py\").read())\n\ngithub_url = \"https:\/\/github.com\/fabiocaccamo\"\nsponsor_url = \"https:\/\/github.com\/sponsors\/fabiocaccamo\/\"\ntwitter_url = \"https:\/\/twitter.com\/fabiocaccamo\"\npackage_name = \"python-benedict\"\npackage_url = \"{}\/{}\".format(github_url, package_name)\npackage_path = os.path.abspath(os.path.dirname(__file__))\nlong_description_file_path = os.path.join(package_path, \"README.md\")\nlong_description_content_type = \"text\/markdown\"\nlong_description = \"\"\ntry:\nwith open(long_description_file_path, \"r\", encoding=\"utf-8\") as f:\nlong_description = f.read()\nexcept IOError:\npass\n\nsetup(\nname=package_name,\npackages=find_packages(exclude=[\"contrib\", \"docs\", \"tests*\"]),\ninclude_package_data=True,\nversion=__version__,\ndescription=__description__,\nlong_description=long_description,\nlong_description_content_type=long_description_content_type,\nauthor=__author__,\nauthor_email=__email__,\nurl=package_url,\ndownload_url=\"{}\/archive\/{}.tar.gz\".format(package_url, __version__),\nproject_urls={\n\"Documentation\": \"{}#readme\".format(package_url),\n\"Issues\": \"{}\/issues\".format(package_url),\n\"Funding\": sponsor_url,\n\"Twitter\": twitter_url,\n},\nkeywords=[\n\"python\",\n\"dictionary\",\n\"dictionaries\",\n\"dict\",\n\"benedict\",\n\"subclass\",\n\"extended\",\n\"keylist\",\n\"keypath\",\n\"utility\",\n\"io\",\n\"data\",\n\"file\",\n\"url\",\n\"read\",\n\"write\",\n\"parse\",\n\"configparser\",\n\"config\",\n\"cfg\",\n\"pickle\",\n\"plist\",\n\"base64\",\n\"csv\",\n\"ini\",\n\"json\",\n\"query-string\",\n\"toml\",\n\"xml\",\n\"yaml\",\n\"clean\",\n\"clone\",\n\"deepclone\",\n\"deepupdate\",\n\"dump\",\n\"filter\",\n\"flatten\",\n\"groupby\",\n\"invert\",\n\"merge\",\n\"move\",\n\"nest\",\n\"remove\",\n\"rename\",\n\"search\",\n\"standardize\",\n\"subset\",\n\"swap\",\n\"traverse\",\n\"unflatten\",\n\"unique\",\n],\ninstall_requires=[\n\"ftfy >= 6.0.0, < 7.0.0\",\n\"mailchecker >= 4.1.0, < 5.0.0\",\n\"phonenumbers >= 8.12.0, < 9.0.0\",\n\"python-dateutil >= 2.8.0, < 3.0.0\",\n\"python-fsutil >= 0.6.0, < 1.0.0\",\n\"python-slugify >= 6.0.1, < 7.0.0\",\n\"pyyaml >= 6.0, < 7.0\",\n\"requests >= 2.26.0, < 3.0.0\",\n\"toml >= 0.10.2, < 1.0.0\",\n\"xmltodict >= 0.12.0, < 1.0.0\",\n],\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: MacOS X\",\n\"Environment :: Other Environment\",\n\"Environment :: Web Environment\",\n\"Environment :: Win32 (MS Windows)\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Education\",\n\"Intended Audience :: Information Technology\",\n\"Intended Audience :: Science\/Research\",\n\"Intended Audience :: System Administrators\",\n\"License :: OSI Approved :: MIT License\",\n\"Natural Language :: English\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Education :: Testing\",\n\"Topic :: Software Development :: Build Tools\",\n\"Topic :: System :: Filesystems\",\n\"Topic :: Text Processing :: Markup :: XML\",\n\"Topic :: Utilities\",\n],\nlicense=__license__,\ntest_suite=\"tests\",\n)\n"
    },
    {
        "package_name": "python-can-4.0.0",
        "file_list": "bit_timing.py broadcastmanager.py bus.py ctypesutil.py exceptions.py interface.py canalystii.py cantact.py boa.py __init__.py gs_usb.py neovi_bus.py __init__.py iscan.py canlib.py canlib_vcinpl.py canlib_vcinpl2.py constants.py exceptions.py structures.py __init__.py canlib.py constants.py structures.py __init__.py neousys.py __init__.py nican.py nixnet.py basic.py pcan.py __init__.py robotell.py seeedstudio.py __init__.py serial_can.py __init__.py slcan.py constants.py socketcan.py utils.py __init__.py socketcand.py __init__.py constants.py exceptions.py structures.py ucan.py ucanbus.py __init__.py bus.py utils.py __init__.py serial_selector.py usb2canabstractionlayer.py usb2canInterface.py __init__.py canlib.py exceptions.py xlclass.py xldefine.py xldriver.py __init__.py virtual.py __init__.py asc.py blf.py canutils.py csv.py generic.py logger.py player.py printer.py sqlite.py __init__.py listener.py logconvert.py logger.py message.py notifier.py player.py thread_safe_bus.py typechecking.py util.py viewer.py __init__.py CONTRIBUTORS.txt api.rst asyncio.rst bcm.rst bit_timing.rst bus.rst configuration.rst development.rst history.rst index.rst installation.rst canalystii.rst etas.rst gs_usb.rst iscan.rst ixxat.rst kvaser.rst neovi.rst nican.rst nixnet.rst pcan.rst robotell.rst seeedstudio.rst serial.rst slcan.rst socketcan.rst socketcand.rst systec.rst udp_multicast.rst usb2can.rst vector.rst virtual.rst interfaces.rst internal-api.rst listeners.rst message.rst scripts.rst LICENSE.txt MANIFEST.in PKG-INFO pyproject.toml dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst requirements-lint.txt can_logconvert.py can_logger.py can_player.py can_viewer.py setup.cfg setup.py back2back_test.py config.py contextmanager_test.py example_data.py example_data.pyc issue_1256.asc logfile.asc logfile_errorframes.asc test_CanErrorFrameExt.blf test_CanErrorFrames.asc test_CanFdMessage.asc test_CanFdMessage.blf test_CanFdMessage64.asc test_CanFdMessage64.blf test_CanFdRemoteMessage.asc test_CanMessage.asc test_CanMessage.asc.gz test_CanMessage.blf test_CanMessage2.blf test_CanRemoteMessage.asc __init__.py __init__.pyc listener_test.py logformats_test.py message_helper.py network_test.py notifier_test.py serial_test.py simplecyclic_test.py test_bit_timing.py test_cantact.py test_cyclic_socketcan.py test_detect_available_configs.py test_interface_canalystii.py test_interface_ixxat.py test_interface_ixxat_fd.py test_interface_virtual.py test_kvaser.py test_load_file_config.py test_logger.py test_message_class.py test_message_filtering.py test_message_sync.py test_neousys.py test_pcan.py test_player.py test_robotell.py test_rotating_loggers.py test_scripts.py test_slcan.py test_socketcan.py test_socketcan_helpers.py test_socketcan_loopback.py test_systec.py test_util.py test_vector.py test_viewer.py zero_dlc_test.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n\"\"\"\nSetup script for the `can` package.\nLearn more at https:\/\/github.com\/hardbyte\/python-can\/\n\"\"\"\n\n# pylint: disable=invalid-name\n\nfrom os import listdir\nfrom os.path import isfile, join\nimport re\nimport logging\nfrom setuptools import setup, find_packages\n\nlogging.basicConfig(level=logging.WARNING)\n\nwith open(\"can\/__init__.py\", \"r\", encoding=\"utf-8\") as fd:\nversion = re.search(\nr'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]', fd.read(), re.MULTILINE\n).group(1)\n\nwith open(\"README.rst\", \"r\", encoding=\"utf-8\") as f:\nlong_description = f.read()\n\n# Dependencies\nextras_require = {\n\"seeedstudio\": [\"pyserial>=3.0\"],\n\"serial\": [\"pyserial~=3.0\"],\n\"neovi\": [\"filelock\", \"python-ics>=2.12\"],\n\"canalystii\": [\"canalystii>=0.1.0\"],\n\"cantact\": [\"cantact>=0.0.7\"],\n\"gs_usb\": [\"gs_usb>=0.2.1\"],\n\"nixnet\": [\"nixnet>=0.3.1\"],\n\"pcan\": [\"uptime~=3.0.1\"],\n}\n\nsetup(\n# Description\nname=\"python-can\",\nurl=\"https:\/\/github.com\/hardbyte\/python-can\",\ndescription=\"Controller Area Network interface module for Python\",\nlong_description=long_description,\nclassifiers=[\n# a list of all available ones: https:\/\/pypi.org\/classifiers\/\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Natural Language :: English\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)\",\n\"Operating System :: MacOS\",\n\"Operating System :: POSIX :: Linux\",\n\"Operating System :: Microsoft :: Windows\",\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Console\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Education\",\n\"Intended Audience :: Information Technology\",\n\"Intended Audience :: Manufacturing\",\n\"Intended Audience :: Telecommunications Industry\",\n\"Natural Language :: English\",\n\"Topic :: System :: Logging\",\n\"Topic :: System :: Monitoring\",\n\"Topic :: System :: Networking\",\n\"Topic :: System :: Hardware :: Hardware Drivers\",\n\"Topic :: Utilities\",\n],\nversion=version,\npackages=find_packages(exclude=[\"test*\", \"doc\", \"scripts\", \"examples\"]),\nscripts=list(filter(isfile, (join(\"scripts\/\", f) for f in listdir(\"scripts\/\")))),\nauthor=\"python-can contributors\",\nlicense=\"LGPL v3\",\npackage_data={\n\"\": [\"README.rst\", \"CONTRIBUTORS.txt\", \"LICENSE.txt\", \"CHANGELOG.md\"],\n\"doc\": [\"*.*\"],\n\"examples\": [\"*.py\"],\n},\n# Installation\n# see https:\/\/www.python.org\/dev\/peps\/pep-0345\/#version-specifiers\npython_requires=\">=3.7\",\ninstall_requires=[\n\"setuptools\",\n\"wrapt~=1.10\",\n'windows-curses;platform_system==\"Windows\" and platform_python_implementation==\"CPython\"',\n\"typing_extensions>=3.10.0.0\",\n'pywin32;platform_system==\"Windows\" and platform_python_implementation==\"CPython\"',\n'msgpack~=1.0.0;platform_system!=\"Windows\"',\n\"packaging\",\n],\nextras_require=extras_require,\n)\n"
    },
    {
        "package_name": "python-crfsuite-0.9.8",
        "file_list": "CHANGES.rst .git AUTHORS autogen.sh accuracy.py bench.py bench_crfpp.py bench_crfsgd.py bench_crfsuite-0.11.py bench_crfsuite.py bench_mallet.py bench_wapiti.py collect.py crfsuite_to_mallet.py plot_performance.py ChangeLog configure.in COPYING crfsuite.sln Doxyfile footer.html header.html chunking.py crfutils.py ner.py pos.py template.py crfsuite.1 dump.c frontend.vcxproj iwa.c iwa.h learn.c main.c Makefile.am option.c option.h readdata.h reader.c tag.c genbinary.sh.in crfsuite.h crfsuite.hpp crfsuite_api.hpp Makefile.am os.h INSTALL COPYING cqdb.vcxproj doxyfile footer.html cqdb.h makedist.sh Makefile.am cqdb.c lookup3.c main.c crf.vcxproj Makefile.am crf1d.h crf1d_context.c crf1d_encode.c crf1d_feature.c crf1d_model.c crf1d_tag.c crfsuite.c crfsuite_internal.h crfsuite_train.c dataset.c dictionary.c holdout.c logging.c logging.h params.c params.h quark.c quark.h rumavl.c rumavl.h train_arow.c train_averaged_perceptron.c train_l2sgd.c train_lbfgs.c train_passive_aggressive.c vecmath.h Makefile.am README crfsuite.cpp export.i Makefile.am Makefile.PL.in prepare.sh sample_tag.pl sample_train.pl crfsuite.py export_wrap.cpp export_wrap.h prepare.sh README sample_tag.py sample_train.py setup.py.in extconf.rb prepare.sh README sample_tag.rb sample_train.rb inttypes.h lbfgs.h lbfgs.lib stdint.h .git AUTHORS autogen.sh ChangeLog configure.in COPYING doxyfile footer.html header.html lbfgs.h lbfgs.sln arithmetic_ansi.h arithmetic_sse_double.h arithmetic_sse_float.h lbfgs.c lib.vcxproj Makefile.am Makefile.am NEWS README Makefile.am sample.c sample.cpp sample.vcxproj LICENSE.txt MANIFEST.in PKG-INFO crfsuite_api.pxd tagger_wrapper.hpp trainer_wrapper.cpp trainer_wrapper.hpp _dumpparser.py _logparser.py _pycrfsuite.cpp _pycrfsuite.pyx __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt README.rst setup.cfg setup.py conftest.py test_itemsequence.py test_logparser.py test_misc.py test_tagger.py test_trainer.py update_cpp.sh",
        "setup.py": "#!\/usr\/bin\/env python\nimport glob\nimport sys\nfrom setuptools import setup, Extension\nfrom distutils.command.build_ext import build_ext\n\nsources = ['pycrfsuite\/_pycrfsuite.cpp', 'pycrfsuite\/trainer_wrapper.cpp']\n\n# crfsuite\nsources += glob.glob('crfsuite\/lib\/crf\/src\/*.c')\nsources += glob.glob('crfsuite\/swig\/*.cpp')\n\nsources += ['crfsuite\/lib\/cqdb\/src\/cqdb.c']\nsources += ['crfsuite\/lib\/cqdb\/src\/lookup3.c']\n\n# lbfgs\nsources += glob.glob('liblbfgs\/lib\/*.c')\n\nincludes = [\n'crfsuite\/include\/',\n'crfsuite\/lib\/cqdb\/include',\n'liblbfgs\/include',\n'pycrfsuite',\n]\n\nclass build_ext_check_gcc(build_ext):\ndef build_extensions(self):\nc = self.compiler\n\n_compile = c._compile\n\ndef c_compile(obj, src, ext, cc_args, extra_postargs, pp_opts):\ncc_args = cc_args + ['-std=c99'] if src.endswith('.c') else cc_args\nreturn _compile(obj, src, ext, cc_args, extra_postargs, pp_opts)\n\nif c.compiler_type == 'unix' and 'gcc' in c.compiler:\nc._compile = c_compile\n\nelif self.compiler.compiler_type == \"msvc\":\nif sys.version_info[:2] < (3, 5):\nc.include_dirs.extend(['crfsuite\/win32'])\n\nbuild_ext.build_extensions(self)\n\n\next_modules = [Extension('pycrfsuite._pycrfsuite',\ninclude_dirs=includes,\nlanguage='c++',\nsources=sorted(sources)\n)]\n\n\nsetup(\nname='python-crfsuite',\nversion=\"0.9.8\",\ndescription=\"Python binding for CRFsuite\",\nlong_description=open('README.rst').read(),\nauthor=\"Terry Peng, Mikhail Korobov\",\nauthor_email=\"pengtaoo@gmail.com, kmike84@gmail.com\",\nlicense=\"MIT\",\nurl='https:\/\/github.com\/scrapinghub\/python-crfsuite',\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Science\/Research\",\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Cython\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Software Development\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Topic :: Scientific\/Engineering\",\n\"Topic :: Scientific\/Engineering :: Information Analysis\",\n\"Topic :: Text Processing :: Linguistic\",\n],\nzip_safe=False,\npackages=['pycrfsuite'],\next_modules=ext_modules,\ncmdclass={'build_ext': build_ext_check_gcc},\n)\n"
    },
    {
        "package_name": "python-gitlab-3.8.1",
        "file_list": "AUTHORS CHANGELOG.md COPYING gitlab.rst gitlab.v4.rst api-objects.rst api-usage-advanced.rst api-usage.rst changelog.md cli-examples.rst cli-objects.rst cli-usage.rst conf.py docstrings.py manager_tmpl.j2 __init__.py faq.rst access_requests.rst appearance.rst applications.rst badges.rst boards.rst branches.rst ci_lint.rst clusters.rst commits.rst deployments.rst deploy_keys.rst deploy_tokens.rst discussions.rst emojis.rst environments.rst epics.rst events.rst features.rst geo_nodes.rst groups.rst group_access_tokens.rst invitations.rst issues.rst iterations.rst keys.rst labels.rst merge_requests.rst merge_request_approvals.rst merge_trains.rst messages.rst milestones.rst namespaces.rst notes.rst notifications.rst packages.rst pagesdomains.rst personal_access_tokens.rst pipelines_and_jobs.rst projects.rst project_access_tokens.rst protected_branches.rst protected_environments.rst releases.rst remote_mirrors.rst repositories.rst repository_tags.rst runners.rst search.rst settings.rst sidekiq.rst snippets.rst system_hooks.rst templates.rst todos.rst topics.rst users.rst variables.rst wikis.rst index.rst make.bat Makefile release-notes.rst gitter.js __init__.py base.py cli.py client.py config.py const.py exceptions.py mixins.py py.typed types.py utils.py cli.py access_requests.py appearance.py applications.py artifacts.py audit_events.py award_emojis.py badges.py boards.py branches.py broadcast_messages.py ci_lint.py clusters.py commits.py container_registry.py custom_attributes.py deployments.py deploy_keys.py deploy_tokens.py discussions.py environments.py epics.py events.py export_import.py features.py files.py geo_nodes.py groups.py group_access_tokens.py hooks.py integrations.py invitations.py issues.py iterations.py jobs.py keys.py labels.py ldap.py members.py merge_requests.py merge_request_approvals.py merge_trains.py milestones.py namespaces.py notes.py notification_settings.py packages.py pages.py personal_access_tokens.py pipelines.py projects.py project_access_tokens.py push_rules.py releases.py repositories.py runners.py settings.py sidekiq.py snippets.py statistics.py tags.py templates.py todos.py topics.py triggers.py users.py variables.py wikis.py __init__.py __init__.py _version.py __init__.py __main__.py MANIFEST.in PKG-INFO pyproject.toml dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst requirements-docker.txt requirements-docs.txt requirements-lint.txt requirements-test.txt requirements.txt setup.cfg setup.py conftest.py test_branches.py test_current_user.py test_deploy_keys.py test_deploy_tokens.py test_gitlab.py test_groups.py test_import_export.py test_issues.py test_keys.py test_lazy_objects.py test_merge_requests.py test_packages.py test_projects.py test_releases.py test_repository.py test_services.py test_snippets.py test_topics.py test_users.py test_variables.py test_wikis.py __init__.py conftest.py test_cli.py test_cli_artifacts.py test_cli_packages.py test_cli_projects.py test_cli_repository.py test_cli_resource_access_tokens.py test_cli_users.py test_cli_v4.py test_cli_variables.py __init__.py conftest.py ee-test.py .env avatar.png create_license.rb docker-compose.yml invalid_auth.cfg invalid_version.cfg set_token.rb helpers.py __init__.py test_ensure_type_hints.py test_mro.py test_v4_objects_imported.py __init__.py test_dists.py __init__.py conftest.py todo.json helpers.py test_meta_mixins.py test_mixin_methods.py test_object_mixins_attributes.py __init__.py conftest.py test_appearance.py test_applications.py test_audit_events.py test_badges.py test_bridges.py test_ci_lint.py test_commits.py test_deployments.py test_deploy_tokens.py test_environments.py test_groups.py test_group_access_tokens.py test_hooks.py test_invitations.py test_issues.py test_iterations.py test_jobs.py test_job_artifacts.py test_keys.py test_members.py test_merge_requests.py test_merge_request_pipelines.py test_merge_trains.py test_packages.py test_personal_access_tokens.py test_pipelines.py test_pipeline_schedules.py test_projects.py test_project_access_tokens.py test_project_import_export.py test_project_merge_request_approvals.py test_project_statistics.py test_registry_repositories.py test_releases.py test_remote_mirrors.py test_repositories.py test_resource_label_events.py test_resource_milestone_events.py test_resource_state_events.py test_runners.py test_services.py test_snippets.py test_submodules.py test_todos.py test_topics.py test_users.py test_variables.py __init__.py test_base.py test_cli.py test_config.py test_exceptions.py test_gitlab.py test_gitlab_auth.py test_gitlab_http_methods.py test_types.py test_utils.py __init__.py __init__.py __init__.py tox.ini",
        "setup.py": "#!\/usr\/bin\/python\n# -*- coding: utf-8 -*-\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version() -> str:\nversion = \"\"\nwith open(\"gitlab\/_version.py\", \"r\", encoding=\"utf-8\") as f:\nfor line in f:\nif line.startswith(\"__version__\"):\nversion = eval(line.split(\"=\")[-1])\nbreak\nreturn version\n\n\nwith open(\"README.rst\", \"r\", encoding=\"utf-8\") as f:\nreadme = f.read()\n\nsetup(\nname=\"python-gitlab\",\nversion=get_version(),\ndescription=\"Interact with GitLab API\",\nlong_description=readme,\nlong_description_content_type=\"text\/x-rst\",\nauthor=\"Gauvain Pocentek\",\nauthor_email=\"gauvain@pocentek.net\",\nlicense=\"LGPLv3\",\nurl=\"https:\/\/github.com\/python-gitlab\/python-gitlab\",\npackages=find_packages(exclude=[\"docs*\", \"tests*\"]),\ninstall_requires=[\"requests>=2.25.0\", \"requests-toolbelt>=0.9.1\"],\npackage_data={\n\"gitlab\": [\"py.typed\"],\n},\npython_requires=\">=3.7.0\",\nentry_points={\"console_scripts\": [\"gitlab = gitlab.cli:main\"]},\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Console\",\n\"Intended Audience :: System Administrators\",\n\"License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)\",\n\"Natural Language :: English\",\n\"Operating System :: POSIX\",\n\"Operating System :: Microsoft :: Windows\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\nextras_require={\n\"autocompletion\": [\"argcomplete>=1.10.0,<3\"],\n\"yaml\": [\"PyYaml>=5.2\"],\n},\n)\n"
    },
    {
        "package_name": "python-intercom-3.1.0",
        "file_list": "AUTHORS.rst CHANGES.rst intercom.api_operations.rst intercom.extended_api_operations.rst intercom.generic_handlers.rst intercom.lib.rst intercom.rst intercom.traits.rst modules.rst changelog.rst development.rst faq.rst index.rst installation.rst INSTALL.rst admin.py all.py bulk.py convert.py delete.py find.py find_all.py load.py save.py scroll.py __init__.py client.py collection_proxy.py company.py conversation.py count.py errors.py event.py tags.py users.py __init__.py job.py lead.py flat_store.py setter_property.py typed_json_deserializer.py __init__.py message.py note.py notification.py request.py scroll_collection_proxy.py segment.py admin.py base_service.py company.py conversation.py count.py event.py job.py lead.py message.py note.py segment.py subscription.py tag.py user.py __init__.py subscription.py tag.py api_resource.py incrementable_attributes.py __init__.py user.py utils.py __init__.py LICENSE.rst MANIFEST.in PKG-INFO dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst requirements.txt setup.cfg setup.py test_72.py test_73.py __init__.py test_admin.py test_company.py test_conversations.py test_count.py test_notes.py test_segments.py test_tags.py test_user.py __init__.py test_flat_store.py __init__.py test_admin.py test_collection_proxy.py test_company.py test_event.py test_import.py test_job.py test_lead.py test_message.py test_note.py test_notification.py test_request.py test_scroll_collection_proxy.py test_subscription.py test_tag.py test_user.py test_utils.py test_api_resource.py __init__.py __init__.py __init__.py",
        "setup.py": "#\n# Copyright 2012 John Keyes\n#\n# http:\/\/jkeyes.mit-license.org\/\n#\n\nimport os\nimport re\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\nwith open(os.path.join('intercom', '__init__.py')) as init:\nsource = init.read()\nm = re.search(\"__version__ = '(.*)'\", source, re.M)\n__version__ = m.groups()[0]\n\nwith open('README.rst') as readme:\nlong_description = readme.read()\n\nsetup(\nname=\"python-intercom\",\nversion=__version__,\ndescription=\"Intercom API wrapper\",\nlong_description=long_description,\nauthor=\"John Keyes\",\nauthor_email=\"john@keyes.ie\",\nlicense=\"MIT License\",\nurl=\"http:\/\/github.com\/jkeyes\/python-intercom\",\nkeywords='Intercom crm python',\nclassifiers=[\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n],\npackages=find_packages(),\ninclude_package_data=True,\ninstall_requires=[\"requests\", \"inflection\", \"certifi\", \"six\", \"pytz\"],\nzip_safe=False\n)\n"
    },
    {
        "package_name": "python-interface-1.6.1",
        "file_list": "compat.py default.py formatting.py functional.py interface.py test_functional.py test_interface.py test_typecheck.py test_utils.py _py3_typecheck_tests.py __init__.py typecheck.py typed_signature.py utils.py __init__.py LICENSE MANIFEST.in PKG-INFO dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nfrom setuptools import find_packages, setup\n\nlong_description = \"\"\n\nwith open(\"README.rst\") as f:\nlong_description = f.read()\n\n\ndef extras_require():\nreturn {\n\"test\": [\n\"tox>=2.0\",\n\"pytest>=2.8.5\",\n\"pytest-cov>=1.8.1\",\n\"pytest-pep8>=1.0.6\",\n],\n}\n\n\ndef install_requires():\nreturn [\n\"six\",\n'typing>=3.5.2;python_version<\"3.5\"',\n'funcsigs>=1.0.2;python_version<\"3\"',\n]\n\n\nsetup(\nname=\"python-interface\",\nversion=\"1.6.1\",\ndescription=\"Pythonic Interface definitions\",\nauthor=\"Scott Sanderson\",\nauthor_email=\"scott.b.sanderson90@gmail.com\",\npackages=find_packages(),\nlong_description=long_description,\nlicense=\"Apache 2.0\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Natural Language :: English\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Topic :: Software Development :: Pre-processors\",\n],\nurl=\"https:\/\/github.com\/ssanderson\/interface\",\ninstall_requires=install_requires(),\nextras_require=extras_require(),\n)\n"
    },
    {
        "package_name": "python_jwt-3.3.3",
        "file_list": ".coveragerc generate_key_bench.py generate_token_bench.py load_key_bench.py reporter.py reporter.pyc unitbench.py unitbench.pyc verify_token_bench.py __init__.py __init__.pyc reporter.cpython-310.pyc reporter.cpython-39.pyc unitbench.cpython-310.pyc unitbench.cpython-39.pyc __init__.cpython-310.pyc __init__.cpython-39.pyc conf.py index.rst make.bat Makefile environment.pickle index.doctree .buildinfo genindex.html index.html objects.inv py-modindex.html search.html searchindex.js index.rst.txt ajax-loader.gif basic.css comment-bright.png comment-close.png comment.png doctools.js documentation_options.js down-pressed.png down.png file.png jquery.js language_data.js minus.png nature.css plus.png pygments.css searchtools.js underscore.js up-pressed.png up.png websupport.js LICENCE Makefile MANIFEST.in PKG-INFO pylintrc __init__.py __init__.pyc __init__.cpython-310.pyc __init__.cpython-33.pyc __init__.cpython-34.pyc __init__.cpython-35.pyc __init__.cpython-37.pyc __init__.cpython-38.pyc __init__.cpython-39.pyc dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py alg_none_verification_vows.py alg_none_verification_vows.pyc allowed_algs_vows.py allowed_algs_vows.pyc common.py common.pyc fixtures.js fixtures.py fixtures.pyc google_jwt_oauth_vows.py google_jwt_oauth_vows.pyc jose_interop_vows.py jose_interop_vows.pyc jwcrypto_notimpl_vows.py jwcrypto_notimpl_vows.pyc jwt_spec.py jwt_spec.pyc jwt_vows.py jwt_vows.pyc missing_claims_vows.py missing_claims_vows.pyc other_headers_vows.py other_headers_vows.pyc pem_as_hmac_key_vows.py pem_as_hmac_key_vows.pyc __init__.py __init__.pyc __init__.cpython-310.pyc __init__.cpython-33.pyc __init__.cpython-34.pyc __init__.cpython-35.pyc __init__.cpython-37.pyc __init__.cpython-38.pyc __init__.cpython-39.pyc patch.py patch.pyc run_coverage.py run_pyvows.py __init__.py __init__.pyc patch.cpython-310.pyc patch.cpython-34.pyc patch.cpython-35.pyc patch.cpython-36.pyc patch.cpython-37.pyc patch.cpython-39.pyc __init__.cpython-310.pyc __init__.cpython-34.pyc __init__.cpython-35.pyc __init__.cpython-36.pyc __init__.cpython-37.pyc __init__.cpython-39.pyc variance_vows.py variance_vows.pyc __init__.py __init__.pyc alg_none_verification_vows.cpython-310.pyc alg_none_verification_vows.cpython-34.pyc alg_none_verification_vows.cpython-37.pyc alg_none_verification_vows.cpython-39.pyc allowed_algs_vows.cpython-310.pyc allowed_algs_vows.cpython-34.pyc allowed_algs_vows.cpython-37.pyc allowed_algs_vows.cpython-39.pyc common.cpython-310.pyc common.cpython-34.pyc common.cpython-35.pyc common.cpython-37.pyc common.cpython-39.pyc fixtures.cpython-310.pyc fixtures.cpython-34.pyc fixtures.cpython-35.pyc fixtures.cpython-37.pyc fixtures.cpython-39.pyc google_jwt_oauth_vows.cpython-310.pyc google_jwt_oauth_vows.cpython-34.pyc google_jwt_oauth_vows.cpython-37.pyc google_jwt_oauth_vows.cpython-39.pyc jose_interop_vows.cpython-310.pyc jose_interop_vows.cpython-39.pyc jwcrypto_notimpl_vows.cpython-310.pyc jwcrypto_notimpl_vows.cpython-37.pyc jwcrypto_notimpl_vows.cpython-39.pyc jwt_spec.cpython-310.pyc jwt_spec.cpython-34.pyc jwt_spec.cpython-35.pyc jwt_spec.cpython-37.pyc jwt_spec.cpython-39.pyc jwt_vows.cpython-310.pyc jwt_vows.cpython-34.pyc jwt_vows.cpython-35.pyc jwt_vows.cpython-37.pyc jwt_vows.cpython-39.pyc missing_claims_vows.cpython-310.pyc missing_claims_vows.cpython-37.pyc missing_claims_vows.cpython-39.pyc node_jsjws_interop_vows.cpython-34.pyc node_jsjws_interop_vows.cpython-37.pyc other_headers_vows.cpython-310.pyc other_headers_vows.cpython-37.pyc other_headers_vows.cpython-39.pyc pem_as_hmac_key_vows.cpython-310.pyc pem_as_hmac_key_vows.cpython-34.pyc pem_as_hmac_key_vows.cpython-37.pyc pem_as_hmac_key_vows.cpython-39.pyc variance_vows.cpython-310.pyc variance_vows.cpython-34.pyc variance_vows.cpython-37.pyc variance_vows.cpython-39.pyc __init__.cpython-310.pyc __init__.cpython-34.pyc __init__.cpython-35.pyc __init__.cpython-36.pyc __init__.cpython-37.pyc __init__.cpython-39.pyc",
        "setup.py": "import os\nfrom setuptools import setup\n\ndef read(name):\nreturn open(os.path.join(os.path.dirname(__file__), name)).read()\n\nsetup(\nname='python_jwt',\nversion='3.3.3',\ndescription=\"Module for generating and verifying JSON Web Tokens\",\nlong_description=read('README.md'),\nlong_description_content_type='text\/markdown',\nkeywords='',\nauthor='David Halls',\nauthor_email='dave@davedoesdev.com',\nurl='https:\/\/github.com\/davedoesdev\/python-jwt',\nlicense='MIT',\npackages=['python_jwt'],\ninstall_requires=[\"jwcrypto>=0.4.2,<1.0.0; python_version < '3.0'\",\n\"jwcrypto>=1.0.0; python_version >= '3.0'\"],\npython_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*',\nclassifiers=[\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: Implementation :: CPython',\n],\n)\n"
    },
    {
        "package_name": "python-logstash-0.4.8",
        "file_list": "example1.py example2.py LICENSE formatter.py handler_amqp.py handler_tcp.py handler_udp.py __init__.py PKG-INFO README.rst setup.py",
        "setup.py": "from distutils.core import setup\nsetup(\nname='python-logstash',\npackages=['logstash'],\nversion='0.4.8',\ndescription='Python logging handler for Logstash.',\nlong_description=open('README.rst').read(),\nlicense='MIT',\nauthor='Volodymyr Klochan',\nauthor_email='vklochan@gmail.com',\nurl='https:\/\/github.com\/vklochan\/python-logstash',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 3',\n'Topic :: Internet :: WWW\/HTTP',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: System :: Logging',\n]\n)\n"
    },
    {
        "package_name": "python-memcached-1.59",
        "file_list": "ChangeLog MANIFEST.in memcache.py PKG-INFO dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md requirements.txt setup.cfg setup.py test-requirements.txt",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom setuptools.depends import get_module_constant\nfrom setuptools import setup # noqa\n\n\nversion = get_module_constant('memcache', '__version__')\nsetup(\nname=\"python-memcached\",\nversion=version,\ndescription=\"Pure python memcached client\",\nlong_description=open(\"README.md\").read(),\nauthor=\"Evan Martin\",\nauthor_email=\"martine@danga.com\",\nmaintainer=\"Sean Reifschneider\",\nmaintainer_email=\"jafo@tummy.com\",\nurl=\"https:\/\/github.com\/linsomniac\/python-memcached\",\ndownload_url=\"https:\/\/github.com\/linsomniac\/python-memcached\/releases\/download\/{0}\/python-memcached-{0}.tar.gz\".format(version),\npy_modules=[\"memcache\"],\ninstall_requires=open('requirements.txt').read().split(),\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Python Software Foundation License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Topic :: Internet\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n],\n)\n"
    },
    {
        "package_name": "python-multipart-0.0.5",
        "file_list": "LICENSE.txt MANIFEST.in decoders.py exceptions.py multipart.py compat.py almost_match_boundary.http almost_match_boundary.yaml almost_match_boundary_without_CR.http almost_match_boundary_without_CR.yaml almost_match_boundary_without_final_hyphen.http almost_match_boundary_without_final_hyphen.yaml almost_match_boundary_without_LF.http almost_match_boundary_without_LF.yaml bad_end_of_headers.http bad_end_of_headers.yaml bad_header_char.http bad_header_char.yaml bad_initial_boundary.http bad_initial_boundary.yaml base64_encoding.http base64_encoding.yaml CR_in_header.http CR_in_header.yaml CR_in_header_value.http CR_in_header_value.yaml empty_header.http empty_header.yaml multiple_fields.http multiple_fields.yaml multiple_files.http multiple_files.yaml quoted_printable_encoding.http quoted_printable_encoding.yaml single_field.http single_field.yaml single_field_blocks.http single_field_blocks.yaml single_field_longer.http single_field_longer.yaml single_field_single_file.http single_field_single_file.yaml single_field_with_leading_newlines.http single_field_with_leading_newlines.yaml single_file.http single_file.yaml utf8_filename.http utf8_filename.yaml test_multipart.py __init__.py _version.py __init__.py PKG-INFO dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst requirements.txt setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nfrom __future__ import print_function\n\nimport os\nimport re\nimport sys\nfrom setuptools import setup\n\nversion_file = os.path.join('multipart', '_version.py')\nwith open(version_file, 'rb') as f:\nversion_data = f.read().strip()\n\nif sys.version_info[0] >= 3:\nversion_data = version_data.decode('ascii')\n\nversion_re = re.compile(r'((?:\\d+)\\.(?:\\d+)\\.(?:\\d+))')\nversion = version_re.search(version_data).group(0)\n\nsetup(name='python-multipart',\nversion=version,\ndescription='A streaming multipart parser for Python',\nauthor='Andrew Dunham',\nurl='http:\/\/github.com\/andrew-d\/python-multipart',\nlicense='Apache',\nplatforms='any',\nzip_safe=False,\ninstall_requires=[\n'six>=1.4.0',\n],\ntests_require=[\n'pytest',\n'pytest-cov',\n'Mock',\n'PyYAML'\n],\npackages=[\n'multipart',\n'multipart.tests',\n],\nclassifiers=[\n'Development Status :: 3 - Alpha',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.3',\n'Topic :: Software Development :: Libraries :: Python Modules'\n],\ntest_suite = 'multipart.tests.suite',\n)\n\n"
    },
    {
        "package_name": "python-redis-lock-3.7.0",
        "file_list": ".bumpversion.cfg .cookiecutterrc .coveragerc .editorconfig .gitignore .pre-commit-config.yaml .readthedocs.yml .travis.yml AUTHORS.rst CHANGELOG.rst bootstrap.py requirements.txt .travis.yml CONTRIBUTING.rst authors.rst changelog.rst conf.py contributing.rst index.rst installation.rst readme.rst redis-lock diagram (v3.0).png redis-lock diagram (v3.0).svg redis-lock diagram.png redis-lock diagram.svg index.rst redis_lock.rst requirements.txt spelling_wordlist.txt usage.rst bench.py bench.rst plain.py README.rst test-tmux.py LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt django_cache.py __init__.py conf.py conftest.py helper.py test_django_integration.py settings.py __init__.py test_redis_lock.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- encoding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nimport io\nimport re\nfrom glob import glob\nfrom os.path import basename\nfrom os.path import dirname\nfrom os.path import join\nfrom os.path import splitext\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef read(*names, **kwargs):\nwith io.open(\njoin(dirname(__file__), *names),\nencoding=kwargs.get('encoding', 'utf8')\n) as fh:\nreturn fh.read()\n\n\nsetup(\nname='python-redis-lock',\nversion='3.7.0',\nlicense='BSD-2-Clause',\ndescription='Lock context manager implemented via redis SETNX\/BLPOP.',\nlong_description='%s\\n%s' % (\nre.compile('^.. start-badges.*^.. end-badges', re.M | re.S).sub('', read('README.rst')),\nre.sub(':[a-z]+:`~?(.*?)`', r'``\\1``', read('CHANGELOG.rst'))\n),\nauthor='Ionel Cristian M\u0103rie\u0219',\nauthor_email='contact@ionelmc.ro',\nurl='https:\/\/github.com\/ionelmc\/python-redis-lock',\npackages=find_packages('src'),\npackage_dir={'': 'src'},\npy_modules=[splitext(basename(path))[0] for path in glob('src\/*.py')],\ninclude_package_data=True,\nzip_safe=False,\nclassifiers=[\n# complete classifier list: http:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: Unix',\n'Operating System :: POSIX',\n'Operating System :: Microsoft :: Windows',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n# uncomment if you test on these interpreters:\n# 'Programming Language :: Python :: Implementation :: IronPython',\n# 'Programming Language :: Python :: Implementation :: Jython',\n# 'Programming Language :: Python :: Implementation :: Stackless',\n'Topic :: Utilities',\n],\nproject_urls={\n'Documentation': 'https:\/\/python-redis-lock.readthedocs.io\/',\n'Changelog': 'https:\/\/python-redis-lock.readthedocs.io\/en\/latest\/changelog.html',\n'Issue Tracker': 'https:\/\/github.com\/ionelmc\/python-redis-lock\/issues',\n},\nkeywords=[\n# eg: 'keyword1', 'keyword2', 'keyword3',\n],\npython_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\ninstall_requires=[\n'redis>=2.10.0',\n],\nextras_require={\n'django': [\n'django-redis>=3.8.0',\n]\n}\n)\n"
    },
    {
        "package_name": "python-redmine-2.3.0",
        "file_list": ".coveragerc CHANGELOG.rst LICENSE MANIFEST.in NOTICE PKG-INFO dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst base.py sync.py __init__.py exceptions.py lookups.py base.py standard.py __init__.py base.py standard.py __init__.py resultsets.py utilities.py version.py __init__.py setup.cfg setup.py standard.py __init__.py test_engines.py test_managers.py test_redmine.py test_resources_standard.py test_resultsets.py __init__.py",
        "setup.py": "import sys\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.test import test\n\ntry:\nimport multiprocessing # https:\/\/bugs.python.org\/issue15881\nexcept ImportError:\npass\n\n\nclass NoseTests(test):\ndef finalize_options(self):\ntest.finalize_options(self)\nself.test_args = []\nself.test_suite = True\n\ndef run_tests(self):\nimport nose\nnose.run_exit(argv=['nosetests'])\n\n\ntests_require = ['nose', 'coverage']\n\nif sys.version_info[:2] == (2, 7):\ntests_require.append('mock')\n\nexec(open('redminelib\/version.py').read())\n\nsetup(\nname='python-redmine',\nversion=globals()['__version__'],\npackages=find_packages(exclude=('tests', 'tests.*')),\nurl='https:\/\/github.com\/maxtepkeev\/python-redmine',\nproject_urls={\n'Documentation': 'https:\/\/python-redmine.com',\n},\nlicense='Apache 2.0',\nauthor='Maxim Tepkeev',\nauthor_email='support@python-redmine.com',\ndescription='Library for communicating with a Redmine project management application',\nlong_description=open('README.rst').read() + '\\n\\n' + open('CHANGELOG.rst').read(),\nkeywords='redmine redmineup redminecrm redminelib easyredmine',\npython_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\ninstall_requires=['requests>=2.23.0'],\ntests_require=tests_require,\ncmdclass={'test': NoseTests},\nzip_safe=False,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'License :: OSI Approved :: Apache Software License',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Utilities',\n'Topic :: Internet :: WWW\/HTTP',\n'Intended Audience :: Developers',\n'Environment :: Console',\n'Environment :: Web Environment',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy'\n],\n)\n"
    },
    {
        "package_name": "python-sat-0.1.7.dev19",
        "file_list": "bitwise.hh card.hh clset.hh common.hh itot.hh ladder.hh mto.hh pairwise.hh ptypes.hh pycard.cc seqcounter.hh sortcard.hh utils.hh fm.py genhard.py hitman.py lbx.py lsu.py mcsls.py models.py musx.py optux.py rc2.py usage.py __init__.py LICENSE.txt MANIFEST.in PKG-INFO card.py formula.py pb.py solvers.py _fileio.py _utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst requirements.txt setup.cfg setup.py cadical.tar.gz glucose30.tar.gz glucose41.tar.gz lingeling.tar.gz maplechrono.zip maplecm.zip maplesat.zip mergesat3.tar.gz minicard.tar.gz minisat22.tar.gz minisatgh.zip cadical.patch glucose30.patch glucose41.patch gluecard30.patch gluecard41.patch lingeling.patch maplechrono.patch maplecm.patch maplesat.patch mergesat3.patch minicard.patch minisat22.patch minisatgh.patch prepare.py pysolvers.cc",
        "setup.py": "#!\/usr\/bin\/env python\n#-*- coding:utf-8 -*-\n##\n## setup.py\n##\n## Created on: Jan 23, 2018\n## Author: Alexey Ignatiev\n## E-mail: alexey.ignatiev@monash.edu\n##\n\n#\n#==============================================================================\nimport os\nimport os.path\nimport contextlib\nimport glob\n\ntry:\nfrom setuptools import setup, Extension\nHAVE_SETUPTOOLS = True\nexcept ImportError:\nfrom distutils.core import setup, Extension\nHAVE_SETUPTOOLS = False\n\nimport distutils.command.build\nimport distutils.command.build_ext\nimport distutils.command.install\n\nimport inspect, os, sys\nsys.path.insert(0, os.path.join(os.path.realpath(os.path.abspath(os.path.split(inspect.getfile(inspect.currentframe()))[0])), 'solvers\/'))\nimport platform\nimport prepare\n\nfrom pysat import __version__\n\n\n#\n#==============================================================================\n@contextlib.contextmanager\ndef chdir(new_dir):\nold_dir = os.getcwd()\ntry:\nos.chdir(new_dir)\nyield\nfinally:\nos.chdir(old_dir)\n\n\n#\n#==============================================================================\nROOT = os.path.abspath(os.path.dirname(__file__))\n\nLONG_DESCRIPTION = \"\"\"\nA Python library providing a simple interface to a number of state-of-art\nBoolean satisfiability (SAT) solvers and a few types of cardinality and\npseudo-Boolean encodings. The purpose of PySAT is to enable researchers\nworking on SAT and its applications and generalizations to easily prototype\nwith SAT oracles in Python while exploiting incrementally the power of the\noriginal low-level implementations of modern SAT solvers.\n\nWith PySAT it should be easy for you to implement a MaxSAT solver, an\nMUS\/MCS extractor\/enumerator, or any tool solving an application problem\nwith the (potentially multiple) use of a SAT oracle.\n\nDetails can be found at `https:\/\/pysathq.github.io <https:\/\/pysathq.github.io>`__.\n\"\"\"\n\n\n# solvers to install\n#==============================================================================\nto_install = ['cadical', 'gluecard30', 'gluecard41', 'glucose30', 'glucose41',\n'lingeling', 'maplechrono', 'maplecm', 'maplesat', 'mergesat3',\n'minicard', 'minisat22', 'minisatgh']\n\n# example scripts to install as standalone executables\n#==============================================================================\nscripts = ['fm', 'genhard', 'lbx', 'lsu', 'mcsls', 'models', 'musx', 'optux',\n'rc2']\n\n\n# we need to redefine the build command to\n# be able to download and compile solvers\n#==============================================================================\nclass build(distutils.command.build.build):\n\"\"\"\nOur custom builder class.\n\"\"\"\n\ndef run(self):\n\"\"\"\nDownload, patch and compile SAT solvers before building.\n\"\"\"\n# download and compile solvers\nif platform.system() != 'Windows':\nprepare.do(to_install)\n\n# now, do standard build\ndistutils.command.build.build.run(self)\n\n# same with build_ext\n#==============================================================================\nclass build_ext(distutils.command.build_ext.build_ext):\n\"\"\"\nOur custom builder class.\n\"\"\"\n\ndef run(self):\n\"\"\"\nDownload, patch and compile SAT solvers before building.\n\"\"\"\n# download and compile solvers\nif platform.system() != 'Windows':\nprepare.do(to_install)\n\n# now, do standard build\ndistutils.command.build_ext.build_ext.run(self)\n\n\n# compilation flags for C extensions\n#==============================================================================\ncompile_flags, cpplib = ['-std=c++11', '-Wall', '-Wno-deprecated'], ['stdc++']\nif platform.system() == 'Darwin':\ncompile_flags += ['--stdlib=libc++']\ncpplib = ['c++']\nelif platform.system() == 'Windows':\ncompile_flags = ['-DNBUILD', '-DNLGLYALSAT' , '\/DINCREMENTAL', '-DNLGLOG',\n'-DNDEBUG', '-DNCHKSOL', '-DNLGLFILES', '-DNLGLDEMA', '-I.\/win']\ncpplib = []\n\n\n# C extensions: pycard and pysolvers\n#==============================================================================\npycard_ext = Extension('pycard',\nsources=['cardenc\/pycard.cc'],\nextra_compile_args=compile_flags,\ninclude_dirs=['cardenc'] ,\nlanguage='c++',\nlibraries=cpplib,\nlibrary_dirs=[]\n)\n\npysolvers_sources = ['solvers\/pysolvers.cc']\n\nif platform.system() == 'Windows':\nprepare.do(to_install)\nwith chdir('solvers'):\nfor solver in to_install:\nwith chdir(solver):\nfor filename in glob.glob('*.c*'):\npysolvers_sources += ['solvers\/%s\/%s' % (solver, filename)]\nfor filename in glob.glob('*\/*.c*'):\npysolvers_sources += ['solvers\/%s\/%s' % (solver, filename)]\nlibraries = []\nlibrary_dirs = []\nelse:\nlibraries = to_install + cpplib\nlibrary_dirs = list(map(lambda x: os.path.join('solvers', x), to_install))\n\npysolvers_ext = Extension('pysolvers',\nsources=pysolvers_sources,\nextra_compile_args=compile_flags + \\\nlist(map(lambda x: '-DWITH_{0}'.format(x.upper()), to_install)),\ninclude_dirs=['solvers'],\nlanguage='c++',\nlibraries=libraries,\nlibrary_dirs=library_dirs\n)\n\n\n# finally, calling standard setuptools.setup() (or distutils.core.setup())\n#==============================================================================\nsetup(name='python-sat',\npackages=['pysat', 'pysat.examples'],\npackage_dir={'pysat.examples': 'examples'},\nversion=__version__,\ndescription='A Python library for prototyping with SAT oracles',\nlong_description=LONG_DESCRIPTION,\nlong_description_content_type='text\/x-rst; charset=UTF-8',\nlicense='MIT',\nauthor='Alexey Ignatiev, Joao Marques-Silva, Antonio Morgado',\nauthor_email='alexey.ignatiev@monash.edu, joao.marques-silva@univ-toulouse.fr, ajrmorgado@gmail.com',\nurl='https:\/\/github.com\/pysathq\/pysat',\next_modules=[pycard_ext, pysolvers_ext],\nscripts=['examples\/{0}.py'.format(s) for s in scripts],\ncmdclass={'build': build, 'build_ext': build_ext},\ninstall_requires=['six'],\nextras_require = {\n'aiger': ['py-aiger-cnf>=2.0.0'],\n'pblib': ['pypblib>=0.0.3']\n}\n)\n"
    },
    {
        "package_name": "python-status-1.0.1",
        "file_list": "LICENSE PKG-INFO README.md setup.py status.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom distutils.core import setup\n\ntry:\nimport pypandoc\nlong_description = pypandoc.convert('README.md', 'rst')\nexcept (ImportError, IOError):\nlong_description = open('README.md').read()\n\nversion = '1.0.1'\n\nsetup(\nname='python-status',\nversion=version,\nauthor='Avinash Sajjanshetty',\nauthor_email='hi@avi.im',\npy_modules=['status'],\nurl='https:\/\/github.com\/avinassh\/status\/',\nlicense='BSD',\ndescription='HTTP Status for Humans',\nlong_description=long_description,\nclassifiers=[\n'Development Status :: 6 - Mature',\n'License :: OSI Approved :: BSD License',\n'Operating System :: POSIX',\n'Intended Audience :: Developers',\n'Natural Language :: English',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Topic :: Internet',\n'Topic :: Software Development :: Libraries',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Utilities',\n],\n)\n"
    },
    {
        "package_name": "python-string-utils-1.0.0",
        "file_list": "PKG-INFO dependency_links.txt PKG-INFO SOURCES.txt top_level.txt README.md setup.cfg setup.py errors.py generation.py manipulation.py validation.py _regex.py __init__.py",
        "setup.py": "import setuptools\n\nwith open('README.md', 'r') as readme:\nlong_description = readme.read()\n\nsetuptools.setup(\nname='python-string-utils',\nversion='1.0.0',\ndescription='Utility functions for strings validation and manipulation.',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nauthor='Davide Zanotti',\nauthor_email='davidezanotti@gmail.com',\nlicense='MIT',\nurl='https:\/\/github.com\/daveoncode\/python-string-utils',\nclassifiers=[\n'Programming Language :: Python :: 3',\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Topic :: Software Development :: Libraries',\n'Operating System :: OS Independent',\n'License :: OSI Approved :: MIT License',\n],\nkeywords='string str utilities validation compression development',\npackages=['string_utils'],\ndata_files=[('README', ['README.md'])],\npython_requires='>=3.5',\nsetup_requires=['wheel'],\n)\n"
    },
    {
        "package_name": "python-subunit-1.4.0",
        "file_list": ".travis.yml all_tests.py Apache-2.0 BSD COPYING subunit-1to2 subunit-2to1 subunit-filter subunit-ls subunit-notify subunit-output subunit-stats subunit-tags subunit2csv subunit2disk subunit2gtk subunit2junitxml subunit2pyunit tap2subunit MANIFEST.in NEWS PKG-INFO LICENSE README README.subunit setup.py test_iso8601.py chunked.py details.py filters.py iso8601.py progress_model.py run.py sample-script.py sample-two-script.py test_chunked.py test_details.py test_filters.py test_filter_to_disk.py test_output_filter.py test_progress_model.py test_run.py test_subunit_filter.py test_subunit_stats.py test_subunit_tags.py test_tap2subunit.py test_test_protocol.py test_test_protocol2.py test_test_results.py __init__.py test_results.py v2.py _output.py _to_disk.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nimport os.path\ntry:\n# If the user has setuptools \/ distribute installed, use it\nfrom setuptools import setup\nexcept ImportError:\n# Otherwise, fall back to distutils.\nfrom distutils.core import setup\nextra = {}\nelse:\nextra = {\n'install_requires': [\n'extras',\n'testtools>=0.9.34',\n],\n'tests_require': [\n'fixtures',\n'hypothesis',\n'testscenarios',\n],\n'extras_require': {\n'docs': ['docutils'],\n'test': ['fixtures', 'testscenarios'],\n'test:python_version!=\"3.2\"': ['hypothesis'],\n},\n}\n\n\ndef _get_version_from_file(filename, start_of_line, split_marker):\n\"\"\"Extract version from file, giving last matching value or None\"\"\"\ntry:\nreturn [x for x in open(filename)\nif x.startswith(start_of_line)][-1].split(split_marker)[1].strip()\nexcept (IOError, IndexError):\nreturn None\n\n\nVERSION = (\n# Assume we are in a distribution, which has PKG-INFO\n_get_version_from_file('PKG-INFO', 'Version:', ':')\n# Must be a development checkout, so use the Makefile\nor _get_version_from_file('Makefile', 'VERSION', '=')\nor \"0.0\")\n\n\nrelpath = os.path.dirname(__file__)\nif relpath:\nos.chdir(relpath)\nsetup(\nname='python-subunit',\nversion=VERSION,\ndescription=('Python implementation of subunit test streaming protocol'),\nlong_description=open('README.rst').read(),\nclassifiers=[\n'Intended Audience :: Developers',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Topic :: Software Development :: Testing',\n],\nkeywords='python test streaming',\nauthor='Robert Collins',\nauthor_email='subunit-dev@lists.launchpad.net',\nurl='http:\/\/launchpad.net\/subunit',\nlicense='Apache-2.0 or BSD',\nproject_urls={\n\"Bug Tracker\": \"https:\/\/bugs.launchpad.net\/subunit\",\n\"Source Code\": \"https:\/\/github.com\/testing-cabal\/subunit\/\",\n},\npackages=['subunit', 'subunit.tests'],\npackage_dir={'subunit': 'python\/subunit'},\nscripts = [\n'filters\/subunit-1to2',\n'filters\/subunit-2to1',\n'filters\/subunit-filter',\n'filters\/subunit-ls',\n'filters\/subunit-notify',\n'filters\/subunit-output',\n'filters\/subunit-stats',\n'filters\/subunit-tags',\n'filters\/subunit2csv',\n'filters\/subunit2disk',\n'filters\/subunit2gtk',\n'filters\/subunit2junitxml',\n'filters\/subunit2pyunit',\n'filters\/tap2subunit',\n],\n**extra\n)\n"
    },
    {
        "package_name": "python-telegram-bot-13.13",
        "file_list": "LICENSE LICENSE.dual LICENSE.lesser MANIFEST.in PKG-INFO dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst README_RAW.rst requirements.txt setup.cfg setup.py base.py bot.py botcommand.py botcommandscope.py callbackquery.py chat.py chataction.py chatadministratorrights.py chatinvitelink.py chatjoinrequest.py chatlocation.py chatmember.py chatmemberupdated.py chatpermissions.py choseninlineresult.py constants.py dice.py error.py basepersistence.py callbackcontext.py callbackdatacache.py callbackqueryhandler.py chatjoinrequesthandler.py chatmemberhandler.py choseninlineresulthandler.py commandhandler.py contexttypes.py conversationhandler.py defaults.py dictpersistence.py dispatcher.py extbot.py filters.py handler.py inlinequeryhandler.py jobqueue.py messagehandler.py messagequeue.py picklepersistence.py pollanswerhandler.py pollhandler.py precheckoutqueryhandler.py regexhandler.py shippingqueryhandler.py stringcommandhandler.py stringregexhandler.py typehandler.py updater.py promise.py types.py webhookhandler.py __init__.py __init__.py animation.py audio.py chatphoto.py contact.py document.py file.py inputfile.py inputmedia.py location.py photosize.py sticker.py venue.py video.py videonote.py voice.py __init__.py forcereply.py callbackgame.py game.py gamehighscore.py __init__.py inlinekeyboardbutton.py inlinekeyboardmarkup.py inlinequery.py inlinequeryresult.py inlinequeryresultarticle.py inlinequeryresultaudio.py inlinequeryresultcachedaudio.py inlinequeryresultcacheddocument.py inlinequeryresultcachedgif.py inlinequeryresultcachedmpeg4gif.py inlinequeryresultcachedphoto.py inlinequeryresultcachedsticker.py inlinequeryresultcachedvideo.py inlinequeryresultcachedvoice.py inlinequeryresultcontact.py inlinequeryresultdocument.py inlinequeryresultgame.py inlinequeryresultgif.py inlinequeryresultlocation.py inlinequeryresultmpeg4gif.py inlinequeryresultphoto.py inlinequeryresultvenue.py inlinequeryresultvideo.py inlinequeryresultvoice.py inputcontactmessagecontent.py inputinvoicemessagecontent.py inputlocationmessagecontent.py inputmessagecontent.py inputtextmessagecontent.py inputvenuemessagecontent.py __init__.py keyboardbutton.py keyboardbuttonpolltype.py loginurl.py menubutton.py message.py messageautodeletetimerchanged.py messageentity.py messageid.py parsemode.py credentials.py data.py encryptedpassportelement.py passportdata.py passportelementerrors.py passportfile.py __init__.py invoice.py labeledprice.py orderinfo.py precheckoutquery.py shippingaddress.py shippingoption.py shippingquery.py successfulpayment.py __init__.py poll.py proximityalerttriggered.py py.typed replykeyboardmarkup.py replykeyboardremove.py replymarkup.py sentwebappmessage.py update.py user.py userprofilephotos.py deprecate.py helpers.py promise.py request.py types.py webhookhandler.py __init__.py connection.py connectionpool.py appengine.py ntlmpool.py pyopenssl.py socks.py __init__.py exceptions.py fields.py filepost.py makefile.py __init__.py ordered_dict.py six.py _implement __init__.p __init__.py poolmanager.py request.py response.py connection.py request.py response.py retry.py selectors.py ssl_.py timeout.py url.py wait.py __init__.py _collections.py __init__.py __init__.py __init__.py version.py videochat.py voicechat.py webappdata.py webappinfo.py webhookinfo.py __init__.py __main__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\"\"\"The setup and build script for the python-telegram-bot library.\"\"\"\nimport os\nimport subprocess\nimport sys\n\nfrom setuptools import setup, find_packages\n\nUPSTREAM_URLLIB3_FLAG = '--with-upstream-urllib3'\n\n\ndef get_requirements(raw=False):\n\"\"\"Build the requirements list for this project\"\"\"\nrequirements_list = []\n\nwith open('requirements.txt') as reqs:\nfor install in reqs:\nif install.startswith('# only telegram.ext:'):\nif raw:\nbreak\ncontinue\nrequirements_list.append(install.strip())\n\nreturn requirements_list\n\n\ndef get_packages_requirements(raw=False):\n\"\"\"Build the package & requirements list for this project\"\"\"\nreqs = get_requirements(raw=raw)\n\nexclude = ['tests*']\nif raw:\nexclude.append('telegram.ext*')\n\npacks = find_packages(exclude=exclude)\n# Allow for a package install to not use the vendored urllib3\nif UPSTREAM_URLLIB3_FLAG in sys.argv:\nsys.argv.remove(UPSTREAM_URLLIB3_FLAG)\nreqs.append('urllib3 >= 1.19.1')\npacks = [x for x in packs if not x.startswith('telegram.vendor.ptb_urllib3')]\n\nreturn packs, reqs\n\n\ndef get_setup_kwargs(raw=False):\n\"\"\"Builds a dictionary of kwargs for the setup function\"\"\"\npackages, requirements = get_packages_requirements(raw=raw)\n\nraw_ext = \"-raw\" if raw else \"\"\nreadme = f'README{\"_RAW\" if raw else \"\"}.rst'\n\nfn = os.path.join('telegram', 'version.py')\nwith open(fn) as fh:\nfor line in fh.readlines():\nif line.startswith('__version__'):\nexec(line)\n\nwith open(readme, 'r', encoding='utf-8') as fd:\n\nkwargs = dict(\nscript_name=f'setup{raw_ext}.py',\nname=f'python-telegram-bot{raw_ext}',\nversion=locals()['__version__'],\nauthor='Leandro Toledo',\nauthor_email='devs@python-telegram-bot.org',\nlicense='LGPLv3',\nurl='https:\/\/python-telegram-bot.org\/',\n# Keywords supported by PyPI can be found at https:\/\/github.com\/pypa\/warehouse\/blob\/aafc5185e57e67d43487ce4faa95913dd4573e14\/warehouse\/templates\/packaging\/detail.html#L20-L58\nproject_urls={\n\"Documentation\": \"https:\/\/python-telegram-bot.readthedocs.io\",\n\"Bug Tracker\": \"https:\/\/github.com\/python-telegram-bot\/python-telegram-bot\/issues\",\n\"Source Code\": \"https:\/\/github.com\/python-telegram-bot\/python-telegram-bot\",\n\"News\": \"https:\/\/t.me\/pythontelegrambotchannel\",\n\"Changelog\": \"https:\/\/python-telegram-bot.readthedocs.io\/en\/stable\/changelog.html\",\n},\ndownload_url=f'https:\/\/pypi.org\/project\/python-telegram-bot{raw_ext}\/',\nkeywords='python telegram bot api wrapper',\ndescription=\"We have made you a wrapper you can't refuse\",\nlong_description=fd.read(),\nlong_description_content_type='text\/x-rst',\npackages=packages,\n\ninstall_requires=requirements,\nextras_require={\n'json': 'ujson',\n'socks': 'PySocks',\n# 3.4-3.4.3 contained some cyclical import bugs\n'passport': 'cryptography!=3.4,!=3.4.1,!=3.4.2,!=3.4.3',\n},\ninclude_package_data=True,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)',\n'Operating System :: OS Independent',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Communications :: Chat',\n'Topic :: Internet',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n],\npython_requires='>=3.7'\n)\n\nreturn kwargs\n\n\ndef main():\n# If we're building, build ptb-raw as well\nif set(sys.argv[1:]) in [{'bdist_wheel'}, {'sdist'}, {'sdist', 'bdist_wheel'}]:\nargs = ['python', 'setup-raw.py']\nargs.extend(sys.argv[1:])\nsubprocess.run(args, check=True, capture_output=True)\n\nsetup(**get_setup_kwargs(raw=False))\n\n\nif __name__ == '__main__':\nmain()\n"
    },
    {
        "package_name": "python-utils-3.3.3",
        "file_list": ".coveragerc .gitignore codecov.yml coverage.rc conf.py index.rst make.bat Makefile python_utils.rst requirements.txt usage.rst LICENSE MANIFEST.in PKG-INFO pytest.ini aio.py compat.py containers.py converters.py decorators.py exceptions.py formatters.py generators.py import_.py logger.py loguru.py terminal.py time.py types.py __about__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst requirements.txt setup.cfg setup.py tox.ini requirements.txt test_decorators.py test_generators.py test_import.py test_logger.py test_python_utils.py test_time.py __init__.py",
        "setup.py": "import os\nimport typing\n\nimport setuptools\n\n# To prevent importing about and thereby breaking the coverage info we use this\n# exec hack\nabout: typing.Dict[str, str] = {}\nwith open('python_utils\/__about__.py') as fp:\nexec(fp.read(), about)\n\nif os.path.isfile('README.rst'):\nlong_description = open('README.rst').read()\nelse:\nlong_description = 'See http:\/\/pypi.python.org\/pypi\/python-utils\/'\n\nif __name__ == '__main__':\nsetuptools.setup(\npython_requires='>3.6.0',\nname='python-utils',\nversion=about['__version__'],\nauthor=about['__author__'],\nauthor_email=about['__author_email__'],\ndescription=about['__description__'],\nurl=about['__url__'],\nlicense='BSD',\npackages=setuptools.find_packages(\nexclude=['_python_utils_tests', '*.__pycache__']\n),\nlong_description=long_description,\ntests_require=['pytest'],\nextras_require={\n'loguru': [\n'loguru',\n],\n'docs': [\n'mock',\n'sphinx',\n'python-utils',\n],\n'tests': [\n'flake8',\n'pytest',\n'pytest-cov',\n'pytest-mypy',\n'pytest-asyncio',\n'sphinx',\n'types-setuptools',\n'loguru',\n],\n},\nclassifiers=['License :: OSI Approved :: BSD License'],\n)\n"
    },
    {
        "package_name": "python-xmp-toolkit-2.0.1",
        "file_list": ".coveragerc AUTHORS CHANGELOG appendix.rst conf.py developers.rst index.rst installation.rst introduction.rst Makefile reference.rst using.rst INSTALL consts.py core.py exempi.py files.py utils.py version.py __init__.py LICENSE MANIFEST.in PKG-INFO dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst run-coverage.sh setup.cfg setup.py common_fixtures.py BlueSquare450.tif BlueSquare450.xmp empty.txt zeros.tif BlueSquare.ai BlueSquare.avi BlueSquare.eps BlueSquare.gif BlueSquare.indd BlueSquare.jpg BlueSquare.mov BlueSquare.mp3 BlueSquare.pdf BlueSquare.png BlueSquare.psd BlueSquare.tif BlueSquare.wav BlueSquare.xmp fdo18635.jpg sig05-002a.tif sig05-002a.xmp sig05-003a.xmp test1.xmp samples.py test_core.py test_core_unit.py test_exempi.py test_files.py test_roundtrip.py xmpcoverage.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2008-2009, European Space Agency & European Southern\n# Observatory (ESA\/ESO)\n# Copyright (c) 2008-2009, CRS4 - Centre for Advanced Studies, Research and\n# Development in Sardinia\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# * Redistributions of source code must retain the above copyright\n# notice, this list of conditions and the following disclaimer.\n#\n# * Redistributions in binary form must reproduce the above copyright\n# notice, this list of conditions and the following disclaimer in the\n# documentation and\/or other materials provided with the distribution.\n#\n# * Neither the name of the European Space Agency, European Southern\n# Observatory, CRS4 nor the names of its contributors may be used to\n# endorse or promote products derived from this software without specific\n# prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY ESA\/ESO AND CRS4 ``AS IS'' AND ANY EXPRESS OR\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n# EVENT SHALL ESA\/ESO BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n# WHETHER # IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n\n\"\"\"\nInstall script for libxmp.\n\"\"\"\nimport os\nimport re\nimport sys\n\ntry:\nfrom setuptools import setup, find_packages\nexcept ImportError:\nfrom distutils.core import setup, find_packages\n\n# Install requirements.\ntest_requires = []\nif sys.hexversion < 0x03030000:\ntest_requires.append('mock>=1.0.1')\nif sys.hexversion < 0x02070000:\ntest_requires.append('unittest2>=0.5.1')\n\nKWARGS = {\n'name': 'python-xmp-toolkit',\n'description': 'Python XMP Toolkit for working with metadata.',\n'author': 'Lars Holm Nielsen, John Evans, Federico Caboni & Amit Kapadia',\n'author_email': 'lars@hankat.dk',\n'url': 'https:\/\/github.com\/python-xmp-toolkit\/python-xmp-toolkit',\n'long_description': open('README.rst').read(),\n'download_url': 'https:\/\/pypi.python.org\/pypi\/python-xmp-toolkit',\n'license': 'New BSD License',\n'install_requires': ['pytz'],\n'packages': find_packages(exclude=[\"*test*\"]),\n'test_suite': 'test',\n'tests_require': test_requires,\n'classifiers': [\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: POSIX :: Linux',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 3',\n'Topic :: Multimedia',\n'Topic :: Software Development :: Libraries',\n'Topic :: Utilities',\n],\n}\n\n# Get the version string. Cannot do this by importing libxmp!\nversion_file = os.path.join('libxmp', 'version.py')\nwith open(version_file, 'rt') as fptr:\ncontents = fptr.read()\nmatch = re.search('VERSION\\s*=\\s*\"(?P<version>\\d*.\\d*.\\d*.*)\"\\n', contents)\nKWARGS['version'] = match.group('version')\n\nsetup(**KWARGS)\n"
    },
    {
        "package_name": "pythran-0.11.0",
        "file_list": "AUTHORS Changelog AUTHORS.rst Changelog.rst CLI.rst conf.py DEVGUIDE.rst EXAMPLES.rst index.rst INTERNAL.rst LICENSE.rst Makefile MANUAL.rst requirements.txt SUPPORT.rst TUTORIAL.rst LICENSE MANIFEST.in __init__.py PKG-INFO aliases.py ancestors.py argument_effects.py argument_read_once.py ast_matcher.py cfg.py constant_expressions.py dependencies.py extended_syntax_check.py fixed_size_list.py globals_analysis.py global_declarations.py global_effects.py has_return.py identifiers.py immediates.py imported_ids.py inlinable.py is_assigned.py lazyness_analysis.py literals.py locals_analysis.py local_declarations.py node_count.py optimizable_comprehension.py ordered_global_declarations.py parallel_maps.py potential_iterator.py pure_expressions.py range_values.py scope.py static_expressions.py use_def_chain.py use_omp.py yield_points.py __init__.py backend.py atomic.hpp atomic_flag.hpp capabilities.hpp addressof.hpp atomic_flag.hpp atomic_template.hpp bitwise_cast.hpp bitwise_fp_cast.hpp caps_gcc_alpha.hpp caps_gcc_arm.hpp caps_gcc_atomic.hpp caps_gcc_ppc.hpp caps_gcc_sparc.hpp caps_gcc_sync.hpp caps_gcc_x86.hpp caps_linux_arm.hpp caps_msvc_arm.hpp caps_msvc_x86.hpp caps_windows.hpp config.hpp extra_fp_operations.hpp extra_fp_operations_fwd.hpp extra_fp_ops_emulated.hpp extra_fp_ops_generic.hpp extra_operations.hpp extra_operations_fwd.hpp extra_ops_emulated.hpp extra_ops_gcc_arm.hpp extra_ops_gcc_ppc.hpp extra_ops_gcc_x86.hpp extra_ops_generic.hpp extra_ops_msvc_arm.hpp extra_ops_msvc_x86.hpp float_sizes.hpp fp_operations.hpp fp_operations_fwd.hpp fp_ops_emulated.hpp fp_ops_generic.hpp hwcaps_gcc_arm.hpp hwcaps_gcc_ppc.hpp hwcaps_gcc_x86.hpp integral_extend.hpp interlocked.hpp int_sizes.hpp link.hpp lockpool.hpp operations.hpp operations_fwd.hpp operations_lockfree.hpp ops_cas_based.hpp ops_emulated.hpp ops_extending_cas_based.hpp ops_gcc_alpha.hpp ops_gcc_arm.hpp ops_gcc_arm_common.hpp ops_gcc_atomic.hpp ops_gcc_ppc.hpp ops_gcc_ppc_common.hpp ops_gcc_sparc.hpp ops_gcc_sync.hpp ops_gcc_x86.hpp ops_gcc_x86_dcas.hpp ops_linux_arm.hpp ops_msvc_arm.hpp ops_msvc_common.hpp ops_msvc_x86.hpp ops_windows.hpp pause.hpp platform.hpp storage_type.hpp string_ops.hpp conditional.hpp integral_constant.hpp is_floating_point.hpp is_function.hpp is_iec559.hpp is_integral.hpp is_signed.hpp is_trivially_default_constructible.hpp make_signed.hpp make_unsigned.hpp fences.hpp assert.hpp backward_compatibility.hpp borland.hpp concept_def.hpp concept_undef.hpp general.hpp has_constraints.hpp msvc.hpp usage.hpp borland_prefix.hpp borland_suffix.hpp msvc_prefix.hpp msvc_suffix.hpp abi_prefix.hpp abi_suffix.hpp auto_link.hpp borland.hpp clang.hpp codegear.hpp comeau.hpp common_edg.hpp compaq_cxx.hpp cray.hpp diab.hpp digitalmars.hpp gcc.hpp gcc_xml.hpp greenhills.hpp hp_acc.hpp intel.hpp kai.hpp metrowerks.hpp mpw.hpp nvcc.hpp pathscale.hpp pgi.hpp sgi_mipspro.hpp sunpro_cc.hpp vacpp.hpp visualc.hpp xlcpp.hpp xlcpp_zos.hpp posix_features.hpp select_compiler_config.hpp select_platform_config.hpp select_stdlib_config.hpp suffix.hpp header_deprecated.hpp helper_macros.hpp cmath.hpp complex.hpp functional.hpp memory.hpp utility.hpp aix.hpp amigaos.hpp beos.hpp bsd.hpp cloudabi.hpp cray.hpp cygwin.hpp haiku.hpp hpux.hpp irix.hpp linux.hpp macos.hpp qnxnto.hpp solaris.hpp symbian.hpp vms.hpp vxworks.hpp win32.hpp zos.hpp pragma_message.hpp requires_threads.hpp dinkumware.hpp libcomo.hpp libcpp.hpp libstdcpp3.hpp modena.hpp msl.hpp roguewave.hpp sgi.hpp stlport.hpp vacpp.hpp xlcpp_zos.hpp user.hpp warning_disable.hpp workaround.hpp container_fwd.hpp std_fwd.hpp addressof.hpp checked_delete.hpp demangle.hpp enable_if.hpp explicit_operator_bool.hpp ignore_unused.hpp noncopyable.hpp ref.hpp swap.hpp typeinfo.hpp use_default.hpp basic_pointerbuf.hpp fenv.hpp indirect_traits.hpp iterator.hpp lcast_precision.hpp lightweight_mutex.hpp reference_content.hpp select_type.hpp workaround.hpp exception.hpp alt_sstream.hpp alt_sstream_impl.hpp compat_workarounds.hpp config_macros.hpp msvc_disambiguater.hpp unset_macros.hpp workarounds_gcc-2_95.hpp workarounds_stlport.hpp exceptions.hpp feed_args.hpp format_class.hpp format_fwd.hpp format_implementation.hpp free_funcs.hpp group.hpp internals.hpp internals_fwd.hpp parsing.hpp begin_impl.hpp end_impl.hpp mpl_iterator.hpp std_pair.hpp adapt_struct.hpp adapt_auto.hpp adapt_base.hpp adapt_base_attr_filler.hpp adapt_is_tpl.hpp at_impl.hpp begin_impl.hpp category_of_impl.hpp deref_impl.hpp end_impl.hpp extension.hpp is_sequence_impl.hpp is_view_impl.hpp is_seq.hpp size_impl.hpp value_at_impl.hpp value_of_impl.hpp push_back.hpp push_front.hpp ignore.hpp cons.hpp cons_fwd.hpp cons_iterator.hpp at_impl.hpp begin_impl.hpp limits.hpp list_fwd.hpp list10_fwd.hpp list20_fwd.hpp list30_fwd.hpp list40_fwd.hpp list50_fwd.hpp list_fwd.hpp deref_impl.hpp empty_impl.hpp end_impl.hpp equal_to_impl.hpp next_impl.hpp reverse_cons.hpp value_at_impl.hpp value_of_impl.hpp list_fwd.hpp nil.hpp advance_impl.hpp at_impl.hpp begin_impl.hpp config.hpp limits.hpp vector.hpp vector10.hpp vector10_fwd.hpp vector20.hpp vector20_fwd.hpp vector30.hpp vector30_fwd.hpp vector40.hpp vector40_fwd.hpp vector50.hpp vector50_fwd.hpp vector_chooser.hpp vector_chooser10.hpp vector_chooser20.hpp vector_chooser30.hpp vector_chooser40.hpp vector_chooser50.hpp vector_fwd.hpp vvector10.hpp vvector10_fwd.hpp vvector20.hpp vvector20_fwd.hpp vvector30.hpp vvector30_fwd.hpp vvector40.hpp vvector40_fwd.hpp vvector50.hpp vvector50_fwd.hpp value_at_impl.hpp vector.hpp vector10.hpp vector10_fwd.hpp vector20.hpp vector20_fwd.hpp vector30.hpp vector30_fwd.hpp vector40.hpp vector40_fwd.hpp vector50.hpp vector50_fwd.hpp vector_forward_ctor.hpp vector_fwd.hpp vector_n.hpp vector_n_chooser.hpp deref_impl.hpp distance_impl.hpp end_impl.hpp equal_to_impl.hpp next_impl.hpp prior_impl.hpp value_at_impl.hpp value_of_impl.hpp vector.hpp vector_fwd.hpp vector_iterator.hpp std_pair.hpp tuple.hpp advance.hpp basic_iterator.hpp deref.hpp deref_data.hpp adapt_deref_traits.hpp adapt_value_traits.hpp advance.hpp distance.hpp segmented_equal_to.hpp segmented_iterator.hpp segmented_next_impl.hpp segment_sequence.hpp distance.hpp equal_to.hpp iterator_facade.hpp key_of.hpp convert_iterator.hpp fusion_iterator.hpp next.hpp prior.hpp segmented_iterator.hpp value_of.hpp value_of_data.hpp begin.hpp end.hpp equal_to.hpp greater.hpp greater_equal.hpp less.hpp less_equal.hpp not_equal_to.hpp enable_comparison.hpp equal_to.hpp greater.hpp greater_equal.hpp less.hpp less_equal.hpp not_equal_to.hpp comparison.hpp at.hpp begin.hpp segmented_begin.hpp segmented_begin_impl.hpp segmented_end.hpp segmented_end_impl.hpp segmented_size.hpp empty.hpp end.hpp segments.hpp size.hpp value_at.hpp intrinsic_fwd.hpp in.hpp manip.hpp out.hpp in.hpp out.hpp io.hpp as_const.hpp category_of.hpp config.hpp access.hpp and.hpp as_fusion_element.hpp enabler.hpp index_sequence.hpp is_mpl_sequence.hpp is_native_fusion_sequence.hpp mpl_iterator_category.hpp pp_round.hpp segmented_fold_until_impl.hpp is_iterator.hpp is_segmented.hpp is_sequence.hpp is_view.hpp iterator_base.hpp sequence_base.hpp tag_of.hpp tag_of_fwd.hpp void.hpp make_tuple.hpp make_tuple.hpp make_tuple10.hpp make_tuple20.hpp make_tuple30.hpp make_tuple40.hpp make_tuple50.hpp tuple.hpp tuple10.hpp tuple10_fwd.hpp tuple20.hpp tuple20_fwd.hpp tuple30.hpp tuple30_fwd.hpp tuple40.hpp tuple40_fwd.hpp tuple50.hpp tuple50_fwd.hpp tuple_fwd.hpp tuple_tie.hpp tuple_tie10.hpp tuple_tie20.hpp tuple_tie30.hpp tuple_tie40.hpp tuple_tie50.hpp tuple.hpp tuple_expand.hpp tuple_fwd.hpp tuple_tie.hpp make_tuple.hpp tuple.hpp tuple_fwd.hpp tuple_tie.hpp tuple.hpp at_impl.hpp begin_impl.hpp end_impl.hpp is_segmented_impl.hpp segmented_iterator_range.hpp segments_impl.hpp size_impl.hpp value_at_impl.hpp iterator_range.hpp iterator_range.hpp begin_impl.hpp deref_data_impl.hpp deref_impl.hpp end_impl.hpp key_of_impl.hpp next_impl.hpp value_of_data_impl.hpp value_of_impl.hpp joint_view.hpp joint_view_fwd.hpp joint_view_iterator.hpp advance_impl.hpp at_impl.hpp begin_impl.hpp deref_impl.hpp distance_impl.hpp end_impl.hpp equal_to_impl.hpp next_impl.hpp prior_impl.hpp size_impl.hpp value_at_impl.hpp value_of_impl.hpp single_view.hpp single_view_iterator.hpp advance.hpp config_def.hpp config_undef.hpp enable_if.hpp facade_iterator_category.hpp distance.hpp interoperable.hpp iterator_adaptor.hpp iterator_categories.hpp iterator_concepts.hpp iterator_facade.hpp iterator_traits.hpp reverse_iterator.hpp bad_lexical_cast.hpp converter_lexical.hpp converter_lexical_streams.hpp converter_numeric.hpp inf_nan.hpp is_character.hpp lcast_char_constants.hpp lcast_unsigned_converters.hpp widest_char.hpp try_lexical_convert.hpp calculate_constants.hpp constants.hpp error_handling.hpp policy.hpp bernoulli.hpp bessel.hpp bessel_prime.hpp beta.hpp binomial.hpp cbrt.hpp cos_pi.hpp airy_ai_bi_zero.hpp bernoulli_details.hpp bessel_derivatives_linear.hpp bessel_i0.hpp bessel_i1.hpp bessel_ik.hpp bessel_j0.hpp bessel_j1.hpp bessel_jn.hpp bessel_jy.hpp bessel_jy_asym.hpp bessel_jy_derivatives_asym.hpp bessel_jy_derivatives_series.hpp bessel_jy_series.hpp bessel_jy_zero.hpp bessel_k0.hpp bessel_k1.hpp bessel_kn.hpp bessel_y0.hpp bessel_y1.hpp bessel_yn.hpp erf_inv.hpp fp_traits.hpp gamma_inva.hpp ibeta_inverse.hpp ibeta_inv_ab.hpp iconv.hpp igamma_inverse.hpp igamma_large.hpp lanczos_sse2.hpp lgamma_small.hpp polygamma.hpp round_fwd.hpp t_distribution_inv.hpp unchecked_bernoulli.hpp unchecked_factorial.hpp digamma.hpp erf.hpp expm1.hpp factorials.hpp fpclassify.hpp gamma.hpp hankel.hpp hypot.hpp lanczos.hpp log1p.hpp math_fwd.hpp next.hpp polygamma.hpp pow.hpp powm1.hpp round.hpp sign.hpp sinc.hpp sin_pi.hpp sqrt1pm1.hpp trigamma.hpp trunc.hpp zeta.hpp atomic.hpp big_constant.hpp complex.hpp config.hpp convert_from_string.hpp is_const_iterable.hpp polynomial_horner1_10.hpp polynomial_horner1_11.hpp polynomial_horner1_12.hpp polynomial_horner1_13.hpp polynomial_horner1_14.hpp polynomial_horner1_15.hpp polynomial_horner1_16.hpp polynomial_horner1_17.hpp polynomial_horner1_18.hpp polynomial_horner1_19.hpp polynomial_horner1_2.hpp polynomial_horner1_20.hpp polynomial_horner1_3.hpp polynomial_horner1_4.hpp polynomial_horner1_5.hpp polynomial_horner1_6.hpp polynomial_horner1_7.hpp polynomial_horner1_8.hpp polynomial_horner1_9.hpp polynomial_horner2_10.hpp polynomial_horner2_11.hpp polynomial_horner2_12.hpp polynomial_horner2_13.hpp polynomial_horner2_14.hpp polynomial_horner2_15.hpp polynomial_horner2_16.hpp polynomial_horner2_17.hpp polynomial_horner2_18.hpp polynomial_horner2_19.hpp polynomial_horner2_2.hpp polynomial_horner2_20.hpp polynomial_horner2_3.hpp polynomial_horner2_4.hpp polynomial_horner2_5.hpp polynomial_horner2_6.hpp polynomial_horner2_7.hpp polynomial_horner2_8.hpp polynomial_horner2_9.hpp polynomial_horner3_10.hpp polynomial_horner3_11.hpp polynomial_horner3_12.hpp polynomial_horner3_13.hpp polynomial_horner3_14.hpp polynomial_horner3_15.hpp polynomial_horner3_16.hpp polynomial_horner3_17.hpp polynomial_horner3_18.hpp polynomial_horner3_19.hpp polynomial_horner3_2.hpp polynomial_horner3_20.hpp polynomial_horner3_3.hpp polynomial_horner3_4.hpp polynomial_horner3_5.hpp polynomial_horner3_6.hpp polynomial_horner3_7.hpp polynomial_horner3_8.hpp polynomial_horner3_9.hpp rational_horner1_10.hpp rational_horner1_11.hpp rational_horner1_12.hpp rational_horner1_13.hpp rational_horner1_14.hpp rational_horner1_15.hpp rational_horner1_16.hpp rational_horner1_17.hpp rational_horner1_18.hpp rational_horner1_19.hpp rational_horner1_2.hpp rational_horner1_20.hpp rational_horner1_3.hpp rational_horner1_4.hpp rational_horner1_5.hpp rational_horner1_6.hpp rational_horner1_7.hpp rational_horner1_8.hpp rational_horner1_9.hpp rational_horner2_10.hpp rational_horner2_11.hpp rational_horner2_12.hpp rational_horner2_13.hpp rational_horner2_14.hpp rational_horner2_15.hpp rational_horner2_16.hpp rational_horner2_17.hpp rational_horner2_18.hpp rational_horner2_19.hpp rational_horner2_2.hpp rational_horner2_20.hpp rational_horner2_3.hpp rational_horner2_4.hpp rational_horner2_5.hpp rational_horner2_6.hpp rational_horner2_7.hpp rational_horner2_8.hpp rational_horner2_9.hpp rational_horner3_10.hpp rational_horner3_11.hpp rational_horner3_12.hpp rational_horner3_13.hpp rational_horner3_14.hpp rational_horner3_15.hpp rational_horner3_16.hpp rational_horner3_17.hpp rational_horner3_18.hpp rational_horner3_19.hpp rational_horner3_2.hpp rational_horner3_20.hpp rational_horner3_3.hpp rational_horner3_4.hpp rational_horner3_5.hpp rational_horner3_6.hpp rational_horner3_7.hpp rational_horner3_8.hpp rational_horner3_9.hpp fraction.hpp precision.hpp promotion.hpp rational.hpp real_cast.hpp roots.hpp series.hpp toms748_solve.hpp tuple.hpp user.hpp core.hpp config_begin.hpp config_end.hpp meta_utils.hpp meta_utils_core.hpp std_ns_begin.hpp std_ns_end.hpp type_traits.hpp workaround.hpp traits.hpp utility.hpp utility_core.hpp advance.hpp advance_fwd.hpp always.hpp and.hpp apply.hpp apply_fwd.hpp apply_wrap.hpp arg.hpp arg_fwd.hpp assert.hpp at.hpp at_fwd.hpp adl_barrier.hpp advance_backward.hpp advance_forward.hpp arg_typedef.hpp arithmetic_op.hpp arity.hpp arity_spec.hpp at_impl.hpp begin_end_impl.hpp clear_impl.hpp common_name_wknd.hpp comparison_op.hpp adl.hpp arrays.hpp bcc.hpp bind.hpp compiler.hpp ctps.hpp dmc_ambiguous_ctps.hpp dtp.hpp eti.hpp forwarding.hpp gcc.hpp gpu.hpp has_apply.hpp has_xxx.hpp integral.hpp intel.hpp lambda.hpp msvc.hpp msvc_typename.hpp nttp.hpp overload_resolution.hpp pp_counter.hpp preprocessor.hpp static_constant.hpp ttp.hpp typeof.hpp use_preprocessed.hpp workaround.hpp contains_impl.hpp count_args.hpp find_if_pred.hpp fold_impl.hpp fold_impl_body.hpp full_lambda.hpp has_apply.hpp has_begin.hpp has_rebind.hpp has_size.hpp has_tag.hpp has_type.hpp include_preprocessed.hpp inserter_algorithm.hpp integral_wrapper.hpp is_msvc_eti_arg.hpp iter_apply.hpp iter_fold_if_impl.hpp iter_fold_impl.hpp lambda_arity_param.hpp lambda_no_ctps.hpp lambda_spec.hpp lambda_support.hpp largest_int.hpp logical_op.hpp msvc_dtw.hpp msvc_eti_base.hpp msvc_is_class.hpp msvc_never_true.hpp msvc_type.hpp na.hpp na_assert.hpp na_fwd.hpp na_spec.hpp nested_type_wknd.hpp nttp_decl.hpp numeric_cast_utils.hpp numeric_op.hpp O1_size_impl.hpp advance_backward.hpp advance_forward.hpp and.hpp apply.hpp apply_fwd.hpp apply_wrap.hpp arg.hpp basic_bind.hpp bind.hpp bind_fwd.hpp bitand.hpp bitor.hpp bitxor.hpp deque.hpp divides.hpp equal_to.hpp fold_impl.hpp full_lambda.hpp greater.hpp greater_equal.hpp inherit.hpp iter_fold_if_impl.hpp iter_fold_impl.hpp lambda_no_ctps.hpp less.hpp less_equal.hpp list.hpp list_c.hpp map.hpp minus.hpp modulus.hpp not_equal_to.hpp or.hpp placeholders.hpp plus.hpp quote.hpp reverse_fold_impl.hpp reverse_iter_fold_impl.hpp set.hpp set_c.hpp shift_left.hpp shift_right.hpp template_arity.hpp times.hpp unpack_args.hpp vector.hpp vector_c.hpp advance_backward.hpp advance_forward.hpp and.hpp apply.hpp apply_fwd.hpp apply_wrap.hpp arg.hpp basic_bind.hpp bind.hpp bind_fwd.hpp bitand.hpp bitor.hpp bitxor.hpp deque.hpp divides.hpp equal_to.hpp fold_impl.hpp full_lambda.hpp greater.hpp greater_equal.hpp inherit.hpp iter_fold_if_impl.hpp iter_fold_impl.hpp lambda_no_ctps.hpp less.hpp less_equal.hpp list.hpp list_c.hpp map.hpp minus.hpp modulus.hpp not_equal_to.hpp or.hpp placeholders.hpp plus.hpp quote.hpp reverse_fold_impl.hpp reverse_iter_fold_impl.hpp set.hpp set_c.hpp shift_left.hpp shift_right.hpp template_arity.hpp times.hpp unpack_args.hpp vector.hpp vector_c.hpp advance_backward.hpp advance_forward.hpp and.hpp apply.hpp apply_fwd.hpp apply_wrap.hpp arg.hpp basic_bind.hpp bind.hpp bind_fwd.hpp bitand.hpp bitor.hpp bitxor.hpp deque.hpp divides.hpp equal_to.hpp fold_impl.hpp full_lambda.hpp greater.hpp greater_equal.hpp inherit.hpp iter_fold_if_impl.hpp iter_fold_impl.hpp lambda_no_ctps.hpp less.hpp less_equal.hpp list.hpp list_c.hpp map.hpp minus.hpp modulus.hpp not_equal_to.hpp or.hpp placeholders.hpp plus.hpp quote.hpp reverse_fold_impl.hpp reverse_iter_fold_impl.hpp set.hpp set_c.hpp shift_left.hpp shift_right.hpp template_arity.hpp times.hpp unpack_args.hpp vector.hpp vector_c.hpp advance_backward.hpp advance_forward.hpp and.hpp apply.hpp apply_fwd.hpp apply_wrap.hpp arg.hpp basic_bind.hpp bind.hpp bind_fwd.hpp bitand.hpp bitor.hpp bitxor.hpp deque.hpp divides.hpp equal_to.hpp fold_impl.hpp full_lambda.hpp greater.hpp greater_equal.hpp inherit.hpp iter_fold_if_impl.hpp iter_fold_impl.hpp lambda_no_ctps.hpp less.hpp less_equal.hpp list.hpp list_c.hpp map.hpp minus.hpp modulus.hpp not_equal_to.hpp or.hpp placeholders.hpp plus.hpp quote.hpp reverse_fold_impl.hpp reverse_iter_fold_impl.hpp set.hpp set_c.hpp shift_left.hpp shift_right.hpp template_arity.hpp times.hpp unpack_args.hpp vector.hpp vector_c.hpp advance_backward.hpp advance_forward.hpp and.hpp apply.hpp apply_fwd.hpp apply_wrap.hpp arg.hpp basic_bind.hpp bind.hpp bind_fwd.hpp bitand.hpp bitor.hpp bitxor.hpp deque.hpp divides.hpp equal_to.hpp fold_impl.hpp full_lambda.hpp greater.hpp greater_equal.hpp inherit.hpp iter_fold_if_impl.hpp iter_fold_impl.hpp lambda_no_ctps.hpp less.hpp less_equal.hpp list.hpp list_c.hpp map.hpp minus.hpp modulus.hpp not_equal_to.hpp or.hpp placeholders.hpp plus.hpp quote.hpp reverse_fold_impl.hpp reverse_iter_fold_impl.hpp set.hpp set_c.hpp shift_left.hpp shift_right.hpp template_arity.hpp times.hpp unpack_args.hpp vector.hpp vector_c.hpp advance_backward.hpp advance_forward.hpp and.hpp apply.hpp apply_fwd.hpp apply_wrap.hpp arg.hpp basic_bind.hpp bind.hpp bind_fwd.hpp bitand.hpp bitor.hpp bitxor.hpp deque.hpp divides.hpp equal_to.hpp fold_impl.hpp full_lambda.hpp greater.hpp greater_equal.hpp inherit.hpp iter_fold_if_impl.hpp iter_fold_impl.hpp lambda_no_ctps.hpp less.hpp less_equal.hpp list.hpp list_c.hpp map.hpp minus.hpp modulus.hpp not_equal_to.hpp or.hpp placeholders.hpp plus.hpp quote.hpp reverse_fold_impl.hpp reverse_iter_fold_impl.hpp set.hpp set_c.hpp shift_left.hpp shift_right.hpp template_arity.hpp times.hpp unpack_args.hpp vector.hpp vector_c.hpp advance_backward.hpp advance_forward.hpp and.hpp apply.hpp apply_fwd.hpp apply_wrap.hpp arg.hpp basic_bind.hpp bind.hpp bind_fwd.hpp bitand.hpp bitor.hpp bitxor.hpp deque.hpp divides.hpp equal_to.hpp fold_impl.hpp full_lambda.hpp greater.hpp greater_equal.hpp inherit.hpp iter_fold_if_impl.hpp iter_fold_impl.hpp lambda_no_ctps.hpp less.hpp less_equal.hpp list.hpp list_c.hpp map.hpp minus.hpp modulus.hpp not_equal_to.hpp or.hpp placeholders.hpp plus.hpp quote.hpp reverse_fold_impl.hpp reverse_iter_fold_impl.hpp set.hpp set_c.hpp shift_left.hpp shift_right.hpp template_arity.hpp times.hpp unpack_args.hpp vector.hpp vector_c.hpp advance_backward.hpp advance_forward.hpp and.hpp apply.hpp apply_fwd.hpp apply_wrap.hpp arg.hpp basic_bind.hpp bind.hpp bind_fwd.hpp bitand.hpp bitor.hpp bitxor.hpp deque.hpp divides.hpp equal_to.hpp fold_impl.hpp full_lambda.hpp greater.hpp greater_equal.hpp inherit.hpp iter_fold_if_impl.hpp iter_fold_impl.hpp lambda_no_ctps.hpp less.hpp less_equal.hpp list.hpp list_c.hpp map.hpp minus.hpp modulus.hpp not_equal_to.hpp or.hpp placeholders.hpp plus.hpp quote.hpp reverse_fold_impl.hpp reverse_iter_fold_impl.hpp set.hpp set_c.hpp shift_left.hpp shift_right.hpp template_arity.hpp times.hpp unpack_args.hpp vector.hpp vector_c.hpp advance_backward.hpp advance_forward.hpp and.hpp apply.hpp apply_fwd.hpp apply_wrap.hpp arg.hpp basic_bind.hpp bind.hpp bind_fwd.hpp bitand.hpp bitor.hpp bitxor.hpp deque.hpp divides.hpp equal_to.hpp fold_impl.hpp full_lambda.hpp greater.hpp greater_equal.hpp inherit.hpp iter_fold_if_impl.hpp iter_fold_impl.hpp lambda_no_ctps.hpp less.hpp less_equal.hpp list.hpp list_c.hpp map.hpp minus.hpp modulus.hpp not_equal_to.hpp or.hpp placeholders.hpp plus.hpp quote.hpp reverse_fold_impl.hpp reverse_iter_fold_impl.hpp set.hpp set_c.hpp shift_left.hpp shift_right.hpp template_arity.hpp times.hpp unpack_args.hpp vector.hpp vector_c.hpp advance_backward.hpp advance_forward.hpp and.hpp apply.hpp apply_fwd.hpp apply_wrap.hpp arg.hpp basic_bind.hpp bind.hpp bind_fwd.hpp bitand.hpp bitor.hpp bitxor.hpp deque.hpp divides.hpp equal_to.hpp fold_impl.hpp full_lambda.hpp greater.hpp greater_equal.hpp inherit.hpp iter_fold_if_impl.hpp iter_fold_impl.hpp lambda_no_ctps.hpp less.hpp less_equal.hpp list.hpp list_c.hpp map.hpp minus.hpp modulus.hpp not_equal_to.hpp or.hpp placeholders.hpp plus.hpp quote.hpp reverse_fold_impl.hpp reverse_iter_fold_impl.hpp set.hpp set_c.hpp shift_left.hpp shift_right.hpp template_arity.hpp times.hpp unpack_args.hpp vector.hpp vector_c.hpp advance_backward.hpp advance_forward.hpp and.hpp apply.hpp apply_fwd.hpp apply_wrap.hpp arg.hpp basic_bind.hpp bind.hpp bind_fwd.hpp bitand.hpp bitor.hpp bitxor.hpp deque.hpp divides.hpp equal_to.hpp fold_impl.hpp full_lambda.hpp greater.hpp greater_equal.hpp inherit.hpp iter_fold_if_impl.hpp iter_fold_impl.hpp lambda_no_ctps.hpp less.hpp less_equal.hpp list.hpp list_c.hpp map.hpp minus.hpp modulus.hpp not_equal_to.hpp or.hpp placeholders.hpp plus.hpp quote.hpp reverse_fold_impl.hpp reverse_iter_fold_impl.hpp set.hpp set_c.hpp shift_left.hpp shift_right.hpp template_arity.hpp times.hpp unpack_args.hpp vector.hpp vector_c.hpp add.hpp default_params.hpp def_params_tail.hpp enum.hpp ext_params.hpp filter_params.hpp is_seq.hpp params.hpp partial_spec_params.hpp range.hpp repeat.hpp sub.hpp token_equal.hpp tuple.hpp push_back_impl.hpp push_front_impl.hpp reverse_fold_impl.hpp reverse_fold_impl_body.hpp sequence_wrapper.hpp size_impl.hpp static_cast.hpp template_arity.hpp template_arity_fwd.hpp traits_lambda_spec.hpp type_wrapper.hpp value_wknd.hpp yes_no.hpp back_fwd.hpp back_inserter.hpp begin.hpp begin_end.hpp begin_end_fwd.hpp bind.hpp bind_fwd.hpp bool.hpp bool_fwd.hpp clear.hpp clear_fwd.hpp comparison.hpp contains.hpp contains_fwd.hpp deref.hpp distance.hpp distance_fwd.hpp divides.hpp empty_base.hpp empty_fwd.hpp end.hpp equal_to.hpp eval_if.hpp find.hpp find_if.hpp fold.hpp front_fwd.hpp front_inserter.hpp greater.hpp greater_equal.hpp has_xxx.hpp identity.hpp if.hpp inherit.hpp inserter.hpp int.hpp integral_c.hpp integral_c_fwd.hpp integral_c_tag.hpp int_fwd.hpp is_placeholder.hpp is_sequence.hpp iterator_range.hpp iterator_tags.hpp iter_fold.hpp iter_fold_if.hpp lambda.hpp lambda_fwd.hpp less.hpp less_equal.hpp arity.hpp list.hpp unrolling.hpp vector.hpp begin_end.hpp clear.hpp empty.hpp front.hpp include_preprocessed.hpp item.hpp iterator.hpp numbered.hpp numbered_c.hpp O1_size.hpp pop_front.hpp list10.hpp list10_c.hpp list20.hpp list20_c.hpp list30.hpp list30_c.hpp list40.hpp list40_c.hpp list50.hpp list50_c.hpp push_back.hpp push_front.hpp size.hpp tag.hpp list0.hpp list0_c.hpp list10.hpp list10_c.hpp list20.hpp list20_c.hpp list30.hpp list30_c.hpp list40.hpp list40_c.hpp list50.hpp list50_c.hpp list.hpp logical.hpp long.hpp long_fwd.hpp minus.hpp multiplies.hpp negate.hpp next.hpp next_prior.hpp not.hpp not_equal_to.hpp numeric_cast.hpp O1_size.hpp O1_size_fwd.hpp or.hpp pair.hpp placeholders.hpp plus.hpp pop_back_fwd.hpp pop_front_fwd.hpp prior.hpp protect.hpp push_back.hpp push_back_fwd.hpp push_front.hpp push_front_fwd.hpp quote.hpp remove_if.hpp reverse_fold.hpp same_as.hpp sequence_tag.hpp sequence_tag_fwd.hpp size.hpp size_fwd.hpp size_t.hpp size_t_fwd.hpp tag.hpp times.hpp at.hpp back.hpp begin_end.hpp clear.hpp empty.hpp front.hpp include_preprocessed.hpp item.hpp iterator.hpp numbered.hpp numbered_c.hpp O1_size.hpp pop_back.hpp pop_front.hpp vector10.hpp vector10_c.hpp vector20.hpp vector20_c.hpp vector30.hpp vector30_c.hpp vector40.hpp vector40_c.hpp vector50.hpp vector50_c.hpp vector10.hpp vector10_c.hpp vector20.hpp vector20_c.hpp vector30.hpp vector30_c.hpp vector40.hpp vector40_c.hpp vector50.hpp vector50_c.hpp vector10.hpp vector10_c.hpp vector20.hpp vector20_c.hpp vector30.hpp vector30_c.hpp vector40.hpp vector40_c.hpp vector50.hpp vector50_c.hpp push_back.hpp push_front.hpp size.hpp tag.hpp vector0.hpp vector0.hpp vector0_c.hpp vector10.hpp vector10_c.hpp vector20.hpp vector20_c.hpp vector30.hpp vector30_c.hpp vector40.hpp vector40_c.hpp vector50.hpp vector50_c.hpp vector.hpp void.hpp void_fwd.hpp bounds.hpp cast.hpp conversion_traits.hpp converter.hpp converter_policies.hpp bounds.hpp conversion_traits.hpp converter.hpp int_float_mixture.hpp is_subranged.hpp meta.hpp numeric_cast_traits.hpp old_numeric_cast.hpp numeric_cast_traits_common.hpp numeric_cast_traits_long_long.hpp sign_mixture.hpp udt_builtin_mixture.hpp int_float_mixture_enum.hpp numeric_cast_traits.hpp sign_mixture_enum.hpp udt_builtin_mixture_enum.hpp bad_optional_access.hpp old_optional_implementation.hpp optional_aligned_storage.hpp optional_config.hpp optional_factory_support.hpp optional_reference_spec.hpp optional_relops.hpp optional_swap.hpp optional_trivially_copyable_base.hpp optional.hpp optional_fwd.hpp add.hpp dec.hpp div_base.hpp inc.hpp mod.hpp sub.hpp data.hpp elem.hpp size.hpp cat.hpp comma_if.hpp less.hpp less_equal.hpp not_equal.hpp config.hpp deduce_d.hpp while.hpp while.hpp while.hpp while.hpp expr_if.hpp expr_iif.hpp if.hpp iif.hpp while.hpp error.hpp dec.hpp auto_rec.hpp check.hpp auto_rec.hpp is_binary.hpp is_unary.hpp split.hpp empty.hpp enum.hpp enum_params.hpp enum_params_with_a_default.hpp enum_shifted_params.hpp expr_if.hpp is_empty.hpp empty.hpp expand.hpp identity.hpp intercept.hpp is_1.hpp is_empty.hpp is_empty_variadic.hpp overload.hpp identity.hpp if.hpp inc.hpp iterate.hpp lower1.hpp lower2.hpp lower3.hpp lower4.hpp lower5.hpp upper1.hpp upper2.hpp upper3.hpp upper4.hpp upper5.hpp finish.hpp forward1.hpp forward2.hpp forward3.hpp forward4.hpp forward5.hpp reverse1.hpp reverse2.hpp reverse3.hpp reverse4.hpp reverse5.hpp local.hpp rlocal.hpp self.hpp start.hpp iterate.hpp local.hpp self.hpp adt.hpp fold_left.hpp fold_left.hpp fold_right.hpp fold_left.hpp fold_right.hpp fold_left.hpp fold_right.hpp for_each_i.hpp reverse.hpp and.hpp bitand.hpp bitor.hpp bool.hpp compl.hpp not.hpp or.hpp comma.hpp comma_if.hpp is_begin_parens.hpp is_begin_parens.hpp paren.hpp repeat.hpp repeat_from_to.hpp for.hpp for.hpp for.hpp for.hpp enum.hpp enum_binary_params.hpp enum_params.hpp enum_params_with_a_default.hpp enum_shifted.hpp enum_shifted_params.hpp enum_trailing.hpp enum_trailing_params.hpp for.hpp repeat.hpp repeat_from_to.hpp cat.hpp is_empty.hpp split.hpp elem.hpp enum.hpp first_n.hpp fold_left.hpp for_each.hpp for_each_i.hpp push_front.hpp rest_n.hpp seq.hpp size.hpp subseq.hpp transform.hpp counter.hpp def.hpp shared.hpp slot1.hpp slot2.hpp slot3.hpp slot4.hpp slot5.hpp slot.hpp stringize.hpp is_single_return.hpp eat.hpp elem.hpp rem.hpp size.hpp to_list.hpp to_seq.hpp has_opt.hpp elem.hpp has_opt.hpp size.hpp to_seq.hpp equal.hpp begin.hpp concepts.hpp config.hpp const_iterator.hpp begin.hpp common.hpp end.hpp extract_optional_type.hpp has_member_size.hpp implementation_help.hpp misc_concept.hpp msvc_has_iterator_workaround.hpp safe_bool.hpp sfinae.hpp difference_type.hpp distance.hpp empty.hpp end.hpp functions.hpp has_range_iterator.hpp iterator.hpp iterator_range_core.hpp mutable_iterator.hpp range_fwd.hpp rbegin.hpp rend.hpp reverse_iterator.hpp size.hpp size_type.hpp value_type.hpp bad_weak_ptr.hpp lightweight_mutex.hpp local_counted_base.hpp local_sp_deleter.hpp lwm_nop.hpp lwm_pthreads.hpp lwm_win32_cs.hpp operator_bool.hpp quick_allocator.hpp shared_count.hpp spinlock.hpp spinlock_gcc_arm.hpp spinlock_nt.hpp spinlock_pool.hpp spinlock_pt.hpp spinlock_std_atomic.hpp spinlock_sync.hpp spinlock_w32.hpp sp_convertible.hpp sp_counted_base.hpp sp_counted_base_acc_ia64.hpp sp_counted_base_aix.hpp sp_counted_base_clang.hpp sp_counted_base_cw_ppc.hpp sp_counted_base_gcc_ia64.hpp sp_counted_base_gcc_mips.hpp sp_counted_base_gcc_ppc.hpp sp_counted_base_gcc_sparc.hpp sp_counted_base_gcc_x86.hpp sp_counted_base_nt.hpp sp_counted_base_pt.hpp sp_counted_base_snc_ps3.hpp sp_counted_base_spin.hpp sp_counted_base_std_atomic.hpp sp_counted_base_sync.hpp sp_counted_base_vacpp_ppc.hpp sp_counted_base_w32.hpp sp_counted_impl.hpp sp_disable_deprecated.hpp sp_has_sync.hpp sp_interlocked.hpp sp_noexcept.hpp sp_nullptr_t.hpp sp_typeinfo_.hpp yield_k.hpp shared_ptr.hpp tuple_basic.hpp tuple.hpp tuple_comparison.hpp constant.hpp decltype.hpp typeof_impl.hpp encode_decode.hpp encode_decode_params.hpp integral_template_param.hpp int_encoding.hpp message.hpp modifiers.hpp typeof_impl.hpp native.hpp pointers_data_members.hpp register_functions.hpp register_functions_iterate.hpp register_fundamental.hpp register_mem_functions.hpp template_encoding.hpp template_template_param.hpp typeof.hpp typeof_impl.hpp type_encoding.hpp type_template_param.hpp unsupported.hpp vector.hpp vector100.hpp vector150.hpp vector200.hpp vector50.hpp add_const.hpp add_cv.hpp add_lvalue_reference.hpp add_pointer.hpp add_reference.hpp add_rvalue_reference.hpp add_volatile.hpp alignment_of.hpp conditional.hpp conversion_traits.hpp cv_traits.hpp decay.hpp declval.hpp config.hpp detector.hpp has_binary_operator.hpp is_function_cxx_03.hpp is_function_cxx_11.hpp is_function_msvc10_fix.hpp is_function_ptr_helper.hpp is_function_ptr_tester.hpp is_likely_lambda.hpp is_member_function_pointer_cxx_03.hpp is_member_function_pointer_cxx_11.hpp is_mem_fun_pointer_impl.hpp is_mem_fun_pointer_tester.hpp is_rvalue_reference_msvc10_fix.hpp yes_no_type.hpp enable_if.hpp function_traits.hpp has_left_shift.hpp has_minus.hpp has_minus_assign.hpp has_nothrow_assign.hpp has_nothrow_constructor.hpp has_nothrow_copy.hpp has_plus.hpp has_plus_assign.hpp has_right_shift.hpp has_trivial_assign.hpp has_trivial_constructor.hpp has_trivial_copy.hpp has_trivial_move_assign.hpp has_trivial_move_constructor.hpp integral_constant.hpp intrinsics.hpp is_abstract.hpp is_arithmetic.hpp is_array.hpp is_assignable.hpp is_base_and_derived.hpp is_base_of.hpp is_class.hpp is_complete.hpp is_complex.hpp is_const.hpp is_constructible.hpp is_convertible.hpp is_copy_constructible.hpp is_default_constructible.hpp is_destructible.hpp is_detected.hpp is_empty.hpp is_enum.hpp is_float.hpp is_floating_point.hpp is_function.hpp is_fundamental.hpp is_integral.hpp is_lvalue_reference.hpp is_member_function_pointer.hpp is_member_pointer.hpp is_noncopyable.hpp is_nothrow_move_assignable.hpp is_nothrow_move_constructible.hpp is_pod.hpp is_pointer.hpp is_polymorphic.hpp is_reference.hpp is_rvalue_reference.hpp is_same.hpp is_scalar.hpp is_signed.hpp is_union.hpp is_unsigned.hpp is_void.hpp is_volatile.hpp make_signed.hpp make_unsigned.hpp make_void.hpp nonesuch.hpp remove_all_extents.hpp remove_bounds.hpp remove_const.hpp remove_cv.hpp remove_cv_ref.hpp remove_extent.hpp remove_pointer.hpp remove_reference.hpp remove_volatile.hpp type_identity.hpp type_with_alignment.hpp base_from_member.hpp binary.hpp compare_pointees.hpp declval.hpp result_of_iterate.hpp enable_if.hpp identity_type.hpp result_of.hpp swap.hpp config.py conversion.py cxxgen.py cxxtypes.py dist.py errors.py frontend.py graph.py interval.py intrinsic.py log.py magic.py metadata.py middlend.py openmp.py comprehension_patterns.py constant_folding.py dead_code_elimination.py forward_substitution.py inline_builtins.py inlining.py iter_transformation.py list_comp_to_genexp.py list_to_tuple.py loop_full_unrolling.py modindex.py pattern_transform.py range_based_simplify.py range_loop_unfolding.py remove_dead_functions.py simplify_except.py square.py tuple_to_shape.py __init__.py passmanager.py bisect.hpp bisect_left.hpp bisect_right.hpp abs.hpp all.hpp any.hpp ArithmeticError.hpp assert.hpp AssertionError.hpp AttributeError.hpp BaseException.hpp bin.hpp bool_.hpp BufferError.hpp BytesWarning.hpp chr.hpp conjugate.hpp complex.hpp DeprecationWarning.hpp clear.hpp copy.hpp fromkeys.hpp get.hpp items.hpp keys.hpp pop.hpp popitem.hpp setdefault.hpp update.hpp values.hpp dict.hpp divmod.hpp enumerate.hpp EnvironmentError.hpp EOFError.hpp Exception.hpp False.hpp close.hpp fileno.hpp flush.hpp isatty.hpp next.hpp read.hpp readline.hpp readlines.hpp seek.hpp tell.hpp truncate.hpp write.hpp writelines.hpp file.hpp FileNotFoundError.hpp filter.hpp FloatingPointError.hpp is_integer.hpp float_.hpp FutureWarning.hpp GeneratorExit.hpp getattr.hpp hex.hpp id.hpp ImportError.hpp ImportWarning.hpp in.hpp IndentationError.hpp IndexError.hpp int_.hpp IOError.hpp isinstance.hpp iter.hpp KeyboardInterrupt.hpp KeyError.hpp len.hpp append.hpp count.hpp extend.hpp insert.hpp pop.hpp remove.hpp reverse.hpp sort.hpp list.hpp LookupError.hpp map.hpp max.hpp MemoryError.hpp min.hpp minmax.hpp NameError.hpp next.hpp None.hpp NotImplementedError.hpp oct.hpp open.hpp ord.hpp OSError.hpp OverflowError.hpp PendingDeprecationWarning.hpp pow.hpp print.hpp abssqr.hpp and_.hpp is_none.hp",
        "setup.py": "from __future__ import print_function\n\n# Preliminary checks that cannot be done by setuptools\n# like... the setuptools dependency itself!\ntry:\nimport setuptools\nexcept ImportError:\nprint()\nprint(\"*****************************************************\")\nprint(\"* Setuptools must be installed before running setup *\")\nprint(\"*****************************************************\")\nprint()\nraise\n\nfrom setuptools.command.build_py import build_py\nfrom setuptools.command.develop import develop\n\nfrom setuptools import setup\n\nimport logging\nimport os\nimport shutil\nimport sys\n\n# It appears old versions of setuptools are not supported, see\n# https:\/\/github.com\/serge-sans-paille\/pythran\/issues\/489\n\nfrom distutils.version import LooseVersion\nMinimalSetuptoolsVersion = LooseVersion(\"12.0.5\")\nif LooseVersion(setuptools.__version__) < MinimalSetuptoolsVersion:\nmsg = \"Setuptools version is {}, but must be at least {}\".format(\nsetuptools.__version__,\nMinimalSetuptoolsVersion)\nprint()\nprint(\"*\" * (len(msg) + 4))\nprint(\"*\", msg, \"*\")\nprint(\"*\" * (len(msg) + 4))\nprint()\nraise ImportError(\"setuptools\")\n\nif sys.version_info.major < 3:\nprint()\nprint(\"****************************************************\")\nprint(\"* Python 2 has reached end-of-support *\")\nprint(\"****************************************************\")\nprint(\"* *\")\nprint(\"* Last Pythran version supporting Python2 is 0.9.5 *\")\nprint(\"* *\")\nprint(\"****************************************************\")\nprint()\n\n\nlogger = logging.getLogger(\"pythran\")\nlogger.addHandler(logging.StreamHandler())\n\nversionfile = os.path.join('pythran', 'version.py')\nexec(open(versionfile).read())\n\n\nclass BuildWithThirdParty(build_py):\n\n\"\"\"\nSet up Pythran dependencies.\n\n* install boost dependencies\n* install xsimd dependencies\n\"\"\"\n\nthird_parties = 'boost', 'xsimd'\n\nuser_options = build_py.user_options + [\n('no-{}'.format(pkg), None, 'Do not distribute {} headers'.format(pkg))\nfor pkg in third_parties\n]\n\ndef initialize_options(self):\nbuild_py.initialize_options(self)\nfor pkg in BuildWithThirdParty.third_parties:\nsetattr(self, 'no_' + pkg, None)\n\ndef copy_pkg(self, pkg, src_only=False):\n\"Install boost deps from the third_party directory\"\n\nif getattr(self, 'no_' + pkg) is None:\nprint('Copying', pkg, 'dependencies')\nto_copy = pkg,\nelse:\nreturn\n\nsrc = os.path.join('third_party', *to_copy)\n\n# copy to the build tree\nif not src_only:\ntarget = os.path.join(self.build_lib, 'pythran', *to_copy)\nshutil.rmtree(target, True)\nshutil.copytree(src, target)\n\n# copy them to the source tree too, needed for sdist\ntarget = os.path.join('pythran', *to_copy)\nshutil.rmtree(target, True)\nshutil.copytree(src, target)\n\ndef run(self, *args, **kwargs):\n# regular build done by parent class\nbuild_py.run(self, *args, **kwargs)\nif not self.dry_run: # compatibility with the parent options\nfor pkg in BuildWithThirdParty.third_parties:\nself.copy_pkg(pkg)\n\n\nclass DevelopWithThirdParty(develop, BuildWithThirdParty):\n\ndef initialize_options(self):\ndevelop.initialize_options(self)\nBuildWithThirdParty.initialize_options(self)\n\ndef run(self, *args, **kwargs):\nif not self.dry_run: # compatibility with the parent options\nfor pkg in BuildWithThirdParty.third_parties:\nself.copy_pkg(pkg, src_only=True)\ndevelop.run(self, *args, **kwargs)\n\n\n# Cannot use glob here, as the files may not be generated yet\nboost_headers = ['boost\/' + '*\/' * i + '*.hpp' for i in range(1, 20)]\nxsimd_headers = ['xsimd\/' + '*\/' * i + '*.hpp' for i in range(1, 20)]\npythonic_headers = ['*\/' * i + '*.hpp' for i in range(9)] + ['patch\/*']\n\n\n# read longdescr from README\ndef longdescr(readme_path):\nwith open(readme_path) as readme:\nlines = list(readme)\nstart_index = lines.index('What is it?\\n')\nstop_index = lines.index('Installation\\n')\nlong_description = \"\".join(lines[start_index + 2: stop_index])\nreturn long_description\n\n\nsetup(name='pythran',\nversion=__version__,\ndescription=__descr__,\nlong_description=longdescr(\"README.rst\"),\nauthor='Serge Guelton',\nauthor_email='serge.guelton@telecom-bretagne.eu',\nurl=__url__,\npackages=['pythran', 'pythran.analyses', 'pythran.transformations',\n'pythran.optimizations', 'omp', 'pythran\/pythonic',\n'pythran.types'],\npackage_data={'pythran': (['pythran*.cfg']\n+ boost_headers\n+ xsimd_headers),\n'pythran\/pythonic': pythonic_headers},\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Natural Language :: English',\n'Operating System :: POSIX :: Linux',\n'Operating System :: MacOS',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: C++',\n'Topic :: Software Development :: Compilers',\n'Topic :: Software Development :: Code Generators'\n],\nlicense=\"BSD 3-Clause\",\ninstall_requires=open('requirements.txt').read().splitlines(),\nentry_points={'console_scripts':\n['pythran = pythran.run:run',\n'pythran-config = pythran.config:run']},\nextras_require={\n'doc': open('docs\/requirements.txt').read().splitlines(),\n},\ntest_suite=\"pythran.tests.test_cases\",\ncmdclass={'build_py': BuildWithThirdParty,\n'develop': DevelopWithThirdParty})\n"
    },
    {
        "package_name": "pytricia-1.0.2",
        "file_list": "COPYING.LESSER MANIFEST.in patricia.c patricia.h PKG-INFO pytricia.c dependency_links.txt PKG-INFO SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "#\n# This file is part of Pytricia.\n# Joel Sommers <jsommers@colgate.edu>\n# \n# Pytricia is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU Lesser General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n# \n# Pytricia is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Lesser General Public License for more details.\n# \n# You should have received a copy of the GNU Lesser General Public License\n# along with Pytricia. If not, see <http:\/\/www.gnu.org\/licenses\/>.\n#\n\nfrom setuptools import setup, Extension\nsetup(name=\"pytricia\", \nversion=\"1.0.2\",\ndescription=\"An efficient IP address storage and lookup module for Python.\",\nauthor=\"Joel Sommers\",\nauthor_email=\"jsommers@acm.org\",\nurl=\"https:\/\/github.com\/jsommers\/pytricia\",\n# download_url=\"http:\/\/cs.colgate.edu\/~jsommers\/downloads\/pytricia-0.1.tar.gz\",\nkeywords=['patricia tree','IP addresses'],\nclassifiers=[\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 3\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)\",\n\"Operating System :: OS Independent\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Topic :: Internet :: Log Analysis\",\n\"Topic :: Scientific\/Engineering\",\n],\next_modules=[\nExtension(\"pytricia\", [\"pytricia.c\",\"patricia.c\"]),\n],\nlong_description='''\nPytricia is a Python module to store IP prefixes in a\npatricia tree. It's based on Dave Plonka's modified patricia tree\ncode, and has three things to recommend it over related modules\n(including py-radix and SubnetTree):\n\n* it's faster,\n\n* it works nicely in Python 3, and\n\n* there are a few nicer library features for manipulating the structure.\n\nSee the github repo for documentation and some performance numbers: <https:\/\/github.com\/jsommers\/pytricia>.\n\nPytricia is released under terms of the GNU Lesser General Public License,\nversion 3.\n'''\n)\n"
    },
    {
        "package_name": "pyts-0.12.0",
        "file_list": "LICENSE.txt MANIFEST.in PKG-INFO dft.py mcb.py paa.py sax.py sfa.py test_dft.py test_mcb.py test_paa.py test_sax.py test_sfa.py __init__.py __init__.py bow.py test_bow.py __init__.py __init__.py base.py bossvs.py knn.py learning_shapelets.py saxvsm.py test_bossvs.py test_knn.py test_learning_shapelets.py test_saxvsm.py test_time_series_forest.py test_tsbf.py __init__.py time_series_forest.py tsbf.py __init__.py Coffee.txt Coffee_TEST.txt Coffee_TRAIN.txt GunPoint.txt GunPoint_TEST.txt GunPoint_TRAIN.txt PigCVP.txt PigCVP_TEST.txt PigCVP_TRAIN.txt BasicMotions.txt BasicMotions_TEST.arff BasicMotions_TRAIN.arff ucr.pickle uea.pickle load.py make.py test_load.py test_make.py test_ucr.py test_uea.py __init__.py ucr.py uea.py __init__.py ssa.py test_ssa.py __init__.py __init__.py gaf.py mtf.py recurrence.py test_gaf.py test_mtf.py test_recurrence.py __init__.py __init__.py boss.py dtw.py lower_bounds.py test_boss.py test_dtw.py test_lower_bounds.py __init__.py __init__.py multivariate.py test_multivariate.py __init__.py __init__.py joint_rp.py test_joint_rp.py __init__.py __init__.py __init__.py multivariate.py test_multivariate.py test_weasel_muse.py __init__.py weasel_muse.py __init__.py test_utils.py __init__.py utils.py __init__.py __init__.py discretizer.py imputer.py scaler.py test_discretizer.py test_imputer.py test_scaler.py test_transformer.py __init__.py transformer.py __init__.py test_base.py __init__.py bag_of_patterns.py boss.py rocket.py shapelet_transform.py test_bag_of_patterns.py test_boss.py test_rocket.py test_shapelet_transform.py test_weasel.py __init__.py weasel.py __init__.py deprecation.py test_deprecation.py test_segmentation.py test_windowed_view.py __init__.py utils.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.md requirements.txt setup.cfg setup.py",
        "setup.py": "\"\"\"A python package for time series classification.\"\"\"\n\nimport pyts\nfrom setuptools import find_packages, setup\n\n\nDISTNAME = 'pyts'\nDESCRIPTION = 'A python package for time series classification'\nwith open('README.md') as f:\nLONG_DESCRIPTION = f.read()\nLONG_DESCRIPTION_CONTENT_TYPE = 'text\/markdown'\nMAINTAINER = 'Johann Faouzi'\nMAINTAINER_EMAIL = 'johann.faouzi@gmail.com'\nURL = 'https:\/\/github.com\/johannfaouzi\/pyts'\nLICENSE = 'new BSD'\nDOWNLOAD_URL = 'https:\/\/github.com\/johannfaouzi\/pyts'\nVERSION = pyts.__version__\nINSTALL_REQUIRES = ['numpy>=1.17.5',\n'scipy>=1.3.0',\n'scikit-learn>=0.22.1',\n'joblib>=0.12',\n'numba>=0.48.0']\nCLASSIFIERS = ['Development Status :: 3 - Alpha',\n'Intended Audience :: Science\/Research',\n'Intended Audience :: Developers',\n'License :: OSI Approved',\n'Programming Language :: Python',\n'Topic :: Software Development',\n'Topic :: Scientific\/Engineering',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: POSIX',\n'Operating System :: Unix',\n'Operating System :: MacOS',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9']\nEXTRAS_REQUIRE = {\n'tests': [\n'pytest',\n'pytest-cov'],\n'docs': [\n'docutils==0.14',\n'sphinx==1.8.5',\n'sphinx-gallery',\n'numpydoc',\n'matplotlib'\n]\n}\nPACKAGE_DATA = {\n'pyts': ['datasets\/cached_datasets\/UCR\/Coffee\/*.txt',\n'datasets\/cached_datasets\/UCR\/GunPoint\/*.txt',\n'datasets\/cached_datasets\/UCR\/PigCVP\/*.txt',\n'datasets\/cached_datasets\/UEA\/BasicMotions\/*.arff',\n'datasets\/cached_datasets\/UEA\/BasicMotions\/*.txt',\n'datasets\/info\/*.pickle']\n}\n\nsetup(name=DISTNAME,\nmaintainer=MAINTAINER,\nmaintainer_email=MAINTAINER_EMAIL,\ndescription=DESCRIPTION,\nlicense=LICENSE,\nurl=URL,\nversion=VERSION,\ndownload_url=DOWNLOAD_URL,\nlong_description=LONG_DESCRIPTION,\nlong_description_content_type=LONG_DESCRIPTION_CONTENT_TYPE,\nzip_safe=False,\nclassifiers=CLASSIFIERS,\npackages=find_packages(),\npackage_data=PACKAGE_DATA,\ninstall_requires=INSTALL_REQUIRES,\nextras_require=EXTRAS_REQUIRE)\n"
    },
    {
        "package_name": "pytube-12.1.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO captions.py cipher.py cli.py channel.py playlist.py search.py __init__.py exceptions.py extract.py helpers.py innertube.py itags.py metadata.py monostate.py parser.py query.py request.py streams.py version.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt zip-safe README.md setup.cfg setup.py conftest.py test_channel.py test_playlist.py test_captions.py test_cipher.py test_cli.py test_exceptions.py test_extract.py test_helpers.py test_itags.py test_main.py test_metadata.py test_parser.py test_query.py test_request.py test_streams.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\"\"\"This module contains setup instructions for pytube.\"\"\"\nimport codecs\nimport os\n\nfrom setuptools import setup\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith codecs.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as fh:\nlong_description = \"\\n\" + fh.read()\n\nwith open(os.path.join(here, \"pytube\", \"version.py\")) as fp:\nexec(fp.read())\n\nsetup(\nname=\"pytube\",\nversion=__version__, # noqa: F821\nauthor=\"Ronnie\u00a0Ghose, Taylor Fox Dahlin, Nick Ficano\",\nauthor_email=\"hey@pytube.io\",\npackages=[\"pytube\", \"pytube.contrib\"],\npackage_data={\"\": [\"LICENSE\"],},\nurl=\"https:\/\/github.com\/pytube\/pytube\",\nlicense=\"The Unlicense (Unlicense)\",\nentry_points={\n\"console_scripts\": [\n\"pytube = pytube.cli:main\"],},\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Console\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: The Unlicense (Unlicense)\",\n\"Natural Language :: English\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python\",\n\"Topic :: Internet\",\n\"Topic :: Multimedia :: Video\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Topic :: Terminals\",\n\"Topic :: Utilities\",\n],\ndescription=(\"Python 3 library for downloading YouTube Videos.\"),\ninclude_package_data=True,\nlong_description_content_type=\"text\/markdown\",\nlong_description=long_description,\nzip_safe=True,\npython_requires=\">=3.6\",\nproject_urls={\n\"Bug Reports\": \"https:\/\/github.com\/pytube\/pytube\/issues\",\n\"Read the Docs\": \"https:\/\/pytube.io\",\n},\nkeywords=[\"youtube\", \"download\", \"video\", \"stream\",],\n)\n"
    },
    {
        "package_name": "pytzdata-2020.1",
        "file_list": "LICENSE PKG-INFO pyproject.toml app.py make.py zones.py __init__.py exceptions.py version.py Abidjan Accra Addis_Ababa Algiers Asmara Asmera Bamako Bangui Banjul Bissau Blantyre Brazzaville Bujumbura Cairo Casablanca Ceuta Conakry Dakar Dar_es_Salaam Djibouti Douala El_Aaiun Freetown Gaborone Harare Johannesburg Juba Kampala Khartoum Kigali Kinshasa Lagos Libreville Lome Luanda Lubumbashi Lusaka Malabo Maputo Maseru Mbabane Mogadishu Monrovia Nairobi Ndjamena Niamey Nouakchott Ouagadougou Porto-Novo Sao_Tome Timbuktu Tripoli Tunis Windhoek Adak Anchorage Anguilla Antigua Araguaina Buenos_Aires Catamarca ComodRivadavia Cordoba Jujuy La_Rioja Mendoza Rio_Gallegos Salta San_Juan San_Luis Tucuman Ushuaia Aruba Asuncion Atikokan Atka Bahia Bahia_Banderas Barbados Belem Belize Blanc-Sablon Boa_Vista Bogota Boise Buenos_Aires Cambridge_Bay Campo_Grande Cancun Caracas Catamarca Cayenne Cayman Chicago Chihuahua Coral_Harbour Cordoba Costa_Rica Creston Cuiaba Curacao Danmarkshavn Dawson Dawson_Creek Denver Detroit Dominica Edmonton Eirunepe El_Salvador Ensenada Fortaleza Fort_Nelson Fort_Wayne Glace_Bay Godthab Goose_Bay Grand_Turk Grenada Guadeloupe Guatemala Guayaquil Guyana Halifax Havana Hermosillo Indianapolis Knox Marengo Petersburg Tell_City Vevay Vincennes Winamac Indianapolis Inuvik Iqaluit Jamaica Jujuy Juneau Louisville Monticello Knox_IN Kralendijk La_Paz Lima Los_Angeles Louisville Lower_Princes Maceio Managua Manaus Marigot Martinique Matamoros Mazatlan Mendoza Menominee Merida Metlakatla Mexico_City Miquelon Moncton Monterrey Montevideo Montreal Montserrat Nassau New_York Nipigon Nome Noronha Beulah Center New_Salem Nuuk Ojinaga Panama Pangnirtung Paramaribo Phoenix Port-au-Prince Porto_Acre Porto_Velho Port_of_Spain Puerto_Rico Punta_Arenas Rainy_River Rankin_Inlet Recife Regina Resolute Rio_Branco Rosario Santarem Santa_Isabel Santiago Santo_Domingo Sao_Paulo Scoresbysund Shiprock Sitka St_Barthelemy St_Johns St_Kitts St_Lucia St_Thomas St_Vincent Swift_Current Tegucigalpa Thule Thunder_Bay Tijuana Toronto Tortola Vancouver Virgin Whitehorse Winnipeg Yakutat Yellowknife Casey Davis DumontDUrville Macquarie Mawson McMurdo Palmer Rothera South_Pole Syowa Troll Vostok Longyearbyen Aden Almaty Amman Anadyr Aqtau Aqtobe Ashgabat Ashkhabad Atyrau Baghdad Bahrain Baku Bangkok Barnaul Beirut Bishkek Brunei Calcutta Chita Choibalsan Chongqing Chungking Colombo Dacca Damascus Dhaka Dili Dubai Dushanbe Famagusta Gaza Harbin Hebron Hong_Kong Hovd Ho_Chi_Minh Irkutsk Istanbul Jakarta Jayapura Jerusalem Kabul Kamchatka Karachi Kashgar Kathmandu Katmandu Khandyga Kolkata Krasnoyarsk Kuala_Lumpur Kuching Kuwait Macao Macau Magadan Makassar Manila Muscat Nicosia Novokuznetsk Novosibirsk Omsk Oral Phnom_Penh Pontianak Pyongyang Qatar Qostanay Qyzylorda Rangoon Riyadh Saigon Sakhalin Samarkand Seoul Shanghai Singapore Srednekolymsk Taipei Tashkent Tbilisi Tehran Tel_Aviv Thimbu Thimphu Tokyo Tomsk Ujung_Pandang Ulaanbaatar Ulan_Bator Urumqi Ust-Nera Vientiane Vladivostok Yakutsk Yangon Yekaterinburg Yerevan Azores Bermuda Canary Cape_Verde Faeroe Faroe Jan_Mayen Madeira Reykjavik South_Georgia Stanley St_Helena ACT Adelaide Brisbane Broken_Hill Canberra Currie Darwin Eucla Hobart LHI Lindeman Lord_Howe Melbourne North NSW Perth Queensland South Sydney Tasmania Victoria West Yancowinna Acre DeNoronha East West Atlantic Central Eastern Mountain Newfoundland Pacific Saskatchewan Yukon CET Continental EasterIsland CST6CDT Cuba EET Egypt Eire EST EST5EDT GMT GMT+0 GMT+1 GMT+10 GMT+11 GMT+12 GMT+2 GMT+3 GMT+4 GMT+5 GMT+6 GMT+7 GMT+8 GMT+9 GMT-0 GMT-1 GMT-10 GMT-11 GMT-12 GMT-13 GMT-14 GMT-2 GMT-3 GMT-4 GMT-5 GMT-6 GMT-7 GMT-8 GMT-9 GMT0 Greenwich UCT Universal UTC Zulu Amsterdam Andorra Astrakhan Athens Belfast Belgrade Berlin Bratislava Brussels Bucharest Budapest Busingen Chisinau Copenhagen Dublin Gibraltar Guernsey Helsinki Isle_of_Man Istanbul Jersey Kaliningrad Kiev Kirov Lisbon Ljubljana London Luxembourg Madrid Malta Mariehamn Minsk Monaco Moscow Nicosia Oslo Paris Podgorica Prague Riga Rome Samara San_Marino Sarajevo Saratov Simferopol Skopje Sofia Stockholm Tallinn Tirane Tiraspol Ulyanovsk Uzhgorod Vaduz Vatican Vienna Vilnius Volgograd Warsaw Zagreb Zaporozhye Zurich Factory GB GB-Eire GMT GMT+0 GMT-0 GMT0 Greenwich Hongkong HST Iceland Antananarivo Chagos Christmas Cocos Comoro Kerguelen Mahe Maldives Mauritius Mayotte Reunion Iran iso3166.tab Israel Jamaica Japan Kwajalein leapseconds Libya MET BajaNorte BajaSur General MST MST7MDT Navajo NZ NZ-CHAT Apia Auckland Bougainville Chatham Chuuk Easter Efate Enderbury Fakaofo Fiji Funafuti Galapagos Gambier Guadalcanal Guam Honolulu Johnston Kiritimati Kosrae Kwajalein Majuro Marquesas Midway Nauru Niue Norfolk Noumea Pago_Pago Palau Pitcairn Pohnpei Ponape Port_Moresby Rarotonga Saipan Samoa Tahiti Tarawa Tongatapu Truk Wake Wallis Yap Poland Portugal posixrules PRC PST8PDT ROC ROK Singapore Turkey tzdata.zi UCT Universal Alaska Aleutian Arizona Central East-Indiana Eastern Hawaii Indiana-Starke Michigan Mountain Pacific Samoa UTC W-SU WET zone.tab zone1970.tab Zulu _compat.py _timezones.py __init__.py README.rst setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['pytzdata', 'pytzdata.commands']\n\npackage_data = \\\n{'': ['*'],\n'pytzdata': ['zoneinfo\/*',\n'zoneinfo\/Africa\/*',\n'zoneinfo\/America\/*',\n'zoneinfo\/America\/Argentina\/*',\n'zoneinfo\/America\/Indiana\/*',\n'zoneinfo\/America\/Kentucky\/*',\n'zoneinfo\/America\/North_Dakota\/*',\n'zoneinfo\/Antarctica\/*',\n'zoneinfo\/Arctic\/*',\n'zoneinfo\/Asia\/*',\n'zoneinfo\/Atlantic\/*',\n'zoneinfo\/Australia\/*',\n'zoneinfo\/Brazil\/*',\n'zoneinfo\/Canada\/*',\n'zoneinfo\/Chile\/*',\n'zoneinfo\/Etc\/*',\n'zoneinfo\/Europe\/*',\n'zoneinfo\/Indian\/*',\n'zoneinfo\/Mexico\/*',\n'zoneinfo\/Pacific\/*',\n'zoneinfo\/US\/*']}\n\nsetup_kwargs = {\n'name': 'pytzdata',\n'version': '2020.1',\n'description': 'The Olson timezone database for Python.',\n'long_description': \"Pytzdata\\n########\\n\\n.. image:: https:\/\/travis-ci.org\/sdispater\/pytzdata.png\\n :alt: Pytzdata Build status\\n :target: https:\/\/travis-ci.org\/sdispater\/pytzdata\\n\\nThe Olson timezone database for Python.\\n\\nSupports Python **2.7+** and **3.5+**.\\n\\n\\nInstallation\\n============\\n\\n pip install pytzdata\\n\\n\\nUsage\\n=====\\n\\nYou can access the content of a specific timezone file by using the `tz_file()` function:\\n\\n.. code-block:: python\\n\\n from pytzdata import tz_file\\n\\n with tz_file('Europe\/Paris') as f:\\n # Do something with the file\\n\\nIf you just want to know the path to a specific timezone file, you may use the `tz_path()` function:\\n\\n.. code-block:: python\\n\\n from pytzdata import tz_path\\n\\n tz_path('Europe\/Paris')\\n\\nBy default, ``pytzdata`` will use the bundled timezone database, however you can set\\na custom directory that holds the timezone files using the ``set_directory`` function:\\n\\n.. code-block:: python\\n\\n import pytzdata\\n\\n pytzdata.set_directory('\/custom\/zoneinfo')\\n\\nYou can also set the ``PYTZDATA_TZDATADIR`` environment variable to set a custom directory.\\n\\n\\nRelease\\n=======\\n\\nTo make a new release just follow these steps:\\n\\n- ``make data``\\n- Update version numbers in ``pytzdata\/version.py`` and ``tests\/test_version.py``\\n- ``make tox``\\n\\n\\nResources\\n=========\\n\\n* `Issue Tracker <https:\/\/github.com\/sdispater\/pytzdata\/issues>`_\\n\",\n'author': 'S\u00e9bastien Eustace',\n'author_email': 'sebastien@eustace.io',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/sdispater\/pytzdata',\n'packages': packages,\n'package_data': package_data,\n'python_requires': '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "pyvim-3.0.3",
        "file_list": "LICENSE PKG-INFO commands.py completer.py grammar.py handler.py lexer.py preview.py __init__.py completion.py editor.py editor_buffer.py run_pyvim.py __init__.py enums.py help.py backends.py base.py __init__.py key_bindings.py layout.py lexer.py rc_file.py reporting.py style.py welcome_message.py window_arrangement.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nimport os\nfrom setuptools import setup, find_packages\nimport pyvim\n\nwith open(os.path.join(os.path.dirname(__file__), 'README.rst')) as f:\nlong_description = f.read()\n\n\nsetup(\nname='pyvim',\nauthor='Jonathan Slenders',\nversion=pyvim.__version__,\nlicense='BSD License',\nurl='https:\/\/github.com\/jonathanslenders\/pyvim',\ndescription='Pure Python Vi Implementation',\nlong_description=long_description,\npackages=find_packages('.'),\ninstall_requires = [\n'prompt_toolkit>=2.0.0,<3.1.0',\n'six',\n'pyflakes', # For Python error reporting.\n'pygments', # For the syntax highlighting.\n'docopt', # For command line arguments.\n],\nentry_points={\n'console_scripts': [\n'pyvim = pyvim.entry_points.run_pyvim:run',\n]\n},\n)\n"
    },
    {
        "package_name": "PyVirtualDisplay-3.0",
        "file_list": "LICENSE.txt MANIFEST.in PKG-INFO about.py abstractdisplay.py display.py headless.py lowres.py nested.py screenshot.py threadsafe.py vncserver.py __init__.py py.typed smartdisplay.py util.py xauth.py xephyr.py xvfb.py xvnc.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt README.md setup.cfg setup.py slowgui.py test_core.py test_examples.py test_race.py test_smart.py test_smart2.py test_smart_thread.py test_threads.py test_with.py test_xauth.py test_xvnc.py tutil.py vagrant_boxes.py",
        "setup.py": "import os.path\n\nfrom setuptools import setup\n\nNAME = \"pyvirtualdisplay\"\n\n# get __version__\n__version__ = None\nexec(open(os.path.join(NAME, \"about.py\")).read())\nVERSION = __version__\n\nPYPI_NAME = \"PyVirtualDisplay\"\nURL = \"https:\/\/github.com\/ponty\/pyvirtualdisplay\"\nDESCRIPTION = \"python wrapper for Xvfb, Xephyr and Xvnc\"\nLONG_DESCRIPTION = \"\"\"pyvirtualdisplay is a python wrapper for Xvfb, Xephyr and Xvnc\n\nDocumentation: https:\/\/github.com\/ponty\/pyvirtualdisplay\/tree\/\"\"\"\nLONG_DESCRIPTION += VERSION\nPACKAGES = [\nNAME,\nNAME + \".examples\",\n]\n\n\nclassifiers = [\n# Get more strings from\n# http:\/\/www.python.org\/pypi?%3Aaction=list_classifiers\n\"License :: OSI Approved :: BSD License\",\n\"Natural Language :: English\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n]\n\n\nsetup(\nname=PYPI_NAME,\nversion=VERSION,\ndescription=DESCRIPTION,\nlong_description=LONG_DESCRIPTION,\nlong_description_content_type=\"text\/x-rst\",\nclassifiers=classifiers,\nkeywords=\"Xvfb Xephyr X wrapper\",\nauthor=\"ponty\",\n# author_email='',\nurl=URL,\nlicense=\"BSD\",\npackages=PACKAGES,\n# install_requires=install_requires,\npackage_data={\nNAME: [\"py.typed\"],\n},\n)\n"
    },
    {
        "package_name": "pywatchman-1.4.1",
        "file_list": "watchman-make watchman-wait PKG-INFO bser.c capabilities.py compat.py encoding.py load.py pybser.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# vim:ts=4:sw=4:et:\n\ntry:\nfrom setuptools import setup, Extension\nexcept:\nfrom distutils.core import setup, Extension\n\nsetup(\nname = 'pywatchman',\nversion = '1.4.1',\ndescription = 'Watchman client for python',\nauthor = 'Wez Furlong, Siddharth Agarwal',\nauthor_email = 'wez@fb.com',\nmaintainer = 'Wez Furlong',\nmaintainer_email = 'wez@fb.com',\nurl = 'https:\/\/github.com\/facebook\/watchman',\nlong_description = 'Connect and query Watchman to discover file changes',\nkeywords = (\n'watchman inotify fsevents kevent kqueue portfs filesystem watcher'\n),\nlicense = 'BSD',\npackages = ['pywatchman'],\next_modules = [\nExtension('pywatchman.bser', sources = ['pywatchman\/bser.c'])\n],\nplatforms = 'Platform Independent',\nclassifiers = [\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Topic :: System :: Filesystems',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n],\nzip_safe = True,\nscripts=['bin\/watchman-wait', 'bin\/watchman-make'],\ntest_suite = 'tests',\n)\n"
    },
    {
        "package_name": "pyxero-0.9.3",
        "file_list": "ChangeLog.rst index.html README.md runserver.py verified.html index.html README.md runserver.py verified.html receipts.csv receipts.py LICENSE MANIFEST.in PKG-INFO dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py auth.py exceptions.py manager.py mock_data.py utils.py __init__.py tox.ini api.py auth.py basemanager.py constants.py exceptions.py filesmanager.py manager.py payrollmanager.py projectmanager.py utils.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\nimport io\nimport re\n\nfrom setuptools import setup\n\nwith io.open('.\/xero\/__init__.py', encoding='utf8') as version_file:\nversion_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", version_file.read(), re.M)\nif version_match:\nversion = version_match.group(1)\nelse:\nraise RuntimeError(\"Unable to find version string.\")\n\n\nwith io.open('README.md', encoding='utf8') as readme:\nlong_description = readme.read()\n\n\nsetup(\nname='pyxero',\nversion=version,\ndescription='Python API for accessing the REST API of the Xero accounting tool.',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nauthor='Russell Keith-Magee',\nauthor_email='russell@keith-magee.com',\nurl='http:\/\/github.com\/freakboy3742\/pyxero',\npackages=['xero', ],\ninstall_requires=[\n'six>=1.8.0',\n'requests>=1.1.0',\n'requests-oauthlib>=0.3.0',\n'python-dateutil>=2.8',\n'PyJWT>=1.6.4', # This is required as part of oauthlib but doesn't seem to get included sometimes.\n'cryptography>=1.3.1', # As above, but fixes issue with missing module imports not picked up for some reason.\n],\ntests_require=[\n'mock',\n],\nlicense='New BSD',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Environment :: Web Environment',\n'Intended Audience :: Financial and Insurance Industry',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Topic :: Office\/Business :: Financial :: Accounting',\n],\ntest_suite=\"tests\",\n)\n"
    },
    {
        "package_name": "pyzipcode-3.0.1",
        "file_list": ".pre-commit-config.yaml CHANGES.md MANIFEST.in PKG-INFO import_zipcodes.py settings.py zipcodes.db __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt README.md setup.cfg setup.py VERSION",
        "setup.py": "from setuptools import setup, find_packages\n\nsetup(\nname=\"pyzipcode\",\nversion=open(\"VERSION\").read().strip(),\ndescription=\"query zip codes and location data\",\nlong_description=open(\"README.md\").read() + \"\\n\\n\" + open(\"CHANGES.md\").read(),\nlong_description_content_type='text\/markdown',\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n],\nkeywords=\"zip code distance\",\nauthor=\"Nathan Van Gheem\",\nauthor_email=\"vangheem@gmail.com\",\nurl=\"https:\/\/github.com\/vangheem\/pyzipcode\",\nlicense=\"MIT\",\npackages=find_packages(exclude=[\"ez_setup\", \"examples\", \"tests\"]),\ninclude_package_data=True,\nzip_safe=False,\ninstall_requires=[],\npython_requires='>=3.6',\nentry_points=\"\"\"\n# -*- Entry points: -*-\n\"\"\",\n)\n"
    },
    {
        "package_name": "pyzipper-0.3.6",
        "file_list": "LICENSE MANIFEST.in PKG-INFO zipfile.py zipfile_aes.py __init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n# $ pip install twine\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\n\nfrom setuptools import find_packages, setup, Command\n\n# Package meta-data.\nNAME = 'pyzipper'\nDESCRIPTION = 'AES encryption for zipfile.'\nURL = 'https:\/\/github.com\/danifus\/pyzipper'\nEMAIL = 'daniel.hillier@gmail.com'\nAUTHOR = 'Daniel Hillier'\nREQUIRES_PYTHON = '>=3.4'\nVERSION = None\n\n# What packages are required for this module to be executed?\nREQUIRED = [\n'pycryptodomex',\n]\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.rst' is present in your MANIFEST.in file!\nwith io.open(os.path.join(here, 'README.rst'), encoding='utf-8') as f:\nlong_description = '\\n' + f.read()\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nif not VERSION:\nwith open(os.path.join(here, 'pyzipper', '__version__.py')) as f:\nexec(f.read(), about)\nelse:\nabout['__version__'] = VERSION\n\n\nclass UploadCommand(Command):\n\"\"\"Support setup.py upload.\"\"\"\n\ndescription = 'Build and publish the package.'\nuser_options = []\n\n@staticmethod\ndef status(s):\n\"\"\"Prints things in bold.\"\"\"\nprint('\\033[1m{0}\\033[0m'.format(s))\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\ntry:\nself.status('Removing previous builds\u2026')\nrmtree(os.path.join(here, 'dist'))\nexcept OSError:\npass\n\nself.status('Building Source and Wheel (universal) distribution\u2026')\nos.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\nself.status('Uploading the package to PyPi via Twine\u2026')\nos.system('twine upload dist\/*')\n\nself.status('Pushing git tags\u2026')\nos.system('git tag v{0}'.format(about['__version__']))\nos.system('git push --tags')\n\nsys.exit()\n\n\n# Where the magic happens:\nsetup(\nname=NAME,\nversion=about['__version__'],\ndescription=DESCRIPTION,\nlong_description=long_description,\nauthor=AUTHOR,\nauthor_email=EMAIL,\nkeywords=\"zip aes encrypt decrypt\",\npython_requires=REQUIRES_PYTHON,\nurl=URL,\npackages=find_packages(exclude=('test', 'docs')),\ninstall_requires=REQUIRED,\ninclude_package_data=True,\nlicense='MIT',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Topic :: System :: Archiving :: Compression',\n'Intended Audience :: Developers',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: POSIX :: Linux',\n'Operating System :: POSIX',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n],\n# $ setup.py publish support.\ncmdclass={\n'upload': UploadCommand,\n},\n)\n"
    },
    {
        "package_name": "qiniu-7.9.0",
        "file_list": "LICENSE PKG-INFO auth.py compat.py config.py http.py main.py region.py manager.py __init__.py app.py config.py qcos_api.py __init__.py rtc_server_manager.py __init__.py cmd.py pfop.py __init__.py sms.py __init__.py bucket.py uploader.py upload_progress_recorder.py __init__.py __init__.py utils.py zone.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport io\nimport os\nimport re\n\ntry:\nimport setuptools\n\nsetup = setuptools.setup\nexcept ImportError:\nsetuptools = None\nfrom distutils.core import setup\n\npackages = [\n'qiniu',\n'qiniu.services',\n'qiniu.services.storage',\n'qiniu.services.processing',\n'qiniu.services.compute',\n'qiniu.services.cdn',\n'qiniu.services.sms',\n'qiniu.services.pili',\n]\n\n\ndef read(*names, **kwargs):\nreturn io.open(\nos.path.join(os.path.dirname(__file__), *names),\nencoding=kwargs.get(\"encoding\", \"utf8\")\n).read()\n\n\ndef find_version(*file_paths):\nversion_file = read(*file_paths)\nversion_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\nversion_file, re.M)\nif version_match:\nreturn version_match.group(1)\nraise RuntimeError(\"Unable to find version string.\")\n\n\nsetup(\nname='qiniu',\nversion=find_version(\"qiniu\/__init__.py\"),\ndescription='Qiniu Resource Storage SDK',\nlong_description='see:\\nhttps:\/\/github.com\/qiniu\/python-sdk\\n',\nauthor='Shanghai Qiniu Information Technologies Co., Ltd.',\nauthor_email='sdk@qiniu.com',\nmaintainer_email='support@qiniu.com',\nlicense='MIT',\nurl='https:\/\/github.com\/qiniu\/python-sdk',\nplatforms='any',\npackages=packages,\nclassifiers=[\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n'Topic :: Software Development :: Libraries :: Python Modules'\n],\ninstall_requires=['requests'],\n\nentry_points={\n'console_scripts': [\n'qiniupy = qiniu.main:main',\n],\n}\n)\n"
    },
    {
        "package_name": "qprompt-0.16.3",
        "file_list": "LICENSE PKG-INFO dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt qprompt.py README.rst setup.cfg setup.py",
        "setup.py": "from os.path import isfile\nfrom setuptools import setup, find_packages\n\nreadme = open(\"README.rst\").read() if isfile(\"README.rst\") else \"\"\nprint(readme)\n\nsetup(\nname = \"qprompt\",\nversion = \"0.16.3\",\nauthor = \"Jeff Rimko\",\nauthor_email = \"jeffrimko@gmail.com\",\ndescription = \"Library for quick CLI user prompts, input, and menus.\",\nlicense = \"MIT\",\nkeywords = \"cli menu prompt input user library\",\nurl = \"https:\/\/github.com\/jeffrimko\/Qprompt\",\npy_modules=[\"qprompt\"],\ninstall_requires=[\"iterfzf\"],\nlong_description=readme,\ndata_files = [(\"\", [\"LICENSE\"])],\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Topic :: Utilities\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n],\n)\n"
    },
    {
        "package_name": "quickchart.io-1.0.1",
        "file_list": "LICENSE PKG-INFO pyproject.toml __init__.py README.md setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['quickchart']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['requests>=2.23.0,<3.0.0']\n\nsetup_kwargs = {\n'name': 'quickchart.io',\n'version': '1.0.1',\n'description': 'A client for quickchart.io, a service that generates static chart images',\n'long_description': '# quickchart-python\\n[![Build Status](https:\/\/travis-ci.com\/typpo\/quickchart-python.svg?branch=master)](https:\/\/travis-ci.com\/typpo\/quickchart-python)\\n![PyPI](https:\/\/img.shields.io\/pypi\/v\/quickchart.io)\\n![PyPI - License](https:\/\/img.shields.io\/pypi\/l\/quickchart.io)\\n\\nA Python client for the [quickchart.io](https:\/\/quickchart.io\/) image charts web service.\\n\\n# Installation\\n\\nUse the `quickchart` library in this project, or install through [pip](https:\/\/pypi.org\/project\/quickchart.io\/):\\n\\n```\\npip install quickchart.io\\n```\\n\\n# Usage\\n\\nThis library provides a `QuickChart` class. Import and instantiate it. Then set properties on it and specify a [Chart.js](https:\/\/chartjs.org) config:\\n\\n```python\\nfrom quickchart import QuickChart\\n\\nqc = QuickChart()\\nqc.width = 500\\nqc.height = 300\\nqc.config = {\\n \"type\": \"bar\",\\n \"data\": {\\n \"labels\": [\"Hello world\", \"Test\"],\\n \"datasets\": [{\\n \"label\": \"Foo\",\\n \"data\": [1, 2]\\n }]\\n }\\n}\\n```\\n\\nUse `get_url()` on your quickchart object to get the encoded URL that renders your chart:\\n\\n```python\\nprint(qc.get_url())\\n# https:\/\/quickchart.io\/chart?c=%7B%22chart%22%3A+%7B%22type%22%3A+%22bar%22%2C+%22data%22%3A+%7B%22labels%22%3A+%5B%22Hello+world%22%2C+%22Test%22%5D%2C+%22datasets%22%3A+%5B%7B%22label%22%3A+%22Foo%22%2C+%22data%22%3A+%5B1%2C+2%5D%7D%5D%7D%7D%7D&w=600&h=300&bkg=%23ffffff&devicePixelRatio=2.0&f=png\\n```\\n\\nIf you have a long or complicated chart, use `get_short_url()` to get a fixed-length URL using the quickchart.io web service (note that these URLs only persist for a short time unless you have a subscription):\\n\\n```python\\nprint(qc.get_short_url())\\n# https:\/\/quickchart.io\/chart\/render\/f-a1d3e804-dfea-442c-88b0-9801b9808401\\n```\\n\\nThe URLs will render an image of a chart:\\n\\n<img src=\"https:\/\/quickchart.io\/chart?c=%7B%22type%22%3A+%22bar%22%2C+%22data%22%3A+%7B%22labels%22%3A+%5B%22Hello+world%22%2C+%22Test%22%5D%2C+%22datasets%22%3A+%5B%7B%22label%22%3A+%22Foo%22%2C+%22data%22%3A+%5B1%2C+2%5D%7D%5D%7D%7D&w=600&h=300&bkg=%23ffffff&devicePixelRatio=2.0&f=png\" width=\"500\" \/>\\n\\n# Using Javascript functions in your chart\\n\\nChart.js sometimes relies on Javascript functions (e.g. for formatting tick labels). There are a couple approaches:\\n\\n - Build chart configuration as a string instead of a Python object. See `examples\/simple_example_with_function.py`.\\n - Build chart configuration as a Python object and include a placeholder string for the Javascript function. Then, find and replace it.\\n - Use the provided `QuickChartFunction` class. See `examples\/using_quickchartfunction.py` for a full example.\\n\\nA short example using `QuickChartFunction`:\\n```py\\nqc = QuickChart()\\nqc.config = {\\n \"type\": \"bar\",\\n \"data\": {\\n \"labels\": [\"A\", \"B\"],\\n \"datasets\": [{\\n \"label\": \"Foo\",\\n \"data\": [1, 2]\\n }]\\n },\\n \"options\": {\\n \"scales\": {\\n \"yAxes\": [{\\n \"ticks\": {\\n \"callback\": QuickChartFunction(\\'(val) => val + \"k\"\\')\\n }\\n }],\\n \"xAxes\": [{\\n \"ticks\": {\\n \"callback\": QuickChartFunction(\\'\\'\\'function(val) {\\n return val + \\'???\\';\\n }\\'\\'\\')\\n }\\n }]\\n }\\n }\\n}\\n\\nprint(qc.get_url())\\n```\\n\\n# Customizing your chart\\n\\nYou can set the following properties:\\n\\n### config: dict or str\\nThe actual Chart.js chart configuration.\\n\\n### width: int\\nWidth of the chart image in pixels. Defaults to 500\\n\\n### height: int\\nHeight of the chart image in pixels. Defaults to 300\\n\\n### format: str\\nFormat of the chart. Defaults to png. svg is also valid.\\n\\n### background_color: str\\nThe background color of the chart. Any valid HTML color works. Defaults to #ffffff (white). Also takes rgb, rgba, and hsl values.\\n\\n### device_pixel_ratio: float\\nThe device pixel ratio of the chart. This will multiply the number of pixels by the value. This is usually used for retina displays. Defaults to 1.0.\\n\\n### version: str\\nThe version of Chart.js to use. Acceptable values are documented [here](https:\/\/quickchart.io\/documentation\/#parameters). Usually used to select Chart.js 3+.\\n\\n### host\\nOverride the host of the chart render server. Defaults to quickchart.io.\\n\\n### key\\nSet an API key that will be included with the request.\\n\\n## Getting URLs\\n\\nThere are two ways to get a URL for your chart object.\\n\\n### get_url(): str\\n\\nReturns a URL that will display the chart image when loaded.\\n\\n### get_short_url(): str\\n\\nUses the quickchart.io web service to create a fixed-length chart URL that displays the chart image. Returns a URL such as `https:\/\/quickchart.io\/chart\/render\/f-a1d3e804-dfea-442c-88b0-9801b9808401`.\\n\\nNote that short URLs expire after a few days for users of the free service. You can [subscribe](https:\/\/quickchart.io\/pricing\/) to keep them around longer.\\n\\n## Other functionality\\n\\n### get_bytes()\\n\\nReturns the bytes representing the chart image.\\n\\n### to_file(path: str)\\n\\nWrites the chart image to a file path.\\n\\n## More examples\\n\\nCheckout the `examples` directory to see other usage.\\n',\n'author': 'Ian Webster',\n'author_email': 'ianw_pypi@ianww.com',\n'maintainer': 'Ian Webster',\n'maintainer_email': 'ianw_pypi@ianww.com',\n'url': 'https:\/\/quickchart.io\/',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'python_requires': '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "random_user_agent-1.0.1",
        "file_list": "PKG-INFO user_agents.zip params.py user_agent.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt README.md setup.cfg setup.py",
        "setup.py": "import os\n\nimport setuptools\n\n\nwith open(os.path.join(os.path.dirname(__file__), \"README.md\"), \"r\") as fh:\nlong_description = fh.read()\n\nsetuptools.setup(\nname=\"random_user_agent\",\nversion=\"1.0.1\",\nauthor=\"Luqman-Ud-Din Muhammad\",\nauthor_email=\"luqmanuddinm@gmail.com\",\ndescription=\"A package to get random user agents based filters provided by user\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/Luqman-Ud-Din\/random_user_agent\",\npackages=setuptools.find_packages(),\nlicense='MIT',\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n],\npackage_data={'random_user_agent': ['data\/*.zip']},\n)\n"
    },
    {
        "package_name": "rasterio-1.3.0.post1",
        "file_list": "AUTHORS.txt CHANGES.txt index.rst rasterio.control.rst rasterio.coords.rst rasterio.crs.rst rasterio.drivers.rst rasterio.dtypes.rst rasterio.enums.rst rasterio.env.rst rasterio.errors.rst rasterio.features.rst rasterio.fill.rst rasterio.io.rst rasterio.mask.rst rasterio.merge.rst rasterio.path.rst rasterio.plot.rst rasterio.profiles.rst rasterio.rio.blocks.rst rasterio.rio.bounds.rst rasterio.rio.calc.rst rasterio.rio.clip.rst rasterio.rio.convert.rst rasterio.rio.edit_info.rst rasterio.rio.env.rst rasterio.rio.gcps.rst rasterio.rio.helpers.rst rasterio.rio.info.rst rasterio.rio.insp.rst rasterio.rio.main.rst rasterio.rio.mask.rst rasterio.rio.merge.rst rasterio.rio.options.rst rasterio.rio.overview.rst rasterio.rio.rasterize.rst rasterio.rio.rm.rst rasterio.rio.rst rasterio.rio.sample.rst rasterio.rio.shapes.rst rasterio.rio.stack.rst rasterio.rio.transform.rst rasterio.rio.warp.rst rasterio.rpc.rst rasterio.rst rasterio.sample.rst rasterio.session.rst rasterio.shutil.rst rasterio.tools.rst rasterio.transform.rst rasterio.vrt.rst rasterio.warp.rst rasterio.windows.rst rasterio._base.rst rasterio._env.rst rasterio._err.rst rasterio._example.rst rasterio._features.rst rasterio._filepath.rst rasterio._fill.rst rasterio._io.rst rasterio._loading.rst rasterio._transform.rst rasterio._warp.rst cli.rst contributing.rst faq.rst index.rst installation.rst intro.rst quickstart.rst calc.rst color.rst concurrency.rst configuration.rst datasets.rst errors.rst features.rst fillnodata.rst georeferencing.rst image_options.rst image_processing.rst index.rst masking-by-shapefile.rst masks.rst memory-files.rst migrating-to-v1.rst overviews.rst plotting.rst profiles.rst reading.rst reproject.rst resampling.rst switch.rst tags.rst transforms.rst virtual-warping.rst vsi.rst windowed-rw.rst writing.rst async-rasterio.py decimate.py polygonize.py rasterio_polygonize.py rasterize_geometry.py reproject.py sieve.py thread_pool_executor.py total.py LICENSE.txt PKG-INFO pyproject.toml control.py coords.py crs.pxd crs.pyx drivers.py dtypes.py enums.py env.py errors.py features.py fill.py gdal.pxi io.py mask.py merge.py path.py plot.py profiles.py blocks.py bounds.py calc.py clip.py convert.py edit_info.py env.py gcps.py helpers.py info.py insp.py main.py mask.py merge.py options.py overview.py rasterize.py rm.py sample.py shapes.py stack.py transform.py warp.py __init__.py rpc.py sample.py session.py shutil.pyx tools.py transform.py vrt.py warp.py windows.py _base.pxd _base.pyx _env.pxd _env.pyx _err.pxd _err.pyx _example.pyx _features.pxd _features.pyx _filepath.pxd _filepath.pyx _fill.pyx _io.pxd _io.pyx _loading.py _path.py _show_versions.py _transform.pyx _version.pxd _version.pyx _warp.pxd _warp.pyx __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.rst setup.cfg setup.py conftest.py README.rst rangehttpserver.py README.rst test_band.py test_band_masks.py test_blocks.py test_boundless_read.py test_checksum.py test_cli_main.py test_colorinterp.py test_colormap.py test_complex_dtypes.py test_coords.py test_creation_options.py test_crs.py test_dataset.py test_dataset_mask.py test_dataset_rw.py test_data_paths.py test_deprecated.py test_descriptions.py test_driver_management.py test_driver_policy.py test_dtypes.py test_enums.py test_env.py test_err.py test_features.py test_filepath.py test_fillnodata.py test_gcps.py test_gdal_raster_io.py test_image_structure.py test_indexing.py test_int8.py test_io.py test_io_mixins.py test_mask.py test_mask_creation.py test_memoryfile.py test_merge.py test_meta.py test_nodata.py test_no_georef.py test_open.py test_open_options.py test_open_overview_level.py test_open_sharing.py test_options.py test_overviews.py test_pad.py test_path.py test_plot.py test_png.py test_process_pool_executor.py test_profile.py test_read.py test_read_boundless.py test_read_dtype.py test_read_resample.py test_reshape_image.py test_revolvingdoor.py test_rio_blocks.py test_rio_bounds.py test_rio_calc.py test_rio_clip.py test_rio_convert.py test_rio_edit_info.py test_rio_gcp.py test_rio_helpers.py test_rio_info.py test_rio_insp.py test_rio_main.py test_rio_mask.py test_rio_merge.py test_rio_options.py test_rio_overview.py test_rio_rasterize.py test_rio_rm.py test_rio_sample.py test_rio_shapes.py test_rio_stack.py test_rio_warp.py test_rpcs.py test_sampling.py test_scale_offset.py test_session.py test_show_versions.py test_shutil.py test_subdatasets.py test_tags.py test_tag_item.py test_tag_ns.py test_threading.py test_thread_pool_executor.py test_tools.py test_transform.py test_units.py test_update.py test_vrt.py test_warnings.py test_warp.py test_warpedvrt.py test_warp_transform.py test_windows.py test_windows_mixins.py test_write.py test__env.py test__version.py __init__.py VERSION.txt",
        "setup.py": "#!\/usr\/bin\/env python\n\n# Two environmental variables influence this script.\n#\n# GDAL_CONFIG: the path to a gdal-config program that points to GDAL headers,\n# libraries, and data files.\n#\n# PACKAGE_DATA: if defined, GDAL and PROJ4 data files will be copied into the\n# source or binary distribution. This is essential when creating self-contained\n# binary wheels.\n\nimport copy\nimport itertools\nimport logging\nimport os\nimport platform\nimport pprint\nimport shutil\nfrom subprocess import check_output\nimport sys\n\nfrom pkg_resources import parse_version\nfrom setuptools import setup\nfrom setuptools.extension import Extension\n\nlogging.basicConfig(stream=sys.stderr, level=logging.INFO)\nlog = logging.getLogger()\n\n\ndef copy_data_tree(datadir, destdir):\ntry:\nshutil.rmtree(destdir)\nexcept OSError:\npass\nshutil.copytree(datadir, destdir)\n\n\n# python -W all setup.py ...\nif \"all\" in sys.warnoptions:\nlog.level = logging.DEBUG\n\n# Parse the version from the rasterio module.\nwith open(\"rasterio\/__init__.py\") as f:\nfor line in f:\nif line.find(\"__version__\") >= 0:\nversion = line.split(\"=\")[1].strip()\nversion = version.strip('\"')\nversion = version.strip(\"'\")\ncontinue\n\nwith open(\"VERSION.txt\", \"w\") as f:\nf.write(version)\n\n# Use Cython if available.\ntry:\nfrom Cython.Build import cythonize\nexcept ImportError:\nraise SystemExit(\n\"ERROR: Cython.Build.cythonize not found. \"\n\"Cython is required to build rasterio.\")\n\n# By default we'll try to get options via gdal-config. On systems without,\n# options will need to be set in setup.cfg or on the setup command line.\ninclude_dirs = []\nlibrary_dirs = []\nlibraries = []\nextra_link_args = []\ngdal2plus = False\ngdal_output = [None] * 4\ngdalversion = None\ngdal_major_version = 0\ngdal_minor_version = 0\ngdal_patch_version = 0\n\ntry:\nimport numpy as np\n\ninclude_dirs.append(np.get_include())\nexcept ImportError:\nraise SystemExit(\"ERROR: Numpy and its headers are required to run setup().\")\n\nif \"clean\" not in sys.argv:\ntry:\ngdal_config = os.environ.get('GDAL_CONFIG', 'gdal-config')\nfor i, flag in enumerate((\"--cflags\", \"--libs\", \"--datadir\", \"--version\")):\ngdal_output[i] = check_output([gdal_config, flag]).decode(\"utf-8\").strip()\n\nfor item in gdal_output[0].split():\nif item.startswith(\"-I\"):\ninclude_dirs.extend(item[2:].split(\":\"))\nfor item in gdal_output[1].split():\nif item.startswith(\"-L\"):\nlibrary_dirs.extend(item[2:].split(\":\"))\nelif item.startswith(\"-l\"):\nlibraries.append(item[2:])\nelse:\n# e.g. -framework GDAL\nextra_link_args.append(item)\n# datadir, gdal_output[2] handled below\n\ngdalversion = gdal_output[3]\nif gdalversion:\nlog.info(\"GDAL API version obtained from gdal-config: %s\",\ngdalversion)\n\nexcept Exception as e:\nif os.name == \"nt\":\nlog.info(\"Building on Windows requires extra options to setup.py \"\n\"to locate needed GDAL files. More information is available \"\n\"in the README.\")\nelse:\nlog.warning(\"Failed to get options via gdal-config: %s\", str(e))\n\n# Get GDAL API version from environment variable.\nif 'GDAL_VERSION' in os.environ:\ngdalversion = os.environ['GDAL_VERSION']\nlog.info(\"GDAL API version obtained from environment: %s\", gdalversion)\n\n# Get GDAL API version from the command line if specified there.\nif '--gdalversion' in sys.argv:\nindex = sys.argv.index('--gdalversion')\nsys.argv.pop(index)\ngdalversion = sys.argv.pop(index)\nlog.info(\"GDAL API version obtained from command line option: %s\",\ngdalversion)\n\nif not gdalversion:\nraise SystemExit(\"ERROR: A GDAL API version must be specified. Provide a path \"\n\"to gdal-config using a GDAL_CONFIG environment variable \"\n\"or use a GDAL_VERSION environment variable.\")\n\ngdal_major_version, gdal_minor_version, gdal_patch_version = parse_version(\ngdalversion\n).base_version.split(\".\", maxsplit=3)\ngdal_major_version = int(gdal_major_version)\ngdal_minor_version = int(gdal_minor_version)\ngdal_patch_version = int(gdal_patch_version)\n\nif (gdal_major_version, gdal_minor_version) < (3, 1):\nraise SystemExit(\"ERROR: GDAL >= 3.1 is required for rasterio. \"\n\"Please upgrade GDAL.\")\n\n# Conditionally copy the GDAL data. To be used in conjunction with\n# the bdist_wheel command to make self-contained binary wheels.\nif os.environ.get('PACKAGE_DATA'):\ndestdir = 'rasterio\/gdal_data'\nif gdal_output[2]:\nlog.info(\"Copying gdal data from %s\" % gdal_output[2])\ncopy_data_tree(gdal_output[2], destdir)\nelse:\n# check to see if GDAL_DATA is defined\ngdal_data = os.environ.get('GDAL_DATA', None)\nif gdal_data:\nlog.info(\"Copying gdal_data from %s\" % gdal_data)\ncopy_data_tree(gdal_data, destdir)\n\n# Conditionally copy PROJ.4 data.\nprojdatadir = os.environ.get('PROJ_LIB', '\/usr\/local\/share\/proj')\nif os.path.exists(projdatadir):\nlog.info(\"Copying proj_data from %s\" % projdatadir)\ncopy_data_tree(projdatadir, 'rasterio\/proj_data')\n\ncompile_time_env = {\n\"CTE_GDAL_MAJOR_VERSION\": gdal_major_version,\n\"CTE_GDAL_MINOR_VERSION\": gdal_minor_version,\n\"CTE_GDAL_PATCH_VERSION\": gdal_patch_version,\n}\n\next_options = {\n'include_dirs': include_dirs,\n'library_dirs': library_dirs,\n'libraries': libraries,\n'extra_link_args': extra_link_args,\n'define_macros': [],\n'cython_compile_time_env': compile_time_env\n}\n\nif not os.name == \"nt\":\n# These options fail on Windows if using Visual Studio\next_options['extra_compile_args'] = ['-Wno-unused-parameter',\n'-Wno-unused-function']\n\n# Copy extension options for cpp extension modules.\ncpp_ext_options = copy.deepcopy(ext_options)\n\n# Remove -std=c++11 from C extension options.\ntry:\next_options['extra_link_args'].remove('-std=c++11')\next_options['extra_compile_args'].remove('-std=c++11')\nexcept Exception:\npass\n\n# GDAL 2.3 and newer requires C++11\nif (gdal_major_version, gdal_minor_version) >= (2, 3):\ncpp11_flag = '-std=c++11'\n\n# 'extra_compile_args' may not be defined\neca = cpp_ext_options.get('extra_compile_args', [])\n\nif platform.system() == 'Darwin':\n\nif cpp11_flag not in eca:\neca.append(cpp11_flag)\n\neca += [cpp11_flag, '-mmacosx-version-min=10.9', '-stdlib=libc++']\n\n# TODO: Windows\n\nelif cpp11_flag not in eca:\neca.append(cpp11_flag)\n\ncpp_ext_options['extra_compile_args'] = eca\n\n# Configure optional Cython coverage.\ncythonize_options = {\"language_level\": sys.version_info[0]}\nif os.environ.get('CYTHON_COVERAGE'):\ncythonize_options['compiler_directives'] = {'linetrace': True}\ncythonize_options['annotate'] = True\next_options['define_macros'].extend(\n[('CYTHON_TRACE', '1'), ('CYTHON_TRACE_NOGIL', '1')])\n\nlog.debug('ext_options:\\n%s', pprint.pformat(ext_options))\n\next_modules = None\nif \"clean\" not in sys.argv:\nextensions = [\nExtension(\n'rasterio._base', ['rasterio\/_base.pyx'], **ext_options),\nExtension(\n'rasterio._io', ['rasterio\/_io.pyx'], **ext_options),\nExtension(\n'rasterio._features', ['rasterio\/_features.pyx'], **ext_options),\nExtension(\n'rasterio._env', ['rasterio\/_env.pyx'], **ext_options),\nExtension(\n'rasterio._warp', ['rasterio\/_warp.pyx'], **cpp_ext_options),\nExtension(\n'rasterio._fill', ['rasterio\/_fill.pyx'], **cpp_ext_options),\nExtension(\n'rasterio._err', ['rasterio\/_err.pyx'], **ext_options),\nExtension(\n'rasterio._example', ['rasterio\/_example.pyx'], **ext_options),\nExtension(\n'rasterio._version', ['rasterio\/_version.pyx'], **ext_options),\nExtension(\n'rasterio.crs', ['rasterio\/crs.pyx'], **ext_options),\nExtension(\n'rasterio.shutil', ['rasterio\/shutil.pyx'], **ext_options),\nExtension(\n'rasterio._transform', ['rasterio\/_transform.pyx'], **ext_options)]\nif gdal_major_version >= 3:\n# VSI Plugins are only 3.0+\nextensions.append(\nExtension(\n'rasterio._filepath', ['rasterio\/_filepath.pyx'], **cpp_ext_options))\next_modules = cythonize(\nextensions, quiet=True, compile_time_env=compile_time_env, **cythonize_options)\n\n\nwith open(\"README.rst\", encoding=\"utf-8\") as f:\nreadme = f.read()\n\n# Runtime requirements.\ninst_reqs = [\n\"affine\",\n\"attrs\",\n\"certifi\",\n\"click>=4.0\",\n\"cligj>=0.5\",\n\"numpy>=1.18\",\n\"snuggs>=1.4.1\",\n\"click-plugins\",\n\"setuptools\",\n]\n\nextra_reqs = {\n\"docs\": [\"ghp-import\", \"numpydoc\", \"sphinx\", \"sphinx-rtd-theme\"],\n\"ipython\": [\"ipython>=2.0\"],\n\"plot\": [\"matplotlib\"],\n\"s3\": [\"boto3>=1.2.4\"],\n\"test\": [\n\"boto3>=1.2.4\",\n\"hypothesis\",\n\"packaging\",\n\"pytest-cov>=2.2.0\",\n\"pytest>=2.8.2\",\n\"shapely\",\n],\n}\n\n# Add all extra requirements\nextra_reqs[\"all\"] = list(set(itertools.chain(*extra_reqs.values())))\n\nsetup_args = dict(\nname=\"rasterio\",\nversion=version,\ndescription=\"Fast and direct raster I\/O for use with Numpy and SciPy\",\nlong_description=readme,\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Information Technology\",\n\"Intended Audience :: Science\/Research\",\n\"License :: OSI Approved :: BSD License\",\n\"Programming Language :: C\",\n\"Programming Language :: Cython\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3\",\n\"Topic :: Multimedia :: Graphics :: Graphics Conversion\",\n\"Topic :: Scientific\/Engineering :: GIS\",\n],\nkeywords=\"raster gdal\",\nauthor=\"Sean Gillies\",\nauthor_email=\"sean@mapbox.com\",\nurl=\"https:\/\/github.com\/rasterio\/rasterio\",\nlicense=\"BSD\",\npackage_dir={\"\": \".\"},\npackages=[\"rasterio\", \"rasterio.rio\"],\ninclude_package_data=True,\next_modules=ext_modules,\nzip_safe=False,\ninstall_requires=inst_reqs,\nextras_require=extra_reqs,\npython_requires=\">=3.8\",\n)\n\nif os.environ.get('PACKAGE_DATA'):\nsetup_args['package_data'] = {'rasterio': ['gdal_data\/*', 'proj_data\/*']}\n\nsetup(**setup_args)\n"
    },
    {
        "package_name": "ratelimit-2.2.1",
        "file_list": "LICENSE.txt MANIFEST.in PKG-INFO decorators.py exception.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt README.rst setup.cfg setup.py",
        "setup.py": "from setuptools import setup\n\nimport ratelimit\n\ndef readme():\n'''Read README file'''\nwith open('README.rst') as infile:\nreturn infile.read()\n\nsetup(\nname='ratelimit',\nversion=ratelimit.__version__,\ndescription='API rate limit decorator',\nlong_description=readme().strip(),\nauthor='Tomas Basham',\nauthor_email='me@tomasbasham.co.uk',\nurl='https:\/\/github.com\/tomasbasham\/ratelimit',\nlicense='MIT',\npackages=['ratelimit'],\ninstall_requires=[],\nkeywords=[\n'ratelimit',\n'api',\n'decorator'\n],\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Programming Language :: Python',\n'Topic :: Software Development'\n],\ninclude_package_data=True,\nzip_safe=False\n)\n"
    },
    {
        "package_name": "rdflib-6.2.0",
        "file_list": "CHANGELOG.md CONTRIBUTORS .gitignore examples.rst CODE_OF_CONDUCT.md conf.py developers.rst docs.rst gettingstarted.rst index.rst intro_to_creating_rdf.rst intro_to_graphs.rst intro_to_parsing.rst intro_to_sparql.rst Makefile merging.rst namespaces_and_bindings.rst persistence.rst persisting_n3_terms.rst plugins.rst plugintable.py plugin_parsers.rst plugin_query_results.rst plugin_serializers.rst plugin_stores.rst rdf_terms.rst sphinx-requirements.txt type_hints.rst upgrade4to5.rst upgrade5to6.rst utilities.rst ContextHierarchy.png datatype_hierarchy.png headerbg.png logo-rdflib.png plugins-diagram.svg pyramid.css RDFlib-500.png RDFlib.ico RDFlib.png RDFlib.svg layout.html LICENSE README rtd.css_t theme-old.conf theme.conf berkeleydb_example.py conjunctive_graphs.py custom_datatype.py custom_eval.py datasets.py foafpaths.py prepared_query.py resource_example.py simple_example.py slice.py smushing.py sparqlstore_example.py sparql_query_example.py sparql_update_example.py swap_primer.py transitive.py __init__.py LICENSE MANIFEST.in PKG-INFO pyproject.toml collection.py compare.py compat.py container.py events.py exceptions.py cmdlineutils.py describer.py external_graph_libs.py infixowl.py __init__.py graph.py _BRICK.py _CSVW.py _DC.py _DCAM.py _DCAT.py _DCMITYPE.py _DCTERMS.py _DOAP.py _FOAF.py _GEO.py _ODRL2.py _ORG.py _OWL.py _PROF.py _PROV.py _QB.py _RDF.py _RDFS.py _SDO.py _SH.py _SKOS.py _SOSA.py _SSN.py _TIME.py _VANN.py _VOID.py _WGS.py _XSD.py __init__.py parser.py paths.py plugin.py hext.py jsonld.py notation3.py nquads.py ntriples.py RDFVOC.py rdfxml.py trig.py trix.py __init__.py hext.py jsonld.py longturtle.py n3.py nquads.py nt.py rdfxml.py trig.py trix.py turtle.py xmlwriter.py __init__.py context.py errors.py keys.py util.py __init__.py __init__.py aggregates.py algebra.py datatypes.py evaluate.py evalutils.py operators.py parser.py parserutils.py processor.py csvresults.py graph.py jsonresults.py rdfresults.py tsvresults.py txtresults.py xmlresults.py __init__.py sparql.py update.py __init__.py auditable.py berkeleydb.py concurrent.py memory.py regexmatching.py sparqlconnector.py sparqlstore.py __init__.py __init__.py py.typed query.py resource.py serializer.py store.py term.py csv2rdf.py defined_namespace_creator.py graphisomorphism.py rdf2dot.py rdfpipe.py rdfs2dot.py __init__.py util.py void.py _type_checking.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py conftest.py n3-writer-test-02.n3 n3-writer-test-25.n3 n3-writer-test-27.n3 rdf-test-01.n3 rdf-test-08.n3 rdf-test-10.n3 rdf-test-24.n3 rdf-test-25.n3 realestate.csv dawgt.ttl fake.xxx mf.ttl qb.ttl qt.ttl rdfs.ttl rdftest.ttl sdo.json-ld ut.n3 example-lots_of_graphs.n3 fetcher.py issue156.n3 bnode_context.nquads bnode_context_obj_bnodes.nquads example.nquads test1.nquads test2.nquads test3.nquads test4.nquads test5.nquads test6.nq pizza.owl README.md example_graph.rdf example_graph_cbd.rdf sportquads.trig example-just_a_class.n3 example-misc.n3 example-ontology.n3 listTest.n3 longString.n3 longString.rdf n3-writer-test-01.n3 n3-writer-test-03.n3 n3-writer-test-04.n3 n3-writer-test-05.n3 n3-writer-test-06.n3 n3-writer-test-07.n3 n3-writer-test-08.n3 n3-writer-test-09.n3 n3-writer-test-10.n3 n3-writer-test-11.n3 n3-writer-test-12.n3 n3-writer-test-13.n3 n3-writer-test-14.n3 n3-writer-test-15.n3 n3-writer-test-16.n3 n3-writer-test-17.n3 n3-writer-test-18.n3 n3-writer-test-19.n3 n3-writer-test-20.n3 n3-writer-test-21.n3 n3-writer-test-22.n3 n3-writer-test-23.n3 n3-writer-test-24.n3 n3-writer-test-26.n3 n3-writer-test-28.n3 n3-writer-test-29.n3 n3-writer-test-30.n3 n3-writer-test-31.n3 rdf-test-02.n3 rdf-test-03.n3 rdf-test-04.n3 rdf-test-05.n3 rdf-test-06.n3 rdf-test-07.n3 rdf-test-09.n3 rdf-test-11.n3 rdf-test-12.n3 rdf-test-13.n3 rdf-test-14.n3 rdf-test-15.n3 rdf-test-16.n3 rdf-test-17.n3 rdf-test-18.n3 rdf-test-19.n3 rdf-test-20.n3 rdf-test-21.n3 rdf-test-22.n3 rdf-test-23.n3 rdf-test-26.n3 rdf-test-27.n3 rdf-test-28.n3 strquot.n3 anons-01.nt anons-02.nt anons-03.nt bnode-01.nt dtlang-01.nt dtlang-02.nt dtlang-03.nt dtlang-04.nt dtlang-05.nt even_more_literals.nt formulae-01.nt formulae-02.nt formulae-03.nt formulae-04.nt formulae-05.nt formulae-06.nt formulae-07.nt formulae-08.nt formulae-09.nt formulae-10.nt i18n-01.nt keywords-01.nt keywords-02.nt keywords-03.nt keywords-04.nt keywords-05.nt keywords-06.nt keywords-07.nt keywords-08.nt lists-01.nt lists-02.nt lists-03.nt lists-04.nt lists-05.nt lists-06.nt literals-01.nt literals-02.nt literals-03.nt literals-04.nt literals-05.nt more_literals.nt numeric-01.nt numeric-02.nt numeric-03.nt numeric-04.nt numeric-05.nt paths-01.nt paths-02.nt paths-03.nt paths-04.nt paths-05.nt paths-06.nt qname-01.nt qname-02.nt qname-03.nt quote-01.nt quote-02.nt rdflibtest-pnamebrackets.nt rdflibtest01.nt rdflibtest02.nt rdflibtest03.nt rdflibtest04.nt rdflibtest05.nt rdflibtest06.nt rdflibtest07.nt rdflibtest08.nt rdflibtest09.nt simple-03.nt simple-04.nt simple-05.nt simple-06.nt simple-07.nt test.nt trailing-01.nt trailing-02.nt verbs-01.nt verbs-02.nt verbs-03.nt verbs-04.nt verbs-05.nt verbs-06.nt bindscope.rq bindscope.srx bindscope.ttl bindscope2.rq bindscope2.tsv bnode-ppath-mix-a.rq bnode-ppath-mix-b.rq bnode-ppath-mix-c.rq bnode-ppath-mix-d.rq bnode-ppath-mix-e.rq bnode-ppath-mix-f.rq bnode-ppath-mix-g.rq bnode-ppath-mix-h.rq bnode-ppath-mix.srx bnode-ppath-mix.ttl filteroptional.rq filtersubquery.tsv filtersubquery1.rq filtersubquery2.rq filtersubquery3.rq manifest.ttl minusfilter.rq minusfilter.srx minusfilter.ttl nestedbnode.rq nestedbnode.srx notexistsfilter.rq notexistsfilter.srx subquery.tsv subquery.ttl subquery1.rq subquery2.rq subquery3.rq subqueryagg.rq subqueryagg.tsv subqueryagg.ttl subqueryagg1.rq syn-codepoint-escape-01.rq syn-codepoint-escape-02.rq syn-codepoint-escape-03.rq syn-codepoint-escape-04.rq syn-codepoint-escape-bad.rq unicode.rq unicode.srx unicode.ttl whitespacedot.rq n3-full.tests n3-rdf.tests n3parser.tests_n3_10001.nt n3parser.tests_n3_10002.nt n3parser.tests_n3_10003.nt n3parser.tests_n3_10004.nt n3parser.tests_n3_10005.nt n3parser.tests_n3_10006.nt n3parser.tests_n3_10007.nt n3parser.tests_n3_10008.nt n3parser.tests_n3_10009.nt n3parser.tests_n3_10010.nt n3parser.tests_n3_10011.nt n3parser.tests_n3_10012.nt n3parser.tests_n3_10013.nt n3parser.tests_n3_10014.nt n3parser.tests_n3_10015.nt n3parser.tests_n3_10016.nt n3parser.tests_n3_10017.nt n3parser.tests_n3_10018.nt n3parser.tests_n3_10019.nt n3parser.tests_n3_10020.nt n3parser.tests_n3_20000.nt n3parser.tests_n3_20001.nt n3parser.tests_n3_20002.nt n3parser.tests_n3_20003.nt anon-prop.n3 contexts.n3 hiragana.n3 lists.n3 strquot.n3 djb1a.n3 dot-dash.n3 equals1.n3 equals2.n3 keywords1.n3 keywords2.n3 lstring.n3 neg-formula-predicate.n3 neg-keywords3.n3 neg-literal-predicate.n3 neg-single-quote.n3 neg-thisadoc.n3 no-last-nl.n3 numbers.n3 path1.n3 path2.n3 qvars1.n3 qvars2.n3 this-quantifiers.n3 this-rules.n3 too-nested.n3 trailing-semicolon.n3 zero-objects.n3 zero-predicates.n3 test_results.n3 extension1.xsl extension2.xsl manifest.ttl README test_trix.py trix-aperture.nq trix-aperture.trix trix-bnode-context-obj-bnodes.nq trix-bnode-context-obj-bnodes.trix trix-bnode-context.nq trix-bnode-context.trix trix-example.nq trix-example.trix trix-jena-01.nq trix-jena-01.trix trix-jena-02.nq trix-jena-02.trix trix-jena-03.nq trix-jena-03.trix trix-jena-04.nq trix-jena-04.trix trix-jena-05.nq trix-jena-05.trix trix-jena-06.nq trix-jena-06.trix trix-jena-10.nq trix-jena-10.trix trix-jena-11.nq trix-jena-11.trix trix-jena-12.nq trix-jena-12.trix trix-jena-13.nq trix-jena-13.trix trix-jena-14.nq trix-jena-14.trix trix-jena-15.nq trix-jena-15.trix trix-jena-bad-00.trix trix-jena-bad-01.trix trix-jena-bad-02.trix trix-jena-bad-03.trix trix-jena-bad-04.trix trix-jena-bad-05.trix trix-jena-bad-06.trix trix-jena-bad-07.trix trix-jena-bad-08.trix trix-jena-bad-09.trix trix-jena-bad-10.trix trix-jena-ex-1.trix trix-jena-ex-2.trix trix-jena-ex-3.trix trix-jena-ex-4.trix trix-jena-ex-5.trix trix-jena-ns-1.nq trix-jena-ns-1.trix trix-jena-ns-2.nq trix-jena-ns-2.trix trix-jena-star-1.nq trix-jena-star-1.trix trix-jena-star-2.nq trix-jena-star-2.trix trix-jena-star-bad-asserted-1.trix trix-jena-star-bad-asserted-2.trix trix-jena-star-bad-emb-1.trix trix-jena-star-bad-emb-2.trix trix-jena-star-bad-emb-nested-1.trix trix-jena-star-bad-emb-nested-2.trix trix-jena-star-bad-emb-nested-3.trix trix-jena-w3c-1.nq trix-jena-w3c-1.trix trix-jena-w3c-2.nq trix-jena-w3c-2.trix trix-ng4j-alternateencoding.nq trix-ng4j-alternateencoding.trix trix-ng4j-blanknodes.nq trix-ng4j-blanknodes.trix trix-ng4j-blanknodes2.nq trix-ng4j-blanknodes2.trix trix-ng4j-datatyperequired.trix trix-ng4j-emptynamedgraph.trix trix-ng4j-escape.nq trix-ng4j-escape.trix trix-ng4j-extended.nq trix-ng4j-extended.trix trix-ng4j-ignoremultiplegraphs.nq trix-ng4j-ignoremultiplegraphs.trix trix-ng4j-ignorexmlcomments.nq trix-ng4j-ignorexmlcomments.trix trix-ng4j-literalsubject.trix trix-ng4j-malformed.trix trix-ng4j-malformedgraphuri.trix trix-ng4j-malformedobjecturi.trix trix-ng4j-malformedpredicateuri.trix trix-ng4j-malformedsubjecturi.trix trix-ng4j-minimal.trix trix-ng4j-missingnamespace.nq trix-ng4j-missingnamespace.trix trix-ng4j-namedgraphs.nq trix-ng4j-namedgraphs.trix trix-ng4j-objectnodetypes.nq trix-ng4j-objectnodetypes.trix trix-ng4j-relativeuris.nq trix-ng4j-relativeuris.trix trix-ng4j-singletriple.nq trix-ng4j-singletriple.trix trix-ng4j-specialchars.nq trix-ng4j-specialchars.trix trix-ng4j-subjectnodetypes.nq trix-ng4j-subjectnodetypes.trix trix-ng4j-test-01.nq trix-ng4j-test-01.trix trix-ng4j-test-02.nq trix-ng4j-test-02.trix trix-ng4j-twoemptygraphs.trix trix-ng4j-wrongpredicatetype.trix trix-nokia-example-2010.nq trix-nokia-example-2010.trix trix-nokia-example.nq trix-nokia-example.trix trix-nquads-example.nq trix-nquads-example.trix trix-test1.nq trix-test1.trix trix-test2.nq trix-test2.trix trix-test3.nq trix-test3.trix trix-test4.nq trix-test4.trix trix-test5.nq trix-test5.trix .gitignore .#join-combo-1.srx.1.1 data-1.ttl data-2.ttl filter-nested-1.rq filter-nested-1.srx filter-nested-2.rq filter-nested-2.srx filter-placement-1.rq filter-placement-1.srx filter-placement-2.rq filter-placement-2.srx filter-placement-3.rq filter-placement-3.srx filter-scope-1.rq filter-scope-1.srx join-combo-1.rq join-combo-1.srx join-combo-2.rq join-combo-2.srx join-combo-graph-1.ttl join-combo-graph-2.ttl manifest.ttl opt-filter-1.rq opt-filter-1.srx opt-filter-1.ttl opt-filter-2.rq opt-filter-2.srx opt-filter-2.ttl opt-filter-3.rq opt-filter-3.srx opt-filter-3.ttl two-nested-opt-alt.rq two-nested-opt-alt.srx two-nested-opt.rq two-nested-opt.srx two-nested-opt.ttl var-scope-join-1.rq var-scope-join-1.srx var-scope-join-1.ttl algebra-expressions.txt ask-1.rq ask-1.srx ask-4.rq ask-4.srx ask-7.rq ask-7.srx ask-8.rq ask-8.srx data.ttl manifest.ttl base-prefix-1.rq base-prefix-1.srx base-prefix-2.rq base-prefix-2.srx base-prefix-3.rq base-prefix-3.srx base-prefix-4.rq base-prefix-4.srx base-prefix-5.rq base-prefix-5.srx bgp-no-match.rq bgp-no-match.srx data-1.ttl data-2.ttl data-3.ttl data-4.ttl data-5.ttl data-6.ttl data-7.ttl list-1.rq list-1.srx list-2.rq list-2.srx list-3.rq list-3.srx list-4.rq list-4.srx manifest.ttl prefix-name-1.rq prefix-name-1.srx quotes-1.rq quotes-1.srx quotes-2.rq quotes-2.srx quotes-3.rq quotes-3.srx quotes-4.rq quotes-4.srx spoo-1.rq spoo-1.srx term-1.rq term-1.srx term-2.rq term-2.srx term-3.rq term-3.srx term-4.rq term-4.srx term-5.rq term-5.srx term-6.rq term-6.srx term-7.rq term-7.srx term-8.rq term-8.srx term-9.rq term-9.srx var-1.rq var-1.srx var-2.rq var-2.srx data.ttl manifest.ttl query.rq result.ttl data-1.ttl data-2.ttl manifest.ttl query-bev-1.rq query-bev-2.rq query-bev-3.rq query-bev-4.rq query-bev-5.rq query-bev-6.rq query-boolean-literal.rq result-bev-1.ttl result-bev-2.ttl result-bev-3.ttl result-bev-4.ttl result-bev-5.ttl result-bev-6.ttl result-boolean-literal.ttl bound1-result.ttl bound1.rq data.ttl manifest.ttl cast-bool.rq cast-bool.srx cast-dbl.rq cast-dbl.srx cast-dec.rq cast-dec.srx cast-dT.rq cast-dT.srx cast-flt.rq cast-flt.srx cast-int.rq cast-int.srx cast-str.rq cast-str.srx data.ttl manifest.ttl data-ident.ttl data-opt.ttl data-reif.ttl manifest.ttl query-construct-optional.rq query-ident.rq query-reif-1.rq query-reif-2.rq query-subgraph.rq result-construct-optional.ttl result-ident.ttl result-reif.ttl result-subgraph.ttl data-g1-dup.ttl data-g1.ttl data-g2-dup.ttl data-g2.ttl data-g3-dup.ttl data-g3.ttl data-g4-dup.ttl data-g4.ttl dataset-01.rq dataset-01.ttl dataset-02.rq dataset-02.ttl dataset-03.rq dataset-03.ttl dataset-04.rq dataset-04.ttl dataset-05.rq dataset-05.ttl dataset-06.rq dataset-06.ttl dataset-07.rq dataset-07.ttl dataset-08.rq dataset-08.ttl dataset-09.rq dataset-09.ttl dataset-09b.rq dataset-10.rq dataset-10.ttl dataset-10b.rq dataset-11.rq dataset-11.ttl dataset-12.rq dataset-12.ttl dataset-12b.rq manifest.ttl data-all.ttl data-node.ttl data-num.ttl data-opt.ttl data-star.ttl data-str.ttl distinct-1-results.srx distinct-1.rq distinct-2.rq distinct-all.srx distinct-node.srx distinct-num.srx distinct-opt.srx distinct-star-1.rq distinct-star-1.srx distinct-str.srx manifest.ttl no-distinct-1.rq no-distinct-2.rq no-distinct-all.srx no-distinct-node.srx no-distinct-num.srx no-distinct-opt.srx no-distinct-str.srx data-builtin-1.ttl data-builtin-2.ttl data-langMatches-de.ttl data-langMatches.ttl lang-case-insensitive-eq.srx lang-case-insensitive-ne.srx lang-case-sensitivity-eq.rq lang-case-sensitivity-ne.rq lang-case-sensitivity.ttl manifest.ttl q-blank-1.rq q-datatype-1.rq q-datatype-2.rq q-datatype-3.rq q-iri-1.rq q-isliteral-1.rq q-lang-1.rq q-lang-2.rq q-lang-3.rq q-langMatches-1.rq q-langMatches-2.rq q-langMatches-3.rq q-langMatches-4.rq q-langMatches-de-de.rq q-str-1.rq q-str-2.rq q-str-3.rq q-str-4.rq q-uri-1.rq result-blank-1.ttl result-datatype-1.ttl result-datatype-2.srx result-datatype-3.srx result-iri-1.ttl result-isliteral-1.ttl result-lang-1.srx result-lang-2.srx result-lang-3.srx result-langMatches-1.ttl result-langMatches-2.ttl result-langMatches-3.ttl result-langMatches-4.ttl result-langMatches-de.ttl result-sameTerm-eq.ttl result-sameTerm-not-eq.ttl result-sameTerm.ttl result-str-1.ttl result-str-2.ttl result-str-3.ttl result-str-4.ttl result-uri-1.ttl sameTerm-eq.rq sameTerm-not-eq.rq sameTerm.rq data-eq.ttl manifest.ttl query-eq-1.rq query-eq-2.rq query-eq-3.rq query-eq-4.rq query-eq-5.rq query-eq-graph-1.rq query-eq-graph-2.rq query-eq-graph-3.rq query-eq-graph-4.rq query-eq-graph-5.rq query-eq2-1.rq query-eq2-2.rq query-eq2-graph-1.rq result-eq-1.ttl result-eq-2.ttl result-eq-3.ttl result-eq-4.ttl result-eq-5.ttl result-eq-graph-1.ttl result-eq-graph-2.ttl result-eq-graph-3.ttl result-eq-graph-4.ttl result-eq-graph-5.ttl result-eq2-1.ttl result-eq2-2.ttl result-eq2-graph-1.ttl data.ttl manifest.ttl query-ge-1.rq query-le-1.rq query-minus-1.rq query-mul-1.rq query-plus-1.rq query-unminus-1.rq query-unplus-1.rq result-ge-1.srx result-le-1.srx result-minus-1.srx result-mul-1.srx result-plus-1.srx result-unminus-1.srx result-unplus-1.srx extended-manifest-evaluation.ttl files-to-fix foo data-g1.ttl data-g2.ttl data-g3-dup.ttl data-g3.ttl data-g4.ttl graph-01.rq graph-01.ttl graph-02.rq graph-02.ttl graph-03.rq graph-03.ttl graph-04.rq graph-04.ttl graph-05.rq graph-05.ttl graph-06.rq graph-06.ttl graph-07.rq graph-07.ttl graph-08.rq graph-08.ttl graph-09.rq graph-09.ttl graph-10.rq graph-10.ttl graph-11.rq graph-11.ttl manifest.ttl .htaccess kanji-01-results.ttl kanji-01.rq kanji-02-results.ttl kanji-02.rq kanji.ttl manifest.ttl normalization-01-results.ttl normalization-01.rq normalization-01.ttl normalization-02-results.ttl normalization-02.rq normalization-02.ttl normalization-03-results.ttl normalization-03.rq normalization-03.ttl LICENSE manifest-evaluation.ttl manifest-syntax.ttl data-1.ttl data-2.ttl data-3.ttl data-4.ttl date-1-result.srx date-1.rq date-2-result.srx date-2.rq date-3-result.srx date-3.rq date-4-result.srx date-4.rq manifest.ttl open-cmp-01-result.srx open-cmp-01.rq open-cmp-02-result.srx open-cmp-02.rq open-eq-01-result.srx open-eq-01.rq open-eq-02-result.srx open-eq-02.rq open-eq-03-result.srx open-eq-03.rq open-eq-04-result.srx open-eq-04.rq open-eq-05-result.srx open-eq-05.rq open-eq-06-result.srx open-eq-06.rq open-eq-07-result.srx open-eq-07.rq open-eq-08-result.srx open-eq-08.rq open-eq-09-result.srx open-eq-09.rq open-eq-10-result.srx open-eq-10.rq open-eq-11-result.srx open-eq-11.rq open-eq-12-result.srx open-eq-12.rq sameTerm-eq-StringSimpleLiteralCmp.srx sameTerm-eq.srx sameTerm-manifest.ttl sameTerm-not-eq-StringSimpleLiteralCmp.srx sameTerm-not-eq.srx sameTerm-StringSimpleLiteralCmp.srx sameTerm.srx sameTerm.ttl complex-data-1.ttl complex-data-2.ttl data.ttl manifest.ttl q-opt-1.rq q-opt-2.rq q-opt-3.rq q-opt-complex-1.rq q-opt-complex-2.rq q-opt-complex-3.rq q-opt-complex-4.rq result-opt-1.ttl result-opt-2.ttl result-opt-3.ttl result-opt-complex-1.ttl result-opt-complex-2.ttl result-opt-complex-3.ttl result-opt-complex-4.ttl data-1.ttl expr-1-result.ttl expr-1.rq expr-2-result.ttl expr-2.rq expr-3-result.ttl expr-3.rq expr-4-result.ttl expr-4.rq expr-5-result-not-simplified.ttl expr-5-result-simplified.ttl expr-5.rq manifest.ttl README manifest.ttl reduced-1.rq reduced-1.srx reduced-2.rq reduced-2.srx reduced-star.ttl reduced-str.ttl manifest.ttl regex-data-01.ttl regex-query-001.rq regex-query-002.rq regex-query-003.rq regex-query-004.rq regex-result-001.ttl regex-result-002.ttl regex-result-003.ttl regex-result-004.ttl data.ttl manifest.ttl slice-01.rq slice-02.rq slice-03.rq slice-04.rq slice-10.rq slice-11.rq slice-12.rq slice-13.rq slice-20.rq slice-21.rq slice-22.rq slice-23.rq slice-24.rq slice-results-01.ttl slice-results-02.ttl slice-results-03.ttl slice-results-04.ttl slice-results-10.ttl slice-results-11.ttl slice-results-12.ttl slice-results-13.ttl slice-results-20.ttl slice-results-21.ttl slice-results-22.ttl slice-results-23.ttl slice-results-24.ttl .manifest.ttl.swp data-sort-1.ttl data-sort-11.ttl data-sort-3.ttl data-sort-4.ttl data-sort-6.ttl data-sort-7.ttl data-sort-8.ttl data-sort-9.ttl data-sort-builtin.ttl data-sort-function.ttl data-sort-numbers.ttl extended-manifest.ttl manifest.ttl query-sort-1.rq query-sort-10.rq query-sort-2.rq query-sort-3.rq query-sort-4.rq query-sort-5.rq query-sort-6.rq query-sort-9.rq query-sort-builtin.rq query-sort-function.rq query-sort-numbers.rq result-sort-1.rdf result-sort-10.rdf result-sort-11.ttl result-sort-2.rdf result-sort-3.rdf result-sort-4.rdf result-sort-5.rdf result-sort-6.rdf result-sort-7.rdf result-sort-8.rdf result-sort-9.rdf result-sort-builtin.ttl result-sort-function.ttl result-sort-numbers.ttl manifest.ttl syntax-basic-01.rq syntax-basic-02.rq syntax-basic-03.rq syntax-basic-04.rq syntax-basic-05.rq syntax-basic-06.rq syntax-bnodes-01.rq syntax-bnodes-02.rq syntax-bnodes-03.rq syntax-bnodes-04.rq syntax-bnodes-05.rq syntax-expr-01.rq syntax-expr-02.rq syntax-expr-03.rq syntax-expr-04.rq syntax-expr-05.rq syntax-forms-01.rq syntax-forms-02.rq syntax-limit-offset-01.rq syntax-limit-offset-02.rq syntax-limit-offset-03.rq syntax-limit-offset-04.rq syntax-lists-01.rq syntax-lists-02.rq syntax-lists-03.rq syntax-lists-04.rq syntax-lists-05.rq syntax-lit-01.rq syntax-lit-02.rq syntax-lit-03.rq syntax-lit-04.rq syntax-lit-05.rq syntax-lit-06.rq syntax-lit-07.rq syntax-lit-08.rq syntax-lit-09.rq syntax-lit-10.rq syntax-lit-11.rq syntax-lit-12.rq syntax-lit-13.rq syntax-lit-14.rq syntax-lit-15.rq syntax-lit-16.rq syntax-lit-17.rq syntax-lit-18.rq syntax-lit-19.rq syntax-lit-20.rq syntax-order-01.rq syntax-order-02.rq syntax-order-03.rq syntax-order-04.rq syntax-order-05.rq syntax-order-06.rq syntax-order-07.rq syntax-pat-01.rq syntax-pat-02.rq syntax-pat-03.rq syntax-pat-04.rq syntax-qname-01.rq syntax-qname-02.rq syntax-qname-03.rq syntax-qname-04.rq syntax-qname-05.rq syntax-qname-06.rq syntax-qname-07.rq syntax-qname-08.rq syntax-struct-01.rq syntax-struct-02.rq syntax-struct-03.rq syntax-struct-05.rq syntax-struct-06.rq syntax-struct-07.rq syntax-struct-08.rq syntax-struct-09.rq syntax-struct-10.rq syntax-struct-11.rq syntax-struct-12.rq syntax-struct-13.rq syntax-struct-14.rq syntax-union-01.rq syntax-union-02.rq manifest.ttl syntax-bnode-01.rq syntax-bnode-02.rq syntax-bnode-03.rq syntax-dataset-01.rq syntax-dataset-02.rq syntax-dataset-03.rq syntax-dataset-04.rq syntax-esc-01.rq syntax-esc-02.rq syntax-esc-03.rq syntax-esc-04.rq syntax-esc-05.rq syntax-form-ask-02.rq syntax-form-construct01.rq syntax-form-construct02.rq syntax-form-construct03.rq syntax-form-construct04.rq syntax-form-construct06.rq syntax-form-describe01.rq syntax-form-describe02.rq syntax-form-select-01.rq syntax-form-select-02.rq syntax-function-01.rq syntax-function-02.rq syntax-function-03.rq syntax-function-04.rq syntax-general-01.rq syntax-general-02.rq syntax-general-03.rq syntax-general-04.rq syntax-general-05.rq syntax-general-06.rq syntax-general-07.rq syntax-general-08.rq syntax-general-09.rq syntax-general-10.rq syntax-general-11.rq syntax-general-12.rq syntax-general-13.rq syntax-general-14.rq syntax-graph-01.rq syntax-graph-02.rq syntax-graph-03.rq syntax-graph-04.rq syntax-graph-05.rq syntax-keywords-01.rq syntax-keywords-02.rq syntax-keywords-03.rq syntax-lists-01.rq syntax-lists-02.rq syntax-lists-03.rq syntax-lists-04.rq syntax-lists-05.rq manifest.ttl syn-01.rq syn-02.rq syn-03.rq syn-04.rq syn-05.rq syn-06.rq syn-07.rq syn-08.rq syn-bad-01.rq syn-bad-02.rq syn-bad-03.rq syn-bad-04.rq syn-bad-05.rq syn-bad-06.rq syn-bad-07.rq syn-bad-08.rq syn-bad-09.rq syn-bad-10.rq syn-bad-11.rq syn-bad-12.rq syn-bad-13.rq syn-bad-14.rq syn-bad-15.rq syn-bad-16.rq syn-bad-17.rq syn-bad-18.rq syn-bad-19.rq syn-bad-20.rq syn-bad-21.rq syn-bad-22.rq syn-bad-23.rq syn-bad-24.rq syn-bad-25.rq syn-bad-26.rq syn-bad-27.rq syn-bad-28.rq syn-bad-29.rq syn-bad-30.rq syn-bad-31.rq syn-bad-bnode-dot.rq syn-bad-bnodes-missing-pvalues-01.rq syn-bad-bnodes-missing-pvalues-02.rq syn-bad-empty-optional-01.rq syn-bad-empty-optional-02.rq syn-bad-filter-missing-parens.rq syn-bad-lone-list.rq syn-bad-lone-node.rq syn-blabel-cross-filter.rq syn-blabel-cross-graph-bad.rq syn-blabel-cross-optional-bad.rq syn-blabel-cross-union-bad.rq manifest.ttl syn-09.rq syn-10.rq syn-11.rq syn-bad-34.rq syn-bad-35.rq syn-bad-36.rq syn-bad-37.rq syn-bad-38.rq syn-bad-GRAPH-breaks-BGP.rq syn-bad-OPT-breaks-BGP.rq syn-bad-UNION-breaks-BGP.rq syn-leading-digits-in-prefixed-names.r manifest.ttl syntax-reduced-01.rq syntax-reduced-02.rq data-01.ttl data-02.ttl data-03.ttl dawg-data-01.ttl dawg-tp-01.rq dawg-tp-02.rq dawg-tp-03.rq dawg-tp-04.rq dawg-tp-05.rq manifest.ttl result-tp-01.ttl result-tp-02.ttl result-tp-03.ttl result-tp-04.ttl false.ttl manifest.ttl tP-byte-short-fail.rq tP-byte-short.rq tP-decimal-decimal.rq tP-double-decimal-fail.rq tP-double-decimal.rq tP-double-double.rq tP-double-float-fail.rq tP-double-float.rq tP-float-decimal-fail.rq tP-float-decimal.rq tP-float-float.rq tP-int-short.rq tP-integer-short.rq tP-long-short.rq tP-negativeInteger-short.rq tP-nonNegativeInteger-short.rq tP-nonPositiveInteger-short.rq tP-positiveInteger-short.rq tP-short-byte-fail.rq tP-short-decimal.rq tP-short-double.rq tP-short-float.rq tP-short-int-fail.rq tP-short-long-fail.rq tP-short-short-fail.rq tP-short-short.rq tP-unsignedByte-short.rq tP-unsignedInt-short.rq tP-unsignedLong-short.rq tP-unsignedShort-short.rq tP.ttl true.ttl x list_parser_tests.n3 list_reason_tests.n3 list_tests.n3 run_parser_tests.n3 run_reason_tests.n3 subclass.n3 testtypes.n3 LICENSE.md manifest.ttl 10tt_proof.n3 1tt1.n3 1tt10.n3 1tt2.n3 1tt3.n3 1tt4.n3 1tt5.n3 1tt6.n3 1tt7.n3 1tt8.n3 1tt9.n3 4color_answer.n3 4color_data.n3 4color_proof.n3 4color_query.n3 4color_rules.n3 abc.n3 ab_c.n3 acct3check1.n3 acct3check2.n3 acct3start.n3 agent1-answer.n3 agent1-map.n3 agent1-proof.n3 agent1-query.n3 agent2-answer.n3 agent2-map.n3 agent2-proof.n3 agent2-query.n3 age_rules_backward.n3 answer-001.n3 answer.n3 background_rules.n3 bankSW.n3 biE.n3 biP.n3 biQ.n3 blueproof001.n3 blueproof002.n3 blueproof003.n3 bmi_instances.n3 bmi_proof.n3 bmi_query.n3 bmi_rules.n3 c2d_rules.n3 ccd_rules.n3 checking.n3 components.n3 crypto-proof.n3 cryptoP.n3 data-001.n3 data.n3 de.n3 deA.n3 deE.n3 deQ.n3 dp.n3 dpE.n3 dpe_assumption.n3 dpe_proof.n3 dpe_query.n3 dpe_theory.n3 dpQ.n3 easter-proof.n3 easter.n3 easterE.n3 easterF.n3 easterP.n3 einstein.n3 einsteinE.n3 einsteinQ.n3 example001P.n3 example002P.n3 example003Q.n3 fcm-plugin.n3 fcm_proof.n3 fft_answer.n3 fft_proof.n3 fft_query.n3 fgcm-model.n3 fgcm-plugin.n3 fgcm-query.n3 fgcm_proof.n3 fib.n3 fibA.n3 fibE.n3 fibQ.n3 fl-rules.n3 floatingwoman-goal.n3 floatingwoman-proof.n3 floatingwoman.n3 food-declarations.n3 food-example.n3 food-preduction.n3 food-proof.n3 food-query.n3 food.n3 food2-proof.n3 food2.n3 forAllIn_answer.n3 forAllIn_proof.n3 forAllIn_query.n3 gedcom-facts.n3 gedcom-filter.n3 gedcom-proof.n3 gedcom-relations.n3 gen.n3 goal.n3 gps-example1.n3 gps-example2.n3 gps-plugin.n3 gps-proof1.n3 gps-proof2.n3 gps-query1.n3 gps-query2.n3 graph-10.n3 graph-100.n3 graph-1000.n3 graph-10000.n3 graph.axiom.n3 graph.filter.n3 graph.proof.n3 graphgen.n3 greenquery001.n3 greenquery002.n3 greenquery003.n3 hanoi.n3 hanoiE.n3 hypothesis-001.n3 initial.n3 iq-extra.n3 iq.n3 iq_proof.n3 lee_answer.n3 lee_proof.n3 lee_query.n3 lldmD.n3 lldmE.n3 lldmF.n3 lldmP.n3 medic.n3 medicE.n3 medicF.n3 mmln-gv-example.n3 mmln-gv-mln.n3 mmln-gv-proof.n3 mmln-gv-query.n3 mmln-plugin.n3 mq_proof.n3 nbbn-model.n3 nbbn-plugin.n3 nbbn-query.n3 nbbn_proof.n3 notIn_answer.n3 notIn_proof.n3 notIn_query.n3 numeral.n3 numeral_proof.n3 owl-AllDifferent.n3 owl-AllDisjointClasses.n3 owl-AllDisjointProperties.n3 owl-allValuesFrom.n3 owl-AsymmetricProperty.n3 owl-complementOf.n3 owl-differentFrom.n3 owl-disjointUnionOf.n3 owl-disjointWith.n3 owl-distinctMembers.n3 owl-equivalentClass.n3 owl-equivalentProperty.n3 owl-FunctionalProperty.n3 owl-hasKey.n3 owl-hasValue.n3 owl-intersectionOf.n3 owl-InverseFunctionalProperty.n3 owl-inverseOf.n3 owl-IrreflexiveProperty.n3 owl-maxCardinality.n3 owl-maxQualifiedCardinality.n3 owl-NegativePropertyAssertion.n3 owl-Nothing.n3 owl-oneOf.n3 owl-propertyChainAxiom.n3 owl-propertyDisjointWith.n3 owl-sameAs-ext.n3 owl-sameAs.n3 owl-someValuesFrom.n3 owl-SymmetricProperty.n3 owl-TransitiveProperty.n3 owl-unionOf.n3 palindrome-declarations.n3 palindrome-preduction.n3 palindrome-proof.n3 palindrome-query.n3 palindrome.n3 palindrome2-proof.n3 palindrome2-query.n3 palindrome2.n3 parteval-subclass.n3 path-9-3-proof.n3 path-9-3.n3 patient.n3 pi-proof.n3 pi-query.n3 pi.n3 polynomial.n3 polynomialgen.n3 preduction-plugin.n3 proof-001.n3 proof-10.n3 proof-100.n3 proof-1000.n3 proof-10000.n3 proof-2-10.n3 proof-2-100.n3 proof-2-1000.n3 proof-2-10000.n3 proof.n3 queens_answer.n3 queens_proof.n3 queens_query.n3 query-001.n3 query.n3 query1.n3 query10.n3 query100.n3 query11.n3 query12.n3 query13.n3 query14.n3 query15.n3 query16.n3 query17.n3 query18.n3 query19.n3 query2.n3 query20.n3 query21.n3 query22.n3 query23.n3 query24.n3 query25.n3 query26.n3 query27.n3 query28.n3 query29.n3 query3.n3 query30.n3 query31.n3 query32.n3 query33.n3 query34.n3 query35.n3 query36.n3 query37.n3 query38.n3 query39.n3 query4.n3 query40.n3 query41.n3 query42.n3 query43.n3 query44.n3 query45.n3 query46.n3 query47.n3 query48.n3 query49.n3 query5.n3 query50.n3 query51.n3 query52.n3 query53.n3 query54.n3 query55.n3 query56.n3 query57.n3 query58.n3 query59.n3 query6.n3 query60.n3 query61.n3 query62.n3 query63.n3 query64.n3 query65.n3 query66.n3 query67.n3 query68.n3 query69.n3 query7.n3 query70.n3 query71.n3 query72.n3 query73.n3 query74.n3 query75.n3 query76.n3 query77.n3 query78.n3 query79.n3 query8.n3 query80.n3 query81.n3 query82.n3 query83.n3 query84.n3 query85.n3 query86.n3 query87.n3 query88.n3 query89.n3 query9.n3 query90.n3 query91.n3 query92.n3 query93.n3 query94.n3 query95.n3 query96.n3 query97.n3 query98.n3 query99.n3 randomsample-proof.n3 randomsample-query.n3 randomsample-rule.n3 rdfs-domain.n3 rdfs-range.n3 rdfs-subClassOf.n3 rdfs-subPropertyOf.n3 redgraph001.n3 redgraph002.n3 redgraph003.n3 resto-proof.n3 resto.n3 restoG.n3 result.n3 rifE.n3 rifP.n3 rifQ.n3 rpo-rules.n3 rules-001.n3 sample-roundtrip-proof.n3 sample-roundtrip.n3 sample.n3 sdcoding-a-proof.n3 sdcoding-a.n3 sdcoding-answer.n3 sdcoding-proof.n3 sdcoding-q.n3 sdcoding-query.n3 sdcoding.n3 select-data-extra.n3 select-data.n3 select-proof-extra.n3 select-proof.n3 select-query.n3 skos-extra-rules.n3 skos-mapping-sample-snomed-icd10.n3 skos-mapping-validation-query.n3 skos-mapping-validation-rules.n3 skos-rules.n3 skos_mv_proof.n3 socrates.n3 socratesF.n3 socrates_proof.n3 streason-output.n3 streason-rules.n3 subtasks.n3 sudoku_answer.n3 sudoku_proof.n3 sudoku_query.n3 swetA.n3 swetA01.n3 swetA11.n3 swetA21.n3 swetA31.n3 swetD.n3 swetQ.n3 swetQ01.n3 swetQ11.n3 swetQ21.n3 swetQ31.n3 swet_proof.n3 tak.n3 takE.n3 takQ.n3 tasks.n3 test-dl-1000.n3 test-dt-1000.n3 test-facts.n3 test-proof-1000.n3 test-query.n3 test.n3 testE.n3 testQ.n3 test_answer.n3 test_data.n3 test_proof.n3 test_query.n3 train_data.n3 train_model.n3 train_model_proof.n3 train_query.n3 train_rules.n3 turing.n3 turingQ.n3 turing_proof.n3 usmE.n3 usmP.n3 usmQ.n3 utf8.n3 utf8_proof.n3 utm_answer.n3 utm_proof.n3 utm_query.n3 weightStatus_rules.n3 witch-goal.n3 witch-proof.n3 witch.n3 year.n3 a.n3 alarm.n3 alarmE.n3 alarmF.n3 aliceFoaf.n3 anatomy-facts.n3 anatomy-filter.n3 anatomy-result.n3 anatomy-rules.n3 b.n3 bc.n3 bcE.n3 bcF.n3 bobFoaf.n3 books.n3 booksE.n3 booksQ.n3 CountingE.n3 CountingQ.n3 D1.n3 D1E.n3 D1Q.n3 D2.n3 D2E.n3 D2Q.n3 da538tc1D.n3 da538tc1E.n3 da538tc1Q.n3 da538tc2D.n3 da538tc2E.n3 da538tc2Q.n3 danC.n3 danE.n3 danP.n3 danQ.n3 danT.n3 data-01.n3 data-02.n3 daveE.n3 daveQ.n3 davidE.n3 davidP.n3 davidQ.n3 dawg-data-01.n3 dawg-ot-0-01.n3 dawg-ot-0-02.n3 dawg-ot-0-03.n3 dawg-tp-0-01.n3 dawg-tp-0-02.n3 dawg-tp-05.n3 dawg-tp-1-01.n3 dawg-tp-2-01.n3 diagnosis.n3 disjunction.n3 disjunctionE.n3 disjunctionQ.n3 dl-safe_small.owl.n3 dog.n3 dogE.n3 dogQ.n3 easterE.n3 easterF.n3 easterP.n3 easterQ.n3 EntailmentE.n3 EntailmentQ.n3 ericE.n3 ericF.n3 ericP.n3 ericQ.n3 ericT.n3 ex2-1a.n3 ex2-1aE.n3 ex2-1aQ.n3 ex2-2a.n3 ex2-2aE.n3 ex2-2aQ.n3 ex2-3a.n3 ex2-3aE.n3 ex2-3aQ.n3 ex2-4a.n3 ex2-4aE.n3 ex2-4aQ.n3 ex3.n3 ex3E.n3 ex3Q.n3 exonE.n3 exonQ.n3 factorial.n3 factorialE.n3 factorialQ.n3 gate.n3 gateE.n3 gateF.n3 gene.n3 geneE.n3 geneF.n3 gmp.n3 gmpE.n3 gmpF.n3 grahamC.n3 grahamE.n3 grahamP.n3 grahamQ.n3 henry.n3 icalD001.n3 icalE001.n3 icalE002.n3 icalQ001.n3 icalQ002.n3 icalR.n3 JoeCo.n3 kendallE.n3 kendallP.n3 kendallQ.n3 LanguageE.n3 LanguageQ.n3 LexicalSpaceE.n3 LexicalSpaceQ.n3 librarianE.n3 librarianP.n3 librarianQ.n3 metastatic.n3 metastaticE.n3 metastaticF.n3 metastaticP.n3 metastaticP001.n3 metastaticP002.n3 metastaticQ.n3 metastaticQ001.n3 metastaticR.n3 michaelC.n3 michaelE.n3 michaelP.n3 minsuC.n3 minsuE.n3 minsuP.n3 NamespaceE.n3 NamespaceQ.n3 nciOncologyE.n3 nciOncologyQ.n3 not-galen.n3 ontology-for-data-model.n3 OptionalPathE.n3 OptionalPathQ.n3 origin.n3 originE.n3 originQ.n3 pat.n3 patE.n3 PathE.n3 PathQ.n3 patQ.n3 QuantificationE.n3 QuantificationQ.n3 query-survey-1.n3 query-survey-10.n3 query-survey-11.n3 query-survey-12.n3 query-survey-13.n3 query-survey-2.n3 query-survey-3.n3 query-survey-8.n3 query-survey-9.n3 query-survey-result-1.n3 query-survey-result-10.n3 query-survey-result-11.n3 query-survey-result-12.n3 query-survey-result-13.n3 query-survey-result-2.n3 query-survey-result-3.n3 query-survey-result-8.n3 query-survey-result-9.n3 radlex.n3 radlexE.n3 radlexQ.n3 RecursionE.n3 RecursionQ.n3 result-ot-0-01.n3 result-ot-0-02.n3 result-ot-0-03.n3 result-tp-0-01.n3 result-tp-0-02.n3 result-tp-05.n3 result-tp-1-01.n3 result-tp-2-01.n3 robC.n3 robE.n3 robP.n3 robQ.n3 rogier.n3 rtE.n3 rtQ.n3 sameAsE.n3 sameAsQ.n3 sample.n3 sampleE.n3 sampleP.n3 sampleQ.n3 SequenceE.n3 SequenceQ.n3 sethC.n3 sethE.n3 sethP.n3 simplegraph_query.n3 socratesP.n3 socratesQ.n3 socratesR.n3 srcE.n3 srcP.n3 srcQ.n3 statement1.n3 stc1.n3 stc1E.n3 stc2a.n3 stc2aE.n3 stc2b.n3 stc2bE.n3 stc3a.n3 stc3aE.n3 stc3b.n3 stc3bE.n3 swrl-n3-rules.n3 swrl-n3-rulesQ.n3 testC.n3 testP.n3 u1.n3 u2.n3 UnionE.n3 UnionQ.n3 unsaid.n3 unsaidE.n3 unsaidQ.n3 v.n3 variableSubstitution.n3 vcard.n3 vcardE.n3 vcardF.n3 vcardP.n3 vcardQ.n3 wet.n3 wetE.n3 wetF.n3 xanthippe.n3 xanthippeQ.n3 FACTSboxdata.n3 FACTSboxgeometrydetection.n3 FACTSfacedetection.n3 FACTSfaceedgedetection.n3 FACTSfeaturerecognition.n3 FACTShousewalls.n3 FACTShousewallsmeshed.n",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport codecs\nimport os\nimport re\n\nfrom setuptools import find_packages, setup\n\nkwargs = {}\nkwargs[\"install_requires\"] = [\n\"isodate\",\n\"pyparsing\",\n\"setuptools\",\n\"importlib-metadata; python_version < '3.8.0'\",\n]\nkwargs[\"tests_require\"] = [\n\"html5lib\",\n\"pytest\",\n\"pytest-cov\",\n]\nkwargs[\"extras_require\"] = {\n\"html\": [\"html5lib\"],\n\"tests\": kwargs[\"tests_require\"],\n\"docs\": [\n\"myst-parser\",\n\"sphinx < 6\",\n\"sphinxcontrib-apidoc\",\n\"sphinxcontrib-kroki\",\n\"sphinx-autodoc-typehints\",\n],\n\"berkeleydb\": [\"berkeleydb\"],\n\"networkx\": [\"networkx\"],\n\"dev\": [\n\"black==22.6.0\",\n\"flake8\",\n\"flakeheaven; python_version >= '3.8.0'\",\n\"isort\",\n\"mypy\",\n\"pep8-naming\",\n\"types-setuptools\",\n],\n}\n\n\ndef find_version(filename):\n_version_re = re.compile(r'__version__ = \"(.*)\"')\nfor line in open(filename):\nversion_match = _version_re.match(line)\nif version_match:\nreturn version_match.group(1)\n\n\ndef open_local(paths, mode=\"r\", encoding=\"utf8\"):\npath = os.path.join(os.path.abspath(os.path.dirname(__file__)), *paths)\nreturn codecs.open(path, mode, encoding)\n\n\nwith open_local([\"README.md\"], encoding=\"utf-8\") as readme:\nlong_description = readme.read()\n\nversion = find_version(\"rdflib\/__init__.py\")\n\npackages = find_packages(exclude=(\"examples*\", \"test*\"))\n\nif os.environ.get(\"READTHEDOCS\", None):\n# if building docs for RTD\n# install examples, to get docstrings\npackages.append(\"examples\")\n\nsetup(\nname=\"rdflib\",\nversion=version,\ndescription=\"RDFLib is a Python library for working with RDF, a \"\n\"simple yet powerful language for representing information.\",\nauthor=\"Daniel 'eikeon' Krech\",\nauthor_email=\"eikeon@eikeon.com\",\nmaintainer=\"RDFLib Team\",\nmaintainer_email=\"rdflib-dev@googlegroups.com\",\nurl=\"https:\/\/github.com\/RDFLib\/rdflib\",\nlicense=\"bsd-3-clause\",\nplatforms=[\"any\"],\npython_requires=\">=3.7\",\nclassifiers=[\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3.11\",\n\"License :: OSI Approved :: BSD License\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Operating System :: OS Independent\",\n\"Natural Language :: English\",\n],\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\npackages=packages,\nentry_points={\n\"console_scripts\": [\n\"rdfpipe = rdflib.tools.rdfpipe:main\",\n\"csv2rdf = rdflib.tools.csv2rdf:main\",\n\"rdf2dot = rdflib.tools.rdf2dot:main\",\n\"rdfs2dot = rdflib.tools.rdfs2dot:main\",\n\"rdfgraphisomorphism = rdflib.tools.graphisomorphism:main\",\n],\n},\n**kwargs,\n)\n"
    },
    {
        "package_name": "readme_renderer-36.0",
        "file_list": ".coveragerc CHANGES.rst LICENSE MANIFEST.in PKG-INFO pyproject.toml pytest.ini README.rst clean.py markdown.py py.typed rst.py txt.py __about__.py __init__.py __main__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py test_CommonMark_001.html test_CommonMark_001.md test_CommonMark_002.html test_CommonMark_002.md test_CommonMark_003.html test_CommonMark_003.md test_CommonMark_004.html test_CommonMark_004.md test_CommonMark_005.html test_CommonMark_005.md test_CommonMark_006.html test_CommonMark_006.md test_CommonMark_007.html test_CommonMark_007.md test_CommonMark_008.html test_CommonMark_008.md test_CommonMark_009.html test_CommonMark_009.md test_CommonMark_smart_strong.html test_CommonMark_smart_strong.md test_CommonMark_style.html test_CommonMark_style.md test_GFM_001.html test_GFM_001.md test_GFM_002.html test_GFM_002.md test_GFM_003.html test_GFM_003.md test_GFM_004.html test_GFM_004.md test_GFM_005.html test_GFM_005.md test_GFM_006.html test_GFM_006.md test_GFM_007.html test_GFM_007.md test_GFM_008.html test_GFM_008.md test_GFM_009.html test_GFM_009.md test_GFM_010.html test_GFM_010.md test_GFM_011.html test_GFM_011.md test_GFM_012.html test_GFM_012.md test_GFM_013.html test_GFM_013.md test_GFM_014.html test_GFM_014.md test_GFM_015.html test_GFM_015.md test_GFM_016.html test_GFM_016.md test_GFM_017.html test_GFM_017.md test_GFM_018.html test_GFM_018.md test_GFM_019.html test_GFM_019.md test_GFM_020.html test_GFM_020.md test_GFM_021.html test_GFM_021.md test_GFM_022.html test_GFM_022.md test_GFM_023.html test_GFM_023.md test_GFM_024.html test_GFM_024.md test_GFM_025.html test_GFM_025.md test_GFM_doublequotes.html test_GFM_doublequotes.md test_GFM_highlight.html test_GFM_highlight.md test_GFM_highlight_default_py.html test_GFM_highlight_default_py.md test_GFM_img.html test_GFM_img.md test_GFM_malicious_pre.html test_GFM_malicious_pre.md test_GFM_style.html test_GFM_style.md test_rst_003.html test_rst_003.rst test_rst_004.html test_rst_004.rst test_rst_005.html test_rst_005.rst test_rst_006.html test_rst_006.rst test_rst_007.html test_rst_007.rst test_rst_008.html test_rst_008.rst test_rst_admonitions.html test_rst_admonitions.rst test_rst_caption.html test_rst_caption.rst test_rst_docinfo.html test_rst_docinfo.rst test_rst_linkify.html test_rst_linkify.rst test_rst_math.html test_rst_math.rst test_rst_png.html test_rst_png.rst test_rst_png_attrs.html test_rst_png_attrs.rst test_rst_svg.html test_rst_svg.rst test_rst_svg_attrs.html test_rst_svg_attrs.rst test_rst_tables.html test_rst_tables.rst test_txt_001.html test_txt_001.txt test_clean.py test_markdown.py test_noextra.py test_rst.py test_txt.py __init__.py tox.ini",
        "setup.py": "# Copyright 2014 Donald Stufft\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport pathlib\n\nimport setuptools\n\nbase_dir = pathlib.Path(__file__).parent\n\nwith open(base_dir.joinpath(\"readme_renderer\", \"__about__.py\")) as f:\nabout = {}\nexec(f.read(), about)\n\nwith open(base_dir.joinpath(\"README.rst\")) as f:\nlong_description = f.read()\n\n\nsetuptools.setup(\nname=about[\"__title__\"],\nversion=about[\"__version__\"],\ndescription=about[\"__summary__\"],\nlong_description=long_description,\nlicense=about[\"__license__\"],\nurl=about[\"__uri__\"],\nauthor=about[\"__author__\"],\nauthor_email=about[\"__email__\"],\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Natural Language :: English\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Operating System :: POSIX\",\n\"Operating System :: POSIX :: BSD\",\n\"Operating System :: POSIX :: Linux\",\n\"Operating System :: Microsoft :: Windows\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n],\ninstall_requires=[\"bleach>=2.1.0\", \"docutils>=0.13.1\", \"Pygments>=2.5.1\"],\ninclude_package_data=True,\nextras_require={\"md\": \"cmarkgfm>=0.8.0\"},\npackages=setuptools.find_packages(exclude=[\"tests\", \"tests.*\"]),\npython_requires=\">=3.7\",\n)\n"
    },
    {
        "package_name": "rec-avro-0.0.4",
        "file_list": "PKG-INFO README.md setup.cfg setup.py core.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import find_packages, setup\nimport pathlib\n\n# The directory containing this file\nHERE = pathlib.Path(__file__).parent\n\n# The text of the README file\nREADME = (HERE \/ 'README.md').read_text()\n\nsetup(\nname='rec-avro',\nversion='0.0.4',\ndescription='Avro schema and data converters supporting storing arbitrary nested python data structures.',\nlong_description=README,\nlong_description_content_type='text\/markdown',\nkeywords = \"avro json schema nested\",\nurl='https:\/\/github.com\/bmizhen\/rec-avro',\nauthor='Boris Mizhen',\nauthor_email='rec-avro@boriska.com',\npython_requires='>=3',\nlicense='MIT',\npackage_dir={'': 'src'},\npackages=find_packages(where='src'),\ninstall_requires=[],\nsetup_requires=['pytest-runner'],\ntests_require=['fastavro', 'pytest']\n)\n\n"
    },
    {
        "package_name": "records-0.5.3",
        "file_list": "HISTORY.rst LICENSE MANIFEST.in PKG-INFO README.rst dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt records.py setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport io\nimport os\nimport sys\nfrom codecs import open\nfrom shutil import rmtree\n\nfrom setuptools import setup, Command\n\nhere = os.path.abspath(os.path.dirname(__file__))\nwith io.open(os.path.join(here, 'README.rst'), encoding='utf-8') as f:\nlong_description = '\\n' + f.read()\n\n\nclass PublishCommand(Command):\n\"\"\"Support setup.py publish.\"\"\"\n\ndescription = 'Build and publish the package.'\nuser_options = []\n\n@staticmethod\ndef status(s):\n\"\"\"Prints things in bold.\"\"\"\nprint('\\033[1m{}\\033[0m'.format(s))\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\ntry:\nself.status('Removing previous builds...')\nrmtree(os.path.join(here, 'dist'))\nexcept FileNotFoundError:\npass\n\nself.status('Building Source and Wheel (universal) distribution...')\nos.system('{} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\nself.status('Uploading the package to PyPi via Twine...')\nos.system('twine upload dist\/*')\n\nsys.exit()\n\nrequires = ['SQLAlchemy;python_version>=\"3.0\"',\n'SQLAlchemy<1.1;python_version<\"3.0\"',\n'openpyxl<2.5.0', # temporary fix to issue #142\n'tablib>=0.11.4',\n'docopt']\nversion = '0.5.3'\n\n\ndef read(f):\nreturn open(f, encoding='utf-8').read()\n\nsetup(\nname='records',\nversion=version,\ndescription='SQL for Humans',\nlong_description=read('README.rst') + '\\n\\n' + read('HISTORY.rst'),\nauthor='Kenneth Reitz',\nauthor_email='me@kennethreitz.org',\nurl='https:\/\/github.com\/kennethreitz\/records',\npy_modules=['records'],\npackage_data={'': ['LICENSE']},\ninclude_package_data=True,\nentry_points={\n'console_scripts': ['records=records:cli'],\n},\ninstall_requires=requires,\nextras_require={\n'pandas': ['tablib[pandas]'],\n'pg': ['psycopg2'],\n'redshift': ['sqlalchemy-redshift', 'psycopg2']\n# TODO: Add the rest.\n},\nlicense='ISC',\nzip_safe=False,\nclassifiers=(\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Natural Language :: English',\n'License :: OSI Approved :: ISC License (ISCL)',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: Implementation :: CPython',\n),\ncmdclass={\n'publish': PublishCommand,\n}\n)\n"
    },
    {
        "package_name": "redis-py-cluster-2.1.3",
        "file_list": "authors.rst License.txt release-notes.rst LICENSE MANIFEST.in PKG-INFO README.md client.py connection.py crc.py exceptions.py nodemanager.py pipeline.py pubsub.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\n\n# python std lib\nimport os\n\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\n# if you are using vagrant, just delete os.link directly,\n# The hard link only saves a little disk space, so you should not care\nif os.getenv('USER', '').lower() == 'vagrant':\ndel os.link\n\nwith open('README.md') as f:\nreadme = f.read()\nwith open(os.path.join('docs', 'release-notes.rst')) as f:\nhistory = f.read()\n\nsetup(\nname=\"redis-py-cluster\",\nversion=\"2.1.3\",\ndescription=\"Library for communicating with Redis Clusters. Built on top of redis-py lib\",\nlong_description=readme + '\\n\\n' + history,\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Johan Andersson\",\nauthor_email=\"Grokzen@gmail.com\",\nmaintainer='Johan Andersson',\nmaintainer_email='Grokzen@gmail.com',\npackages=[\"rediscluster\"],\nurl='http:\/\/github.com\/grokzen\/redis-py-cluster',\nlicense='MIT',\ninstall_requires=[\n'redis>=3.0.0,<4.0.0'\n],\npython_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4\",\nextras_require={\n'hiredis': [\n\"hiredis>=0.1.3\",\n],\n},\nkeywords=[\n'redis',\n'redis cluster',\n],\nclassifiers=[\n# As from https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n# 'Development Status :: 1 - Planning',\n# 'Development Status :: 2 - Pre-Alpha',\n# 'Development Status :: 3 - Alpha',\n# 'Development Status :: 4 - Beta',\n'Development Status :: 5 - Production\/Stable',\n# 'Development Status :: 6 - Mature',\n# 'Development Status :: 7 - Inactive',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Environment :: Web Environment',\n'Operating System :: POSIX',\n'License :: OSI Approved :: MIT License',\n]\n)\n"
    },
    {
        "package_name": "rednose-1.3.0",
        "file_list": "LICENCE MANIFEST.in PKG-INFO readme.rst dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt rednose.py setup.cfg setup.py basic_test_suite.py class_test_failure.py encoding_test.py encoding_test_with_literals.py new_tests.py sample_test.py __init__.py",
        "setup.py": "from os import path\nfrom setuptools import setup, find_packages\n\n\ndef read(fname):\ntry:\nreturn open(path.join(path.dirname(__file__), fname)).read()\nexcept IOError:\nreturn \"\"\"A module for making nose pretty using colors.\"\"\"\n\nsetup(\npackages=find_packages(exclude=['test', 'test.*']),\ndescription='coloured output for nosetests',\nentry_points={'nose.plugins.0.10': ['NOSETESTS_PLUGINS = rednose:RedNose']},\ninstall_requires=['setuptools', 'termstyle >=0.1.7', 'colorama'],\ntests_require=['six==1.10.0'],\nlong_description=read('README.rst'),\nname='rednose',\npy_modules=['rednose'],\nurl='https:\/\/github.com\/JBKahn\/rednose',\nversion='1.3.0',\nclassifiers=[\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Topic :: Software Development :: Testing\",\n],\nkeywords='test nosetests nose nosetest output colour console',\nlicense='MIT',\ntest_suite='test_files.new_tests',\n)\n"
    },
    {
        "package_name": "removestar-1.3.1",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.md helper.py removestar.py test_removestar.py __init__.py _version.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py versioneer.py",
        "setup.py": "import setuptools\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nimport versioneer\n\nsetuptools.setup(\nname=\"removestar\",\nversion=versioneer.get_version(),\ncmdclass=versioneer.get_cmdclass(),\nauthor=\"Aaron Meurer\",\nauthor_email=\"asmeurer@gmail.com\",\ndescription=\"A tool to automatically replace 'import *' imports with explicit imports in files\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/www.asmeurer.com\/removestar\/\",\npackages=setuptools.find_packages(),\nclassifiers=[\n\"Programming Language :: Python :: 3\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n],\nentry_points={'console_scripts': [ 'removestar = removestar.__main__:main']},\npython_requires= '>=3.6',\ninstall_requires=[\n'pyflakes'\n],\nlicense='MIT',\n)\n"
    },
    {
        "package_name": "requests-2.28.1",
        "file_list": "HISTORY.md LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md adapters.py api.py auth.py certs.py compat.py cookies.py exceptions.py help.py hooks.py models.py packages.py sessions.py status_codes.py structures.py utils.py _internal_utils.py __init__.py __version__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt requirements-dev.txt setup.cfg setup.py compat.py conftest.py server.py __init__.py test_help.py test_hooks.py test_lowlevel.py test_packages.py test_requests.py test_structures.py test_testserver.py test_utils.py utils.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\nimport os\nimport sys\nfrom codecs import open\n\nfrom setuptools import setup\nfrom setuptools.command.test import test as TestCommand\n\nCURRENT_PYTHON = sys.version_info[:2]\nREQUIRED_PYTHON = (3, 7)\n\nif CURRENT_PYTHON < REQUIRED_PYTHON:\nsys.stderr.write(\n\"\"\"\n==========================\nUnsupported Python version\n==========================\nThis version of Requests requires at least Python {}.{}, but\nyou're trying to install it on Python {}.{}. To resolve this,\nconsider upgrading to a supported Python version.\n\nIf you can't upgrade your Python version, you'll need to\npin to an older version of Requests (<2.28).\n\"\"\".format(\n*(REQUIRED_PYTHON + CURRENT_PYTHON)\n)\n)\nsys.exit(1)\n\n\nclass PyTest(TestCommand):\nuser_options = [(\"pytest-args=\", \"a\", \"Arguments to pass into py.test\")]\n\ndef initialize_options(self):\nTestCommand.initialize_options(self)\ntry:\nfrom multiprocessing import cpu_count\n\nself.pytest_args = [\"-n\", str(cpu_count()), \"--boxed\"]\nexcept (ImportError, NotImplementedError):\nself.pytest_args = [\"-n\", \"1\", \"--boxed\"]\n\ndef finalize_options(self):\nTestCommand.finalize_options(self)\nself.test_args = []\nself.test_suite = True\n\ndef run_tests(self):\nimport pytest\n\nerrno = pytest.main(self.pytest_args)\nsys.exit(errno)\n\n\n# 'setup.py publish' shortcut.\nif sys.argv[-1] == \"publish\":\nos.system(\"python setup.py sdist bdist_wheel\")\nos.system(\"twine upload dist\/*\")\nsys.exit()\n\nrequires = [\n\"charset_normalizer>=2,<3\",\n\"idna>=2.5,<4\",\n\"urllib3>=1.21.1,<1.27\",\n\"certifi>=2017.4.17\",\n]\ntest_requirements = [\n\"pytest-httpbin==0.0.7\",\n\"pytest-cov\",\n\"pytest-mock\",\n\"pytest-xdist\",\n\"PySocks>=1.5.6, !=1.5.7\",\n\"pytest>=3\",\n]\n\nabout = {}\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, \"requests\", \"__version__.py\"), \"r\", \"utf-8\") as f:\nexec(f.read(), about)\n\nwith open(\"README.md\", \"r\", \"utf-8\") as f:\nreadme = f.read()\n\nsetup(\nname=about[\"__title__\"],\nversion=about[\"__version__\"],\ndescription=about[\"__description__\"],\nlong_description=readme,\nlong_description_content_type=\"text\/markdown\",\nauthor=about[\"__author__\"],\nauthor_email=about[\"__author_email__\"],\nurl=about[\"__url__\"],\npackages=[\"requests\"],\npackage_data={\"\": [\"LICENSE\", \"NOTICE\"]},\npackage_dir={\"requests\": \"requests\"},\ninclude_package_data=True,\npython_requires=\">=3.7, <4\",\ninstall_requires=requires,\nlicense=about[\"__license__\"],\nzip_safe=False,\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Web Environment\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Natural Language :: English\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3.11\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Topic :: Internet :: WWW\/HTTP\",\n\"Topic :: Software Development :: Libraries\",\n],\ncmdclass={\"test\": PyTest},\ntests_require=test_requirements,\nextras_require={\n\"security\": [],\n\"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n\"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n},\nproject_urls={\n\"Documentation\": \"https:\/\/requests.readthedocs.io\",\n\"Source\": \"https:\/\/github.com\/psf\/requests\",\n},\n)\n"
    },
    {
        "package_name": "requests-async-0.6.2",
        "file_list": "LICENSE.md PKG-INFO README.md adapters.py api.py asgi.py cookies.py exceptions.py models.py sessions.py status_codes.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport re\n\nfrom setuptools import setup\n\n\ndef get_version(package):\n\"\"\"\nReturn package version as listed in `__version__` in `init.py`.\n\"\"\"\nwith open(os.path.join(package, \"__init__.py\")) as f:\nreturn re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", f.read()).group(1)\n\n\ndef get_long_description():\n\"\"\"\nReturn the README.\n\"\"\"\nwith open(\"README.md\", encoding=\"utf8\") as f:\nreturn f.read()\n\n\ndef get_packages(package):\n\"\"\"\nReturn root package and all sub-packages.\n\"\"\"\nreturn [\ndirpath\nfor dirpath, dirnames, filenames in os.walk(package)\nif os.path.exists(os.path.join(dirpath, \"__init__.py\"))\n]\n\n\nsetup(\nname=\"requests-async\",\npython_requires=\">=3.6\",\nversion=get_version(\"requests_async\"),\nurl=\"https:\/\/github.com\/encode\/requests-async\",\nlicense=\"BSD\",\ndescription=\"async-await support for `requests`.\",\nlong_description=get_long_description(),\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Tom Christie\",\nauthor_email=\"tom@tomchristie.com\",\npackages=get_packages(\"requests_async\"),\ndata_files=[(\"\", [\"LICENSE.md\"])],\ninstall_requires=[\"requests==2.*\", \"http3==0.6.*\"],\nclassifiers=[\n\"Development Status :: 3 - Alpha\",\n\"Environment :: Web Environment\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: BSD License\",\n\"Operating System :: OS Independent\",\n\"Topic :: Internet :: WWW\/HTTP\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n],\n)\n"
    },
    {
        "package_name": "requests-futures-1.0.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst sessions.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt requirements-python-2.7.txt requirements-python-3.txt setup.cfg setup.py test_requests_futures.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport os\nimport sys\n\nimport requests_futures\n\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\nif sys.argv[-1] == 'publish':\nos.system('python setup.py sdist upload')\nsys.exit()\n\npackages = [\n'requests_futures',\n]\n\nrequires = [\n'requests>=1.2.0',\n'futures>=2.1.3; python_version<\"3.2\"'\n]\n\nsetup(\nname='requests-futures',\nversion=requests_futures.__version__,\ndescription='Asynchronous Python HTTP for Humans.',\nlong_description=open('README.rst').read(),\nauthor='Ross McFarland',\nauthor_email='rwmcfa1@neces.com',\npackages=packages,\npackage_dir={'requests_futures': 'requests_futures'},\npackage_data={'requests_futures': ['LICENSE', 'README.rst']},\ninclude_package_data=True,\ninstall_requires=requires,\nsetup_requires=['setuptools>=38.6.1'],\nlicense='Apache License v2',\nurl='https:\/\/github.com\/ross\/requests-futures',\nzip_safe=False,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Natural Language :: English',\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n],\n)\n"
    },
    {
        "package_name": "requests-html-0.10.0",
        "file_list": "PKG-INFO README.rst dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt requests_html.py setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n# $ pip install twine\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\n\nfrom setuptools import setup, Command\n\n# Package meta-data.\nNAME = 'requests-html'\nDESCRIPTION = 'HTML Parsing for Humans.'\nURL = 'https:\/\/github.com\/kennethreitz\/requests-html'\nEMAIL = 'me@kennethreitz.org'\nAUTHOR = 'Kenneth Reitz'\nVERSION = '0.10.0'\n\n# What packages are required for this module to be executed?\nREQUIRED = [\n'requests', 'pyquery', 'fake-useragent', 'parse', 'bs4', 'w3lib', 'pyppeteer>=0.0.14'\n]\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.rst' is present in your MANIFEST.in file!\nwith io.open(os.path.join(here, 'README.rst'), encoding='utf-8') as f:\nlong_description = '\\n' + f.read()\n\nclass UploadCommand(Command):\n\"\"\"Support setup.py upload.\"\"\"\n\ndescription = 'Build and publish the package.'\nuser_options = []\n\n@staticmethod\ndef status(s):\n\"\"\"Prints things in bold.\"\"\"\nprint('\\033[1m{0}\\033[0m'.format(s))\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\ntry:\nself.status('Removing previous builds\u2026')\nrmtree(os.path.join(here, 'dist'))\nexcept OSError:\npass\n\nself.status('Building Source and Wheel (universal) distribution\u2026')\nos.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\nself.status('Uploading the package to PyPi via Twine\u2026')\nos.system('twine upload dist\/*')\n\nself.status('Publishing git tags\u2026')\nos.system('git tag v{0}'.format(VERSION))\nos.system('git push --tags')\n\nsys.exit()\n\n\n# Where the magic happens:\nsetup(\nname=NAME,\nversion=VERSION,\ndescription=DESCRIPTION,\nlong_description=long_description,\nauthor=AUTHOR,\nauthor_email=EMAIL,\nurl=URL,\npython_requires='>=3.6.0',\n# If your package is a single module, use this instead of 'packages':\npy_modules=['requests_html'],\n\n# entry_points={\n# 'console_scripts': ['mycli=mymodule:cli'],\n# },\ninstall_requires=REQUIRED,\ninclude_package_data=True,\nlicense='MIT',\nclassifiers=[\n# Trove classifiers\n# Full list: https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy'\n],\n# $ setup.py publish support.\ncmdclass={\n'upload': UploadCommand,\n},\n)\n"
    },
    {
        "package_name": "requests-oauth-0.4.1",
        "file_list": "LICENSE MANIFEST.in auth.py hook.py __init__.py PKG-INFO README.md dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py tests.py test_settings.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nfrom setuptools import setup, find_packages\n\nversion = '0.4.1'\n\nsetup(\nname='requests-oauth',\nversion=version,\ndescription='Hook for adding Open Authentication support to Python-requests HTTP library.',\nlong_description=open('README.md').read(),\nauthor='Miguel Araujo',\nauthor_email='miguel.araujo.perez@gmail.com',\nurl='http:\/\/github.com\/maraujop\/requests-oauth',\npackages=find_packages(),\ninstall_requires=['requests>=0.12.1', ],\nlicense='BSD',\nclassifiers=(\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'Programming Language :: Python',\n\"License :: OSI Approved :: BSD License\",\n\"Operating System :: OS Independent\",\n\"Topic :: Internet :: WWW\/HTTP\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n),\nkeywords=['requests', 'python-requests', 'OAuth', 'open authentication'],\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "Resource-0.2.1",
        "file_list": "PKG-INFO dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt auth.py default_settings.py __init__.py serializer.py view.py __init__.py serializer.py view.py __init__.py __init__.py dufilter.py root.py auth.py signer.py user.py view.py __init__.py __init__.py exceptions.py filter.py form.py django.py flask.py view.py __init__.py logger.py request.py resource.py response.py status.py utils.py view.py _compat.py __init__.py setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nfrom setuptools import setup, find_packages\n\ndescription = 'A Python library concentrated on the Resource layer of RESTful APIs.'\n\ninstall_requires = [\n'python-easyconfig>=0.1.0',\n'JsonForm>=0.0.2',\n'JsonSir>=0.0.2',\n]\n\nsetup(\nname='Resource',\nversion='0.2.1',\nauthor='RussellLuo',\nauthor_email='luopeng.he@gmail.com',\nmaintainer='RussellLuo',\nmaintainer_email='luopeng.he@gmail.com',\nkeywords='Resource, REST, Python',\ndescription=description,\nlicense='MIT',\nlong_description=description,\npackages=find_packages(),\nurl='https:\/\/github.com\/RussellLuo\/resource',\ninstall_requires=install_requires,\n)\n"
    },
    {
        "package_name": "responses-0.21.0",
        "file_list": "CHANGES LICENSE MANIFEST.in PKG-INFO README.rst matchers.py py.typed registries.py test_matchers.py test_multithreading.py test_registries.py test_responses.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\n\"\"\"\nresponses\n=========\n\nA utility library for mocking out the `requests` Python library.\n\n:copyright: (c) 2015 David Cramer\n:license: Apache 2.0\n\"\"\"\n\nimport sys\n\nfrom setuptools import setup\nfrom setuptools.command.test import test as TestCommand\n\nsetup_requires = []\n\ninstall_requires = [\n\"requests>=2.0,<3.0\",\n\"urllib3>=1.25.10\",\n\"typing_extensions; python_version < '3.8'\",\n]\n\ntests_require = [\n\"pytest>=7.0.0\",\n\"coverage >= 6.0.0\",\n\"pytest-cov\",\n\"pytest-asyncio\",\n\"pytest-localserver\",\n\"flake8\",\n\"types-mock\",\n\"types-requests\",\n\"mypy\",\n]\n\nif \"test\" in sys.argv:\nsetup_requires.extend(tests_require)\n\nextras_require = {\"tests\": tests_require}\n\n\nclass PyTest(TestCommand):\n\"\"\"Designed to be run via `python setup.py test`\"\"\"\n\ndef finalize_options(self):\nTestCommand.finalize_options(self)\nself.test_args = []\nself.test_suite = True\n\ndef run_tests(self):\n# import here, cause outside the eggs aren't loaded\nimport pytest\n\nerrno = pytest.main(self.test_args)\nsys.exit(errno)\n\n\nsetup(\nname=\"responses\",\nversion=\"0.21.0\",\nauthor=\"David Cramer\",\ndescription=\"A utility library for mocking out the `requests` Python library.\",\nurl=\"https:\/\/github.com\/getsentry\/responses\",\nlicense=\"Apache 2.0\",\nlong_description=open(\"README.rst\").read(),\nlong_description_content_type=\"text\/x-rst\",\npackages=[\"responses\"],\nzip_safe=False,\npython_requires=\">=3.7\",\ninstall_requires=install_requires,\nextras_require=extras_require,\ntests_require=tests_require,\nsetup_requires=setup_requires,\ncmdclass={\"test\": PyTest},\ninclude_package_data=True,\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"Intended Audience :: System Administrators\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Software Development\",\n],\n)\n"
    },
    {
        "package_name": "responsibleai-0.20.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.md requirements.txt aggregate_balance_measures.py balance_measures.py constants.py data_balance_utils.py distribution_balance_measures.py feature_balance_measures.py __init__.py exceptions.py base_manager.py causal_manager.py counterfactual_manager.py data_balance_manager.py error_analysis_manager.py explainer_manager.py __init__.py __init__.py model_analysis.py __init__.py constants.py rai_base_insights.py rai_insights.py __init__.py serialization_utilities.py base_config.py __init__.py _data_validations.py _interfaces.py constants.py __init__.py base_manager.py causal_manager.py counterfactual_manager.py error_analysis_manager.py explainer_manager.py __init__.py causal_config.py causal_constants.py causal_result.py schema_0.1.0.json __init__.py __init__.py counterfactual_examples_output_v1.0.json counterfactual_examples_output_v2.0.json __init__.py __init__.py error_analysis_output_v0.0.json __init__.py __init__.py attribute_serialization.py base_result.py state_directory_management.py versions.py __init__.py __init__.py __init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py conftest.py test_causal_constants.py test_causal_different_data_types.py test_causal_general.py test_causal_manager.py test_causal_result.py test_causal_result_versioning.py __init__.py causal_manager_validator.py common_utils.py test_counterfactual_advanced_features.py __init__.py counterfactual_manager_validator.py conftest.py test_aggregate_balance_measures.py test_data_balance_helper.py test_data_balance_manager.py test_distribution_balance_measures.py test_feature_balance_measures.py __init__.py error_analysis_validator.py explainer_manager_validator.py test_dependencies.py test_exceptions.py test_model_analysis.py test_model_analysis_validations.py test_model_serializer.py test_rai_insights.py test_rai_insights_save_and_load_scenarios.py test_rai_insights_validations.py test_responsibleai_managers_backcompat.py test_serialization_utilities.py test_state_directory_management.py test_attribute_serialization.py test_versions.py __init__.py __init__.py __init__.py",
        "setup.py": "# Copyright (c) Microsoft Corporation\n# Licensed under the MIT License.\n\nimport os\n\nimport setuptools\n\n# Version will be read from version.py\nversion = ''\nname = 'responsibleai'\n# Fetch Version\nwith open(os.path.join(name, '__version__.py')) as f:\ncode = compile(f.read(), f.name, 'exec')\nexec(code)\n\n# Fetch ReadMe\nwith open('README.md', 'r') as fh:\nlong_description = fh.read()\n\n# Use requirements.txt to set the install_requires\nwith open('requirements.txt') as f:\ninstall_requires = [line.strip() for line in f]\n\nsetuptools.setup(\nname=name, # noqa: F821\nversion=version, # noqa: F821\nauthor=\"Roman Lutz, Ilya Matiach, Ke Xu\",\nauthor_email=\"raiwidgets-maintain@microsoft.com\",\ndescription=\"SDK API to explain \"\n\"models, generate counterfactual examples, analyze \"\n\"causal effects and analyze errors in Machine Learning \"\n\"models.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/microsoft\/responsible-ai-toolbox\",\npackages=setuptools.find_packages(),\npackage_data={\n'': [\n'schema_*.json',\n'counterfactual_examples_output_*.json',\n'error_analysis_output_v0.0.json',\n]\n},\ninclude_package_data=True,\npython_requires='>=3.6',\ninstall_requires=install_requires,\nclassifiers=[\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Development Status :: 3 - Alpha\"\n]\n)\n"
    },
    {
        "package_name": "retrying-1.3.3",
        "file_list": "AUTHORS.rst HISTORY.rst LICENSE MANIFEST.in NOTICE PKG-INFO README.rst requirements.txt dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt retrying.py setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport os\nimport sys\n\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\nsettings = dict()\n\n# Publish Helper.\nif sys.argv[-1] == 'publish':\nos.system('python setup.py sdist upload')\nsys.exit()\n\nCLASSIFIERS = [\n'Intended Audience :: Developers',\n'Natural Language :: English',\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Topic :: Internet',\n'Topic :: Utilities',\n]\n\nwith open('README.rst') as file_readme:\nreadme = file_readme.read()\n\nwith open('HISTORY.rst') as file_history:\nhistory = file_history.read()\n\nwith open('requirements.txt') as file_requirements:\nrequirements = file_requirements.read().splitlines()\n\nsettings.update(\nname='retrying',\nversion='1.3.3',\ndescription='Retrying',\nlong_description=readme + '\\n\\n' + history,\nauthor='Ray Holder',\nlicense='Apache 2.0',\nurl='https:\/\/github.com\/rholder\/retrying',\nclassifiers=CLASSIFIERS,\nkeywords=\"decorator decorators retry retrying exception exponential backoff\",\npy_modules= ['retrying'],\ntest_suite=\"test_retrying\",\ninstall_requires=requirements,\n)\n\n\nsetup(**settings)\n"
    },
    {
        "package_name": "riot-0.12.2",
        "file_list": "CODEOWNERS build_deploy.yml changelog.yml codeql-analysis.yml main.yml .gitignore .mergify.yml .readthedocs.yml .gitignore conf.py configuration.rst contributing.rst index.rst quickstart.rst release_notes.rst requirements.txt usage.rst LICENSE.apache2 NOTICE PKG-INFO pyproject.toml README.md add-exitfirst-option-to-run-7bd06dedf87c3180.yaml add-riot-specific-env-vars-1b117c764d61fd09.yaml add-version-info-405c35d8f62c7909.yaml feat-create-95b0d328d14440e5.yaml feat-match-short-hash-074e7595ec37967b.yaml feat-shell-command-5ec238da2ca192ad.yaml feat-use-default-shell-21a39ade10388df5.yaml feature-skip-missing-a032464fbeafdc52.yaml fix-parent-py-7de74544797e4d4d.yaml fix-shell-env-d1f17d1172916d2d.yaml fix-shell-use-correct-venv-18f139b392dd26f9.yaml fix-sitepkgs-3ef98bad9dc20f70.yaml fix-spaces-cmdargs-16399f428692f9c4.yaml inherit-pythonpath-from-parent-2f40e6c984d8e95a.yaml passenv-always-some-var-27f2a854ab7f7752.yaml shell-fix-d6fc7eb1127473e6.yaml summary-short-hash-7bd8aabde226e14c.yaml use-system-shell-222f6711f7b17dd4.yaml cli.py py.typed riot.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt riotfile.py check-releasenotes setup.cfg setup.py empty_riotfile.py simple_riotfile.py test_cli.py test_integration.py test_unit.py __init__.py",
        "setup.py": "from setuptools import find_packages, setup\n\nwith open(\"README.md\", \"r\") as f:\nlong_description = f.read()\n\n\nsetup(\nname=\"riot\",\ndescription=\"A simple Python test runner runner.\",\nurl=\"https:\/\/github.com\/DataDog\/riot\",\nauthor=\"Datadog, Inc.\",\nauthor_email=\"dev@datadoghq.com\",\nclassifiers=[\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\nentry_points={\"console_scripts\": [\"riot = riot.__main__:main\"]},\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nlicense=\"Apache 2\",\npackages=find_packages(exclude=[\"tests*\"]),\npackage_data={\"riot\": [\"py.typed\"]},\npython_requires=\">=3.6\",\ninstall_requires=[\n\"dataclasses; python_version<'3.7'\",\n\"click>=7,<8\",\n\"virtualenv\",\n\"rich\",\n\"pexpect\",\n],\nsetup_requires=[\"setuptools_scm\"],\nuse_scm_version=True,\n# Required for mypy compatibility, see\n# https:\/\/mypy.readthedocs.io\/en\/stable\/installed_packages.html#making-pep-561-compatible-packages\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "rjsmin-1.2.1",
        "file_list": "apiviewer.js bootstrap.js DateTimeShortcuts.js jquery-1.7.1.js jsmin.c jsmin.py jsmin_2_0_9.py knockout-2.0.0.js main.py markermanager.js prepare.sh report.pickle report.sh run.sh tox.ini write.py __init__.py cext.h BENCHMARKS CHANGES CLASSIFIERS DESCRIPTION KEYWORDS PROVIDES SUMMARY benchmark.txt conf.py index.txt ci.css LICENSE MANIFEST.in PKG-INFO README.md rjsmin.c dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt rjsmin.py setup.cfg setup.py coverage.txt basic.bang.js basic.js basic.min.js incomplete_bang_comment.js incomplete_bang_comment.min.js incomplete_bang_comment2.js incomplete_bang_comment2.min.js incomplete_comment.js incomplete_comment.min.js incomplete_comment2.js incomplete_comment2.min.js incomplete_regex.js incomplete_regex.min.js incomplete_regex2.js incomplete_regex2.min.js incomplete_string.js incomplete_string.min.js issue13.bang.js issue13.js issue13.min.js issue8.bang.js issue8.js issue8.min.js lone_slash.js lone_slash.min.js requirements.txt test_basic.py test_ctype.py test_incomplete.py test_issue13.py test_issue17.py test_issue8.py _util.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: ascii -*-\nu\"\"\"\n:Copyright:\n\nCopyright 2011 - 2022\nAndr\\xe9 Malo or his licensors, as applicable\n\n:License:\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n===========================================\nrJSmin - A Javascript Minifier For Python\n===========================================\n\nrJSmin - A Javascript Minifier For Python.\n\"\"\"\nfrom __future__ import print_function\n__author__ = u\"Andr\\xe9 Malo\"\n\nimport os as _os\nimport posixpath as _posixpath\nimport sys as _sys\n\n# pylint: disable = no-name-in-module, import-error, raise-missing-from\nimport setuptools as _setuptools\n\n# pylint: disable = invalid-name\n\n\ndef _doc(filename):\n\"\"\" Read docs file \"\"\"\n# pylint: disable = unspecified-encoding\nargs = {} if str is bytes else dict(encoding='utf-8')\ntry:\nwith open(_os.path.join('docs', filename), **args) as fp:\nreturn fp.read()\nexcept IOError:\nreturn None\n\n\ndef _lines(multiline):\n\"\"\" Split multiline string into single line % empty and comments \"\"\"\nreturn [line for line in (\nline.strip() for line in multiline.splitlines(False)\n) if line and not line.startswith('#')]\n\n\npackage = dict(\nname='rjsmin',\ntop='.',\npathname='.',\nprovides=_doc('PROVIDES'),\ndesc=_doc('SUMMARY').strip(),\nlongdesc=_doc('DESCRIPTION'),\nauthor=__author__,\nemail='nd@perlig.de',\nlicense=\"Apache License, Version 2.0\",\nkeywords=_lines(_doc('KEYWORDS')),\nurl='http:\/\/opensource.perlig.de\/rjsmin\/',\nclassifiers=_lines(_doc('CLASSIFIERS') or ''),\n\npackages=False,\npy_modules=['rjsmin'],\nversion_file='rjsmin.py',\ninstall_requires=[],\n)\n\n\nclass BuildFailed(Exception):\n\"\"\" The build has failed \"\"\"\n\n\nfrom distutils.command import build_ext as _build_ext # pylint: disable = wrong-import-order\nfrom distutils import errors as _errors # pylint: disable = wrong-import-order\nclass build_ext(_build_ext.build_ext): # pylint: disable = no-init\n\"\"\" Improved extension building code \"\"\"\n\ndef run(self):\n\"\"\" Unify exception \"\"\"\ntry:\n_build_ext.build_ext.run(self)\nexcept _errors.DistutilsPlatformError:\nraise BuildFailed()\n\n\ndef build_extension(self, ext):\n\"\"\"\nBuild C extension - with extended functionality\n\nThe following features are added here:\n\n- The macros ``EXT_PACKAGE`` and ``EXT_MODULE`` will be filled (or\nunset) depending on the extensions name, but only if they are not\nalready defined.\n\n- \".\" is added to the include directories (for cext.h)\n\n:Parameters:\n`ext` : `Extension`\nThe extension to build\n\n:Return: whatever ``distutils.command.build_ext.build_ext`` returns\n:Rtype: any\n\"\"\"\n# handle name macros\nmacros = dict(ext.define_macros or ())\ntup = ext.name.split('.')\nif len(tup) == 1:\npkg, mod = None, tup[0]\nelse:\npkg, mod = '.'.join(tup[:-1]), tup[-1]\nif pkg is not None and 'EXT_PACKAGE' not in macros:\next.define_macros.append(('EXT_PACKAGE', pkg))\nif 'EXT_MODULE' not in macros:\next.define_macros.append(('EXT_MODULE', mod))\nif pkg is None:\nmacros = dict(ext.undef_macros or ())\nif 'EXT_PACKAGE' not in macros:\next.undef_macros.append('EXT_PACKAGE')\n\ntry:\nreturn _build_ext.build_ext.build_extension(self, ext)\nexcept (_errors.CCompilerError, _errors.DistutilsExecError,\n_errors.DistutilsPlatformError, IOError, ValueError):\nraise BuildFailed()\n\n\nclass Extension(_setuptools.Extension):\n\"\"\" improved functionality \"\"\"\n\ndef __init__(self, *args, **kwargs):\n\"\"\" Initialization \"\"\"\nversion = kwargs.pop('version')\nself.depends = []\nif 'depends' in kwargs:\nself.depends = kwargs['depends']\n_setuptools.Extension.__init__(self, *args, **kwargs)\nself.define_macros.append(('EXT_VERSION', version))\n\n# add include path\nincluded = '.'\nif included not in self.include_dirs:\nself.include_dirs.append(included)\n\n# add cext.h to the dependencies\ncext_h = _posixpath.normpath(_posixpath.join(included, 'cext.h'))\nfor item in self.depends:\nif _posixpath.normpath(item) == cext_h:\nbreak\nelse:\nself.depends.append(cext_h)\n\n\nEXTENSIONS = lambda v: [Extension('_rjsmin', [\"rjsmin.c\"], version=v)]\n\n\ndef do_setup(cext):\n\"\"\" Main \"\"\"\n# pylint: disable = too-many-branches\n# pylint: disable = unspecified-encoding\n\nargs = {} if str is bytes else dict(encoding='utf-8')\nversion_file = '%s\/%s' % (package['pathname'],\npackage.get('version_file', '__init__.py'))\nwith open(version_file, **args) as fp:\nfor line in fp: # pylint: disable = redefined-outer-name\nif line.startswith('__version__'):\nversion = line.split('=', 1)[1].strip()\nif version.startswith((\"'\", '\"')):\nversion = version[1:-1].strip()\nbreak\nelse:\nraise RuntimeError(\"Version not found\")\n\nkwargs = {}\n\nif not cext or 'java' in _sys.platform.lower():\nextensions = []\nelse:\nextensions = EXTENSIONS(version)\n\nif extensions:\nif 'build_ext' in globals():\nkwargs.setdefault('cmdclass', {})['build_ext'] = build_ext\nkwargs['ext_modules'] = extensions\n\ncflags = None\nif _os.environ.get('CFLAGS') is None:\nfrom distutils import ccompiler as _ccompiler\n\ncompiler = _ccompiler.get_default_compiler()\ntry:\nwith open(\"debug.%s.cflags\" % compiler) as fp:\ncflags = ' '.join([\nline for line in (line.strip() for line in fp)\nif line and not line.startswith('#')\n]).split() or None\nexcept IOError:\npass\n\nif cflags:\ngcov = 'coverage' in ' '.join(cflags)\nfor ext in extensions:\n# pylint: disable = attribute-defined-outside-init\next.extra_compile_args = \\\ngetattr(ext, 'extra_compile_args', []) + cflags\nif gcov:\next.libraries.append('gcov')\n\n\nif package.get('packages', True):\nkwargs['packages'] = [package['top']] + [\n'%s.%s' % (package['top'], item)\nfor item in\n_setuptools.find_packages(package['pathname'])\n]\nif package.get('py_modules'):\nkwargs['py_modules'] = package['py_modules']\n\n_setuptools.setup(\nname=package['name'],\nauthor=package['author'],\nauthor_email=package['email'],\nlicense=package['license'],\nclassifiers=package['classifiers'],\ndescription=package['desc'],\nlong_description=package['longdesc'],\nurl=package['url'],\ninstall_requires=package['install_requires'],\nversion=version,\nzip_safe=False,\n**kwargs\n)\n\n\ndef setup():\n\"\"\" Run setup \"\"\"\ntry:\ndo_setup(True)\nexcept BuildFailed:\nenv = 'SETUP_CEXT_REQUIRED'\nif _os.environ.get(env, '') not in ('', '0'):\nraise\nprint(\"C extension build failed - building python only version now. \"\n\"Set '%s' environment variable to '1' to make it fail.\"\n% (env,), file=_sys.stderr)\ndo_setup(False)\n\n\nif __name__ == '__main__':\nsetup()\n"
    },
    {
        "package_name": "rlp-3.0.0",
        "file_list": "api.rst conf.py index.rst Makefile quickstart.rst releases.rst tutorial.rst LICENSE MANIFEST.in PKG-INFO README.md atomic.py codec.py exceptions.py lazy.py big_endian_int.py binary.py boolean.py lists.py raw.py serializable.py text.py __init__.py utils.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py rlptest.json speed.py test_benchmark.py test_big_endian.py test_binary_sedes.py test_boolean_serializer.py test_bytearray.py test_codec.py test_countablelist.py test_invalid.py test_json.py test_lazy.py test_raw_sedes.py test_sedes.py test_serializable.py test_text_sedes.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import (\nsetup,\nfind_packages,\n)\n\nextras_require = {\n'test': [\n\"pytest>=6.2.5,<7\",\n\"tox>=2.9.1,<3\",\n\"hypothesis==5.19.0\",\n],\n'lint': [\n\"flake8==3.4.1\",\n],\n'doc': [\n\"Sphinx>=1.6.5,<2\",\n\"sphinx_rtd_theme>=0.1.9\",\n],\n'dev': [\n\"bumpversion>=0.5.3,<1\",\n\"setuptools>=36.2.0\",\n\"pytest-xdist\",\n\"pytest-watch>=4.1.0,<5\",\n\"wheel\",\n\"ipython\",\n\"twine\",\n],\n'rust-backend': [\n\"rusty-rlp>=0.2.1, <0.3\"\n]\n}\n\n\nextras_require['dev'] = (\nextras_require['dev'] +\nextras_require['test'] +\nextras_require['lint'] +\nextras_require['doc']\n)\n\n\nsetup(\nname='rlp',\n# *IMPORTANT*: Don't manually change the version here. See README for more.\nversion='3.0.0',\ndescription=\"A package for Recursive Length Prefix encoding and decoding\",\nlong_description_markdown_filename='README.md',\nauthor=\"jnnk\",\nauthor_email='jnnknnj@gmail.com',\nurl='https:\/\/github.com\/ethereum\/pyrlp',\npackages=find_packages(exclude=[\"tests\", \"tests.*\"]),\ninclude_package_data=True,\nsetup_requires=['setuptools-markdown'],\ninstall_requires=[\n\"eth-utils>=2.0.0,<3\",\n],\nextras_require=extras_require,\nlicense=\"MIT\",\nzip_safe=False,\nkeywords='rlp ethereum',\nclassifiers=[\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: Implementation :: PyPy',\n],\n)\n"
    },
    {
        "package_name": "robotframework-browser-13.4.0",
        "file_list": "assertion_engine.py cache.py librarycomponent.py __init__.py browser.py entry.py playwright_pb2.py playwright_pb2_grpc.py __init__.py gen_stub.py browser_control.py cookie.py crawling.py device_descriptors.py evaluation.py getters.py interaction.py network.py playwright_state.py promises.py runonfailure.py strict_mode.py waiter.py webapp_state.py __init__.py playwright.py data_types.py deprecated.py js_utilities.py logger.py meta_python.py misc.py robot_booleans.py __init__.py version.py __init__.py LICENSE MANIFEST.in PKG-INFO README.md dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py",
        "setup.py": "# -*- coding: utf-8 -*-\nimport os\nfrom setuptools import setup, find_packages # type: ignore\nimport sys\n\nsys.path.append(\"Browser\")\n\nwith open(\"README.md\", encoding=\"utf-8\") as f:\nlong_description = f.read()\n\npackages = find_packages(exclude=[\"utest\", \"atest\"])\n\npackage_data = {\n\"\": [\"*\"],\n\"Browser\": [\n\"wrapper\/index.js\",\n\"wrapper\/package.json\",\n\"wrapper\/package-lock.json\",\n\"wrapper\/static\/selector-finder.js\",\n],\n}\n\ninstall_requires = open(os.path.join(\"Browser\", \"requirements.txt\")).readlines()\n\nsetup_kwargs = {\n\"name\": \"robotframework-browser\",\n\"version\": \"13.4.0\",\n\"description\": \"Robot Framework Browser library powered by Playwright. Aiming for speed, reliability and visibility.\",\n\"long_description\": long_description,\n\"long_description_content_type\": \"text\/markdown\",\n\"author\": \"MarketSquare - Robot Framework community\",\n\"author_email\": \"mikko.korpela@gmail.com\",\n\"maintainer\": None,\n\"maintainer_email\": None,\n\"url\": \"https:\/\/github.com\/MarketSquare\/robotframework-browser\",\n\"packages\": packages,\n\"package_data\": package_data,\n\"install_requires\": install_requires,\n\"entry_points\": {\"console_scripts\": [\"rfbrowser=Browser.entry:main\"]},\n\"python_requires\": \">=3.7,<4.0\",\n\"classifiers\": [\n\"Development Status :: 5 - Production\/Stable\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Topic :: Software Development :: Testing\",\n\"Framework :: Robot Framework\",\n\"Framework :: Robot Framework :: Library\",\n],\n\"include_package_data\": True,\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "robotframework-databaselibrary-1.2.4",
        "file_list": "PKG-INFO README.md setup.cfg setup.py assertion.py connection_manager.py query.py version.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n\n# Copyright (c) 2010 Franz Allan Valencia See\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n\"\"\"Setup script for Robot's DatabaseLibrary distributions\"\"\"\n\nfrom os.path import abspath, dirname, join\n\ntry:\nfrom setuptools import setup\nexcept ImportError as error:\nfrom distutils.core import setup\n\n\nversion_file = join(dirname(abspath(__file__)), 'src', 'DatabaseLibrary', 'version.py')\n\nwith open(version_file) as file:\ncode = compile(file.read(), version_file, 'exec')\nexec(code)\n\nsetup(name = 'robotframework-databaselibrary',\nversion = VERSION,\ndescription = 'Database utility library for Robot Framework',\nauthor = 'Franz Allan Valencia See',\nauthor_email = 'franz.see@gmail.com',\nurl = 'https:\/\/github.com\/franz-see\/Robotframework-Database-Library',\npackage_dir = { '' : 'src'},\npackages = ['DatabaseLibrary'],\npackage_data = {'DatabaseLibrary': []},\nrequires = ['robotframework']\n)\n"
    },
    {
        "package_name": "robotframework-sshlibrary-3.8.0",
        "file_list": "COPYRIGHT.txt LICENSE.txt PKG-INFO README.rst setup.cfg setup.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt abstractclient.py client.py config.py deco.py javaclient.py library.py logger.py pythonclient.py pythonforward.py sshconnectioncache.py utils.py version.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport re\nimport sys\nimport os\nfrom os.path import abspath, dirname, join\nfrom setuptools import setup\n\nCURDIR = dirname(abspath(__file__))\nREQUIREMENTS = ['robotframework >= 3.0']\nif not sys.platform.startswith('java'):\nREQUIREMENTS.append('paramiko >= 1.15.3')\nREQUIREMENTS.append('scp >= 0.13.0')\nif sys.version_info[0] < 3 and os.name == 'nt':\nREQUIREMENTS.append('win_inet_pton >= 1.1.0')\nwith open(join(CURDIR, 'src', 'SSHLibrary', 'version.py')) as f:\nVERSION = re.search(\"\\nVERSION = '(.*)'\", f.read()).group(1)\nwith open(join(CURDIR, 'README.rst')) as f:\nDESCRIPTION = f.read()\nCLASSIFIERS = '''\nDevelopment Status :: 5 - Production\/Stable\nLicense :: OSI Approved :: Apache Software License\nOperating System :: OS Independent\nProgramming Language :: Python\nProgramming Language :: Python :: 2.7\nProgramming Language :: Python :: 3.4\nProgramming Language :: Python :: 3.5\nProgramming Language :: Python :: 3.6\nProgramming Language :: Python :: 3.7\nProgramming Language :: Python :: 3.8\nTopic :: Software Development :: Testing\nFramework :: Robot Framework\nFramework :: Robot Framework :: Library\n'''.strip().splitlines()\n\nsetup(\nname='robotframework-sshlibrary',\nversion=VERSION,\ndescription='Robot Framework test library for SSH and SFTP',\nlong_description=DESCRIPTION,\nauthor='Robot Framework Developers',\nauthor_email='robotframework@gmail.com',\nurl='https:\/\/github.com\/robotframework\/SSHLibrary',\nlicense='Apache License 2.0',\nkeywords='robotframework testing testautomation ssh sftp',\nplatforms='any',\nclassifiers=CLASSIFIERS,\ninstall_requires=REQUIREMENTS,\npackage_dir={'': 'src'},\npackages=['SSHLibrary']\n)\n"
    },
    {
        "package_name": "rocketchat_API-1.26.0",
        "file_list": "LICENSE.txt PKG-INFO README.md RocketExceptions.py __init__.py assets.py base.py channels.py chat.py groups.py im.py invites.py livechat.py miscellaneous.py permissions.py roles.py rooms.py settings.py statistics.py subscriptions.py teams.py users.py video_conferences.py __init__.py rocketchat.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py",
        "setup.py": "# -*-coding:utf-8-*-\n\nfrom setuptools import setup\n\nsetup(\nname=\"rocketchat_API\",\nversion=\"1.26.0\",\npackages=[\n\"rocketchat_API\",\n\"rocketchat_API.APIExceptions\",\n\"rocketchat_API.APISections\",\n],\nurl=\"https:\/\/github.com\/jadolg\/rocketchat_API\",\nlicense=\"MIT\",\nauthor=\"Jorge Alberto D\u00edaz Orozco\",\nauthor_email=\"diazorozcoj@gmail.com\",\ndescription=\"Python API wrapper for Rocket.Chat\",\nlong_description=open(\"README.md\", \"r\").read(),\nlong_description_content_type=\"text\/markdown\",\ninstall_requires=(\"requests\",),\n)\n"
    },
    {
        "package_name": "ropwr-0.2.0",
        "file_list": "PKG-INFO README.rst base.py cvx.py cvx_qp.py cvx_socp.py direct.py matrices.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport os\nimport sys\n\nfrom setuptools import find_packages, setup, Command\nfrom setuptools.command.test import test as TestCommand\n\n\nlong_description = '''\n**RoPWR** is a library written in Python implementing several mathematical\nprogramming formulations to compute the optimal continuous\/discontinuous\npiecewise polynomial regression given a list of split points.\n\nRead the documentation at: http:\/\/gnpalencia.org\/ropwr\/\n\nRoPWR is distributed under the Apache Software License (Apache 2.0).\n'''\n\n\nclass CleanCommand(Command):\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nos.system('rm -vrf .\/build .\/dist .\/*.pyc .\/*.tgz .\/*.egg-info')\n\n\n# test suites\nclass PyTest(TestCommand):\ndef finalize_options(self):\nTestCommand.finalize_options(self)\nself.test_args = []\nself.test_suite = []\n\ndef run_tests(self):\n# import here, because outside the eggs aren't loaded\nimport pytest\nerrcode = pytest.main(self.test_args)\nsys.exit(errcode)\n\n\n# install requirements\ninstall_requires = [\n'cvxpy>=1.0',\n'numpy>=1.16',\n'scikit-learn>=0.22',\n]\n\n# test requirements\ntests_require = [\n'pytest',\n'coverage'\n]\n\n\nsetup(\nname=\"ropwr\",\nversion=\"0.2.0\",\ndescription=\"RoPWR: Robust Piecewise Regression\",\nlong_description=long_description,\nauthor=\"Guillermo Navas-Palencia\",\nauthor_email=\"g.navas.palencia@gmail.com\",\npackages=find_packages(),\nplatforms=\"any\",\ninclude_package_data=True,\nlicense=\"Apache Licence 2.0\",\nurl=\"https:\/\/github.com\/guillermo-navas-palencia\/ropwr\",\ncmdclass={'clean': CleanCommand, 'test': PyTest},\npython_requires='>=3.7',\ninstall_requires=install_requires,\ntests_require=tests_require,\nclassifiers=[\n'Topic :: Scientific\/Engineering :: Mathematics',\n'Topic :: Software Development :: Libraries',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Intended Audience :: Developers',\n'Intended Audience :: Education',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python :: 3']\n)\n"
    },
    {
        "package_name": "roundrobin-0.0.4",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.md basic_rr.py smooth_rr.py weighted_rr.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt setup.cfg setup.py",
        "setup.py": "import os\nimport setuptools\n\nREADME_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), \"README.md\")\n\n\ndef setup():\nreadme_content = ''\nwith open(README_PATH, \"r\") as fp:\nreadme_content = fp.read()\nsetuptools.setup(\nname=\"roundrobin\",\nversion=\"0.0.4\",\ndescription=\"Collection of roundrobin utilities\",\nlong_description=readme_content,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/linnik\/roundrobin\",\nauthor=\"Vyacheslav Linnik\",\nauthor_email=\"hello@slavalinnik.com\",\nlicense=\"MIT\",\nclassifiers=[\n\"License :: OSI Approved :: MIT License\",\n'Programming Language :: Python',\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Operating System :: OS Independent',\n],\npackages=setuptools.find_packages(),\n)\n\n\nif __name__ == \"__main__\":\nsetup()\n"
    },
    {
        "package_name": "Routes-2.5.1",
        "file_list": "CHANGELOG.rst changes.rst conf.py generating.rst glossary.rst index.rst introduction.rst Makefile index.rst mapper.rst middleware.rst route.rst routes.rst util.rst porting.rst restful.rst routes-logo.png setting_up.rst README routes-logo-boehme.svg todo.rst uni_redirect_rest.rst LICENSE.txt MANIFEST.in PKG-INFO README.rst base.py mapper.py middleware.py route.py util.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py users.py content.py users.py profile_rec.py test_explicit_use.py test_generation.py test_middleware.py test_nonminimization.py test_recognition.py test_resources.py test_submapper.py test_utils.py __init__.py test_base.py test_environment.py test_mapper_str.py test_route_escapes.py",
        "setup.py": "__version__ = '2.5.1'\n\nimport io\nimport os\nimport sys\n\nfrom setuptools import setup, find_packages\n\nhere = os.path.abspath(os.path.dirname(__file__))\nwith io.open(os.path.join(here, 'README.rst'), encoding='utf8') as f:\nREADME = f.read()\nwith io.open(os.path.join(here, 'CHANGELOG.rst'), encoding='utf8') as f:\nCHANGES = f.read()\nPY3 = sys.version_info[0] == 3\n\nextra_options = {\n\"packages\": find_packages(),\n}\n\nextras_require = {\n'middleware': [\n'webob',\n]\n}\nextras_require['docs'] = ['Sphinx'] + extras_require['middleware']\n\nif PY3:\nif \"test\" in sys.argv or \"develop\" in sys.argv:\nfor root, directories, files in os.walk(\"tests\"):\nfor directory in directories:\nextra_options[\"packages\"].append(os.path.join(root, directory))\n\nsetup(name=\"Routes\",\nversion=__version__,\ndescription='Routing Recognition and Generation Tools',\nlong_description=README + '\\n\\n' + CHANGES,\nclassifiers=[\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Topic :: Internet :: WWW\/HTTP\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n'Programming Language :: Python',\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\"\n],\nkeywords='routes webob dispatch',\nauthor=\"Ben Bangert\",\nauthor_email=\"ben@groovie.org\",\nurl='https:\/\/routes.readthedocs.io\/',\nlicense=\"MIT\",\ntest_suite=\"nose.collector\",\ninclude_package_data=True,\nzip_safe=False,\ntests_require=[\"soupsieve<2.0\", 'nose', 'webtest', 'webob', 'coverage'],\ninstall_requires=[\n\"six\",\n\"repoze.lru>=0.3\"\n],\nextras_require=extras_require,\n**extra_options\n)\n"
    },
    {
        "package_name": "rpaframework-core-9.1.0",
        "file_list": "LICENSE PKG-INFO pyproject.toml README.rst setup.py decorators.py geometry.py helpers.py containers.py database.py literal.py syntax.py __init__.py logger.py notebook.py robocorp.py types.py deco.py robotlibcore.py __init__.py webdriver.py context.py helpers.py inspect.py locators.py window.py __init__.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackage_dir = \\\n{'': 'src'}\n\npackages = \\\n['RPA', 'RPA.core', 'RPA.core.locators', 'RPA.core.vendor', 'RPA.core.windows']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['pillow>=9.1.1,<10.0.0',\n'selenium>=3.141.0,<4.0.0',\n'webdrivermanager>=0.10.0,<0.11.0']\n\nextras_require = \\\n{':python_full_version < \"3.7.6\" and sys_platform == \"win32\" or python_full_version > \"3.7.6\" and python_full_version < \"3.8.1\" and sys_platform == \"win32\" or python_full_version > \"3.8.1\" and sys_platform == \"win32\"': ['pywin32>=300,<304'],\n':sys_platform == \"win32\"': ['psutil>=5.9.0,<6.0.0',\n'uiautomation>=2.0.15,<3.0.0']}\n\nsetup_kwargs = {\n'name': 'rpaframework-core',\n'version': '9.1.0',\n'description': 'Core utilities used by RPA Framework',\n'long_description': 'rpaframework-core\\n=================\\n\\nThis package is a set of core functionality and utilities used\\nby `RPA Framework`_. It is not intended to be installed directly, but\\nas a dependency to other projects.\\n\\n.. _RPA Framework: https:\/\/rpaframework.org\\n',\n'author': 'RPA Framework',\n'author_email': 'rpafw@robocorp.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/rpaframework.org\/',\n'package_dir': package_dir,\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'extras_require': extras_require,\n'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "rpy2-3.5.3",
        "file_list": "AUTHORS Makefile gpl-2.0.txt LICENSE MANIFEST.in NEWS PKG-INFO README.md requirements.txt packages.py process_revents.py __init__.py ggplot.py html.py rmagic.py __init__.py rinterface.py bufferprotocol.py callbacks.py conversion.py embedded.py embedded_mswin.py ffi_proxy.py memorymanagement.py na_values.py openrlib.py RPY2.h R_API.h R_API_eventloop.c R_API_eventloop.h sexp.py _bufferprotocol.c _rinterface_capi.py __init__.py container.py functional.py indexing.py __init__.py constants.py conversion.py environments.py functions.py help.py language.py dbplyr.py dplyr.py ggplot2.py grdevices.py grid.py tidyr.py __init__.py methods.py numpy2ri.py packages.py packages_utils.py pandas2ri.py robject.py vectors.py __init__.py situation.py test_ggplot.py test_html.py test_rmagic.py __init__.py test_bufferprotocol.py test_callbacks.py test_conversion.py test_embedded_r.py test_endr.py test_environment.py test_externalptr.py test_functions.py test_memorymanagement.py test_na.py test_noinitialization.py test_openrlib.py test_sexp.py test_symbol.py test_threading.py test_vectors.py test_vector_bool.py test_vector_byte.py test_vector_complex.py test_vector_float.py test_vector_int.py test_vector_lang.py test_vector_list.py test_vector_numpy.py test_vector_pairlist.py test_vector_str.py __init__.py test_container.py test_functional.py test_indexing.py test_dbplyr.py test_dplyr.py test_ggplot2.py test_grdevices.py test_grid.py test_tidyr.py __init__.py test_array.py test_conversion.py test_conversion_numpy.py test_dataframe.py test_environment.py test_formula.py test_function.py test_help.py test_language.py test_methods.py test_packages.py test_packages_utils.py test_pandas_conversions.py test_robjects.py test_rs4.py test_serialization.py test_translated_function.py test_vector.py test_vector_datetime.py test_vector_extractdelegator.py test_vector_factor.py __init__.py utils.py __init__.py _rinterface_cffi_build.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py",
        "setup.py": "#!\/usr\/bin\/env python\nimport sys\nif ((sys.version_info[0] < 3) or\n(sys.version_info[0] == 3 and sys.version_info[1] < 7)):\nprint('rpy2 is no longer supporting Python < 3.7.'\n'Consider using an older rpy2 release when using an '\n'older Python release.')\nsys.exit(1)\n\nimport enum\nimport os\nimport shutil\nimport subprocess\nimport tempfile\nimport warnings\n\nfrom setuptools import setup, Extension, dist\nfrom distutils.ccompiler import new_compiler\nfrom distutils.sysconfig import customize_compiler\nfrom distutils.errors import CCompilerError, DistutilsExecError, DistutilsPlatformError\n\nfrom rpy2 import situation\n\nfrom distutils.command.build import build as du_build\n\nPACKAGE_NAME = 'rpy2'\npack_version = __import__('rpy2').__version__\n\npackage_prefix='.'\n\nR_MIN_VERSION = (3, 3)\n\ndef _format_version(x):\nreturn '.'.join(map(str, x))\n\n\ndef cmp_version(x, y):\nif (x[0] < y[0]):\nreturn -1\nif (x[0] > y[0]):\nreturn 1\nif (x[0] == y[0]):\nif len(x) == 1 or len(y) == 1:\nreturn 0\nreturn cmp_version(x[1:], y[1:])\n\n\nclass COMPILATION_STATUS(enum.Enum):\nCOMPILE_ERROR=('unable to compile R C extensions - missing headers '\n'or R not compiled as a library ?')\nNO_COMPILER=('unable to compile sqlite3 C extensions - '\n'no c compiler?')\nPLATFORM_ERROR=('unable to compile R C extensions - platform error')\nOK = None\nNO_R='No R in the PATH, or R_HOME defined.'\nRFLAGS_ERROR='Unable to get R compilation flags'\n\n\ndef get_c_extension_status(libraries=['R'], include_dirs=None,\nlibrary_dirs=None):\nc_code = ('#include <Rinterface.h>\\n\\n'\n'int main(int argc, char **argv) { return 0; }')\ntmp_dir = tempfile.mkdtemp(prefix='tmp_pw_r_')\nbin_file = os.path.join(tmp_dir, 'test_pw_r')\nsrc_file = bin_file + '.c'\nwith open(src_file, 'w') as fh:\nfh.write(c_code)\n\ncompiler = new_compiler()\ncustomize_compiler(compiler)\ntry:\ncompiler.link_executable(\ncompiler.compile([src_file], output_dir=tmp_dir,\ninclude_dirs=include_dirs),\nbin_file,\nlibraries=libraries,\nlibrary_dirs=library_dirs)\nexcept CCompilerError as cce:\nstatus = COMPILATION_STATUS.COMPILE_ERROR\nprint(cce)\nexcept DistutilsExecError as dee:\nstatus = COMPILATION_STATUS.NO_COMPILER\nprint(dee)\nexcept DistutilsPlatformError as dpe:\nstatus = COMPILATION_STATUS.PLATFORM_ERROR\nprint(dpe)\nelse:\nstatus = COMPILATION_STATUS.OK\nshutil.rmtree(tmp_dir)\nreturn status\n\n\ndef get_r_c_extension_status():\nr_home = situation.get_r_home()\nif r_home is None:\nreturn COMPILATION_STATUS.NO_R\nc_ext = situation.CExtensionOptions()\ntry:\nc_ext.add_lib(\n*situation.get_r_flags(r_home, '--ldflags')\n)\nc_ext.add_include(\n*situation.get_r_flags(r_home, '--cppflags')\n)\nexcept subprocess.CalledProcessError as cpe:\nwarnings.warn(str(cpe))\nreturn COMPILATION_STATUS.RFLAGS_ERROR\nstatus = get_c_extension_status(libraries=c_ext.libraries,\ninclude_dirs=c_ext.include_dirs,\nlibrary_dirs=c_ext.library_dirs)\nreturn status\n\n# TODO: The following line is required because setup.py tries to figure out\n# requirements before setuptools's own machinery to ensure requirements starts,\n# even if the named argument `setup_requires` is added to setup().\n# There should be a better way to do this than side download\/install a package\n# at import time. This is limited to Windows.\ndist.Distribution().fetch_build_eggs([\"packaging;platform_system=='Windows'\"])\n\ncffi_mode = situation.get_cffi_mode()\nc_extension_status = get_r_c_extension_status()\next_modules = []\nif cffi_mode == situation.CFFI_MODE.ABI:\ncffi_modules = ['rpy2\/_rinterface_cffi_build.py:ffibuilder_abi']\nelif cffi_mode == situation.CFFI_MODE.API:\nif c_extension_status != COMPILATION_STATUS.OK:\nprint('API mode requested but %s' % c_extension_status.value)\nsys.exit(1)\ncffi_modules = ['rpy2\/_rinterface_cffi_build.py:ffibuilder_api']\next_modules = [\nExtension('rpy2.rinterface_lib._bufferprotocol',\n['rpy2\/rinterface_lib\/_bufferprotocol.c'])\n]\nelif cffi_mode == situation.CFFI_MODE.BOTH:\nif c_extension_status != COMPILATION_STATUS.OK:\nprint('API mode requested but %s' % c_extension_status.value)\nsys.exit(1)\ncffi_modules = ['rpy2\/_rinterface_cffi_build.py:ffibuilder_abi',\n'rpy2\/_rinterface_cffi_build.py:ffibuilder_api']\nelif cffi_mode == situation.CFFI_MODE.ANY:\n# default interface\ncffi_modules = ['rpy2\/_rinterface_cffi_build.py:ffibuilder_abi']\nif c_extension_status == COMPILATION_STATUS.OK:\ncffi_modules.append('rpy2\/_rinterface_cffi_build.py:ffibuilder_api')\next_modules = [\nExtension('rpy2.rinterface_lib._bufferprotocol',\n['rpy2\/rinterface_lib\/_bufferprotocol.c'])\n]\nelse:\n# This should never happen.\nraise ValueError('Invalid value for cffi_mode')\n\n\nclass build(du_build):\n\ndef run(self):\nprint('cffi mode: %s' % cffi_mode)\n\ndu_build.run(self)\n\nprint('---')\nprint(cffi_mode)\nif cffi_mode in (situation.CFFI_MODE.ABI,\nsituation.CFFI_MODE.BOTH,\nsituation.CFFI_MODE.ANY):\nprint('ABI mode interface built.')\nif cffi_mode in (situation.CFFI_MODE.API,\nsituation.CFFI_MODE.BOTH):\nprint('API mode interface built.')\nif cffi_mode == situation.CFFI_MODE.ANY:\nif c_extension_status == COMPILATION_STATUS.OK:\nprint('API mode interface built.')\nelse:\nprint('API mode interface not built because: %s' % c_extension_status)\nprint('To change the API\/ABI build mode, set or modify the environment '\n'variable RPY2_CFFI_MODE.')\n\n\nLONG_DESCRIPTION = \"\"\"\nPython interface to the R language.\n\n`rpy2` is running an embedded R, providing access to it from Python \nusing R's own C-API through either:\n\n- a high-level interface making R functions an objects just like Python\nfunctions and providing a seamless conversion to numpy and pandas data \nstructures\n- a low-level interface closer to the C-API\n\nIt is also providing features for when working with jupyter notebooks or\nipython.\n\"\"\"\n\nif __name__ == '__main__':\npack_dir = {PACKAGE_NAME: os.path.join(package_prefix, 'rpy2')}\n\nwith open(\nos.path.join(\nos.path.dirname(os.path.realpath(__file__)),\n'requirements.txt')\n) as fh:\nrequires = fh.read().splitlines()\nif sys.version_info[:2] < (3, 8):\nrequires.append('typing-extensions')\nprint(requires)\n\nextras_require = {\n'test': ['pytest'],\n'numpy': ['pandas'],\n'pandas': ['numpy', 'pandas'],\n'setup': ['setuptools']\n}\nextras_require['all'] = list(\nset(x for lst in extras_require.values()\nfor x in lst)\n)\nsetup(\nname=PACKAGE_NAME,\nversion=pack_version,\ndescription='Python interface to the R language (embedded R)',\nlong_description=LONG_DESCRIPTION,\nurl='https:\/\/rpy2.github.io',\nproject_urls={\n'Documentation': 'https:\/\/rpy2.github.io\/doc.html',\n'Source': 'https:\/\/github.com\/rpy2\/rpy2',\n'Tracker': 'https:\/\/github.com\/rpy2\/rpy2\/issues'\n},\nlicense='GPLv2+',\nauthor='Laurent Gautier',\nauthor_email='lgautier@gmail.com',\ninstall_requires=requires,\nextras_require=extras_require,\nsetup_requires=['cffi>=1.10.0', 'setuptools'],\ncffi_modules=cffi_modules,\next_modules=ext_modules,\ncmdclass = dict(build=build),\npackage_dir=pack_dir,\npackages=([PACKAGE_NAME] +\n['{pack_name}.{x}'.format(pack_name=PACKAGE_NAME, x=x)\nfor x in ('rlike', 'rinterface_lib', 'robjects',\n'robjects.lib', 'interactive', 'ipython',\n'tests',\n'tests.rinterface', 'tests.rlike',\n'tests.robjects',\n'tests.ipython',\n'tests.robjects.lib')]\n),\nclassifiers = ['Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n('License :: OSI Approved :: GNU General '\n'Public License v2 or later (GPLv2+)'),\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'Development Status :: 5 - Production\/Stable'\n],\npackage_data={'rpy2': ['rinterface_lib\/R_API.h',\n'rinterface_lib\/R_API_eventloop.h',\n'rinterface_lib\/R_API_eventloop.c',\n'rinterface_lib\/RPY2.h',\n'rinterface_lib\/_bufferprotocol.c',\n'py.typed']},\nzip_safe=False\n)\n"
    },
    {
        "package_name": "ruamel.yaml.clib-0.2.6",
        "file_list": "__init__.py __init__.py api.c config.h dumper.c emitter.c LICENSE loader.c MANIFEST.in parser.c PKG-INFO reader.c README.rst dependency_links.txt namespace_packages.txt PKG-INFO SOURCES.txt top_level.txt scanner.c setup.cfg setup.py writer.c yaml.h yaml_private.h _ruamel_yaml.c _ruamel_yaml.h __init__.py",
        "setup.py": "# # header\n# coding: utf-8\n# dd: 20200903\n\nfrom __future__ import print_function, absolute_import, division, unicode_literals\n\n# # __init__.py parser\n\nimport sys\nimport os\nimport datetime\nimport traceback\n\nsys.path = [path for path in sys.path if path not in [os.getcwd(), \"\"]]\nimport platform # NOQA\nfrom _ast import * # NOQA\nfrom ast import parse # NOQA\n\nfrom setuptools import setup, Extension, Distribution # NOQA\nfrom setuptools.command import install_lib # NOQA\nfrom setuptools.command.sdist import sdist as _sdist # NOQA\n\ntry:\nfrom setuptools.namespaces import Installer as NameSpaceInstaller # NOQA\nexcept ImportError:\nmsg = ('You should use the latest setuptools. The namespaces.py file that this setup.py'\n' uses was added in setuptools 28.7.0 (Oct 2016)')\nprint(msg)\nsys.exit()\n\nif __name__ != '__main__':\nraise NotImplementedError('should never include setup.py')\n\n# # definitions\n\nfull_package_name = None\n\nif sys.version_info < (3,):\nstring_type = basestring\nelse:\nstring_type = str\n\n\nif sys.version_info < (3, 4):\n\nclass Bytes:\npass\n\nclass NameConstant:\npass\n\n\nif sys.version_info >= (3, 8):\nfrom ast import Str, Num, Bytes, NameConstant # NOQA\n\n\nif sys.version_info < (3,):\nopen_kw = dict()\nelse:\nopen_kw = dict(encoding='utf-8')\n\n\nif sys.version_info < (2, 7) or platform.python_implementation() == 'Jython':\n\nclass Set:\npass\n\n\nif os.environ.get('DVDEBUG', \"\") == \"\":\n\ndef debug(*args, **kw):\npass\n\n\nelse:\n\ndef debug(*args, **kw):\nwith open(os.environ['DVDEBUG'], 'a') as fp:\nkw1 = kw.copy()\nkw1['file'] = fp\nprint('{:%Y-%d-%mT%H:%M:%S}'.format(datetime.datetime.now()), file=fp, end=' ')\nprint(*args, **kw1)\n\n\ndef literal_eval(node_or_string):\n\"\"\"\nSafely evaluate an expression node or a string containing a Python\nexpression. The string or node provided may only consist of the following\nPython literal structures: strings, bytes, numbers, tuples, lists, dicts,\nsets, booleans, and None.\n\nEven when passing in Unicode, the resulting Str types parsed are 'str' in Python 2.\nI don't now how to set 'unicode_literals' on parse -> Str is explicitly converted.\n\"\"\"\n_safe_names = {'None': None, 'True': True, 'False': False}\nif isinstance(node_or_string, string_type):\nnode_or_string = parse(node_or_string, mode='eval')\nif isinstance(node_or_string, Expression):\nnode_or_string = node_or_string.body\nelse:\nraise TypeError('only string or AST nodes supported')\n\ndef _convert(node):\nif isinstance(node, Str):\nif sys.version_info < (3,) and not isinstance(node.s, unicode):\nreturn node.s.decode('utf-8')\nreturn node.s\nelif isinstance(node, Bytes):\nreturn node.s\nelif isinstance(node, Num):\nreturn node.n\nelif isinstance(node, Tuple):\nreturn tuple(map(_convert, node.elts))\nelif isinstance(node, List):\nreturn list(map(_convert, node.elts))\nelif isinstance(node, Set):\nreturn set(map(_convert, node.elts))\nelif isinstance(node, Dict):\nreturn dict((_convert(k), _convert(v)) for k, v in zip(node.keys, node.values))\nelif isinstance(node, NameConstant):\nreturn node.value\nelif sys.version_info < (3, 4) and isinstance(node, Name):\nif node.id in _safe_names:\nreturn _safe_names[node.id]\nelif (\nisinstance(node, UnaryOp)\nand isinstance(node.op, (UAdd, USub))\nand isinstance(node.operand, (Num, UnaryOp, BinOp))\n): # NOQA\noperand = _convert(node.operand)\nif isinstance(node.op, UAdd):\nreturn +operand\nelse:\nreturn -operand\nelif (\nisinstance(node, BinOp)\nand isinstance(node.op, (Add, Sub))\nand isinstance(node.right, (Num, UnaryOp, BinOp))\nand isinstance(node.left, (Num, UnaryOp, BinOp))\n): # NOQA\nleft = _convert(node.left)\nright = _convert(node.right)\nif isinstance(node.op, Add):\nreturn left + right\nelse:\nreturn left - right\nelif isinstance(node, Call):\nfunc_id = getattr(node.func, 'id', None)\nif func_id == 'dict':\nreturn dict((k.arg, _convert(k.value)) for k in node.keywords)\nelif func_id == 'set':\nreturn set(_convert(node.args[0]))\nelif func_id == 'date':\nreturn datetime.date(*[_convert(k) for k in node.args])\nelif func_id == 'datetime':\nreturn datetime.datetime(*[_convert(k) for k in node.args])\nerr = SyntaxError('malformed node or string: ' + repr(node))\nerr.filename = '<string>'\nerr.lineno = node.lineno\nerr.offset = node.col_offset\nerr.text = repr(node)\nerr.node = node\nraise err\n\nreturn _convert(node_or_string)\n\n\n# parses python ( \"= dict( )\" ) or ( \"= {\" )\ndef _package_data(fn):\ndata = {}\nwith open(fn, **open_kw) as fp:\nparsing = False\nlines = []\nfor line in fp.readlines():\nif sys.version_info < (3,):\nline = line.decode('utf-8')\nif line.startswith('_package_data'):\nif 'dict(' in line:\nparsing = 'python'\nlines.append('dict(\\n')\nelif line.endswith('= {\\n'):\nparsing = 'python'\nlines.append('{\\n')\nelse:\nraise NotImplementedError\ncontinue\nif not parsing:\ncontinue\nif parsing == 'python':\nif line.startswith(')') or line.startswith('}'):\nlines.append(line)\ntry:\ndata = literal_eval(\"\".join(lines))\nexcept SyntaxError as e:\ncontext = 2\nfrom_line = e.lineno - (context + 1)\nto_line = e.lineno + (context - 1)\nw = len(str(to_line))\nfor index, line in enumerate(lines):\nif from_line <= index <= to_line:\nprint(\n'{0:{1}}: {2}'.format(index, w, line).encode('utf-8'),\nend=\"\",\n)\nif index == e.lineno - 1:\nprint(\n'{0:{1}} {2}^--- {3}'.format(\n' ', w, ' ' * e.offset, e.node\n)\n)\nraise\nbreak\nlines.append(line)\nelse:\nraise NotImplementedError\nreturn data\n\n\n# make sure you can run \"python ..\/some\/dir\/setup.py install\"\npkg_data = _package_data(__file__.replace('setup.py', '__init__.py'))\n\nexclude_files = ['setup.py']\n\n\n# # helper\ndef _check_convert_version(tup):\n\"\"\"Create a PEP 386 pseudo-format conformant string from tuple tup.\"\"\"\nret_val = str(tup[0]) # first is always digit\nnext_sep = '.' # separator for next extension, can be \"\" or \".\"\nnr_digits = 0 # nr of adjacent digits in rest, to verify\npost_dev = False # are we processig post\/dev\nfor x in tup[1:]:\nif isinstance(x, int):\nnr_digits += 1\nif nr_digits > 2:\nraise ValueError('too many consecutive digits after ' + ret_val)\nret_val += next_sep + str(x)\nnext_sep = '.'\ncontinue\nfirst_letter = x[0].lower()\nnext_sep = \"\"\nif first_letter in 'abcr':\nif post_dev:\nraise ValueError('release level specified after ' 'post\/dev: ' + x)\nnr_digits = 0\nret_val += 'rc' if first_letter == 'r' else first_letter\nelif first_letter in 'pd':\nnr_digits = 1 # only one can follow\npost_dev = True\nret_val += '.post' if first_letter == 'p' else '.dev'\nelse:\nraise ValueError('First letter of \"' + x + '\" not recognised')\n# .dev and .post need a number otherwise setuptools normalizes and complains\nif nr_digits == 1 and post_dev:\nret_val += '0'\nreturn ret_val\n\n\nversion_info = pkg_data['version_info']\nversion_str = _check_convert_version(version_info)\n\n\nclass MyInstallLib(install_lib.install_lib):\ndef install(self):\nfpp = pkg_data['full_package_name'].split('.') # full package path\nfull_exclude_files = [os.path.join(*(fpp + [x])) for x in exclude_files]\nalt_files = []\noutfiles = install_lib.install_lib.install(self)\nfor x in outfiles:\nfor full_exclude_file in full_exclude_files:\nif full_exclude_file in x:\nos.remove(x)\nbreak\nelse:\nalt_files.append(x)\nreturn alt_files\n\n\nclass MySdist(_sdist):\ndef initialize_options(self):\n_sdist.initialize_options(self)\n# see pep 527, new uploads should be tar.gz or .zip\n# fmt = getattr(self, 'tarfmt', None)\n# because of unicode_literals\n# self.formats = fmt if fmt else [b'bztar'] if sys.version_info < (3, ) else ['bztar']\ndist_base = os.environ.get('PYDISTBASE')\nfpn = getattr(getattr(self, 'nsp', self), 'full_package_name', None)\nif fpn and dist_base:\nprint('setting distdir {}\/{}'.format(dist_base, fpn))\nself.dist_dir = os.path.join(dist_base, fpn)\n\n\n# try except so this doesn't bomb when you don't have wheel installed, implies\n# generation of wheels in .\/dist\ntry:\nfrom wheel.bdist_wheel import bdist_wheel as _bdist_wheel # NOQA\n\nclass MyBdistWheel(_bdist_wheel):\ndef initialize_options(self):\n_bdist_wheel.initialize_options(self)\ndist_base = os.environ.get('PYDISTBASE')\nfpn = getattr(getattr(self, 'nsp', self), 'full_package_name', None)\nif fpn and dist_base:\nprint('setting distdir {}\/{}'.format(dist_base, fpn))\nself.dist_dir = os.path.join(dist_base, fpn)\n\n_bdist_wheel_available = True\n\nexcept ImportError:\n_bdist_wheel_available = False\n\n\nclass NameSpacePackager(object):\ndef __init__(self, pkg_data):\nassert isinstance(pkg_data, dict)\nself._pkg_data = pkg_data\nself.full_package_name = self.pn(self._pkg_data['full_package_name'])\nself._split = None\nself.depth = self.full_package_name.count('.')\nself.nested = self._pkg_data.get('nested', False)\nif self.nested:\nNameSpaceInstaller.install_namespaces = lambda x: None\nself.command = None\nself.python_version()\nself._pkg = [None, None] # required and pre-installable packages\nif sys.argv[0] == 'setup.py' and sys.argv[1] == 'install':\ndebug('calling setup.py', sys.argv)\nif '-h' in sys.argv:\npass\nelif '--single-version-externally-managed' not in sys.argv:\nif os.environ.get('READTHEDOCS', None) == 'True':\nos.system('pip install .')\nsys.exit(0)\nif not os.environ.get('RUAMEL_NO_PIP_INSTALL_CHECK', False):\nprint('error: you have to install with \"pip install .\"')\nsys.exit(1)\n# If you only support an extension module on Linux, Windows thinks it\n# is pure. That way you would get pure python .whl files that take\n# precedence for downloading on Linux over source with compilable C code\nif self._pkg_data.get('universal'):\nDistribution.is_pure = lambda *args: True\nelse:\nDistribution.is_pure = lambda *args: False\nfor x in sys.argv:\nif x[0] == '-' or x == 'setup.py':\ncontinue\nself.command = x\nbreak\n\ndef pn(self, s):\nif sys.version_info < (3,) and isinstance(s, unicode):\nreturn s.encode('utf-8')\nreturn s\n\n@property\ndef split(self):\n\"\"\"split the full package name in list of compontents traditionally\ndone by setuptools.find_packages. This routine skips any directories\nwith __init__.py, for which the name starts with \"_\" or \".\", or contain a\nsetup.py\/tox.ini (indicating a subpackage)\n\"\"\"\nskip = []\nif self._split is None:\nfpn = self.full_package_name.split('.')\nself._split = []\nwhile fpn:\nself._split.insert(0, '.'.join(fpn))\nfpn = fpn[:-1]\nfor d in sorted(os.listdir('.')):\nif not os.path.isdir(d) or d == self._split[0] or d[0] in '._':\ncontinue\n# prevent sub-packages in namespace from being included\nx = os.path.join(d, '__init__.py')\nif os.path.exists(x):\npd = _package_data(x)\nif pd.get('nested', False):\nskip.append(d)\ncontinue\nself._split.append(self.full_package_name + '.' + d)\nif sys.version_info < (3,):\nself._split = [\n(y.encode('utf-8') if isinstance(y, unicode) else y) for y in self._split\n]\nif skip:\n# this interferes with output checking\n# print('skipping sub-packages:', ', '.join(skip))\npass\nreturn self._split\n\n@property\ndef namespace_packages(self):\nreturn self.split[: self.depth]\n\ndef namespace_directories(self, depth=None):\n\"\"\"return list of directories where the namespace should be created \/\ncan be found\n\"\"\"\nres = []\nfor index, d in enumerate(self.split[:depth]):\n# toplevel gets a dot\nif index > 0:\nd = os.path.join(*d.split('.'))\nres.append('.' + d)\nreturn res\n\n@property\ndef package_dir(self):\nd = {\n# don't specify empty dir, clashes with package_data spec\nself.full_package_name: '.'\n}\nif 'extra_packages' in self._pkg_data:\nreturn d\nif len(self.split) > 1: # only if package namespace\nd[self.split[0]] = self.namespace_directories(1)[0]\nreturn d\n\ndef create_dirs(self):\n\"\"\"create the directories necessary for namespace packaging\"\"\"\ndirectories = self.namespace_directories(self.depth)\nif not directories:\nreturn\nif not os.path.exists(directories[0]):\nfor d in directories:\nos.mkdir(d)\nwith open(os.path.join(d, '__init__.py'), 'w') as fp:\nfp.write(\n'import pkg_resources\\n' 'pkg_resources.declare_namespace(__name__)\\n'\n)\n\ndef python_version(self):\nsupported = self._pkg_data.get('supported')\nif supported is None:\nreturn\nif len(supported) == 1:\nminimum = supported[0]\nelse:\nfor x in supported:\nif x[0] == sys.version_info[0]:\nminimum = x\nbreak\nelse:\nreturn\nif sys.version_info < minimum:\nprint('minimum python version(s): ' + str(supported))\nsys.exit(1)\n\ndef check(self):\n# https:\/\/github.com\/pypa\/setuptools\/issues\/2355#issuecomment-685159580\nInstallationError = Exception\n# arg is either develop (pip install -e) or install\nif self.command not in ['install', 'develop']:\nreturn\n\n# if hgi and hgi.base are both in namespace_packages matching\n# against the top (hgi.) it suffices to find minus-e and non-minus-e\n# installed packages. As we don't know the order in namespace_packages\n# do some magic\nprefix = self.split[0]\nprefixes = set([prefix, prefix.replace('_', '-')])\nfor p in sys.path:\nif not p:\ncontinue # directory with setup.py\nif os.path.exists(os.path.join(p, 'setup.py')):\ncontinue # some linked in stuff might not be hgi based\nif not os.path.isdir(p):\ncontinue\nif p.startswith('\/tmp\/'):\ncontinue\nfor fn in os.listdir(p):\nfor pre in prefixes:\nif fn.startswith(pre):\nbreak\nelse:\ncontinue\nfull_name = os.path.join(p, fn)\n# not in prefixes the toplevel is never changed from _ to -\nif fn == prefix and os.path.isdir(full_name):\n# directory -> other, non-minus-e, install\nif self.command == 'develop':\nraise InstallationError(\n'Cannot mix develop (pip install -e),\\nwith '\n'non-develop installs for package name {0}'.format(fn)\n)\nelif fn == prefix:\nraise InstallationError('non directory package {0} in {1}'.format(fn, p))\nfor pre in [x + '.' for x in prefixes]:\nif fn.startswith(pre):\nbreak\nelse:\ncontinue # hgiabc instead of hgi.\nif fn.endswith('-link') and self.command == 'install':\nraise InstallationError(\n'Cannot mix non-develop with develop\\n(pip install -e)'\n' installs for package name {0}'.format(fn)\n)\n\ndef entry_points(self, script_name=None, package_name=None):\n\"\"\"normally called without explicit script_name and package name\nthe default console_scripts entry depends on the existence of __main__.py:\nif that file exists then the function main() in there is used, otherwise\nthe in __init__.py.\n\nthe _package_data entry_points key\/value pair can be explicitly specified\nincluding a \"=\" character. If the entry is True or 1 the\nscriptname is the last part of the full package path (split on '.')\nif the ep entry is a simple string without \"=\", that is assumed to be\nthe name of the script.\n\"\"\"\n\ndef pckg_entry_point(name):\nreturn '{0}{1}:main'.format(\nname, '.__main__' if os.path.exists('__main__.py') else \"\"\n)\n\nep = self._pkg_data.get('entry_points', True)\nif isinstance(ep, dict):\nreturn ep\nif ep is None:\nreturn None\nif ep not in [True, 1]:\nif '=' in ep:\n# full specification of the entry point like\n# entry_points=['yaml = ruamel.yaml.cmd:main'],\nreturn {'console_scripts': [ep]}\n# assume that it is just the script name\nscript_name = ep\nif package_name is None:\npackage_name = self.full_package_name\nif not script_name:\nscript_name = package_name.split('.')[-1]\nreturn {\n'console_scripts': [\n'{0} = {1}'.format(script_name, pckg_entry_point(package_name))\n]\n}\n\n@property\ndef url(self):\nurl = self._pkg_data.get('url')\nif url:\nreturn url\nsp = self.full_package_name\nfor ch in '_.':\nsp = sp.replace(ch, '-')\nreturn 'https:\/\/sourceforge.net\/p\/{0}\/code\/ci\/default\/tree'.format(sp)\n\n@property\ndef author(self):\nreturn self._pkg_data['author'] # no get needs to be there\n\n@property\ndef author_email(self):\nreturn self._pkg_data['author_email'] # no get needs to be there\n\n@property\ndef license(self):\n\"\"\"return the license field from _package_data, None means MIT\"\"\"\nlic = self._pkg_data.get('license')\nif lic is None:\n# lic_fn = os.path.join(os.path.dirname(__file__), 'LICENSE')\n# assert os.path.exists(lic_fn)\nreturn 'MIT license'\nreturn lic\n\ndef has_mit_lic(self):\nreturn 'MIT' in self.license\n\n@property\ndef description(self):\nreturn self._pkg_data['description'] # no get needs to be there\n\n@property\ndef status(self):\n# \u03b1\u03b2\nstatus = self._pkg_data.get('status', '\u03b2').lower()\nif status in ['\u03b1', 'alpha']:\nreturn (3, 'Alpha')\nelif status in ['\u03b2', 'beta']:\nreturn (4, 'Beta')\nelif 'stable' in status.lower():\nreturn (5, 'Production\/Stable')\nraise NotImplementedError\n\n@property\ndef classifiers(self):\n\"\"\"this needs more intelligence, probably splitting the classifiers from _pkg_data\nand only adding defaults when no explicit entries were provided.\nAdd explicit Python versions in sync with tox.env generation based on python_requires?\n\"\"\"\nattr = '_' + sys._getframe().f_code.co_name\nif not hasattr(self, attr):\nsetattr(self, attr, self._setup_classifiers())\nreturn getattr(self, attr)\n\ndef _setup_classifiers(self):\nreturn sorted(\nset(\n[\n'Development Status :: {0} - {1}'.format(*self.status),\n'Intended Audience :: Developers',\n'License :: '\n+ ('OSI Approved :: MIT' if self.has_mit_lic() else 'Other\/Proprietary')\n+ ' License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n]\n+ [self.pn(x) for x in self._pkg_data.get('classifiers', [])]\n)\n)\n\n@property\ndef keywords(self):\nreturn self.pn(self._pkg_data.get('keywords', []))\n\n@property\ndef install_requires(self):\n\"\"\"list of packages required for installation\"\"\"\nreturn self._analyse_packages[0]\n\n@property\ndef install_pre(self):\n\"\"\"list of packages required for installation\"\"\"\nreturn self._analyse_packages[1]\n\n@property\ndef _analyse_packages(self):\n\"\"\"gather from configuration, names starting with * need\nto be installed explicitly as they are not on PyPI\ninstall_requires should be dict, with keys 'any', 'py27' etc\nor a list (which is as if only 'any' was defined\n\nToDo: update with: pep508 conditional dependencies\n\"\"\"\nif self._pkg[0] is None:\nself._pkg[0] = []\nself._pkg[1] = []\n\nir = self._pkg_data.get('install_requires')\nif ir is None:\nreturn self._pkg # these will be both empty at this point\nif isinstance(ir, list):\nself._pkg[0] = ir\nreturn self._pkg\n# 'any' for all builds, 'py27' etc for specifics versions\npackages = ir.get('any', [])\nif isinstance(packages, string_type):\npackages = packages.split() # assume white space separated string\nif self.nested:\n# parent dir is also a package, make sure it is installed (need its .pth file)\nparent_pkg = self.full_package_name.rsplit('.', 1)[0]\nif parent_pkg not in packages:\npackages.append(parent_pkg)\nimplementation = platform.python_implementation()\nif implementation == 'CPython':\npyver = 'py{0}{1}'.format(*sys.version_info)\nelif implementation == 'PyPy':\npyver = 'pypy' if sys.version_info < (3,) else 'pypy3'\nelif implementation == 'Jython':\npyver = 'jython'\npackages.extend(ir.get(pyver, []))\nfor p in packages:\n# package name starting with * means use local source tree, non-published\n# to PyPi or maybe not latest version on PyPI -> pre-install\nif p[0] == '*':\np = p[1:]\nself._pkg[1].append(p)\nself._pkg[0].append(p)\nreturn self._pkg\n\n@property\ndef extras_require(self):\n\"\"\"dict of conditions -> extra packages informaton required for installation\nas of setuptools 33 doing `package ; python_version<=2.7' in install_requires\nstill doesn't work\n\nhttps:\/\/www.python.org\/dev\/peps\/pep-0508\/\nhttps:\/\/wheel.readthedocs.io\/en\/latest\/index.html#defining-conditional-dependencies\nhttps:\/\/hynek.me\/articles\/conditional-python-dependencies\/\n\"\"\"\nep = self._pkg_data.get('extras_require')\nreturn ep\n\n# @property\n# def data_files(self):\n# df = self._pkg_data.get('data_files', [])\n# if self.has_mit_lic():\n# df.append('LICENSE')\n# if not df:\n# return None\n# return [('.', df)]\n\n@property\ndef package_data(self):\ndf = self._pkg_data.get('data_files', [])\nif self.has_mit_lic():\n# include the file\ndf.append('LICENSE')\n# but don't install it\nexclude_files.append('LICENSE')\nif self._pkg_data.get('binary_only', False):\nexclude_files.append('__init__.py')\ndebug('testing<<<<<')\nif 'Typing :: Typed' in self.classifiers:\ndebug('appending')\ndf.append('py.typed')\npd = self._pkg_data.get('package_data', {})\nif df:\npd[self.full_package_name] = df\nif sys.version_info < (3,):\n# python2 doesn't seem to like unicode package names as keys\n# maybe only when the packages themselves are non-unicode\nfor k in pd:\nif isinstance(k, unicode):\npd[str(k)] = pd.pop(k)\n# for k in pd:\n# pd[k] = [e.encode('utf-8') for e in pd[k]] # de-unicode\nreturn pd\n\n@property\ndef packages(self):\ns = self.split\n# fixed this in package_data, the keys there must be non-unicode for py27\n# if sys.version_info < (3, 0):\n# s = [x.encode('utf-8') for x in self.split]\nreturn s + self._pkg_data.get('extra_packages', [])\n\n@property\ndef python_requires(self):\nreturn self._pkg_data.get('python_requires', None)\n\n@property\ndef ext_modules(self):\n\"\"\"\nCheck if all modules specified in the value for 'ext_modules' can be build.\nThat value (if not None) is a list of dicts with 'name', 'src', 'lib'\nOptional 'test' can be used to make sure trying to compile will work on the host\n\ncreates and return the external modules as Extensions, unless that\nis not necessary at all for the action (like --version)\n\ntest existence of compiler by using export CC=nonexistent; export CXX=nonexistent\n\"\"\"\n\nif hasattr(self, '_ext_modules'):\nreturn self._ext_modules\nif '--version' in sys.argv:\nreturn None\nif platform.python_implementation() == 'Jython':\nreturn None\ntry:\nplat = sys.argv.index('--plat-name')\nif 'win' in sys.argv[plat + 1]:\nreturn None\nexcept ValueError:\npass\nself._ext_modules = []\nno_test_compile = False\nif '--restructuredtext' in sys.argv:\nno_test_compile = True\nelif 'sdist' in sys.argv:\nno_test_compile = True\nif no_test_compile:\nfor target in self._pkg_data.get('ext_modules', []):\next = Extension(\nself.pn(target['name']),\nsources=[self.pn(x) for x in target['src']],\nlibraries=[self.pn(x) for x in target.get('lib')],\n)\nself._ext_modules.append(ext)\nreturn self._ext_modules\n\nprint('sys.argv', sys.argv)\nimport tempfile\nimport shutil\nfrom textwrap import dedent\n\nimport distutils.sysconfig\nimport distutils.ccompiler\nfrom distutils.errors import CompileError, LinkError\n\nfor target in self._pkg_data.get('ext_modules', []): # list of dicts\next = Extension(\nself.pn(target['name']),\nsources=[self.pn(x) for x in target['src']],\nlibraries=[self.pn(x) for x in target.get('lib')],\n)\n# debug('test1 in target', 'test' in target, target)\nif 'test' not in target: # no test, just hope it works\nself._ext_modules.append(ext)\ncontinue\nif sys.version_info[:2] == (3, 4) and platform.system() == 'Windows':\n# this is giving problems on appveyor, so skip\nif 'FORCE_C_BUILD_TEST' not in os.environ:\nself._ext_modules.append(ext)\ncontinue\n# write a temporary .c file to compile\nc_code = dedent(target['test'])\ntry:\ntmp_dir = tempfile.mkdtemp(prefix='tmp_ruamel_')\nbin_file_name = 'test' + self.pn(target['name'])\nfile_name = os.path.join(tmp_dir, bin_file_name + '.c')\nprint('test compiling', file_name, '->', bin_file_name, end=' ')\nwith open(file_name, 'w') as fp: # write source\nfp.write(c_code)\n# and try to compile it\ncompiler = distutils.ccompiler.new_compiler()\nassert isinstance(compiler, distutils.ccompiler.CCompiler)\n# do any platform specific initialisations\ndistutils.sysconfig.customize_compiler(compiler)\n# make sure you can reach header files because compile does change dir\ncompiler.add_include_dir(os.getcwd())\nif sys.version_info < (3,):\ntmp_dir = tmp_dir.encode('utf-8')\n# used to be a different directory, not necessary\ncompile_out_dir = tmp_dir\ntry:\ncompiler.link_executable(\ncompiler.compile([file_name], output_dir=compile_out_dir),\nbin_file_name,\noutput_dir=tmp_dir,\nlibraries=ext.libraries,\n)\nexcept CompileError:\ndebug('compile error:', file_name)\nprint('compile error:', file_name)\nraise\nexcept LinkError:\ndebug('link error', file_name)\nprint('link error', file_name)\nraise\nprint('OK')\nself._ext_modules.append(ext)\nexcept Exception as e: # NOQA\ndebug('Exception:', e)\nprint('Exception:', e)\nsys.exit(1)\nif sys.version_info[:2] == (3, 4) and platform.system() == 'Windows':\ntraceback.print_exc()\nfinally:\nshutil.rmtree(tmp_dir)\nreturn self._ext_modules\n\n@property\ndef test_suite(self):\nreturn self._pkg_data.get('test_suite')\n\ndef wheel(self, kw, setup):\n\"\"\"temporary add setup.cfg if creating a wheel to include LICENSE file\nhttps:\/\/bitbucket.org\/pypa\/wheel\/issues\/47\n\"\"\"\nif 'bdist_wheel' not in sys.argv:\nreturn False\nfile_name = 'setup.cfg'\nif os.path.exists(file_name): # add it if not in there?\nreturn False\nwith open(file_name, 'w') as fp:\nif os.path.exists('LICENSE'):\nfp.write('[metadata]\\nlicense_file = LICENSE\\n')\nelse:\nprint('\\n\\n>>>>>> LICENSE file not found <<<<<\\n\\n')\nif self._pkg_data.get('universal'):\nfp.write('[bdist_wheel]\\nuniversal = 1\\n')\ntry:\nsetup(**kw)\nexcept Exception:\nraise\nfinally:\nos.remove(file_name)\nreturn True\n\n\n# # call setup\ndef main():\ndump_kw = '--dump-kw'\nif dump_kw in sys.argv:\nimport wheel\nimport distutils\nimport setuptools\n\nprint('python: ', sys.version)\nprint('setuptools:', setuptools.__version__)\nprint('distutils: ', distutils.__version__)\nprint('wheel: ', wheel.__version__)\nnsp = NameSpacePackager(pkg_data)\nnsp.check()\nnsp.create_dirs()\nMySdist.nsp = nsp\nif pkg_data.get('tarfmt'):\nMySdist.tarfmt = pkg_data.get('tarfmt')\n\ncmdclass = dict(install_lib=MyInstallLib, sdist=MySdist)\nif _bdist_wheel_available:\nMyBdistWheel.nsp = nsp\ncmdclass['bdist_wheel'] = MyBdistWheel\n\nkw = dict(\nname=nsp.full_package_name,\nnamespace_packages=nsp.namespace_packages,\nversion=version_str,\npackages=nsp.packages,\npython_requires=nsp.python_requires,\nurl=nsp.url,\nauthor=nsp.author,\nauthor_email=nsp.author_email,\ncmdclass=cmdclass,\npackage_dir=nsp.package_dir,\nentry_points=nsp.entry_points(),\ndescription=nsp.description,\ninstall_requires=nsp.install_requires,\nextras_require=nsp.extras_require, # available since setuptools 18.0 \/ 2015-06\nlicense=nsp.license,\nclassifiers=nsp.classifiers,\nkeywords=nsp.keywords,\npackage_data=nsp.package_data,\next_modules=nsp.ext_modules,\ntest_suite=nsp.test_suite,\n)\n\nif '--version' not in sys.argv and ('--verbose' in sys.argv or dump_kw in sys.argv):\nfor k in sorted(kw):\nv = kw[k]\nprint(' \"{0}\": \"{1}\",'.format(k, v))\n# if '--record' in sys.argv:\n# return\nif dump_kw in sys.argv:\nsys.argv.remove(dump_kw)\ntry:\nwith open('README.rst') as fp:\nkw['long_description'] = fp.read()\nkw['long_description_content_type'] = 'text\/x-rst'\nexcept Exception:\npass\n\nif nsp.wheel(kw, setup):\nreturn\nfor x in ['-c', 'egg_info', '--egg-base', 'pip-egg-info']:\nif x not in sys.argv:\nbreak\nelse:\n# we're doing a tox setup install any starred package by searching up the source tree\n# until you match your\/package\/name for your.package.name\nfor p in nsp.install_pre:\nimport subprocess\n\n# search other source\nsetup_path = os.path.join(*p.split('.') + ['setup.py'])\ntry_dir = os.path.dirname(sys.executable)\nwhile len(try_dir) > 1:\nfull_path_setup_py = os.path.join(try_dir, setup_path)\nif os.path.exists(full_path_setup_py):\npip = sys.executable.replace('python', 'pip')\ncmd = [pip, 'install', os.path.dirname(full_path_setup_py)]\n# with open('\/var\/tmp\/notice', 'a') as fp:\n# print('installing', cmd, file=fp)\nsubprocess.check_output(cmd)\nbreak\ntry_dir = os.path.dirname(try_dir)\nsetup(**kw)\n\n\nmain()\n"
    },
    {
        "package_name": "sahi-0.10.4",
        "file_list": "LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md requirements.txt annotation.py auto_model.py cli.py model.py combine.py combine.py __init__.py utils.py __init__.py predict.py prediction.py coco2fiftyone.py coco2yolov5.py coco_error_analysis.py coco_evaluation.py predict.py predict_fiftyone.py slice_coco.py __init__.py slicing.py coco.py compatibility.py cv.py detectron2.py fiftyone.py file.py huggingface.py import_utils.py mmdet.py mot.py shapely.py torch.py torchvision.py versions.py yolov5.py __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py",
        "setup.py": "import io\nimport os\nimport re\n\nimport setuptools\n\n\ndef get_long_description():\nbase_dir = os.path.abspath(os.path.dirname(__file__))\nwith io.open(os.path.join(base_dir, \"README.md\"), encoding=\"utf-8\") as f:\nreturn f.read()\n\n\ndef get_requirements():\nwith open(\"requirements.txt\", encoding=\"utf8\") as f:\nreturn f.read().splitlines()\n\n\ndef get_version():\ncurrent_dir = os.path.abspath(os.path.dirname(__file__))\nversion_file = os.path.join(current_dir, \"sahi\", \"__init__.py\")\nwith io.open(version_file, encoding=\"utf-8\") as f:\nreturn re.search(r'^__version__ = [\\'\"]([^\\'\"]*)[\\'\"]', f.read(), re.M).group(1)\n\n\nsetuptools.setup(\nname=\"sahi\",\nversion=get_version(),\nauthor=\"OBSS\",\nlicense=\"MIT\",\ndescription=\"A vision library for performing sliced inference on large images\/small objects\",\nlong_description=get_long_description(),\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/obss\/sahi\",\npackages=setuptools.find_packages(exclude=[\"demo\", \"docs\", \"resources\", \"tests\", \"scripts\"]),\npython_requires=\">=3.6\",\ninstall_requires=get_requirements(),\nextras_require={\n\"tests\": [\"pytest\", \"mmdet\", \"norfair\", \"layer\"],\n\"dev\": [\"black==21.7b0\", \"flake8==3.9.2\", \"isort==5.9.2\", \"jupyterlab==3.0.14\"],\n},\nclassifiers=[\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Science\/Research\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Software Development :: Libraries\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\nentry_points={\n\"console_scripts\": [\n\"sahi=sahi.cli:app\",\n],\n},\n)\n"
    },
    {
        "package_name": "sanic-routing-22.3.0",
        "file_list": "LICENSE PKG-INFO README.md exceptions.py group.py line.py patterns.py route.py router.py tree.py utils.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt setup.cfg setup.py",
        "setup.py": "\"\"\"\nSanic\n\"\"\"\nimport codecs\nimport os\nimport re\n\nfrom setuptools import setup\n\n\ndef open_local(paths, mode=\"r\", encoding=\"utf8\"):\npath = os.path.join(os.path.abspath(os.path.dirname(__file__)), *paths)\n\nreturn codecs.open(path, mode, encoding)\n\n\nwith open_local([\"sanic_routing\", \"__init__.py\"], encoding=\"latin1\") as fp:\ntry:\nversion = re.findall(\nr\"^__version__ = \\\"([^']+)\\\"\\r?$\", fp.read(), re.M\n)[0]\nexcept IndexError:\nraise RuntimeError(\"Unable to determine version.\")\n\nwith open_local([\"README.md\"]) as rm:\nlong_description = rm.read()\n\nsetup_kwargs = {\n\"name\": \"sanic-routing\",\n\"version\": version,\n\"url\": \"https:\/\/github.com\/sanic-org\/sanic-routing\/\",\n\"license\": \"MIT\",\n\"author\": \"Adam Hopkins\",\n\"author_email\": \"admhpkns@gmail.com\",\n\"description\": (\"Core routing component for Sanic\"),\n\"long_description\": long_description,\n\"long_description_content_type\": \"text\/markdown\",\n\"packages\": [\"sanic_routing\"],\n\"platforms\": \"any\",\n\"classifiers\": [\n\"Development Status :: 4 - Beta\",\n\"Environment :: Web Environment\",\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n],\n}\n\ntests_require = [\"pytest\", \"sanic\", \"pytest-asyncio\"]\n\nsetup_kwargs[\"install_requires\"] = None\nsetup_kwargs[\"tests_require\"] = tests_require\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "scikit-image-0.19.3",
        "file_list": "CODE_OF_CONDUCT.md CONTRIBUTING.txt CONTRIBUTORS.txt plot_3d_image_processing.py plot_3d_interaction.py plot_3d_structure_tensor.py plot_coins_segmentation.py plot_face_detection.py plot_fluorescence_nuclear_envelope.py plot_haar_extraction_selection_classification.py plot_human_mitosis.py plot_image_comparison.py plot_morphology.py plot_pixel_graphs.py plot_rank_filters.py plot_thresholding.py README.txt plot_adapt_hist_eq_3d.py plot_adapt_rgb.py plot_equalize.py plot_histogram_matching.py plot_ihc_color_separation.py plot_local_equalize.py plot_log_gamma.py plot_regional_maxima.py plot_rgb_to_gray.py plot_rgb_to_hsv.py plot_tinting_grayscale_images.py README.txt plot_3d.py plot_general.py plot_scientific.py plot_specific.py README.txt plot_max_tree.py plot_threshold_li.py README.txt plot_active_contours.py plot_canny.py plot_circular_elliptical_hough_transform.py plot_contours.py plot_convex_hull.py plot_edge_filter.py plot_line_hough_transform.py plot_marching_cubes.py plot_polygon.py plot_random_shapes.py plot_ridge_filter.py plot_shapes.py plot_skeleton.py README.txt plot_blob.py plot_brief.py plot_censure.py plot_corner.py plot_daisy.py plot_gabor.py plot_gabors_from_astronaut.py plot_glcm.py plot_haar.py plot_hog.py plot_holes_and_peaks.py plot_local_binary_pattern.py plot_multiblock_local_binary_pattern.py plot_orb.py plot_shape_index.py plot_sift.py plot_template.py plot_windowed_histogram.py README.txt plot_attribute_operators.py plot_blur_effect.py plot_cycle_spinning.py plot_deconvolution.py plot_denoise.py plot_denoise_wavelet.py plot_dog.py plot_entropy.py plot_hysteresis.py plot_inpaint.py plot_j_invariant.py plot_j_invariant_tutorial.py plot_nonlocal_means.py plot_phase_unwrap.py plot_rank_mean.py plot_restoration.py plot_tophat.py plot_unsharp_mask.py plot_window.py README.txt plot_camera_numpy.py plot_structuring_elements.py plot_view_as_blocks.py README.txt README.txt plot_masked_register_translation.py plot_opticalflow.py plot_register_rotation.py plot_register_translation.py plot_stitching.py README.txt plot_boundary_merge.py plot_chan_vese.py plot_compact_watershed.py plot_euler_number.py plot_expand_labels.py plot_extrema.py plot_floodfill.py plot_hausdorff_distance.py plot_join_segmentations.py plot_label.py plot_marked_watershed.py plot_mask_slic.py plot_metrics.py plot_morphsnakes.py plot_multiotsu.py plot_ncut.py plot_niblack_sauvola.py plot_peak_local_max.py plot_perimeters.py plot_rag.py plot_rag_boundary.py plot_rag_draw.py plot_rag_mean_color.py plot_rag_merge.py plot_random_walker_segmentation.py plot_regionprops.py plot_regionprops_table.py plot_rolling_ball.py plot_segmentations.py plot_thresholding.py plot_trainable_segmentation.py plot_watershed.py README.txt plot_edge_modes.py plot_fundamental_matrix.py plot_geometric.py plot_matching.py plot_piecewise_affine.py plot_pyramid.py plot_radon_transform.py plot_ransac.py plot_rescale.py plot_ssim.py plot_swirl.py plot_transform_types.py README.txt doi_role.py notebook_doc.py plot2rst.py test_notebook_doc.py __init__.py __init__.py gh-pages.py Makefile report_handling_manual.rst conf.py contribute.rst configure_git.rst development_workflow.rst following_latest.rst forking_hell.rst git_development.rst git_install.rst git_intro.rst git_resources.rst index.rst maintainer_workflow.rst patching.rst set_up_fork.rst index.rst install.rst hough_tf.py show_collection.py random_gallery.py release_notes.rst 0-skip-process.rst 1-governance.rst 2-values.rst 3-transition-to-v1.rst template.rst __init__.py data_types.rst geometrical_transform.rst getting_help.rst getting_started.rst numpy_images.rst plugins.rst transforming_image_data.rst tutorials.rst tutorial_parallelization.rst tutorial_segmentation.rst video.rst viewer.rst visualization.rst localtoc.html navbar.html navigation.html searchbox.html versions.html apigen.py build_modref_templates.py LICENSE.txt plot_pr.py __init__.py INSTALL.rst LICENSE.txt Makefile MANIFEST.in PKG-INFO pyproject.toml README.md RELEASE.txt build.txt data.txt default.txt docs.txt extras.txt optional.txt README.md test.txt _release_tools.txt requirements.txt dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py adapt_rgb.py colorconv.py colorlabel.py delta_e.py rgb_colors.py ciede2000_test_data.txt lab_array_a_10.npy lab_array_a_2.npy lab_array_a_r.npy lab_array_b_10.npy lab_array_b_2.npy lab_array_b_r.npy lab_array_c_10.npy lab_array_c_2.npy lab_array_c_r.npy lab_array_d50_10.npy lab_array_d50_2.npy lab_array_d50_r.npy lab_array_d55_10.npy lab_array_d55_2.npy lab_array_d55_r.npy lab_array_d65_10.npy lab_array_d65_2.npy lab_array_d65_r.npy lab_array_d75_10.npy lab_array_d75_2.npy lab_array_e_2.npy luv_array_a_10.npy luv_array_a_2.npy luv_array_a_r.npy luv_array_b_10.npy luv_array_b_2.npy luv_array_b_r.npy luv_array_c_10.npy luv_array_c_2.npy luv_array_c_r.npy luv_array_d50_10.npy luv_array_d50_2.npy luv_array_d50_r.npy luv_array_d55_10.npy luv_array_d55_2.npy luv_array_d55_r.npy luv_array_d65_10.npy luv_array_d65_2.npy luv_array_d65_r.npy luv_array_d75_10.npy luv_array_d75_2.npy luv_array_e_2.npy test_adapt_rgb.py test_colorconv.py test_colorlabel.py test_delta_e.py __init__.py __init__.py conftest.py astronaut.png astronaut_GRAY_hog_L1.npy astronaut_GRAY_hog_L2-Hys.npy block.png brick.png bw_text.png bw_text_skeleton.npy camera.png cell.png checker_bilevel.png chelsea.png chessboard_GRAY.png chessboard_GRAY_U16.tif chessboard_GRAY_U16B.tif chessboard_GRAY_U8.npy chessboard_GRAY_U8.npz chessboard_RGB.png chessboard_RGB_U8.npy chessboard_RGB_U8.npz clock_motion.png coffee.png coins.png color.png diamond-matlab-output.npz disk-matlab-output.npz foo3x5x4indexed.png grass.png gravel.png gray_morph_output.npz green_palette.png horse.png hubble_deep_field.jpg ihc.png lbpcascade_frontalface_opencv.xml lfw_subset.npy logo.png microaneurysms.png moon.png motorcycle_disp.npz motorcycle_left.png motorcycle_right.png mssim_matlab_output.npz multi.fits multipage.tif multipage_rgb.tif no_time_for_that_tiny.gif page.png palette_color.png palette_gray.png phantom.png rank_filter_tests.npz README.txt retina.jpg rocket.jpg setup.py simple.fits test_data.py __init__.py text.png truncated.jpg _binary_blobs.py _blobs_3d_fiji_skeleton.tif _fetchers.py _registry.py __init__.py setup.cpython-39.pyc _registry.cpython-39.pyc draw.py draw3d.py draw_nd.py setup.py test_draw.py test_draw3d.py test_draw_nd.py test_polygon2mask.py test_random_shapes.py __init__.py _draw.pyx _polygon2mask.py _random_shapes.py __init__.py exposure.py histogram_matching.py setup.py test_exposure.py test_histogram_matching.py __init__.py _adapthist.py __init__.py blob.py brief.py brief_pythran.cpp brief_pythran.py censure.py censure_cy.pyx conditional_omp.h corner.py corner_cy.pyx haar.py match.py orb.py orb_cy.pyx orb_descriptor_positions.txt peak.py safe_openmp.pxd setup.py sift.py template.py test_basic_features.py test_blob.py test_brief.py test_canny.py test_cascade.py test_censure.py test_corner.py test_daisy.py test_haar.py test_hog.py test_match.py test_orb.py test_peak.py test_sift.py test_template.py test_texture.py test_util.py __init__.py texture.py util.py _basic_features.py _canny.py _cascade.pyx _daisy.py _haar.pxd _haar.pyx _hessian_det_appx_pythran.cpp _hessian_det_appx_pythran.py _hog.py _hoghistogram.pyx _orb_descriptor_positions.py _sift.pyx _texture.pxd _texture.pyx __init__.py edges.py lpi_filter.py bilateral.py bilateral_cy.pyx core_cy.pxd core_cy.pyx core_cy_3d.pxd core_cy_3d.pyx generic.py generic_cy.pyx percentile_cy.pyx test_rank.py __init__.py _percentile.py __init__.py ridges.py setup.py test_correlate.py test_edges.py test_fft_based.py test_gabor.py test_gaussian.py test_lpi_filter.py test_median.py test_ridges.py test_thresholding.py test_unsharp_mask.py test_window.py __init__.py thresholding.py _fft_based.py _gabor.py _gaussian.py _median.py _multiotsu.pyx _rank_order.py _sparse.py _unsharp_mask.py _window.py __init__.py graph_cut.py graph_merge.py rag.py setup.py test_rag.py __init__.py _ncut.py _ncut_cy.pyx __init__.py manual_segmentation.py setup.py test_trainable_segmentation.py __init__.py trainable_segmentation.py __init__.py heap.pxd heap.pyx mcp.py setup.py spath.py test_anisotropy.py test_connect.py test_flexible.py test_heap.py test_mcp.py test_pixel_graph.py test_spath.py __init__.py _graph.py _mcp.pxd _mcp.pyx _spath.pyx __init__.py collection.py manage_plugins.py setup.py sift.py test_collection.py test_colormixer.py test_fits.py test_histograms.py test_imageio.py test_imread.py test_io.py test_mpl_imshow.py test_multi_image.py test_pil.py test_plugin.py test_plugin_util.py test_sift.py test_simpleitk.py test_tifffile.py __init__.py util.py _image_stack.py _io.py fits_plugin.ini fits_plugin.py gdal_plugin.ini gdal_plugin.py gtk_plugin.ini gtk_plugin.py imageio_plugin.ini imageio_plugin.py imread_plugin.ini imread_plugin.py matplotlib_plugin.ini matplotlib_plugin.py pil_plugin.ini pil_plugin.py qt_plugin.ini qt_plugin.py q_color_mixer.py q_histogram.py simpleitk_plugin.ini simpleitk_plugin.py skivi.py tifffile_plugin.ini tifffile_plugin.py util.py _colormixer.pyx _histograms.pyx __init__.py __init__.py block.py entropy.py fit.py createluts.py LookUpTable.h README.md visual_test.py pnpoly.py profile.py setup.py test_block.py test_blur_effect.py test_ccomp.py test_entropy.py test_find_contours.py test_fit.py test_label.py test_marching_cubes.py test_moments.py test_pnpoly.py test_polygon.py test_profile.py test_regionprops.py __init__.py _blur_effect.py _ccomp.pxd _ccomp.pyx _find_contours.py _find_contours_cy.pyx _label.py _marching_cubes_classic.py _marching_cubes_classic_cy.pyx _marching_cubes_lewiner.py _marching_cubes_lewiner_cy.pyx _marching_cubes_lewiner_luts.py _moments.py _moments_cy.pyx _pnpoly.pyx _polygon.py _regionprops.py _regionprops_utils.py __init__.py set_metrics.py simple_metrics.py test_segmentation_metrics.py test_set_metrics.py test_simple_metrics.py test_structural_similarity.py __init__.py _adapted_rand_error.py _contingency_table.py _structural_similarity.py _variation_of_information.py __init__.py binary.py convex_hull.py extrema.py footprints.py gray.py grayreconstruct.py grey.py greyreconstruct.py max_tree.py misc.py selem.py setup.py test_binary.py test_convex_hull.py test_extrema.py test_flood_fill.py test_footprints.py test_gray.py test_max_tree.py test_misc.py test_reconstruction.py test_skeletonize.py test_skeletonize_3d.py test_util.py __init__.py _convex_hull.pyx _extrema_cy.pyx _flood_fill.py _flood_fill_cy.pyx _grayreconstruct.pyx _max_tree.pyx _queue_with_history.pxi _skeletonize.py _skeletonize_3d_cy.pyx _skeletonize_3d_cy.pyx.in _skeletonize_cy.pyx _util.py __init__.py OriginalX-130Y130.png OriginalX130Y130.png OriginalX75Y75.png TransformedX-130Y130.png TransformedX130Y130.png TransformedX75Y75.png test_ilk.py test_masked_phase_cross_correlation.py test_phase_cross_correlation.py test_tvl1.py __init__.py _masked_phase_cross_correlation.py _optical_flow.py _optical_flow_utils.py _phase_cross_correlation.py __init__.py deconvolution.py inpaint.py j_invariant.py non_local_means.py rolling_ball.py setup.py camera_rl.npy camera_unsup.npy camera_unsup2.npy camera_wiener.npy test_denoise.py test_inpaint.py test_j_invariant.py test_restoration.py test_rolling_ball.py test_unwrap.py __init__.py uft.py unwrap.py unwrap_2d_ljmu.c unwrap_2d_ljmu.h unwrap_3d_ljmu.c unwrap_3d_ljmu.h _cycle_spin.py _denoise.py _denoise_cy.pyx _inpaint.pyx _nl_means_denoising.pyx _rolling_ball_cy.pyx _unwrap_1d.pyx _unwrap_2d.pyx _unwrap_3d.pyx __init__.py skivi skivi.py __init__.py active_contour_model.py boundaries.py heap_general.pxi heap_watershed.pxi morphsnakes.py random_walker_segmentation.py setup.py slic_superpixels.py test_active_contour_model.py test_boundaries.py test_chan_vese.py test_clear_border.py test_expand_labels.py test_felzenszwalb.py test_join.py test_morphsnakes.py test_quickshift.py test_random_walker.py test_slic.py test_watershed.py __init__.py _chan_vese.py _clear_border.py _expand_labels.py _felzenszwalb.py _felzenszwalb_cy.pyx _join.py _quickshift.py _quickshift_cy.pyx _slic.pyx _watershed.py _watershed_cy.pyx __init__.py setup.py finite_radon_transform.py hough_transform.py integral.py pyramids.py radon_transform.py setup.py test_finite_radon_transform.py test_geometric.py test_hough_transform.py test_integral.py test_pyramids.py test_radon_transform.py test_warps.py __init__.py _geometric.py _hough_transform.pyx _radon_transform.pyx _warps.py _warps_cy.pyx __init__.py apply_parallel.py arraycrop.py compare.py dtype.py lookfor.py noise.py setup.py shape.py test_apply_parallel.py test_arraycrop.py test_compare.py test_dtype.py test_invert.py test_labels.py test_map_array.py test_montage.py test_random_noise.py test_regular_grid.py test_shape.py test_unique_rows.py __init__.py unique.py _invert.py _label.py _map_array.py _montage.py _regular_grid.py _remap.pyx __init__.py base.py linetool.py painttool.py recttool.py __init__.py base.py canny.py color_histogram.py crop.py labelplugin.py lineprofile.py measure.py overlayplugin.py plotplugin.py __init__.py qt.py test_plugins.py test_tools.py test_utils.py test_viewer.py test_widgets.py __init__.py canvas.py core.py dialogs.py __init__.py core.py __init__.py core.py history.py __init__.py __init__.py _build.py coord.py fast_exp.h fast_exp.pxd fast_exp.pyx filters.py fused_numerics.pxd geometry.pxd geometry.pyx interpolation.pxd interpolation.pyx lazy.py setup.py tester.py testing.py test_coord.py test_fast_exp.py test_geometry.py test_interpolation.py test_safe_as_int.py test_testing.py test_utils.py test_version_requirements.py test_warnings.py __init__.py transform.pxd transform.pyx utils.py vectorized_ops.h version_requirements.py _dependency_checks.py _geometry.py _tempfile.py _warnings.py __init__.py __init__.py TODO.txt",
        "setup.py": "#! \/usr\/bin\/env python\n\nimport os\nimport sys\nimport tempfile\nimport shutil\nimport builtins\nimport textwrap\nfrom numpy.distutils.command.build_ext import build_ext as npy_build_ext\n\nimport setuptools\nfrom setuptools.command.build_py import build_py\nfrom setuptools.command.sdist import sdist\ntry:\nfrom setuptools.errors import CompileError, LinkError\nexcept ImportError:\n# can remove this except case once we require setuptools>=59.0\nfrom distutils.errors import CompileError, LinkError\n\nfrom pythran.dist import PythranBuildExt as pythran_build_ext\n\nDISTNAME = 'scikit-image'\nDESCRIPTION = 'Image processing in Python'\nMAINTAINER = 'Stefan van der Walt'\nMAINTAINER_EMAIL = 'stefan@sun.ac.za'\nURL = 'https:\/\/scikit-image.org'\nLICENSE = 'Modified BSD'\nDOWNLOAD_URL = 'https:\/\/scikit-image.org\/docs\/stable\/install.html'\nPROJECT_URLS = {\n\"Bug Tracker\": 'https:\/\/github.com\/scikit-image\/scikit-image\/issues',\n\"Documentation\": 'https:\/\/scikit-image.org\/docs\/stable\/',\n\"Source Code\": 'https:\/\/github.com\/scikit-image\/scikit-image'\n}\n\nwith open('README.md', encoding='utf-8') as f:\nLONG_DESCRIPTION = f.read()\n\nif sys.version_info < (3, 7):\n\nerror = \"\"\"Python {py} detected.\n\nscikit-image 0.19+ supports only Python 3.7 and above.\n\nFor Python 2.7, please install the 0.14.x Long Term Support release using:\n\n$ pip install 'scikit-image<0.15'\n\"\"\".format(py='.'.join([str(v) for v in sys.version_info[:3]]))\n\nsys.stderr.write(error + \"\\n\")\nsys.exit(1)\n\n# This is a bit (!) hackish: we are setting a global variable so that the main\n# skimage __init__ can detect if it is being loaded by the setup routine, to\n# avoid attempting to load components that aren't built yet:\n# the numpy distutils extensions that are used by scikit-image to recursively\n# build the compiled extensions in sub-packages is based on the Python import\n# machinery.\nbuiltins.__SKIMAGE_SETUP__ = True\n\n\n# Support for openmp\n\nclass ConditionalOpenMP(pythran_build_ext[npy_build_ext]):\n\ndef can_compile_link(self, compile_flags, link_flags):\n\nif \"PYODIDE_PACKAGE_ABI\" in os.environ:\n# pyodide doesn't support OpenMP\nreturn False\n\ncc = self.compiler\nfname = 'test.c'\ncwd = os.getcwd()\ntmpdir = tempfile.mkdtemp()\n\ncode = (\"#include <omp.h>\"\n\"int main(int argc, char** argv) { return(0); }\")\n\nif self.compiler.compiler_type == \"msvc\":\n# make sure we build a DLL on Windows\nlocal_link_flags = link_flags + [\"\/DLL\"]\nelse:\nlocal_link_flags = link_flags\n\ntry:\nos.chdir(tmpdir)\nwith open(fname, 'wt') as fobj:\nfobj.write(code)\ntry:\nobjects = cc.compile([fname],\nextra_postargs=compile_flags)\nexcept CompileError:\nreturn False\ntry:\n# Link shared lib rather then executable to avoid\n# http:\/\/bugs.python.org\/issue4431 with MSVC 10+\ncc.link_shared_lib(objects, \"testlib\",\nextra_postargs=local_link_flags)\nexcept (LinkError, TypeError):\nreturn False\nfinally:\nos.chdir(cwd)\nshutil.rmtree(tmpdir)\nreturn True\n\ndef build_extensions(self):\n\"\"\" Hook into extension building to set compiler flags \"\"\"\n\ncompile_flags = list()\nlink_flags = list()\n\n# check which compiler is being used\nif self.compiler.compiler_type == \"msvc\":\n# '-fopenmp' is called '\/openmp' in msvc\ncompile_flags += ['\/openmp']\nelse:\ncompile_flags += ['-fopenmp']\nlink_flags += ['-fopenmp']\nif 'SKIMAGE_LINK_FLAGS' in os.environ:\nlink_flags += [os.environ['SKIMAGE_LINK_FLAGS']]\n\nif self.can_compile_link(compile_flags, link_flags):\nfor ext in self.extensions:\next.extra_compile_args += compile_flags\next.extra_link_args += link_flags\n\nsuper(ConditionalOpenMP, self).build_extensions()\n\n\nwith open('skimage\/__init__.py', encoding='utf-8') as fid:\nfor line in fid:\nif line.startswith('__version__'):\nVERSION = line.strip().split()[-1][1:-1]\nbreak\n\n\ndef parse_requirements_file(filename):\nwith open(filename, encoding='utf-8') as fid:\nrequires = [line.strip() for line in fid.readlines() if line]\n\nreturn requires\n\n\nINSTALL_REQUIRES = parse_requirements_file('requirements\/default.txt')\n# The `requirements\/extras.txt` file is explicitely omitted because\n# it contains requirements that do not have wheels uploaded to pip\n# for the platforms we wish to support.\nextras_require = {\ndep: parse_requirements_file('requirements\/' + dep + '.txt')\nfor dep in ['docs', 'optional', 'test', 'data']\n}\n\n\ndef configuration(parent_package='', top_path=None):\nif os.path.exists('MANIFEST'):\nos.remove('MANIFEST')\n\nfrom numpy.distutils.misc_util import Configuration\nconfig = Configuration(None, parent_package, top_path)\n\nconfig.set_options(\nignore_setup_xxx_py=True,\nassume_default_configuration=True,\ndelegate_options_to_subpackages=True,\nquiet=True)\n\nconfig.add_subpackage('skimage')\n\nreturn config\n\n\nif __name__ == \"__main__\":\ncmdclass = {'build_py': build_py,\n'sdist': sdist}\ntry:\n# test if build dependencies exist.\n# if not, some commands are still viable.\n# note: this must be kept in sync with pyproject.toml\nfrom numpy.distutils.core import setup\nimport cython\nextra = {'configuration': configuration}\ncmdclass['build_ext'] = ConditionalOpenMP\nexcept ImportError:\nif len(sys.argv) >= 2 and ('--help' in sys.argv[1:] or\nsys.argv[1] in ('--help-commands',\n'--version',\n'clean',\n'egg_info',\n'install_egg_info',\n'rotate',\n'sdist')):\n# For these actions, compilation is not required.\n#\n# They are required to succeed for example when pip is\n# used to install scikit-image when Numpy\/cython are not\n# yet present in the system.\nfrom setuptools import setup\nextra = {}\nelse:\nprint(textwrap.dedent(\"\"\"\nTo install scikit-image from source, you will need NumPy\nand Cython.\nInstall NumPy, Cython with your python package manager.\nIf you are using pip, the commands are:\n\npip install numpy cython pythran\n\nFor more details, see:\n\nhttps:\/\/scikit-image.org\/docs\/stable\/install.html\n\"\"\"))\nsys.exit(1)\n\nsetup(\nname=DISTNAME,\ndescription=DESCRIPTION,\nlong_description=LONG_DESCRIPTION,\nlong_description_content_type=\"text\/markdown\",\nmaintainer=MAINTAINER,\nmaintainer_email=MAINTAINER_EMAIL,\nurl=URL,\nlicense=LICENSE,\ndownload_url=DOWNLOAD_URL,\nproject_urls=PROJECT_URLS,\nversion=VERSION,\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: BSD License',\n'Programming Language :: C',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: 3 :: Only',\n'Topic :: Scientific\/Engineering',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: POSIX',\n'Operating System :: Unix',\n'Operating System :: MacOS',\n],\ninstall_requires=INSTALL_REQUIRES,\nextras_require=extras_require,\npython_requires='>=3.7',\npackages=setuptools.find_packages(exclude=['doc', 'benchmarks']),\npackage_data={\n# distribute Cython source files in the wheel\n\"\": [\"*.pyx\", \"*.pxd\", \"*.pxi\", \"\"],\n# tests dirs have an __init__.py so are automatically included\n},\ninclude_package_data=False,\nzip_safe=False, # the package can run out of an .egg file\nentry_points={\n'console_scripts': ['skivi = skimage.scripts.skivi:main'],\n},\ncmdclass=cmdclass,\n**extra\n)\n"
    },
    {
        "package_name": "scikit-learn-1.1.2",
        "file_list": ".coveragerc conftest.py COPYING about.rst authors.rst authors_emeritus.rst requirements.txt common_pitfalls.rst communication_team.rst communication_team_emeritus.rst computational_performance.rst parallelism.rst scaling_strategies.rst computing.rst conf.py conftest.py contents.rst contributor_experience_team.rst loading_other_datasets.rst real_world.rst sample_generators.rst toy_dataset.rst datasets.rst data_transforms.rst advanced_installation.rst bug_triaging.rst contributing.rst develop.rst index.rst maintainer.rst minimal_reproducer.rst performance.rst plotting.rst tips.rst utilities.rst faq.rst getting_started.rst glossary.rst governance.rst axa-small.png axa.png bcg-small.png bcg.png bnp-small.png bnp.png cds-logo.png columbia-small.png columbia.png czi_logo.svg dataiku-small.png dataiku.png digicosme.png dysco.png fnrs-logo-small.png fujitsu-small.png fujitsu.png generated-doc-ci.png google-small.png grid_search_cross_validation.png grid_search_workflow.png huggingface_logo-noborder.png inria-logo.jpg inria-small.png intel-small.png intel.png iris.pdf iris.svg last_digit.png lda_model_graph.png logo_APHP.png logo_APHP_text.png microsoft-small.png microsoft.png ml_map.png multilayerperceptron_network.png multi_org_chart.png no_image.png nvidia-small.png nvidia.png nyu_short_color.png plot_digits_classification.png plot_face_recognition_1.png plot_face_recognition_2.png png-logo-inria-la-fondation.png quansight-labs-small.png quansight-labs.png rbm_graph.png scikit-learn-logo-notext.png scikit-learn-logo-small.png sloan_banner.png sloan_logo-small.png sydney-primary.jpeg sydney-stacked-small.png telecom-small.png telecom.png visual-studio-build-tools-selection.png bigger_toc_css.rst big_toc_css.rst inspection.rst install.rst 1280px-scikit-learn-logo.png colorswatch_29ABE2_cyan.png colorswatch_9B4600_brown.png colorswatch_F7931E_orange.png favicon.ico identity.pdf README.md scikit-learn-logo-notext.png scikit-learn-logo-small.png scikit-learn-logo-thumb.png scikit-learn-logo-without-subtitle.svg scikit-learn-logo.bmp scikit-learn-logo.png scikit-learn-logo.svg make.bat Makefile model_persistence.rst model_selection.rst biclustering.rst calibration.rst classes.rst clustering.rst compose.rst covariance.rst cross_decomposition.rst cross_validation.rst decomposition.rst density.rst ensemble.rst feature_extraction.rst feature_selection.rst gaussian_process.rst lasso_enet_coordinate_descent.png poisson_gamma_tweedie_distributions.png grid_search.rst impute.rst isotonic.rst kernel_approximation.rst kernel_ridge.rst lda_qda.rst learning_curve.rst linear_model.rst manifold.rst metrics.rst mixture.rst model_evaluation.rst multiclass.rst naive_bayes.rst neighbors.rst neural_networks_supervised.rst neural_networks_unsupervised.rst outlier_detection.rst partial_dependence.rst permutation_importance.rst pipeline.rst preprocessing.rst preprocessing_targets.rst random_projection.rst semi_supervised.rst sgd.rst svm.rst tree.rst unsupervised_reduction.rst preface.rst presentations.rst README.md related_projects.rst roadmap.rst add_toctree_functions.py allow_nan_estimators.py custom_references_resolver.py doi_role.py github_link.py MANIFEST.in sphinx_issues.py supervised_learning.rst support.rst class.rst class_with_call.rst deprecated_class.rst deprecated_class_without_init.rst deprecated_class_with_call.rst deprecated_function.rst function.rst generate_deprecated.sh index.html numpydoc_docstring.rst redirects.html aweber.png bestofmedia-logo.png betaworks.png birchbox.jpg bnp_paribas_cardif.png booking.png change-logo.png dataiku_logo.png datapublica.png datarobot.png evernote.png howaboutwe.png huggingface.png infonea.jpg inria.png jpmorgan.png lovely.png machinalis.png Makefile mars.png okcupid.png ottogroup_logo.png peerindex.png phimeca.png rangespan.png solido_logo.png spotify.png telecomparistech.jpg yhat.png zopa.png README.txt testimonials.rst javascript.html layout.html nav.html search.html theme.css bootstrap.min.css searchtools.js bootstrap.min.js theme.conf tune_toc.rst tutorial.rst info.txt index.rst index.rst ML_MAPS_README.txt parse_path.py pyparsing.py svg2imagemap.py index.rst model_selection.rst putting_together.rst settings.rst supervised_learning.rst unsupervised_learning.rst .gitignore fetch_data.py fetch_data.py fetch_data.py exercise_01_language_train_model.py exercise_02_sentiment.py exercise_01_language_train_model.py exercise_02_sentiment.py generate_skeletons.py working_with_text_data.rst unsupervised_learning.rst user_guide.rst visualizations.rst changelog_legend.inc older_versions.rst v0.13.rst v0.14.rst v0.15.rst v0.16.rst v0.17.rst v0.18.rst v0.19.rst v0.20.rst v0.21.rst v0.22.rst v0.23.rst v0.24.rst v1.0.rst v1.1.rst _contributors.rst whats_new.rst plot_cyclical_feature_engineering.py plot_digits_denoising.py plot_face_recognition.py plot_model_complexity_influence.py plot_outlier_detection_wine.py plot_out_of_core_classification.py plot_prediction_latency.py plot_species_distribution_modeling.py plot_stock_market.py plot_tomography_l1_reconstruction.py plot_topics_extraction_with_nmf_lda.py README.txt svm_gui.py wikipedia_principal_eigenvector.py plot_bicluster_newsgroups.py plot_spectral_biclustering.py plot_spectral_coclustering.py README.txt plot_calibration.py plot_calibration_curve.py plot_calibration_multiclass.py plot_compare_calibration.py README.txt plot_classification_probability.py plot_classifier_comparison.py plot_digits_classification.py plot_lda.py plot_lda_qda.py README.txt plot_adjusted_for_chance_measures.py plot_affinity_propagation.py plot_agglomerative_clustering.py plot_agglomerative_clustering_metrics.py plot_agglomerative_dendrogram.py plot_birch_vs_minibatchkmeans.py plot_bisect_kmeans.py plot_cluster_comparison.py plot_cluster_iris.py plot_coin_segmentation.py plot_coin_ward_segmentation.py plot_color_quantization.py plot_dbscan.py plot_dict_face_patches.py plot_digits_agglomeration.py plot_digits_linkage.py plot_face_compress.py plot_feature_agglomeration_vs_univariate_selection.py plot_inductive_clustering.py plot_kmeans_assumptions.py plot_kmeans_digits.py plot_kmeans_plusplus.py plot_kmeans_silhouette_analysis.py plot_kmeans_stability_low_dim_dense.py plot_linkage_comparison.py plot_mean_shift.py plot_mini_batch_kmeans.py plot_optics.py plot_segmentation_toy.py plot_ward_structured_vs_unstructured.py README.txt plot_column_transformer.py plot_column_transformer_mixed_types.py plot_compare_reduction.py plot_digits_pipe.py plot_feature_union.py plot_transformed_target.py README.txt plot_covariance_estimation.py plot_lw_vs_oas.py plot_mahalanobis_distances.py plot_robust_vs_empirical_covariance.py plot_sparse_cov.py README.txt plot_compare_cross_decomposition.py plot_pcr_vs_pls.py README.txt plot_digits_last_image.py plot_iris_dataset.py plot_random_dataset.py plot_random_multilabel_dataset.py README.txt plot_beta_divergence.py plot_faces_decomposition.py plot_ica_blind_source_separation.py plot_ica_vs_pca.py plot_image_denoising.py plot_incremental_pca.py plot_kernel_pca.py plot_pca_3d.py plot_pca_iris.py plot_pca_vs_fa_model_selection.py plot_pca_vs_lda.py plot_sparse_coding.py plot_varimax_fa.py README.txt plot_adaboost_hastie_10_2.py plot_adaboost_multiclass.py plot_adaboost_regression.py plot_adaboost_twoclass.py plot_bias_variance.py plot_ensemble_oob.py plot_feature_transformation.py plot_forest_importances.py plot_forest_importances_faces.py plot_forest_iris.py plot_gradient_boosting_categorical.py plot_gradient_boosting_early_stopping.py plot_gradient_boosting_oob.py plot_gradient_boosting_quantile.py plot_gradient_boosting_regression.py plot_gradient_boosting_regularization.py plot_isolation_forest.py plot_monotonic_constraints.py plot_random_forest_embedding.py plot_random_forest_regression_multioutput.py plot_stack_predictors.py plot_voting_decision_regions.py plot_voting_probas.py plot_voting_regressor.py README.txt plot_cv_diabetes.py plot_cv_digits.py plot_digits_classification_exercise.py plot_iris_exercise.py README.txt plot_feature_selection.py plot_feature_selection_pipeline.py plot_f_test_vs_mi.py plot_rfe_digits.py plot_rfe_with_cross_validation.py plot_select_from_model_diabetes.py README.txt plot_compare_gpr_krr.py plot_gpc.py plot_gpc_iris.py plot_gpc_isoprobability.py plot_gpc_xor.py plot_gpr_co2.py plot_gpr_noisy.py plot_gpr_noisy_targets.py plot_gpr_on_structured_data.py plot_gpr_prior_posterior.py README.txt plot_iterative_imputer_variants_comparison.py plot_missing_values.py README.txt plot_linear_model_coefficient_interpretation.py plot_partial_dependence.py plot_permutation_importance.py plot_permutation_importance_multicollinear.py README.txt plot_scalable_poly_kernels.py README.txt plot_ard.py plot_bayesian_ridge_curvefit.py plot_elastic_net_precomputed_gram_matrix_with_weighted_samp plot_huber_vs_ridge.py plot_iris_logistic.py plot_lasso_and_elasticnet.py plot_lasso_coordinate_descent_path.py plot_lasso_dense_vs_sparse_data.py plot_lasso_lars.py plot_lasso_lars_ic.py plot_lasso_model_selection.py plot_logistic.py plot_logistic_l1_l2_sparsity.py plot_logistic_multinomial.py plot_logistic_path.py plot_multi_task_lasso_support.py plot_nnls.py plot_ols.py plot_ols_3d.py plot_ols_ridge_variance.py plot_omp.py plot_poisson_regression_non_normal_loss.py plot_polynomial_interpolation.py plot_quantile_regression.py plot_ransac.py plot_ridge_coeffs.py plot_ridge_path.py plot_robust_fit.py plot_sgdocsvm_vs_ocsvm.py plot_sgd_comparison.py plot_sgd_early_stopping.py plot_sgd_iris.py plot_sgd_loss_functions.py plot_sgd_penalties.py plot_sgd_separating_hyperplane.py plot_sgd_weighted_samples.py plot_sparse_logistic_regression_20newsgroups.py plot_sparse_logistic_regression_mnist.py plot_theilsen.py plot_tweedie_regression_insurance_claims.py README.txt plot_compare_methods.py plot_lle_digits.py plot_manifold_sphere.py plot_mds.py plot_swissroll.py plot_t_sne_perplexity.py README.txt plot_anomaly_comparison.py plot_changed_only_pprint_parameter.py plot_display_object_visualization.py plot_isotonic_regression.py plot_johnson_lindenstrauss_bound.py plot_kernel_approximation.py plot_kernel_ridge_regression.py plot_multilabel.py plot_multioutput_face_completion.py plot_outlier_detection_bench.py plot_partial_dependence_visualization_api.py plot_pipeline_display.py plot_roc_curve_visualization_api.py README.txt plot_concentration_prior.py plot_gmm.py plot_gmm_covariances.py plot_gmm_init.py plot_gmm_pdf.py plot_gmm_selection.py plot_gmm_sin.py README.txt grid_search_text_feature_extraction.py plot_confusion_matrix.py plot_cv_indices.py plot_cv_predict.py plot_det.py plot_grid_search_digits.py plot_grid_search_refit_callable.py plot_grid_search_stats.py plot_learning_curve.py plot_multi_metric_evaluation.py plot_nested_cross_validation_iris.py plot_permutation_tests_for_classification.py plot_precision_recall.py plot_randomized_search.py plot_roc.py plot_roc_crossval.py plot_successive_halving_heatmap.py plot_successive_halving_iterations.py plot_train_error_vs_test_error.py plot_underfitting_overfitting.py plot_validation_curve.py README.txt plot_classifier_chain_yeast.py README.txt approximate_nearest_neighbors.py plot_caching_nearest_neighbors.py plot_classification.py plot_digits_kde_sampling.py plot_kde_1d.py plot_lof_novelty_detection.py plot_lof_outlier_detection.py plot_nca_classification.py plot_nca_dim_reduction.py plot_nca_illustration.py plot_nearest_centroid.py plot_regression.py plot_species_kde.py README.txt plot_mlp_alpha.py plot_mlp_training_curves.py plot_mnist_filters.py plot_rbm_logistic_classification.py README.txt plot_all_scaling.py plot_discretization.py plot_discretization_classification.py plot_discretization_strategies.py plot_map_data_to_normal.py plot_scaling_importance.py README.txt README.txt plot_release_highlights_0_22_0.py plot_release_highlights_0_23_0.py plot_release_highlights_0_24_0.py plot_release_highlights_1_0_0.py plot_release_highlights_1_1_0.py README.txt plot_label_propagation_digits.py plot_label_propagation_digits_active_learning.py plot_label_propagation_structure.py plot_self_training_varying_threshold.py plot_semi_supervised_newsgroups.py plot_semi_supervised_versus_svm_iris.py README.txt plot_custom_kernel.py plot_iris_svc.py plot_linearsvc_support_vectors.py plot_oneclass.py plot_rbf_parameters.py plot_separating_hyperplane.py plot_separating_hyperplane_unbalanced.py plot_svm_anova.py plot_svm_kernels.py plot_svm_margin.py plot_svm_nonlinear.py plot_svm_regression.py plot_svm_scale_c.py plot_svm_tie_breaking.py plot_weighted_samples.py README.txt plot_document_classification_20newsgroups.py plot_document_clustering.py plot_hashing_vs_dict_vectorizer.py README.txt plot_cost_complexity_pruning.py plot_iris_dtc.py plot_tree_regression.py plot_tree_regression_multioutput.py plot_unveil_tree_structure.py README.txt Makefile MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py base.py calibration.py setup.py common.py test_affinity_propagation.py test_bicluster.py test_birch.py test_bisect_k_means.py test_dbscan.py test_feature_agglomeration.py test_hierarchical.py test_k_means.py test_mean_shift.py test_optics.py test_spectral.py __init__.py _affinity_propagation.py _agglomerative.py _bicluster.py _birch.py _bisect_k_means.py _dbscan.py _dbscan_inner.pyx _feature_agglomeration.py _hierarchical_fast.pyx _kmeans.py _k_means_common.pxd _k_means_common.pyx _k_means_elkan.pyx _k_means_lloyd.pyx _k_means_minibatch.pyx _mean_shift.py _optics.py _spectral.py __init__.py test_column_transformer.py test_target.py __init__.py _column_transformer.py _target.py __init__.py conftest.py test_covariance.py test_elliptic_envelope.py test_graphical_lasso.py test_robust_covariance.py __init__.py _elliptic_envelope.py _empirical_covariance.py _graph_lasso.py _robust_covariance.py _shrunk_covariance.py __init__.py test_pls.py __init__.py _pls.py __init__.py boston_house_prices.csv breast_cancer.csv diabetes_data_raw.csv.gz diabetes_target.csv.gz digits.csv.gz iris.csv linnerud_exercise.csv linnerud_physiological.csv wine_data.csv __init__.py boston_house_prices.rst breast_cancer.rst california_housing.rst covtype.rst diabetes.rst digits.rst iris.rst kddcup99.rst lfw.rst linnerud.rst olivetti_faces.rst rcv1.rst twenty_newsgroups.rst wine_data.rst __init__.py china.jpg flower.jpg README.txt __init__.py setup.py conftest.py api-v1-jd-1.json.gz api-v1-jdf-1.json.gz api-v1-jdq-1.json.gz data-v1-dl-1.arff.gz __init__.py api-v1-jd-1119.json.gz api-v1-jdf-1119.json.gz api-v1-jdl-dn-adult-census-l-2-dv-1.js api-v1-jdl-dn-adult-census-l-2-s-act-. api-v1-jdq-1119.json.gz data-v1-dl-54002.arff.gz __init__.py api-v1-jd-2.json.gz api-v1-jdf-2.json.gz api-v1-jdl-dn-anneal-l-2-dv-1.json.gz api-v1-jdl-dn-anneal-l-2-s-act-.json.gz api-v1-jdq-2.json.gz data-v1-dl-1666876.arff.gz __init__.py api-v1-jd-292.json.gz api-v1-jd-40981.json.gz api-v1-jdf-292.json.gz api-v1-jdf-40981.json.gz api-v1-jdl-dn-australian-l-2-dv-1-s-dac api-v1-jdl-dn-australian-l-2-dv-1.json. api-v1-jdl-dn-australian-l-2-s-act-.jso data-v1-dl-49822.arff.gz __init__.py api-v1-jd-3.json.gz api-v1-jdf-3.json.gz api-v1-jdq-3.json.gz data-v1-dl-3.arff.gz __init__.py api-v1-jd-40589.json.gz api-v1-jdf-40589.json.gz api-v1-jdl-dn-emotions-l-2-dv-3.json. api-v1-jdl-dn-emotions-l-2-s-act-.jso api-v1-jdq-40589.json.gz data-v1-dl-4644182.arff.gz __init__.py api-v1-jd-40675.json.gz api-v1-jdf-40675.json.gz api-v1-jdl-dn-glass2-l-2-dv-1-s-dact. api-v1-jdl-dn-glass2-l-2-dv-1.json.gz api-v1-jdl-dn-glass2-l-2-s-act-.json. api-v1-jdq-40675.json.gz data-v1-dl-4965250.arff.gz __init__.py api-v1-jd-40945.json.gz api-v1-jdf-40945.json.gz api-v1-jdq-40945.json.gz data-v1-dl-16826755.arff.gz __init__.py api-v1-jd-40966.json.gz api-v1-jdf-40966.json.gz api-v1-jdl-dn-miceprotein-l-2-dv-4.js api-v1-jdl-dn-miceprotein-l-2-s-act-. api-v1-jdq-40966.json.gz data-v1-dl-17928620.arff.gz __init__.py api-v1-jd-42585.json.gz api-v1-jdf-42585.json.gz api-v1-jdq-42585.json.gz data-v1-dl-21854866.arff.gz __init__.py api-v1-jd-561.json.gz api-v1-jdf-561.json.gz api-v1-jdl-dn-cpu-l-2-dv-1.json.gz api-v1-jdl-dn-cpu-l-2-s-act-.json.gz api-v1-jdq-561.json.gz data-v1-dl-52739.arff.gz __init__.py api-v1-jd-61.json.gz api-v1-jdf-61.json.gz api-v1-jdl-dn-iris-l-2-dv-1.json.gz api-v1-jdl-dn-iris-l-2-s-act-.json.gz api-v1-jdq-61.json.gz data-v1-dl-61.arff.gz __init__.py api-v1-jd-62.json.gz api-v1-jdf-62.json.gz api-v1-jdq-62.json.gz data-v1-dl-52352.arff.gz __init__.py __init__.py svmlight_classification.txt svmlight_invalid.txt svmlight_invalid_order.txt svmlight_multilabel.txt __init__.py test_20news.py test_base.py test_california_housing.py test_common.py test_covtype.py test_kddcup99.py test_lfw.py test_olivetti_faces.py test_openml.py test_rcv1.py test_samples_generator.py test_svmlight_format.py __init__.py _arff_parser.py _base.py _california_housing.py _covtype.py _kddcup99.py _lfw.py _olivetti_faces.py _openml.py _rcv1.py _samples_generator.py _species_distributions.py _svmlight_format_fast.pyx _svmlight_format_io.py _twenty_newsgroups.py __init__.py setup.py test_dict_learning.py test_factor_analysis.py test_fastica.py test_incremental_pca.py test_kernel_pca.py test_nmf.py test_online_lda.py test_pca.py test_sparse_pca.py test_truncated_svd.py __init__.py _base.py _cdnmf_fast.pyx _dict_learning.py _factor_analysis.py _fastica.py _incremental_pca.py _kernel_pca.py _lda.py _nmf.py _online_lda_fast.pyx _pca.py _sparse_pca.py _truncated_svd.py __init__.py discriminant_analysis.py dummy.py setup.py test_bagging.py test_base.py test_common.py test_forest.py test_gradient_boosting.py test_gradient_boosting_loss_functions.py test_iforest.py test_stacking.py test_voting.py test_weight_boosting.py __init__.py _bagging.py _base.py _forest.py _gb.py _gb_losses.py _gradient_boosting.pyx binning.py common.pxd common.pyx gradient_boosting.py grower.py histogram.pyx predictor.py splitting.pyx test_binning.py test_bitset.py test_compare_lightgbm.py test_gradient_boosting.py test_grower.py test_histogram.py test_monotonic_contraints.py test_predictor.py test_splitting.py test_warm_start.py __init__.py utils.pyx _binning.pyx _bitset.pxd _bitset.pyx _gradient_boosting.pyx _predictor.pyx __init__.py _iforest.py _stacking.py _voting.py _weight_boosting.py __init__.py exceptions.py enable_halving_search_cv.py enable_hist_gradient_boosting.py enable_iterative_imputer.py test_enable_hist_gradient_boosting.py test_enable_iterative_imputer.py test_enable_successive_halving.py __init__.py __init__.py conftest.py README _arff.py _lobpcg.py _numpy_compiler_patch.py version.py _structures.py __init__.py __init__.py image.py setup.py test_dict_vectorizer.py test_feature_hasher.py test_image.py test_text.py __init__.py text.py _dict_vectorizer.py _hash.py _hashing_fast.pyx _stop_words.py __init__.py test_base.py test_chi2.py test_feature_select.py test_from_model.py test_mutual_info.py test_rfe.py test_sequential.py test_variance_threshold.py __init__.py _base.py _from_model.py _mutual_info.py _rfe.py _sequential.py _univariate_selection.py _variance_threshold.py __init__.py kernels.py test_gpc.py test_gpr.py test_kernels.py _mini_sequence_kernel.py __init__.py _gpc.py _gpr.py __init__.py test_base.py test_common.py test_impute.py test_knn.py __init__.py _base.py _iterative.py _knn.py __init__.py setup.py test_partial_dependence.py test_permutation_importance.py __init__.py _partial_dependence.py _permutation_importance.py decision_boundary.py partial_dependence.py test_boundary_decision_display.py test_plot_partial_dependence.py __init__.py __init__.py __init__.py isotonic.py kernel_approximation.py kernel_ridge.py setup.py test_base.py test_bayes.py test_common.py test_coordinate_descent.py test_huber.py test_least_angle.py test_linear_loss.py test_logistic.py test_omp.py test_passive_aggressive.py test_perceptron.py test_quantile.py test_ransac.py test_ridge.py test_sag.py test_sgd.py test_sparse_coordinate_descent.py test_theil_sen.py __init__.py _base.py _bayes.py _cd_fast.pyx _coordinate_descent.py glm.py test_glm.py __init__.py __init__.py _huber.py _least_angle.py _linear_loss.py _logistic.py _omp.py _passive_aggressive.py _perceptron.py _quantile.py _ransac.py _ridge.py _sag.py _sag_fast.pyx _sag_fast.pyx.tp _sgd_fast.pxd _sgd_fast.pyx _sgd_fast_helpers.h _stochastic_gradient.py _theil_sen.py __init__.py setup.py test_isomap.py test_locally_linear.py test_mds.py test_spectral_embedding.py test_t_sne.py __init__.py _barnes_hut_tsne.pyx _isomap.py _locally_linear.py _mds.py _spectral_embedding.py _t_sne.py _utils.pyx __init__.py setup.py test_bicluster.py test_common.py test_supervised.py test_unsupervised.py __init__.py _bicluster.py _expected_mutual_info_fast.pyx _supervised.py _unsupervised.py __init__.py pairwise.py setup.py test_classification.py test_common.py test_dist_metrics.py test_pairwise.py test_pairwise_distances_reduction.py test_ranking.py test_regression.py test_score_objects.py __init__.py _base.py _classification.py _dist_metrics.pxd _dist_metrics.pyx _pairwise_distances_reduction.pyx _pairwise_fast.pyx base.py confusion_matrix.py det_curve.py precision_recall_curve.py roc_curve.py test_base.py test_common_curve_display.py test_confusion_matrix_display.py test_det_curve_display.py test_plot_confusion_matrix.py test_plot_curve_common.py test_plot_det_curve.py test_plot_precision_recall.py test_plot_roc_curve.py test_precision_recall_display.py test_roc_curve_display.py __init__.py __init__.py _ranking.py _regression.py _scorer.py __init__.py test_bayesian_mixture.py test_gaussian_mixture.py test_mixture.py __init__.py _base.py _bayesian_mixture.py _gaussian_mixture.py __init__.py common.py test_search.py test_split.py test_successive_halving.py test_validation.py __init__.py _search.py _search_successive_halving.py _split.py _validation.py __init__.py multiclass.py multioutput.py naive_bayes.py setup.py test_ball_tree.py test_graph.py test_kde.py test_kd_tree.py test_lof.py test_nca.py test_nearest_centroid.py test_neighbors.py test_neighbors_pipeline.py test_neighbors_tree.py test_quad_tree.py __init__.py _ball_tree.pyx _base.py _binary_tree.pxi _classification.py _distance_metric.py _graph.py _kde.py _kd_tree.pyx _lof.py _nca.py _nearest_centroid.py _partition_nodes.pxd _partition_nodes.pyx _quad_tree.pxd _quad_tree.pyx _regression.py _unsupervised.py __init__.py test_base.py test_mlp.py test_rbm.py test_stochastic_optimizers.py __init__.py _base.py _multilayer_perceptron.py _rbm.py _stochastic_optimizers.py __init__.py pipeline.py setup.py test_common.py test_data.py test_discretization.py test_encoders.py test_function_transformer.py test_label.py test_polynomial.py __init__.py _csr_polynomial_expansion.pyx _data.py _discretization.py _encoders.py _function_transformer.py _label.py _polynomial.py __init__.py random_projection.py test_label_propagation.py test_self_training.py __init__.py _label_propagation.py _self_training.py __init__.py setup.py setup.py COPYRIGHT liblinear_helper.c linear.cpp linear.h tron.cpp tron.h _cython_blas_helpers.h LIBSVM_CHANGES libsvm_helper.c libsvm_sparse_helper.c libsvm_template.cpp svm.cpp svm.h _svm_cython_blas_helpers.h newrand.h test_bounds.py test_sparse.py test_svm.py __init__.py _base.py _bounds.py _classes.py _liblinear.pxi _liblinear.pyx _libsvm.pxi _libsvm.pyx _libsvm_sparse.pyx _newrand.pyx __init__.py random_seed.py test_base.py test_build.py test_calibration.py test_check_build.py test_common.py test_config.py test_discriminant_analysis.py test_docstrings.py test_docstring_parameters.py test_dummy.py test_init.py test_isotonic.py test_kernel_approximation.py test_kernel_ridge.py test_metaestimators.py test_min_dependencies_readme.py test_multiclass.py test_multioutput.py test_naive_bayes.py test_pipeline.py test_random_projection.py __init__.py setup.py test_export.py test_reingold_tilford.py test_tree.py __init__.py _classes.py _criterion.pxd _criterion.pyx _export.py _reingold_tilford.py _splitter.pxd _splitter.pyx _tree.pxd _tree.pyx _utils.pxd _utils.pyx __init__.py arrayfuncs.pyx class_weight.py deprecation.py estimator_checks.py extmath.py fixes.py graph.py metaestimators.py multiclass.py murmurhash.pxd murmurhash.pyx optimize.py random.py setup.py sparsefuncs.py sparsefuncs_fast.pyx MurmurHash3.cpp MurmurHash3.h stats.py conftest.py test_arpack.py test_arrayfuncs.py test_class_weight.py test_cython_blas.py test_cython_templating.py test_deprecation.py test_encode.py test_estimator_checks.py test_estimator_html_repr.py test_extmath.py test_fast_dict.py test_fixes.py test_graph.py test_metaestimators.py test_mocking.py test_multiclass.py test_murmurhash.py test_optimize.py test_parallel.py test_pprint.py test_random.py test_readonly_wrapper.py test_seq_dataset.py test_shortest_path.py test_show_versions.py test_sparsefuncs.py test_stats.py test_tags.py test_testing.py test_utils.py test_validation.py test_weight_vector.py __init__.py validation.py _arpack.py _bunch.py _cython_blas.pxd _cython_blas.pyx _encode.py _estimator_html_repr.py _fast_dict.pxd _fast_dict.pyx _heap.pxd _heap.pyx _joblib.py _logistic_sigmoid.pyx _mask.py _mocking.py _openmp_helpers.pxd _openmp_helpers.pyx _pprint.py _random.pxd _random.pyx _readonly_array_wrapper.pyx _seq_dataset.pxd _seq_dataset.pxd.tp _seq_dataset.pyx _seq_dataset.pyx.tp _show_versions.py _sorting.pxd _sorting.pyx _tags.py _testing.py _typedefs.pxd _typedefs.pyx _vector_sentinel.pxd _vector_sentinel.pyx _weight_vector.pxd _weight_vector.pxd.tp _weight_vector.pyx _weight_vector.pyx.tp __init__.py openmp_helpers.py pre_build_helpers.py __init__.py _config.py _distributor_init.py _isotonic.pyx glm_distribution.py link.py loss.py setup.py test_glm_distribution.py test_link.py test_loss.py __init__.py _loss.pxd _loss.pyx _loss.pyx.tp __init__.py _min_dependencies.py setup.py _check_build.pyx __init__.py __init__.py",
        "setup.py": "#! \/usr\/bin\/env python\n#\n# Copyright (C) 2007-2009 Cournapeau David <cournape@gmail.com>\n# 2010 Fabian Pedregosa <fabian.pedregosa@inria.fr>\n# License: 3-clause BSD\n\nimport sys\nimport os\nimport platform\nimport shutil\n\n# We need to import setuptools before because it monkey-patches distutils\nimport setuptools # noqa\nfrom distutils.command.clean import clean as Clean\nfrom distutils.command.sdist import sdist\n\nimport traceback\nimport importlib\n\ntry:\nimport builtins\nexcept ImportError:\n# Python 2 compat: just to be able to declare that Python >=3.8 is needed.\nimport __builtin__ as builtins\n\n# This is a bit (!) hackish: we are setting a global variable so that the\n# main sklearn __init__ can detect if it is being loaded by the setup\n# routine, to avoid attempting to load components that aren't built yet:\n# the numpy distutils extensions that are used by scikit-learn to\n# recursively build the compiled extensions in sub-packages is based on the\n# Python import machinery.\nbuiltins.__SKLEARN_SETUP__ = True\n\n\nDISTNAME = \"scikit-learn\"\nDESCRIPTION = \"A set of python modules for machine learning and data mining\"\nwith open(\"README.rst\") as f:\nLONG_DESCRIPTION = f.read()\nMAINTAINER = \"Andreas Mueller\"\nMAINTAINER_EMAIL = \"amueller@ais.uni-bonn.de\"\nURL = \"http:\/\/scikit-learn.org\"\nDOWNLOAD_URL = \"https:\/\/pypi.org\/project\/scikit-learn\/#files\"\nLICENSE = \"new BSD\"\nPROJECT_URLS = {\n\"Bug Tracker\": \"https:\/\/github.com\/scikit-learn\/scikit-learn\/issues\",\n\"Documentation\": \"https:\/\/scikit-learn.org\/stable\/documentation.html\",\n\"Source Code\": \"https:\/\/github.com\/scikit-learn\/scikit-learn\",\n}\n\n# We can actually import a restricted version of sklearn that\n# does not need the compiled code\nimport sklearn # noqa\nimport sklearn._min_dependencies as min_deps # noqa\nfrom sklearn.externals._packaging.version import parse as parse_version # noqa\n\n\nVERSION = sklearn.__version__\n\n\n# For some commands, use setuptools\nSETUPTOOLS_COMMANDS = {\n\"develop\",\n\"release\",\n\"bdist_egg\",\n\"bdist_rpm\",\n\"bdist_wininst\",\n\"install_egg_info\",\n\"build_sphinx\",\n\"egg_info\",\n\"easy_install\",\n\"upload\",\n\"bdist_wheel\",\n\"--single-version-externally-managed\",\n}\nif SETUPTOOLS_COMMANDS.intersection(sys.argv):\nextra_setuptools_args = dict(\nzip_safe=False, # the package can run out of an .egg file\ninclude_package_data=True,\nextras_require={\nkey: min_deps.tag_to_packages[key]\nfor key in [\"examples\", \"docs\", \"tests\", \"benchmark\"]\n},\n)\nelse:\nextra_setuptools_args = dict()\n\n\n# Custom clean command to remove build artifacts\n\n\nclass CleanCommand(Clean):\ndescription = \"Remove build artifacts from the source tree\"\n\ndef run(self):\nClean.run(self)\n# Remove c files if we are not within a sdist package\ncwd = os.path.abspath(os.path.dirname(__file__))\nremove_c_files = not os.path.exists(os.path.join(cwd, \"PKG-INFO\"))\nif remove_c_files:\nprint(\"Will remove generated .c files\")\nif os.path.exists(\"build\"):\nshutil.rmtree(\"build\")\nfor dirpath, dirnames, filenames in os.walk(\"sklearn\"):\nfor filename in filenames:\nif any(\nfilename.endswith(suffix)\nfor suffix in (\".so\", \".pyd\", \".dll\", \".pyc\")\n):\nos.unlink(os.path.join(dirpath, filename))\ncontinue\nextension = os.path.splitext(filename)[1]\nif remove_c_files and extension in [\".c\", \".cpp\"]:\npyx_file = str.replace(filename, extension, \".pyx\")\nif os.path.exists(os.path.join(dirpath, pyx_file)):\nos.unlink(os.path.join(dirpath, filename))\nfor dirname in dirnames:\nif dirname == \"__pycache__\":\nshutil.rmtree(os.path.join(dirpath, dirname))\n\n\ncmdclass = {\"clean\": CleanCommand, \"sdist\": sdist}\n\n# Custom build_ext command to set OpenMP compile flags depending on os and\n# compiler. Also makes it possible to set the parallelism level via\n# and environment variable (useful for the wheel building CI).\n# build_ext has to be imported after setuptools\ntry:\nfrom numpy.distutils.command.build_ext import build_ext # noqa\n\nclass build_ext_subclass(build_ext):\ndef finalize_options(self):\nsuper().finalize_options()\nif self.parallel is None:\n# Do not override self.parallel if already defined by\n# command-line flag (--parallel or -j)\n\nparallel = os.environ.get(\"SKLEARN_BUILD_PARALLEL\")\nif parallel:\nself.parallel = int(parallel)\nif self.parallel:\nprint(\"setting parallel=%d \" % self.parallel)\n\ndef build_extensions(self):\nfrom sklearn._build_utils.openmp_helpers import get_openmp_flag\n\nif sklearn._OPENMP_SUPPORTED:\nopenmp_flag = get_openmp_flag(self.compiler)\n\nfor e in self.extensions:\ne.extra_compile_args += openmp_flag\ne.extra_link_args += openmp_flag\n\nbuild_ext.build_extensions(self)\n\ncmdclass[\"build_ext\"] = build_ext_subclass\n\nexcept ImportError:\n# Numpy should not be a dependency just to be able to introspect\n# that python 3.8 is required.\npass\n\n\ndef configuration(parent_package=\"\", top_path=None):\nif os.path.exists(\"MANIFEST\"):\nos.remove(\"MANIFEST\")\n\nfrom numpy.distutils.misc_util import Configuration\nfrom sklearn._build_utils import _check_cython_version\n\nconfig = Configuration(None, parent_package, top_path)\n\n# Avoid useless msg:\n# \"Ignoring attempt to set 'name' (from ... \"\nconfig.set_options(\nignore_setup_xxx_py=True,\nassume_default_configuration=True,\ndelegate_options_to_subpackages=True,\nquiet=True,\n)\n\n# Cython is required by config.add_subpackage for templated extensions\n# that need the tempita sub-submodule. So check that we have the correct\n# version of Cython so as to be able to raise a more informative error\n# message from the start if it's not the case.\n_check_cython_version()\n\nconfig.add_subpackage(\"sklearn\")\n\nreturn config\n\n\ndef check_package_status(package, min_version):\n\"\"\"\nReturns a dictionary containing a boolean specifying whether given package\nis up-to-date, along with the version string (empty string if\nnot installed).\n\"\"\"\npackage_status = {}\ntry:\nmodule = importlib.import_module(package)\npackage_version = module.__version__\npackage_status[\"up_to_date\"] = parse_version(package_version) >= parse_version(\nmin_version\n)\npackage_status[\"version\"] = package_version\nexcept ImportError:\ntraceback.print_exc()\npackage_status[\"up_to_date\"] = False\npackage_status[\"version\"] = \"\"\n\nreq_str = \"scikit-learn requires {} >= {}.\\n\".format(package, min_version)\n\ninstructions = (\n\"Installation instructions are available on the \"\n\"scikit-learn website: \"\n\"http:\/\/scikit-learn.org\/stable\/install.html\\n\"\n)\n\nif package_status[\"up_to_date\"] is False:\nif package_status[\"version\"]:\nraise ImportError(\n\"Your installation of {} {} is out-of-date.\\n{}{}\".format(\npackage, package_status[\"version\"], req_str, instructions\n)\n)\nelse:\nraise ImportError(\n\"{} is not installed.\\n{}{}\".format(package, req_str, instructions)\n)\n\n\ndef setup_package():\n\n# TODO: Require Python 3.8 for PyPy when PyPy3.8 is ready\n# https:\/\/github.com\/conda-forge\/conda-forge-pinning-feedstock\/issues\/2089\nif platform.python_implementation() == \"PyPy\":\npython_requires = \">=3.7\"\nrequired_python_version = (3, 7)\nelse:\npython_requires = \">=3.8\"\nrequired_python_version = (3, 8)\n\nmetadata = dict(\nname=DISTNAME,\nmaintainer=MAINTAINER,\nmaintainer_email=MAINTAINER_EMAIL,\ndescription=DESCRIPTION,\nlicense=LICENSE,\nurl=URL,\ndownload_url=DOWNLOAD_URL,\nproject_urls=PROJECT_URLS,\nversion=VERSION,\nlong_description=LONG_DESCRIPTION,\nclassifiers=[\n\"Intended Audience :: Science\/Research\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: BSD License\",\n\"Programming Language :: C\",\n\"Programming Language :: Python\",\n\"Topic :: Software Development\",\n\"Topic :: Scientific\/Engineering\",\n\"Development Status :: 5 - Production\/Stable\",\n\"Operating System :: Microsoft :: Windows\",\n\"Operating System :: POSIX\",\n\"Operating System :: Unix\",\n\"Operating System :: MacOS\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n],\ncmdclass=cmdclass,\npython_requires=python_requires,\ninstall_requires=min_deps.tag_to_packages[\"install\"],\npackage_data={\"\": [\"*.pxd\"]},\n**extra_setuptools_args,\n)\n\ncommands = [arg for arg in sys.argv[1:] if not arg.startswith(\"-\")]\nif all(\ncommand in (\"egg_info\", \"dist_info\", \"clean\", \"check\") for command in commands\n):\n# These actions are required to succeed without Numpy for example when\n# pip is used to install Scikit-learn when Numpy is not yet present in\n# the system.\n\n# These commands use setup from setuptools\nfrom setuptools import setup\n\nmetadata[\"version\"] = VERSION\nmetadata[\"packages\"] = [\"sklearn\"]\nelse:\nif sys.version_info < required_python_version:\nrequired_version = \"%d.%d\" % required_python_version\nraise RuntimeError(\n\"Scikit-learn requires Python %s or later. The current\"\n\" Python version is %s installed in %s.\"\n% (required_version, platform.python_version(), sys.executable)\n)\n\ncheck_package_status(\"numpy\", min_deps.NUMPY_MIN_VERSION)\n\ncheck_package_status(\"scipy\", min_deps.SCIPY_MIN_VERSION)\n\n# These commands require the setup from numpy.distutils because they\n# may use numpy.distutils compiler classes.\nfrom numpy.distutils.core import setup\n\n# Monkeypatches CCompiler.spawn to prevent random wheel build errors on Windows\n# The build errors on Windows was because msvccompiler spawn was not threadsafe\n# This fixed can be removed when we build with numpy >= 1.22.2 on Windows.\n# https:\/\/github.com\/pypa\/distutils\/issues\/5\n# https:\/\/github.com\/scikit-learn\/scikit-learn\/issues\/22310\n# https:\/\/github.com\/numpy\/numpy\/pull\/20640\nfrom numpy.distutils.ccompiler import replace_method\nfrom distutils.ccompiler import CCompiler\nfrom sklearn.externals._numpy_compiler_patch import CCompiler_spawn\n\nreplace_method(CCompiler, \"spawn\", CCompiler_spawn)\n\nmetadata[\"configuration\"] = configuration\n\nsetup(**metadata)\n\n\nif __name__ == \"__main__\":\nsetup_package()\n"
    },
    {
        "package_name": "scramp-1.4.1",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.adoc core.py utils.py _version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py test_scramp.py versioneer.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom setuptools import setup\n\nimport versioneer\n\nlong_description = \"\"\"\n\nScramp\n------\n\nA pure-Python implementation of the SCRAM authentication protocol.\"\"\"\n\ncmdclass = dict(versioneer.get_cmdclass())\nversion = versioneer.get_version()\n\nsetup(\nname=\"scramp\",\nmaintainer=\"Tony Locke\",\nmaintainer_email=\"tlocke@tlocke.org.uk\",\nversion=version,\ncmdclass=cmdclass,\ndescription=\"An implementation of the SCRAM protocol.\",\nlong_description=long_description,\nurl=\"https:\/\/github.com\/tlocke\/scramp\",\nlicense=\"MIT\",\npython_requires=\">=3.6\",\ninstall_requires=[\"asn1crypto>=1.4.0\"],\nclassifiers=[\n\"Development Status :: 3 - Alpha\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: Implementation\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: Jython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Operating System :: OS Independent\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\nkeywords=\"SCRAM authentication SASL\",\npackages=(\"scramp\",),\n)\n"
    },
    {
        "package_name": "scrapbook-0.5.0",
        "file_list": ".bumpversion.cfg CHANGELOG.md CONTRIBUTING.md DEVELOPMENT_GUIDE.md conf.py deprecation-papermill.rst index.rst installation.rst make.bat Makefile models.rst modules.rst scrapbook.rst scrapbook.tests.rst requirements-doc.txt UPDATE.md usage-glue.rst usage-read-notebook.rst usage-read-notebooks.rst custom.css papermill.png scrapbook-logo.png navigation.html page.html relations.html LICENSE MANIFEST.in PKG-INFO pytest.ini README.md RELEASING.md requirements-dev.txt requirements.txt api.py encoders.py exceptions.py log.py models.py scrap.v1.json schemas.py scraps.py tiny.png result1.ipynb result2.ipynb record.ipynb result_no_exec.ipynb test_api.py test_encoders.py test_notebooks.py test_scrapbooks.py test_scraps.py test_utils.py __init__.py utils.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\nimport os\nimport sys\nfrom os import path\nfrom setuptools import setup\n\n\ndef read(fname):\nwith open(fname, \"r\") as fhandle:\nreturn fhandle.read()\n\n\nlocal_path = os.path.dirname(__file__)\n# Fix for tox which manipulates execution pathing\nif not local_path:\nlocal_path = \".\"\nhere = path.abspath(path.dirname(__file__))\n\n\ndef version():\nwith open(local_path + \"\/scrapbook\/version.py\", \"r\") as ver:\nfor line in ver.readlines():\nif line.startswith(\"version =\"):\nreturn line.split(\" = \")[-1].strip()[1:-1]\nraise ValueError(\"No version found in scrapbook\/version.py\")\n\n\ndef read_reqs(fname):\nreq_path = os.path.join(here, fname)\nreturn [req.strip() for req in read(req_path).splitlines() if req.strip()]\n\n\nreqs_s3 = [\"papermill[s3]\"]\nreqs_azure = [\"papermill[azure]\"]\nreqs_gcs = [\"papermill[gcs]\"]\nreqs_all = [\"papermill[all]\"]\nreqs_dev = read_reqs(\"requirements-dev.txt\")\nextras_require = {\n\"test\": reqs_dev,\n\"dev\": reqs_dev,\n\"all\": reqs_all,\n\"s3\": reqs_s3,\n\"azure\": reqs_azure,\n\"gcs\": reqs_gcs,\n}\n\n# Get the long description from the README file\nwith open(path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\nlong_description = f.read()\n\nsetup(\nname=\"scrapbook\",\nversion=version(),\ndescription=\"A library for recording and reading data in Jupyter and nteract Notebooks\",\nauthor=\"nteract contributors\",\nauthor_email=\"nteract@googlegroups.com\",\nlicense=\"BSD\",\nkeywords=[\"jupyter\", \"mapreduce\", \"nteract\", \"pipeline\", \"notebook\"],\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/nteract\/scrapbook\",\npackages=[\"scrapbook\"],\npython_requires='>=3.5',\ninclude_package_data=True,\ninstall_requires=read_reqs(\"requirements.txt\"),\nextras_require=extras_require,\nproject_urls={\n\"Documentation\": \"https:\/\/nteract-scrapbook.readthedocs.io\",\n\"Funding\": \"https:\/\/nteract.io\",\n\"Source\": \"https:\/\/github.com\/nteract\/scrapbook\/\",\n\"Tracker\": \"https:\/\/github.com\/nteract\/scrapbook\/issues\",\n},\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"Intended Audience :: System Administrators\",\n\"Intended Audience :: Science\/Research\",\n\"License :: OSI Approved :: BSD License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n],\n)\n"
    },
    {
        "package_name": "scrapy-crawlera-1.7.2",
        "file_list": "PKG-INFO README.rst middleware.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py",
        "setup.py": "from setuptools import setup\n\nwith open(\"README.rst\") as f:\nreadme = f.read()\n\n\nsetup(\nname='scrapy-crawlera',\nversion='1.7.2',\nlicense='BSD',\ndescription='Crawlera middleware for Scrapy',\nlong_description=readme,\nmaintainer='Raul Gallegos',\nmaintainer_email='raul.ogh@gmail.com',\nauthor='Scrapinghub',\nauthor_email='opensource@scrapinghub.com',\nurl='https:\/\/github.com\/scrapy-plugins\/scrapy-crawlera',\npackages=['scrapy_crawlera'],\nplatforms=['Any'],\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Framework :: Scrapy',\n'Intended Audience :: Developers',\n'Topic :: Internet :: WWW\/HTTP',\n'Topic :: Internet :: Proxy Servers',\n'Topic :: Software Development :: Libraries :: Application Frameworks',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\ninstall_requires=['scrapy>=1.0.0', 'six', 'w3lib'],\n)\n"
    },
    {
        "package_name": "scrapyd-client-1.2.2",
        "file_list": "CHANGES.rst conftest.py LICENSE MANIFEST.in PKG-INFO README.rst cli.py commands.py deploy.py lib.py utils.py VERSION __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py test_errors.py test_projects.py test_schedule.py test_scrapyd-deploy.py test_spiders.py __init__.py tox.ini",
        "setup.py": "import os.path\n\nfrom setuptools import find_packages, setup\n\n\nwith open('README.rst', encoding='utf-8') as f:\nreadme = f.read()\n\nwith open('CHANGES.rst', encoding='utf-8') as f:\nhistory = f.read()\n\nwith open(os.path.join('scrapyd_client', 'VERSION')) as f:\nversion = f.read().strip()\n\nsetup(\nname='scrapyd-client',\nversion=version,\ndescription='A client for Scrapyd',\nlong_description=readme + '\\n\\n' + history,\nlong_description_content_type='text\/x-rst',\nauthor='Scrapy developers',\nauthor_email='info@scrapy.org',\nurl='https:\/\/github.com\/scrapy\/scrapyd-client',\npackages=find_packages(exclude=('tests', 'tests.*')),\ninclude_package_data=True,\ninstall_requires=[\n'uberegg>=0.1.1',\n'requests',\n'scrapy>=0.17',\n'urllib3',\n'w3lib',\n],\nextras_require={\n'test': [\n'pytest',\n'pytest-console-scripts',\n'pytest-cov',\n'pytest-mock',\n]\n},\npython_requires='>=3.6',\nlicense='BSD',\nzip_safe=False,\nentry_points={\n'console_scripts': [\n'scrapyd-deploy = scrapyd_client.deploy:main',\n'scrapyd-client = scrapyd_client.cli:main',\n]\n},\nclassifiers=[\n'Framework :: Scrapy',\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Internet :: WWW\/HTTP',\n],\n)\n"
    },
    {
        "package_name": "scrypt-0.8.20",
        "file_list": "dev-requirements.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst scrypt.py ciphertexts.csv hashvectors.csv test_scrypt.py test_scrypt_c_module.py test_scrypt_py2x.py test_scrypt_py3x.py __init__.py __init__.py config.h crypto_scrypt.c crypto_scrypt.h crypto_scrypt_smix.c crypto_scrypt_smix.h crypto_scrypt_smix_sse2.c crypto_scrypt_smix_sse2.h scryptenc.c scryptenc.h scryptenc_cpuperf.c scryptenc_cpuperf.h memlimit.c memlimit.h sha256.c sha256.h cpusupport.h crypto_aes.c crypto_aes.h crypto_aesctr.c crypto_aesctr.h crypto_aes_aesni.c crypto_aes_aesni.h crypto_entropy.c crypto_entropy.h asprintf.c asprintf.h entropy.c entropy.h getopt.h humansize.c humansize.h insecure_memzero.c insecure_memzero.h readpass.h sysendian.h warnp.c warnp.h scrypt_platform.h gettimeofday.c getopt.h inttypes.h stdint.h time.h unistd.h dependency_links.txt PKG-INFO SOURCES.txt top_level.txt setup.cfg setup.py scrypt.c tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import setup, Extension\n\nimport sys\nimport platform\nimport struct\nimport os\n\nincludes = []\nlibraries = []\nlibrary_dirs = []\nextra_sources = []\nCFLAGS = []\n\n\nif sys.platform.startswith('linux'):\ndefine_macros = [('HAVE_CLOCK_GETTIME', '1'),\n('HAVE_LIBRT', '1'),\n('HAVE_POSIX_MEMALIGN', '1'),\n('HAVE_STRUCT_SYSINFO', '1'),\n('HAVE_STRUCT_SYSINFO_MEM_UNIT', '1'),\n('HAVE_STRUCT_SYSINFO_TOTALRAM', '1'),\n('HAVE_SYSINFO', '1'),\n('HAVE_SYS_SYSINFO_H', '1'),\n('_FILE_OFFSET_BITS', '64')]\nlibraries = ['crypto', 'rt']\nincludes = ['\/usr\/local\/include', '\/usr\/include']\nCFLAGS.append('-O2')\nelif sys.platform.startswith('win32'):\ndefine_macros = [('inline', '__inline')]\n\nextra_sources = ['scrypt-windows-stubs\/gettimeofday.c']\nif struct.calcsize('P') == 8:\nif os.path.isdir('c:\\OpenSSL-v111-Win64') and sys.version_info[0] >= 3 and sys.version_info[1] > 4:\nopenssl_dir = 'c:\\OpenSSL-v111-Win64'\nelif os.path.isdir('c:\\Program Files\\OpenSSL-Win64'):\nopenssl_dir = 'c:\\Program Files\\OpenSSL-Win64'\nelse:\nopenssl_dir = 'c:\\OpenSSL-Win64'\nlibrary_dirs = [openssl_dir + '\\lib']\nincludes = [openssl_dir + '\\include', 'scrypt-windows-stubs\/include']\nelse:\nif os.path.isdir('c:\\OpenSSL-v111-Win32'):\nopenssl_dir = 'c:\\OpenSSL-v111-Win32'\nelif os.path.isdir('c:\\Program Files (x86)\\OpenSSL-Win32'):\nopenssl_dir = 'c:\\Program Files (x86)\\OpenSSL-Win32'\nelse:\nopenssl_dir = 'c:\\OpenSSL-Win32'\nlibrary_dirs = [openssl_dir + '\\lib']\nincludes = [openssl_dir + '\\include', 'scrypt-windows-stubs\/include']\nwindows_link_legacy_openssl = os.environ.get(\n\"SCRYPT_WINDOWS_LINK_LEGACY_OPENSSL\", None\n)\nif windows_link_legacy_openssl is None:\nlibraries = ['libcrypto_static']\nelse:\nlibraries = ['libeay32']\nlibraries += [\"advapi32\", \"gdi32\", \"user32\", \"ws2_32\"]\n\nelif sys.platform.startswith('darwin') and platform.mac_ver()[0] < '10.6':\ndefine_macros = [('HAVE_SYSCTL_HW_USERMEM', '1')]\n# disable for travis\nlibraries = ['crypto']\nelif sys.platform.startswith('darwin'):\ndefine_macros = [('HAVE_POSIX_MEMALIGN', '1'),\n('HAVE_SYSCTL_HW_USERMEM', '1')]\n# disable for travis\nlibraries = ['crypto']\nelse:\ndefine_macros = [('HAVE_POSIX_MEMALIGN', '1'),\n('HAVE_SYSCTL_HW_USERMEM', '1')]\nlibraries = ['crypto']\n\nscrypt_module = Extension(\n'_scrypt',\nsources=['src\/scrypt.c',\n'scrypt-1.2.1\/lib\/crypto\/crypto_scrypt_smix_sse2.c',\n'scrypt-1.2.1\/lib\/crypto\/crypto_scrypt_smix.c',\n'scrypt-1.2.1\/lib\/crypto\/crypto_scrypt.c',\n'scrypt-1.2.1\/lib\/scryptenc\/scryptenc.c',\n'scrypt-1.2.1\/lib\/scryptenc\/scryptenc_cpuperf.c',\n'scrypt-1.2.1\/lib\/util\/memlimit.c',\n'scrypt-1.2.1\/libcperciva\/alg\/sha256.c',\n'scrypt-1.2.1\/libcperciva\/crypto\/crypto_aes_aesni.c',\n'scrypt-1.2.1\/libcperciva\/crypto\/crypto_aes.c',\n'scrypt-1.2.1\/libcperciva\/crypto\/crypto_aesctr.c',\n'scrypt-1.2.1\/libcperciva\/crypto\/crypto_entropy.c',\n'scrypt-1.2.1\/libcperciva\/util\/entropy.c',\n'scrypt-1.2.1\/libcperciva\/util\/insecure_memzero.c',\n'scrypt-1.2.1\/libcperciva\/util\/warnp.c',\n'scrypt-1.2.1\/libcperciva\/util\/humansize.c',\n'scrypt-1.2.1\/libcperciva\/util\/asprintf.c'] + extra_sources,\ninclude_dirs=['scrypt-1.2.1',\n'scrypt-1.2.1\/lib',\n'scrypt-1.2.1\/lib\/scryptenc',\n'scrypt-1.2.1\/lib\/crypto',\n'scrypt-1.2.1\/lib\/util',\n'scrypt-1.2.1\/libcperciva\/cpusupport',\n'scrypt-1.2.1\/libcperciva\/alg',\n'scrypt-1.2.1\/libcperciva\/util',\n'scrypt-1.2.1\/libcperciva\/crypto'] + includes,\ndefine_macros=[('HAVE_CONFIG_H', None)] + define_macros,\nextra_compile_args=CFLAGS,\nlibrary_dirs=library_dirs,\nlibraries=libraries)\n\nsetup(name='scrypt',\nversion='0.8.20',\ndescription='Bindings for the scrypt key derivation function library',\nauthor='Magnus Hallin',\nauthor_email='mhallin@gmail.com',\nmaintainer=\"Holger Nahrstaedt\",\nmaintainer_email=\"nahrstaedt@gmail.com\",\nurl='https:\/\/github.com\/holgern\/py-scrypt',\npackages=['scrypt', 'scrypt.tests'],\npackage_data={'scrypt': ['tests\/*.csv']},\next_modules=[scrypt_module],\nclassifiers=['Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Topic :: Security :: Cryptography',\n'Topic :: Software Development :: Libraries'],\nlicense='2-clause BSD',\nlong_description=open('README.rst').read())\n"
    },
    {
        "package_name": "scs-3.2.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md .bumpversion.cfg .git ISSUE_TEMPLATE.md build.yml buildpp.yml cmake.yml coverage.yml docs.yml gpu.yml valgrind.yml .gitignore CITATION.cff AddInstallRPATHSupport.cmake AddUninstallTarget.cmake InstallBasicPackageFiles.cmake scs_types.h.in CMakeLists.txt acceleration.rst equilibration.rst index.rst relaxation.rst scale.rst warm_start.rst c.rst compile_flags.rst cones.rst exit_flags.rst index.rst info.rst julia.rst matlab.rst matrices.rst python.rst r.rst settings.rst index.rst index.rst conf.py index.rst Doxyfile .gitignore c.rst index.rst julia.rst matlab.rst basic_qp.rst entropy.py entropy.py.out entropy.rst lasso.py lasso.py.out lasso.rst mat_completion.py mat_completion.py.out mat_completion.rst mpc.py mpc.py.out mpc.rst qp.py qp.py.out python.rst qp.c qp.c.out qp.m qp.m.out qp.prob r.rst windows1.png windows2.png windows3.png index.rst index.rst c.rst index.rst julia.rst matlab.rst python.rst r.rst index.rst make.bat Makefile requirements.txt scs_theme.css favicon.ico scs_logo.png scs_logo_transparent.png aa.h cones.h ctrlc.h glbopts.h linalg.h linsys.h normalize.h rw.h scs.h scs_blas.h scs_types.h scs_work.h util.h LICENSE.txt private.c private.h private.c private.h csparse.c csparse.h amd.h amd_1.c amd_2.c amd_aat.c amd_control.c amd_defaults.c amd_dump.c amd_global.c amd_info.c amd_internal.h amd_order.c amd_postorder.c amd_post_tree.c amd_preprocess.c amd_valid.c changes LICENSE.txt SuiteSparse_config.c SuiteSparse_config.h changes LICENSE qdldl.c qdldl.h qdldl_types.h README.md gpu.c gpu.h private.c private.h scs_matrix.c scs_matrix.h Makefile README.md scs.mk aa.c cones.c ctrlc.c linalg.c normalize.c rw.c scs.c scs_version.c util.c minunit.h degenerate.h hs21_tiny_qp.h hs21_tiny_qp_rw.h infeasible_tiny_qp.h qafiro_tiny_qp.h random_prob random_prob.h rob_gauss_cov_est.h small_lp.h small_qp.h test_validation.h unbounded_tiny_qp.h problem_utils.h random_socp_prob.c rng.h run_from_file.c run_tests.c dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py scsmodule.h scsobject.h scspy.c __init__.py gen_random_cone_prob.py solve_random_cone_prob.py test_scs_basic.py test_scs_object.py test_scs_quad.py test_scs_rand.py test_scs_sdp.py test_solve_random_cone_prob.py gen_random_cone_prob.cpython-38.pyc test_scs_basic.cpython-38-pytest-7.0.1.pyc test_scs_object.cpython-38-pytest-7.0.1.pyc test_scs_quad.cpython-38-pytest-7.0.1.pyc test_scs_rand.cpython-38-pytest-7.0.1.pyc test_scs_sdp.cpython-38-pytest-7.0.1.pyc test_solve_random_cone_prob.cpython-38-pytest-7.0.1.pyc",
        "setup.py": "from __future__ import print_function\nfrom distutils.msvccompiler import MSVCCompiler\nfrom glob import glob\n\nfrom platform import system\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\nimport shutil\nimport tempfile\nimport argparse\nimport os\nimport subprocess\nimport sys\n\nSCS_ARG_MARK = \"--scs\"\n\nparser = argparse.ArgumentParser(description=\"Compilation args for SCS.\")\nparser.add_argument(\nSCS_ARG_MARK,\ndest=\"scs\",\naction=\"store_true\",\ndefault=False,\nhelp=\"Put this first to ensure following arguments are parsed correctly\",\n)\nparser.add_argument(\n\"--gpu\",\ndest=\"gpu\",\naction=\"store_true\",\ndefault=False,\nhelp=\"Also compile the GPU CUDA version of SCS\",\n)\nparser.add_argument(\n\"--float\",\ndest=\"float32\",\naction=\"store_true\",\ndefault=False,\nhelp=\"Use 32 bit (single precision) floats, default is 64 bit\",\n)\nparser.add_argument(\n\"--extraverbose\",\ndest=\"extraverbose\",\naction=\"store_true\",\ndefault=False,\nhelp=\"Extra verbose SCS (for debugging)\",\n)\nparser.add_argument(\n\"--no-gpu-atrans\",\ndest=\"gpu_atrans\",\naction=\"store_false\",\ndefault=True,\nhelp=\"use original (non-transposed) A matrix in gpu indirect method\",\n)\nparser.add_argument(\n\"--int\",\ndest=\"int32\",\naction=\"store_true\",\ndefault=False,\nhelp=(\n\"Use 32 bit ints, default is 64 bit (GPU code must always use 32 bit \"\n\"ints, since CUSPARSE only supports 32 bits.)\"\n),\n)\nparser.add_argument(\n\"--blas64\",\ndest=\"blas64\",\naction=\"store_true\",\ndefault=False,\nhelp=\"Use 64 bit ints for the blas\/lapack libs\",\n)\nargs, unknown = parser.parse_known_args()\n\nenv_lib_dirs = os.environ.get(\"BLAS_LAPACK_LIB_PATHS\", [])\nenv_libs = os.environ.get(\"BLAS_LAPACK_LIBS\", [])\n\nprint(args)\n\n# necessary to remove SCS args before passing to setup:\nif SCS_ARG_MARK in sys.argv:\nsys.argv = sys.argv[0 : sys.argv.index(SCS_ARG_MARK)]\n\n\ndef get_infos():\nimport numpy\nfrom numpy.distutils.system_info import get_info\n\n# Print out full BLAS \/ LAPACK linkage info.\nnumpy.show_config()\nif env_lib_dirs or env_libs:\nprint(\"using environment variables for blas\/lapack libraries\")\nenv_vars = {}\nif env_lib_dirs:\nenv_vars[\"library_dirs\"] = [env_lib_dirs]\nif env_libs:\nenv_vars[\"libraries\"] = env_libs.split(\":\")\nreturn env_vars, {}\n\n# environment variables not set, using defaults instead\nblas_info = get_info(\"blas_opt\")\nif not blas_info:\nblas_info = get_info(\"blas\")\nprint(blas_info)\n\nlapack_info = get_info(\"lapack_opt\")\nif not lapack_info:\nlapack_info = get_info(\"lapack\")\nprint(lapack_info)\n\nreturn blas_info, lapack_info\n\n\ndef set_builtin(name, value):\nif isinstance(__builtins__, dict):\n__builtins__[name] = value\nelse:\nsetattr(__builtins__, name, value)\n\n\nclass build_ext_scs(build_ext):\ndef finalize_options(self):\nbuild_ext.finalize_options(self)\n# Prevent numpy from thinking it is still in its setup process:\nset_builtin(\"__NUMPY_SETUP__\", False)\nimport numpy\n\nself.copy = {\"include_dirs\": [numpy.get_include()]}\n\nblas_info, lapack_info = get_infos()\n\nif blas_info or lapack_info:\nself.copy[\"define_macros\"] = (\n[(\"USE_LAPACK\", None)]\n+ blas_info.pop(\"define_macros\", [])\n+ lapack_info.pop(\"define_macros\", [])\n)\nself.copy[\"include_dirs\"] += blas_info.pop(\n\"include_dirs\", []\n) + lapack_info.pop(\"include_dirs\", [])\nself.copy[\"library_dirs\"] = blas_info.pop(\n\"library_dirs\", []\n) + lapack_info.pop(\"library_dirs\", [])\nself.copy[\"libraries\"] = blas_info.pop(\n\"libraries\", []\n) + lapack_info.pop(\"libraries\", [])\nself.copy[\"extra_link_args\"] = blas_info.pop(\n\"extra_link_args\", []\n) + lapack_info.pop(\"extra_link_args\", [])\nself.copy[\"extra_compile_args\"] = blas_info.pop(\n\"extra_compile_args\", []\n) + lapack_info.pop(\"extra_compile_args\", [])\n\ndef build_extension(self, ext):\nfor k, v in self.copy.items():\nif not getattr(ext, k, None):\nsetattr(ext, k, [])\ngetattr(ext, k).extend(v)\n\nreturn build_ext.build_extension(self, ext)\n\n\ndef install_scs(**kwargs):\nextra_compile_args = [\"-O3\"]\nlibraries = []\nsources = (\n[\n\"src\/scspy.c\",\n]\n+ glob(\"scs\/src\/*.c\")\n+ glob(\"scs\/linsys\/*.c\")\n)\ninclude_dirs = [\"scs\/include\", \"scs\/linsys\"]\ndefine_macros = [(\"PYTHON\", None), (\"CTRLC\", 1)]\n\nif system() == \"Linux\":\nlibraries += [\"rt\"]\nif args.float32:\ndefine_macros += [(\"SFLOAT\", 1)] # single precision floating point\nif args.extraverbose:\ndefine_macros += [(\"VERBOSITY\", 999)] # for debugging\nif args.blas64:\ndefine_macros += [(\"BLAS64\", 1)] # 64 bit blas\nif not args.int32 and not args.gpu:\ndefine_macros += [(\"DLONG\", 1)] # longs for integer type\n\n_scs_direct = Extension(\nname=\"_scs_direct\",\nsources=sources\n+ glob(\"scs\/linsys\/cpu\/direct\/*.c\")\n+ glob(\"scs\/linsys\/external\/amd\/*.c\")\n+ glob(\"scs\/linsys\/external\/qdldl\/*.c\"),\ndepends=glob(\"src\/*.h\"),\ndefine_macros=list(define_macros),\ninclude_dirs=include_dirs\n+ [\n\"scs\/linsys\/cpu\/direct\/\",\n\"scs\/linsys\/external\/amd\",\n\"scs\/linsys\/external\/dqlql\",\n],\nlibraries=list(libraries),\nextra_compile_args=list(extra_compile_args),\n)\n\n_scs_indirect = Extension(\nname=\"_scs_indirect\",\nsources=sources + glob(\"scs\/linsys\/cpu\/indirect\/*.c\"),\ndepends=glob(\"src\/*.h\"),\ndefine_macros=list(define_macros)\n+ [(\"PY_INDIRECT\", None), (\"INDIRECT\", 1)],\ninclude_dirs=include_dirs + [\"scs\/linsys\/cpu\/indirect\/\"],\nlibraries=list(libraries),\nextra_compile_args=list(extra_compile_args),\n)\n\next_modules = [_scs_direct, _scs_indirect]\n\nif args.gpu:\nlibrary_dirs = []\nif system() == \"Windows\":\ninclude_dirs += [os.environ[\"CUDA_PATH\"] + \"\/include\"]\nlibrary_dirs = [os.environ[\"CUDA_PATH\"] + \"\/lib\/x64\"]\nelse:\ninclude_dirs += [\"\/usr\/local\/cuda\/include\"]\nlibrary_dirs = [\"\/usr\/local\/cuda\/lib\", \"\/usr\/local\/cuda\/lib64\"]\nif args.gpu_atrans: # Should be True by default\ndefine_macros += [(\"GPU_TRANSPOSE_MAT\", 1)]\n_scs_gpu = Extension(\nname=\"_scs_gpu\",\nsources=sources\n+ glob(\"scs\/linsys\/gpu\/*.c\")\n+ glob(\"scs\/linsys\/gpu\/indirect\/*.c\"),\ndepends=glob(\"src\/*.h\"),\ndefine_macros=list(define_macros)\n+ [(\"PY_GPU\", None), (\"INDIRECT\", 1)],\ninclude_dirs=include_dirs\n+ [\"scs\/linsys\/gpu\/\", \"scs\/linsys\/gpu\/indirect\"],\nlibrary_dirs=library_dirs,\nlibraries=libraries + [\"cudart\", \"cublas\", \"cusparse\"],\nextra_compile_args=list(extra_compile_args),\n)\next_modules += [_scs_gpu]\n\nsetup(\nname=\"scs\",\nversion=\"3.2.0\",\nauthor=\"Brendan O'Donoghue\",\nauthor_email=\"bodonoghue85@gmail.com\",\nurl=\"http:\/\/github.com\/cvxgrp\/scs\",\ndescription=\"scs: splitting conic solver\",\npackage_dir={\"scs\": \"src\"},\npackages=[\"scs\"],\next_modules=ext_modules,\ncmdclass={\"build_ext\": build_ext_scs},\nsetup_requires=[\"numpy >= 1.7\"],\ninstall_requires=[\"numpy >= 1.7\", \"scipy >= 0.13.2\"],\nlicense=\"MIT\",\nzip_safe=False,\n# TODO: update this:\nlong_description=(\n\"Solves convex cone programs via operator splitting. \"\n\"Can solve: linear programs (LPs), second-order cone \"\n\"programs (SOCPs), semidefinite programs (SDPs), \"\n\"exponential cone programs (ECPs), and power cone \"\n\"programs (PCPs), or problems with any combination of \"\n\"those cones. See http:\/\/github.com\/cvxgrp\/scs for \"\n\"more details.\"\n),\n)\n\n\ninstall_scs()\n"
    },
    {
        "package_name": "sdnotify-0.3.2",
        "file_list": "LICENSE.txt PKG-INFO __init__.py setup.cfg setup.py",
        "setup.py": "from distutils.core import setup\n\nVERSION='0.3.2'\n\nsetup(\nname = 'sdnotify',\npackages = ['sdnotify'],\nversion = VERSION,\ndescription = 'A pure Python implementation of systemd\\'s service notification protocol (sd_notify)',\nauthor = 'Brett Bethke',\nauthor_email = 'bbethke@gmail.com',\nurl = 'https:\/\/github.com\/bb4242\/sdnotify',\ndownload_url = 'https:\/\/github.com\/bb4242\/sdnotify\/tarball\/v{}'.format(VERSION),\nkeywords = ['systemd'],\nclassifiers = [\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: POSIX :: Linux\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\nlong_description = \"\"\"\\\nsystemd Service Notification\n\nThis is a pure Python implementation of the systemd sd_notify protocol. This protocol can be used to inform systemd about service start-up completion, watchdog events, and other service status changes. Thus, this package can be used to write system services in Python that play nicely with systemd. sdnotify is compatible with both Python 2 and Python 3.\n\"\"\"\n)\n"
    },
    {
        "package_name": "secp256k1-0.14.0",
        "file_list": ".cirrus.yml .gitattributes .gitignore aclocal.m4 autogen.sh output.0 output.1 output.2 requests traces.0 traces.1 traces.2 compile config.guess config.sub depcomp install-sh ltmain.sh ax_prog_cc_for_build.m4 bitcoin_secp.m4 libtool.m4 ltoptions.m4 ltsugar.m4 ltversion.m4 lt~obsolete.m4 missing test-driver cirrus.sh linux-debian.Dockerfile configure configure.ac lax_der_parsing.c lax_der_parsing.h lax_der_privatekey_parsing.c lax_der_privatekey_parsing.h COPYING safegcd_implementation.md secp256k1.h secp256k1_ecdh.h secp256k1_extrakeys.h secp256k1_preallocated.h secp256k1_recovery.h secp256k1_schnorrsig.h libsecp256k1.pc.in Makefile.am Makefile.in README.md gen_exhaustive_groups.sage gen_split_lambda_constants.sage group_prover.sage prove_group_implementations.sage secp256k1_params.sage weierstrass_prover.sage SECURITY.md field_10x26_arm.s assumptions.h basic-config.h bench.h bench_ecdh.c bench_ecmult.c bench_internal.c bench_recover.c bench_schnorrsig.c bench_sign.c bench_verify.c ecdsa.h ecdsa_impl.h eckey.h eckey_impl.h ecmult.h ecmult_const.h ecmult_const_impl.h ecmult_gen.h ecmult_gen_impl.h ecmult_impl.h ecmult_static_pre_g.h field.h field_10x26.h field_10x26_impl.h field_5x52.h field_5x52_asm_impl.h field_5x52_impl.h field_5x52_int128_impl.h field_impl.h gen_context.c gen_ecmult_static_pre_g.c group.h group_impl.h hash.h hash_impl.h libsecp256k1-config.h.in modinv32.h modinv32_impl.h modinv64.h modinv64_impl.h main_impl.h Makefile.am.include tests_impl.h main_impl.h Makefile.am.include tests_exhaustive_impl.h tests_impl.h main_impl.h Makefile.am.include tests_exhaustive_impl.h tests_impl.h main_impl.h Makefile.am.include tests_exhaustive_impl.h tests_impl.h scalar.h scalar_4x64.h scalar_4x64_impl.h scalar_8x32.h scalar_8x32_impl.h scalar_impl.h scalar_low.h scalar_low_impl.h scratch.h scratch_impl.h secp256k1.c selftest.h testrand.h testrand_impl.h tests.c tests_exhaustive.c util.h valgrind_ctime_test.c MANIFEST.in PKG-INFO README.md __init__.py __main__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py setup_support.py build.py secp256k1.h secp256k1_ecdh.h secp256k1_extrakeys.h secp256k1_recovery.h secp256k1_schnorrsig.h",
        "setup.py": "import errno\nimport io\nimport os\nimport os.path\nimport shutil\nimport subprocess\nimport tarfile\nimport tempfile\nfrom distutils import log\nfrom distutils.command.build_clib import build_clib as _build_clib\nfrom distutils.command.build_ext import build_ext as _build_ext\nfrom distutils.errors import DistutilsError\nfrom io import BytesIO\nimport sys\n\nfrom setuptools import (Distribution as _Distribution,\nsetup,\nfind_packages,\n__version__ as setuptools_version)\nfrom setuptools.command.develop import develop as _develop\nfrom setuptools.command.egg_info import egg_info as _egg_info\nfrom setuptools.command.sdist import sdist as _sdist\ntry:\nfrom wheel.bdist_wheel import bdist_wheel as _bdist_wheel\nexcept ImportError:\n_bdist_wheel = None\npass\n\ntry:\nfrom urllib2 import urlopen, URLError\nexcept ImportError:\nfrom urllib.request import urlopen\nfrom urllib.error import URLError\n\n\nsys.path.append(os.path.abspath(os.path.dirname(__file__)))\nfrom setup_support import absolute, build_flags, has_system_lib # noqa: E402\n\n\n# Version of libsecp256k1 to download if none exists in the `libsecp256k1`\n# directory\nLIB_TARBALL_URL = (\"https:\/\/github.com\/bitcoin-core\/secp256k1\/archive\/\"\n\"9526874d1406a13193743c605ba64358d55a8785\"\n\".tar.gz\")\n\n\n# We require setuptools >= 3.3\nif [int(i) for i in setuptools_version.split('.')] < [3, 3]:\nraise SystemExit(\n\"Your setuptools version ({}) is too old to correctly install this \"\n\"package. Please upgrade to a newer version (>= 3.3).\"\n.format(setuptools_version)\n)\n\n# Ensure pkg-config is available\ntry:\nsubprocess.check_call(['pkg-config', '--version'])\nexcept OSError:\nraise SystemExit(\n\"'pkg-config' is required to install this package. \"\n\"Please see the README for details.\"\n)\n\n\ndef download_library(command):\nif command.dry_run:\nreturn\nlibdir = absolute(\"libsecp256k1\")\nif os.path.exists(os.path.join(libdir, \"autogen.sh\")):\n# Library already downloaded\nreturn\nif not os.path.exists(libdir):\ncommand.announce(\"downloading libsecp256k1 source code\",\nlevel=log.INFO)\ntry:\nr = urlopen(LIB_TARBALL_URL)\nif r.getcode() == 200:\ncontent = BytesIO(r.read())\ncontent.seek(0)\nwith tarfile.open(fileobj=content) as tf:\ndirname = tf.getnames()[0].partition('\/')[0]\ntf.extractall()\nshutil.move(dirname, libdir)\nelse:\nraise SystemExit(\n\"Unable to download secp256k1 library: HTTP-Status: %d\",\nr.getcode()\n)\nexcept URLError as ex:\nraise SystemExit(\"Unable to download secp256k1 library: %s\",\nex.message)\n\n\nclass egg_info(_egg_info):\ndef run(self):\n# Ensure library has been downloaded (sdist might have been skipped)\ndownload_library(self)\n\n_egg_info.run(self)\n\n\nclass sdist(_sdist):\ndef run(self):\ndownload_library(self)\n_sdist.run(self)\n\n\nif _bdist_wheel:\nclass bdist_wheel(_bdist_wheel):\ndef run(self):\ndownload_library(self)\n_bdist_wheel.run(self)\nelse:\nbdist_wheel = None\n\n\nclass Distribution(_Distribution):\ndef has_c_libraries(self):\nreturn not has_system_lib()\n\n\nclass build_clib(_build_clib):\ndef initialize_options(self):\n_build_clib.initialize_options(self)\nself.build_flags = None\n\ndef finalize_options(self):\n_build_clib.finalize_options(self)\nif self.build_flags is None:\nself.build_flags = {\n'include_dirs': [],\n'library_dirs': [],\n'define': [],\n}\n\ndef get_source_files(self):\n# Ensure library has been downloaded (sdist might have been skipped)\ndownload_library(self)\n\nreturn [\nabsolute(os.path.join(root, filename))\nfor root, _, filenames in os.walk(absolute(\"libsecp256k1\"))\nfor filename in filenames\n]\n\ndef build_libraries(self, libraries):\nraise Exception(\"build_libraries\")\n\ndef check_library_list(self, libraries):\nraise Exception(\"check_library_list\")\n\ndef get_library_names(self):\nreturn build_flags('libsecp256k1', 'l',\nos.path.abspath(self.build_clib))\n\ndef run(self):\nif has_system_lib():\nlog.info(\"Using system library\")\nreturn\n\n# Ensure library has been downloaded (sdist might have been skipped)\ndownload_library(self)\n\nif not os.path.exists(absolute(\"libsecp256k1\/configure\")):\n# configure script hasn't been generated yet\nautogen = absolute(\"libsecp256k1\/autogen.sh\")\nos.chmod(absolute(autogen), 0o755)\nsubprocess.check_call(\n[autogen],\ncwd=absolute(\"libsecp256k1\"),\n)\n\nfor filename in [\n\"libsecp256k1\/configure\",\n\"libsecp256k1\/build-aux\/compile\",\n\"libsecp256k1\/build-aux\/config.guess\",\n\"libsecp256k1\/build-aux\/config.sub\",\n\"libsecp256k1\/build-aux\/depcomp\",\n\"libsecp256k1\/build-aux\/install-sh\",\n\"libsecp256k1\/build-aux\/missing\",\n\"libsecp256k1\/build-aux\/test-driver\",\n]:\ntry:\nos.chmod(absolute(filename), 0o755)\nexcept OSError as e:\n# some of files might not exist depending on autoconf version\nif e.errno != errno.ENOENT:\n# If the error isn't \"No such file or directory\" something\n# else is wrong and we want to know about it\nraise\n\ncmd = [\nabsolute(\"libsecp256k1\/configure\"),\n\"--disable-shared\",\n\"--enable-static\",\n\"--disable-dependency-tracking\",\n\"--with-pic\",\n\"--enable-module-recovery\",\n\"--prefix\",\nos.path.abspath(self.build_clib),\n]\n\nif not os.environ.get('SECP_BUNDLED_NO_EXPERIMENTAL'):\nlog.info(\"Building experimental\")\ncmd.extend([\n\"--enable-experimental\",\n\"--enable-module-ecdh\",\n\"--enable-module-schnorrsig\",\n\"--enable-module-extrakeys\",\n])\n\nwith tempfile.TemporaryDirectory() as build_temp:\nlog.debug(\"Running configure: {}\".format(\" \".join(cmd)))\nsubprocess.check_call(\ncmd,\ncwd=build_temp,\n)\n\nsubprocess.check_call([\"make\"], cwd=build_temp)\nsubprocess.check_call([\"make\", \"install\"], cwd=build_temp)\n\nself.build_flags['include_dirs'].extend(build_flags('libsecp256k1',\n'I',\nself.build_clib))\nself.build_flags['library_dirs'].extend(build_flags('libsecp256k1',\n'L',\nself.build_clib))\nif not has_system_lib():\nself.build_flags['define'].append(('CFFI_ENABLE_RECOVERY', None))\nelse:\npass\n\n\nclass build_ext(_build_ext):\ndef run(self):\nif self.distribution.has_c_libraries():\nbuild_clib = self.get_finalized_command(\"build_clib\")\nself.include_dirs.append(\nos.path.join(build_clib.build_clib, \"include\"),\n)\nself.include_dirs.extend(build_clib.build_flags['include_dirs'])\n\nself.library_dirs.append(\nos.path.join(build_clib.build_clib, \"lib\"),\n)\nself.library_dirs.extend(build_clib.build_flags['library_dirs'])\n\nself.define = build_clib.build_flags['define']\n\nreturn _build_ext.run(self)\n\n\nclass develop(_develop):\ndef run(self):\nif not has_system_lib():\nraise DistutilsError(\n\"This library is not usable in 'develop' mode when using the \"\n\"bundled libsecp256k1. See README for details.\")\n_develop.run(self)\n\n\nwith io.open('README.md', encoding='utf-8') as f:\nlong_description = f.read()\n\nsetup(\nname=\"secp256k1\",\nversion=\"0.14.0\",\n\ndescription='FFI bindings to libsecp256k1',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nurl='https:\/\/github.com\/rustyrussell\/secp256k1-py',\nauthor='Ludvig Broberg',\nauthor_email='lud@tutanota.com',\nmaintainer='Rusty Russell',\nmaintainer_email='rusty@rustcorp.com.au',\nlicense='MIT',\n\nsetup_requires=['cffi>=1.3.0', 'pytest-runner==2.6.2'],\ninstall_requires=['cffi>=1.3.0'],\ntests_require=['pytest==2.8.7'],\n\npackages=find_packages(exclude=('_cffi_build',\n'_cffi_build.*',\n'libsecp256k1')),\next_package=\"secp256k1\",\ncffi_modules=[\n\"_cffi_build\/build.py:ffi\"\n],\n\ncmdclass={\n'build_clib': build_clib,\n'build_ext': build_ext,\n'develop': develop,\n'egg_info': egg_info,\n'sdist': sdist,\n'bdist_wheel': bdist_wheel\n},\ndistclass=Distribution,\nzip_safe=False,\n\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Topic :: Software Development :: Libraries\",\n\"Topic :: Security :: Cryptography\"\n]\n)\n"
    },
    {
        "package_name": "selectors2-2.0.2",
        "file_list": "CHANGELOG.rst dev-requirements.txt LICENSE MANIFEST.in PKG-INFO README.rst dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt selectors2.py setup.cfg setup.py support.py test_selectors2.py __init__.py tox.ini",
        "setup.py": "import os\nimport re\nfrom setuptools import setup\n\n# Get the version (borrowed from SQLAlchemy)\nbase_path = os.path.dirname(__file__)\nwith open(os.path.join(base_path, 'selectors2.py')) as f:\nVERSION = re.compile(r'.*__version__ = \\'(.*?)\\'', re.S).match(f.read()).group(1)\n\nwith open('README.rst') as f:\nlong_description = f.read()\n\nwith open('CHANGELOG.rst') as f:\nchangelog = f.read()\n\nif __name__ == '__main__':\nsetup(name='selectors2',\ndescription='Back-ported, durable, and portable selectors',\nlong_description=long_description + '\\n\\n' + changelog,\nlicense='MIT',\nurl='https:\/\/www.github.com\/sethmlarson\/selectors2',\nversion=VERSION,\nauthor='Seth Michael Larson',\nauthor_email='sethmichaellarson@gmail.com',\nmaintainer='Seth Michael Larson',\nmaintainer_email='sethmichaellarson@gmail.com',\ninstall_requires=[],\nkeywords=['async', 'file', 'socket', 'select', 'backport'],\npy_modules=['selectors2'],\nzip_safe=False,\nclassifiers=['Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'License :: OSI Approved :: Python Software Foundation License',\n'License :: OSI Approved :: MIT License'])\n"
    },
    {
        "package_name": "selenium-wire-4.6.5",
        "file_list": "AUTHORS.rst CONTRIBUTING.rst HISTORY.rst LICENSE MANIFEST.in NOTICES PKG-INFO pyproject.toml README.rst backend.py ca.crt ca.key handler.py har.py inspect.py modifier.py request.py server.py storage.py addonmanager.py core.py streambodies.py upstream_auth.py __init__.py certs.py command.py command_lexer.py connections.py exif.py exif_be.py exif_le.py gif.py google_protobuf.py ico.py jpeg.py png.py tls_client_hello.py vlq_base128_le.py __init__.py ASCommandResponse.py ASWBXML.py ASWBXMLByteQueue.py ASWBXMLCodePage.py GlobalTokens.py InvalidDataException.py __init__.py __init__.py controller.py basethread.py bidi.py multidict.py serializable.py __init__.py ctx.py eventsequence.py exceptions.py flow.py flowfilter.py http.py log.py master.py check.py cookies.py encoding.py headers.py assemble.py read.py __init__.py framereader.py utils.py __init__.py message.py multipart.py request.py response.py status_codes.py url.py user_agents.py __init__.py server_spec.py socks.py tcp.py tls.py frame.py masker.py utils.py __init__.py __init__.py options.py optmanager.py linux.py openbsd.py osx.py pf.py windows.py __init__.py config.py http_proxy.py socks_proxy.py __init__.py base.py http.py http1.py http2.py rawtcp.py tls.py websocket.py __init__.py root_context.py server.py __init__.py stateobject.py tcp.py types.py arg_check.py bits.py data.py human.py sliding_window.py strutils.py typecheck.py __init__.py version.py websocket.py __init__.py __init__.py v2.py webdriver.py __init__.py utils.py webdriver.py __init__.py __main__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py acceptance.py jsonform.html chromedriver headless-chromium.zip test_end2end.py __init__.py inject_message.py test_backend.py test_handler.py test_har.py test_inspect.py test_modifier.py test_request.py test_server.py test_storage.py test_utils.py test_webdriver.py __init__.py server.crt server.key utils.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n\"\"\"The setup script.\"\"\"\n\nfrom setuptools import find_packages, setup\n\nwith open('README.rst') as readme_file:\nreadme = readme_file.read()\n\nwith open('HISTORY.rst') as history_file:\nhistory = history_file.read()\n\nsetup(\nauthor=\"Will Keeling\",\nauthor_email='will@zifferent.com',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Operating System :: MacOS',\n'Operating System :: POSIX',\n'Operating System :: Microsoft :: Windows',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n],\ndescription=\"Extends Selenium to give you the ability to inspect requests made by the browser.\",\nlicense=\"MIT\",\nlong_description=readme + '\\n\\n' + history,\ninclude_package_data=True,\npython_requires='>=3.6',\ninstall_requires=[\n'blinker>=1.4',\n'brotli>=1.0.9',\n'certifi>=2019.9.11',\n\"h2>=4.0; python_version>='3.6.0'\",\n\"hyperframe>=6.0; python_version>='3.6.0'\",\n'kaitaistruct>=0.7',\n'pyasn1>=0.3.1',\n'pyOpenSSL>=19.1.0',\n'pyparsing>=2.4.2',\n'pysocks>=1.7.1',\n'selenium>=3.4.0',\n'wsproto>=0.14',\n'zstandard>=0.14.1',\n],\nextras_require={\n':sys_platform == \"win32\"': [\n'pydivert>=2.0.3',\n],\n':python_version == \"3.6\"': [\n\"dataclasses>=0.7\",\n],\n'dev': [\n'black',\n'bumpversion',\n'coverage',\n'flake8',\n'gunicorn',\n'httpbin',\n'isort',\n\"mitmproxy>5.3.0; python_version>='3.8.0'\", # Needed for end2end tests\n'mypy',\n'pre-commit',\n'pytest',\n'pytest-cov',\n'tox',\n'twine',\n'werkzeug==2.0.3',\n'wheel',\n],\n},\nkeywords='selenium-wire',\nname='selenium-wire',\npackages=find_packages(exclude=[\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"]),\nsetup_requires=[],\ntest_suite='tests.seleniumwire',\ntests_require=['pytest'],\nurl='https:\/\/github.com\/wkeeling\/selenium-wire',\nversion='4.6.5',\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "sendgrid-6.9.7",
        "file_list": "app.json LICENSE MANIFEST.in PKG-INFO Procfile README.rst requirements.txt base_interface.py unassigned.py __init__.py __init__.py eventwebhook_header.py __init__.py app.py config.py config.yml parse.py default_data.txt default_data_with_attachments.txt raw_data.txt raw_data_with_attachments.txt send.py __init__.py amp_html_content.py asm.py attachment.py batch_id.py bcc_email.py bcc_settings.py bcc_settings_email.py bypass_bounce_management.py bypass_list_management.py bypass_spam_management.py bypass_unsubscribe_management.py category.py cc_email.py click_tracking.py content.py content_id.py custom_arg.py disposition.py dynamic_template_data.py email.py exceptions.py file_content.py file_name.py file_type.py footer_html.py footer_settings.py footer_text.py from_email.py ganalytics.py groups_to_display.py group_id.py header.py html_content.py ip_pool_name.py mail.py mail_settings.py mime_type.py open_tracking.py open_tracking_substitution_tag.py personalization.py plain_text_content.py reply_to.py sandbox_mode.py section.py send_at.py spam_check.py spam_threshold.py spam_url.py subject.py subscription_html.py subscription_substitution_tag.py subscription_text.py subscription_tracking.py substitution.py template_id.py to_email.py tracking_settings.py utm_campaign.py utm_content.py utm_medium.py utm_source.py utm_term.py validators.py __init__.py stats.py __init__.py __init__.py sendgrid.py twilio_email.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py",
        "setup.py": "import io\nimport os\nfrom setuptools import setup, find_packages\n\n\n__version__ = None\nwith open('sendgrid\/version.py') as f:\nexec(f.read())\n\ndef getRequires():\ndeps = [\n'python_http_client>=3.2.1',\n'starkbank-ecdsa>=2.0.1'\n]\nreturn deps\n\n\ndir_path = os.path.abspath(os.path.dirname(__file__))\nreadme = io.open(os.path.join(dir_path, 'README.rst'), encoding='utf-8').read()\n\nsetup(\nname='sendgrid',\nversion=str(__version__),\nauthor='Elmer Thomas, Yamil Asusta',\nauthor_email='help@twilio.com',\nurl='https:\/\/github.com\/sendgrid\/sendgrid-python\/',\npackages=find_packages(exclude=[\"temp*.py\", \"test\"]),\ninclude_package_data=True,\nlicense='MIT',\ndescription='Twilio SendGrid library for Python',\nlong_description=readme,\ninstall_requires=getRequires(),\npython_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\nclassifiers=[\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n]\n)\n"
    },
    {
        "package_name": "sentencepiece-0.1.97",
        "file_list": "build_bundled.sh MANIFEST.in PKG-INFO README.md setup.cfg setup.py sentencepiece.i sentencepiece_model_pb2.py sentencepiece_pb2.py sentencepiece_wrap.cxx _version.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt botchan.txt sentencepiece_test.py test_ja_model.model test_model.model __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n# Copyright 2018 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.!\n\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext as _build_ext\nfrom setuptools.command.build_py import build_py as _build_py\nimport codecs\nimport string\nimport subprocess\nimport sys\nimport os\n\nsys.path.append(os.path.join('.', 'test'))\n\n\ndef long_description():\nwith codecs.open('README.md', 'r', 'utf-8') as f:\nlong_description = f.read()\nreturn long_description\n\n\nexec(open('src\/sentencepiece\/_version.py').read())\n\n\ndef run_pkg_config(section, pkg_config_path=None):\ntry:\ncmd = 'pkg-config sentencepiece --{}'.format(section)\nif pkg_config_path:\ncmd = 'env PKG_CONFIG_PATH={} {}'.format(pkg_config_path, cmd)\noutput = subprocess.check_output(cmd, shell=True)\nif sys.version_info >= (3, 0, 0):\noutput = output.decode('utf-8')\nexcept subprocess.CalledProcessError:\nsys.stderr.write('Failed to find sentencepiece pkg-config\\n')\nsys.exit(1)\nreturn output.strip().split()\n\n\ndef is_sentencepiece_installed():\ntry:\nsubprocess.check_call('pkg-config sentencepiece --libs', shell=True)\nreturn True\nexcept subprocess.CalledProcessError:\nreturn False\n\n\ndef get_cflags_and_libs(root):\ncflags = ['-std=c++17', '-I' + os.path.join(root, 'include')]\nlibs = []\nif os.path.exists(os.path.join(root, 'lib\/pkgconfig\/sentencepiece.pc')):\nlibs = [\nos.path.join(root, 'lib\/libsentencepiece.a'),\nos.path.join(root, 'lib\/libsentencepiece_train.a'),\n]\nelif os.path.exists(os.path.join(root, 'lib64\/pkgconfig\/sentencepiece.pc')):\nlibs = [\nos.path.join(root, 'lib64\/libsentencepiece.a'),\nos.path.join(root, 'lib64\/libsentencepiece_train.a'),\n]\nreturn cflags, libs\n\n\nclass build_ext(_build_ext):\n\"\"\"Override build_extension to run cmake.\"\"\"\n\ndef build_extension(self, ext):\ncflags, libs = get_cflags_and_libs('..\/build\/root')\nif len(libs) == 0:\ncflags, libs = get_cflags_and_libs('.\/bundled\/root')\n\nif len(libs) == 0:\nif is_sentencepiece_installed():\ncflags = cflags + run_pkg_config('cflags')\nlibs = run_pkg_config('libs')\nelse:\nsubprocess.check_call(['.\/build_bundled.sh', __version__])\ncflags, libs = get_cflags_and_libs('.\/bundled\/root')\n\n# Fix compile on some versions of Mac OSX\n# See: https:\/\/github.com\/neulab\/xnmt\/issues\/199\nif sys.platform == 'darwin':\ncflags.append('-mmacosx-version-min=10.9')\nelse:\ncflags.append('-Wl,-strip-all')\nlibs.append('-Wl,-strip-all')\nprint('## cflags={}'.format(' '.join(cflags)))\nprint('## libs={}'.format(' '.join(libs)))\next.extra_compile_args = cflags\next.extra_link_args = libs\n_build_ext.build_extension(self, ext)\n\n\nif os.name == 'nt':\n# Must pre-install sentencepice into bundled directory.\narch = 'win32'\nif sys.maxsize > 2**32:\narch = 'amd64'\nif os.path.exists('..\\\\build\\\\root_{}\\\\lib'.format(arch)):\ncflags = ['\/std:c++17', '\/MT', '\/I..\\\\build\\\\root_{}\\\\include'.format(arch)]\nlibs = [\n'..\\\\build\\\\root_{}\\\\lib\\\\sentencepiece.lib'.format(arch),\n'..\\\\build\\\\root_{}\\\\lib\\\\sentencepiece_train.lib'.format(arch)\n]\nelse:\ncflags = ['\/std:c++17', '\/MT', '\/I..\\\\build\\\\root\\\\include']\nlibs = [\n'..\\\\build\\\\root\\\\lib\\\\sentencepiece.lib',\n'..\\\\build\\\\root\\\\lib\\\\sentencepiece_train.lib'\n]\n\nSENTENCEPIECE_EXT = Extension(\n'sentencepiece._sentencepiece',\nsources=['src\/sentencepiece\/sentencepiece_wrap.cxx'],\nextra_compile_args=cflags,\nextra_link_args=libs)\ncmdclass = {}\nelse:\nSENTENCEPIECE_EXT = Extension(\n'sentencepiece._sentencepiece',\nsources=['src\/sentencepiece\/sentencepiece_wrap.cxx'])\ncmdclass = {'build_ext': build_ext}\n\nsetup(\nname='sentencepiece',\nauthor='Taku Kudo',\nauthor_email='taku@google.com',\ndescription='SentencePiece python wrapper',\nlong_description=long_description(),\nlong_description_content_type='text\/markdown',\nversion=__version__,\npackage_dir={'': 'src'},\nurl='https:\/\/github.com\/google\/sentencepiece',\nlicense='Apache',\nplatforms='Unix',\npy_modules=[\n'sentencepiece\/__init__', 'sentencepiece\/_version',\n'sentencepiece\/sentencepiece_model_pb2',\n'sentencepiece\/sentencepiece_pb2'\n],\next_modules=[SENTENCEPIECE_EXT],\ncmdclass=cmdclass,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable', 'Environment :: Console',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: Unix', 'Programming Language :: Python',\n'Topic :: Text Processing :: Linguistic',\n'Topic :: Software Development :: Libraries :: Python Modules'\n],\ntest_suite='sentencepiece_test.suite')\n"
    },
    {
        "package_name": "seqeval-1.2.2",
        "file_list": ".flake8 01-question.md 02-bug.md 03-install.md 04-request.md PULL_REQUEST_TEMPLATE.md ci.yml codeql-analysis.yml pip.yml .gitignore .travis.yml CODE_OF_CONDUCT.md CONTRIBUTING.md LICENSE Pipfile Pipfile.lock PKG-INFO README.md sequence_labeling.py v1.py __init__.py reporters.py scheme.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py conlleval.pl ground_truth.txt ground_truth_inv.txt test_metrics.py test_reporters.py test_scheme.py test_v1.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nimport io\nimport os\nimport sys\n\nfrom setuptools import find_packages, setup\n\n# Package meta-data.\nNAME = 'seqeval'\nDESCRIPTION = 'Testing framework for sequence labeling'\nURL = 'https:\/\/github.com\/chakki-works\/seqeval'\nEMAIL = 'hiroki.nakayama.py@gmail.com'\nAUTHOR = 'Hironsan'\nLICENSE = 'MIT'\n\nhere = os.path.abspath(os.path.dirname(__file__))\nwith io.open(os.path.join(here, 'README.md'), encoding='utf-8') as f:\nlong_description = '\\n' + f.read()\n\nif sys.argv[-1] == 'publish':\nos.system('python setup.py sdist bdist_wheel upload')\nsys.exit()\n\nrequired = ['numpy>=1.14.0', 'scikit-learn>=0.21.3']\n\nsetup(\nname=NAME,\nuse_scm_version=True,\nsetup_requires=['setuptools_scm'],\ndescription=DESCRIPTION,\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nauthor=AUTHOR,\nauthor_email=EMAIL,\nurl=URL,\npackages=find_packages(exclude=('tests',)),\ninstall_requires=required,\nextras_require={\n'cpu': [],\n'gpu': [],\n},\ninclude_package_data=True,\nlicense=LICENSE,\nclassifiers=[\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy'\n],\n)\n"
    },
    {
        "package_name": "setuptools-git-versioning-1.10.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst requirements-dev.txt requirements-doc.txt requirements-test.txt requirements.txt setup.cfg setup.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt setuptools_git_versioning.py",
        "setup.py": "import os\nfrom setuptools import setup, find_packages\nfrom setuptools_git_versioning import version_from_git\n\nHERE = os.path.dirname(os.path.abspath(__file__))\n\n\ndef parse_requirements(file_content):\nlines = file_content.splitlines()\nreturn [line.strip() for line in lines if line and not line.startswith(\"#\")]\n\n\nwith open(os.path.join(HERE, \"README.rst\")) as f:\nlong_description = f.read()\n\nwith open(os.path.join(HERE, \"requirements.txt\")) as f:\nrequirements = parse_requirements(f.read())\n\nsetup(\nname=\"setuptools-git-versioning\",\nversion=version_from_git(),\nauthor=\"dolfinus\",\nauthor_email=\"martinov.m.s.8@gmail.com\",\ndescription=\"Use git repo data for building a version number according PEP-440\",\nlicense=\"MIT\",\nlong_description=long_description,\nlong_description_content_type=\"text\/x-rst\",\nurl=\"https:\/\/setuptools-git-versioning.readthedocs.io\",\nkeywords=\"setuptools git version-control\",\npackages=find_packages(exclude=[\"docs\", \"tests\", \"docs.*\", \"tests.*\"]),\nclassifiers=[\n\"Framework :: Setuptools Plugin\",\n\"Intended Audience :: Developers\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n],\nproject_urls={\n\"Documentation\": \"https:\/\/setuptools-git-versioning.readthedocs.io\",\n\"Source\": \"https:\/\/github.com\/dolfinus\/setuptools-git-versioning\",\n\"CI\/CD\": \"https:\/\/github.com\/dolfinus\/setuptools-git-versioning\/actions\",\n\"Coverage\": \"https:\/\/app.codecov.io\/gh\/dolfinus\/setuptools-git-versioning\",\n\"Tracker\": \"https:\/\/github.com\/dolfinus\/setuptools-git-versioning\/issues\",\n},\npython_requires=\">=3.7\",\npy_modules=[\"setuptools_git_versioning\"],\ninstall_requires=requirements,\nsetup_requires=requirements,\nentry_points={\n\"distutils.setup_keywords\": [\n\"version_config = setuptools_git_versioning:parse_config\",\n\"setuptools_git_versioning = setuptools_git_versioning:parse_config\",\n],\n\"setuptools.finalize_distribution_options\": [\n\"setuptools_git_versioning = setuptools_git_versioning:infer_version\",\n],\n},\ninclude_package_data=True,\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "sgp4-2.21",
        "file_list": "SGP4.cpp SGP4.h wrapper.cpp LICENSE PKG-INFO setup.py api.py conveniences.py earth_gravity.py exporter.py ext.py functions.py io.py model.py omm.py propagation.py sample_omm.csv sample_omm.xml SGP4-VER.TLE tcppver.out tests.py wrapper.py wulfgar.py __init__.py",
        "setup.py": "import os\nimport sys\nfrom distutils.core import setup, Extension\n\nimport sgp4\ndescription, long_description = sgp4.__doc__.split('\\n', 1)\n\n# Force compilation on Travis CI + Python 3 to make sure it keeps working.\noptional = True\nif sys.version_info[0] != 2 and os.environ.get('TRAVIS') == 'true':\noptional = False\n\n# It is hard to write C extensions that support both Python 2 and 3, so\n# we opt here to support the acceleration only for Python 3.\next_modules = []\nif sys.version_info[0] == 3:\next_modules.append(Extension(\n'sgp4.vallado_cpp',\noptional=optional,\nsources=[\n'extension\/SGP4.cpp',\n'extension\/wrapper.cpp',\n],\n\n# TODO: can we safely figure out how to use a pair of options\n# like these, adapted to as many platforms as possible, to use\n# multiple processors when available?\n# extra_compile_args=['-fopenmp'],\n# extra_link_args=['-fopenmp'],\nextra_compile_args=['-ffloat-store'],\n))\n\n# Read the package's \"__version__\" without importing it.\npath = 'sgp4\/__init__.py'\nwith open(path, 'rb') as f:\ntext = f.read().decode('utf-8')\ntext = text.replace('-*- coding: utf-8 -*-', '') # for Python 2.7\nnamespace = {}\neval(compile(text, path, 'exec'), namespace)\n\nsetup(name = 'sgp4',\nversion = namespace['__version__'],\ndescription = description,\nlong_description = long_description,\nlicense = 'MIT',\nauthor = 'Brandon Rhodes',\nauthor_email = 'brandon@rhodesmill.org',\nurl = 'https:\/\/github.com\/brandon-rhodes\/python-sgp4',\nclassifiers = [\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Topic :: Scientific\/Engineering :: Astronomy',\n],\npackages = ['sgp4'],\npackage_data = {'sgp4': ['SGP4-VER.TLE', 'sample*', 'tcppver.out']},\next_modules = ext_modules,\n)\n"
    },
    {
        "package_name": "Shapely-1.8.2",
        "file_list": "CHANGES.txt CREDITS.txt design.rst index.rst manual.rst migration.rst project.rst LICENSE.txt PKG-INFO pyproject.toml README.rst setup.cfg setup.py affinity.py cga.py polylabel.py __init__.py coords.py ctypes_declarations.py errors.py dissolve.py geoms.py intersect.py __init__.py base.py collection.py conftest.py geo.py linestring.py multilinestring.py multipoint.py multipolygon.py point.py polygon.py proxy.py __init__.py geos.py impl.py iterops.py linref.py ops.py predicates.py prepared.py _speedups.pyx __init__.py strtree.py topology.py validation.py _vectorized.pyx __init__.py wkb.py wkt.py _buildcfg.py _geos.pxi __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt conftest.py test_affinity.py test_binascii_hex.txt test_box.py test_buffer.py test_cga.py test_clip_by_rect.py test_collection.py test_coords.py test_create_inconsistent_dimensionality.py test_default_impl.py test_delaunay.py test_delegated.py test_dlls.py test_doctests.py test_emptiness.py test_empty_polygons.py test_equality.py test_geointerface.py test_geometry_base.py test_geomseq.py test_geos_err_handler.py test_getitem.py test_hash.py test_invalid_geometries.py test_iterops.py test_linear_referencing.py test_linemerge.py test_linestring.py test_locale.py test_make_valid.py test_mapping.py test_minimum_clearance.py test_minimum_rotated_rectangle.py test_multi.py test_multilinestring.py test_multipoint.py test_multipolygon.py test_ndarrays.py test_nearest.py test_operations.py test_operators.py test_orient.py test_parallel_offset.py test_persist.py test_pickle.py test_point.py test_polygon.py test_polygonize.py test_polylabel.py test_predicates.py test_prepared.py test_products_z.py test_shape.py test_shared_paths.py test_singularity.py test_snap.py test_split.py test_strtree.py test_styles.py test_substring.py test_svg.py test_transform.py test_union.py test_validation.py test_vectorized.py test_voronoi_diagram.py test_wkb.py test_wkt.py test_xy.py threading_test.py unpickle-strtree.py __init__.py VERSION.txt markers.py requirements.py specifiers.py utils.py version.py _compat.py _structures.py __about__.py __init__.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n# Build or install Shapely distributions\n#\n# This script has two different uses.\n#\n# 1) Installing from a source distribution, whether via\n#\n# ``python setup.py install``\n#\n# after downloading a source distribution, or\n#\n# ``pip install shapely``\n#\n# on a platform for which pip cannot find a wheel. This will most\n# often be the case for Linux, since the project is not yet\n# publishing Linux wheels. This will never be the case on Windows and\n# rarely the case on OS X; both are wheels-first platforms.\n#\n# 2) Building distributions (source or wheel) from a repository. This\n# includes using Cython to generate C source for the speedups and\n# vectorize modules from Shapely's .pyx files.\n#\n# On import, Shapely loads a GEOS shared library. GEOS is a run time\n# requirement. Additionally, the speedups and vectorized C extension\n# modules need GEOS headers and libraries to be built. Shapely versions\n# >=1.3 require GEOS >= 3.3.\n#\n# For the first use case (see 1, above), we aim to treat GEOS as if it\n# were a Python requirement listed in ``install_requires``. That is, in\n# an environment with Shapely 1.2.x and GEOS 3.2, the command ``pip\n# install shapely >=1.3 --no-use-wheel`` (whether wheels are explicitly\n# opted against or are not published for the platform) should fail with\n# a warning and advice to upgrade GEOS to >=3.3.\n#\n# In case 1, the environment's GEOS version is determined by executing\n# the geos-config script. If the GEOS version returned by that script is\n# incompatible with the Shapely source distribution or no geos-config\n# script can be found, this setup script will fail.\n#\n# For the second use case (see 2, distribution building, above), we\n# allow the requirements to be loosened. If this script finds that the\n# environment variable NO_GEOS_CHECK is set, geos-config will not be\n# executed and no attempt will be made to enforce requirements as in the\n# second case.\n#\n# For both cases, a geos-config not in the environment's $PATH may be\n# used by setting the environment variable GEOS_CONFIG to the path to\n# a geos-config script.\n#\n# NB: within this setup scripts, software versions are evaluated according\n# to https:\/\/www.python.org\/dev\/peps\/pep-0440\/.\n\nimport errno\nimport glob\nimport itertools as it\nimport logging\nimport os\nimport platform\nimport re\nimport shutil\nimport subprocess\nimport sys\nfrom setuptools import setup\nfrom setuptools.extension import Extension\nfrom setuptools.command.build_ext import build_ext as distutils_build_ext\nfrom distutils.errors import CCompilerError, DistutilsExecError, \\\nDistutilsPlatformError\n\nfrom _vendor.packaging.version import Version\n\nlogging.basicConfig()\nlog = logging.getLogger(__file__)\n\n# python -W all setup.py ...\nif 'all' in sys.warnoptions:\nlog.level = logging.DEBUG\n\n\nclass GEOSConfig:\n\"\"\"Interface to config options from the `geos-config` utility\n\"\"\"\n\ndef __init__(self, cmd):\nself.cmd = cmd\n\ndef get(self, option):\ntry:\nstdout, stderr = subprocess.Popen(\n[self.cmd, option],\nstdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\nexcept OSError as ex:\n# e.g., [Errno 2] No such file or directory\nraise OSError(\"Could not find geos-config script\")\nif stderr and not stdout:\nraise ValueError(stderr.strip())\nresult = stdout.decode('ascii').strip()\nlog.debug('%s %s: %r', self.cmd, option, result)\nreturn result\n\ndef version(self):\nmatch = re.match(r'(\\d+)\\.(\\d+)\\.(\\d+)', self.get('--version').strip())\nreturn tuple(map(int, match.groups()))\n\n# Get the version from the shapely module.\nshapely_version = None\nwith open('shapely\/__init__.py', 'r') as fp:\nfor line in fp:\nif line.startswith(\"__version__\"):\nshapely_version = Version(\nline.split(\"=\")[1].strip().strip(\"\\\"'\"))\nbreak\n\nif not shapely_version:\nraise ValueError(\"Could not determine Shapely's version\")\n\n# Allow GEOS_CONFIG to be bypassed in favor of CFLAGS and LDFLAGS\n# vars set by build environment.\nif os.environ.get('NO_GEOS_CONFIG'):\ngeos_config = None\nelse:\ngeos_config = GEOSConfig(os.environ.get('GEOS_CONFIG', 'geos-config'))\n\n# Fail installation if the GEOS shared library does not meet the minimum\n# version. We ship it with Shapely for Windows, so no need to check on\n# that platform.\ngeos_version = None\nif geos_config and not os.environ.get('NO_GEOS_CHECK') or sys.platform == 'win32':\ntry:\nlog.info(\n\"Shapely >= 1.3 requires GEOS >= 3.3. \"\n\"Checking for GEOS version...\")\ngeos_version = geos_config.version()\nlog.info(\"Found GEOS version: %s\", geos_version)\nif (set(sys.argv).intersection(['install', 'build', 'build_ext']) and\nshapely_version >= Version(\"1.3\") and geos_version < (3, 3)):\nlog.critical(\n\"Shapely >= 1.3 requires GEOS >= 3.3. \"\n\"Install GEOS 3.3+ and reinstall Shapely.\")\nsys.exit(1)\nexcept OSError as exc:\nlog.warning(\n\"Failed to determine system's GEOS version: %s. \"\n\"Installation continuing. GEOS version will be \"\n\"checked on import of shapely.\", exc)\n\nwith open('VERSION.txt', 'w') as fp:\nfp.write(str(shapely_version))\n\nwith open('README.rst', 'r') as fp:\nreadme = fp.read()\n\nwith open('CREDITS.txt', 'r', encoding='utf-8') as fp:\ncredits = fp.read()\n\nwith open('CHANGES.txt', 'r') as fp:\nchanges = fp.read()\n\nlong_description = readme + '\\n\\n' + credits + '\\n\\n' + changes\n\nextra_reqs = {\n'test': ['pytest', 'pytest-cov'],\n'vectorized': ['numpy']}\nextra_reqs['all'] = list(it.chain.from_iterable(extra_reqs.values()))\n\n# Make a dict of setup arguments. Some items will be updated as\n# the script progresses.\nsetup_args = dict(\nname = 'Shapely',\nversion = str(shapely_version),\ndescription = 'Geometric objects, predicates, and operations',\nlicense = 'BSD',\nkeywords = 'geometry topology gis',\nauthor = 'Sean Gillies',\nauthor_email = 'sean.gillies@gmail.com',\nmaintainer = 'Sean Gillies',\nmaintainer_email = 'sean.gillies@gmail.com',\nurl = 'https:\/\/github.com\/shapely\/shapely',\nlong_description = long_description,\npackages = [\n'shapely',\n'shapely.geometry',\n'shapely.algorithms',\n'shapely.examples',\n'shapely.speedups',\n'shapely.vectorized',\n],\nclassifiers = [\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Topic :: Scientific\/Engineering :: GIS',\n],\ncmdclass = {},\npython_requires = '>=3.6',\nextras_require = extra_reqs,\npackage_data={\n'shapely': ['shapely\/_geos.pxi']},\ninclude_package_data=True\n)\n\n# Add DLLs for Windows.\nif sys.platform == 'win32':\ntry:\nos.mkdir('shapely\/DLLs')\nexcept OSError as ex:\nif ex.errno != errno.EEXIST:\nraise\nif '(AMD64)' in sys.version:\nfor dll in glob.glob('DLLs_AMD64_VC9\/*.dll'):\nshutil.copy(dll, 'shapely\/DLLs')\nelse:\nfor dll in glob.glob('DLLs_x86_VC9\/*.dll'):\nshutil.copy(dll, 'shapely\/DLLs')\nsetup_args['package_data']['shapely'].append('shapely\/DLLs\/*.dll')\n\n# Prepare build opts and args for the speedups extension module.\ninclude_dirs = []\nlibrary_dirs = []\nlibraries = []\nextra_link_args = []\n\n# If NO_GEOS_CONFIG is set in the environment, geos-config will not\n# be called and CFLAGS and LDFLAGS environment variables must be set\n# instead like\n#\n# CFLAGS=\"-I\/usr\/local\/include\" LDFLAGS=\"-L\/usr\/local\/lib -lgeos_c\"\n#\n# Or, equivalently:\n#\n# CFLAGS=\"$(geos-config --cflags)\" LDFLAGS=\"$(geos-config --clibs)\"\n\nif geos_version and geos_config:\n# Collect other options from GEOS configuration.\nfor item in geos_config.get('--cflags').split():\nif item.startswith(\"-I\"):\ninclude_dirs.extend(item[2:].split(\":\"))\nfor item in geos_config.get('--clibs').split():\nif item.startswith(\"-L\"):\nlibrary_dirs.extend(item[2:].split(\":\"))\nelif item.startswith(\"-l\"):\nlibraries.append(item[2:])\nelse:\n# e.g. -framework GEOS\nextra_link_args.append(item)\n\n\n# Optional compilation of speedups\n# setuptools stuff from Bob Ippolito's simplejson project\nif sys.platform == 'win32':\n# distutils.msvc9compiler can raise an IOError when failing to\n# find the compiler\next_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError,\nIOError)\nelse:\next_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError)\n\n\nclass BuildFailed(Exception):\npass\n\n\ndef construct_build_ext(build_ext):\nclass WrappedBuildExt(build_ext):\n# This class allows C extension building to fail.\n\ndef run(self):\ntry:\nbuild_ext.run(self)\nexcept DistutilsPlatformError as x:\nraise BuildFailed(x)\n\ndef build_extension(self, ext):\ntry:\nbuild_ext.build_extension(self, ext)\nexcept ext_errors as x:\nraise BuildFailed(x)\n\nreturn WrappedBuildExt\n\nif (platform.python_implementation() == 'PyPy'):\next_modules = []\nlibraries = []\n\n\npyx_file = \"shapely\/speedups\/_speedups.pyx\"\nc_file = \"shapely\/speedups\/_speedups.c\"\n\nforce_cython = False\n# Always regenerate for sdist or absent c file\nif 'sdist' in sys.argv or not os.path.exists(c_file):\nforce_cython = True\n# Also regenerate if pyx_file is outdated.\nelif os.path.exists(c_file):\nif os.path.getmtime(pyx_file) > os.path.getmtime(c_file):\nforce_cython = True\n\next_modules = [\nExtension(\"shapely.speedups._speedups\", [\"shapely\/speedups\/_speedups.c\"],\ninclude_dirs=include_dirs, library_dirs=library_dirs,\nlibraries=libraries, extra_link_args=extra_link_args)]\n\ncmd_classes = setup_args.setdefault('cmdclass', {})\n\ntry:\nimport numpy\nfrom Cython.Distutils import build_ext as cython_build_ext\nfrom distutils.extension import Extension as DistutilsExtension\n\nif 'build_ext' in setup_args['cmdclass']:\nraise ValueError('We need to put the Cython build_ext in '\n'cmd_classes, but it is already defined.')\nsetup_args['cmdclass']['build_ext'] = cython_build_ext\n\ninclude_dirs.append(numpy.get_include())\nlibraries.append(numpy.get_include())\n\next_modules.append(DistutilsExtension(\n\"shapely.vectorized._vectorized\",\nsources=[\"shapely\/vectorized\/_vectorized.pyx\"],\ninclude_dirs=include_dirs,\nlibrary_dirs=library_dirs,\nlibraries=libraries,\nextra_link_args=extra_link_args,))\n\nexcept ImportError:\nlog.info(\"Numpy or Cython not available, shapely.vectorized submodule \"\n\"not being built.\")\nforce_cython = False\n\ntry:\nif force_cython:\nlog.info(\"Updating C extension with Cython.\")\nsubprocess.check_call([\"cython\", \"shapely\/speedups\/_speedups.pyx\"])\nexcept (subprocess.CalledProcessError, OSError):\nlog.warning(\"Could not (re)create C extension with Cython.\")\nif force_cython:\nraise\n\nif not os.path.exists(c_file):\nlog.warning(\"speedup extension not found\")\n\ntry:\n# try building with speedups\nexisting_build_ext = setup_args['cmdclass'].\\\nget('build_ext', distutils_build_ext)\nsetup_args['cmdclass']['build_ext'] = \\\nconstruct_build_ext(existing_build_ext)\nsetup(ext_modules=ext_modules, **setup_args)\nexcept BuildFailed as ex:\nBUILD_EXT_WARNING = \"The C extension could not be compiled, \" \\\n\"speedups are not enabled.\"\nlog.warning(ex)\nlog.warning(BUILD_EXT_WARNING)\nlog.warning(\"Failure information, if any, is above.\")\nlog.warning(\"I'm retrying the build without the C extension now.\")\n\n# Remove any previously defined build_ext command class.\nif 'build_ext' in setup_args['cmdclass']:\ndel setup_args['cmdclass']['build_ext']\n\nif 'build_ext' in cmd_classes:\ndel cmd_classes['build_ext']\n\nsetup(**setup_args)\n\nlog.warning(BUILD_EXT_WARNING)\nlog.info(\"Plain-Python installation succeeded.\")\n"
    },
    {
        "package_name": "sharepy-2.0.0",
        "file_list": "LICENSE PKG-INFO README.md setup.cfg setup.py adfs.py base.py detect.py spol.py adfs-assertion.saml adfs-digest.saml adfs-token.saml spol-token.saml __init__.py xml.py __init__.py errors.py session.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup, find_packages\nfrom os import path\n\nDIR = path.abspath(path.dirname(__file__))\n\ndescription = \"\"\"SharePy will handle authentication for your SharePoint Online\/O365 site, allowing\nyou to make straightforward HTTP requests from Python. It extends the commonly used Requests module,\nmeaning that returned objects are familliar, easy to work with and well documented.\"\"\"\n\nwith open(path.join(DIR, '.\/README.md')) as f:\nlong_description = f.read()\n\nsetup(\nname='sharepy',\nversion='2.0.0',\ndescription='Simple SharePoint Online authentication for Python',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nkeywords='sharepoint online authentication',\nauthor='Jonathan Holvey',\nauthor_email='jonathan.holvey@outlook.com',\nurl='https:\/\/github.com\/JonathanHolvey\/sharepy',\nproject_urls={\n'Issues': 'https:\/\/github.com\/JonathanHolvey\/sharepy\/issues',\n},\nlicense='GPLv3',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Topic :: Internet',\n'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n'Programming Language :: Python :: 3',\n],\npackages=find_packages('.\/src'),\npackage_dir={'': '.\/src'},\npackage_data={'sharepy.auth.templates': ['*']},\npython_requires='>=3.6, <4',\ninstall_requires=['requests>=2,<3']\n)\n"
    },
    {
        "package_name": "shellcheck_py-0.8.0.4",
        "file_list": "LICENSE PKG-INFO README.md setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python3\nimport hashlib\nimport http\nimport io\nimport os.path\nimport platform\nimport stat\nimport sys\nimport tarfile\nimport urllib.request\nimport zipfile\nfrom distutils.command.build import build as orig_build\nfrom distutils.core import Command\nfrom typing import Tuple\n\nfrom setuptools import setup\nfrom setuptools.command.install import install as orig_install\n\nSHELLCHECK_VERSION = '0.8.0'\nPOSTFIX_SHA256 = {\n('linux', 'armv6hf'): (\n'linux.armv6hf.tar.xz',\n'17857c8a0a8f4001aa9638732991cbb6e85c4a410500b11e2e0a98d9858afca8',\n),\n('linux', 'aarch64'): (\n'linux.aarch64.tar.xz',\n'9f47bbff5624babfa712eb9d64ece14c6c46327122d0c54983f627ae3a30a4ac',\n),\n('linux', 'x86_64'): (\n'linux.x86_64.tar.xz',\n'ab6ee1b178f014d1b86d1e24da20d1139656c8b0ed34d2867fbb834dad02bf0a',\n),\n('darwin', 'x86_64'): (\n'darwin.x86_64.tar.xz',\n'e065d4afb2620cc8c1d420a9b3e6243c84ff1a693c1ff0e38f279c8f31e86634',\n),\n('win32', 'AMD64'): (\n'zip',\n'2a616cbb5b15aec8238f22c0d62dede1b6d155798adc45ff4d0206395a8a5833',\n),\n}\nPOSTFIX_SHA256[('cygwin', 'x86_64')] = POSTFIX_SHA256[('win32', 'AMD64')]\nPOSTFIX_SHA256[('darwin', 'arm64')] = POSTFIX_SHA256[('darwin', 'x86_64')]\nPOSTFIX_SHA256[('linux', 'armv7l')] = POSTFIX_SHA256[('linux', 'armv6hf')]\nPY_VERSION = '4'\n\n\ndef get_download_url() -> Tuple[str, str]:\npostfix, sha256 = POSTFIX_SHA256[(sys.platform, platform.machine())]\nurl = (\nf'https:\/\/github.com\/koalaman\/shellcheck\/releases\/download\/'\nf'v{SHELLCHECK_VERSION}\/shellcheck-v{SHELLCHECK_VERSION}.{postfix}'\n)\nreturn url, sha256\n\n\ndef download(url: str, sha256: str) -> bytes:\nwith urllib.request.urlopen(url) as resp:\ncode = resp.getcode()\nif code != http.HTTPStatus.OK:\nraise ValueError(f'HTTP failure. Code: {code}')\ndata = resp.read()\n\nchecksum = hashlib.sha256(data).hexdigest()\nif checksum != sha256:\nraise ValueError(f'sha256 mismatch, expected {sha256}, got {checksum}')\n\nreturn data\n\n\ndef extract(url: str, data: bytes) -> bytes:\nwith io.BytesIO(data) as bio:\nif '.tar.' in url:\nwith tarfile.open(fileobj=bio) as tarf:\nfor info in tarf.getmembers():\nif info.isfile() and info.name.endswith('shellcheck'):\nreturn tarf.extractfile(info).read()\nelif url.endswith('.zip'):\nwith zipfile.ZipFile(bio) as zipf:\nfor info in zipf.infolist():\nif info.filename.endswith('.exe'):\nreturn zipf.read(info.filename)\n\nraise AssertionError(f'unreachable {url}')\n\n\ndef save_executable(data: bytes, base_dir: str):\nexe = 'shellcheck' if sys.platform != 'win32' else 'shellcheck.exe'\noutput_path = os.path.join(base_dir, exe)\nos.makedirs(base_dir)\n\nwith open(output_path, 'wb') as fp:\nfp.write(data)\n\n# Mark as executable.\n# https:\/\/stackoverflow.com\/a\/14105527\nmode = os.stat(output_path).st_mode\nmode |= stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH\nos.chmod(output_path, mode)\n\n\nclass build(orig_build):\nsub_commands = orig_build.sub_commands + [('fetch_binaries', None)]\n\n\nclass install(orig_install):\nsub_commands = orig_install.sub_commands + [('install_shellcheck', None)]\n\n\nclass fetch_binaries(Command):\nbuild_temp = None\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\nself.set_undefined_options('build', ('build_temp', 'build_temp'))\n\ndef run(self):\n# save binary to self.build_temp\nurl, sha256 = get_download_url()\narchive = download(url, sha256)\ndata = extract(url, archive)\nsave_executable(data, self.build_temp)\n\n\nclass install_shellcheck(Command):\ndescription = 'install the shellcheck executable'\noutfiles = ()\nbuild_dir = install_dir = None\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\n# this initializes attributes based on other commands' attributes\nself.set_undefined_options('build', ('build_temp', 'build_dir'))\nself.set_undefined_options(\n'install', ('install_scripts', 'install_dir'),\n)\n\ndef run(self):\nself.outfiles = self.copy_tree(self.build_dir, self.install_dir)\n\ndef get_outputs(self):\nreturn self.outfiles\n\n\ncommand_overrides = {\n'install': install,\n'install_shellcheck': install_shellcheck,\n'build': build,\n'fetch_binaries': fetch_binaries,\n}\n\n\ntry:\nfrom wheel.bdist_wheel import bdist_wheel as orig_bdist_wheel\nexcept ImportError:\npass\nelse:\nclass bdist_wheel(orig_bdist_wheel):\ndef finalize_options(self):\norig_bdist_wheel.finalize_options(self)\n# Mark us as not a pure python package\nself.root_is_pure = False\n\ndef get_tag(self):\n_, _, plat = orig_bdist_wheel.get_tag(self)\n# We don't contain any python source, nor any python extensions\nreturn 'py2.py3', 'none', plat\n\ncommand_overrides['bdist_wheel'] = bdist_wheel\n\nsetup(version=f'{SHELLCHECK_VERSION}.{PY_VERSION}', cmdclass=command_overrides)\n"
    },
    {
        "package_name": "shellescape-3.8.1",
        "file_list": "LICENSE README.rst main.py settings.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py",
        "setup.py": "import os\nimport re\nimport sys\nfrom setuptools import setup, find_packages\n\n\ndef version_read():\nsettings_file = open(os.path.join(os.path.dirname(__file__), 'lib', 'shellescape', 'settings.py')).read()\nmajor_regex = r\"\"\"major_version\\s*?=\\s*?[\"']{1}(\\d+)[\"']{1}\"\"\"\nminor_regex = r\"\"\"minor_version\\s*?=\\s*?[\"']{1}(\\d+)[\"']{1}\"\"\"\npatch_regex = r\"\"\"patch_version\\s*?=\\s*?[\"']{1}(\\d+)[\"']{1}\"\"\"\nmajor_match = re.search(major_regex, settings_file)\nminor_match = re.search(minor_regex, settings_file)\npatch_match = re.search(patch_regex, settings_file)\nmajor_version = major_match.group(1)\nminor_version = minor_match.group(1)\npatch_version = patch_match.group(1)\nif len(major_version) == 0:\nmajor_version = 0\nif len(minor_version) == 0:\nminor_version = 0\nif len(patch_version) == 0:\npatch_version = 0\nreturn major_version + \".\" + minor_version + \".\" + patch_version\n\n\n# Use repository Markdown README.md for PyPI long description\ntry:\nwith open(\"README.md\", \"r\") as f:\nreadme = f.read()\nexcept IOError as readme_e:\nsys.stderr.write(\n\"[ERROR] setup.py: Failed to read the README.md file for the long description definition: {}\".format(\nstr(readme_e)\n)\n)\nraise readme_e\n\n\nsetup(\nname='shellescape',\nversion=version_read(),\ndescription='Shell escape a string to safely use it as a token in a shell command (backport of cPython shlex.quote for Python versions 2.x & < 3.3)',\nlong_description=readme,\nlong_description_content_type=\"text\/markdown\",\nurl='https:\/\/github.com\/chrissimpkins\/shellescape',\nlicense='MIT license',\nauthor='Christopher Simpkins',\nauthor_email='git.simpkins@gmail.com',\nplatforms=['any'],\npackages=find_packages(\"lib\"),\npackage_dir={'': 'lib'},\nkeywords='shell,quote,escape,backport,command line,command,subprocess',\ninclude_package_data=True,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Natural Language :: English',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 3',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: POSIX',\n'Operating System :: Unix',\n'Operating System :: Microsoft :: Windows'\n],\n)\n"
    },
    {
        "package_name": "shyaml-0.6.2",
        "file_list": "CHANGELOG.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt shyaml.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n##\n## You can download latest version of this file:\n## $ wget https:\/\/gist.github.com\/vaab\/e0eae9607ae806b662d4\/raw -O setup.py\n## $ chmod +x setup.py\n##\n## This setup.py is meant to be run along with ``.\/autogen.sh`` that\n## you can also find here: https:\/\/gist.github.com\/vaab\/9118087\/raw\n##\n\nfrom setuptools import setup\n\n##\n## Ensure that ``.\/autogen.sh`` is run prior to using ``setup.py``\n##\n\nif \"0.6.2\".startswith(\"%%\"):\nimport os.path\nimport sys\nWIN32 = sys.platform == 'win32'\nautogen = os.path.join(\".\", \"autogen.sh\")\nif not os.path.exists(autogen):\nsys.stderr.write(\n\"This source repository was not configured.\\n\"\n\"Please ensure ``.\/autogen.sh`` exists and that you are running \"\n\"``setup.py`` from the project root directory.\\n\")\nsys.exit(1)\nif os.path.exists('.autogen.sh.output'):\nsys.stderr.write(\n\"It seems that ``.\/autogen.sh`` couldn't do its job as expected.\\n\"\n\"Please try to launch ``.\/autogen.sh`` manualy, and send the \"\n\"results to the\\nmaintainer of this package.\\n\"\n\"Package will not be installed !\\n\")\nsys.exit(1)\nsys.stderr.write(\"Missing version information: \"\n\"running '.\/autogen.sh'...\\n\")\nimport os\nimport subprocess\nos.system('%s%s > .autogen.sh.output'\n% (\"bash \" if WIN32 else \"\",\nautogen))\ncmdline = sys.argv[:]\nif cmdline[0] == \"-c\":\n## for some reason, this is needed when launched from pip\ncmdline[0] = \"setup.py\"\nerrlvl = subprocess.call([\"python\", ] + cmdline)\nos.unlink(\".autogen.sh.output\")\nsys.exit(errlvl)\n\n\n##\n## Normal d2to1 setup\n##\n\nsetup(\nsetup_requires=['d2to1'],\nextras_require={'test': [\n\"docshtest==0.0.3\",\n]},\nd2to1=True\n)\n"
    },
    {
        "package_name": "sigmatools-0.21.0",
        "file_list": "ala-azure-activitylogs.yml ala-azure-ad_auditlogs.yml ala-azure-aws_cloudtrail.yml ala-suricata.yml ala.yml arcsight-zeek.yml arcsight.yml athena.yml carbon-black-eedr.yml carbon-black.yml chronicle.yml crowdstrike.yml datadog.yml devo-network.yml devo-web.yml devo-windows.yml ecs-auditbeat-modules-enabled.yml ecs-auditd.yml ecs-azure-activitylogs.yml ecs-azure-ad_auditlogs.yml ecs-azure-ad_signinlogs.yml ecs-cloudtrail.yml ecs-dns.yml ecs-filebeat.yml ecs-ms365_defender.yml ecs-okta.yml ecs-proxy.yml ecs-suricata.yml ecs-zeek-corelight.yml ecs-zeek-elastic-beats-implementation.yml elk-defaultindex-filebeat.yml elk-defaultindex-logstash.yml elk-defaultindex.yml elk-linux.yml elk-windows.yml elk-winlogbeat-sp.yml elk-winlogbeat.yml filebeat-defaultindex.yml fireeye-helix.yml fortisiem-windows.yml powershell.yml sysmon.yml windows-audit.yml windows-services.yml hawk.yml helk.yml humio.yml limacharlie.yml logpoint-windows.yml logrhythm_winevent.yml logstash-defaultindex.yml logstash-linux.yml logstash-windows.yml logstash-zeek-default-json.yml netwitness-epl.yml netwitness.yml powershell.yml qradar.yml qualys.yml splunk-windows-index.yml splunk-windows.yml splunk-zeek.yml stix-custom.yml stix-shifter.yml stix2.0.yml sumologic-cse.yml sumologic.yml thor.yml winlogbeat-modules-enabled.yml winlogbeat-old.yml winlogbeat.yml zircolite.yml LICENSE.LGPL.txt LONG_DESCRIPTION.md MANIFEST.in PKG-INFO README.md setup.cfg setup.py ala.py arcsight.py athena.py base.py carbonblack.py chronicle.py cim.py csharp.py data.py datadog.py devo.py discovery.py ee-outliers.py elasticsearch.py exceptions.py fireeye-helix.py fortisiem.py graylog.py hawk.py humio.py lacework.py limacharlie.py logiq.py logpoint.py mdatp.py misc.py mixins.py netwitness-epl.py netwitness.py opensearch.py powershell.py qradar.py qualys.py splunk.py splunkdm.py sql.py sqlite.py stix.py sumologic.py sysmon.py tools.py uberagent.py collection.py eventdict.py exceptions.py mapping.py configuration.py filter.py merge_sigma.py output.py base.py collection.py condition.py exceptions.py base.py discovery.py exceptions.py mixins.py transform.py type.py __init__.py rule.py sigma-similarity.py sigma-uuid.py sigma2attack.py sigma2genericsigma.py sigma2misp.py sigmac.py sigma_configurations_check.py sigma_similarity.py sigma_uuid.py tools.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "# Setup module for Sigma toolchain\n# derived from example at https:\/\/github.com\/pypa\/sampleproject\/blob\/master\/setup.py\nfrom setuptools import setup, find_packages\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\nfrom pathlib import Path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(path.join(here, 'LONG_DESCRIPTION.md'), encoding='utf-8') as f:\nlong_description = f.read()\n\nsetup(\nname='sigmatools',\nversion='0.21.0',\ndescription='Tools for the Generic Signature Format for SIEM Systems',\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl='https:\/\/github.com\/Neo23x0\/sigma',\nauthor='Sigma Project',\nauthor_email='thomas@patzke.org',\nlicense='LGPLv3',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Intended Audience :: Information Technology',\n'Intended Audience :: System Administrators',\n'Topic :: Security',\n'Topic :: Internet :: Log Analysis',\n'License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Environment :: Console',\n],\nkeywords='security monitoring siem logging signatures elasticsearch splunk ids sysmon',\npackages=[\n'sigma',\n'sigma.backends',\n'sigma.config',\n'sigma.parser',\n'sigma.parser.modifiers',\n],\npython_requires='~=3.8',\ninstall_requires=['PyYAML', 'pymisp', 'progressbar2', 'ruamel.yaml'],\nextras_require={\n'test': ['coverage', 'yamllint', 'attackcti'],\n},\ndata_files=[\n('etc\/sigma', [ str(p) for p in Path('config\/').glob('*.yml') ]),\n('etc\/sigma\/generic', [ str(p) for p in Path('config\/generic\/').glob('*.yml') ])],\nentry_points={\n'console_scripts': [\n'sigmac = sigma.sigmac:main',\n'merge_sigma = sigma.merge_sigma:main',\n'sigma2misp = sigma.sigma2misp:main',\n'sigma2attack = sigma.sigma2attack:main',\n'sigma_similarity = sigma.sigma_similarity:main',\n'sigma_uuid = sigma.sigma_uuid:main',\n],\n},\n)\n"
    },
    {
        "package_name": "signxml-2.9.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py exceptions.py xmldsig-core-schema.xsd xmldsig1-schema.xsd xmldsig11-schema.xsd __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt test.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom setuptools import setup, find_packages\n\nsetup(\nname='signxml',\nversion=\"2.9.0\",\nurl='https:\/\/github.com\/kislyuk\/signxml',\nlicense='Apache Software License',\nauthor='Andrey Kislyuk',\nauthor_email='kislyuk@gmail.com',\ndescription='Python XML Signature library',\nlong_description=open('README.rst').read(),\ninstall_requires=[\n# Dependencies are restricted by major version range according to semver.\n# By default, version minimums are set to be compatible with the oldest supported Ubuntu LTS (currently 18.04).\n'lxml >= 4.2.1, < 5',\n'eight >= 0.4.2, < 2',\n'cryptography >= 2.1.4',\n'pyOpenSSL >= 17.5.0, < 21',\n'certifi >= 2018.1.18'\n],\nextras_require={\n':python_version == \"2.7\"': [\n'enum34 >= 1.1.6, < 2',\n'ipaddress >= 1.0.17, < 2'\n]\n},\npackages=find_packages(exclude=['test']),\nplatforms=['MacOS X', 'Posix'],\npackage_data={'signxml': ['schemas\/*.xsd']},\nzip_safe=False,\ninclude_package_data=True,\ntest_suite='test',\nclassifiers=[\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: POSIX',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Topic :: Software Development :: Libraries :: Python Modules'\n]\n)\n"
    },
    {
        "package_name": "simple-ddl-parser-0.27.0",
        "file_list": "README.rst LICENSE PKG-INFO pyproject.toml setup.py cli.py ddl_parser.py bigquery.py hql.py mssql.py mysql.py oracle.py redshift.py snowflake.py spark_sql.py sql.py __init__.py common.py dialects.py parser.py parsetab.py test.py tokens.py utils.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['simple_ddl_parser', 'simple_ddl_parser.dialects', 'simple_ddl_parser.output']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['ply>=3.11,<4.0']\n\nentry_points = \\\n{'console_scripts': ['sdp = simple_ddl_parser.cli:main']}\n\nsetup_kwargs = {\n'name': 'simple-ddl-parser',\n'version': '0.27.0',\n'description': 'Simple DDL Parser to parse SQL & dialects like HQL, TSQL (MSSQL), Oracle, AWS Redshift, Snowflake, MySQL, PostgreSQL, etc ddl files to json\/python dict with full information about columns: types, defaults, primary keys, etc.; sequences, alters, custom types & other entities from ddl.',\n'long_description': '\\nSimple DDL Parser\\n-----------------\\n\\n\\n.. image:: https:\/\/img.shields.io\/pypi\/v\/simple-ddl-parser\\n :target: https:\/\/img.shields.io\/pypi\/v\/simple-ddl-parser\\n :alt: badge1\\n \\n.. image:: https:\/\/img.shields.io\/pypi\/l\/simple-ddl-parser\\n :target: https:\/\/img.shields.io\/pypi\/l\/simple-ddl-parser\\n :alt: badge2\\n \\n.. image:: https:\/\/img.shields.io\/pypi\/pyversions\/simple-ddl-parser\\n :target: https:\/\/img.shields.io\/pypi\/pyversions\/simple-ddl-parser\\n :alt: badge3\\n \\n.. image:: https:\/\/github.com\/xnuinside\/simple-ddl-parser\/actions\/workflows\/main.yml\/badge.svg\\n :target: https:\/\/github.com\/xnuinside\/simple-ddl-parser\/actions\/workflows\/main.yml\/badge.svg\\n :alt: workflow\\n\\n\\nBuild with ply (lex & yacc in python). A lot of samples in \\'tests\/.\\n\\nIs it Stable?\\n^^^^^^^^^^^^^\\n\\nYes, library already has about 7000+ downloads per day - https:\/\/pypistats.org\/packages\/simple-ddl-parser..\\n\\nAs maintainer, I guarantee that any backward incompatible changes will not be done in patch or minor version. Only additionals & new features.\\n\\nHowever, in process of adding support for new statements & features I see that output can be structured more optimal way and I hope to release version ``1.0.*`` with more struct output result. But, it will not be soon, first of all, I want to add support for so much statements as I can. So I don\\'t think make sense to expect version 1.0.* before, for example, version ``0.26.0`` :)\\n\\nHow does it work?\\n^^^^^^^^^^^^^^^^^\\n\\nParser supports: \\n\\n\\n* SQL\\n* HQL (Hive)\\n* MSSQL dialec\\n* Oracle dialect\\n* MySQL dialect\\n* PostgreSQL dialect\\n* BigQuery\\n* Redshift\\n* Snowflake\\n* SparkSQL\\n\\nYou can check dialects sections after ``Supported Statements`` section to get more information that statements from dialects already supported by parser. If you need to add more statements or new dialects - feel free to open the issue. \\n\\nFeel free to open Issue with DDL sample\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n**If you need some statement, that not supported by parser yet**\\\\ : please provide DDL example & information about that is it SQL dialect or DB.\\n\\nTypes that are used in your DB does not matter, so parser must also work successfuly to any DDL for SQL DB. Parser is NOT case sensitive, it did not expect that all queries will be in upper case or lower case. So you can write statements like this:\\n\\n.. code-block:: sql\\n\\n\\n Alter Table Persons ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City=\\'Sandnes\\');\\n\\nIt will be parsed as is without errors.\\n\\nIf you have samples that cause an error - please open the issue (but don\\'t forget to add ddl example), I will be glad to fix it.\\n\\nA lot of statements and output result you can find in tests on the github - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/tree\/main\/tests .\\n\\nHow to install\\n^^^^^^^^^^^^^^\\n\\n.. code-block:: bash\\n\\n\\n pip install simple-ddl-parser\\n\\nHow to use\\n----------\\n\\nExtract additional information from HQL (& other dialects)\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\nIn some dialects like HQL there is a lot of additional information about table like, fore example, is it external table, STORED AS, location & etc. This propertie will be always empty in \\'classic\\' SQL DB like PostgreSQL or MySQL and this is the reason, why by default this information are \\'hidden\\'.\\nAlso some fields hidden in HQL, because they are simple not exists in HIVE, for example \\'deferrable_initially\\'\\nTo get this \\'hql\\' specific details about table in output please use \\'output_mode\\' argument in run() method.\\n\\nexample:\\n\\n.. code-block:: python\\n\\n\\n ddl = \"\"\"\\n CREATE TABLE IF NOT EXISTS default.salesorderdetail(\\n SalesOrderID int,\\n ProductID int,\\n OrderQty int,\\n LineTotal decimal\\n )\\n PARTITIONED BY (batch_id int, batch_id2 string, batch_32 some_type)\\n LOCATION \\'s3:\/\/datalake\/table_name\/v1\\'\\n ROW FORMAT DELIMITED\\n FIELDS TERMINATED BY \\',\\'\\n COLLECTION ITEMS TERMINATED BY \\'\\\\002\\'\\n MAP KEYS TERMINATED BY \\'\\\\003\\'\\n STORED AS TEXTFILE\\n \"\"\"\\n\\n result = DDLParser(ddl).run(output_mode=\"hql\")\\n print(result)\\n\\nAnd you will get output with additional keys \\'stored_as\\', \\'location\\', \\'external\\', etc.\\n\\n.. code-block:: python\\n\\n\\n # additional keys examples\\n {\\n ...,\\n \\'location\\': \"\\'s3:\/\/datalake\/table_name\/v1\\'\",\\n \\'map_keys_terminated_by\\': \"\\'\\\\\\\\003\\'\",\\n \\'partitioned_by\\': [{\\'name\\': \\'batch_id\\', \\'size\\': None, \\'type\\': \\'int\\'},\\n {\\'name\\': \\'batch_id2\\', \\'size\\': None, \\'type\\': \\'string\\'},\\n {\\'name\\': \\'batch_32\\', \\'size\\': None, \\'type\\': \\'some_type\\'}],\\n \\'primary_key\\': [],\\n \\'row_format\\': \\'DELIMITED\\',\\n \\'schema\\': \\'default\\',\\n \\'stored_as\\': \\'TEXTFILE\\',\\n ... \\n }\\n\\nIf you run parser with command line add flag \\'-o=hql\\' or \\'--output-mode=hql\\' to get the same result.\\n\\nPossible output_modes: [\"mssql\", \"mysql\", \"oracle\", \"hql\", \"sql\", \"redshift\", \"snowflake\"]\\n\\nFrom python code\\n^^^^^^^^^^^^^^^^\\n\\n.. code-block:: python\\n\\n from simple_ddl_parser import DDLParser\\n\\n\\n parse_results = DDLParser(\"\"\"create table dev.data_sync_history(\\n data_sync_id bigint not null,\\n sync_count bigint not null,\\n sync_mark timestamp not null,\\n sync_start timestamp not null,\\n sync_end timestamp not null,\\n message varchar(2000) null,\\n primary key (data_sync_id, sync_start)\\n ); \"\"\").run()\\n\\n print(parse_results)\\n\\nTo parse from file\\n^^^^^^^^^^^^^^^^^^\\n\\n.. code-block:: python\\n\\n\\n from simple_ddl_parser import parse_from_file\\n\\n result = parse_from_file(\\'tests\/sql\/test_one_statement.sql\\')\\n print(result)\\n\\nFrom command line\\n^^^^^^^^^^^^^^^^^\\n\\nsimple-ddl-parser is installed to environment as command **sdp**\\n\\n.. code-block:: bash\\n\\n\\n sdp path_to_ddl_file\\n\\n # for example:\\n\\n sdp tests\/sql\/test_two_tables.sql\\n\\nYou will see the output in **schemas** folder in file with name **test_two_tables_schema.json**\\n\\nIf you want to have also output in console - use **-v** flag for verbose.\\n\\n.. code-block:: bash\\n\\n\\n sdp tests\/sql\/test_two_tables.sql -v\\n\\nIf you don\\'t want to dump schema in file and just print result to the console, use **--no-dump** flag:\\n\\n.. code-block:: bash\\n\\n\\n sdp tests\/sql\/test_two_tables.sql --no-dump\\n\\nYou can provide target path where you want to dump result with argument **-t**\\\\ , **--target**\\\\ :\\n\\n.. code-block:: bash\\n\\n\\n sdp tests\/sql\/test_two_tables.sql -t dump_results\/\\n\\nGet Output in JSON\\n^^^^^^^^^^^^^^^^^^\\n\\nIf you want to get output in JSON in stdout you can use argument **json_dump=True** in method **.run()** for this\\n\\n.. code-block:: python\\n\\n from simple_ddl_parser import DDLParser\\n\\n\\n parse_results = DDLParser(\"\"\"create table dev.data_sync_history(\\n data_sync_id bigint not null,\\n sync_count bigint not null,\\n ); \"\"\").run(json_dump=True)\\n\\n print(parse_results)\\n\\nOutput will be:\\n\\n.. code-block:: json\\n\\n [{\"columns\": [{\"name\": \"data_sync_id\", \"type\": \"bigint\", \"size\": null, \"references\": null, \"unique\": false, \"nullable\": false, \"default\": null, \"check\": null}, {\"name\": \"sync_count\", \"type\": \"bigint\", \"size\": null, \"references\": null, \"unique\": false, \"nullable\": false, \"default\": null, \"check\": null}], \"primary_key\": [], \"alter\": {}, \"checks\": [], \"index\": [], \"partitioned_by\": [], \"tablespace\": null, \"schema\": \"dev\", \"table_name\": \"data_sync_history\"}]\\n\\nMore details\\n^^^^^^^^^^^^\\n\\n``DDLParser(ddl).run()``\\n.run() method contains several arguments, that impact changing output result. As you can saw upper exists argument ``output_mode`` that allow you to set dialect and get more fields in output relative to chosen dialect, for example \\'hql\\'. Possible output_modes: [\"mssql\", \"mysql\", \"oracle\", \"hql\", \"sql\"]\\n\\nAlso in .run() method exists argument ``group_by_type`` (by default: False). By default output of parser looks like a List with Dicts where each dict == one entitiy from ddl (table, sequence, type, etc). And to understand that is current entity you need to check Dict like: if \\'table_name\\' in dict - this is a table, if \\'type_name\\' - this is a type & etc.\\n\\nTo make work little bit easy you can set group_by_type=True and you will get output already sorted by types, like:\\n\\n.. code-block:: python\\n\\n\\n { \\n \\'tables\\': [all_pasrsed_tables], \\n \\'sequences\\': [all_pasrsed_sequences], \\n \\'types\\': [all_pasrsed_types], \\n \\'domains\\': [all_pasrsed_domains],\\n ...\\n }\\n\\nFor example:\\n\\n.. code-block:: python\\n\\n\\n ddl = \"\"\"\\n CREATE TYPE \"schema--notification\".\"ContentType\" AS\\n ENUM (\\'TEXT\\',\\'MARKDOWN\\',\\'HTML\\');\\n CREATE TABLE \"schema--notification\".\"notification\" (\\n content_type \"schema--notification\".\"ContentType\"\\n );\\n CREATE SEQUENCE dev.incremental_ids\\n INCREMENT 10\\n START 0\\n MINVALUE 0\\n MAXVALUE 9223372036854775807\\n CACHE 1;\\n \"\"\"\\n\\n result = DDLParser(ddl).run(group_by_type=True)\\n\\n # result will be:\\n\\n {\\'sequences\\': [{\\'cache\\': 1,\\n \\'increment\\': 10,\\n \\'maxvalue\\': 9223372036854775807,\\n \\'minvalue\\': 0,\\n \\'schema\\': \\'dev\\',\\n \\'sequence_name\\': \\'incremental_ids\\',\\n \\'start\\': 0}],\\n \\'tables\\': [{\\'alter\\': {},\\n \\'checks\\': [],\\n \\'columns\\': [{\\'check\\': None,\\n \\'default\\': None,\\n \\'name\\': \\'content_type\\',\\n \\'nullable\\': True,\\n \\'references\\': None,\\n \\'size\\': None,\\n \\'type\\': \\'\"schema--notification\".\"ContentType\"\\',\\n \\'unique\\': False}],\\n \\'index\\': [],\\n \\'partitioned_by\\': [],\\n \\'primary_key\\': [],\\n \\'schema\\': \\'\"schema--notification\"\\',\\n \\'table_name\\': \\'\"notification\"\\'}],\\n \\'types\\': [{\\'base_type\\': \\'ENUM\\',\\n \\'properties\\': {\\'values\\': [\"\\'TEXT\\'\", \"\\'MARKDOWN\\'\", \"\\'HTML\\'\"]},\\n \\'schema\\': \\'\"schema--notification\"\\',\\n \\'type_name\\': \\'\"ContentType\"\\'}]}\\n\\nALTER statements\\n^^^^^^^^^^^^^^^^\\n\\nRight now added support only for ALTER statements with FOREIGEIN key\\n\\nFor example, if in your ddl after table defenitions (create table statements) you have ALTER table statements like this:\\n\\n.. code-block:: sql\\n\\n\\n ALTER TABLE \"material_attachments\" ADD FOREIGN KEY (\"material_id\", \"material_title\") REFERENCES \"materials\" (\"id\", \"title\");\\n\\nThis statements will be parsed and information about them putted inside \\'alter\\' key in table\\'s dict.\\nFor example, please check alter statement tests - **tests\/test_alter_statements.py**\\n\\nMore examples & tests\\n^^^^^^^^^^^^^^^^^^^^^\\n\\nYou can find in **tests\/** folder.\\n\\nDump result in json\\n^^^^^^^^^^^^^^^^^^^\\n\\nTo dump result in json use argument .run(dump=True)\\n\\nYou also can provide a path where you want to have a dumps with schema with argument .run(dump_path=\\'folder_that_use_for_dumps\/\\')\\n\\nRaise error if DDL cannot be parsed by Parser\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\nBy default Parser does not raise the error if some statement cannot be parsed - and just skip & produce empty output.\\n\\nTo change this behavior you can pass \\'silent=False\\' argumen to main parser class, like:\\n\\n.. code-block::\\n\\n DDLParser(.., silent=False)\\n\\n\\nNormalize names\\n^^^^^^^^^^^^^^^\\n\\nUse DDLParser(.., normalize_names=True)flag that change output of parser:\\nIf flag is True (default \\'False\\') then all identifiers will be returned without \\'[\\', \\'\"\\' and other delimeters that used in different SQL dialects to separate custom names from reserverd words & statements.\\nFor example, if flag set \\'True\\' and you pass this input: \\n\\nCREATE TABLE [dbo].\\\\ `TO_Requests <[Request_ID] [int] IDENTITY(1,1>`_ NOT NULL,\\n [user_id] [int]\\n\\nIn output you will have names like \\'dbo\\' and \\'TO_Requests\\', not \\'[dbo]\\' and \\'[TO_Requests]\\'.\\n\\nSupported Statements\\n--------------------\\n\\n\\n* \\n CREATE [OR REPLACE] TABLE [ IF NOT EXISTS ] + columns defenition, columns attributes: column name + type + type size(for example, varchar(255)), UNIQUE, PRIMARY KEY, DEFAULT, CHECK, NULL\/NOT NULL, REFERENCES, ON DELETE, ON UPDATE, NOT DEFERRABLE, DEFERRABLE INITIALLY, GENERATED ALWAYS, STORED, COLLATE\\n\\n* \\n STATEMENTS: PRIMARY KEY, CHECK, FOREIGN KEY in table defenitions (in create table();)\\n\\n* \\n ALTER TABLE STATEMENTS: ADD CHECK (with CONSTRAINT), ADD FOREIGN KEY (with CONSTRAINT), ADD UNIQUE, ADD DEFAULT FOR, ALTER TABLE ONLY, ALTER TABLE IF EXISTS; ALTER .. PRIMARY KEY; ALTER .. USING INDEX TABLESPACE\\n\\n* \\n PARTITION BY statement\\n\\n* \\n CREATE SEQUENCE with words: INCREMENT [BY], START [WITH], MINVALUE, MAXVALUE, CACHE\\n\\n* \\n CREATE TYPE statement: AS TABLE, AS ENUM, AS OBJECT, INTERNALLENGTH, INPUT, OUTPUT\\n\\n* \\n LIKE statement (in this and only in this case to output will be added \\'like\\' keyword with information about table from that we did like - \\'like\\': {\\'schema\\': None, \\'table_name\\': \\'Old_Users\\'}).\\n\\n* \\n TABLESPACE statement\\n\\n* \\n COMMENT ON statement\\n\\n* \\n CREATE SCHEMA [IF NOT EXISTS] ... [AUTHORIZATION] ...\\n\\n* \\n CREATE DOMAIN [AS]\\n\\n* \\n CREATE [SMALLFILE | BIGFILE] [TEMPORARY] TABLESPACE statement\\n\\n* \\n CREATE DATABASE + Properties parsing\\n\\nSparkSQL Dialect statements\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n\\n* USING\\n\\nHQL Dialect statements\\n^^^^^^^^^^^^^^^^^^^^^^\\n\\n\\n* PARTITIONED BY statement\\n* ROW FORMAT, ROW FORMAT SERDE\\n* WITH SERDEPROPERTIES (\"input.regex\" = \"..some regex..\")\\n* STORED AS (AVRO, PARQUET, etc), STORED AS INPUTFORMAT, OUTPUTFORMAT\\n* COMMENT\\n* LOCATION\\n* FIELDS TERMINATED BY, LINES TERMINATED BY, COLLECTION ITEMS TERMINATED BY, MAP KEYS TERMINATED BY\\n* TBLPROPERTIES (\\'parquet.compression\\'=\\'SNAPPY\\' & etc.)\\n* SKEWED BY\\n* CLUSTERED BY \\n\\nMySQL\\n^^^^^\\n\\n\\n* ON UPDATE in column without reference \\n\\nMSSQL\\n~~~~~\\n\\n\\n* CONSTRAINT [CLUSTERED]... PRIMARY KEY\\n* CONSTRAINT ... WITH statement\\n* PERIOD FOR SYSTEM_TIME in CREATE TABLE statement\\n* ON [PRIMARY] after CREATE TABLE statement (sample in test files test_mssql_specific.py)\\n* WITH statement for TABLE properties\\n* TEXTIMAGE_ON statement\\n* DEFAULT NEXT VALUE FOR in COLUMN DEFAULT\\n\\nMSSQL \/ MySQL\/ Oracle\\n^^^^^^^^^^^^^^^^^^^^^\\n\\n\\n* type IDENTITY statement\\n* FOREIGN KEY REFERENCES statement\\n* \\'max\\' specifier in column size\\n* CONSTRAINT ... UNIQUE, CONSTRAINT ... CHECK, CONSTRAINT ... FOREIGN KEY, CONSTRAINT ... PRIMARY KEY\\n* CREATE CLUSTERED INDEX\\n* CREATE TABLE (...) ORGANIZATION INDEX \\n\\nOracle\\n^^^^^^\\n\\n\\n* ENCRYPT column property [+ NO SALT, SALT, USING]\\n* STORAGE column property\\n\\nAWS Redshift Dialect statements\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n\\n* ENCODE column property\\n* SORTKEY, DISTSTYLE, DISTKEY, ENCODE table properties\\n* \\n CREATE TEMP \/ TEMPORARY TABLE\\n\\n* \\n syntax like with LIKE statement:\\n\\n ``create temp table tempevent(like event);``\\n\\nSnowflake Dialect statements\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n\\n* CREATE .. CLONE statements for table, database and schema\\n* CREATE TABLE [or REPLACE] [ TRANSIET | TEMPORARY ] .. CLUSTER BY ..\\n* CONSTRAINT .. [NOT] ENFORCED \\n* COMMENT = in CREATE TABLE & CREATE SCHEMA statements\\n\\nBigQuery\\n^^^^^^^^\\n\\n\\n* OPTION in CREATE SCHEMA statement\\n* OPTION in CREATE TABLE statement\\n* OPTION in column defenition statement\\n\\nParser settings\\n^^^^^^^^^^^^^^^\\n\\nLogging\\n~~~~~~~\\n\\n\\n#. Logging to file\\n\\nTo get logging output to file you should provide to Parser \\'log_file\\' argument with path or file name:\\n\\n.. code-block:: console\\n\\n\\n DDLParser(ddl, log_file=\\'parser221.log\\').run(group_by_type=True)\\n\\n\\n#. Logging level\\n\\nTo set logging level you should provide argument \\'log_level\\'\\n\\n.. code-block:: console\\n\\n\\n DDLParser(ddl, log_level=logging.INFO).run(group_by_type=True)\\n\\nTODO in next Releases (if you don\\'t see feature that you need - open the issue)\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n\\n\\n\\n#. Add support for ALTER TABLE ... ADD COLUMN\\n#. Add more support for CREATE type IS TABLE (example: CREATE OR REPLACE TYPE budget_tbl_typ IS TABLE OF NUMBER(8,2);\\n#. Add support (ignore correctly) ALTER TABLE ... DROP CONSTRAINT ..., ALTER TABLE ... DROP INDEX ...\\n#. Change output for CHECKS -> \\'checks\\': [{\"column_name\": str, \"operator\": =\\n ..\\n\\n =|<|>|<=..., \"value\": value}]\\n\\n\\n#. Add support for ALTER TABLE ... ADD INDEX \\n\\nnon-feature todo\\n----------------\\n\\n\\n#. Provide API to get result as Python Object\\n#. Add online demo (UI) to parse ddl\\n\\nThanks for involving & contributions\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\nBig thanks for the involving & contribution with test cases with DDL samples & opening issues goes to:\\n\\n\\n* https:\/\/github.com\/kukigai , \\n* https:\/\/github.com\/Awalkman90 ,\\n* https:\/\/github.com\/geob3d\\n\\nfor help with debugging & testing support for BigQuery dialect DDLs:\\n\\n\\n* https:\/\/github.com\/ankitdata ,\\n* https:\/\/github.com\/kalyan939\\n\\nfor contributions in parser:\\nhttps:\/\/github.com\/swiatek25 \\n\\nChangelog\\n---------\\n\\n**v0.27.0**\\n\\nFixes:\\n\\n\\n#. Fixed parsing CHECKS with IN statement - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/150\\n#. @# symbols added to ID token - (partialy) https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/146\\n\\nImprovements:\\n\\n\\n#. Added support for \\'*\\' in size column (ORACLE dialect) - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/151\\n#. Added arg \\'debug\\' to parser, works same way as \\'silent\\' - to get more clear error output. \\n\\nNew features:\\n\\n\\n#. Added support for ORACLE \\'ORGANIZATION INDEX\\' \\n#. Added support for SparkSQL Partition by with procedure call - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/154\\n#. Added support for DEFAULT CHARSET statement MySQL - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/153\\n\\n**v0.26.5**\\n\\nFixes:\\n\\n\\n#. Parsetab included in builds.\\n#. Added additional argumen log_file=\\'path_to_file\\', to enable logging to file with providen name.\\n\\n**v0.26.4**\\n\\n\\n#. Bugfix for (support CREATE OR REPLACE with additional keys like transient\/temporary): https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/133\\n\\n**v0.26.3**\\n\\nImprovements:\\n\\n\\n#. Added support for OR REPLACE in CREATE TABLE: https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/131\\n#. Added support for AUTO INCREMENT in column:https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/130\\n\\n**v0.26.2**\\n\\nFixes:\\n\\n\\n#. Fixed a huge bug for incorrect parsing lines with \\'USE\\' & \\'GO\\' strings inside.\\n#. Fixed parsing for CREATE SCHEMA for Snowlake & Oracle DDLs\\n\\nImprovements:\\n\\n\\n#. Added COMMENT statement for CREATE TABLE ddl (for SNOWFLAKE dialect support)\\n#. Added COMMENT statement for CREATE SCHEMA ddl (for SNOWFLAKE dialect support)\\n\\n**v0.26.1**\\n\\nFixes:\\n\\n\\n#. support Multiple SERDEPROPERTIES - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/126\\n#. Fix for issue with LOCATION and TBLPROPERTIES clauses in CREATE TABLE LIKE - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/125\\n#. LOCATION now works correctly with double quote strings\\n\\n**v0.26.0**\\nImprovements:\\n\\n\\n#. Added more explicit debug message on Statement errors - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/116\\n#. Added support for \"USING INDEX TABLESPACE\" statement in ALTER - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/119\\n#. Added support for IN statements in CHECKS - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/121\\n\\nNew features:\\n\\n\\n#. Support SparkSQL USING - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/117\\n Updates initiated by ticket https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/120:\\n#. In Parser you can use argument json_dump=True in method .run() if you want get result in JSON format. \\n\\n\\n* README updated\\n\\nFixes:\\n\\n\\n#. Added support for PARTITION BY one column without type\\n#. Alter table add constraint PRIMARY KEY - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/119\\n#. Fix for paring SET statement - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/pull\/122\\n#. Fix for disappeared colums without properties - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/123\\n\\n**v0.25.0**\\n\\nFixes:\\n------\\n\\n\\n#. Fix for issue with \\'at time zone\\' https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/112\\n\\nNew features:\\n-------------\\n\\n\\n#. Added flag to raise errors if parser cannot parse statement DDLParser(.., silent=False) - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/109\\n#. Added flag to DDLParser(.., normalize_names=True) that change output of parser:\\n if flag is True (default \\'False\\') then all identifiers will be returned without \\'[\\', \\'\"\\' and other delimeters that used in different SQL dialects to separate custom names from reserverd words & statements.\\n For example, if flag set \\'True\\' and you pass this input: \\n\\nCREATE TABLE [dbo].\\\\ `TO_Requests <[Request_ID] [int] IDENTITY(1,1>`_ NOT NULL,\\n [user_id] [int]\\n\\nIn output you will have names like \\'dbo\\' and \\'TO_Requests\\', not \\'[dbo]\\' and \\'[TO_Requests]\\'.\\n\\n**v0.24.2**\\n\\nFixes:\\n------\\n\\n\\n#. Fix for the issue: https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/108 (reserved words can be used as table name after \\'.\\')\\n\\n**v0.24.1**\\n\\nFixes:\\n------\\n\\nHQL:\\n^^^^\\n\\n\\n#. fields_terminated_by now parses , as \"\\',\\'\", not as \\'\\' previously\\n\\nCommon:\\n^^^^^^^\\n\\n\\n#. To output added \\'if_not_exists\\' field in result to get availability 1-to-1 re-create ddl by metadata. \\n\\n**v0.24.0**\\n\\nFixes:\\n------\\n\\nHQL:\\n^^^^\\n\\n\\n#. More then 2 tblproperties now are parsed correctly https:\/\/github.com\/xnuinside\/simple-ddl-parser\/pull\/104 \\n\\nCommon:\\n^^^^^^^\\n\\n\\n#. \\'set\\' in lower case now also parsed validly.\\n#. Now names like \\'schema\\', \\'database\\', \\'table\\' can be used as names in CREATE DABASE | SCHEMA | TABLESPACE | DOMAIN | TYPE statements and after INDEX and CONSTRAINT. \\n#. Creation of empty tables also parsed correctly (like CREATE Table table;).\\n\\nNew Statements Support:\\n-----------------------\\n\\nHQL:\\n^^^^\\n\\n\\n#. Added support for CLUSTERED BY - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/103\\n#. Added support for INTO ... BUCKETS\\n#. CREATE REMOTE DATABASE | SCHEMA\\n\\n**v0.23.0**\\n\\nBig refactoring: less code complexity & increase code coverage. Radon added to pre-commit hooks.\\n\\nFixes:\\n^^^^^^\\n\\n\\n#. Fix for issue with ALTER UNIQUE - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/101 \\n\\nNew Features\\n^^^^^^^^^^^^\\n\\n\\n#. SQL Comments string from DDL now parsed to \"comments\" key in output.\\n\\nPostgreSQL:\\n\\n\\n#. Added support for ALTER TABLE ONLY | ALTER TABLE IF EXISTS\\n\\n**v0.22.5**\\n\\nFixes:\\n^^^^^^\\n\\n\\n#. Fix for issue with \\'<\\' - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/89\\n\\n**v0.22.4**\\n\\nFixes:\\n^^^^^^\\n\\nBigQuery:\\n^^^^^^^^^\\n\\n\\n#. Fixed issue with parsing schemas with project in name.\\n#. Added support for multiple OPTION() statements\\n\\n**v0.22.3**\\n\\nFixes:\\n^^^^^^\\n\\nBigQuery:\\n^^^^^^^^^\\n\\n\\n#. CREATE TABLE statement with \\'project_id\\' in format like project.dataset.table_name now is parsed validly. \\n \\'project\\' added to output. \\n Also added support project.dataset.name format in CREATE SCHEMA and ALTER statement\\n\\n**v0.22.2**\\n\\nFixes:\\n^^^^^^\\n\\n\\n#. Fix for the issue: https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/94 (column name starts with CREATE)\\n\\n**v0.22.1**\\n\\nNew Features:\\n^^^^^^^^^^^^^\\n\\nBigQuery:\\n---------\\n\\n\\n#. Added support for OPTION for full CREATE TABLE statement & column definition\\n\\nImprovements:\\n-------------\\n\\n\\n#. CLUSTED BY can be used without ()\\n\\n**v0.22.0**\\n\\nNew Features:\\n^^^^^^^^^^^^^\\n\\nBigQuery:\\n---------\\n\\nI started to add partial support for BigQuery\\n\\n\\n#. Added support for OPTIONS in CREATE SCHEMA statement\\n\\nMSSQL:\\n------\\n\\n\\n#. Added support for PRIMARY KEY CLUSTERED - full details about clusterisation are parsed now in separate key \\'clustered_primary_key\\'. \\n I don\\'t like that but when I started I did not thought about all those details, so in version 1.0.* I will work on more beutiful and logically output structure.\\n https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/91\\n\\nPay attention: previously they parsed somehow, but in incorrect structure.\\n\\nImprovements:\\n^^^^^^^^^^^^^\\n\\n\\n#. Strings in double quotes moved as separate token from ID to fix a lot of issues with strings with spaces inside\\n#. Now parser can parse statements separated by new line also (without GO or ; at the end of statement) - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/90 \\n\\nFixes:\\n^^^^^^\\n\\n\\n#. Now open strings is not valid in checks (previously the was parsed.) Open string sample \\'some string (exist open quote, but there is no close quote) \\n#. Order like ASC, DESK in primary keys now parsed valid (not as previously as column name)\\n\\n**v0.21.2**\\nFixies:\\n\\n\\n#. remove \\'PERIOD\\' from tokens\\n\\n**v0.21.1**\\nFixies:\\n\\n\\n#. START WITH, INCREMENT BY and CACHE (without value) in sequences now is parsed correctly.\\n\\n**v0.21.0**\\n\\nNew Features:\\n^^^^^^^^^^^^^\\n\\n.. code-block::\\n\\n ## MSSQL:\\n\\n 1. Added support for statements: \\n 1. PERIOD FOR SYSTEM_TIME in CREATE TABLE statement\\n 2. ON [PRIMARY] after CREATE TABLE statement (sample in test files test_mssql_specific.py)\\n 3. WITH statement for TABLE properties\\n 4. TEXTIMAGE_ON statement\\n 5. DEFAULT NEXT VALUE FOR in COLUMN DEFAULT\\n\\n 2. Added support for separating tables DDL by \\'GO\\' statement as in output of MSSQL\\n 3. Added support for CREATE TYPE as TABLE\\n\\n\\n**v0.20.0**\\n\\nNew Features:\\n^^^^^^^^^^^^^\\n\\n.. code-block::\\n\\n #### Common\\n 1. SET statements from DDL scripts now collected as type \\'ddl_properties\\' (if you use group_by_type=True) and parsed as\\n dicts with 2 keys inside {\\'name\\': \\'property name\\', \\'value\\': \\'property value\\'}\\n\\n #### MySQL\\n 2. Added support for MySQL ON UPDATE statements in column (without REFERENCE)\\n\\n #### MSSQL\\n 3. Added support for CONSTRAINT [CLUSTERED]... PRIMARY KEY for Table definition\\n 4. Added support for WITH statement in CONSTRAINT (Table definition)\\n\\n\\n\\n**v0.19.9**\\n\\n\\n#. Fixed issue with the weird log - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/78.\\n\\n**v0.19.8**\\nFeatures:\\n\\n.. code-block::\\n\\n 1. Method `DDLParser(...).run(...)` now get argument json=True if you want to get result as json,\\n but not as Python Object\\n\\n\\nFixes:\\n\\n.. code-block::\\n\\n 1. Fixed issue when variables are \\'glue\\' during Struct parse like previously STRUCT<a ARRAY<STRING>,b BOOL> was\\n extracted like \\'STRUCT <aARRAY <STRING>,bBOOL>\\', now this issue was fixed and it parsed as is STRUCT < a\\n ARRAY < STRING > ,b BOOL >. Now \\'>\\' and \\'<\\' always will be with space near them.\\n\\n 2. CHECK CONSTRAINT with functions. Fix for https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/76.\\n\\n\\n\\n**v0.19.7**\\nFixes:\\n\\n\\n#. Add support for more special symbols to strings - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/68\\n\\nFeatures:\\n\\n\\n#. Added support for HQL statements:\\n STORED AS INPUTFORMAT, OUTPUTFORMAT - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/69\\n SKEWED BY\\n\\n**v0.19.6**\\nFixes:\\n\\n\\n#. Fixed issue with PARTITIONED BY multiple columns in HQL - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/66\\n#. Question symbol \\'?\\' now handled valid in strings - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/64\\n#. Fixed issue with escaping symbols & added tests -https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/63\\n\\nFeatures:\\n\\n\\n#. Added support for HQL statement TBLPROPERTIES - https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/65\\n\\n**v0.19.5**\\nFixes:\\n\\n\\n#. Fixed issues with COMMENT statement in column definitions. Add bunch of tests, now they expect working ok.\\n\\n**v0.19.4**\\n\\n\\n#. Added support for PARTITION BY (previously was only PARTITIONED BY from HQL)\\n\\n**v0.19.2**\\n\\n\\n#. Added support for ` quotes in column & tables names\\n\\n**v0.19.1**\\nFixes:\\n\\n\\n#. Issue with \\'\\\\t\\' reported in https:\/\/github.com\/xnuinside\/simple-ddl-parser\/issues\/53\\n\\nFeatures:\\n\\n\\n#. Added base for future BigQuery support: added output_mode=\"bigquery\". Pay attention that there is no schemas in BigQuery, so schemas are Datasets.\\n\\n**v0.19.0**\\n**Features**\\n\\n\\n#. Added support for base Snowflake SQL Dialect.\\n Added new --output-mode=\\'snowflake\\' (add \"clone\" key)\\n\\nAdded support for CREATE .. CLONE with same behaviour as CREATE .. LIKE\\nAdded support for CREATE .. CLONE for schemas and database - displayed in output as {\"clone\": {\"from\": ... }}\\nCREATE TABLE .. CLUSTER BY ..\\nCONSTRAINT .. [NOT] ENFORCED (value stored in \\'primary_key_enforced\\')\\n\\n\\n#. in CREATE DATABASE properties that goes after name like key=value now parsed valid. Check examples in tests\\n#. Added support for varchar COLLATE column property\\n\\n**v0.18.0**\\n**Features**\\n\\n\\n#. Added base support fot AWS Redshift SQL dialect. \\n Added support for ENCODE property in column.\\n Added new --output-mode=\\'redshift\\' that add to column \\'encrypt\\' property by default.\\n Also add table properties: distkeys, sortkey, diststyle, encode (table level encode), temp.\\n\\nSupported Redshift statements: SORTKEY, DISTSTYLE, DISTKEY, ENCODE\\n\\nCREATE TEMP \/ TEMPORARY TABLE\\n\\nsyntax like with LIKE statement:\\n\\ncreate temp table tempevent(like event); \\n\\n**v0.17.0**\\n\\n\\n#. All dependencies were updated for the latest version.\\n#. Added base support for CREATE [BIGFILE | SMALLFILE] [TEMPORARY] TABLESPACE \\n#. Added support for create table properties like ``TABLESPACE user_data ENABLE STORAGE IN ROW CHUNK 8K RETENTION CACHE``\\n#. Added support for CREATE DATABASE statement\\n\\n**v0.16.3**\\n\\n\\n#. Fixed issue then using columns names equals some tokens like, for example, ``key`` caused the error. \\n But still words \\'foreign\\' and \\'constraint\\' as column names cause the empty result. I hope they rarely used.\\n Will be fixed in next releases.\\n\\n**v0.16.2**\\n\\n\\n#. Fixed issue with enum in lowercase\\n\\n**v0.16.0**\\n\\n\\n#. Fixed the issue when NULL column after DEFAULT used as default value.\\n#. Added support for generated columns, statatements: AS , GENERATED ALWAYS, STORED in Column Defenitions, in output it placed to key \\'generated\\'. Keyword \\'generated\\' showed only if column is generated.\\n#. Half of changelogs moved to ARCHIVE_CHANGELOG.txt\\n#. Added base support for CREATE DOMAIN statement\\n#. Added base support for CREATE SCHEMA [IF NOT EXISTS] ... [AUTHORIZATION] statement, added new type keyword \\'schemas\\'\\n',\n'author': 'Iuliia Volkova',\n'author_email': 'xnuinside@gmail.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/xnuinside\/simple-ddl-parser',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'entry_points': entry_points,\n'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "singer-python-5.12.2",
        "file_list": "LICENSE PKG-INFO README.md setup.cfg setup.py bookmarks.py catalog.py exceptions.py logger.py logging.conf messages.py metadata.py metrics.py requests.py schema.py statediff.py transform.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt test_bookmarks.py test_catalog.py test_exceptions.py test_metadata.py test_metrics.py test_schema.py test_singer.py test_statediff.py test_transform.py test_utils.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom setuptools import setup, find_packages\nimport subprocess\n\nsetup(name=\"singer-python\",\nversion='5.12.2',\ndescription=\"Singer.io utility library\",\nauthor=\"Stitch\",\nclassifiers=['Programming Language :: Python :: 3 :: Only'],\nurl=\"http:\/\/singer.io\",\ninstall_requires=[\n'pytz>=2018.4',\n'jsonschema==2.6.0',\n'simplejson==3.11.1',\n'python-dateutil>=2.6.0',\n'backoff==1.8.0',\n'ciso8601',\n],\nextras_require={\n'dev': [\n'pylint',\n'ipython',\n'ipdb',\n'nose',\n'singer-tools'\n]\n},\npackages=find_packages(),\npackage_data = {\n'singer': [\n'logging.conf'\n]\n},\n)\n"
    },
    {
        "package_name": "siphash-0.0.1",
        "file_list": "Changelog LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe",
        "setup.py": "import os\nimport sys\nimport setuptools\n\n# Some filesystems don't support hard links. Using the power of\n# monkeypatching to fix the problem.\nimport os, shutil\nos.link = shutil.copy\n\nsetuptools.setup(\nname = 'siphash',\nversion = '0.0.1',\ndescription = 'siphash - python siphash implementation',\nauthor = 'Marek Majkowski',\nauthor_email = 'marek@popcount.org',\nurl = 'http:\/\/github.com\/majek\/pysiphash#readme',\npackages = ['siphash'],\nplatforms = ['any'],\nlicense = 'MIT',\nclassifiers = ['Development Status :: 3 - Alpha',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Topic :: Software Development :: Libraries :: Python Modules',\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3.2\",\n],\nzip_safe = True,\n)\n"
    },
    {
        "package_name": "skl2onnx-1.12",
        "file_list": "automation.py complex_functions.py custom_ops.py graph_state.py onnx_operator.py onnx_operator_mixin.py onnx_ops.py onnx_subgraph_operator_mixin.py sklearn_ops.py type_helper.py __init__.py __init__.py data_types.py exceptions.py onnx_optimisation_identity.py shape_calculator.py tree_ensemble.py utils.py utils_checking.py utils_classifier.py utils_sklearn.py _apply_operation.py _container.py _onnx_optimisation_common.py _registration.py _topology.py __init__.py convert.py investigate.py onnx_helper.py onnx_rare_helper.py __init__.py ada_boost.py array_feature_extractor.py bagging.py binariser.py calibrated_classifier_cv.py cast_op.py class_labels.py common.py concat_op.py cross_decomposition.py decision_tree.py decomposition.py dict_vectoriser.py feature_selection.py flatten_op.py function_transformer.py gamma_regressor.py gaussian_mixture.py gaussian_process.py gradient_boosting.py grid_search_cv.py id_op.py imputer_op.py isolation_forest.py kernel_pca.py k_bins_discretiser.py k_means.py label_binariser.py label_encoder.py linear_classifier.py linear_regressor.py local_outlier_factor.py multilayer_perceptron.py multioutput.py multiply_op.py naive_bayes.py nearest_neighbours.py normaliser.py one_hot_encoder.py one_vs_rest_classifier.py ordinal_encoder.py pipelines.py polynomial_features.py power_transformer.py random_forest.py random_projection.py random_trees_embedding.py ransac_regressor.py replace_op.py scaler_op.py sequence.py sgd_classifier.py sgd_oneclass_svm.py stacking.py support_vector_machines.py text_vectoriser.py tfidf_transformer.py tfidf_vectoriser.py voting_classifier.py voting_regressor.py zip_map.py _gp_kernels.py __init__.py onnx_helper_modified.py __init__.py array_feature_extractor.py cast_op.py class_labels.py concat.py cross_decomposition.py dict_vectorizer.py ensemble_shapes.py flatten.py function_transformer.py gaussian_process.py grid_search_cv.py identity.py imputer.py isolation_forest.py kernel_pca.py k_bins_discretiser.py k_means.py label_binariser.py label_encoder.py linear_classifier.py linear_regressor.py local_outlier_factor.py mixture.py multioutput.py nearest_neighbours.py one_hot_encoder.py one_vs_rest_classifier.py ordinal_encoder.py pipelines.py polynomial_features.py power_transformer.py random_projection.py random_trees_embedding.py replace_op.py scaler.py sequence.py sgd_oneclass_svm.py support_vector_machines.py svd.py text_vectorizer.py tfidf_transformer.py voting_classifier.py voting_regressor.py zip_map.py __init__.py cast_regressor.py cast_transformer.py register.py replace_transformer.py woe_transformer.py woe_transformer_onnx.py __init__.py benchmark.py imagenet_classes.py __init__.py _parse.py _supported_operators.py __init__.py __main__.py LICENSE METADATA NOTICE RECORD top_level.txt WHEEL",
        "setup.py": "# SPDX-License-Identifier: Apache-2.0\n\n# -*- coding: utf-8 -*-\n\nfrom distutils.core import setup\nfrom setuptools import find_packages\nimport os\nthis = os.path.dirname(__file__)\n\nwith open(os.path.join(this, \"requirements.txt\"), \"r\") as f:\nrequirements = [_ for _ in [_.strip(\"\\r\\n \")\nfor _ in f.readlines()] if _ is not None]\n\npackages = find_packages()\nassert packages\n\n# read version from the package file.\nversion_str = '1.0.0'\nwith (open(os.path.join(this, 'skl2onnx\/__init__.py'), \"r\")) as f:\nline = [_ for _ in [_.strip(\"\\r\\n \")\nfor _ in f.readlines()] if _.startswith(\"__version__\")]\nif len(line) > 0:\nversion_str = line[0].split('=')[1].strip('\" ')\n\nREADME = os.path.join(os.getcwd(), \"README.md\")\nwith open(README) as f:\nlong_description = f.read()\nstart_pos = long_description.find('## Introduction')\nif start_pos >= 0:\nlong_description = long_description[start_pos:]\n\nsetup(\nname='skl2onnx',\nversion=version_str,\ndescription=\"Convert scikit-learn models to ONNX\",\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nlicense='Apache License v2.0',\nauthor='ONNX',\nauthor_email='onnx-technical-discuss@lists.lfaidata.foundation',\nurl='https:\/\/github.com\/onnx\/sklearn-onnx',\npackages=packages,\ninclude_package_data=True,\ninstall_requires=requirements,\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: Microsoft :: Windows',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'License :: OSI Approved :: Apache Software License'],\n)\n"
    },
    {
        "package_name": "sly-0.4",
        "file_list": "conf.py index.rst make.bat Makefile sly.rst calc.py calc.py schcls.py expr.py test.e wasm.py MANIFEST.in PKG-INFO README.rst setup.cfg setup.py ast.py docparse.py lex.py yacc.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "try:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\ntests_require = ['pytest', 'regex']\n\nsetup(name = \"sly\",\ndescription=\"SLY - Sly Lex Yacc\",\nlong_description = \"\"\"\nSLY is an implementation of lex and yacc for Python 3.\n\"\"\",\nlicense=\"\"\"BSD\"\"\",\nversion = \"0.4\",\nauthor = \"David Beazley\",\nauthor_email = \"dave@dabeaz.com\",\nmaintainer = \"David Beazley\",\nmaintainer_email = \"dave@dabeaz.com\",\nurl = \"https:\/\/github.com\/dabeaz\/sly\",\npackages = ['sly'],\ntests_require = tests_require,\nextras_require = {\n'test': tests_require,\n},\nclassifiers = [\n'Programming Language :: Python :: 3',\n]\n)\n"
    },
    {
        "package_name": "smbprotocol-1.9.0",
        "file_list": "CHANGELOG.md LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py path.py shutil.py _io.py _os.py _pool.py __init__.py change_notify.py connection.py create_contexts.py dfs.py exceptions.py file_info.py header.py ioctl.py open.py query_info.py reparse_point.py security_descriptor.py session.py structure.py transport.py tree.py _text.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2019, Jordan Borean (@jborean93) <jborean93@gmail.com>\n# MIT License (see LICENSE or https:\/\/opensource.org\/licenses\/MIT)\n\nimport os\n\nfrom setuptools import setup\n\n\ndef abs_path(rel_path):\nreturn os.path.join(os.path.dirname(__file__), rel_path)\n\n\nwith open(abs_path('README.md'), mode='rb') as fd:\nlong_description = fd.read().decode('utf-8')\n\n\nsetup(\nname='smbprotocol',\nversion='1.9.0',\npackages=['smbclient', 'smbprotocol'],\ninstall_requires=[\n'cryptography>=2.0',\n'pyspnego',\n],\nextras_require={\n'kerberos:sys_platform==\"win32\"': [],\n'kerberos:sys_platform!=\"win32\"': [\n'pyspnego[kerberos]',\n],\n},\npython_requires='>=3.6',\nauthor='Jordan Borean',\nauthor_email='jborean93@gmail.com',\nurl='https:\/\/github.com\/jborean93\/smbprotocol',\ndescription='Interact with a server using the SMB 2\/3 Protocol',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nkeywords='smb smb2 smb3 cifs python',\nlicense='MIT',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n],\n)\n"
    },
    {
        "package_name": "smtpapi-0.4.12",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py VERSION.txt __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt VERSION.txt",
        "setup.py": "import io\nimport os\nfrom distutils.file_util import copy_file\nfrom setuptools import setup, find_packages\n\n\ndir_path = os.path.abspath(os.path.dirname(__file__))\nreadme = io.open(os.path.join(dir_path, 'README.rst'), encoding='utf-8').read()\nversion = io.open(\nos.path.join(dir_path, 'VERSION.txt'),\nencoding='utf-8',\n).read().strip()\ncopy_file(os.path.join(dir_path, 'VERSION.txt'),\nos.path.join(dir_path, 'smtpapi', 'VERSION.txt'),\nverbose=0)\nsetup(\nname='smtpapi',\nversion=version,\nauthor='Yamil Asusta, Kane Kim',\nauthor_email='yamil@sendgrid.com, kane.isturm@sendgrid.com',\nurl='https:\/\/github.com\/sendgrid\/smtpapi-python\/',\npackages=find_packages(exclude=[\"test\"]),\ninclude_package_data=True,\nlicense='MIT License',\ndescription='Simple wrapper to use SendGrid SMTP API',\nlong_description=readme,\nclassifiers=[\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n],\n)\n"
    },
    {
        "package_name": "snuggs-1.4.7",
        "file_list": "AUTHORS.txt CHANGES.txt CODE_OF_CONDUCT.txt LICENSE PKG-INFO README.rst setup.cfg setup.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt test_snuggs.py",
        "setup.py": "\"\"\"Build the snuggs package.\"\"\"\n\nfrom codecs import open as codecs_open\nfrom setuptools import setup, find_packages\n\n\n# Get the long description from the relevant file\nwith codecs_open(\"README.rst\", encoding=\"utf-8\") as f:\nlong_description = f.read()\n\nwith open(\"snuggs\/__init__.py\") as f:\nfor line in f:\nif line.startswith(\"__version__\"):\nversion = line.split(\"=\")[1]\nversion = version.strip().strip('\"')\nbreak\n\nsetup(\nname=\"snuggs\",\nversion=version,\ndescription=u\"Snuggs are s-expressions for Numpy\",\nlong_description=long_description,\nclassifiers=[],\nkeywords=\"\",\nauthor=u\"Sean Gillies\",\nauthor_email=\"sean@mapbox.com\",\nurl=\"https:\/\/github.com\/mapbox\/snuggs\",\nlicense=\"MIT\",\npackages=find_packages(exclude=[\"ez_setup\", \"examples\", \"tests\"]),\ninclude_package_data=True,\nzip_safe=False,\ninstall_requires=[\"numpy\", \"pyparsing>=2.1.6\"],\nextras_require={\"test\": [\"pytest\", \"hypothesis\"]},\n)\n"
    },
    {
        "package_name": "social-auth-app-django-5.0.0",
        "file_list": "CHANGELOG.md dev-requirements.txt LICENSE manage.py MANIFEST.in PKG-INFO README.md requirements.txt setup.cfg setup.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt admin.py apps.py config.py context_processors.py fields.py clearsocial.py __init__.py __init__.py managers.py middleware.py 0001_initial.py 0002_add_related_name.py 0003_alter_email_max_length.py 0004_auto_20160423_0400.py 0005_auto_20160727_2333.py 0006_partial.py 0007_code_timestamp.py 0008_partial_timestamp.py 0009_auto_20191118_0520.py 0010_uid_db_index.py __init__.py models.py storage.py strategy.py urls.py utils.py views.py __init__.py settings.py test_admin.py test_context_processors.py test_middleware.py test_models.py test_strategy.py test_views.py urls.py __init__.py",
        "setup.py": "\"\"\"Setup file for easy installation\"\"\"\nimport re\n\nfrom os.path import join, dirname\nfrom setuptools import setup\n\n\nVERSION_RE = re.compile(r'__version__ = \\'([\\d\\.]+)\\'')\n\n\ndef read_version():\nwith open('social_django\/__init__.py') as file:\nversion_line = [line for line in file.readlines()\nif line.startswith('__version__')][0]\nreturn VERSION_RE.match(version_line).groups()[0]\n\n\ndef long_description():\nreturn open(join(dirname(__file__), 'README.md')).read()\n\n\ndef load_requirements():\nreturn open(join(dirname(__file__), 'requirements.txt')).readlines()\n\n\nsetup(\nname='social-auth-app-django',\nversion=read_version(),\nauthor='Matias Aguirre',\nauthor_email='matiasaguirre@gmail.com',\ndescription='Python Social Authentication, Django integration.',\nlicense='BSD',\nkeywords='django, social auth',\nurl='https:\/\/github.com\/python-social-auth\/social-app-django',\npackages=[\n'social_django',\n'social_django.migrations',\n'social_django.management',\n'social_django.management.commands',\n],\nlong_description=long_description(),\nlong_description_content_type='text\/markdown',\npython_requires='>=3.6',\ninstall_requires=load_requirements(),\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Topic :: Internet',\n'License :: OSI Approved :: BSD License',\n'Intended Audience :: Developers',\n'Environment :: Web Environment',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n],\nzip_safe=False\n)\n"
    },
    {
        "package_name": "social-auth-core-4.3.0",
        "file_list": "CHANGELOG.md LICENSE MANIFEST.in PKG-INFO README.md requirements-azuread.txt requirements-base.txt requirements-openidconnect.txt requirements-saml.txt setup.cfg setup.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt actions.py amazon.py angel.py aol.py apple.py appsfuel.py arcgis.py asana.py atlassian.py auth0.py azuread.py azuread_b2c.py azuread_tenant.py base.py battlenet.py beats.py behance.py belgiumeid.py bitbucket.py box.py bungie.py changetip.py chatwork.py cilogon.py classlink.py clef.py coding.py cognito.py coinbase.py coursera.py dailymotion.py deezer.py digitalocean.py discord.py discourse.py disqus.py docker.py douban.py dribbble.py drip.py dropbox.py echosign.py edmodo.py elixir.py email.py eventbrite.py eveonline.py evernote.py exacttarget.py facebook.py fedora.py fence.py fitbit.py five_hundred_px.py flat.py flickr.py foursquare.py gae.py gitea.py github.py github_enterprise.py gitlab.py globus.py goclio.py goclioeu.py google.py google_openidconnect.py grafana.py hubspot.py instagram.py itembase.py jawbone.py justgiving.py kakao.py keycloak.py khanacademy.py lastfm.py launchpad.py legacy.py line.py linkedin.py live.py livejournal.py loginradius.py lyft.py mailchimp.py mailru.py mapmyfitness.py mediawiki.py meetup.py mendeley.py microsoft.py mineid.py mixcloud.py monzo.py moves.py musicbrainz.py nationbuilder.py naver.py ngpvan.py nk.py oauth.py odnoklassniki.py okta.py okta_openidconnect.py openshift.py openstack.py openstackdev.py openstreetmap.py open_id.py open_id_connect.py orbi.py orcid.py osso.py patreon.py paypal.py persona.py phabricator.py pinterest.py pixelpin.py pocket.py podio.py professionali.py pushbullet.py qiita.py qq.py quizlet.py rdio.py readability.py reddit.py runkeeper.py salesforce.py saml.py scistarter.py shimmering.py shopify.py simplelogin.py sketchfab.py skyrock.py slack.py soundcloud.py spotify.py stackoverflow.py steam.py stocktwits.py strava.py stripe.py surveymonkey.py suse.py taobao.py telegram.py thisismyjam.py trello.py tripit.py tumblr.py twilio.py twitch.py twitter.py uber.py ubuntu.py udata.py universe.py untappd.py upwork.py username.py utils.py vault.py vend.py vimeo.py vk.py weibo.py weixin.py withings.py wunderlist.py xing.py yahoo.py yammer.py yandex.py zoom.py zotero.py __init__.py exceptions.py debug.py disconnect.py mail.py partial.py social_auth.py user.py utils.py __init__.py storage.py store.py strategy.py actions.py test_associate.py test_disconnect.py test_login.py __init__.py base.py saml_config.json saml_response.txt legacy.py oauth.py open_id.py test_amazon.py test_angel.py test_apple.py test_arcgis.py test_asana.py test_atlassian.py test_auth0.py test_azuread.py test_azuread_b2c.py test_behance.py test_bitbucket.py test_box.py test_broken.py test_chatwork.py test_cilogon.py test_clef.py test_cognito.py test_coinbase.py test_coursera.py test_dailymotion.py test_deezer.py test_digitalocean.py test_discourse.py test_disqus.py test_dribbble.py test_drip.py test_dropbox.py test_dummy.py test_edmodo.py test_elixir.py test_email.py test_eventbrite.py test_evernote.py test_facebook.py test_fence.py test_fitbit.py test_five_hundred_px.py test_flat.py test_flickr.py test_foursquare.py test_gitea.py test_github.py test_github_enterprise.py test_gitlab.py test_globus.py test_google.py test_grafana.py test_instagram.py test_itembase.py test_kakao.py test_keycloak.py test_khanacademy.py test_linkedin.py test_live.py test_livejournal.py test_lyft.py test_mailru.py test_mapmyfitness.py test_microsoft.py test_mineid.py test_mixcloud.py test_musicbrainz.py test_nationbuilder.py test_naver.py test_ngpvan.py test_okta.py test_open_id_connect.py test_orbi.py test_orcid.py test_osso.py test_patreon.py test_paypal.py test_phabricator.py test_pinterest.py test_podio.py test_qiita.py test_quizlet.py test_readability.py test_reddit.py test_saml.py test_scistarter.py test_simplelogin.py test_sketchfab.py test_skyrock.py test_slack.py test_soundcloud.py test_spotify.py test_stackoverflow.py test_steam.py test_stocktwits.py test_strava.py test_stripe.py test_taobao.py test_thisismyjam.py test_tripit.py test_tumblr.py test_twitch.py test_twitter.py test_uber.py test_udata.py test_universe.py test_upwork.py test_username.py test_utils.py test_vault.py test_vk.py test_wunderlist.py test_xing.py test_yahoo.py test_yammer.py test_yandex.py test_zoom.py test_zotero.py __init__.py models.py pipeline.py requirements.txt strategy.py testkey.pem test_exceptions.py test_partial.py test_pipeline.py test_storage.py test_utils.py __init__.py utils.py __init__.py",
        "setup.py": "import re\nfrom os.path import dirname, join\n\nfrom setuptools import setup\n\nVERSION_RE = re.compile(r'__version__ = \\'([\\d\\.]+)\\'')\n\nLONG_DESCRIPTION = \"\"\"\nPython Social Auth is an easy to setup social authentication\/registration\nmechanism with support for several frameworks and auth providers.\n\nIt implements a common interface to define new authentication\nproviders from third parties. And to bring support for more frameworks\nand ORMs.\n\"\"\"\n\n\ndef long_description():\ntry:\nreturn open(join(dirname(__file__), 'README.md')).read()\nexcept OSError:\nreturn None\n\n\ndef read_version():\nwith open('social_core\/__init__.py') as file:\nversion_line = [line for line in file.readlines()\nif line.startswith('__version__')][0]\nreturn VERSION_RE.match(version_line).groups()[0]\n\n\ndef read_requirements(filename):\nwith open(filename) as file:\nreturn [line for line in file.readlines() if not line.startswith('-')]\n\n\ndef read_tests_requirements(filename):\nreturn read_requirements(f'social_core\/tests\/{filename}')\n\n\nrequirements = read_requirements('requirements-base.txt')\nrequirements_openidconnect = read_requirements('requirements-openidconnect.txt')\nrequirements_saml = read_requirements('requirements-saml.txt')\nrequirements_azuread = read_requirements('requirements-azuread.txt')\n\ntests_requirements = read_tests_requirements('requirements.txt')\n\nrequirements_all = requirements_openidconnect + \\\nrequirements_saml + \\\nrequirements_azuread\n\ntests_requirements = tests_requirements + requirements_all\n\nsetup(\nname='social-auth-core',\nversion=read_version(),\nauthor='Matias Aguirre',\nauthor_email='matiasaguirre@gmail.com',\ndescription='Python social authentication made simple.',\nlicense='BSD',\nkeywords='openid, oauth, saml, social auth',\nurl='https:\/\/github.com\/python-social-auth\/social-core',\npackages=[\n'social_core',\n'social_core.backends',\n'social_core.pipeline',\n'social_core.tests',\n'social_core.tests.actions',\n'social_core.tests.backends',\n'social_core.tests.backends.data'\n],\nlong_description=long_description() or LONG_DESCRIPTION,\nlong_description_content_type='text\/markdown',\ninstall_requires=requirements,\npython_requires='>=3.6',\nextras_require={\n'openidconnect': [requirements_openidconnect],\n'saml': [requirements_saml],\n'azuread': [requirements_azuread],\n'all': [requirements_all],\n# Kept for compatibility\n'allpy3': [requirements_all],\n},\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Topic :: Internet',\n'License :: OSI Approved :: BSD License',\n'Intended Audience :: Developers',\n'Environment :: Web Environment',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n],\npackage_data={\n'social_core\/tests': [\n'social_core\/tests\/*.txt',\n'social_core\/tests\/testkey.pem'\n]\n},\ninclude_package_data=True,\ntests_require=tests_requirements,\ntest_suite='social_core.tests',\nzip_safe=False\n)\n"
    },
    {
        "package_name": "sodapy-2.1.1",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.md requirements.txt setup.cfg setup.py constants.py socrata.py utils.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt 403_response_json.txt bike_counts_page_1.json bike_counts_page_2.json create_foobar.txt empty.txt get_datasets.txt get_songs.txt get_songs_unicode.txt get_song_metadata.txt nondatasetfile.zip replace_songs.txt successblobres.txt update_song_metadata.txt upsert_songs.txt test_socrata.py test_utils.py test_version.py test_socrata.cpython-39-pytest-6.2.5.pyc test_utils.cpython-39-pytest-6.2.5.pyc test_version.cpython-39-pytest-6.2.5.pyc",
        "setup.py": "#!\/usr\/bin\/env python3\n\nfrom setuptools import setup\n\nwith open(\"sodapy\/version.py\") as f:\nexec(f.read())\n\nwith open(\"README.md\") as f:\nlong_description = f.read()\n\nwith open(\"requirements.txt\") as requirements:\nrequired = requirements.read().splitlines()\n\nkwargs = {\n\"name\": \"sodapy\",\n\"version\": __version__,\n\"packages\": [\"sodapy\"],\n\"description\": \"Python library for the Socrata Open Data API\",\n\"long_description\": long_description,\n\"long_description_content_type\": \"text\/markdown\",\n\"author\": \"Cristina Mu\u00f1oz\",\n\"maintainer\": \"Cristina Mu\u00f1oz\",\n\"author_email\": \"hi@xmunoz.com\",\n\"maintainer_email\": \"hi@xmunoz.com\",\n\"license\": \"MIT\",\n\"install_requires\": required,\n\"url\": \"https:\/\/github.com\/xmunoz\/sodapy\",\n\"download_url\": \"https:\/\/github.com\/xmunoz\/sodapy\/archive\/master.tar.gz\",\n\"keywords\": \"soda socrata opendata api\",\n\"classifiers\": [\n\"Programming Language :: Python :: 3\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Development Status :: 5 - Production\/Stable\",\n],\n}\n\nsetup(**kwargs)\n"
    },
    {
        "package_name": "solrq-1.1.1",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup, find_packages\nimport os\n\n\ndef strip_comments(l):\nreturn l.split('#', 1)[0].strip()\n\n\ndef get_version(version_tuple):\nif not isinstance(version_tuple[-1], int):\nreturn '.'.join(map(str, version_tuple[:-1])) + version_tuple[-1]\nreturn '.'.join(map(str, version_tuple))\n\n\ninit = os.path.join(os.path.dirname(__file__), 'src', 'solrq', '__init__.py')\nversion_line = list(filter(lambda l: l.startswith('VERSION'), open(init)))[0]\nVERSION = get_version(eval(version_line.split('=')[-1]))\n\nINSTALL_REQUIRES = []\n\ntry:\nfrom pypandoc import convert\n\ndef read_md(f):\nreturn convert(f, 'rst')\n\nexcept ImportError:\nconvert = None\nprint(\n\"warning: pypandoc module not found, could not convert Markdown to RST\"\n)\n\ndef read_md(f):\nreturn open(f, 'r').read() # noqa\n\nREADME = os.path.join(os.path.dirname(__file__), 'README.md')\nPACKAGES = find_packages('src')\nPACKAGE_DIR = {'': 'src'}\n\nsetup(\nname='solrq',\nversion=VERSION,\nauthor='Micha\u0142 Jaworski',\nauthor_email='swistakm@gmail.com',\ndescription='Python Solr query utility',\nlong_description=read_md(README),\n\npackages=PACKAGES,\npackage_dir=PACKAGE_DIR,\n\nurl='https:\/\/github.com\/swistakm\/solrq',\ninclude_package_data=True,\ninstall_requires=INSTALL_REQUIRES,\nzip_safe=True,\n\nlicense=\"BSD\",\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Internet :: WWW\/HTTP :: Indexing\/Search',\n],\n)\n"
    },
    {
        "package_name": "spacy-3.4.1",
        "file_list": "LICENSE 3rd_party_licenses.txt MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py about.py attrs.pxd attrs.pyx assemble.py convert.py debug_config.py debug_data.py debug_diff.py debug_model.py download.py evaluate.py info.py init_config.py init_pipeline.py package.py pretrain.py profile.py assets.py clone.py document.py dvc.py pull.py push.py remote_storage.py run.py __init__.py quickstart_training.jinja quickstart_training_recommendations.yml train.py validate.py _util.py __init__.py compat.py default_config.cfg default_config_pretraining.cfg render.py templates.py __init__.py errors.py git_info.py glossary.py kb.pxd kb.pyx stop_words.py __init__.py examples.py lex_attrs.py punctuation.py stop_words.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py punctuation.py stop_words.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py stop_words.py __init__.py examples.py lex_attrs.py stop_words.py tokenizer_exceptions.py __init__.py examples.py punctuation.py stop_words.py tokenizer_exceptions.py __init__.py examples.py lemmatizer.py lex_attrs.py punctuation.py stop_words.py syntax_iterators.py tokenizer_exceptions.py __init__.py char_classes.py examples.py lex_attrs.py stop_words.py __init__.py examples.py lex_attrs.py punctuation.py stop_words.py syntax_iterators.py tokenizer_exceptions.py __init__.py examples.py punctuation.py stop_words.py syntax_iterators.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py stop_words.py __init__.py examples.py get_pos_from_wiktionary.py lemmatizer.py lex_attrs.py punctuation.py stop_words.py syntax_iterators.py tokenizer_exceptions.py __init__.py examples.py lemmatizer.py lex_attrs.py punctuation.py stop_words.py syntax_iterators.py tokenizer_exceptions.py __init__.py examples.py lemmatizer.py lex_attrs.py punctuation.py stop_words.py syntax_iterators.py tokenizer_exceptions.py __init__.py stop_words.py __init__.py examples.py lex_attrs.py punctuation.py stop_words.py __init__.py examples.py generate_verbs_exc.py lex_attrs.py punctuation.py stop_words.py syntax_iterators.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py punctuation.py stop_words.py syntax_iterators.py tokenizer_exceptions.py __init__.py examples.py lemmatizer.py lex_attrs.py punctuation.py stop_words.py syntax_iterators.py tokenizer_exceptions.py _tokenizer_exceptions_list.py __init__.py lemmatizer.py stop_words.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py stop_words.py tokenizer_exceptions.py __init__.py examples.py stop_words.py __init__.py examples.py lex_attrs.py stop_words.py __init__.py examples.py lex_attrs.py stop_words.py __init__.py examples.py lemma_lookup_license.txt stop_words.py __init__.py examples.py lex_attrs.py stop_words.py tokenizer_exceptions.py __init__.py examples.py punctuation.py stop_words.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py stop_words.py __init__.py examples.py lex_attrs.py punctuation.py stop_words.py syntax_iterators.py tokenizer_exceptions.py _tokenizer_exceptions_list.py __init__.py stop_words.py __init__.py examples.py lemmatizer.py punctuation.py stop_words.py syntax_iterators.py tokenizer_exceptions.py __init__.py examples.py stop_words.py syntax_iterators.py tag_bigram_map.py tag_map.py tag_orth_map.py __init__.py examples.py stop_words.py __init__.py examples.py lex_attrs.py punctuation.py stop_words.py tag_map.py __init__.py examples.py lex_attrs.py punctuation.py stop_words.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py punctuation.py stop_words.py tokenizer_exceptions.py __init__.py lex_attrs.py examples.py punctuation.py stop_words.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py punctuation.py stop_words.py tokenizer_exceptions.py __init__.py stop_words.py __init__.py lemmatizer.py lex_attrs.py stop_words.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py stop_words.py __init__.py stop_words.py __init__.py examples.py punctuation.py stop_words.py syntax_iterators.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py stop_words.py __init__.py examples.py lemmatizer.py lex_attrs.py punctuation.py stop_words.py syntax_iterators.py tokenizer_exceptions.py __init__.py norm_exceptions.py examples.py lemmatizer.py lex_attrs.py punctuation.py stop_words.py __init__.py examples.py lex_attrs.py punctuation.py stop_words.py syntax_iterators.py tokenizer_exceptions.py __init__.py punctuation.py examples.py lex_attrs.py punctuation.py stop_words.py tokenizer_exceptions.py __init__.py examples.py lemmatizer.py lex_attrs.py stop_words.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py stop_words.py __init__.py examples.py lex_attrs.py stop_words.py __init__.py examples.py lex_attrs.py stop_words.py __init__.py examples.py stop_words.py __init__.py examples.py stop_words.py __init__.py examples.py lemma_lookup_licence.txt lex_attrs.py stop_words.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py stop_words.py syntax_iterators.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py stop_words.py __init__.py examples.py lex_attrs.py stop_words.py __init__.py lex_attrs.py stop_words.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py punctuation.py stop_words.py tokenizer_exceptions.py __init__.py lex_attrs.py stop_words.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py punctuation.py stop_words.py __init__.py tokenizer_exceptions.py examples.py lex_attrs.py stop_words.py syntax_iterators.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py punctuation.py stop_words.py tokenizer_exceptions.py __init__.py examples.py lemmatizer.py lex_attrs.py stop_words.py tokenizer_exceptions.py __init__.py examples.py lex_attrs.py punctuation.py stop_words.py __init__.py examples.py lex_attrs.py stop_words.py __init__.py examples.py __init__.py examples.py lex_attrs.py stop_words.py __init__.py examples.py lex_attrs.py stop_words.py __init__.py __init__.py language.py lexeme.pxd lexeme.pyi lexeme.pyx lookups.py dependencymatcher.pyi dependencymatcher.pyx matcher.pxd matcher.pyi matcher.pyx phrasematcher.pxd phrasematcher.pyi phrasematcher.pyx __init__.py callbacks.py extract_ngrams.py extract_spans.py featureextractor.py entity_linker.py multi_task.py parser.py spancat.py tagger.py textcat.py tok2vec.py __init__.py parser_model.pxd parser_model.pyx staticvectors.py tb_framework.py _character_embed.py _precomputable_affine.py __init__.py morphology.pxd morphology.pyx parts_of_speech.pxd parts_of_speech.pyx attributeruler.py dep_parser.pyx edit_tree_lemmatizer.py entityruler.py entity_linker.py functions.py entity_linker.py __init__.py lemmatizer.py morphologizer.pyx multitask.pyx ner.pyx pipe.pxd pipe.pyi pipe.pyx sentencizer.pyx senter.pyx spancat.py span_ruler.py tagger.pyx textcat.py textcat_multilabel.py tok2vec.py trainable_pipe.pxd trainable_pipe.pyx transition_parser.pxd transition_parser.pyx edit_trees.pxd edit_trees.pyx schemas.py __init__.py arc_eager.pxd arc_eager.pyx ner.pxd ner.pyx nonproj.hh nonproj.pxd nonproj.pyx stateclass.pxd stateclass.pyx transition_system.pxd transition_system.pyx _beam_utils.pxd _beam_utils.pyx _state.pxd _state.pyx __init__.pxd __init__.py __init__.py pipe_analysis.py py.typed schemas.py scorer.py strings.pxd strings.pyi strings.pyx structs.pxd symbols.pxd symbols.pyx conftest.py test_add_entities.py test_array.py test_creation.py test_doc_api.py test_graph.py test_json_doc_conversion.py test_morphanalysis.py test_pickle_doc.py test_retokenize_merge.py test_retokenize_split.py test_span.py test_span_group.py test_token_api.py test_underscore.py __init__.py enable_gpu.py test_text.py test_tokenizer.py __init__.py test_exception.py test_text.py __init__.py test_exceptions.py test_text.py __init__.py test_tokenizer.py __init__.py test_exception.py test_prefix_suffix_infix.py test_text.py __init__.py test_text.py __init__.py test_exceptions.py test_noun_chunks.py test_prefix_suffix_infix.py test_text.py __init__.py test_exceptions.py test_noun_chunks.py test_parser.py test_prefix_suffix_infix.py test_text.py __init__.py test_text.py test_tokenizer.py __init__.py test_exception.py test_noun_chunks.py test_text.py __init__.py test_customized_tokenizer.py test_exceptions.py test_indices.py test_noun_chunks.py test_parser.py test_prefix_suffix_infix.py test_punct.py test_sbd.py test_text.py test_tokenizer.py __init__.py test_exception.py test_noun_chunks.py test_text.py __init__.py test_text.py test_tokenizer.py __init__.py test_text.py __init__.py test_noun_chunks.py __init__.py test_noun_chunks.py test_text.py test_tokenizer.py __init__.py test_exceptions.py test_noun_chunks.py test_prefix_suffix_infix.py test_text.py __init__.py test_tokenizer.py __init__.py test_text.py __init__.py test_text.py __init__.py test_tokenizer.py __init__.py test_lex_attrs.py test_text.py __init__.py test_text.py test_tokenizer.py __init__.py test_text.py test_tokenizer.py __init__.py test_tokenizer.py __init__.py test_text.py test_tokenizer.py __init__.py test_noun_chunks.py test_prefix_suffix_infix.py test_text.py __init__.py test_text.py test_tokenizer.py __init__.py test_noun_chunks.py test_prefix_suffix_infix.py test_stopwords.py test_text.py __init__.py test_lemmatization.py test_morphologizer_factory.py test_serialize.py test_tokenizer.py __init__.py test_lemmatization.py test_serialize.py test_tokenizer.py __init__.py test_tokenizer.py __init__.py test_exceptions.py test_prefix_suffix_infix.py test_text.py __init__.py test_text.py __init__.py test_text.py test_tokenizer.py __init__.py test_text.py __init__.py test_text.py __init__.py test_noun_chunks.py test_tokenizer.py __init__.py test_text.py __init__.py test_noun_chunks.py test_text.py __init__.py test_text.py test_tokenizer.py __init__.py test_noun_chunks.py test_text.py __init__.py test_tokenizer.py __init__.py test_exceptions.py test_lemmatizer.py test_text.py test_tokenizer.py __init__.py test_text.py __init__.py test_text.py test_tokenizer.py __init__.py test_text.py test_tokenizer.py __init__.py test_text.py test_tokenizer.py __init__.py test_exceptions.py test_tokenizer.py __init__.py test_exceptions.py test_lex_attrs.py test_noun_chunks.py test_prefix_suffix_infix.py test_text.py test_tokenizer.py __init__.py test_text.py test_tokenizer.py __init__.py test_attrs.py test_initialize.py test_lemmatizers.py test_serialize.py test_tokenizer.py __init__.py test_exception.py test_text.py __init__.py test_indices.py test_punct.py test_text.py __init__.py test_noun_chunks.py test_parser.py test_text.py test_tokenizer.py __init__.py test_tokenizer.py __init__.py test_lemmatizer.py test_tokenizer.py test_tokenizer_exc.py __init__.py test_prefix_suffix_infix.py test_text.py __init__.py test_serialize.py test_tokenizer.py __init__.py test_text.py test_tokenizer.py __init__.py test_text.py __init__.py test_serialize.py test_text.py test_tokenizer.py __init__.py __init__.py test_dependency_matcher.py test_matcher_api.py test_matcher_logic.py test_pattern_validation.py test_phrase_matcher.py __init__.py test_morph_converters.py test_morph_features.py test_morph_pickle.py __init__.py pyproject.toml requirements.txt setup.cfg test_requirements.py __init__.py test_add_label.py test_arc_eager_oracle.py test_ner.py test_neural_parser.py test_nn_beam.py test_nonproj.py test_parse.py test_parse_navigate.py test_preset_sbd.py test_space_attachment.py test_state.py __init__.py test_analysis.py test_annotates_on_update.py test_attributeruler.py test_edit_tree_lemmatizer.py test_entity_linker.py test_entity_ruler.py test_functions.py test_initialize.py test_lemmatizer.py test_models.py test_morphologizer.py test_pipe_factories.py test_pipe_methods.py test_sentencizer.py test_senter.py test_spancat.py test_span_ruler.py test_tagger.py test_textcat.py test_tok2vec.py __init__.py test_resource_warning.py test_serialize_config.py test_serialize_doc.py test_serialize_docbin.py test_serialize_extension_attrs.py test_serialize_kb.py test_serialize_language.py test_serialize_pipeline.py test_serialize_span_groups.py test_serialize_tokenizer.py test_serialize_vocab_strings.py __init__.py test_architectures.py test_cli.py test_displacy.py test_errors.py test_language.py test_misc.py test_models.py test_pickles.py test_scorer.py test_ty.py sun.txt test_exceptions.py test_explain.py test_naughty_strings.py test_tokenizer.py test_urls.py test_whitespace.py __init__.py test_augmenters.py test_new_example.py test_pretraining.py test_readers.py test_rehearse.py test_training.py __init__.py util.py test_lexeme.py test_lookups.py test_similarity.py test_stringstore.py test_vectors.py test_vocab_api.py __init__.py __init__.py tokenizer.pxd tokenizer.pyx doc.pxd doc.pyi doc.pyx graph.pxd graph.pyx morphanalysis.pxd morphanalysis.pyi morphanalysis.pyx span.pxd span.pyi span.pyx span_group.pxd span_group.pyi span_group.pyx token.pxd token.pyi token.pyx underscore.py _dict_proxies.py _retokenize.pyi _retokenize.pyx _serialize.py __init__.pxd __init__.py align.pyx alignment.py alignment_array.pxd alignment_array.pyx augment.py batchers.py callbacks.py conllu_to_docs.py conll_ner_to_docs.py iob_to_docs.py json_to_docs.py __init__.py corpus.py example.pxd example.pyx gold_io.pyx initialize.py iob_utils.py loggers.py loop.py pretrain.py __init__.pxd __init__.py ty.py typedefs.pxd typedefs.pyx util.py vectors.pyx vocab.pxd vocab.pyi vocab.pyx __init__.pxd __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\nfrom setuptools import Extension, setup, find_packages\nimport sys\nimport platform\nimport numpy\nfrom distutils.command.build_ext import build_ext\nfrom distutils.sysconfig import get_python_inc\nfrom pathlib import Path\nimport shutil\nfrom Cython.Build import cythonize\nfrom Cython.Compiler import Options\nimport os\nimport subprocess\n\n\nROOT = Path(__file__).parent\nPACKAGE_ROOT = ROOT \/ \"spacy\"\n\n\n# Preserve `__doc__` on functions and classes\n# http:\/\/docs.cython.org\/en\/latest\/src\/userguide\/source_files_and_compilation.html#compiler-options\nOptions.docstrings = True\n\nPACKAGES = find_packages()\nMOD_NAMES = [\n\"spacy.training.alignment_array\",\n\"spacy.training.example\",\n\"spacy.parts_of_speech\",\n\"spacy.strings\",\n\"spacy.lexeme\",\n\"spacy.vocab\",\n\"spacy.attrs\",\n\"spacy.kb\",\n\"spacy.ml.parser_model\",\n\"spacy.morphology\",\n\"spacy.pipeline.dep_parser\",\n\"spacy.pipeline._edit_tree_internals.edit_trees\",\n\"spacy.pipeline.morphologizer\",\n\"spacy.pipeline.multitask\",\n\"spacy.pipeline.ner\",\n\"spacy.pipeline.pipe\",\n\"spacy.pipeline.trainable_pipe\",\n\"spacy.pipeline.sentencizer\",\n\"spacy.pipeline.senter\",\n\"spacy.pipeline.tagger\",\n\"spacy.pipeline.transition_parser\",\n\"spacy.pipeline._parser_internals.arc_eager\",\n\"spacy.pipeline._parser_internals.ner\",\n\"spacy.pipeline._parser_internals.nonproj\",\n\"spacy.pipeline._parser_internals._state\",\n\"spacy.pipeline._parser_internals.stateclass\",\n\"spacy.pipeline._parser_internals.transition_system\",\n\"spacy.pipeline._parser_internals._beam_utils\",\n\"spacy.tokenizer\",\n\"spacy.training.align\",\n\"spacy.training.gold_io\",\n\"spacy.tokens.doc\",\n\"spacy.tokens.span\",\n\"spacy.tokens.token\",\n\"spacy.tokens.span_group\",\n\"spacy.tokens.graph\",\n\"spacy.tokens.morphanalysis\",\n\"spacy.tokens._retokenize\",\n\"spacy.matcher.matcher\",\n\"spacy.matcher.phrasematcher\",\n\"spacy.matcher.dependencymatcher\",\n\"spacy.symbols\",\n\"spacy.vectors\",\n]\nCOMPILE_OPTIONS = {\n\"msvc\": [\"\/Ox\", \"\/EHsc\"],\n\"mingw32\": [\"-O2\", \"-Wno-strict-prototypes\", \"-Wno-unused-function\"],\n\"other\": [\"-O2\", \"-Wno-strict-prototypes\", \"-Wno-unused-function\"],\n}\nLINK_OPTIONS = {\"msvc\": [\"-std=c++11\"], \"mingw32\": [\"-std=c++11\"], \"other\": []}\nCOMPILER_DIRECTIVES = {\n\"language_level\": -3,\n\"embedsignature\": True,\n\"annotation_typing\": False,\n}\n# Files to copy into the package that are otherwise not included\nCOPY_FILES = {\nROOT \/ \"setup.cfg\": PACKAGE_ROOT \/ \"tests\" \/ \"package\",\nROOT \/ \"pyproject.toml\": PACKAGE_ROOT \/ \"tests\" \/ \"package\",\nROOT \/ \"requirements.txt\": PACKAGE_ROOT \/ \"tests\" \/ \"package\",\n}\n\n\ndef is_new_osx():\n\"\"\"Check whether we're on OSX >= 10.7\"\"\"\nif sys.platform != \"darwin\":\nreturn False\nmac_ver = platform.mac_ver()[0]\nif mac_ver.startswith(\"10\"):\nminor_version = int(mac_ver.split(\".\")[1])\nif minor_version >= 7:\nreturn True\nelse:\nreturn False\nreturn False\n\n\nif is_new_osx():\n# On Mac, use libc++ because Apple deprecated use of\n# libstdc\nCOMPILE_OPTIONS[\"other\"].append(\"-stdlib=libc++\")\nLINK_OPTIONS[\"other\"].append(\"-lc++\")\n# g++ (used by unix compiler on mac) links to libstdc++ as a default lib.\n# See: https:\/\/stackoverflow.com\/questions\/1653047\/avoid-linking-to-libstdc\nLINK_OPTIONS[\"other\"].append(\"-nodefaultlibs\")\n\n\n# By subclassing build_extensions we have the actual compiler that will be used which is really known only after finalize_options\n# http:\/\/stackoverflow.com\/questions\/724664\/python-distutils-how-to-get-a-compiler-that-is-going-to-be-used\nclass build_ext_options:\ndef build_options(self):\nfor e in self.extensions:\ne.extra_compile_args += COMPILE_OPTIONS.get(\nself.compiler.compiler_type, COMPILE_OPTIONS[\"other\"]\n)\nfor e in self.extensions:\ne.extra_link_args += LINK_OPTIONS.get(\nself.compiler.compiler_type, LINK_OPTIONS[\"other\"]\n)\n\n\nclass build_ext_subclass(build_ext, build_ext_options):\ndef build_extensions(self):\nif self.parallel is None and os.environ.get(\"SPACY_NUM_BUILD_JOBS\") is not None:\nself.parallel = int(os.environ.get(\"SPACY_NUM_BUILD_JOBS\"))\nbuild_ext_options.build_options(self)\nbuild_ext.build_extensions(self)\n\n\n# Include the git version in the build (adapted from NumPy)\n# Copyright (c) 2005-2020, NumPy Developers.\n# BSD 3-Clause license, see licenses\/3rd_party_licenses.txt\ndef write_git_info_py(filename=\"spacy\/git_info.py\"):\ndef _minimal_ext_cmd(cmd):\n# construct minimal environment\nenv = {}\nfor k in [\"SYSTEMROOT\", \"PATH\", \"HOME\"]:\nv = os.environ.get(k)\nif v is not None:\nenv[k] = v\n# LANGUAGE is used on win32\nenv[\"LANGUAGE\"] = \"C\"\nenv[\"LANG\"] = \"C\"\nenv[\"LC_ALL\"] = \"C\"\nout = subprocess.check_output(cmd, stderr=subprocess.STDOUT, env=env)\nreturn out\n\ngit_version = \"Unknown\"\nif Path(\".git\").exists():\ntry:\nout = _minimal_ext_cmd([\"git\", \"rev-parse\", \"--short\", \"HEAD\"])\ngit_version = out.strip().decode(\"ascii\")\nexcept Exception:\npass\nelif Path(filename).exists():\n# must be a source distribution, use existing version file\ntry:\na = open(filename, \"r\")\nlines = a.readlines()\ngit_version = lines[-1].split('\"')[1]\nexcept Exception:\npass\nfinally:\na.close()\n\ntext = \"\"\"# THIS FILE IS GENERATED FROM SPACY SETUP.PY\n#\nGIT_VERSION = \"%(git_version)s\"\n\"\"\"\na = open(filename, \"w\")\ntry:\na.write(text % {\"git_version\": git_version})\nfinally:\na.close()\n\n\ndef clean(path):\nfor path in path.glob(\"**\/*\"):\nif path.is_file() and path.suffix in (\".so\", \".cpp\", \".html\"):\nprint(f\"Deleting {path.name}\")\npath.unlink()\n\n\ndef setup_package():\nwrite_git_info_py()\nif len(sys.argv) > 1 and sys.argv[1] == \"clean\":\nreturn clean(PACKAGE_ROOT)\n\nwith (PACKAGE_ROOT \/ \"about.py\").open(\"r\") as f:\nabout = {}\nexec(f.read(), about)\n\nfor copy_file, target_dir in COPY_FILES.items():\nif copy_file.exists():\nshutil.copy(str(copy_file), str(target_dir))\nprint(f\"Copied {copy_file} -> {target_dir}\")\n\ninclude_dirs = [\nnumpy.get_include(),\nget_python_inc(plat_specific=True),\n]\next_modules = []\nfor name in MOD_NAMES:\nmod_path = name.replace(\".\", \"\/\") + \".pyx\"\next = Extension(\nname,\n[mod_path],\nlanguage=\"c++\",\ninclude_dirs=include_dirs,\nextra_compile_args=[\"-std=c++11\"],\n)\next_modules.append(ext)\nprint(\"Cythonizing sources\")\next_modules = cythonize(ext_modules, compiler_directives=COMPILER_DIRECTIVES)\n\nsetup(\nname=\"spacy\",\npackages=PACKAGES,\nversion=about[\"__version__\"],\next_modules=ext_modules,\ncmdclass={\"build_ext\": build_ext_subclass},\npackage_data={\"\": [\"*.pyx\", \"*.pxd\", \"*.pxi\"]},\n)\n\n\nif __name__ == \"__main__\":\nsetup_package()\n"
    },
    {
        "package_name": "spacy_lookups_data-1.0.3",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py about.py bn_lemma_rules.json.gz bn_source.txt ca_lemma_exc.json.gz ca_lemma_index.json.gz ca_lemma_lookup.json.gz ca_lemma_rules.json.gz ca_license.txt cs_lemma_lookup.json.gz cs_lexeme_norm.json.gz da_lemma_lookup.json.gz da_lexeme_norm.json.gz de_lemma_lookup.json.gz de_lexeme_cluster.json.gz de_lexeme_norm.json.gz de_lexeme_prob.json.gz de_lexeme_settings.json.gz de_orth_variants.json.gz el_lemma_exc.json.gz el_lemma_index.json.gz el_lemma_rules.json.gz el_lexeme_norm.json.gz el_lexeme_prob.json.gz el_lexeme_settings.json.gz en_lemma_exc.json.gz en_lemma_index.json.gz en_lemma_lookup.json.gz en_lemma_rules.json.gz en_lexeme_cluster.json.gz en_lexeme_norm.json.gz en_lexeme_prob.json.gz en_lexeme_settings.json.gz en_license.txt en_orth_variants.json.gz es_lemma_exc.json.gz es_lemma_index.json.gz es_lemma_lookup.json.gz es_lemma_rules.json.gz es_lemma_rules_groups.json.gz es_lexeme_cluster.json.gz es_lexeme_prob.json.gz es_lexeme_settings.json.gz fa_lemma_exc.json.gz fa_lemma_index.json.gz fa_lemma_rules.json.gz fa_source.txt fr_lemma_exc.json.gz fr_lemma_index.json.gz fr_lemma_lookup.json.gz fr_lemma_rules.json.gz ga_lemma_lookup_adj.json.gz ga_lemma_lookup_adp.json.gz ga_lemma_lookup_noun.json.gz ga_lemma_lookup_verb.json.gz ga_license.txt grc_lemma_lookup.json.gz grc_lexeme_norm.json.gz hr_lemma_lookup.json.gz hr_license.txt hu_lemma_lookup.json.gz id_lemma_lookup.json.gz id_lexeme_norm.json.gz it_lemma_lookup.json.gz it_lemma_lookup_adj.json.gz it_lemma_lookup_adp.json.gz it_lemma_lookup_adv.json.gz it_lemma_lookup_aux.json.gz it_lemma_lookup_det.json.gz it_lemma_lookup_noun.json.gz it_lemma_lookup_num.json.gz it_lemma_lookup_other.json.gz it_lemma_lookup_pron.json.gz it_lemma_lookup_verb.json.gz it_license.txt lb_lemma_lookup.json.gz lb_lexeme_norm.json.gz lt_lemma_lookup.json.gz mk_lemma_exc.json.gz mk_lemma_index.json.gz mk_lemma_lookup.json.gz mk_lemma_rules.json.gz mk_lexeme_norm.json.gz nb_lemma_exc.json.gz nb_lemma_lookup.json.gz nb_lemma_rules.json.gz nb_license.txt nl_lemma_exc.json.gz nl_lemma_index.json.gz nl_lemma_lookup.json.gz nl_lemma_rules.json.gz pl_lemma_lookup_adj.json.gz pl_lemma_lookup_adp.json.gz pl_lemma_lookup_adv.json.gz pl_lemma_lookup_aux.json.gz pl_lemma_lookup_noun.json.gz pl_lemma_lookup_num.json.gz pl_lemma_lookup_part.json.gz pl_lemma_lookup_pron.json.gz pl_lemma_lookup_verb.json.gz pl_license.txt pt_lemma_lookup.json.gz pt_lexeme_norm.json.gz ro_lemma_lookup.json.gz ru_lemma_lookup.json.gz ru_lexeme_norm.json.gz sr_lemma_lookup.json.gz sr_lexeme_norm.json.gz sr_licence.txt sv_lemma_lookup.json.gz sv_lemma_rules.json.gz ta_lexeme_norm.json.gz th_lexeme_norm.json.gz tl_lemma_lookup.json.gz tr_lemma_lookup.json.gz tr_source.txt ur_lemma_lookup.json.gz conftest.py test_ca.py test_cs.py test_da.py test_de.py test_en.py test_entry_points.py test_fr.py test_ga.py test_grc.py test_hr.py test_it.py test_lb.py test_lt.py test_mk.py test_nl.py test_ro.py test_ru.py test_sr.py test_sv.py test_tr.py __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe",
        "setup.py": "#!\/usr\/bin\/env python\nfrom __future__ import unicode_literals\n\nimport os\nimport io\nfrom setuptools import setup, find_packages\n\n\ndef gzip_language_data(root, source):\nprint(\"Compressing language data\")\nimport gzip\nfrom pathlib import Path\n\nbase = Path(root) \/ source\nfor jsonfile in base.glob(\"**\/*.json\"):\noutfile = jsonfile.with_suffix(jsonfile.suffix + \".gz\")\nif outfile.is_file() and outfile.stat().st_mtime > jsonfile.stat().st_mtime:\n# If the gz is newer it doesn't need updating\nprint(\"Skipping {}, already compressed\".format(jsonfile))\ncontinue\nwith open(str(jsonfile), 'r', encoding=\"utf-8\") as infileh, gzip.open(str(outfile), 'w') as outfileh:\noutfileh.write(infileh.read().encode(\"utf-8\"))\nprint(\"Compressed {}\".format(jsonfile))\n\n\ndef setup_package():\npackage_name = \"spacy_lookups_data\"\nroot = os.path.abspath(os.path.dirname(__file__))\n\n# Read in package meta from about.py\nabout_path = os.path.join(root, package_name, \"about.py\")\nwith io.open(about_path, encoding=\"utf8\") as f:\nabout = {}\nexec(f.read(), about)\n\nif not os.path.exists(os.path.join(root, \"PKG-INFO\")):\ngzip_language_data(root, \"spacy_lookups_data\/data\")\n\nsetup(name=package_name, version=about[\"__version__\"], packages=find_packages())\n\n\nif __name__ == \"__main__\":\nsetup_package()\n"
    },
    {
        "package_name": "spacy_pkuseg-0.0.31",
        "file_list": "LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py config.py data.py default.pkl __init__.py download.py feature_extractor.cpp feature_extractor.pyx gradient.py inference.cpp inference.pyx model.py tagIndex.txt optimizer.py feature_extractor.cpp feature_extractor.pyx model.py __init__.py res_summarize.py scorer.py test_import.py __init__.py trainer.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "import setuptools\nimport os\nfrom distutils.extension import Extension\n\nimport numpy as np\n\ndef is_source_release(path):\nreturn os.path.exists(os.path.join(path, \"PKG-INFO\"))\n\ndef setup_package():\nroot = os.path.abspath(os.path.dirname(__file__))\nextensions = [\nExtension(\n\"spacy_pkuseg.inference\",\n[\"spacy_pkuseg\/inference.pyx\"],\ninclude_dirs=[np.get_include()],\nlanguage=\"c++\"\n),\nExtension(\n\"spacy_pkuseg.feature_extractor\",\n[\"spacy_pkuseg\/feature_extractor.pyx\"],\ninclude_dirs=[np.get_include()],\n),\nExtension(\n\"spacy_pkuseg.postag.feature_extractor\",\n[\"spacy_pkuseg\/postag\/feature_extractor.pyx\"],\ninclude_dirs=[np.get_include()],\n),\n]\n\nif not is_source_release(root):\nfrom Cython.Build import cythonize\nextensions = cythonize(extensions, annotate=True)\n\n\nsetuptools.setup(\nname=\"spacy_pkuseg\",\npackages=setuptools.find_packages(),\npackage_data={\"\": [\"*.txt*\", \"*.pkl\", \"*.npz\", \"*.pyx\", \"*.pxd\"]},\next_modules=extensions,\n)\n\n\nif __name__ == \"__main__\":\nsetup_package()\n"
    },
    {
        "package_name": "spark-sklearn-0.3.0",
        "file_list": "MANIFEST.in PKG-INFO README.rst setup.cfg setup.py base_search.py converter.py converter_test.py grid_search.py group_apply.py keyed_models.py random_search.py test_utils.py udt.py util.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "import codecs\nimport os\n\nfrom setuptools import setup\n# See this web page for explanations:\n# https:\/\/hynek.me\/articles\/sharing-your-labor-of-love-pypi-quick-and-dirty\/\nPACKAGES = [\"spark_sklearn\"]\nKEYWORDS = [\"spark\", \"scikit-learn\", \"distributed computing\", \"machine learning\"]\nCLASSIFIERS = [\n\"Programming Language :: Python :: 2.6\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.2\",\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"Natural Language :: English\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Topic :: Scientific\/Engineering\",\n]\nINSTALL_REQUIRES = [\"scikit-learn >=0.18.1, <0.20\"]\n\n# Project root\nROOT = os.path.abspath(os.getcwd() + \"\/\")\n\n\ndef read(*parts):\n\"\"\"\nBuild an absolute path from *parts* and and return the contents of the\nresulting file. Assume UTF-8 encoding.\n\"\"\"\nwith codecs.open(os.path.join(ROOT, *parts), \"rb\", \"utf-8\") as f:\nreturn f.read()\n\n\nsetup(\nname=\"spark-sklearn\",\ndescription=\"Integration tools for running scikit-learn on Spark\",\nlicense=\"Apache 2.0\",\nurl=\"https:\/\/github.com\/databricks\/spark-sklearn\",\nversion=\"0.3.0\",\nauthor=\"Joseph Bradley\",\nauthor_email=\"joseph@databricks.com\",\nmaintainer=\"Tim Hunter\",\nmaintainer_email=\"timhunter@databricks.com\",\nkeywords=KEYWORDS,\nlong_description=read(\"README.rst\"),\npackages=PACKAGES,\nclassifiers=CLASSIFIERS,\nzip_safe=False,\ninstall_requires=INSTALL_REQUIRES\n)\n"
    },
    {
        "package_name": "sparknlp-1.0.0",
        "file_list": "PKG-INFO README.md setup.cfg setup.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "\"\"\"A setuptools based setup module.\n\nSee:\nhttps:\/\/packaging.python.org\/en\/latest\/distributing.html\nhttps:\/\/github.com\/pypa\/sampleproject\n\"\"\"\n\n# Always prefer setuptools over distutils\nfrom setuptools import setup, find_packages\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\nlong_description = f.read()\n\nREQUIRED_PKGS = [\n'spark-nlp',\n'numpy'\n]\n\n# Arguments marked as \"Required\" below must be included for upload to PyPI.\n# Fields marked as \"Optional\" may be commented out.\n\nsetup(\n# This is the name of your project. The first time you publish this\n# package, this name will be registered for you. It will determine how\n# users can install this project, e.g.:\n#\n# $ pip install sampleproject\n#\n# And where it will live on PyPI: https:\/\/pypi.org\/project\/sampleproject\/\n#\n# There are some restrictions on what makes a valid project name\n# specification here:\n# https:\/\/packaging.python.org\/specifications\/core-metadata\/#name\nname='sparknlp', # Required\n\n# Versions should comply with PEP 440:\n# https:\/\/www.python.org\/dev\/peps\/pep-0440\/\n#\n# For a discussion on single-sourcing the version across setup.py and the\n# project code, see\n# https:\/\/packaging.python.org\/en\/latest\/single_source_version.html\n\nversion='1.0.0', # Required\n\n# This is a one-line description or tagline of what your project does. This\n# corresponds to the \"Summary\" metadata field:\n# https:\/\/packaging.python.org\/specifications\/core-metadata\/#summary\ndescription='John Snow Labs Spark NLP is a natural language processing library built on top of Apache Spark ML. It provides simple, performant & accurate NLP annotations for machine learning pipelines, that scale easily in a distributed environment.', # Required\n\n# This is an optional longer description of your project that represents\n# the body of text which users will see when they visit PyPI.\n#\n# Often, this is the same as your README, so you can just read it in from\n# that file directly (as we have already done above)\n#\n# This field corresponds to the \"Description\" metadata field:\n# https:\/\/packaging.python.org\/specifications\/core-metadata\/#description-optional\nlong_description=long_description, # Optional\ninstall_requires=REQUIRED_PKGS,\n\n# Denotes that our long_description is in Markdown; valid values are\n# text\/plain, text\/x-rst, and text\/markdown\n#\n# Optional if long_description is written in reStructuredText (rst) but\n# required for plain-text or Markdown; if unspecified, \"applications should\n# attempt to render [the long_description] as text\/x-rst; charset=UTF-8 and\n# fall back to text\/plain if it is not valid rst\" (see link below)\n#\n# This field corresponds to the \"Description-Content-Type\" metadata field:\n# https:\/\/packaging.python.org\/specifications\/core-metadata\/#description-content-type-optional\nlong_description_content_type='text\/markdown', # Optional (see note above)\n\n# This should be a valid link to your project's main homepage.\n#\n# This field corresponds to the \"Home-Page\" metadata field:\n# https:\/\/packaging.python.org\/specifications\/core-metadata\/#home-page-optional\nurl='http:\/\/nlp.johnsnowlabs.com', # Optional\n\n# This should be your name or the name of the organization which owns the\n# project.\nauthor='John Snow Labs', # Optional\n\n# This should be a valid email address corresponding to the author listed\n# above.\n# author_email='pypa-dev@googlegroups.com', # Optional\n\n# Classifiers help users find your project by categorizing it.\n#\n# For a list of valid classifiers, see https:\/\/pypi.org\/classifiers\/\nclassifiers=[ # Optional\n# How mature is this project? Common values are\n# 3 - Alpha\n# 4 - Beta\n# 5 - Production\/Stable\n'Development Status :: 5 - Production\/Stable',\n\n# Indicate who your project is intended for\n'Intended Audience :: Developers',\n'Topic :: Software Development :: Build Tools',\n\n# Pick your license as you wish\n'License :: OSI Approved :: Apache Software License',\n\n# Specify the Python versions you support here. In particular, ensure\n# that you indicate whether you support Python 2, Python 3 or both.\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n],\n\n# This field adds keywords for your project which will appear on the\n# project page. What does your project relate to?\n#\n# Note that this is a string of words separated by whitespace, not a list.\nkeywords='NLP spark development', # Optional\n\n# You can just specify package directories manually here if your project is\n# simple. Or you can use find_packages().\n#\n# Alternatively, if you just want to distribute a single Python file, use\n# the `py_modules` argument instead as follows, which will expect a file\n# called `my_module.py` to exist:\n#\n# py_modules=[\"my_module\"],\n\npackages=find_packages(exclude=['test']),\n\ninclude_package_data=False # Needed to install jar file\n\n)\n"
    },
    {
        "package_name": "speedtest-cli-2.1.3",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py speedtest.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n# Copyright 2012 Matt Martz\n# All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n\nimport os\nimport re\nimport codecs\n\nfrom setuptools import setup\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n\n# Read the version number from a source file.\n# Why read it, and not import?\n# see https:\/\/groups.google.com\/d\/topic\/pypa-dev\/0PkjVpcxTzQ\/discussion\ndef find_version(*file_paths):\n# Open in Latin-1 so that we avoid encoding errors.\n# Use codecs.open for Python 2 compatibility\ntry:\nf = codecs.open(os.path.join(here, *file_paths), 'r', 'latin1')\nversion_file = f.read()\nf.close()\nexcept:\nraise RuntimeError(\"Unable to find version string.\")\n\n# The version line must have the form\n# __version__ = 'ver'\nversion_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\nversion_file, re.M)\nif version_match:\nreturn version_match.group(1)\nraise RuntimeError(\"Unable to find version string.\")\n\n\n# Get the long description from the relevant file\ntry:\nf = codecs.open('README.rst', encoding='utf-8')\nlong_description = f.read()\nf.close()\nexcept:\nlong_description = ''\n\n\nsetup(\nname='speedtest-cli',\nversion=find_version('speedtest.py'),\ndescription=('Command line interface for testing internet bandwidth using '\n'speedtest.net'),\nlong_description=long_description,\nkeywords='speedtest speedtest.net',\nauthor='Matt Martz',\nauthor_email='matt@sivel.net',\nurl='https:\/\/github.com\/sivel\/speedtest-cli',\nlicense='Apache License, Version 2.0',\npy_modules=['speedtest'],\nentry_points={\n'console_scripts': [\n'speedtest=speedtest:main',\n'speedtest-cli=speedtest:main'\n]\n},\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Programming Language :: Python',\n'Environment :: Console',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.4',\n'Programming Language :: Python :: 2.5',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.1',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n]\n)\n"
    },
    {
        "package_name": "sphinx_rtd_theme-1.0.0",
        "file_list": "Apache-License-2.0.txt babel.cfg preinstall.js LICENSE MANIFEST.in OFL-License.txt package.json PKG-INFO README.rst setup.cfg setup.py breadcrumbs.html footer.html layout.html sphinx.mo sphinx.po sphinx.mo sphinx.po sphinx.mo sphinx.po sphinx.mo sphinx.po sphinx.mo sphinx.po sphinx.mo sphinx.po sphinx.mo sphinx.po sphinx.mo sphinx.po sphinx.mo sphinx.po sphinx.mo sphinx.po sphinx.mo sphinx.po sphinx.mo sphinx.po sphinx.mo sphinx.po sphinx.pot sphinx.mo sphinx.po sphinx.mo sphinx.po sphinx.mo sphinx.po search.html searchbox.html badge_only.css fontawesome-webfont.eot fontawesome-webfont.svg fontawesome-webfont.ttf fontawesome-webfont.woff fontawesome-webfont.woff2 lato-bold-italic.woff lato-bold-italic.woff2 lato-bold.woff lato-bold.woff2 lato-normal-italic.woff lato-normal-italic.woff2 lato-normal.woff lato-normal.woff2 Roboto-Slab-Bold.woff Roboto-Slab-Bold.woff2 Roboto-Slab-Regular.woff Roboto-Slab-Regular.woff2 theme.css badge_only.js html5shiv-printshiv.min.js html5shiv.min.js theme.js theme.conf versions.html __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt bar.rst conf.py foo.rst index.rst conf.py index.rst conf.py index.rst test_builders.py util.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\n\nimport distutils.cmd\nimport os\nimport subprocess\nfrom io import open\n\nfrom setuptools import setup\n\n\nclass WebpackBuildCommand(distutils.cmd.Command):\n\ndescription = \"Generate static assets\"\n\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nif not 'CI' in os.environ and not 'TOX_ENV_NAME' in os.environ:\nsubprocess.run(['npm', 'install'], check=True)\nsubprocess.run(['node_modules\/.bin\/webpack', '--config', 'webpack.prod.js'], check=True)\n\n\nclass WebpackDevelopCommand(distutils.cmd.Command):\n\ndescription = \"Run Webpack dev server\"\n\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nsubprocess.run(\n[\"node_modules\/.bin\/webpack-dev-server\", \"--open\", \"--config\", \"webpack.dev.js\"],\ncheck=True\n)\n\n\nclass UpdateTranslationsCommand(distutils.cmd.Command):\n\ndescription = \"Run all localization commands\"\n\nuser_options = []\nsub_commands = [\n('extract_messages', None),\n('update_catalog', None),\n('transifex', None),\n('compile_catalog', None),\n]\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nfor cmd_name in self.get_sub_commands():\nself.run_command(cmd_name)\n\n\nclass TransifexCommand(distutils.cmd.Command):\n\ndescription = \"Update translation files through Transifex\"\n\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nsubprocess.run(['tx', 'push', '--source'], check=True)\nsubprocess.run(['tx', 'pull', '--mode', 'onlyreviewed', '-f', '-a'], check=True)\n\n\nsetup(\nname='sphinx_rtd_theme',\nversion='1.0.0',\nurl='https:\/\/github.com\/readthedocs\/sphinx_rtd_theme',\nlicense='MIT',\nauthor='Dave Snider, Read the Docs, Inc. & contributors',\nauthor_email='dev@readthedocs.org',\ndescription='Read the Docs theme for Sphinx',\nlong_description=open('README.rst', encoding='utf-8').read(),\ncmdclass={\n'update_translations': UpdateTranslationsCommand,\n'transifex': TransifexCommand,\n'build_assets': WebpackBuildCommand,\n'watch': WebpackDevelopCommand,\n},\nzip_safe=False,\npackages=['sphinx_rtd_theme'],\npackage_data={'sphinx_rtd_theme': [\n'theme.conf',\n'*.html',\n'static\/css\/*.css',\n'static\/css\/fonts\/*.*',\n'static\/js\/*.js',\n]},\ninclude_package_data=True,\n# See http:\/\/www.sphinx-doc.org\/en\/stable\/theming.html#distribute-your-theme-as-a-python-package\nentry_points = {\n'sphinx.html_themes': [\n'sphinx_rtd_theme = sphinx_rtd_theme',\n]\n},\npython_requires='>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*',\ninstall_requires=[\n'sphinx>=1.6',\n'docutils<0.18',\n],\ntests_require=[\n'pytest',\n],\nextras_require={\n'dev': [\n'transifex-client',\n'sphinxcontrib-httpdomain',\n'bump2version',\n],\n},\nclassifiers=[\n'Framework :: Sphinx',\n'Framework :: Sphinx :: Theme',\n'Development Status :: 5 - Production\/Stable',\n'License :: OSI Approved :: MIT License',\n'Environment :: Console',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Operating System :: OS Independent',\n'Topic :: Documentation',\n'Topic :: Software Development :: Documentation',\n],\nproject_urls={\n'Homepage': 'https:\/\/sphinx-rtd-theme.readthedocs.io\/',\n'Source Code': 'https:\/\/github.com\/readthedocs\/sphinx_rtd_theme',\n'Issue Tracker': 'https:\/\/github.com\/readthedocs\/sphinx_rtd_theme\/issues',\n},\n)\n"
    },
    {
        "package_name": "sphinxcontrib-devhelp-1.0.2",
        "file_list": "CHANGES LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py config sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.pot sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po sphinxcontrib.devhelp.mo sphinxcontrib.devhelp.po version.py __init__.py __init__.py dependency_links.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt conftest.py conf.py index.rst test_devhelp.py tox.ini",
        "setup.py": "# -*- coding: utf-8 -*-\nimport os\nfrom setuptools import setup, find_packages\n\nlong_desc = '''\nsphinxcontrib-devhelp is a sphinx extension which outputs Devhelp document.\n'''\n\nextras_require = {\n'test': [\n'pytest',\n],\n'lint': [\n'flake8',\n'mypy',\n'docutils-stubs',\n],\n}\n\n\ndef get_version():\n\"\"\"Get version number of the package from version.py without importing core module.\"\"\"\npackage_dir = os.path.abspath(os.path.dirname(__file__))\nversion_file = os.path.join(package_dir, 'sphinxcontrib\/devhelp\/version.py')\n\nnamespace = {}\nwith open(version_file, 'rt') as f:\nexec(f.read(), namespace)\n\nreturn namespace['__version__']\n\n\nsetup(\nname='sphinxcontrib-devhelp',\nversion=get_version(),\nurl='http:\/\/sphinx-doc.org\/',\ndownload_url='https:\/\/pypi.org\/project\/sphinxcontrib-devhelp\/',\nlicense='BSD',\nauthor='Georg Brandl',\nauthor_email='georg@python.org',\ndescription=long_desc.strip().replace('\\n', ' '),\nlong_description=long_desc,\nzip_safe=False,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'Intended Audience :: Education',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Framework :: Sphinx',\n'Framework :: Sphinx :: Extension',\n'Topic :: Documentation',\n'Topic :: Documentation :: Sphinx',\n'Topic :: Text Processing',\n'Topic :: Utilities',\n],\nplatforms='any',\npython_requires=\">=3.5\",\npackages=find_packages(exclude=['tests']),\ninclude_package_data=True,\nextras_require=extras_require,\nnamespace_packages=['sphinxcontrib'],\n)\n"
    },
    {
        "package_name": "sphinxcontrib-httpdomain-1.8.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py bottle.py common.py flask.py flaskqref.py flask_base.py tornado.py __init__.py httpdomain.py __init__.py dependency_links.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom __future__ import with_statement\n\nfrom setuptools import setup, find_packages\n\n\nrequires = [\n'Sphinx >= 1.6',\n'six',\n]\n\n\ndef readme():\ntry:\nwith open('README.rst') as f:\nreturn f.read()\nexcept IOError:\npass\n\n\nsetup(\nname='sphinxcontrib-httpdomain',\nversion='1.8.0',\nurl='https:\/\/github.com\/sphinx-contrib\/httpdomain',\ndownload_url='https:\/\/pypi.org\/project\/sphinxcontrib-httpdomain\/',\nlicense='BSD',\nauthor='Hong Minhee, Ash Berlin-Taylor',\nauthor_email='Hong Minhee <\\x68\\x6f\\x6e\\x67.minhee' '@' '\\x67\\x6d\\x61\\x69\\x6c.com>, Ash Berlin-Taylor <ash_github@firemirror.com>',\ndescription='Sphinx domain for documenting HTTP APIs',\nlong_description=readme(),\nzip_safe=False,\npython_requires='>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Topic :: Documentation',\n'Topic :: Utilities',\n],\nplatforms='any',\npackages=find_packages(),\ninclude_package_data=True,\ninstall_requires=requires,\nnamespace_packages=['sphinxcontrib'],\n)\n"
    },
    {
        "package_name": "sphinxcontrib-jsmath-1.0.1",
        "file_list": "CHANGES LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py version.py __init__.py __init__.py dependency_links.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt conftest.py conf.py index.rst math.rst conf.py index.rst test_jsmath.py tox.ini",
        "setup.py": "# -*- coding: utf-8 -*-\nimport os\nfrom setuptools import setup, find_packages\n\nlong_desc = '''\nsphinxcontrib-jsmath is a sphinx extension which renders display math in HTML\nvia JavaScript.\n'''\n\nextras_require = {\n'test': [\n'pytest',\n'flake8',\n'mypy',\n],\n}\n\n\ndef get_version():\n\"\"\"Get version number of the package from version.py without importing core module.\"\"\"\npackage_dir = os.path.abspath(os.path.dirname(__file__))\nversion_file = os.path.join(package_dir, 'sphinxcontrib\/jsmath\/version.py')\n\nnamespace = {}\nwith open(version_file, 'rt') as f:\nexec(f.read(), namespace)\n\nreturn namespace['__version__']\n\n\nsetup(\nname='sphinxcontrib-jsmath',\nversion=get_version(),\nurl='http:\/\/sphinx-doc.org\/',\ndownload_url='https:\/\/pypi.org\/project\/sphinxcontrib-jsmath\/',\nlicense='BSD',\nauthor='Georg Brandl',\nauthor_email='georg@python.org',\ndescription='A sphinx extension which renders display math in HTML via JavaScript',\nlong_description=long_desc,\nzip_safe=False,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'Intended Audience :: Education',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Framework :: Sphinx',\n'Framework :: Sphinx :: Extension',\n'Topic :: Documentation',\n'Topic :: Documentation :: Sphinx',\n'Topic :: Text Processing',\n'Topic :: Utilities',\n],\nplatforms='any',\npython_requires=\">=3.5\",\npackages=find_packages(exclude=['tests']),\ninclude_package_data=True,\nextras_require=extras_require,\nnamespace_packages=['sphinxcontrib'],\n)\n"
    },
    {
        "package_name": "sphinxcontrib-plantuml-0.24",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py plantuml.py __init__.py dependency_links.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "# -*- coding: utf-8 -*-\n\nfrom setuptools import setup, find_packages\n\nlong_desc = open('README.rst').read()\n\nsetup(\nname='sphinxcontrib-plantuml',\nversion='0.24',\nurl='https:\/\/github.com\/sphinx-contrib\/plantuml\/',\ndownload_url='https:\/\/pypi.python.org\/pypi\/sphinxcontrib-plantuml',\nlicense='BSD',\nauthor='Yuya Nishihara',\nauthor_email='yuya@tcha.org',\ndescription='Sphinx \"plantuml\" extension',\nlong_description=long_desc,\nzip_safe=False,\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Environment :: Console',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Topic :: Documentation',\n'Topic :: Utilities',\n],\nplatforms='any',\npackages=find_packages(),\ninclude_package_data=True,\nnamespace_packages=['sphinxcontrib'],\n)\n"
    },
    {
        "package_name": "sphinxcontrib-websupport-1.2.4",
        "file_list": "CHANGES LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py builder.py core.py errors.py ajax-loader.gif comment-bright.png comment-close.png comment.png down-pressed.png down.png up-pressed.png up.png websupport.js nullsearch.py whooshsearch.py xapiansearch.py __init__.py differ.py sqlalchemystorage.py sqlalchemy_db.py __init__.py searchresults.html utils.py version.py writer.py __init__.py __init__.py dependency_links.txt entry_points.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt autodoc_fodder.py autodoc_missing_imports.py bom.po bom.txt conf.py contents.txt localized.txt ext.py extapi.txt extensions.txt footnote.txt images.txt img.foo.png img.gif img.pdf img.png includes.txt lists.txt literal.inc literal_orig.inc Makefile markup.txt math.txt metadata.add objects.txt parsermod.py quotes.inc rimg.png robots.txt api.h code.py excluded.txt images.txt img.png include.inc includes.txt simg.png subdir.po svgimg.pdf svgimg.svg tabs.inc templated.css_t test.inc layout.html staticimg.png statictmpl.html_t theme.conf wrongenc.inc ziptheme.zip excluded.css README foo.css contentssb.html customsb.html layout.html conf.py markup.txt test_searchadapters.py test_websupport.py util.py tox.ini",
        "setup.py": "# -*- coding: utf-8 -*-\nimport os\nfrom setuptools import setup, find_packages\n\nlong_desc = '''\nsphinxcontrib-websupport provides a Python API to easily integrate Sphinx\ndocumentation into your Web application.\n'''\n\nextras_require = {\n# Environment Marker works for wheel 0.24 or later\n'test': [\n'pytest',\n'sqlalchemy',\n'whoosh',\n'Sphinx',\n],\n'lint': [\n'flake8',\n],\n}\n\n\ndef get_version():\n\"\"\"Get version number of the package from version.py without importing core module.\"\"\"\npackage_dir = os.path.abspath(os.path.dirname(__file__))\nversion_file = os.path.join(package_dir, 'sphinxcontrib\/websupport\/version.py')\n\nnamespace = {}\nwith open(version_file, 'rt') as f:\nexec(f.read(), namespace)\n\nreturn namespace['__version__']\n\n\nsetup(\nname='sphinxcontrib-websupport',\nversion=get_version(),\nurl='http:\/\/sphinx-doc.org\/',\ndownload_url='https:\/\/pypi.org\/project\/sphinxcontrib-websupport\/',\nlicense='BSD',\nauthor='Georg Brandl',\nauthor_email='georg@python.org',\ndescription='Sphinx API for Web Apps',\nlong_description=long_desc,\nzip_safe=False,\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'Intended Audience :: Education',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Framework :: Sphinx',\n'Framework :: Sphinx :: Extension',\n'Topic :: Documentation',\n'Topic :: Documentation :: Sphinx',\n'Topic :: Text Processing',\n'Topic :: Utilities',\n],\nplatforms='any',\npython_requires=\">=3.5\",\npackages=find_packages(exclude=['tests']),\ninclude_package_data=True,\ninstall_requires=[\n'sphinxcontrib-serializinghtml',\n],\nextras_require=extras_require,\nentry_points={\n'sphinx.builders': [\n'websupport = sphinxcontrib.websupport.builder:WebSupportBuilder',\n],\n},\nnamespace_packages=['sphinxcontrib'],\n)\n"
    },
    {
        "package_name": "splink-3.1.0",
        "file_list": "LICENSE PKG-INFO pyproject.toml README.md setup.py accuracy.py analyse_blocking.py athena_comparison_level_library.py athena_comparison_library.py athena_linker.py athena_utils.py blocking.py block_from_labels.py charts.py cluster_studio.py comparison.py comparison_level.py comparison_level_library.py comparison_library.py comparison_vector_distribution.py comparison_vector_values.py connected_components.py convert_v2_to_v3.py default_from_jsonschema.py duckdb_comparison_level_library.py duckdb_comparison_library.py duckdb_linker.py em_training_session.py estimate_u.py expectation_maximisation.py blocking_rule_generated_comparisons.json completeness.json bayes_factor_history_chart_def.json bayes_factor_intuition_chart_def.json compare_estimates.json gamma_distribution_chart_def.json gamma_histogram.json score_histogram.json match_weights_interactive_history.json match_weights_waterfall.json match_weight_histogram.json missingness.json m_u_parameters_interactive_history.json parameter_estimate_comparisons.json precision_recall.json probability_two_random_records_match_iteration.json profile_data.json roc.json unlinkables_chart_def.json vega-embed@6.20.2 vega-lite@5.2.0 vega@5.21.0 settings_jsonschema.json scala-udf-similarity-0.0.9.jar cluster_template.j2 custom.css custom.css template.j2 splink_vis_utils.js single_chart_template.txt format_sql.py input_column.py linker.py logging_messages.py lower_id_on_lhs.py match_key_analysis.py match_weights_histogram.py misc.py missingness.py m_from_labels.py m_training.py m_u_records_to_parameters.py parse_sql.py pipeline.py predict.py profile_data.py settings.py jar_location.py spark_comparison_level_library.py spark_comparison_library.py spark_linker.py splink_comparison_viewer.py splink_dataframe.py sqlite_comparison_level_library.py sqlite_comparison_library.py sqlite_linker.py sql_transform.py term_frequencies.py unique_id_concat.py unlinkables.py validate_jsonschema.py vertically_concatenate.py waterfall_chart.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['splink', 'splink.athena', 'splink.duckdb', 'splink.spark', 'splink.sqlite']\n\npackage_data = \\\n{'': ['*'],\n'splink': ['files\/*',\n'files\/chart_defs\/*',\n'files\/chart_defs\/del\/*',\n'files\/external_js\/*',\n'files\/spark_jars\/*',\n'files\/splink_cluster_studio\/*',\n'files\/splink_comparison_viewer\/*',\n'files\/splink_vis_utils\/*',\n'files\/templates\/*']}\n\ninstall_requires = \\\n['Jinja2>=3.0.3,<4.0.0',\n'altair>=4.2.0,<5.0.0',\n'duckdb>=0.4.0,<0.5.0',\n'jsonschema>=3.2,<4.0',\n'pandas>=1.0.0,<2.0.0',\n'sqlglot>=4.0.0,<5.0.0']\n\nsetup_kwargs = {\n'name': 'splink',\n'version': '3.1.0',\n'description': 'Fast probabilistic data linkage at scale',\n'long_description': '![image](https:\/\/user-images.githubusercontent.com\/7570107\/85285114-3969ac00-b488-11ea-88ff-5fca1b34af1f.png)\\n[![pypi](https:\/\/img.shields.io\/github\/v\/release\/moj-analytical-services\/splink?include_prereleases)](https:\/\/pypi.org\/project\/splink\/#history)\\n[![Downloads](https:\/\/pepy.tech\/badge\/splink\/month)](https:\/\/pepy.tech\/project\/splink)\\n[![Documentation](https:\/\/img.shields.io\/badge\/API-documentation-blue)](https:\/\/moj-analytical-services.github.io\/splink\/)\\n\\n# Fast, accurate and scalable probabilistic data linkage using your choice of SQL backend.\\n\\n`splink` is a Python package for probabilistic record linkage (entity resolution).\\n\\nIts key features are:\\n\\n- It is extremely fast. It is capable of linking a million records on a laptop in around a minute.\\n\\n- It is highly accurate, with support for term frequency adjustments, and sophisticated fuzzy matching logic.\\n\\n- Linking jobs can be executed in Python (using the `DuckDB` package), or using big-data backends like `AWS Athena` and `Spark` to link 100+ million records.\\n\\n- Training data is not required because models can be trained using an unsupervised approach.\\n\\n- It produces a wide variety of interactive outputs, helping users to understand their model and diagnose linkage problems.\\n\\nThe core linkage algorithm is an implementation of Fellegi-Sunter\\'s model of record linkage, with various customisations to improve accuracy.\\n\\n## What does Splink do?\\n\\nSplink deduplicates and links records from datasets that lack a unique identifier.\\n\\nFor example, a few of your records may look like this:\\n\\n| row_id | first_name | surname | dob | city |\\n| ------ | ---------- | ------- | ---------- | ---------- |\\n| 1 | lucas | smith | 1984-01-02 | London |\\n| 2 | lucas | smyth | 1984-07-02 | Manchester |\\n| 3 | lucas | smyth | 1984-07-02 | |\\n| 4 | david | jones | | Leeds |\\n| 5 | david | jones | 1990-03-21 | Leeds |\\n\\nSplink produces pairwise predictions of the links:\\n\\n| row_id_l | row_id_r | match_probability |\\n| -------- | -------- | ----------------- |\\n| 1 | 2 | 0.9 |\\n| 1 | 3 | 0.85 |\\n| 2 | 3 | 0.92 |\\n| 4 | 5 | 0.7 |\\n\\nAnd clusters the predictions to produce an estimated unique id:\\n\\n| cluster_id | row_id |\\n| ---------- | ------ |\\n| a | 1 |\\n| a | 2 |\\n| a | 3 |\\n| b | 4 |\\n| b | 5 |\\n\\n## Documentation\\n\\nThe homepage for the Splink documentation can be found [here](https:\/\/moj-analytical-services.github.io\/splink\/). Interactive demos can be found [here](https:\/\/github.com\/moj-analytical-services\/splink_demos\/tree\/splink3_demos), or by clicking the following Binder link:\\n\\n[![Binder](https:\/\/mybinder.org\/badge.svg)](https:\/\/mybinder.org\/v2\/gh\/moj-analytical-services\/splink_demos\/splink3_demos?urlpath=lab)\\n\\nThe specification of the Fellegi Sunter statistical model behind `splink` is similar as that used in the R [fastLink package](https:\/\/github.com\/kosukeimai\/fastLink). Accompanying the fastLink package is an [academic paper](http:\/\/imai.fas.harvard.edu\/research\/files\/linkage.pdf) that describes this model. A [series of interactive articles](https:\/\/www.robinlinacre.com\/probabilistic_linkage\/) also explores the theory behind Splink.\\n\\n## Installation\\n\\nSplink supports python 3.7+. To obtain the latest released version of splink:\\n\\n```\\npip install splink\\n```\\n\\n## Quickstart\\n\\nThe following code demonstrates how to estimate the parameters of a deduplication model, and then use it to identify duplicate records.\\n\\nFor more detailed tutorials, please see [here](https:\/\/github.com\/moj-analytical-services\/splink_demos\/tree\/splink3_demos).\\n\\n```\\nfrom splink.duckdb.duckdb_linker import DuckDBLinker\\nfrom splink.duckdb.duckdb_comparison_library import (\\n exact_match,\\n levenshtein_at_thresholds,\\n)\\n\\nimport pandas as pd\\ndf = pd.read_csv(\".\/tests\/datasets\/fake_1000_from_splink_demos.csv\")\\n\\nsettings = {\\n \"link_type\": \"dedupe_only\",\\n \"blocking_rules_to_generate_predictions\": [\\n \"l.first_name = r.first_name\",\\n \"l.surname = r.surname\",\\n ],\\n \"comparisons\": [\\n levenshtein_at_thresholds(\"first_name\", 2),\\n exact_match(\"surname\"),\\n exact_match(\"dob\"),\\n exact_match(\"city\", term_frequency_adjustments=True),\\n exact_match(\"email\"),\\n ],\\n}\\n\\nlinker = DuckDBLinker(df, settings)\\nlinker.estimate_u_using_random_sampling(target_rows=1e6)\\n\\nblocking_rule_for_training = \"l.first_name = r.first_name and l.surname = r.surname\"\\nlinker.estimate_parameters_using_expectation_maximisation(blocking_rule_for_training)\\n\\nblocking_rule_for_training = \"l.dob = r.dob\"\\nlinker.estimate_parameters_using_expectation_maximisation(blocking_rule_for_training)\\n\\nscored_comparisons = linker.predict()\\nscored_comparisons.as_pandas_dataframe(limit=5)\\n\\n```\\n\\n## Acknowledgements\\n\\nWe are very grateful to [ADR UK](https:\/\/www.adruk.org\/) (Administrative Data Research UK) for providing the initial funding for this work as part of the [Data First](https:\/\/www.adruk.org\/our-work\/browse-all-projects\/data-first-harnessing-the-potential-of-linked-administrative-data-for-the-justice-system-169\/) project.\\n\\nWe are extremely grateful to professors Katie Harron, James Doidge and Peter Christen for their expert advice and guidance in the development of Splink. We are also very grateful to colleagues at the UK\\'s Office for National Statistics for their expert advice and peer review of this work. Any errors remain our own.\\n',\n'author': 'Robin Linacre',\n'author_email': 'robinlinacre@hotmail.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/moj-analytical-services\/splink',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "splinter-0.18.1",
        "file_list": "AUTHORS LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py browser.py cookie_manager.py djangoclient.py element_present.py find_links.py flaskclient.py lxmldriver.py chrome.py cookie_manager.py edge.py firefox.py remote.py remote_connection.py __init__.py xpath_utils.py zopetestbrowser.py __init__.py element_list.py exceptions.py meta.py status_code.py __init__.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "# -*- coding: utf-8 -*-\n\n# Copyright 2012 splinter authors. All rights reserved.\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\nimport os\n\nfrom setuptools import setup, find_packages\n\n\ndef read(filename: str) -> str:\npath = os.path.join(os.path.dirname(__file__), filename)\nwith open(path, 'r') as f:\nreturn f.read()\n\n\ndef get_version_data() -> dict:\ndata = {}\n\npath = os.path.join(os.path.dirname(__file__), 'splinter', 'version.py')\n\nwith open(path) as fp:\nexec(fp.read(), data)\n\nreturn data\n\n\nversion_data = get_version_data()\n\n\nsetup(\nname=\"splinter\",\nversion=version_data['__version__'],\nurl=\"https:\/\/github.com\/cobrateam\/splinter\",\ndescription=\"browser abstraction for web acceptance testing\",\nlong_description=read('README.rst'),\nauthor=\"CobraTeam\",\nauthor_email=\"andrewsmedina@gmail.com\",\nlicense=\"BSD\",\nclassifiers=[\n\"License :: OSI Approved :: BSD License\",\n\"Programming Language :: Python :: 3\",\n]\n+ [(\"Programming Language :: Python :: %s\" % x) for x in \"3.7 3.8 3.9 3.10\".split()],\nproject_urls={\n\"Documentation\": \"https:\/\/splinter.readthedocs.io\/\",\n\"Changelog\": \"https:\/\/github.com\/cobrateam\/splinter\/tree\/master\/docs\/news\",\n\"Source\": \"https:\/\/github.com\/cobrateam\/splinter\/\",\n\"Tracker\": \"https:\/\/github.com\/cobrateam\/splinter\/issues\",\n},\npackages=find_packages(exclude=[\"docs\", \"tests\", \"samples\"]),\ninclude_package_data=True,\ninstall_requires=[],\nextras_require={\n\"zope.testbrowser\": [\"zope.testbrowser>=5.5.1\", \"lxml>=4.2.4\", \"cssselect\"],\n\"django\": [\"Django>=2.0.6\", \"lxml>=4.2.4\", \"cssselect\"],\n\"flask\": [\"Flask>=2.0.2\", \"lxml>=4.2.4\", \"cssselect\"],\n\"edge\": [\"msedge-selenium-tools\"],\n\"selenium3\": [\"selenium>=3.141.0,<4.0\"],\n\"selenium4\": [\"selenium>=4.1.0,<5.0\"],\n},\ntests_require=[\"coverage\", \"flask\"],\n)\n"
    },
    {
        "package_name": "sqlalchemy-cockroachdb-1.4.3",
        "file_list": "__init__.py LICENSE PKG-INFO README.md setup.cfg setup.py asyncpg.py base.py ddl_compiler.py provision.py psycopg2.py requirements.py stmt_compiler.py transaction.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt test_aaa_run_transaction_session.py test_aab_run_transaction_core.py test_across_schema.py test_introspection.py test_json.py test_suite_alembic.py test_suite_sqlalchemy.py",
        "setup.py": "import os\nimport re\n\nfrom setuptools import setup, find_packages\n\nwith open(os.path.join(os.path.dirname(__file__), \"sqlalchemy_cockroachdb\", \"__init__.py\")) as v:\nVERSION = re.compile(r'.*__version__ = \"(.*?)\"', re.S).match(v.read()).group(1)\n\nwith open(os.path.join(os.path.dirname(__file__), \"README.md\")) as f:\nREADME = f.read()\n\nsetup(\nname=\"sqlalchemy-cockroachdb\",\nversion=VERSION,\nauthor=\"Cockroach Labs\",\nauthor_email=\"cockroach-db@googlegroups.com\",\nurl=\"https:\/\/github.com\/cockroachdb\/sqlalchemy-cockroachdb\",\ndescription=\"CockroachDB dialect for SQLAlchemy\",\nlong_description=README,\nlong_description_content_type=\"text\/markdown\",\nlicense=\"http:\/\/www.apache.org\/licenses\/LICENSE-2.0\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n],\nkeywords=\"SQLAlchemy CockroachDB\",\nproject_urls={\n\"Documentation\": \"https:\/\/github.com\/cockroachdb\/sqlalchemy-cockroachdb\/wiki\",\n\"Source\": \"https:\/\/github.com\/cockroachdb\/sqlalchemy-cockroachdb\",\n\"Tracker\": \"https:\/\/github.com\/cockroachdb\/sqlalchemy-cockroachdb\/issues\",\n},\npackages=find_packages(include=[\"sqlalchemy_cockroachdb\"]),\ninclude_package_data=True,\ninstall_requires=[\"SQLAlchemy\"],\nzip_safe=False,\nentry_points={\n\"sqlalchemy.dialects\": [\n\"cockroachdb = sqlalchemy_cockroachdb.psycopg2:CockroachDBDialect_psycopg2\",\n\"cockroachdb.psycopg2 = sqlalchemy_cockroachdb.psycopg2:CockroachDBDialect_psycopg2\",\n\"cockroachdb.asyncpg = sqlalchemy_cockroachdb.asyncpg:CockroachDBDialect_asyncpg\",\n],\n},\n)\n"
    },
    {
        "package_name": "SQLAlchemy-Continuum-1.3.12",
        "file_list": "CHANGES.rst alembic.rst api.rst conf.py configuration.rst index.rst intro.rst license.rst make.bat Makefile native_versioning.rst plugins.rst queries.rst revert.rst schema.rst transactions.rst utilities.rst version_objects.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py builder.py postgresql.py __init__.py exc.py expression_reflector.py factory.py fetcher.py manager.py model_builder.py operation.py activity.py base.py flask.py null_delete.py property_mod_tracker.py transaction_changes.py transaction_meta.py __init__.py relationship_builder.py reverter.py schema.py table_builder.py transaction.py unit_of_work.py utils.py version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt test_model_builder.py test_relationship_builder.py test_table_builder.py __init__.py test_triggers.py __init__.py test_common_base_class.py test_concrete_inheritance.py test_join_table_inheritance.py test_multi_level_inheritance.py test_single_table_inheritance.py __init__.py test_activity.py test_flask.py test_null_delete.py test_plugin_collection.py test_property_mod_tracker.py test_transaction_changes.py test_transaction_meta.py __init__.py test_association_table_relations.py test_custom_condition_relations.py test_dynamic_relationships.py test_many_to_many_relations.py test_non_versioned_classes.py test_one_to_many_relations.py test_one_to_one_relations.py __init__.py test_deep_relationships.py test_many_to_many_relationships.py test_one_to_one_relationship.py test_one_to_one_with_secondary_table.py __init__.py test_update_end_transaction_id.py test_update_property_mod_flags.py __init__.py test_accessors.py test_changeset.py test_column_aliases.py test_column_inclusion_and_exclusion.py test_composite_primary_key.py test_configuration.py test_custom_schema.py test_custom_version_base_class.py test_delete.py test_exotic_listener_chaining.py test_exotic_operation_combos.py test_i18n.py test_insert.py test_mapper_args.py test_raw_sql.py test_revert.py test_savepoints.py test_sessions.py test_transaction.py test_update.py test_vacuum.py test_validity_strategy.py test_versions.py test_changeset.py test_count_versions.py test_is_modified.py test_parent_class.py test_transaction_class.py test_tx_column_name.py test_version_class.py __init__.py __init__.py",
        "setup.py": "\"\"\"\nSQLAlchemy-Continuum\n--------------------\n\nVersioning and auditing extension for SQLAlchemy.\n\"\"\"\n\nimport os\nimport sys\nimport re\nfrom setuptools import setup\n\n\nHERE = os.path.dirname(os.path.abspath(__file__))\nPY3 = sys.version_info[0] == 3\n\n\ndef get_version():\nfilename = os.path.join(HERE, 'sqlalchemy_continuum', '__init__.py')\nwith open(filename) as f:\ncontents = f.read()\npattern = r\"^__version__ = '(.*?)'$\"\nreturn re.search(pattern, contents, re.MULTILINE).group(1)\n\n\nextras_require = {\n'test': [\n'pytest>=2.3.5',\n'flexmock>=0.9.7',\n'psycopg2>=2.4.6',\n'PyMySQL>=0.8.0',\n'six>=1.4.0'\n],\n'anyjson': ['anyjson>=0.3.3'],\n'flask': ['Flask>=0.9'],\n'flask-login': ['Flask-Login>=0.2.9'],\n'flask-sqlalchemy': ['Flask-SQLAlchemy>=1.0'],\n'flexmock': ['flexmock>=0.9.7'],\n'i18n': ['SQLAlchemy-i18n>=0.8.4,!=1.1.0'],\n}\n\n\n# Add all optional dependencies to testing requirements.\nfor name, requirements in extras_require.items():\nif name != 'test':\nextras_require['test'] += requirements\n\n\nsetup(\nname='SQLAlchemy-Continuum',\nversion=get_version(),\nurl='https:\/\/github.com\/kvesteri\/sqlalchemy-continuum',\nlicense='BSD',\nauthor='Konsta Vesterinen',\nauthor_email='konsta@fastmonkeys.com',\ndescription='Versioning and auditing extension for SQLAlchemy.',\nlong_description=__doc__,\npackages=[\n'sqlalchemy_continuum',\n'sqlalchemy_continuum.plugins',\n'sqlalchemy_continuum.dialects'\n],\nzip_safe=False,\ninclude_package_data=True,\nplatforms='any',\ninstall_requires=[\n'SQLAlchemy>=1.0.8',\n'SQLAlchemy-Utils>=0.30.12'\n],\nextras_require=extras_require,\nclassifiers=[\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n'Topic :: Software Development :: Libraries :: Python Modules'\n]\n)\n"
    },
    {
        "package_name": "sqlalchemy-trino-0.5.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "import setuptools\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\nlong_description = fh.read()\n\nsetuptools.setup(\nname=\"sqlalchemy-trino\",\nversion=\"0.5.0\",\nauthor=\"D\u0169ng \u0110\u1eb7ng Minh\",\nauthor_email=\"dungdm93@live.com\",\ndescription=\"Trino dialect for SQLAlchemy\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/dungdm93\/sqlalchemy-trino\",\nkeywords=[\"sqlalchemy\", \"trino\"],\nlicense=\"Apache 2.0\",\nplatforms=[\"any\"],\nclassifiers=[\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Topic :: Database\",\n\"Topic :: Database :: Front-Ends\",\n],\npython_requires='>=3.7',\ninstall_requires=[\n\"trino[sqlalchemy]>=0.310\",\n],\n)\n"
    },
    {
        "package_name": "SQLAlchemy-Utils-0.38.3",
        "file_list": ".isort.cfg CHANGES.rst conftest.py .DS_Store aggregates.rst conf.py database_helpers.rst data_types.rst foreign_key_helpers.rst generic_relationship.rst index.rst installation.rst internationalization.rst license.rst listeners.rst make.bat Makefile models.rst observers.rst orm_helpers.rst range_data_types.rst testing.rst utility_classes.rst view.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py aggregates.py asserts.py compat.py exceptions.py expressions.py database.py foreign_keys.py mock.py orm.py render.py sort_query.py __init__.py generic.py i18n.py listeners.py models.py observer.py operators.py path.py country.py currency.py ltree.py weekday.py weekdays.py __init__.py proxy_dict.py query_chain.py chained_join.py __init__.py arrow.py bit.py choice.py color.py country.py currency.py email.py encrypted_type.py padding.py __init__.py arrow_datetime.py enriched_datetime_type.py enriched_date_type.py pendulum_date.py pendulum_datetime.py __init__.py ip_address.py json.py locale.py ltree.py password.py pg_composite.py phone_number.py range.py scalar_coercible.py scalar_list.py timezone.py ts_vector.py url.py uuid.py weekdays.py __init__.py utils.py view.py __init__.py dependency_links.txt not-zip-safe pbr.json PKG-INFO requires.txt SOURCES.txt top_level.txt .DS_Store test_backrefs.py test_custom_select_expressions.py test_join_table_inheritance.py test_m2m.py test_m2m_m2m.py test_multiple_aggregates_per_class.py test_o2m_m2m.py test_o2m_o2m.py test_o2m_o2m_o2m.py test_search_vectors.py test_simple_paths.py test_with_column_alias.py test_with_ondelete_cascade.py __init__.py test_cast_if.py test_database.py test_dependent_objects.py test_escape_like.py test_getdotattr.py test_get_bind.py test_get_class_by_table.py test_get_columns.py test_get_column_key.py test_get_hybrid_properties.py test_get_mapper.py test_get_primary_keys.py test_get_referencing_foreign_keys.py test_get_tables.py test_get_type.py test_has_changes.py test_has_index.py test_has_unique_index.py test_identity.py test_is_loaded.py test_jsonb_sql.py test_json_sql.py test_make_order_by_deterministic.py test_merge_references.py test_naturally_equivalent.py test_non_indexed_foreign_keys.py test_quote.py test_render.py test_table_name.py __init__.py test_abstract_base_class.py test_column_aliases.py test_composite_keys.py test_hybrid_properties.py test_single_table_inheritance.py __init__.py mixins.py test_column_property.py test_dynamic_relationship.py test_m2m_m2m_m2m.py test_o2m_o2m_o2m.py test_o2m_o2o_o2m.py test_o2o_o2o.py test_o2o_o2o_o2o.py __init__.py test_country.py test_currency.py test_ltree.py test_weekdays.py __init__.py test_chained_join.py test_select_correlated_expression.py __init__.py test_asserts.py test_auto_delete_orphans.py test_case_insensitive_comparator.py test_expressions.py test_instant_defaults_listener.py test_instrumented_list.py test_models.py test_path.py test_proxy_dict.py test_query_chain.py test_translation_hybrid.py test_views.py test_padding.py test_arrow.py test_choice.py test_color.py test_composite.py test_country.py test_currency.py test_datetime_range.py test_date_range.py test_email.py test_encrypted.py test_enriched_datetime_arrow.py test_enriched_datetime_pendulum.py test_enriched_date_pendulum.py test_int_range.py test_ip_address.py test_json.py test_locale.py test_ltree.py test_numeric_range.py test_password.py test_phonenumber.py test_scalar_list.py test_timezone.py test_tsvector.py test_url.py test_uuid.py test_weekdays.py __init__.py __init__.py",
        "setup.py": "\"\"\"\nSQLAlchemy-Utils\n----------------\n\nVarious utility functions and custom data types for SQLAlchemy.\n\"\"\"\nimport os\nimport re\n\nfrom setuptools import find_packages, setup\n\nHERE = os.path.dirname(os.path.abspath(__file__))\n\n\ndef get_version():\nfilename = os.path.join(HERE, 'sqlalchemy_utils', '__init__.py')\nwith open(filename) as f:\ncontents = f.read()\npattern = r\"^__version__ = '(.*?)'$\"\nreturn re.search(pattern, contents, re.MULTILINE).group(1)\n\n\nextras_require = {\n'test': [\n'pytest>=2.7.1',\n'Pygments>=1.2',\n'Jinja2>=2.3',\n'docutils>=0.10',\n'flexmock>=0.9.7',\n'psycopg2>=2.5.1',\n'psycopg2cffi>=2.8.1',\n'pg8000>=1.12.4',\n'pytz>=2014.2',\n'python-dateutil>=2.6',\n'backports.zoneinfo;python_version<\"3.9\"',\n'pymysql',\n'flake8>=2.4.0',\n'isort>=4.2.2',\n'pyodbc',\n],\n'babel': ['Babel>=1.3'],\n'arrow': ['arrow>=0.3.4'],\n'pendulum': ['pendulum>=2.0.5'],\n'intervals': ['intervals>=0.7.1'],\n'phone': ['phonenumbers>=5.9.2'],\n'password': ['passlib >= 1.6, < 2.0'],\n'color': ['colour>=0.0.4'],\n'timezone': ['python-dateutil'],\n'url': ['furl >= 0.4.1'],\n'encrypted': ['cryptography>=0.6']\n}\n\n\n# Add all optional dependencies to testing requirements.\ntest_all = []\nfor requirements in extras_require.values():\ntest_all += requirements\nextras_require['test_all'] = sorted(test_all)\n\n\nsetup(\nname='SQLAlchemy-Utils',\nversion=get_version(),\nurl='https:\/\/github.com\/kvesteri\/sqlalchemy-utils',\nlicense='BSD',\nauthor='Konsta Vesterinen, Ryan Leckey, Janne Vanhala, Vesa Uimonen',\nauthor_email='konsta@fastmonkeys.com',\ndescription=(\n'Various utility functions for SQLAlchemy.'\n),\nlong_description=__doc__,\npackages=find_packages('.', exclude=['tests', 'tests.*']),\nzip_safe=False,\ninclude_package_data=True,\nplatforms='any',\ninstall_requires=[\n'SQLAlchemy>=1.3',\n\"importlib_metadata ; python_version<'3.8'\",\n],\nextras_require=extras_require,\npython_requires='~=3.6',\nclassifiers=[\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n'Topic :: Software Development :: Libraries :: Python Modules'\n]\n)\n"
    },
    {
        "package_name": "sqlitedict-2.0.0",
        "file_list": "LICENSE.md Makefile MANIFEST.in PKG-INFO README.rst setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt sqlitedict.py accessories.py autocommit.py autocommit.sqlite sqlitedict-override-test.sqlite sqlitedict-with-def.sqlite tablenames-test-1.sqlite tablenames-test-2.sqlite test_autocommit.py test_core.py test_named_db.py test_onimport.py test_temp_db.py accessories.cpython-39.pyc test_autocommit.cpython-39-pytest-6.2.4.pyc test_core.cpython-39-pytest-6.2.4.pyc test_named_db.cpython-39-pytest-6.2.4.pyc test_onimport.cpython-39-pytest-6.2.4.pyc test_temp_db.cpython-39-pytest-6.2.4.pyc",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n#\n# This code is distributed under the terms and conditions\n# from the Apache License, Version 2.0\n#\n# http:\/\/opensource.org\/licenses\/apache2.0.php\n\n\"\"\"\nRun with:\n\npython .\/setup.py install\n\"\"\"\n\nimport os\nimport io\nimport subprocess\n\nimport setuptools.command.develop\nfrom setuptools import setup\n\n\ndef read(fname):\npath = os.path.join(os.path.dirname(__file__), fname)\nreturn io.open(path, encoding='utf8').read()\n\n\nclass SetupDevelop(setuptools.command.develop.develop):\n\"\"\"Docstring is overwritten.\"\"\"\n\ndef run(self):\n\"\"\"\nPrepare environment for development.\n\n- Ensures 'nose' and 'coverage.py' are installed for testing.\n- Call super()'s run method.\n\"\"\"\nsubprocess.check_call(('pip', 'install', 'nose', 'coverage'))\n\n# Call super() (except develop is an old-style class, so we must call\n# directly). The effect is that the development egg-link is installed.\nsetuptools.command.develop.develop.run(self)\n\n\nSetupDevelop.__doc__ = setuptools.command.develop.develop.__doc__\n\n\nsetup(\nname='sqlitedict',\nversion='2.0.0',\ndescription='Persistent dict in Python, backed up by sqlite3 and pickle, multithread-safe.',\nlong_description=read('README.rst'),\n\npy_modules=['sqlitedict'],\n\n# there is a bug in python2.5, preventing distutils from using any non-ascii characters :(\n# http:\/\/bugs.python.org\/issue2562\nauthor='Radim Rehurek, Victor R. Escobar, Andrey Usov, Prasanna Swaminathan, Jeff Quast',\nauthor_email=\"me@radimrehurek.com\",\nmaintainer='Radim Rehurek',\nmaintainer_email='me@radimrehurek.com',\n\nurl='https:\/\/github.com\/piskvorky\/sqlitedict',\ndownload_url='http:\/\/pypi.python.org\/pypi\/sqlitedict',\n\nkeywords='sqlite, persistent dict, multithreaded',\n\nlicense='Apache 2.0',\nplatforms='any',\n\nclassifiers=[ # from http:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Topic :: Database :: Front-Ends',\n],\ncmdclass={'develop': SetupDevelop},\n)\n"
    },
    {
        "package_name": "ssh-import-id-5.11",
        "file_list": "PKG-INFO README setup.cfg setup.py version.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt ssh-import-id-gh ssh-import-id-lp",
        "setup.py": "#!\/usr\/bin\/env python3\n#\n# ssh-import-id - Authorize SSH public keys from trusted online identities.\n# Copyright (c) 2013 Casey Marshall <casey.marshall@gmail.com>\n#\n# ssh-import-id is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, version 3.\n#\n# ssh-import-id is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with ssh-import-id. If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\nimport os\nfrom setuptools import setup\nimport sys\n\n\ndef read_version():\n# shove 'version' into the path so we can import it without going through\n# ssh_import_id which has deps that wont be available at setup.py time.\n# specifically, from 'ssh_import_id import version'\n# may fail due to dependencies not available.\nverdir = os.path.abspath(\nos.path.join(os.path.dirname(__file__), \"ssh_import_id\"))\nsys.path.insert(0, verdir)\nimport version\nreturn version.VERSION\n\n\ntry:\nreadme = open(os.path.join(os.path.dirname(__file__), \"README.md\")).read()\nexcept OSError:\nreadme = (\"See: http:\/\/pypi.python.org\/pypi?name=ssh-import-id&:\"\n\"action=display_pkginfo\")\n\nsetup(\nname='ssh-import-id',\ndescription='Authorize SSH public keys from trusted online identities',\nlong_description_content_type='markdown',\nversion=read_version(),\nauthor='Dustin Kirkland, Casey Marshall',\nauthor_email='dustin.kirkland@gmail.com, casey.marshall@gmail.com',\nlicense=\"GPLv3\",\nkeywords=\"ssh public key\",\nurl='https:\/\/launchpad.net\/ssh-import-id',\nplatforms=['any'],\npackages=['ssh_import_id'],\nscripts=['usr\/bin\/ssh-import-id-gh', 'usr\/bin\/ssh-import-id-lp'],\ninstall_requires=[\"distro\"],\nentry_points={\n'console_scripts': [\n'ssh-import-id = ssh_import_id:main'\n],\n}\n)\n\n# vi: ts=4 expandtab syntax=python\n"
    },
    {
        "package_name": "ssm-parameter-store-19.11.0",
        "file_list": ".editorconfig .gitignore .travis.yml LICENSE PKG-INFO README.md requirements.txt setup.cfg setup.py stores.py version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt test_store.py __init__.py tox.ini",
        "setup.py": "from setuptools import setup, find_packages\n\n\nLONG_DESCRIPTION = open('README.md').read()\n\n\nsetup(\nname='ssm-parameter-store',\nuse_scm_version=True,\nsetup_requires=['setuptools_scm'],\ndescription='Simple Python wrapper for getting values from AWS Systems Manager Parameter Store',\nlong_description=LONG_DESCRIPTION,\nlong_description_content_type='text\/markdown',\nurl='http:\/\/github.com\/christippett\/ssm-parameter-store',\nauthor='Chris Tippett',\nauthor_email='chris@spoon.nz',\nlicense='MIT',\npackage_dir={'': 'src'},\npackages=find_packages('src'),\ninstall_requires=['boto3'],\nclassifiers=[\n'Environment :: Web Environment',\n'Framework :: Django',\n'Operating System :: OS Independent',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: Implementation :: PyPy',\n],\nzip_safe=False\n)\n"
    },
    {
        "package_name": "starkbank-ecdsa-2.0.3",
        "file_list": "curve.py ecdsa.py math.py point.py privateKey.py publicKey.py signature.py binary.py compatibility.py der.py file.py integer.py oid.py pem.py __init__.py __init__.py MANIFEST.in PKG-INFO README.md setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from os import path\nfrom setuptools import setup, find_packages\n\n\nwith open(path.join(path.dirname(__file__), \"README.md\")) as readme:\nREADME = readme.read()\n\n\nsetup(\nname=\"starkbank-ecdsa\",\npackages=find_packages(),\ninclude_package_data=True,\ndescription=\"A lightweight and fast pure python ECDSA library\",\nlong_description=README,\nlong_description_content_type=\"text\/markdown\",\nlicense=\"MIT License\",\nurl=\"https:\/\/github.com\/starkbank\/ecdsa-python.git\",\nauthor=\"Stark Bank\",\nauthor_email=\"developers@starkbank.com\",\nkeywords=[\"ecdsa\", \"elliptic curve\", \"elliptic\", \"curve\", \"stark bank\", \"starkbank\", \"cryptograph\", \"secp256k1\", \"prime256v1\"],\nversion=\"2.0.3\"\n)\n\n\n### Create a source distribution:\n\n#Run ```python setup.py sdist``` inside the project directory.\n\n### Install twine:\n\n#```pip install twine```\n\n### Upload package to pypi:\n\n#```twine upload dist\/*```\n\n"
    },
    {
        "package_name": "statistics-1.0.3.5",
        "file_list": "PKG-INFO README.rst setup.cfg setup.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "# -*- coding: UTF-8 -*-\n__author__ = 'Stefano Crosta'\n\nfrom setuptools import setup, find_packages # Always prefer setuptools over distutils\nfrom codecs import open # To use a consistent encoding\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the relevant file\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\nlong_description = f.read()\n\n# DESCRIPTION CONTAINS DOCS\n\nsetup(\nname='statistics',\n\n# Versions should comply with PEP440. For a discussion on single-sourcing\n# the version across setup.py and the project code, see\n# http:\/\/packaging.python.org\/en\/latest\/tutorial.html#version\nversion='1.0.3.5',\n\ndescription='A Python 2.* port of 3.4 Statistics Module',\nlong_description=long_description,\n\n# The project's main homepage.\nurl='https:\/\/github.com\/digitalemagine\/py-statistics',\n\n# Author details\nauthor='Stefano Crosta',\nauthor_email='stefano@digitalemagine.com',\n\n# Choose your license\nlicense='Apache License 2.0',\n\n# See https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\nclassifiers=[\n# How mature is this project? Common values are\n# 3 - Alpha\n# 4 - Beta\n# 5 - Production\/Stable\n'Development Status :: 5 - Production\/Stable',\n\n# Indicate who your project is intended for\n'Intended Audience :: Developers',\n# 'Topic :: Software Development :: Build Tools',\n\n# Pick your license as you wish (should match \"license\" above)\n# 'License :: OSI Approved :: MIT License',\n\n# Specify the Python versions you support here. In particular, ensure\n# that you indicate whether you support Python 2, Python 3 or both.\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n],\n\n# What does your project relate to?\nkeywords='statistics',\n\n# You can just specify the packages manually here if your project is simple.\n# Or you can use find_packages().\npackages=['statistics'],\n\n# List run-time dependencies here. These will be installed by pip when your\n# project is installed. For an analysis of \"install_requires\" vs pip's\n# requirements files see:\n# https:\/\/packaging.python.org\/en\/latest\/technical.html#install-requires-vs-requirements-files\ninstall_requires = ['docutils>=0.3'],\n\n# Tests\n#\n# Tests must be wrapped in a unittest test suite by either a\n# function, a TestCase class or method, or a module or package\n# containing TestCase classes. If the named suite is a package,\n# any submodules and subpackages are recursively added to the\n# overall test suite.\ntest_suite = 'statistics.tests.suite',\n\n# If there are data files included in your packages that need to be\n# installed, specify them here. If using Python 2.6 or less, then these\n# have to be included in MANIFEST.in as well.\n#\npackage_data={\n'': ['*.rst']\n},\n\n# Although 'package_data' is the preferred approach, in some case you may\n# need to place data files outside of your packages.\n# see http:\/\/docs.python.org\/3.4\/distutils\/setupscript.html#installing-additional-files\n# In this case, 'data_file' will be installed into '<sys.prefix>\/my_data'\n## data_files=[('my_data', ['data\/data_file'])],\n\n# To provide executable scripts, use entry points in preference to the\n# \"scripts\" keyword. Entry points provide cross-platform support and allow\n# pip to create the appropriate form of executable for the target platform.\n#\n# entry_points={\n# 'console_scripts': [\n# 'command=module:main',\n# ],\n# },\n)"
    },
    {
        "package_name": "StrEnum-0.4.8",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py mixins.py _name_mangler.py _version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt versioneer.py",
        "setup.py": "# pylint:disable=missing-docstring,invalid-name\nimport setuptools\nimport versioneer\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\nlong_description = fh.read()\n\nsetuptools.setup(\nname=\"StrEnum\",\nversion=versioneer.get_version(),\ncmdclass=versioneer.get_cmdclass(),\nauthor=\"James Sinclair\",\nauthor_email=\"james@nurfherder.com\",\ndescription=\"An Enum that inherits from str.\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/irgeek\/StrEnum\",\npackages=[\"strenum\"],\nextras_require={\n\"test\": [\n\"pytest\",\n\"pytest-black\",\n\"pytest-cov\",\n\"pytest-pylint\",\n\"pylint\",\n],\n\"docs\": [\n\"sphinx\",\n\"sphinx_rtd_theme\",\n\"myst-parser[linkify]\",\n],\n\"release\": [\"twine\"],\n},\nsetup_requires=[\"pytest-runner\"],\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n],\n)\n"
    },
    {
        "package_name": "striprtf-0.0.20",
        "file_list": "LICENSE PKG-INFO README.md setup.cfg setup.py striprtf striprtf.py _version.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "import io\nfrom os import path\n\nfrom setuptools import setup\n\nthis_directory = path.abspath(path.dirname(__file__))\nwith io.open(path.join(this_directory, \"README.md\"), encoding=\"utf-8\") as f:\nlong_description = f.read()\n\nabout = {}\nwith io.open(\"striprtf\/_version.py\", \"r\", encoding=\"utf-8\") as f:\nexec(f.read(), about)\n\nsetup(\nname=\"striprtf\",\npackages=[\"striprtf\"],\nversion=about[\"__version__\"],\ndescription=\"A simple library to convert rtf to text\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Joshy Cyriac\",\nauthor_email=\"joshy@posteo.ch\",\nurl=\"https:\/\/github.com\/joshy\/striprtf\",\ndownload_url=\"https:\/\/github.com\/joshy\/striprtf\/archive\/v%s.tar.gz\"\n% about[\"__version__\"],\nkeywords=[\"rtf\"],\nscripts=[\"striprtf\/striprtf\"],\nlicense=\"BSD-3-Clause\",\nclassifiers=[\n\"License :: OSI Approved :: BSD License\",\n],\n)\n"
    },
    {
        "package_name": "strsimpy-0.2.1",
        "file_list": "LICENSE PKG-INFO README.md setup.cfg setup.py cosine.py cosine_test.py damerau.py damerau_test.py jaccard.py jaccard_test.py jaro_winkler.py jaro_winkler_test.py levenshtein.py levenshtein_test.py longest_common_subsequence.py longest_common_subsequence_test.py metric_lcs.py metric_lcs_test.py ngram.py ngram_test.py normalized_levenshtein.py normalized_levenshtein_test.py optimal_string_alignment.py optimal_string_alignment_test.py overlap_coefficient.py overlap_coefficient_test.py qgram.py qgram_test.py shingle_based.py sift4.py sift4_test.py sorensen_dice.py sorensen_dice_test.py string_distance.py string_similarity.py weighted_levenshtein.py weighted_levenshtein_test.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "import setuptools\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nsetuptools.setup(\nname=\"strsimpy\",\nversion=\"0.2.1\",\ndescription=\"A library implementing different string similarity and distance measures\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/luozhouyang\/python-string-similarity\",\nauthor=\"ZhouYang Luo\",\nauthor_email=\"zhouyang.luo@gmail.com\",\npackages=setuptools.find_packages(),\ninclude_package_data=True,\ninstall_requires=[],\nlicense=\"MIT License\",\nclassifiers=(\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n)\n)\n"
    },
    {
        "package_name": "stups-cli-support-1.1.22",
        "file_list": "MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py config.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\n\"\"\"\n\nimport sys\nimport os\nimport inspect\n\nimport setuptools\nfrom setuptools.command.test import test as TestCommand\nfrom setuptools import setup\n\n# TODO: we probably don't want to support anything lower than Python 3.6 going forward\nif sys.version_info < (3, 4, 0):\nsys.stderr.write('FATAL: STUPS needs to be run with Python 3.4+\\n')\nsys.exit(1)\n\n__location__ = os.path.join(os.getcwd(), os.path.dirname(inspect.getfile(inspect.currentframe())))\n\n\ndef read_version(package):\ndata = {}\nwith open(os.path.join(package, '__init__.py'), 'r') as fd:\nexec(fd.read(), data)\nreturn data['__version__']\n\n\nNAME = 'stups-cli-support'\nMAIN_PACKAGE = 'stups_cli'\nVERSION = read_version(MAIN_PACKAGE)\nDESCRIPTION = 'STUPS CLI support library'\nLICENSE = 'Apache License 2.0'\nURL = 'https:\/\/github.com\/zalando-stups\/stups-cli-support'\nAUTHOR = 'Henning Jacobs'\nEMAIL = 'henning@zalando.de'\nKEYWORDS = 'stups zalando cli'\n\nCOVERAGE_XML = True\nCOVERAGE_HTML = False\nJUNIT_XML = True\n\n# Add here all kinds of additional classifiers as defined under\n# https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\nCLASSIFIERS = [\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: POSIX :: Linux',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: Implementation :: CPython',\n]\n\nCONSOLE_SCRIPTS = []\n\n\nclass PyTest(TestCommand):\n\nuser_options = [('cov=', None, 'Run coverage'), ('cov-xml=', None, 'Generate junit xml report'), ('cov-html=',\nNone, 'Generate junit html report'), ('junitxml=', None, 'Generate xml of test results')]\n\ndef initialize_options(self):\nTestCommand.initialize_options(self)\nself.cov = None\nself.cov_xml = False\nself.cov_html = False\nself.junitxml = None\n\ndef finalize_options(self):\nTestCommand.finalize_options(self)\nif self.cov is not None:\nself.cov = ['--cov', self.cov, '--cov-report', 'term-missing']\nif self.cov_xml:\nself.cov.extend(['--cov-report', 'xml'])\nif self.cov_html:\nself.cov.extend(['--cov-report', 'html'])\nif self.junitxml is not None:\nself.junitxml = ['--junitxml', self.junitxml]\n\ndef run_tests(self):\ntry:\nimport pytest\nexcept:\nraise RuntimeError('py.test is not installed, run: pip install pytest')\nparams = {'args': self.test_args}\nif self.cov:\nparams['args'] += self.cov\nif self.junitxml:\nparams['args'] += self.junitxml\nparams['args'] += ['--doctest-modules', MAIN_PACKAGE, '-s', '-vv']\nerrno = pytest.main(**params)\nsys.exit(errno)\n\n\ndef get_install_requirements(path):\ncontent = open(os.path.join(__location__, path)).read()\nreturn [req for req in content.split('\\\\n') if req != '']\n\n\ndef read(fname):\nreturn open(os.path.join(__location__, fname)).read()\n\n\ndef setup_package():\n# Assemble additional setup commands\ncmdclass = {}\ncmdclass['test'] = PyTest\n\n# Some helper variables\nversion = VERSION\n\ninstall_reqs = get_install_requirements('requirements.txt')\n\ncommand_options = {'test': {'test_suite': ('setup.py', 'tests'), 'cov': ('setup.py', MAIN_PACKAGE)}}\nif JUNIT_XML:\ncommand_options['test']['junitxml'] = 'setup.py', 'junit.xml'\nif COVERAGE_XML:\ncommand_options['test']['cov_xml'] = 'setup.py', True\nif COVERAGE_HTML:\ncommand_options['test']['cov_html'] = 'setup.py', True\n\nsetup(\nname=NAME,\nversion=version,\nurl=URL,\ndescription=DESCRIPTION,\nauthor=AUTHOR,\nauthor_email=EMAIL,\nlicense=LICENSE,\nkeywords=KEYWORDS,\nlong_description=read('README.rst'),\nclassifiers=CLASSIFIERS,\ntest_suite='tests',\npackages=setuptools.find_packages(exclude=['tests', 'tests.*']),\ninstall_requires=install_reqs,\nsetup_requires=['flake8'],\ncmdclass=cmdclass,\ntests_require=['pytest-cov', 'pytest'],\ncommand_options=command_options,\nentry_points={'console_scripts': CONSOLE_SCRIPTS},\n)\n\n\nif __name__ == '__main__':\nsetup_package()\n"
    },
    {
        "package_name": "stups-zign-1.2",
        "file_list": "MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt api.py cli.py cli_zign.py config.py oauth2.py __init__.py __main__.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport inspect\n\nimport setuptools\nfrom setuptools.command.test import test as TestCommand\nfrom setuptools import setup\n\nif sys.version_info < (3, 4, 0):\nsys.stderr.write('FATAL: STUPS zign needs to be run with Python 3.4+\\n')\nsys.exit(1)\n\n__location__ = os.path.join(os.getcwd(), os.path.dirname(inspect.getfile(inspect.currentframe())))\n\n\ndef read_version(package):\ndata = {}\nwith open(os.path.join(package, '__init__.py'), 'r') as fd:\nexec(fd.read(), data)\nreturn data['__version__']\n\n\nNAME = 'stups-zign'\nMAIN_PACKAGE = 'zign'\nVERSION = read_version(MAIN_PACKAGE)\nDESCRIPTION = 'OAuth2 token management CLI'\nLICENSE = 'Apache License 2.0'\nURL = 'https:\/\/github.com\/zalando-stups\/zign'\nAUTHOR = 'Henning Jacobs'\nEMAIL = 'henning.jacobs@zalando.de'\n\nCOVERAGE_XML = True\nCOVERAGE_HTML = False\nJUNIT_XML = True\n\n# Add here all kinds of additional classifiers as defined under\n# https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\nCLASSIFIERS = [\n'Development Status :: 4 - Beta',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: POSIX :: Linux',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: Implementation :: CPython',\n]\n\nCONSOLE_SCRIPTS = [\n# TODO: deprecate \"zign\"\n'ztoken = zign.cli:main',\n'zign = zign.cli_zign:main'\n]\n\n\nclass PyTest(TestCommand):\n\nuser_options = [('cov=', None, 'Run coverage'), ('cov-xml=', None, 'Generate junit xml report'), ('cov-html=',\nNone, 'Generate junit html report'), ('junitxml=', None, 'Generate xml of test results')]\n\ndef initialize_options(self):\nTestCommand.initialize_options(self)\nself.cov = None\nself.cov_xml = False\nself.cov_html = False\nself.junitxml = None\n\ndef finalize_options(self):\nTestCommand.finalize_options(self)\nif self.cov is not None:\nself.cov = ['--cov', self.cov, '--cov-report', 'term-missing']\nif self.cov_xml:\nself.cov.extend(['--cov-report', 'xml'])\nif self.cov_html:\nself.cov.extend(['--cov-report', 'html'])\nif self.junitxml is not None:\nself.junitxml = ['--junitxml', self.junitxml]\n\ndef run_tests(self):\ntry:\nimport pytest\nexcept ImportError:\nraise RuntimeError('py.test is not installed, run: pip install pytest')\nparams = {'args': self.test_args}\nif self.cov:\nparams['args'] += self.cov\nif self.junitxml:\nparams['args'] += self.junitxml\nparams['args'] += ['--doctest-modules', MAIN_PACKAGE, '-s']\nerrno = pytest.main(**params)\nsys.exit(errno)\n\n\ndef get_install_requirements(path):\ncontent = open(os.path.join(__location__, path)).read()\nreturn [req for req in content.split('\\\\n') if req != '']\n\n\ndef read(fname):\nreturn open(os.path.join(__location__, fname), encoding='utf-8').read()\n\n\ndef setup_package():\n# Assemble additional setup commands\ncmdclass = {}\ncmdclass['test'] = PyTest\n\n# Some helper variables\nversion = VERSION\n\ninstall_reqs = get_install_requirements('requirements.txt')\n\ncommand_options = {\n'test': {'test_suite': ('setup.py', 'tests'), 'cov': ('setup.py', MAIN_PACKAGE)}}\nif JUNIT_XML:\ncommand_options['test']['junitxml'] = 'setup.py', 'junit.xml'\nif COVERAGE_XML:\ncommand_options['test']['cov_xml'] = 'setup.py', True\nif COVERAGE_HTML:\ncommand_options['test']['cov_html'] = 'setup.py', True\n\nsetup(\nname=NAME,\nversion=version,\nurl=URL,\ndescription=DESCRIPTION,\nauthor=AUTHOR,\nauthor_email=EMAIL,\nlicense=LICENSE,\nkeywords='aws account saml login federated shibboleth',\nlong_description=read('README.rst'),\nclassifiers=CLASSIFIERS,\ntest_suite='tests',\npackages=setuptools.find_packages(exclude=['tests', 'tests.*']),\ninstall_requires=install_reqs,\nsetup_requires=['six', 'flake8'],\ncmdclass=cmdclass,\ntests_require=['pytest-cov', 'pytest'],\ncommand_options=command_options,\nentry_points={'console_scripts': CONSOLE_SCRIPTS},\n)\n\n\nif __name__ == '__main__':\nsetup_package()\n"
    },
    {
        "package_name": "sunpy-4.0.4",
        "file_list": ".rtd-environment.yml CHANGELOG.rst CITATION.rst about.rst carrington.rst index.rst other_api.rst rotatedsunframe.rst velocities.rst wcs.rst data.rst database.rst image.rst index.rst io.rst known_issues.rst map.rst net.rst physics.rst stability.rst sun.rst sunpy.rst sunpy_stability.yaml time.rst timeseries.rst util.rst visualization.rst conf.py ci_jobs.rst code_standards.rst dependencies.rst documentation.rst example_gallery.rst extending_fido.rst funding.rst actions_check_pr.png actions_summary_check.png checks.png checks_pr.png logger.rst maintainer_workflow.rst map_rotate_custom.rst newcomers.rst new_objects.rst pr_review_procedure.rst public_api.rst remote_data.rst tests.rst units_quantities.rst index.rst core_datatypes.dia map_class_hierarchy.dia package_layout.dia database.rst fido.rst hek.rst helioviewer-1.png helioviewer-2.png helioviewer-3.png helioviewer-4.png helioviewer.rst index.rst jsoc.rst sample-data.rst customization.rst index.rst maps.rst timeseries.rst index.rst logger.rst plotting.rst ssw.rst time.rst tour.rst troubleshooting.rst units-coordinates.rst index.rst installation.rst make.bat Makefile nitpick-exceptions robots.txt 0.8.rst 0.9.rst 1.0.rst 1.1-wispr.png 1.1.rst 2.0.rst 2.1.rst 3.0.rst 3.1.rst 4.0.rst changelog.rst index.rst 2011_06_07_sampledata_overview.py downloading_cutouts.py downloading_hmi.py downloading_lascoC2.py fido_metadata_queries.py goes_xrs_example.py querying_the_GOES_event_list.py README.txt searching_vso.py search_cdaweb.py finding_masking_bright_pixels.py loop_edge_enhance.py mask_disk.py off_limb_enhance.py README.txt README.txt remote_data_manager.py comparing_rotation_models.py differentially_rotated_coordinate.py differentially_rotated_gridlines.py README.txt reprojected_map.py example_template.py brightness_pixel_location.py compare_rotation_results.py composite_map_AIA_HMI.py difference_images.py hmi_contours_wcsaxes.py image_bright_regions_gallery_example.py map_contouring.py map_data_histogram.py map_from_numpy_array.py map_metadata_modification.py map_resampling_and_superpixels.py map_rotation.py map_segment.py plot_frameless_image.py README.txt submaps_and_cropping.py autoalign_aia_hmi.py projection_custom_origin.py README.txt reprojection_aia_euvi_mosaic.py reprojection_align_aia_hmi.py reprojection_different_observers.py reprojection_heliographic_stonyhurst.py reprojection_spherical_screen.py aia_example.py arrayanimatorwcs.py fading_between_maps.py finding_local_peaks_in_solar_data.py finegrained_plot.py great_arc_example.py grid_plotting.py hmi_cutout.py hmi_synoptic_maps.py lat_lon_lines.py limb_plotting.py lineAnimator_examples.py magnetogram_active_regions.py map_editcolormap.py overplot_hek_polygon.py plotting_blank_map.py plot_rectangle.py quadrangle.py README.txt simple_differential_rotation.py solar_cycle_example.py sunpy_matplotlib_colormap.py wcsaxes_map_example.py wcsaxes_plotting_example.py xy_lims.py README.txt coordinates_in_asdf.py genericmap_in_asdf.py genericmap_in_fits.py README.txt goes_hek_m25.py power_spectra_example.py README.txt skip_timeseries_example.py timeseriesmetadata_example.py timeseries_convolution_filter.py timeseries_peak_finding.py AIA_limb_STEREO.py AltAz_Coordinate_transform.py constants_reference.py getting_lasco_observer_location.py getting_observer_location.py north_offset_frame.py parse_time.py planet_locations.py radec_to_hpc_map.py README.txt SDO_to_STEREO_Coordinate_Conversion.py STEREO_SECCHI_starfield.py venus_transit.py LICENSE.rst ASTROPY.rst GLUE.rst README.rst SCIKIT-LEARN.rst TOWNCRIER.rst MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py CITATION.rst conftest.py ephemeris.py frameattributes.py frames.py metaframes.py offset_frame.py sun.py helpers.py strategies.py test_ephemeris.py test_frameattributes.py test_frames.py test_metaframes.py test_offset_frame.py test_sun.py test_transformations.py test_utils.py test_wcs_utils.py __init__.py transformations.py utils.py wcs_utils.py __init__.py cache.py downloader.py manager.py storage.py conftest.py db_testdata.csv mocks.py test_cache.py test_manager.py test_storage.py __init__.py __init__.py sample.py sunpyrc 20100621SRS.txt 2013_05_13__16_54_06_137__SOHO_LASCO_C3_white-light.jp2 2013_06_24__17_31_30_84__SDO_AIA_AIA_193.jp2 20150101SRS.txt 20150306SRS.txt 20150906SRS.txt 20181209_180305_kcor_l1.5_rebinned.fits aiamap_genericmap_1.0.0.asdf aiamap_shift_genericmap_1.0.0.asdf aia_171_level1.fits annotation_ppt.db cor1_20090615_000500_s4c1A.fts dr_suvi-l2-ci195_g16_s20190403T093200Z_e20190403T093600Z_v1-0-0_rebinned efz20040301.000010_s.fits efz20040301.010016_s.fits efz20040301.020010_s.fits efz20040301.030011_s.fits efz20040301.040010_s.fits efz20040301.050010_s.fits efz20040301.060010_s.fits efz20040301.070014_s.fits efz20040301.080010_s.fits efz20040301.090010_s.fits efz20040301.100010_s.fits efz20040301.110010_s.fits efz20040301.120010_s.fits euvi_20090615_000900_n4euA_s.fts eve_01.txt eve_02.txt eve_03.txt eve_04.txt eve_05.txt EVE_L0CS_DIODES_1m_truncated.txt eve_l1_esp_2011046_00_truncated.fits FGMG4_20110214_030443.7.fits gbm.fits generated_sample.genx go1520110607.fits go1520120601.fits.gz goes_13_leap_second.nc goes_truncated_test_goes15.nc goes_truncated_test_goes17.nc gzip_test.fit.gz gzip_test.fits.gz gzip_test.fts.gz heliographic_phase_map.fits.gz HinodeXRT.fits hi_20110910_114721_s7h2A.fts hsi_image_20101016_191218.fits hsi_obssumm_20120601_018_truncated.fits.gz iris_l2_20130801_074720_4040000014_SJI_1400_t000.fits lasco_c2_25299383_s.fts lyra_20150101-000000_lev3_std_truncated.fits.gz mdi.fd_Ic.20101015_230100_TAI.data.fits mdi.fd_M_96m_lev182.20101015_191200_TAI.data.fits observed-solar-cycle-indices-truncated.json predicted-solar-cycle-truncated.json psp_fld_l2_mag_rtn_1min_20200104_v02.cdf resampled_hmi.fits solo_L1_swa-pas-mom_20200706_V01.cdf resampled0_swap.fits resampled1_swap.fits resampled2_swap.fits resampled3_swap.fits swap_lv1_20140606_000113.fits tca110810_truncated test_ana.fz tsi20010130_025823_a2.fits medn_halph_fl_20050501_074655.fts mq130812.084253.fits na120701.091058.fits svsm_e3100_S2_20110625_1856.fts __init__.py _generate_asdf_test.py __init__.py test_sample.py __init__.py _sample.py __init__.py attrs.py caching.py commands.py database.py tables.py test_attrs.py test_caching.py test_commands.py test_database.py test_table.txt test_tables.py __init__.py __init__.py appdirs.py appdirs_license.txt distro.py distro_license.rst inflect.py inflect_license.txt modest_image.py parse.py parse_license.txt README.rst __init__.py coalignment.py resample.py test_coalignment.py test_resample.py test_transform.py __init__.py transform.py __init__.py ana.py cdf.py file_tools.py fits.py header.py jp2.py setup_package.py frames.py generic_map.py __init__.py entry_points.py sunpy-1.0.0.yaml generic_map-1.0.0.yaml generic_map-1.1.0.yaml geocentricearthequatorial-1.0.0.yaml geocentricsolarecliptic-1.0.0.yaml heliocentric-1.0.0.yaml heliocentricearthecliptic-1.0.0.yaml heliocentricinertial-1.0.0.yaml heliographic_carrington-1.0.0.yaml heliographic_carrington-1.1.0.yaml heliographic_carrington-1.2.0.yaml heliographic_stonyhurst-1.0.0.yaml heliographic_stonyhurst-1.1.0.yaml helioprojective-1.0.0.yaml __init__.py helpers.py hgc_100.asdf test_coordinate_frames.py test_genericmap.py __init__.py __init__.py genx.py srs.py __init__.py anacompress.c anacompress.h anadecompress.c anadecompress.h anarw.c anarw.h types.h _pyana.c generate_genx.pro test_ana.py test_filetools.py test_fits.py test_genx.py test_jp2.py test_srs.py __init__.py _fits.py __init__.py compositemap.py header_helper.py mapbase.py mapsequence.py maputils.py map_factory.py hinode.py iris.py mlso.py proba2.py psp.py rhessi.py sdo.py soho.py solo.py source_type.py stereo.py suvi.py test_aia_source.py test_cor_source.py test_eit_source.py test_eui_source.py test_euvi_source.py test_hi_source.py test_hmi_source.py test_hmi_synoptic_source.py test_iris_source.py test_kcor_source.py test_lasco_source.py test_mdi_source.py test_rhessi_source.py test_sot_source.py test_source_type.py test_suvi_source.py test_swap_source.py test_trace_source.py test_wispr_source.py test_xrt_source.py __init__.py trace.py yohkoh.py __init__.py conftest.py strategies.py test_compositemap.py test_header.py test_header_helper.py test_mapbase.py test_mapsequence.py test_maputils.py test_map_factory.py test_plotting.py test_reproject_to.py __init__.py _units.py __init__.py attr.py attrs.py base_client.py attrs.py cdaweb.py attrs.json helpers.py test_cdaweb.py __init__.py walker.py __init__.py goes.py __init__.py client.py eve.py fermi_gbm.py goes.py gong.py lyra.py noaa.py norh.py rhessi.py test_eve.py test_fermi_gbm.py test_goes_suvi.py test_goes_ud.py test_gong_synoptic.py test_lyra_ud.py test_noaa.py test_norh.py test_rhessi.py __init__.py __init__.py test_client.py __init__.py __init__.py fido_factory.py attrs.py hek.py test_hek.py __init__.py __init__.py hek2vso.py test_hek2vso.py __init__.py __init__.py attrs.py chaincode.py hec.py parser.py test_chaincode.py test_helio.py __init__.py __init__.py helioviewer.py attrs.py attrs.json __init__.py jsoc.py test_attr.py test_jsoc.py __init__.py __init__.py scraper.py strategies.py test_attr.py test_attrs.py test_attr_walker.py test_baseclient.py test_fido.py test_helioviewer.py test_scraper.py __init__.py attrs.py attrs.json __init__.py exceptions.py legacy_response.py table_response.py conftest.py test_attrs.py test_vso.py __init__.py vso.py zeep_plugins.py __init__.py _attrs.py __init__.py differential_rotation.py solar_rotation.py test_differential_rotation.txt test_differential_rotation.py test_solar_rotation.py __init__.py __init__.py constants.py models.py test_constants.py __init__.py _constants.py __init__.py figure_hashes_mpl_352_ft_261_astropy_51_animators_100.json figure_hashes_mpl_dev_ft_261_astropy_dev_animators_dev.json helpers.py mocks.py self_test.py test_mocks.py test_self_test.py test_sunpy_data_filenames.py __init__.py __init__.py test_taiseconds.py test_time.py test_timerange.py test_utime.py __init__.py time.py timeformats.py timerange.py __init__.py metadata.py eve.py fermi_gbm.py goes.py lyra.py noaa.py norh.py rhessi.py test_eve.py test_fermi_gbm.py test_goes.py test_lyra.py test_noaa.py test_norh.py test_rhessi.py __init__.py __init__.py test_timeseriesbase.py test_timeseriesmetadata.py test_timeseries_factory.py __init__.py timeseriesbase.py timeseries_factory.py __init__.py config.py datatype_factory_base.py decorators.py exceptions.py functools.py io.py logger.py metadata.py net.py parfive_helpers.py scraper.py doctest.py generate.py __init__.py sysinfo.py test_config.py test_datatype_factory_base.py test_decorators.py test_functools.py test_logger.py test_metadata.py test_net.py test_sysinfo.py test_util.py test_xml.py __init__.py types.py util.py xml.py __init__.py version.py mapsequenceanimator.py test_basefuncanimator.py test_mapsequenceanimator.py test_wcs.py __init__.py __init__.py cm.py color_tables.py eit_dark_blue.csv eit_dark_green.csv eit_dark_red.csv eit_yellow.csv euvi_171.csv euvi_195.csv euvi_284.csv euvi_304.csv grayscale.csv hi1.csv hi2.csv hmi_mag.csv idl_3.csv lasco_c2.csv lasco_c3.csv README.rst rhessi.csv std_gamma_2.csv stereo_cor1.csv stereo_cor2.csv trace_1216.csv trace_1550.csv trace_1600.csv trace_1700.csv trace_171.csv trace_195.csv trace_284.csv test_cm.py __init__.py __init__.py limb.py test_limb.py __init__.py visualization.py wcsaxes_compat.py __init__.py _compiler.c _version.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\nfrom setuptools import setup # isort:skip\nimport os\nfrom itertools import chain\n\nfrom extension_helpers import get_extensions\n\ntry:\n# Recommended for setuptools 61.0.0+\n# (though may disappear in the future)\nfrom setuptools.config.setupcfg import read_configuration\nexcept ImportError:\nfrom setuptools.config import read_configuration\n\n################################################################################\n# Programmatically generate some extras combos.\n################################################################################\nextras = read_configuration(\"setup.cfg\")['options']['extras_require']\n\n# Dev is everything\nextras['dev'] = list(chain(*extras.values()))\n\n# All is everything but tests and docs\nexclude_keys = (\"tests\", \"docs\", \"dev\")\nex_extras = dict(filter(lambda i: i[0] not in exclude_keys, extras.items()))\n# Concatenate all the values together for 'all'\nextras['all'] = list(chain.from_iterable(ex_extras.values()))\n\nsetup(\nextras_require=extras,\nuse_scm_version={'write_to': os.path.join('sunpy', '_version.py')},\next_modules=get_extensions(),\n)\n"
    },
    {
        "package_name": "supervisor-4.2.4",
        "file_list": "CHANGES.rst COPYRIGHT.txt logo_hi.gif repoze.css api.rst conf.py configuration.rst development.rst events.rst faq.rst glossary.rst index.rst installing.rst introduction.rst logging.rst Makefile plugins.rst running.rst subprocess-transitions.png subprocess.rst upgrading.rst xmlrpc.rst LICENSES.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py childutils.py compat.py confecho.py datatypes.py dispatchers.py events.py http.py http_client.py loggers.py asynchat_25.py asyncore_25.py auth_handler.py counter.py default_handler.py filesys.py http_date.py http_server.py logger.py producers.py util.py xmlrpc_handler.py __init__.py options.py pidproxy.py poller.py process.py rpcinterface.py loop_eventgen.py loop_listener.py sample_commevent.py sample_eventlistener.py sample_exiting_eventlistener.py sample.conf socket_manager.py states.py supervisorctl.py supervisord.py templating.py base.py donothing.conf included.conf include.conf issue-1054.conf issue-1170a.conf issue-1170b.conf issue-1170c.conf issue-1224.conf issue-1231a.conf issue-1231b.conf issue-1231c.conf issue-1298.conf issue-1483a.conf issue-1483b.conf issue-1483c.conf issue-291a.conf issue-550.conf issue-565.conf issue-638.conf issue-663.conf issue-664.conf issue-733.conf issue-835.conf issue-836.conf issue-986.conf listener.py print_env.py spew.py test_1231.py unkillable_spew.py test_childutils.py test_confecho.py test_datatypes.py test_dispatchers.py test_end_to_end.py test_events.py test_http.py test_http_client.py test_loggers.py test_options.py test_pidproxy.py test_poller.py test_process.py test_rpcinterfaces.py test_socket_manager.py test_states.py test_supervisorctl.py test_supervisord.py test_templating.py test_web.py test_xmlrpc.py __init__.py icon.png rule.gif state0.gif state1.gif state2.gif state3.gif supervisor.gif status.html supervisor.css tail.html version.txt web.py xmlrpc.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt tox.ini",
        "setup.py": "##############################################################################\n#\n# Copyright (c) 2006-2015 Agendaless Consulting and Contributors.\n# All Rights Reserved.\n#\n# This software is subject to the provisions of the BSD-like license at\n# http:\/\/www.repoze.org\/LICENSE.txt. A copy of the license should accompany\n# this distribution. THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL\n# EXPRESS OR IMPLIED WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO,\n# THE IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND\n# FITNESS FOR A PARTICULAR PURPOSE\n#\n##############################################################################\n\nimport os\nimport sys\n\npy_version = sys.version_info[:2]\n\nif py_version < (2, 7):\nraise RuntimeError('On Python 2, Supervisor requires Python 2.7 or later')\nelif (3, 0) < py_version < (3, 4):\nraise RuntimeError('On Python 3, Supervisor requires Python 3.4 or later')\n\n# pkg_resource is used in several places\nrequires = [\"setuptools\"]\ntests_require = []\nif py_version < (3, 3):\ntests_require.append('mock<4.0.0.dev0')\n\ntesting_extras = tests_require + [\n'pytest',\n'pytest-cov',\n]\n\nfrom setuptools import setup, find_packages\nhere = os.path.abspath(os.path.dirname(__file__))\ntry:\nwith open(os.path.join(here, 'README.rst'), 'r') as f:\nREADME = f.read()\nwith open(os.path.join(here, 'CHANGES.rst'), 'r') as f:\nCHANGES = f.read()\nexcept Exception:\nREADME = \"\"\"\\\nSupervisor is a client\/server system that allows its users to\ncontrol a number of processes on UNIX-like operating systems. \"\"\"\nCHANGES = ''\n\nCLASSIFIERS = [\n'Development Status :: 5 - Production\/Stable',\n'Environment :: No Input\/Output (Daemon)',\n'Intended Audience :: System Administrators',\n'Natural Language :: English',\n'Operating System :: POSIX',\n'Topic :: System :: Boot',\n'Topic :: System :: Monitoring',\n'Topic :: System :: Systems Administration',\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n]\n\nversion_txt = os.path.join(here, 'supervisor\/version.txt')\nwith open(version_txt, 'r') as f:\nsupervisor_version = f.read().strip()\n\ndist = setup(\nname='supervisor',\nversion=supervisor_version,\nlicense='BSD-derived (http:\/\/www.repoze.org\/LICENSE.txt)',\nurl='http:\/\/supervisord.org\/',\ndescription=\"A system for controlling process state under UNIX\",\nlong_description=README + '\\n\\n' + CHANGES,\nclassifiers=CLASSIFIERS,\nauthor=\"Chris McDonough\",\nauthor_email=\"chrism@plope.com\",\npackages=find_packages(),\ninstall_requires=requires,\nextras_require={\n'testing': testing_extras,\n},\ntests_require=tests_require,\ninclude_package_data=True,\nzip_safe=False,\ntest_suite=\"supervisor.tests\",\nentry_points={\n'console_scripts': [\n'supervisord = supervisor.supervisord:main',\n'supervisorctl = supervisor.supervisorctl:main',\n'echo_supervisord_conf = supervisor.confecho:main',\n'pidproxy = supervisor.pidproxy:main',\n],\n},\n)\n"
    },
    {
        "package_name": "tabulate-0.8.10",
        "file_list": "benchmark.py CHANGELOG LICENSE MANIFEST.in PKG-INFO README README.md setup.cfg setup.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt tabulate.py common.py test_api.py test_cli.py test_input.py test_internal.py test_output.py test_regression.py test_textwrapper.py",
        "setup.py": "#!\/usr\/bin\/env python\n\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\n\nfrom platform import python_version_tuple, python_implementation\nimport os\nimport re\n\n# strip links from the descripton on the PyPI\nif python_version_tuple()[0] >= \"3\":\nLONG_DESCRIPTION = open(\"README.md\", \"r\", encoding=\"utf-8\").read()\nelse:\nLONG_DESCRIPTION = open(\"README.md\", \"r\").read()\n\n# strip Build Status from the PyPI package\ntry:\nif python_version_tuple()[:2] >= (\"2\", \"7\"):\nstatus_re = \"^Build status\\n(.*\\n){7}\"\nLONG_DESCRIPTION = re.sub(status_re, \"\", LONG_DESCRIPTION, flags=re.M)\nexcept TypeError:\nif python_implementation() == \"IronPython\":\n# IronPython doesn't support flags in re.sub (IronPython issue #923)\npass\nelse:\nraise\n\ninstall_options = os.environ.get(\"TABULATE_INSTALL\", \"\").split(\",\")\nlibonly_flags = set([\"lib-only\", \"libonly\", \"no-cli\", \"without-cli\"])\nif libonly_flags.intersection(install_options):\nconsole_scripts = []\nelse:\nconsole_scripts = [\"tabulate = tabulate:_main\"]\n\n\nsetup(\nname=\"tabulate\",\nversion=\"0.8.10\",\ndescription=\"Pretty-print tabular data\",\nlong_description=LONG_DESCRIPTION,\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Sergey Astanin\",\nauthor_email=\"s.astanin@gmail.com\",\nurl=\"https:\/\/github.com\/astanin\/python-tabulate\",\nlicense=\"MIT\",\npython_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\",\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Software Development :: Libraries\",\n],\npy_modules=[\"tabulate\"],\nentry_points={\"console_scripts\": console_scripts},\nextras_require={\"widechars\": [\"wcwidth\"]},\n)\n"
    },
    {
        "package_name": "tardis-client-1.3.3",
        "file_list": "LICENSE PKG-INFO pyproject.toml README.md setup.py channel.py consts.py data_downloader.py handy.py bitmex.py market_reconstructor.py __init__.py tardis_client.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['tardis_client', 'tardis_client.reconstructors']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['aiofiles>=0.8.0,<0.9.0',\n'aiohttp>=3.8.1,<4.0.0',\n'sortedcontainers>=2.1,<3.0']\n\nsetup_kwargs = {\n'name': 'tardis-client',\n'version': '1.3.3',\n'description': 'Python client for tardis.dev - historical tick-level cryptocurrency market data replay API.',\n'long_description': '# tardis-client\\n\\n[![PyPi](https:\/\/img.shields.io\/pypi\/v\/tardis-client.svg)](https:\/\/pypi.org\/project\/tardis-client\/)\\n[![Python](https:\/\/img.shields.io\/pypi\/pyversions\/tardis-client.svg)](https:\/\/pypi.org\/project\/tardis-client\/)\\n<a href=\"https:\/\/github.com\/psf\/black\"><img alt=\"Code style: black\" src=\"https:\/\/img.shields.io\/badge\/code%20style-black-000000.svg\"><\/a>\\n\\nPython client for [tardis.dev](https:\/\/tardis.dev) - historical tick-level cryptocurrency market data replay API.\\nProvides fast, high level and developer friendly wrapper for more low level [HTTP API](https:\/\/docs.tardis.dev\/api#http-api) with local file based caching build in.\\n\\n## Installation\\n\\nRequires Python 3.7.0+ installed.\\n\\n```sh\\npip install tardis-client\\n```\\n\\n## Usage\\n\\n```python\\nimport asyncio\\nfrom tardis_client import TardisClient, Channel\\n\\nasync def replay():\\n tardis_client = TardisClient()\\n\\n # replay method returns Async Generator\\n # https:\/\/rickyhan.com\/jekyll\/update\/2018\/01\/27\/python36.html\\n messages = tardis_client.replay(\\n exchange=\"bitmex\",\\n from_date=\"2019-06-01\",\\n to_date=\"2019-06-02\",\\n filters=[Channel(name=\"trade\", symbols=[\"XBTUSD\",\"ETHUSD\"]), Channel(\"orderBookL2\", [\"XBTUSD\"])],\\n )\\n\\n # this will print all trades and orderBookL2 messages for XBTUSD\\n # and all trades for ETHUSD for bitmex exchange\\n # between 2019-06-01T00:00:00.000Z and 2019-06-02T00:00:00.000Z (whole first day of June 2019)\\n async for local_timestamp, message in messages:\\n # local timestamp is a Python datetime that marks timestamp when given message has been received\\n # message is a message object as provided by exchange real-time stream\\n print(message)\\n\\nasyncio.run(replay())\\n```\\n\\n[![Try on repl.it](https:\/\/repl-badge.jajoosam.repl.co\/try.png)](https:\/\/repl.it\/@TardisThad\/tardis-python-client-example)\\n\\n## API\\n\\n`tardis-client` package provides `TardisClient` and `Channel` classes.\\n\\n```python\\nfrom tardis_client import TardisClient, Channel\\n```\\n\\n### TardisClient\\n\\nOptional client constructor parameters.\\n\\n| name | type | default value | description |\\n| ---------------------- | -------- | --------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| `api_key` (optional) | `string` | `\"\"` | optional `string` containing API key for [tardis.dev](https:\/\/tardis.dev) API. If not provided only first day of each month of data is accessible (free access) |\\n| `cache_dir` (optional) | `string` | `<os.tmpdir>\/.tardis-cache` | optional `string` with path to local dir that will be used as cache location. If not provided default `temp` dir for given OS will be used. |\\n\\nExample:\\n\\n```python\\n# creates new client instance with access only to sample data (first day of each month)\\ntardis_client = TardisClient()\\n\\n# creates new client with access to all data for given API key\\ntardis_client = TardisClient(api_key=\"YOUR_API_KEY\")\\n\\n# creates new client with custom cache dir\\ntardis_client = TardisClient(cache_dir=\".\/cache\")\\n```\\n\\n- ### `tardis_client.clear_cache()`\\n\\n Removes local file cache dir and it\\'s contents.\\n\\n Example:\\n\\n ```python\\n tardis_client = TardisClient()\\n\\n tardis_client.clear_cache()\\n ```\\n\\n- ### `tardis_client.replay(exchange, from_date, to_date, filters=[])`\\n\\n Replays historical market data messages for given replay arguments.\\n\\n Returns [Async Generator](https:\/\/rickyhan.com\/jekyll\/update\/2018\/01\/27\/python36.html) with named tuples (`namedtuple(\"Response\", [\"local_timestamp\", \"message\"])`).\\n\\n - `local_timestamp` is a Python datetime object specyfying when message has been received from the exchange real-time data feed.\\n\\n - `message` is Python dict with parsed JSON that has exactly the same format as message provided by particular exchange\\'s real-time data feed.\\n\\n #### `replay` method parameters:\\n\\n | name | type | default value | description |\\n | -------------------- | --------------------------------- | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n | `exchange` | `string` | - | requested exchange name - Use [\/exchanges](https:\/\/docs.tardis.dev\/api\/http#exchanges) API call to get allowed exchanges ids |\\n | `from_date` | `string` | - | requested UTC start date of data feed - [valid ISO date string](https:\/\/docs.python.org\/3\/library\/datetime.html#datetime.date.fromisoformat), eg: `2019-04-05` or `2019-05-05T00:00:00` |\\n | `to_date` | `string` | - | requested UTC end date of data feed - [valid ISO date string](https:\/\/docs.python.org\/3\/library\/datetime.html#datetime.date.fromisoformat), eg: `2019-04-05` or `2019-05-05T00:00:00` |\\n | `filters` (optional) | [`List[Channel]`](#channel-class) | [] | optional filters of requested data feed. Use [\/exchanges\/:exchange](https:\/\/docs.tardis.dev\/api\/http#exchanges-exchange) API call to get allowed channel names and symbols for requested exchange |\\n\\n ##### `Channel` class\\n\\n `Channel` class constructor parameters.\\n\\n | name | type | description |\\n | --------- | -------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |\\n | `name` | `string` | Use [\/exchanges\/:exchange](https:\/\/docs.tardis.dev\/api#exchanges-exchange) API call to get allowed channel names and symbols for requested exchange |\\n | `symbols` | `List[string]` | Use [\/exchanges\/:exchange](https:\/\/docs.tardis.dev\/api#exchanges-exchange) API call to get allowed channel names and symbols for requested exchange |\\n\\n ```python\\n Channel(name=\"trade\", symbols=[\"XBTUSD\",\"ETHUSD\"])\\n Channel(\"orderBookL2\", [\"XBTUSD\"])\\n ```\\n\\n## FAQ\\n\\n#### How to debug it if something went wrong?\\n\\n`tardis-client` uses Python logging on `DEBUG` level for that purpose. In doubt please create issue in this repository with steps how to reproduce the issue.\\n\\n#### Where can I find more details about tardis.dev API?\\n\\nCheck out [API docs](https:\/\/docs.tardis.dev\/api).\\n\\n## License\\n\\nMPL-2.0\\n',\n'author': 'Thad',\n'author_email': 'thad@tardis.dev',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/tardis-dev\/python-client',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'python_requires': '>=3.7',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "tblib-1.7.0",
        "file_list": ".appveyor.yml .bumpversion.cfg .cookiecutterrc .coveragerc .editorconfig .gitignore .readthedocs.yml .travis.yml AUTHORS.rst CHANGELOG.rst appveyor-download.py appveyor-with-compiler.cmd bootstrap.py requirements.txt .appveyor.yml .travis.yml CONTRIBUTING.rst authors.rst changelog.rst conf.py contributing.rst index.rst installation.rst readme.rst requirements.txt spelling_wordlist.txt usage.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py cpython.py decorators.py pickling_support.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt badmodule.py badsyntax.py examples.py test_issue30.py test_pickle_exception.py test_tblib.py tox.ini",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- encoding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nimport io\nimport re\nfrom glob import glob\nfrom os.path import basename\nfrom os.path import dirname\nfrom os.path import join\nfrom os.path import splitext\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef read(*names, **kwargs):\nwith io.open(\njoin(dirname(__file__), *names),\nencoding=kwargs.get('encoding', 'utf8')\n) as fh:\nreturn fh.read()\n\n\nsetup(\nname='tblib',\nversion='1.7.0',\nlicense='BSD-2-Clause',\ndescription='Traceback serialization library.',\nlong_description='%s\\n%s' % (\nre.compile('^.. start-badges.*^.. end-badges', re.M | re.S).sub('', read('README.rst')),\nre.sub(':[a-z]+:`~?(.*?)`', r'``\\1``', read('CHANGELOG.rst'))\n),\nauthor='Ionel Cristian M\u0103rie\u0219',\nauthor_email='contact@ionelmc.ro',\nurl='https:\/\/github.com\/ionelmc\/python-tblib',\npackages=find_packages('src'),\npackage_dir={'': 'src'},\npy_modules=[splitext(basename(path))[0] for path in glob('src\/*.py')],\ninclude_package_data=True,\nzip_safe=False,\nclassifiers=[\n# complete classifier list: http:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: Unix',\n'Operating System :: POSIX',\n'Operating System :: Microsoft :: Windows',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n# uncomment if you test on these interpreters:\n# 'Programming Language :: Python :: Implementation :: IronPython',\n# 'Programming Language :: Python :: Implementation :: Jython',\n# 'Programming Language :: Python :: Implementation :: Stackless',\n'Topic :: Utilities',\n],\nproject_urls={\n'Documentation': 'https:\/\/python-tblib.readthedocs.io\/',\n'Changelog': 'https:\/\/python-tblib.readthedocs.io\/en\/latest\/changelog.html',\n'Issue Tracker': 'https:\/\/github.com\/ionelmc\/python-tblib\/issues',\n},\nkeywords=[\n'traceback', 'debugging', 'exceptions',\n],\npython_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\ninstall_requires=[\n# eg: 'aspectlib==1.1.1', 'six>=1.7',\n],\nextras_require={\n# eg:\n# 'rst': ['docutils>=0.11'],\n# ':python_version==\"2.6\"': ['argparse'],\n},\n)\n"
    },
    {
        "package_name": "tdigest-0.5.2.2",
        "file_list": "LICENSE.txt PKG-INFO README.md setup.cfg setup.py tdigest.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\nimport os\nfrom setuptools import setup\n\n\ndef read(fname):\nreturn open(os.path.join(os.path.dirname(__file__), fname)).read()\n\n\nsetup(name='tdigest',\nversion='0.5.2.2',\ndescription='T-Digest data structure',\nauthor='Cam Davidson-pilon',\nauthor_email='cam.davidson.pilon@gmail.com',\nurl='https:\/\/github.com\/CamDavidsonPilon\/tdigest',\npackages=['tdigest'],\nlong_description=read('README.md'),\ninstall_requires=[\n\"accumulation_tree\",\n\"pyudorandom\"\n],\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python\",\n\"Topic :: Scientific\/Engineering\",\n\"Programming Language :: Python :: 3\",\n],\nlicense=\"MIT\",\nkeywords='percentile, median, probabilistic data structure, quantile, distributed, qdigest, tdigest, streaming, pyspark',\npackage_data={\n\"tdigest\": [\n\"..\/README.md\",\n\"..\/LICENSE.txt\",\n\"..\/MANIFEST\",\n]\n},\nextras_require = { 'tests': [ 'pytest', 'pytest-timeout', 'pytest-cov', 'numpy' ] },\n)\n"
    },
    {
        "package_name": "tensorboard_logger-0.1.0",
        "file_list": "HISTORY.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py crc32c.py tensorboard_logger.py event_pb2.py summary_pb2.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt test_tensorboard_logger.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nfrom setuptools import setup, find_packages\n\nwith open('README.rst') as readme_file:\nreadme = readme_file.read()\n\nwith open('HISTORY.rst') as history_file:\nhistory = history_file.read()\n\nrequirements = [\n'protobuf',\n'six',\n'numpy',\n'scipy >= 0.19.1',\n'pillow >= 4.1.1',\n]\n\ntest_requirements = [\n'pytest',\n]\n\nsetup(\nname='tensorboard_logger',\nversion='0.1.0',\ndescription='Log TensorBoard events without Tensorflow',\nlong_description=readme + '\\n\\n' + history,\nauthor='Konstantin Lopuhin',\nauthor_email='kostia.lopuhin@gmail.com',\nurl='https:\/\/github.com\/TeamHG-Memex\/tensorboard_logger',\npackages=find_packages(exclude=['docs', 'tests']),\ninclude_package_data=True,\ninstall_requires=requirements,\nlicense='MIT license',\nzip_safe=False,\nclassifiers=[\n'Development Status :: 2 - Pre-Alpha',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n],\ntest_suite='tests',\ntests_require=test_requirements\n)\n"
    },
    {
        "package_name": "testing.postgresql-1.3.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py postgresql.py __init__.py dependency_links.txt namespace_packages.txt PKG-INFO requires.txt SOURCES.txt top_level.txt test_postgresql.py",
        "setup.py": "# -*- coding: utf-8 -*-\nimport sys\nfrom setuptools import setup, find_packages\n\nclassifiers = [\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2.6\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3.2\",\n\"Programming Language :: Python :: 3.3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Topic :: Database\",\n\"Topic :: Software Development\",\n\"Topic :: Software Development :: Testing\",\n]\n\ninstall_requires = ['testing.common.database', 'pg8000 >= 1.10']\nif sys.version_info < (2, 7):\ninstall_requires.append('unittest2')\n\n\nsetup(\nname='testing.postgresql',\nversion='1.3.0',\ndescription='automatically setups a postgresql instance in a temporary '\n'directory, and destroys it after testing',\nlong_description=open('README.rst').read(),\nclassifiers=classifiers,\nkeywords=[],\nauthor='Takeshi Komiya',\nauthor_email='i.tkomiya at gmail.com',\nurl='https:\/\/github.com\/tk0miya\/testing.postgresql',\nlicense='Apache License 2.0',\npackages=find_packages('src'),\npackage_dir={'': 'src'},\npackage_data={'': ['buildout.cfg']},\ninclude_package_data=True,\ninstall_requires=install_requires,\nextras_require=dict(\ntesting=[\n'nose',\n'psycopg2',\n'SQLAlchemy',\n],\n),\ntest_suite='nose.collector',\nnamespace_packages=['testing'],\n)\n"
    },
    {
        "package_name": "textile-4.0.2",
        "file_list": ".coveragerc CHANGELOG.textile CONTRIBUTORS.txt LICENSE.txt MANIFEST.in PKG-INFO pytest.ini README.textile setup.cfg setup.py README.txt test_attributes.py test_block.py test_cli.py test_footnoteRef.py test_getimagesize.py test_getRefs.py test_github_issues.py test_glyphs.py test_image.py test_imagesize.py test_lists.py test_retrieve.py test_span.py test_subclassing.py test_table.py test_textile.py test_textilefactory.py test_urls.py test_utils.py test_values.py core.py block.py table.py __init__.py regex_strings.py textilefactory.py imagesize.py sanitizer.py __init__.py utils.py version.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup, find_packages\nfrom setuptools.command.test import test as TestCommand\nimport os\nimport sys\n\n\ndef get_version():\nbasedir = os.path.dirname(__file__)\nwith open(os.path.join(basedir, 'textile\/version.py')) as f:\nvariables = {}\nexec(f.read(), variables)\nreturn variables.get('VERSION')\nraise RuntimeError('No version info found.')\n\nsetup(\nname='textile',\nversion=get_version(),\nauthor='Dennis Burke',\nauthor_email='ikirudennis@gmail.com',\ndescription='Textile processing for python.',\nurl='http:\/\/github.com\/textile\/python-textile',\npackages=find_packages(),\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3 :: Only',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\nkeywords='textile,text,html markup',\ninstall_requires=[\n'html5lib>=1.0.1',\n'regex>1.0; implementation_name != \"pypy\"',\n],\nextras_require={\n'develop': ['pytest', 'pytest-cov'],\n'imagesize': ['Pillow>=3.0.0'],\n},\nentry_points={'console_scripts': ['pytextile=textile.__main__:main']},\ntests_require=['pytest', 'pytest-cov'],\ninclude_package_data=True,\nzip_safe=False,\npython_requires='>=3.5',\n)\n"
    },
    {
        "package_name": "textX-3.0.0",
        "file_list": ".gitattributes .gitignore .travis.yml textX-logo.png textX-logo.svg AUTHORS.md CHANGELOG.md CONTRIBUTING.md comparison.md version-select.css debugging.md error_handling.md faq-todo.md faq.md grammar.md howto.md domain_specific_visualization.md language_modularization.md README.md base_types.dot base_types.png example.dot.png hello_meta.dot.png hello_parts.png hello_parts.svg model_from_file_or_str.png model_from_file_or_str.pu process.png program.rbt.dot.png robot.tx.dot.png textX-logo.png textX-logo.svg index.md jinja.md version-select.js metamodel.md model.md multimetamodel.md parser_config.md process.md registration.md rrel.md scaffolding.md scoping.md style.css textx_command.md entity.tx entity1.tx java.template person.ent person.ent.dot.png person1.ent person1.ent.dot.png srcgen.py entity.md hello_world.md robot.md self-dsl.md state_machine.md toylanguage.md turtle.md visualization.md release_1_5.md drawing.py entity_meta.dot.png person.dot.png entity.tx entity_codegen.py entity_test.py java.template person.ent README.md __init__.py boolean.py calc.py calc_isinstance.py calc_monkey.py calc_processors.py README.md example.hello hello.py hello.tx README.md LightSwitch.rpy LightSwitch.rpy.dot.pdf README.md rhapsody.tx rhapsody.tx.dot.pdf example1.json example2.json example3.json example4.json example5.json json.py json.tx README.md experiment.dot.png experiment.pf experiment.py pyflies.tx pyflies_meta.dot.png README.md README.md README.md render_all_grammars.py program.rbt README.md robot.py robot.tx gate.sm gate.sm.dot.png miss_grant_controller.sm miss_grant_controller.sm.dot.png README.md smdot.py state_machine.py state_machine.tx state_machine.tx.dot.png example.dot.png example.wf README.md workflow.py workflow.tx workflow_meta.dot.png install-dev.sh install-test.sh LICENSE.txt mkdocs.yml PKG-INFO PULL_REQUEST_TEMPLATE.md README.md runtests.sh setup.cfg setup.py test_free_text_with_references.py test_hierarchical_data_structures_referencing_attributes.py test_modeling_float_int_variables.py test_reference_to_python.py example.hello hello.tx test_textx_generators.py Data.tx __init__.py setup.cfg setup.py data_structures.edata types.etype types_with_error.etype test_data_dsl.py generators.py __init__.py setup.cfg setup.py Flow.tx __init__.py setup.cfg setup.py .gitignore data_flow.eflow data_flow_including_error.e data_flow_with_error.eflow data_structures.edata data_structures_including_e MODEL_WITH_IMPORT_ERROR.efl MODEL_WITH_IMPORT_SYNTAX_ER MODEL_WITH_SYNTAX_ERROR.efl MODEL_WITH_TYPE_ERROR.eflow types.etype types_with_error.etype types_with_syntax_error.ety test_flow_dsl.py test_issue196.py setup.cfg setup.py types.etype types_with_error.etype test_types_dsl.py Types.tx __init__.py README.md test_check.py test_discovery.py test_generate.py test_registration.py test_version.py base.mod base.packageRef main.mod main.packageRef a.dsl b.dsl a.a A.tx b.b B.tx test_issue103_python_like_import.py test_issue108_obj_proc_multifile.py test_issue128.py test_issue140.py test_issue14_obj_proc.py test_issue155.py test_issue166.py test_issue188.py test_issue205_skipws_propagation.py test_issue206_regex.py test_issue23_direct_recursion.py test_issue246.py test_issue275.py test_issue33.py test_issue72.py test_issue78.py test_issue96.py test_issue97.py test_issue_34_resolving.py test_issue_53_comments.py test_issue_80_object_processors.py test_issue_89.py test_json_issue.py test_repetition_single_assignment_error.py setup.cfg setup.py cli.py __init__.py test_subcommands.py test_auto_init.py test_examples.py last.tx second.tx third.tx first.tx first_diamond.tx first_new.tx third.tx second.tx first.tx third.tx second.tx first.tx fourth.tx third.tx second.tx test_import.py model.ftest model.stest test_language_reference.py test_metaclass_reference.py last.tx second.tx third.tx first_diamond.tx first_repr.tx second_repr.tx third_repr.tx model_param_generate_test.mpt a.a b.b data_flow.flow data_flow_including_erro data_flow_with_error.flo data_structures.data data_structures_includin types.type types_with_error.type test_metamodel.py model.txt test_model_params.py test_multi_metamodel_refs.py test_metamodel_params.py test_model_api.py test_objcrossref_positions.py test_processors.py test_regexp_with_groups.py test_repeat_modifiers.py test_resolving.py test_rule_modifiers.py Components.tx ComponentsRrel.tx example.components example_A.components example_B.components example_err1.components example_err2.components example_inherit1.components example_inherit2.components example_inherit3.components example_wrong_type.components Components.tx example.components b_error.model b_multi_import.model b_ok1.model b_ok2.model a.model c.model b.model a.model test_importURI_variations.py Interface.tx all_in_one.if app.if app_error1.if app_error2.if base.if types.if A.if A_multi_import.if B.if types.if Interface.tx all_in_one.if app.if base.if types.if assembly_car1.prog assembly_car2.prog assembly_car3.prog local.tasks position.tasks assembly.tasks position.tasks task_specification.tx Components.tx example.components example.users Users.tx Base.tx Ingredient.tx Recipe.tx recipe1.recipe recipe2.recipe some.ingredient A.tx B.tx Base.tx C.tx model_a.a model_a2.a model_b.b model_c.c A_includes_B_C.a B_includes_D.b C_includes_D.c D.a model_a.a model_b.b model_a.a model_b.b model_c.b model_d.b Components.tx example.components example.users Users.tx test_fully_qualified_name_test_error.model Grammar.tx included.model main.model test_buildins.py test_builtin_models.py test_children.py test_exception_from_included_model.py test_full_qualified_name.py test_full_qualified_name_rrel_manual.py test_global_import_modules.py test_import_module.py test_import_module_search_path_issue66.py test_inheritance.py test_issue170_combined_scope_provider.py test_local_scope.py test_local_scope_circular.py test_metamodel_provider.py test_metamodel_provider2.py test_metamodel_provider3.py test_metamodel_provider3_custom_classes.py test_metamodel_provider_utf_16_le.py test_model_export.py test_model_modification_through_scoping.py test_model_repository.py test_plain_name.py test_reference_to_buildin_attribute.py othermodel.json test_reference_to_nontextx_attribute.py test_rrel.py test_scoping_tools.py test_special_model_attributes.model test_special_model_attributes.py test_strict_unicode.py test_textx_language.py test_textx_tools_support.py test_unicode.py test_user_classes.py test_user_classes_attr_functions.py test_user_classes_callable.py test_user_classes_init_order.py test_user_classes_with_properties.py test_user_class_attrs_frozen.py test_user_class_constructor_calls.py test_user_class_with_slots.py pyflies.tx test_textx_rrel.py test_textx_textx.py textx_rrel_test.tx A.tx B.tx callgraph.sh py2_callgraph_memoization.pdf py2_callgraph_nomemoization.pdf py2_memory_report_memoization.txt py2_memory_report_nomemoization.txt py2_speed_report.txt py3_callgraph_memoization.pdf py3_callgraph_nomemoization.pdf py3_memory_report_memoization.txt py3_memory_report_nomemoization.txt py3_speed_report.txt requirements.txt rhapsody.tx run_all_py2.sh run_all_py3.sh run_memory.sh run_speed.sh test_callgraph_memoization.py test_callgraph_nomemoization.py LightSwitch.rpy LightSwitchDouble.rpy test_memory_memoization.py test_memory_nomemoization.py test_speed.py check.py discover.py generate.py version.py __init__.py const.py exceptions.py export.py generators.py lang.py metamodel.py model.py model_params.py registration.py providers.py rrel.py tools.py __init__.py six.py textx.tx __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nimport os\nimport sys\nfrom setuptools import setup\n\nthis_dir = os.path.abspath(os.path.dirname(__file__))\n\nVERSIONFILE = os.path.join(this_dir, \"textx\", \"__init__.py\")\nVERSION = None\nfor line in open(VERSIONFILE, \"r\").readlines():\nif line.startswith('__version__'):\nVERSION = line.split('\"')[1]\n\nif not VERSION:\nraise RuntimeError('No version defined in textx.__init__.py')\n\nif sys.argv[-1].startswith('publish'):\nif os.system(\"pip list | grep twine\"):\nprint(\"twine not installed.\\nUse `pip install twine`.\\nExiting.\")\nsys.exit()\nos.system(\"python setup.py sdist bdist_wheel\")\nif sys.argv[-1] == 'publishtest':\nos.system(\"twine upload -r test dist\/*\")\nelse:\nos.system(\"twine upload dist\/*\")\nprint(\"You probably want to also tag the version now:\")\nprint(\" git tag -a {0} -m 'version {0}'\".format(VERSION))\nprint(\" git push --tags\")\nsys.exit()\n\nsetup(version=VERSION)\n"
    },
    {
        "package_name": "TgCrypto-1.2.3",
        "file_list": "COPYING COPYING.lesser MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py test_cbc.py __init__.py test_ctr.py __init__.py test_ige.py __init__.py __init__.py aes256.c aes256.h cbc256.c cbc256.h ctr256.c ctr256.h ige256.c ige256.h tgcrypto.c dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "# Pyrogram - Telegram MTProto API Client Library for Python\n# Copyright (C) 2017-present Dan <https:\/\/github.com\/delivrance>\n#\n# This file is part of Pyrogram.\n#\n# Pyrogram is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU Lesser General Public License as published\n# by the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pyrogram is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with Pyrogram. If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\nfrom setuptools import setup, Extension, find_packages\n\nwith open(\"README.md\", encoding=\"utf-8\") as f:\nreadme = f.read()\n\nsetup(\nname=\"TgCrypto\",\nversion=\"1.2.3\",\ndescription=\"Fast and Portable Cryptography Extension Library for Pyrogram\",\nlong_description=readme,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/pyrogram\",\ndownload_url=\"https:\/\/github.com\/pyrogram\/tgcrypto\/releases\/latest\",\nauthor=\"Dan\",\nauthor_email=\"dan@pyrogram.org\",\nlicense=\"LGPLv3+\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: C\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: Implementation\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Topic :: Security\",\n\"Topic :: Security :: Cryptography\",\n\"Topic :: Internet\",\n\"Topic :: Communications\",\n\"Topic :: Communications :: Chat\",\n\"Topic :: Software Development :: Libraries\",\n\"Topic :: Software Development :: Libraries :: Python Modules\"\n],\nkeywords=\"pyrogram telegram crypto cryptography encryption mtproto extension library aes\",\nproject_urls={\n\"Tracker\": \"https:\/\/github.com\/pyrogram\/tgcrypto\/issues\",\n\"Community\": \"https:\/\/t.me\/pyrogram\",\n\"Source\": \"https:\/\/github.com\/pyrogram\/tgcrypto\",\n\"Documentation\": \"https:\/\/docs.pyrogram.org\",\n},\npython_requires=\"~=3.6\",\npackages=find_packages(),\ntest_suite=\"tests\",\nzip_safe=False,\next_modules=[\nExtension(\n\"tgcrypto\",\nsources=[\n\"tgcrypto\/tgcrypto.c\",\n\"tgcrypto\/aes256.c\",\n\"tgcrypto\/ige256.c\",\n\"tgcrypto\/ctr256.c\",\n\"tgcrypto\/cbc256.c\"\n]\n)\n]\n)\n"
    },
    {
        "package_name": "thinc-8.1.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py about.py api.py cblas.pxd cblas.pyx cpu_kernels.hh cupy_ops.py linalg.pxd linalg.pyx mps_ops.py numpy_ops.pxd numpy_ops.pyx ops.py _cupy_allocators.py _custom_kernels.cu _custom_kernels.py _murmur3.cu _param_server.py __init__.pxd __init__.py compat.py config.py search.pxd search.pyx c_test_search.pyx __init__.py __init__.pxd __init__.py initializers.py add.py array_getitem.py bidirectional.py cauchysimilarity.py chain.py clipped_linear.py clone.py concatenate.py dropout.py embed.py expand_window.py gelu.py hard_swish.py hard_swish_mobilenet.py hashembed.py layernorm.py linear.py list2array.py list2padded.py list2ragged.py logistic.py lstm.py map_list.py maxout.py mish.py multisoftmax.py mxnetwrapper.py noop.py padded2list.py parametricattention.py pytorchwrapper.py ragged2list.py reduce_first.py reduce_last.py reduce_max.py reduce_mean.py reduce_sum.py relu.py remap_ids.py residual.py resizable.py siamese.py sigmoid.py sigmoid_activation.py softmax.py softmax_activation.py sparselinear.pyx strings2arrays.py swish.py tensorflowwrapper.py tuplify.py uniqued.py with_array.py with_array2d.py with_cpu.py with_debug.py with_flatten.py with_getitem.py with_list.py with_nvtx_range.py with_padded.py with_ragged.py with_reshape.py __init__.py loss.py model.py mypy.py optimizers.py py.typed schedules.py mxnet.py pytorch.py pytorch_grad_scaler.py shim.py tensorflow.py __init__.py test_mem.py test_ops.py __init__.py conftest.py test_beam_search.py __init__.py test_basic_tagger.py test_combinators.py test_feed_forward.py test_hash_embed.py test_layers_api.py test_linear.py test_lstm.py test_mnist.py test_mxnet_wrapper.py test_pytorch_wrapper.py test_reduce.py test_shim.py test_softmax.py test_sparse_linear.py test_tensorflow_wrapper.py test_transforms.py test_uniqued.py test_with_debug.py test_with_transforms.py __init__.py test_model.py test_validation.py __init__.py mypy-default.ini mypy-plugin.ini fail_no_plugin.py fail_plugin.py success_no_plugin.py success_plugin.py __init__.py fail-no-plugin.txt fail-plugin.txt success-no-plugin.txt success-plugin.txt test_mypy.py __init__.py program.py test_issue519.py __init__.py test_issue208.py test_issue564.py __init__.py test_pytorch_grad_scaler.py __init__.py strategies.py test_config.py test_examples.py test_indexing.py test_initializers.py test_loss.py test_optimizers.py test_schedules.py test_serialize.py test_types.py test_util.py util.py __init__.py types.py util.py __init__.pxd __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\nimport sys\nimport distutils.util\nfrom distutils.command.build_ext import build_ext\nfrom distutils.sysconfig import get_python_inc\nfrom setuptools import Extension, setup, find_packages\nfrom pathlib import Path\nimport numpy\nfrom Cython.Build import cythonize\nfrom Cython.Compiler import Options\n\n\n# Preserve `__doc__` on functions and classes\n# http:\/\/docs.cython.org\/en\/latest\/src\/userguide\/source_files_and_compilation.html#compiler-options\nOptions.docstrings = True\n\n\nPACKAGES = find_packages()\nMOD_NAMES = [\n\"thinc.backends.cblas\",\n\"thinc.backends.linalg\",\n\"thinc.backends.numpy_ops\",\n\"thinc.extra.search\",\n\"thinc.layers.sparselinear\",\n]\nCOMPILE_OPTIONS = {\n\"msvc\": [\"\/Ox\", \"\/EHsc\"],\n\"other\": [\"-O3\", \"-Wno-strict-prototypes\", \"-Wno-unused-function\"],\n}\nCOMPILER_DIRECTIVES = {\n\"language_level\": -3,\n\"embedsignature\": True,\n\"annotation_typing\": False,\n}\nLINK_OPTIONS = {\"msvc\": [], \"other\": []}\n\n\ndef is_new_osx():\n\"\"\"Check whether we're on OSX >= 10.10\"\"\"\nname = distutils.util.get_platform()\nif sys.platform != \"darwin\":\nreturn False\nelif name.startswith(\"macosx-10\"):\nminor_version = int(name.split(\"-\")[1].split(\".\")[1])\nif minor_version >= 7:\nreturn True\nelse:\nreturn False\nelse:\nreturn False\n\n\nif is_new_osx():\n# On Mac, use libc++ because Apple deprecated use of libstdc\nCOMPILE_OPTIONS[\"other\"].append(\"-stdlib=libc++\")\nLINK_OPTIONS[\"other\"].append(\"-lc++\")\n# g++ (used by unix compiler on mac) links to libstdc++ as a default lib.\n# See: https:\/\/stackoverflow.com\/questions\/1653047\/avoid-linking-to-libstdc\nLINK_OPTIONS[\"other\"].append(\"-nodefaultlibs\")\n\n\n# By subclassing build_extensions we have the actual compiler that will be used\n# which is really known only after finalize_options\n# http:\/\/stackoverflow.com\/questions\/724664\/python-distutils-how-to-get-a-compiler-that-is-going-to-be-used\nclass build_ext_options:\ndef build_options(self):\nif hasattr(self.compiler, \"initialize\"):\nself.compiler.initialize()\nself.compiler.platform = sys.platform[:6]\nfor e in self.extensions:\ne.extra_compile_args = COMPILE_OPTIONS.get(\nself.compiler.compiler_type, COMPILE_OPTIONS[\"other\"]\n)\ne.extra_link_args = LINK_OPTIONS.get(\nself.compiler.compiler_type, LINK_OPTIONS[\"other\"]\n)\n\n\nclass build_ext_subclass(build_ext, build_ext_options):\ndef build_extensions(self):\nbuild_ext_options.build_options(self)\nbuild_ext.build_extensions(self)\n\n\ndef clean(path):\nfor path in path.glob(\"**\/*\"):\nif path.is_file() and path.suffix in (\".so\", \".cpp\"):\nprint(f\"Deleting {path.name}\")\npath.unlink()\n\n\ndef setup_package():\nroot = Path(__file__).parent\n\nif len(sys.argv) > 1 and sys.argv[1] == \"clean\":\nreturn clean(root \/ \"thinc\")\n\nwith (root \/ \"thinc\" \/ \"about.py\").open(\"r\") as f:\nabout = {}\nexec(f.read(), about)\n\ninclude_dirs = [numpy.get_include(), get_python_inc(plat_specific=True)]\next_modules = []\nfor name in MOD_NAMES:\nmod_path = name.replace(\".\", \"\/\") + \".pyx\"\next = Extension(name, [mod_path], language=\"c++\", include_dirs=include_dirs)\next_modules.append(ext)\nprint(\"Cythonizing sources\")\next_modules = cythonize(ext_modules, compiler_directives=COMPILER_DIRECTIVES, language_level=2)\n\nsetup(\nname=\"thinc\",\npackages=PACKAGES,\nversion=about[\"__version__\"],\next_modules=ext_modules,\ncmdclass={\"build_ext\": build_ext_subclass},\npackage_data={\"\": [\"*.pyx\", \"*.pxd\", \"*.pxi\", \"*.cu\", \"*.hh\"]},\n)\n\n\nif __name__ == \"__main__\":\nsetup_package()\n"
    },
    {
        "package_name": "threadloop-1.0.2",
        "file_list": "CHANGES.rst MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_threadloop.py __init__.py exceptions.py threadloop.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup, find_packages\n\ninstall_requires = ['tornado']\n\n# if python < 3, we need futures backport\ntry:\nimport concurrent.futures # noqa\nexcept ImportError:\ninstall_requires.append('futures')\n\nsetup(\nname='threadloop',\nversion='1.0.2',\nauthor='Grayson Koonce',\nauthor_email='breerly@gmail.com',\ndescription='Tornado IOLoop Backed Concurrent Futures',\nlicense='MIT',\nurl='https:\/\/github.com\/breerly\/threadloop',\npackages=find_packages(exclude=['tests']),\ninstall_requires=install_requires,\nclassifiers=[\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n]\n)\n"
    },
    {
        "package_name": "timeloop-1.0.2",
        "file_list": "MANIFEST.in PKG-INFO README.md setup.cfg setup.py app.py exceptions.py helpers.py job.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "# please install python if it is not present in the system\nfrom setuptools import setup\n\nwith open(\"README.md\", \"r\") as fh:\nlong_description = fh.read()\n\nsetup(\nname='timeloop',\nversion='1.0.2',\npackages=['timeloop'],\nlicense = 'MIT',\ndescription = 'An elegant way to run period tasks.',\nauthor = 'Sankalp Jonna',\nauthor_email = 'sankalpjonna@gmail.com',\nkeywords = ['tasks','jobs','periodic task','interval','periodic job', 'flask style', 'decorator'],\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/sankalpjonn\/timeloop\",\ninclude_package_data=True,\n)\n"
    },
    {
        "package_name": "TM1py-1.9.1",
        "file_list": "LICENSE PKG-INFO README.md setup.cfg setup.py Exceptions.py __init__.py Annotation.py Application.py Axis.py Chore.py ChoreFrequency.py ChoreStartTime.py ChoreTask.py Cube.py Dimension.py Element.py ElementAttribute.py Git.py GitCommit.py GitPlan.py GitRemote.py Hierarchy.py MDXView.py NativeView.py Process.py Rules.py Sandbox.py Server.py Subset.py TM1Object.py User.py View.py __init__.py AnnotationService.py ApplicationService.py CellService.py ChoreService.py CubeService.py DimensionService.py ElementService.py GitService.py HierarchyService.py MonitoringService.py ObjectService.py PowerBiService.py ProcessService.py RestService.py SandboxService.py SecurityService.py ServerService.py SubsetService.py TM1Service.py ViewService.py __init__.py MDXUtils.py Utils.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nSCHEDULE_VERSION = '1.9.1'\nSCHEDULE_DOWNLOAD_URL = (\n'https:\/\/github.com\/Cubewise-code\/TM1py\/tarball\/' + SCHEDULE_VERSION\n)\n\nwith open('README.md', 'r') as f:\nlong_description = f.read()\n\nsetup(\nname='TM1py',\npackages=['TM1py', 'TM1py\/Exceptions', 'TM1py\/Objects', 'TM1py\/Services', 'TM1py\/Utils'],\nversion=SCHEDULE_VERSION,\ndescription='A python module for TM1.',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nlicense='MIT',\nauthor='Marius Wirtz',\nauthor_email='MWirtz@cubewise.com',\nurl='https:\/\/github.com\/cubewise-code\/tm1py',\ndownload_url=SCHEDULE_DOWNLOAD_URL,\nkeywords=[\n'TM1', 'IBM Cognos TM1', 'Planning Analytics', 'PA', 'Cognos'\n],\nclassifiers=[\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Natural Language :: English',\n],\ninstall_requires=[\n'ijson',\n'requests',\n'pytz',\n'requests_negotiate_sspi;platform_system==\"Windows\"',\n'mdxpy'],\nextras_require={\n\"pandas\": [\"pandas\"]\n},\npython_requires='>=3.6',\n)\n"
    },
    {
        "package_name": "tokenizers-0.12.1",
        "file_list": "Cargo.toml MANIFEST.in PKG-INFO pyproject.toml __init__.py __init__.pyi base_tokenizer.py bert_wordpiece.py byte_level_bpe.py char_level_bpe.py sentencepiece_bpe.py sentencepiece_unigram.py __init__.py __init__.py __init__.pyi __init__.py __init__.pyi __init__.py __init__.pyi __init__.py __init__.pyi visualizer-styles.css visualizer.py __init__.py __init__.py __init__.pyi __init__.py __init__.pyi dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt README.md rust-toolchain setup.cfg setup.py decoders.rs encoding.rs error.rs lib.rs models.rs normalizers.rs pre_tokenizers.rs processors.rs token.rs tokenizer.rs trainers.rs iterators.rs mod.rs normalization.rs pretokenization.rs regex.rs bert_benchmark.rs bpe_benchmark.rs mod.rs Cargo.toml CHANGELOG.md serialization.rs Makefile README.md README.tpl rust-toolchain cli.rs bpe.rs ctc.rs mod.rs wordpiece.rs lib.rs mod.rs model.rs serialization.rs trainer.rs word.rs mod.rs lattice.rs mod.rs model.rs serialization.rs trainer.rs trie.rs mod.rs serialization.rs trainer.rs mod.rs serialization.rs trainer.rs bert.rs mod.rs precompiled.rs replace.rs strip.rs unicode.rs utils.rs bert.rs byte_level.rs delimiter.rs digits.rs metaspace.rs mod.rs punctuation.rs sequence.rs split.rs mod.rs pre_tokenizer.rs scripts.rs whitespace.rs bert.rs mod.rs roberta.rs template.rs added_vocabulary.rs encoding.rs mod.rs normalizer.rs pattern.rs pre_tokenizer.rs serialization.rs cache.rs from_pretrained.rs iter.rs mod.rs padding.rs parallelism.rs progress.rs truncation.rs added_tokens.rs mod.rs documentation.rs from_pretrained.rs offsets.rs serialization.rs training.rs unigram.rs",
        "setup.py": "from setuptools import setup\nfrom setuptools_rust import Binding, RustExtension\n\nextras = {}\nextras[\"testing\"] = [\"pytest\", \"requests\", \"numpy\", \"datasets\"]\nextras[\"docs\"] = [\"sphinx\", \"sphinx_rtd_theme\", \"setuptools_rust\"]\n\nsetup(\nname=\"tokenizers\",\nversion=\"0.12.1\",\ndescription=\"Fast and Customizable Tokenizers\",\nlong_description=open(\"README.md\", \"r\", encoding=\"utf-8\").read(),\nlong_description_content_type=\"text\/markdown\",\nkeywords=\"NLP tokenizer BPE transformer deep learning\",\nauthor=\"Anthony MOI\",\nauthor_email=\"anthony@huggingface.co\",\nurl=\"https:\/\/github.com\/huggingface\/tokenizers\",\nlicense=\"Apache License 2.0\",\nrust_extensions=[RustExtension(\"tokenizers.tokenizers\", binding=Binding.PyO3, debug=False)],\nextras_require=extras,\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Education\",\n\"Intended Audience :: Science\/Research\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Scientific\/Engineering :: Artificial Intelligence\",\n],\npackage_dir={\"\": \"py_src\"},\npackages=[\n\"tokenizers\",\n\"tokenizers.models\",\n\"tokenizers.decoders\",\n\"tokenizers.normalizers\",\n\"tokenizers.pre_tokenizers\",\n\"tokenizers.processors\",\n\"tokenizers.trainers\",\n\"tokenizers.implementations\",\n\"tokenizers.tools\",\n],\npackage_data={\n\"tokenizers\": [\"py.typed\", \"__init__.pyi\"],\n\"tokenizers.models\": [\"py.typed\", \"__init__.pyi\"],\n\"tokenizers.decoders\": [\"py.typed\", \"__init__.pyi\"],\n\"tokenizers.normalizers\": [\"py.typed\", \"__init__.pyi\"],\n\"tokenizers.pre_tokenizers\": [\"py.typed\", \"__init__.pyi\"],\n\"tokenizers.processors\": [\"py.typed\", \"__init__.pyi\"],\n\"tokenizers.trainers\": [\"py.typed\", \"__init__.pyi\"],\n\"tokenizers.implementations\": [\"py.typed\"],\n\"tokenizers.tools\": [\"py.typed\", \"visualizer-styles.css\"],\n},\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "torch-lr-finder-0.2.1",
        "file_list": "PKG-INFO README.md setup.cfg setup.py lr_finder.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "import setuptools\nimport sys\n\n\nif \"apex\" in sys.argv:\nsys.argv.remove(\"apex\")\n\n# install requirements for mixed precision training\nimport subprocess\nimport torch\n\nTORCH_MAJOR = int(torch.__version__.split(\".\")[0])\n\nif TORCH_MAJOR == 0:\nsubprocess.run(\n[\nsys.executable,\n\"-m\",\n\"pip\",\n\"install\",\n\"git+https:\/\/github.com\/NVIDIA\/apex\",\n\"-v\",\n\"--no-cache-dir\",\n]\n)\nelse:\nsubprocess.run(\n[\nsys.executable,\n\"-m\",\n\"pip\",\n\"install\",\n\"git+https:\/\/github.com\/NVIDIA\/apex\",\n\"-v\",\n\"--no-cache-dir\",\n\"--global-option=--cpp_ext\",\n\"--global-option=--cuda_ext\",\n]\n)\n\nwith open(\"README.md\", \"r\") as f:\nlong_description = f.read()\n\nsetuptools.setup(\nname=\"torch-lr-finder\",\nversion=\"0.2.1\",\nauthor=\"David Silva\",\nauthor_email=\"davidtvs10@gmail.com\",\ndescription=\"Pytorch implementation of the learning rate range test\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/davidtvs\/pytorch-lr-finder\",\npackages=setuptools.find_packages(exclude=[\"examples\", \"images\"]),\nclassifiers=[\n\"Programming Language :: Python\",\n\"License :: OSI Approved :: MIT License\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Science\/Research\",\n\"Intended Audience :: Education\",\n\"Topic :: Software Development\",\n\"Topic :: Scientific\/Engineering :: Artificial Intelligence\",\n],\npython_requires=\">=3.5.9\",\ninstall_requires=[\"matplotlib\", \"numpy\", \"torch>=0.4.1\", \"tqdm\", \"packaging\"],\nextras_require={\n\"tests\": [\"pytest\", \"pytest-cov\", \"pytest-mock\"],\n\"dev\": [\n\"pytest\",\n\"pytest-cov\",\n\"pytest-mock\",\n\"flake8\",\n\"black\",\n\"pep8-naming\",\n\"torchvision\",\n\"ipywidgets\",\n],\n},\n)\n"
    },
    {
        "package_name": "torch_struct-0.5",
        "file_list": "PKG-INFO README.md setup.cfg setup.py helpers.py linearchain.py alignment.py autoregressive.py cky.py cky_crf.py deptree.py distributions.py helpers.py linearchain.py semimarkov.py checkpoint.py fast_semirings.py sample.py semirings.py sparse_max.py __init__.py test_algorithms.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\nlong_description = fh.read()\n\nsetup(\nname=\"torch_struct\",\nversion=\"0.5\",\nauthor=\"Alexander Rush\",\nauthor_email=\"arush@cornell.edu\",\npackages=[\n\"torch_struct\",\n\"torch_struct.semirings\",\n],\nlong_description=long_description,\npackage_data={\"torch_struct\": []},\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/harvardnlp\/pytorch-struct\",\ninstall_requires=[\"torch\"],\nsetup_requires=[\"pytest-runner\"],\ntests_require=[\"pytest\"],\npython_requires='>=3.6',\n)\n"
    },
    {
        "package_name": "torchfile-0.1.0",
        "file_list": "PKG-INFO setup.cfg setup.py torchfile.py",
        "setup.py": "from distutils.core import setup\n\nversion = '0.1.0'\n\nsetup(\nname = 'torchfile',\nversion = version,\ndescription = \"Torch7 binary serialized file parser\",\nclassifiers = [\n'Development Status :: 5 - Production\/Stable',\n'License :: OSI Approved',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'Topic :: Software Development',\n'Topic :: Software Development :: Libraries',\n'Topic :: Scientific\/Engineering',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6'\n],\nauthor = 'Brendan Shillingford',\nauthor_email = 'brendan.shillingford@cs.ox.ac.uk',\nurl = 'https:\/\/github.com\/bshillingford\/python-torchfile',\nlicense = 'BSD',\npy_modules=['torchfile']\n)\n\n"
    },
    {
        "package_name": "trafaret-2.1.1",
        "file_list": "LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py async_mixins.py base.py codes.py constructor.py object_id.py rfc_3339.py __init__.py dataerror.py internet.py keys.py lib.py numeric.py regexp.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n\nfrom setuptools import setup\nimport os.path\n\n\ndef read(fname):\nreturn open(os.path.join(os.path.dirname(__file__), fname)).read()\n\nversion = [line for line in read('trafaret\/__init__.py').split('\\n') if '__VERSION__' in line][0]\nexec(version)\n\nsetupconf = dict(\nname='trafaret',\nversion='.'.join(str(ver) for ver in __VERSION__),\nlicense='BSD',\nurl='https:\/\/github.com\/Deepwalker\/trafaret\/',\nauthor='Barbuza, Deepwalker, nimnull',\nauthor_email='krivushinme@gmail.com',\ndescription=('Validation and parsing library'),\nlong_description=read('README.rst'),\nkeywords='validation form forms data schema',\n\npackages=['trafaret', 'trafaret.contrib'],\nextras_require=dict(\nobjectid=['pymongo>=2.4.1'],\nrfc3339=['python-dateutil>=1.5']\n),\nclassifiers=[\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n]\n)\n\nif __name__ == '__main__':\nsetup(**setupconf)\n"
    },
    {
        "package_name": "trie-2.0.1",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py binary.py branches.py constants.py exceptions.py fog.py hexary.py iter.py smt.py typing.py binaries.py __init__.py db.py nibbles.py nodes.py __init__.py validation.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import setup, find_packages\n\n\nextras_require = {\n'test': [\n\"pytest-xdist>=1.31.0,<2\",\n\"tox>=2.6.0,<3\",\n\"hypothesis>=5.10.4,<6\",\n\"pycryptodome\",\n],\n'lint': [\n\"flake8==3.8.1\",\n],\n'dev': [\n\"bumpversion>=0.5.3,<1\",\n\"wheel\",\n\"twine\",\n\"eth-hash>=0.1.0,<1.0.0\",\n],\n}\n\nextras_require['dev'] = (\nextras_require['dev'] +\nextras_require['test'] +\nextras_require['lint']\n)\n\nwith open('README.md') as readme_file:\nlong_description = readme_file.read()\n\nsetup(\nname='trie',\n# *IMPORTANT*: Don't manually change the version here. Use the 'bumpversion' utility.\nversion='2.0.1',\ndescription=\"\"\"Python implementation of the Ethereum Trie structure\"\"\",\nlong_description_markdown_filename='README.md',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nauthor='The Ethereum Foundation',\nauthor_email='snakecharmers@ethereum.org',\nurl='https:\/\/github.com\/ethereum\/py-trie',\ninclude_package_data=True,\npy_modules=['trie'],\npython_requires='>=3.6,<4',\n\ninstall_requires=[\n\"eth-hash>=0.1.0,<1.0.0\",\n\"eth-utils>=2.0.0,<3.0.0\",\n\"hexbytes>=0.2.0,<0.3.0\",\n\"rlp>=3,<4\",\n\"sortedcontainers>=2.1.0,<3\",\n\"typing-extensions>=4.0.0,<5; python_version < '3.8'\",\n],\nextras_require=extras_require,\nlicense=\"MIT\",\nzip_safe=False,\nkeywords='ethereum blockchain evm trie merkle',\npackages=find_packages(exclude=[\"tests\", \"tests.*\"]),\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n\"Operating System :: OS Independent\",\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Topic :: Software Development',\n'Topic :: Utilities',\n],\n)\n"
    },
    {
        "package_name": "trimesh-3.13.4",
        "file_list": "LICENSE.md MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py base.py boolean.py bounds.py caching.py collision.py comparison.py constants.py convex.py creation.py curvature.py decomposition.py exceptions.py assimp.py binvox.py dae.py export.py gltf.py load.py misc.py obj.py off.py openctm.py ply.py stl.py threedxml.py threemf.py urdf.py xaml.py xyz.py __init__.py geometry.py graph.py grouping.py inertia.py integrate.py blender.py generic.py gmsh.py scad.py vhacd.py __init__.py intersections.py interval.py nsphere.py parent.py arc.py creation.py curve.py entities.py dxf.py export.py load.py misc.py svg_io.py __init__.py intersections.py packing.py path.py polygons.py raster.py repair.py segments.py simplify.py traversal.py util.py __init__.py permutate.py points.py poses.py primitives.py proximity.py ray_pyembree.py ray_triangle.py ray_util.py __init__.py registration.py remesh.py rendering.py repair.py resolvers.py gltf2.schema.zip box.schema.json capsule.schema.json cylinder.schema.json extrusion.schema.json primitive.schema.json sphere.schema.json transform.schema.json trimesh.schema.json wkt.polygon.schema.json README.md base.svg blender_boolean.py.tmpl dxf.json path.svg ply.json viewer.zip units_to_inches.json __init__.py sample.py cameras.py lighting.py scene.py transforms.py __init__.py schemas.py smoothing.py transformations.py triangles.py units.py util.py version.py notebook.py trackball.py widget.py windowed.py __init__.py base.py color.py material.py objects.py texture.py __init__.py base.py creation.py encoding.py morphology.py ops.py runlength.py transforms.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport os\nimport sys\nfrom setuptools import setup\n\n# load __version__ without importing anything\nversion_file = os.path.join(\nos.path.dirname(__file__),\n'trimesh\/version.py')\nwith open(version_file, 'r') as f:\n# use eval to get a clean string of version from file\n__version__ = eval(f.read().strip().split('=')[-1])\n\n# load README.md as long_description\nlong_description = ''\nif os.path.exists('README.md'):\nwith open('README.md', 'r') as f:\nlong_description = f.read()\n\n# minimal requirements for installing trimesh\n# note that `pip` requires setuptools itself\nrequirements_default = set(['numpy'])\n\n# \"easy\" requirements should install without compiling\n# anything on Windows, Linux, and Mac, for Python 2.7-3.4+\nrequirements_easy = set([\n'scipy', # provide convex hulls, fast graph ops, etc\n'networkx', # provide slow graph ops with a nice API\n'lxml', # handle XML better and faster than built- in XML\n'pyglet', # render preview windows nicely\n'shapely', # handle 2D polygons robustly\n'rtree', # create N-dimension trees for broad-phase queries\n'svg.path', # handle SVG format path strings\n'sympy', # do analytical math\n'msgpack', # serialize into msgpack\n'pillow', # load images\n'requests', # do network requests\n'xxhash', # hash ndarrays faster than built-in MD5\/CRC\n'setuptools', # do setuptools stuff\n'jsonschema', # validate JSON schemas like GLTF\n'pycollada', # parse collada\/dae\/zae files\n'chardet', # figure out if someone used UTF-16\n'colorlog']) # log in pretty colors\n\n# \"all\" requirements only need to be installable\n# through some mechanism on Linux with Python 3.5+\n# and are allowed to compile code\nrequirements_all = requirements_easy.union([\n'mapbox-earcut', # faster 2D triangulations of polygons\n'triangle', # 2D triangulations of polygons\n'python-fcl', # do fast 3D collision queries\n'psutil', # figure out how much memory we have\n'glooey', # make GUI applications with 3D stuff\n'meshio', # load a number of additional mesh formats; Python 3.5+\n'scikit-image', # marching cubes and other nice stuff\n'xatlas', # texture unwrapping\n])\n# requirements for running unit tests\nrequirements_test = set(['pytest', # run all unit tests\n'pytest-cov', # coverage plugin\n'pyinstrument', # profile code\n'coveralls', # report coverage stats\n'ezdxf']) # use as a validator for exports\n\n# Python 2.7 and 3.4 support has been dropped from packages\n# version lock those packages here so install succeeds\ncurrent = (sys.version_info.major, sys.version_info.minor)\n# packages that no longer support old Python\n# setuptools-scm is required by sympy-mpmath chain\n# and will hopefully be removed in future versions\nlock = [((3, 4), 'lxml', '4.3.5'),\n((3, 4), 'shapely', '1.6.4'),\n((3, 4), 'pyglet', '1.4.10'),\n((3, 5), 'sympy', None),\n((3, 6), 'svg.path', '4.1')]\nfor max_python, name, version in lock:\nif current <= max_python:\n# remove version-free requirements\nrequirements_easy.discard(name)\n# if version is None drop that package\nif version is not None:\n# add working version locked requirements\nrequirements_easy.add('{}=={}'.format(name, version))\n\n\ndef format_all():\n\"\"\"\nA shortcut to run automatic formatting and complaining\non all of the trimesh subdirectories.\n\"\"\"\nimport subprocess\n\ndef run_on(target):\n# words that codespell hates\n# note that it always checks against the lower case\nword_skip = \"datas,coo,nd,files',filetests,ba,childs,whats\"\n# files to skip spelling on\nfile_skip = \"*.pyc,*.zip,.DS_Store,*.js,.\/trimesh\/resources\"\nspell = ['codespell', '-i', '3',\n'--skip=' + file_skip,\n'-L', word_skip, '-w', target]\nprint(\"Running: \\n {} \\n\\n\\n\".format(' '.join(spell)))\nsubprocess.check_call(spell)\n\nformatter = [\"autopep8\", \"--recursive\", \"--verbose\",\n\"--in-place\", \"--aggressive\", target]\nprint(\"Running: \\n {} \\n\\n\\n\".format(\n' '.join(formatter)))\nsubprocess.check_call(formatter)\n\nflake = ['flake8', target]\nprint(\"Running: \\n {} \\n\\n\\n\".format(' '.join(flake)))\nsubprocess.check_call(flake)\n\n# run on our target locations\nfor t in ['trimesh', 'tests', 'examples']:\nrun_on(t)\n\n\n# if someone wants to output a requirements file\n# `python setup.py --list-all > requirements.txt`\nif '--list-all' in sys.argv:\n# will not include default requirements (numpy)\nprint('\\n'.join(requirements_all))\nexit()\nelif '--list-easy' in sys.argv:\n# again will not include numpy+setuptools\nprint('\\n'.join(requirements_easy))\nexit()\nelif '--format' in sys.argv:\nformat_all()\nexit()\n\n\n# call the magical setuptools setup\nsetup(name='trimesh',\nversion=__version__,\ndescription='Import, export, process, analyze and view triangular meshes.',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nauthor='Michael Dawson-Haggerty',\nauthor_email='mikedh@kerfed.com',\nlicense='MIT',\nurl='https:\/\/github.com\/mikedh\/trimesh',\nkeywords='graphics mesh geometry 3D',\nclassifiers=[\n'Development Status :: 4 - Beta',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Natural Language :: English',\n'Topic :: Scientific\/Engineering'],\npackages=[\n'trimesh',\n'trimesh.ray',\n'trimesh.path',\n'trimesh.path.exchange',\n'trimesh.scene',\n'trimesh.voxel',\n'trimesh.visual',\n'trimesh.viewer',\n'trimesh.exchange',\n'trimesh.resources',\n'trimesh.interfaces'],\npackage_data={'trimesh': ['resources\/templates\/*',\n'resources\/*.json',\n'resources\/schema\/*',\n'resources\/schema\/primitive\/*.json',\n'resources\/*.zip']},\ninstall_requires=list(requirements_default),\nextras_require={'test': list(requirements_test),\n'easy': list(requirements_easy),\n'all': list(requirements_all)})\n"
    },
    {
        "package_name": "truffleHogRegexes-0.0.7",
        "file_list": "PKG-INFO setup.cfg setup.py regexChecks.py regexes.json __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup, find_packages\n\nsetup(\nname='truffleHogRegexes',\nversion='0.0.7',\ndescription='These regexes power truffleHog.',\nurl='https:\/\/github.com\/dxa4481\/truffleHogRegexes',\nauthor='Dylan Ayrey',\nauthor_email='dylanayrey@gmail.com',\nlicense='GNU',\npackages = find_packages(),\npackage_data={'': ['regexes.json']},\n)\n"
    },
    {
        "package_name": "tweedledum-1.1.1",
        "file_list": ".clang-format ---bug-report.md ---feature-request.md pull_request_template.md build_dev_wheels.yml build_wheels.yml coverage.yml macos.yml python.yml ubuntu.yml windows.yml .gitignore .travis.yml CHANGELOG.md FindEigen3.cmake Findfmt.cmake Findnlohmann_json.cmake Findphmap.cmake CMakeLists.txt CODE_OF_CONDUCT.md CONTRIBUTING.md CMakeLists.txt CMakeLists.txt abc_global.h exor.h vecInt.h vecPtr.h vecWec.h exor.cpp exorBits.cpp exorCubes.cpp exorLink.cpp exorList.cpp exorUtil.cpp abcresub.hpp abcresub2.hpp abc_global.hpp tt.hpp vec_int.hpp vec_ptr.hpp vec_wec.hpp vec_wrd.hpp AbcGlucose.h abc_global.h abc_namespaces.h Alg.h Alloc.h BoundedQueue.h Constants.h Dimacs.h Heap.h IntTypes.h Map.h pstdint.h Queue.h satClause.h satSolver.h satStore.h satVec.h SimpSolver.h Solver.h SolverTypes.h Sort.h system.h utilDouble.h Vec.h vecInt.h vecWec.h XAlloc.h AbcGlucose.cpp CMakeLists.txt Glucose.cpp satSolver.cpp satStore.cpp SimpSolver.cpp bill.hpp zdd.hpp cardinality.hpp incremental_totalizer_cardinality.hpp abc_bmcg.hpp abc_bsat2.hpp common.hpp ghack.hpp glucose.hpp maple.hpp types.hpp z3.hpp AbcGlucose.h abc_global.h abc_namespaces.h Alg.h Alloc.h BoundedQueue.h Constants.h Dimacs.h Heap.h IntTypes.h Map.h pstdint.h Queue.h satClause.h satSolver.h satStore.h satVec.h SimpSolver.h Solver.h SolverTypes.h Sort.h system.h utilDouble.h Vec.h vecInt.h vecWec.h XAlloc.h abc.hpp ghack.hpp glucose.hpp maple.hpp solver.hpp tseytin.hpp unsat_cores.hpp xor_clauses.hpp hash.hpp platforms.hpp CMakeLists.txt Cholesky CholmodSupport CMakeLists.txt Core Dense Eigen Eigenvalues Geometry Householder IterativeLinearSolvers Jacobi LU MetisSupport OrderingMethods PardisoSupport PaStiXSupport QR QtAlignedMalloc signature_of_eigen3_matrix_library Sparse SparseCholesky SparseCore SparseLU SparseQR SPQRSupport LDLT.h LLT.h LLT_LAPACKE.h CholmodSupport.h Complex.h MathFunctions.h PacketMath.h Complex.h MathFunctions.h PacketMath.h TypeCasting.h MathFunctions.h PacketMath.h Complex.h Half.h MathFunctions.h PacketMath.h PacketMathHalf.h TypeCasting.h ConjHelper.h Settings.h Complex.h MathFunctions.h PacketMath.h Complex.h MathFunctions.h PacketMath.h TypeCasting.h Complex.h MathFunctions.h PacketMath.h Array.h ArrayBase.h ArrayWrapper.h Assign.h AssignEvaluator.h Assign_MKL.h BandMatrix.h Block.h BooleanRedux.h CommaInitializer.h ConditionEstimator.h CoreEvaluators.h CoreIterators.h CwiseBinaryOp.h CwiseNullaryOp.h CwiseTernaryOp.h CwiseUnaryOp.h CwiseUnaryView.h DenseBase.h DenseCoeffsBase.h DenseStorage.h Diagonal.h DiagonalMatrix.h DiagonalProduct.h Dot.h EigenBase.h ForceAlignedAccess.h AssignmentFunctors.h BinaryFunctors.h NullaryFunctors.h StlFunctors.h TernaryFunctors.h UnaryFunctors.h Fuzzy.h GeneralProduct.h GenericPacketMath.h GlobalFunctions.h Inverse.h IO.h Map.h MapBase.h MathFunctions.h MathFunctionsImpl.h Matrix.h MatrixBase.h NestByValue.h NoAlias.h NumTraits.h PermutationMatrix.h PlainObjectBase.h Product.h ProductEvaluators.h GeneralBlockPanelKernel.h GeneralMatrixMatrix.h GeneralMatrixMatrixTriangular.h GeneralMatrixMatrixTriangular_BLAS.h GeneralMatrixMatrix_BLAS.h GeneralMatrixVector.h GeneralMatrixVector_BLAS.h Parallelizer.h SelfadjointMatrixMatrix.h SelfadjointMatrixMatrix_BLAS.h SelfadjointMatrixVector.h SelfadjointMatrixVector_BLAS.h SelfadjointProduct.h SelfadjointRank2Update.h TriangularMatrixMatrix.h TriangularMatrixMatrix_BLAS.h TriangularMatrixVector.h TriangularMatrixVector_BLAS.h TriangularSolverMatrix.h TriangularSolverMatrix_BLAS.h TriangularSolverVector.h Random.h Redux.h Ref.h Replicate.h ReturnByValue.h Reverse.h Select.h SelfAdjointView.h SelfCwiseBinaryOp.h Solve.h SolverBase.h SolveTriangular.h StableNorm.h Stride.h Swap.h Transpose.h Transpositions.h TriangularMatrix.h BlasUtil.h Constants.h DisableStupidWarnings.h ForwardDeclarations.h Macros.h Memory.h Meta.h MKL_support.h NonMPL2.h ReenableStupidWarnings.h StaticAssert.h XprHelper.h VectorBlock.h VectorwiseOp.h Visitor.h ComplexEigenSolver.h ComplexSchur.h ComplexSchur_LAPACKE.h EigenSolver.h GeneralizedEigenSolver.h GeneralizedSelfAdjointEigenSolver.h HessenbergDecomposition.h MatrixBaseEigenvalues.h RealQZ.h RealSchur.h RealSchur_LAPACKE.h SelfAdjointEigenSolver.h SelfAdjointEigenSolver_LAPACKE.h Tridiagonalization.h AlignedBox.h AngleAxis.h Geometry_SSE.h EulerAngles.h Homogeneous.h Hyperplane.h OrthoMethods.h ParametrizedLine.h Quaternion.h Rotation2D.h RotationBase.h Scaling.h Transform.h Translation.h Umeyama.h BlockHouseholder.h Householder.h HouseholderSequence.h BasicPreconditioners.h BiCGSTAB.h ConjugateGradient.h IncompleteCholesky.h IncompleteLUT.h IterativeSolverBase.h LeastSquareConjugateGradient.h SolveWithGuess.h Jacobi.h Inverse_SSE.h Determinant.h FullPivLU.h InverseImpl.h PartialPivLU.h PartialPivLU_LAPACKE.h MetisSupport.h blas.h Image.h Kernel.h lapack.h lapacke.h lapacke_mangling.h RealSvd2x2.h Amd.h Eigen_Colamd.h Ordering.h PardisoSupport.h PaStiXSupport.h ArrayCwiseBinaryOps.h ArrayCwiseUnaryOps.h BlockMethods.h CommonCwiseBinaryOps.h CommonCwiseUnaryOps.h MatrixCwiseBinaryOps.h MatrixCwiseUnaryOps.h ColPivHouseholderQR.h ColPivHouseholderQR_LAPACKE.h CompleteOrthogonalDecomposition.h FullPivHouseholderQR.h HouseholderQR.h HouseholderQR_LAPACKE.h SimplicialCholesky.h SimplicialCholesky_impl.h AmbiVector.h CompressedStorage.h ConservativeSparseSparseProduct.h MappedSparseMatrix.h SparseAssign.h SparseBlock.h SparseColEtree.h SparseCompressedBase.h SparseCwiseBinaryOp.h SparseCwiseUnaryOp.h SparseDenseProduct.h SparseDiagonalProduct.h SparseDot.h SparseFuzzy.h SparseMap.h SparseMatrix.h SparseMatrixBase.h SparsePermutation.h SparseProduct.h SparseRedux.h SparseRef.h SparseSelfAdjointView.h SparseSolverBase.h SparseSparseProductWithPruning.h SparseTranspose.h SparseTriangularView.h SparseUtil.h SparseVector.h SparseView.h TriangularSolver.h SparseLU.h SparseLUImpl.h SparseLU_column_bmod.h SparseLU_column_dfs.h SparseLU_copy_to_ucol.h SparseLU_gemm_kernel.h SparseLU_heap_relax_snode.h SparseLU_kernel_bmod.h SparseLU_Memory.h SparseLU_panel_bmod.h SparseLU_panel_dfs.h SparseLU_pivotL.h SparseLU_pruneL.h SparseLU_relax_snode.h SparseLU_Structs.h SparseLU_SupernodalMatrix.h SparseLU_Utils.h SparseQR.h SuiteSparseQRSupport.h details.h StdDeque.h StdList.h StdVector.h SuperLUSupport.h BDCSVD.h JacobiSVD.h JacobiSVD_LAPACKE.h SVDBase.h UpperBidiagonalization.h UmfPackSupport.h StdDeque StdList StdVector SuperLUSupport SVD UmfPackSupport .clang-format pull_request_template.md .gitignore .travis.yml ChangeLog.rst CMakeLists.txt CONTRIBUTING.md api.rst layout.html README theme.conf alerts.less badges.less bootstrap.less breadcrumbs.less button-groups.less buttons.less carousel.less close.less code.less component-animations.less dropdowns.less forms.less glyphicons.less grid.less input-groups.less jumbotron.less labels.less list-group.less media.less alerts.less background-variant.less border-radius.less buttons.less center-block.less clearfix.less forms.less gradients.less grid-framework.less grid.less hide-text.less image.less labels.less list-group.less nav-divider.less nav-vertical-align.less opacity.less pagination.less panels.less progress-bar.less reset-filter.less resize.less responsive-visibility.less size.less tab-focus.less table-row.less text-emphasis.less text-overflow.less vendor-prefixes.less mixins.less modals.less navbar.less navs.less normalize.less pager.less pagination.less panels.less popovers.less print.less progress-bars.less responsive-embed.less responsive-utilities.less scaffolding.less tables.less theme.less thumbnails.less tooltip.less type.less utilities.less variables.less wells.less build.py CMakeLists.txt conf.py contents.rst fmt.less index.rst python-license.txt syntax.rst usage.rst chrono.h color.h compile.h core.h format-inl.h format.h locale.h os.h ostream.h posix.h printf.h ranges.h LICENSE.rst README.rst format.cc os.cc Android.mk AndroidManifest.xml appveyor-build.py appveyor.yml build.gradle C++.sublime-syntax cxx14.cmake FindSetEnv.cmake fmt-config.cmake.in fmt.pc.in JoinPaths.cmake compute-powers.py docopt.py fmt.pro manage.py README rst2md.py conf.py index.rst layout.html theme.conf travis-build.py update-coverity-branch.py Vagrantfile CMakeLists.txt main.cc assert-test.cc chrono-test.cc CMakeLists.txt color-test.cc CMakeLists.txt compile-test.cc core-test.cc CMakeLists.txt cpp14.cc cuda-cpp14.cu custom-formatter-test.cc CMakeLists.txt main.cc format format-dyn-args-test.cc format-impl-test.cc format-test.cc .gitignore build.sh chrono_duration.cpp CMakeLists.txt fuzzer_common.h main.cpp named_arg.cpp one_arg.cpp README.md sprintf.cpp two_args.cpp gmock.h gmock-gtest-all.cc grisu-test.cc gtest-spi.h gtest.h gtest-extra-test.cc gtest-extra.cc gtest-extra.h header-only-test.cc header-only-test2.cc locale-test.cc mock-allocator.h os-test.cc ostream-test.cc posix-mock-test.cc posix-mock.h printf-test.cc ranges-test.cc scan-test.cc scan.h std-format-test.cc test-assert.h test-main.cc util.cc util.h affine.hpp algorithm.hpp bit_operations.hpp cnf.hpp constructors.hpp cube.hpp decomposition.hpp constants.hpp linear_constants.hpp mscfix.hpp shift.hpp utils.hpp dynamic_truth_table.hpp endianness.hpp enumeration.hpp esop.hpp hash.hpp implicant.hpp isop.hpp kitty.hpp npn.hpp operations.hpp operators.hpp partial_truth_table.hpp permutation.hpp print.hpp properties.hpp spectral.hpp spp.hpp static_truth_table.hpp traits.hpp aiger.hpp bench.hpp blif.hpp bristol.hpp common.hpp tokenizer.hpp utils.hpp diagnostics.hpp diagnostics.inc dimacs.hpp genlib.hpp lorina.hpp pla.hpp verilog.hpp verilog_regex.hpp aig_resub.hpp akers_synthesis.hpp buffer_insertion.hpp mig_algebraic_rewriting_splitters.hp mig_resub_splitters.hpp aqfp_db.hpp aqfp_fanout_resyn.hpp aqfp_node_resyn.hpp dag.hpp dag_cost.hpp dag_gen.hpp dag_util.hpp db_builder.hpp db_utils.hpp npn_cache.hpp partial_dag.hpp aqfp_resynthesis.hpp esop_balancing.hpp sop_balancing.hpp utils.hpp balancing.hpp bi_decomposition.hpp cell_window.hpp circuit_validator.hpp cleanup.hpp cnf.hpp collapse_mapped.hpp cnf_cut.hpp exact_map_cut.hpp gia_cut.hpp mf_cut.hpp spectr_cut.hpp tech_map_cut.hpp cut_enumeration.hpp cut_rewriting.hpp decomposition.hpp database_generator.hpp mffc_utils.hpp minmc_xags.hpp resub_utils.hpp switching_activity.hpp dont_cares.hpp dsd_decomposition.hpp equivalence_checking.hpp equivalence_classes.hpp exact_mc_synthesis.hpp exorcism.hpp extract_linear.hpp functional_reduction.hpp gates_to_nodes.hpp linear_resynthesis.hpp lut_mapping.hpp mapper.hpp mig_algebraic_rewriting.hpp mig_resub.hpp miter.hpp network_fuzz_tester.hpp akers.hpp bidecomposition.hpp cached.hpp composed.hpp davio.hpp direct.hpp dsd.hpp exact.hpp mig_npn.hpp null.hpp shannon.hpp traits.hpp xag_minmc.hpp xag_minmc2.hpp xag_npn.hpp xmg3_npn.hpp xmg_npn.hpp node_resynthesis.hpp pattern_generation.hpp reconv_cut.hpp refactoring.hpp resubstitution.hpp mig_resyn.hpp xag_resyn.hpp satlut_mapping.hpp simulation.hpp sim_resub.hpp window_rewriting.hpp xag_optimization.hpp xag_resub_withDC.hpp xmg_algebraic_rewriting.hpp xmg_optimization.hpp xmg_resub.hpp endianness.hpp arithmetic.hpp control.hpp legacy.hpp majority.hpp majority_n.hpp modular_arithmetic.hpp random_logic_generator.hpp self_dualize.hpp sorting.hpp interface.hpp aiger_reader.hpp bench_reader.hpp blif_reader.hpp bristol_reader.hpp dimacs_reader.hpp genlib_reader.hpp pla_reader.hpp serialize.hpp verilog_reader.hpp write_aiger.hpp write_bench.hpp write_blif.hpp write_dimacs.hpp write_dot.hpp write_patterns.hpp write_verilog.hpp mockturtle.hpp abstract_xag.hpp aig.hpp aqfp.hpp buffered.hpp foreach.hpp events.hpp klut.hpp mig.hpp storage.hpp xag.hpp xmg.hpp aqfpcost.hpp mccost.hpp migcost.hpp xmgcost.hpp traits.hpp algorithm.hpp cost_functions.hpp cuts.hpp debugging_utils.hpp hash_functions.hpp percy.hpp index_list.hpp json_utils.hpp mixed_radix.hpp network_cache.hpp network_utils.hpp node_map.hpp progress_bar.hpp stopwatch.hpp string_utils.hpp tech_library.hpp truth_table_cache.hpp truth_table_utils.hpp window_utils.hpp cnf_view.hpp color_view.hpp cut_view.hpp depth_view.hpp fanout_limit_view.hpp fanout_view.hpp immutable_view.hpp mapping_view.hpp mffc_view.hpp names_view.hpp topo_view.hpp window_view.hpp json.hpp btree.h conanfile.py meminfo.h phmap.h phmap_base.h phmap_bits.h phmap_config.h phmap_dump.h phmap_fwd_decl.h phmap_utils.h chain.hpp cnf.hpp concurrentqueue.h dag.hpp dag_generation.hpp aig_encoder.hpp ditt_encoder.hpp ditt_maj_encoder.hpp encoder.hpp maj_encoder.hpp mig_encoder.hpp msv_encoder.hpp partial_dag_encoder.hpp ssv_dag_encoder.hpp ssv_encoder.hpp ssv_fence2_encoder.hpp ssv_fence_encoder.hpp encoders.hpp fence.hpp partial_dag3_generator.hpp partial_dag_generator.hpp io.hpp majority_chain.hpp mig.hpp misc.hpp partial_dag.hpp percy.hpp printer.hpp sat_circuits.hpp bmcg_sat.hpp bsat2.hpp cmsat.hpp glucose.hpp satoko.hpp solver_wrapper.hpp solvers.hpp spec.hpp tt_utils.hpp .appveyor.yml .clang-format .clang-tidy .cmake-format.yaml CONTRIBUTING.md dependabot.yml bug-report.md config.yml feature-request.md question.md labeler.yml labeler_merged.yml pull_request_template.md ci.yml configure.yml format.yml labeler.yml pip.yml .gitignore .pre-commit-config.yaml .readthedocs.yml CMakeLists.txt chrono.rst custom.rst eigen.rst functional.rst index.rst overview.rst stl.rst strings.rst classes.rst embedding.rst exceptions.rst functions.rst misc.rst index.rst numpy.rst object.rst utilities.rst smart_ptrs.rst basics.rst benchmark.py benchmark.rst changelog.rst classes.rst index.rst compiling.rst conf.py Doxyfile faq.rst index.rst installing.rst limitations.rst pybind11-logo.png pybind11_vs_boost_python1.png pybind11_vs_boost_python1.svg pybind11_vs_boost_python2.png pybind11_vs_boost_python2.svg reference.rst release.rst requirements.txt upgrade.rst attr.h buffer_info.h cast.h chrono.h common.h complex.h class.h common.h descr.h init.h internals.h typeid.h eigen.h embed.h eval.h functional.h iostream.h numpy.h operators.h options.h pybind11.h pytypes.h stl.h stl_bind.h LICENSE MANIFEST.in commands.py py.typed setup_helpers.py setup_helpers.pyi _version.py _version.pyi __init__.py __main__.py pyproject.toml README.rst setup.cfg setup.py CMakeLists.txt conftest.py constructor_stats.h cross_module_gil_utils.cpp env.py pytest.ini test_files.py pytest.ini test_setuphelper.py local_bindings.h object.h pybind11_cross_module_tests.cpp pybind11_tests.cpp pybind11_tests.h pytest.ini requirements.txt test_async.cpp test_async.py test_buffers.cpp test_buffers.py test_builtin_casters.cpp test_builtin_casters.py test_callbacks.cpp test_callbacks.py test_call_policies.cpp test_call_policies.py test_chrono.cpp test_chrono.py test_class.cpp test_class.py CMakeLists.txt embed.cpp CMakeLists.txt CMakeLists.txt CMakeLists.txt main.cpp CMakeLists.txt CMakeLists.txt CMakeLists.txt test.py test_constants_and_functions.cpp test_constants_and_functions.py test_copy_move.cpp test_copy_move.py test_custom_type_casters.cpp test_custom_type_casters.py test_docstring_options.cpp test_docstring_options.py test_eigen.cpp test_eigen.py catch.cpp CMakeLists.txt external_module.cpp test_interpreter.cpp test_interpreter.py test_enum.cpp test_enum.py test_eval.cpp test_eval.py test_eval_call.py test_exceptions.cpp test_exceptions.py test_factory_constructors.cpp test_factory_constructors.py test_gil_scoped.cpp test_gil_scoped.py test_iostream.cpp test_iostream.py test_kwargs_and_defaults.cpp test_kwargs_and_defaults.py test_local_bindings.cpp test_local_bindings.py test_methods_and_attributes.cpp test_methods_and_attributes.py test_modules.cpp test_modules.py test_multiple_inheritance.cpp test_multiple_inheritance.py test_numpy_array.cpp test_numpy_array.py test_numpy_dtypes.cpp test_numpy_dtypes.py test_numpy_vectorize.cpp test_numpy_vectorize.py test_opaque_types.cpp test_opaque_types.py test_operator_overloading.cpp test_operator_overloading.py test_pickling.cpp test_pickling.py test_pytypes.cpp test_pytypes.py test_sequences_and_iterators.cpp test_sequences_and_iterators.py test_smart_ptr.cpp test_smart_ptr.py test_stl.cpp test_stl.py test_stl_binders.cpp test_stl_binders.py test_tagbased_polymorphic.cpp test_tagbased_polymorphic.py test_union.cpp test_union.py test_virtual_functions.cpp test_virtual_functions.py valgrind-numpy-scipy.supp valgrind-python.supp check-style.sh cmake_uninstall.cmake.in FindCatch.cmake FindEigen3.cmake FindPythonLibsNew.cmake libsize.py make_changelog.py pybind11Common.cmake pybind11Config.cmake.in pybind11NewTools.cmake pybind11Tools.cmake pyproject.toml setup_global.py.in setup_main.py.in rang.hpp BarencoDecomposer.h BridgeDecomposer.h OneQubitDecomposer.h ParityDecomposer.h adder.h less_than.h Cbit.h Circuit.h Instruction.h Operator.h OperatorTraits.h Qubit.h WireStorage.h All.h Bridge.h Clifford.h LogicNetwork.h Parity.h Permutation.h TruthTable.h Unitary.h Extension.h Rxx.h Ryy.h Rzz.h Ising.h Barrier.h Meta.h Reversible.h H.h Measure.h P.h Rx.h Ry.h Rz.h S.h Swap.h Sx.h T.h U.h X.h Y.h Z.h Standard.h Utils.h qasm.h tfc.h compute_alap_layers.h compute_asap_layers.h compute_critical_paths.h compute_cuts.h compute_depth.h count_operators.h Analysis.h barenco_decomp.h bridge_decomp.h one_qubit_decomp.h parity_decomp.h Decomposition.h bridge_map.h jit_map.h ApprxSatPlacer.h LinePlacer.h RandomPlacer.h SatPlacer.h TrivialPlacer.h JitRePlacer.h SabreRePlacer.h BridgeRouter.h JitRouter.h SabreRouter.h sabre_map.h sat_map.h Mapping.h gate_cancellation.h linear_resynth.h phase_folding.h steiner_resynth.h Optimization.h simulate_classically.h inverse.h reverse.h shallow_duplicate.h Utility.h all_linear_synth.h a_star_swap_synth.h cx_dihedral_synth.h decomp_synth.h diagonal_synth.h gray_synth.h lhrs_synth.h linear_synth.h pkrm_synth.h pprm_synth.h sat_swap_synth.h spectrum_synth.h steiner_gauss_synth.h Synthesis.h transform_synth.h xag_synth.h Device.h Mapping.h Placement.h Allocators.h xag_optimize.h xag_simulate.h xag_stats.h Cut.h DynamicBitset.h Hash.h Intrinsics.h LinPhasePoly.h Matrix.h Numbers.h SmallVector.h Source.h SourceManager.h string_utf8.h LICENSE PKG-INFO pyproject.toml bad_examples.py test_BitVector.py test_BoolFunction.py test_Circuit.py test_ExpressionParser.py bindings.cpp bindings.h bitvec.py bool_function.py expression_parser.py function_parser.py __init__.py kitty.cpp mockturtle.cpp utils.cpp __init__.py CMakeLists.txt circuit.cpp circuit.h instruction.cpp wires.cpp __init__.py my_bool.h nlohmann_json.h extension.cpp ising.cpp meta.cpp operators.h standard.cpp __init__.py passes.cpp __init__.py converters.py barenco_decomp.py __init__.py mapping.py gate_cancellation.py linear_resynth.py phase_folding.py steiner_resynth.py __init__.py __init__.py __init__.py synthesis.cpp __init__.py device.cpp mapping.cpp __init__.py utils.cpp __init__.py __init__.py README.md requirements-dev.txt requirements.txt setup.cfg setup.py CMakeLists.txt BarencoDecomposer.cpp BridgeDecomposer.cpp OneQubitDecomposer.cpp ParityDecomposer.cpp Lexer.cpp Lexer.h Parser.cpp Parser.h PPLexer.h Token.h Tokens.def qasm.cpp tfc.cpp barenco_decomp.cpp bridge_decomp.cpp one_qubit_decomp.cpp parity_decomp.cpp ApprxSatPlacer.cpp LinePlacer.cpp RandomPlacer.cpp SatPlacer.cpp TrivialPlacer.cpp JitRePlacer.cpp SabreRePlacer.cpp BridgeRouter.cpp JitRouter.cpp SabreRouter.cpp gate_cancellation.cpp linear_resynth.cpp phase_folding.cpp steiner_resynth.cpp all_linear_synth.cpp a_star_swap_synth.cpp cx_dihedral_synth.cpp decomp_synth.cpp diagonal_synth.cpp gray_synth.cpp BaseStrategy.h BennettStrategy.h EagerStrategy.h lhrs_synth.cpp linear_synth.cpp pkrm_synth.cpp pprm_synth.cpp spectrum_synth.cpp steiner_gauss_synth.cpp transform_synth.cpp HighLevelXAG.h xag_synth.cpp Device.cpp string_utf8.cpp base.cpp catch.hpp check_inverse.h check_mapping.h check_permutation.h check_prime.h check_unitary.h CMakeLists.txt adder.cpp less_than.cpp Cbit.cpp Circuit.cpp Instruction.cpp Qubit.cpp Unitary.cpp qasm.cpp tfc.cpp compute_alap_layers.cpp compute_asap_layers.cpp compute_critical_paths.cpp compute_cuts.cpp count_operators.cpp barenco_decomp.cpp bridge_decomp.cpp one_qubit_decomp.cpp jit_map.cpp ApprxSatPlacer.cpp LinePlacer.cpp RandomPlacer.cpp SatPlacer.cpp TrivialPlacer.cpp sabre_map.cpp sat_map.cpp test_circuits.h gate_cancellation.cpp phase_folding.cpp simulate_classically.cpp inverse.cpp 0410184_169.qasm 3_17_13.qasm 4gt10-v1_81.qasm 4gt11_82.qasm 4gt11_83.qasm 4gt11_84.qasm 4gt12-v0_86.qasm 4gt12-v0_87.qasm 4gt12-v0_88.qasm 4gt12-v1_89.qasm 4gt13-v1_93.qasm 4gt13_90.qasm 4gt13_91.qasm 4gt13_92.qasm 4gt4-v0_72.qasm 4gt4-v0_73.qasm 4gt4-v0_78.qasm 4gt4-v0_79.qasm 4gt4-v0_80.qasm 4gt4-v1_74.qasm 4gt5_75.qasm 4gt5_76.qasm 4gt5_77.qasm 4mod5-bdd_287.qasm 4mod5-v0_18.qasm 4mod5-v0_19.qasm 4mod5-v0_20.qasm 4mod5-v1_22.qasm 4mod5-v1_23.qasm 4mod5-v1_24.qasm 4mod7-v0_94.qasm 4mod7-v1_96.qasm 4_49_16.qasm 9symml_195.qasm adr4_197.qasm aj-e11_165.qasm alu-bdd_288.qasm alu-v0_26.qasm alu-v0_27.qasm alu-v1_28.qasm alu-v1_29.qasm alu-v2_30.qasm alu-v2_31.qasm alu-v2_32.qasm alu-v2_33.qasm alu-v3_34.qasm alu-v3_35.qasm alu-v4_36.qasm alu-v4_37.qasm C17_204.qasm clip_206.qasm cm152a_212.qasm cm42a_207.qasm cm82a_208.qasm cm85a_209.qasm cnt3-5_179.qasm cnt3-5_180.qasm co14_215.qasm con1_216.qasm cycle10_2_110.qasm dc1_220.qasm dc2_222.qasm decod24-bdd_294.qasm decod24-enable_126.qasm decod24-v0_38.qasm decod24-v1_41.qasm decod24-v2_43.qasm decod24-v3_45.qasm dist_223.qasm ex-1_166.qasm ex1_226.qasm ex2_227.qasm ex3_229.qasm f2_232.qasm graycode6_47.qasm ground_state_estimation_10.qasm ham15_107.qasm ham3_102.qasm ham7_104.qasm hwb4_49.qasm hwb5_53.qasm hwb6_56.qasm hwb7_59.qasm hwb8_113.qasm hwb9_119.qasm inc_237.qasm ising_model_10.qasm ising_model_13.qasm ising_model_16.qasm life_238.qasm majority_239.qasm max46_240.qasm miller_11.qasm mini-alu_167.qasm mini_alu_305.qasm misex1_241.qasm mlp4_245.qasm mod10_171.qasm mod10_176.qasm mod5adder_127.qasm mod5d1_63.qasm mod5d2_64.qasm mod5mils_65.qasm mod8-10_177.qasm mod8-10_178.qasm one-two-three-v0_97.qasm one-two-three-v0_98.qasm one-two-three-v1_99.qasm one-two-three-v2_100.qasm one-two-three-v3_101.qasm plus63mod4096_163.qasm plus63mod8192_164.qasm pm1_249.qasm qft_10.qasm qft_16.qasm radd_250.qasm rd32-v0_66.qasm rd32-v1_68.qasm rd32_270.qasm rd53_130.qasm rd53_131.qasm rd53_133.qasm rd53_135.qasm rd53_138.qasm rd53_251.qasm rd53_311.qasm rd73_140.qasm rd73_252.qasm rd84_142.qasm rd84_253.qasm root_255.qasm sao2_257.qasm sf_274.qasm sf_276.qasm sqn_258.qasm sqrt8_260.qasm squar5_261.qasm square_root_7.qasm sym10_262.qasm sym6_145.qasm sym6_316.qasm sym9_146.qasm sym9_148.qasm sym9_193.qasm sys6-v0_111.qasm urf1_149.qasm urf1_278.qasm urf2_152.qasm urf2_277.qasm urf3_155.qasm urf3_279.qasm urf4_187.qasm urf5_158.qasm urf5_280.qasm urf6_160.qasm wim_266.qasm xor5_254.qasm z4_268.qasm run_tests.cpp all_linear_synth.cpp a_star_swap_synth.cpp cx_dihedral_synth.cpp decomp_synth.cpp diagonal_synth.cpp gray_synth.cpp linear_synth.cpp pkrm_synth.cpp pprm_synth.cpp sat_swap_synth.cpp spectrum_synth.cpp steiner_gauss_synth.cpp transform_synth.cpp xag_synth.cpp Device.cpp test_circuits.h BMatrix.cpp tweedledum.svg",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n# Setup script for PyPI; use CMakeFile.txt to build extension modules\n\nimport contextlib\nimport os\nimport re\nimport shutil\nimport string\nimport subprocess\nimport sys\nimport tempfile\n\nimport setuptools.command.sdist\n\nDIR = os.path.abspath(os.path.dirname(__file__))\nVERSION_REGEX = re.compile(\nr\"^\\s*#\\s*define\\s+PYBIND11_VERSION_([A-Z]+)\\s+(.*)$\", re.MULTILINE\n)\n\n# PYBIND11_GLOBAL_SDIST will build a different sdist, with the python-headers\n# files, and the sys.prefix files (CMake and headers).\n\nglobal_sdist = os.environ.get(\"PYBIND11_GLOBAL_SDIST\", False)\n\nsetup_py = \"tools\/setup_global.py.in\" if global_sdist else \"tools\/setup_main.py.in\"\nextra_cmd = 'cmdclass[\"sdist\"] = SDist\\n'\n\nto_src = (\n(\"pyproject.toml\", \"tools\/pyproject.toml\"),\n(\"setup.py\", setup_py),\n)\n\n# Read the listed version\nwith open(\"pybind11\/_version.py\") as f:\ncode = compile(f.read(), \"pybind11\/_version.py\", \"exec\")\nloc = {}\nexec(code, loc)\nversion = loc[\"__version__\"]\n\n# Verify that the version matches the one in C++\nwith open(\"include\/pybind11\/detail\/common.h\") as f:\nmatches = dict(VERSION_REGEX.findall(f.read()))\ncpp_version = \"{MAJOR}.{MINOR}.{PATCH}\".format(**matches)\nif version != cpp_version:\nmsg = \"Python version {} does not match C++ version {}!\".format(\nversion, cpp_version\n)\nraise RuntimeError(msg)\n\n\ndef get_and_replace(filename, binary=False, **opts):\nwith open(filename, \"rb\" if binary else \"r\") as f:\ncontents = f.read()\n# Replacement has to be done on text in Python 3 (both work in Python 2)\nif binary:\nreturn string.Template(contents.decode()).substitute(opts).encode()\nelse:\nreturn string.Template(contents).substitute(opts)\n\n\n# Use our input files instead when making the SDist (and anything that depends\n# on it, like a wheel)\nclass SDist(setuptools.command.sdist.sdist):\ndef make_release_tree(self, base_dir, files):\nsetuptools.command.sdist.sdist.make_release_tree(self, base_dir, files)\n\nfor to, src in to_src:\ntxt = get_and_replace(src, binary=True, version=version, extra_cmd=\"\")\n\ndest = os.path.join(base_dir, to)\n\n# This is normally linked, so unlink before writing!\nos.unlink(dest)\nwith open(dest, \"wb\") as f:\nf.write(txt)\n\n\n# Backport from Python 3\n@contextlib.contextmanager\ndef TemporaryDirectory(): # noqa: N802\n\"Prepare a temporary directory, cleanup when done\"\ntry:\ntmpdir = tempfile.mkdtemp()\nyield tmpdir\nfinally:\nshutil.rmtree(tmpdir)\n\n\n# Remove the CMake install directory when done\n@contextlib.contextmanager\ndef remove_output(*sources):\ntry:\nyield\nfinally:\nfor src in sources:\nshutil.rmtree(src)\n\n\nwith remove_output(\"pybind11\/include\", \"pybind11\/share\"):\n# Generate the files if they are not present.\nwith TemporaryDirectory() as tmpdir:\ncmd = [\"cmake\", \"-S\", \".\", \"-B\", tmpdir] + [\n\"-DCMAKE_INSTALL_PREFIX=pybind11\",\n\"-DBUILD_TESTING=OFF\",\n\"-DPYBIND11_NOPYTHON=ON\",\n]\ncmake_opts = dict(cwd=DIR, stdout=sys.stdout, stderr=sys.stderr)\nsubprocess.check_call(cmd, **cmake_opts)\nsubprocess.check_call([\"cmake\", \"--install\", tmpdir], **cmake_opts)\n\ntxt = get_and_replace(setup_py, version=version, extra_cmd=extra_cmd)\ncode = compile(txt, setup_py, \"exec\")\nexec(code, {\"SDist\": SDist})\n"
    },
    {
        "package_name": "tweepy-4.10.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.md requirements.txt setup.cfg setup.py api.py client.py streaming.py __init__.py auth.py cache.py client.py cursor.py errors.py list.py media.py mixins.py models.py pagination.py parsers.py place.py poll.py space.py streaming.py tweet.py user.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport re\nfrom setuptools import find_packages, setup\n\nVERSION_FILE = \"tweepy\/__init__.py\"\nwith open(VERSION_FILE) as version_file:\nmatch = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\nversion_file.read(), re.MULTILINE)\n\nif match:\nversion = match.group(1)\nelse:\nraise RuntimeError(f\"Unable to find version string in {VERSION_FILE}.\")\n\nwith open(\"README.md\") as readme_file:\nlong_description = readme_file.read()\n\nsetup(\nname=\"tweepy\",\nversion=version,\ndescription=\"Twitter library for Python\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nlicense=\"MIT\",\nauthor=\"Joshua Roesslein\",\nauthor_email=\"tweepy@googlegroups.com\",\nurl=\"https:\/\/www.tweepy.org\/\",\nproject_urls={\n\"Documentation\": \"https:\/\/tweepy.readthedocs.io\",\n\"Issue Tracker\": \"https:\/\/github.com\/tweepy\/tweepy\/issues\",\n\"Source Code\": \"https:\/\/github.com\/tweepy\/tweepy\",\n},\ndownload_url=\"https:\/\/pypi.org\/project\/tweepy\/\",\npackages=find_packages(),\ninstall_requires=[\n\"oauthlib>=3.2.0,<4\",\n\"requests>=2.27.0,<3\",\n\"requests-oauthlib>=1.2.0,<2\",\n],\nextras_require={\n\"async\": [\n\"aiohttp>=3.7.3,<4\",\n\"async-lru>=1.0.3,<2\"\n],\n\"dev\": [\n\"coverage>=4.4.2\",\n\"coveralls>=2.1.0\",\n\"tox>=3.21.0\",\n],\n\"socks\": [\"requests[socks]>=2.27.0,<3\"],\n\"test\": [\"vcrpy>=1.10.3\"],\n},\ntest_suite=\"tests\",\nkeywords=\"twitter library\",\npython_requires=\">=3.7\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Topic :: Software Development :: Libraries\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3 :: Only\",\n],\nzip_safe=True,\n)\n"
    },
    {
        "package_name": "twitter-ads-11.0.0",
        "file_list": "twitter-ads CONTRIBUTING.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py account.py analytics.py audience.py campaign.py client.py creative.py cursor.py enum.py error.py http.py resource.py restapi.py targeting.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "# Copyright (C) 2015 Twitter, Inc.\n\nimport os\nimport sys\nfrom setuptools import setup, find_packages\n\nDESCRIPTION = 'A Twitter supported and maintained Ads API SDK for Python.'\nLONG_DESCRIPTION = None\nURL = 'http:\/\/twitterdev.github.io\/twitter-python-ads-sdk\/'\nDOWNLOAD_URL = 'https:\/\/github.com\/twitterdev\/twitter-python-ads-sdk\/tarball\/master'\n\n\ndef get_version(version_tuple):\nif not isinstance(version_tuple[-1], int):\nreturn '.'.join(map(str, version_tuple[:-1])) + version_tuple[-1]\nreturn '.'.join(map(str, version_tuple))\n\n\ninit = os.path.join(os.path.dirname(__file__), 'twitter_ads', '__init__.py')\nversion_line = list(filter(lambda l: l.startswith('VERSION'), open(init)))[0]\n\nVERSION = get_version(eval(version_line.split('=')[-1]))\n\nCLASSIFIERS = [\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Internet',\n'Topic :: Internet :: WWW\/HTTP',\n'Topic :: Software Development :: Libraries :: Python Modules',\n]\n\nextra_opts = {\n'setup_requires': ['flake8==3.7.7', 'pytest-runner'],\n'tests_require': ['pytest', 'responses', 'mock']\n}\n\nif sys.version_info[0] > 2:\nextra_opts['setup_requires'].append('sphinx==2.1.1')\n\nsetup(\nname='twitter-ads',\nversion=VERSION,\nauthor='John Babich, Tushar Bhushan, Juan Shishido',\nauthor_email='jbabich@twitter.com, tbhushan@twitter.com, jshishido@twitter.com',\nurl=URL,\ndownload_url=DOWNLOAD_URL,\nlicense='MIT',\ninclude_package_data=True,\ndescription=DESCRIPTION,\nlong_description=LONG_DESCRIPTION,\nplatforms=['any'],\nclassifiers=CLASSIFIERS,\nscripts=['bin\/twitter-ads'],\ninstall_requires=['pyyaml', 'requests-oauthlib', 'python-dateutil'],\npackages=find_packages(exclude=['docs', 'tests']),\n**extra_opts\n)\n"
    },
    {
        "package_name": "twofish-0.3.0",
        "file_list": "LICENSE PKG-INFO README.rst setup.py tox.ini twofish.c twofish.h twofish.c twofish.py",
        "setup.py": "\"\"\"\nThis file is part of Python Twofish\na Python bridge to the C Twofish library by Niels Ferguson\n\nReleased under The BSD 3-Clause License\nCopyright (c) 2013 Keybase\n\nsetup.py - build and package info\n\"\"\"\n\nfrom distutils.core import setup, Extension\n\ntwofish_module = Extension('_twofish',\nsources=['twofish-0.3\/twofish.c', 'twofish.c'],\ninclude_dirs=['twofish-0.3'])\n\nsetup(name='twofish',\nversion='0.3.0',\ndescription='Bindings for the Twofish implementation by Niels Ferguson',\nauthor='Filippo Valsorda',\nauthor_email='filippo.valsorda@gmail.com',\nurl='http:\/\/github.com\/keybase\/python-twofish',\npy_modules=['twofish'],\next_modules=[twofish_module],\nclassifiers=['Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.3',\n'Topic :: Security :: Cryptography',\n'Topic :: Software Development :: Libraries'],\nlicense='3-clause BSD',\nlong_description=open('README.rst').read())\n"
    },
    {
        "package_name": "twython-3.9.1",
        "file_list": "api.rst conf.py index.rst make.bat Makefile advanced_usage.rst basic_usage.rst install.rst special_functions.rst starting_out.rst streaming_api.rst custom.css customsidebar.html layout.html search.html searchbox.html searchresults.html basicstrap.css_t basicstrap-base.css bootstrap-responsive.css bootstrap-responsive.min.css bootstrap.css bootstrap.min.css bootswatch-cerulean.css font-awesome-ie7.min.css font-awesome.css font-awesome.min.css fontawesome-webfont.eot fontawesome-webfont.svg fontawesome-webfont.ttf fontawesome-webfont.woff FontAwesome.otf glyphicons-halflings-white.png glyphicons-halflings.png bootstrap.js bootstrap.min.js jquery.min.js theme.conf follow_user.py get_direct_messages.py get_user_timeline.py search_results.py stream.py update_profile_image.py update_status.py HISTORY.md LICENSE MANIFEST.in PKG-INFO README.md requirements.txt setup.cfg setup.py config.py test_auth.py test_core.py test_endpoints.py test_html_for_tweet.py test_streaming.py basic.json compat.json entities_with_prefix.json extended.json identical_urls.json media.json quoted.json reply.json retweet.json symbols.json __init__.py advisory.py api.py compat.py endpoints.py exceptions.py helpers.py api.py types.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport os\nimport sys\n\ntry:\nfrom setuptools import setup\nexcept ImportError:\nfrom distutils.core import setup\n\n__author__ = 'Ryan McGrath <ryan@rymc.io>'\n__version__ = '3.9.1'\n\npackages = [\n'twython',\n'twython.streaming'\n]\n\nif sys.argv[-1] == 'publish':\nos.system('python setup.py sdist upload')\nsys.exit()\n\nsetup(\nname='twython',\nversion=__version__,\ninstall_requires=['requests>=2.1.0', 'requests_oauthlib>=0.4.0'],\npython_requires='>=3.5',\nauthor='Ryan McGrath',\nauthor_email='ryan@rymc.io',\nlicense='MIT',\nurl='https:\/\/github.com\/ryanmcgrath\/twython\/tree\/master',\nkeywords='twitter search api tweet twython stream',\ndescription='Actively maintained, pure Python wrapper for the Twitter API. Supports both normal and streaming Twitter APIs',\nlong_description=open('README.md', encoding='utf-8').read() + '\\n\\n' +open('HISTORY.md', encoding='utf-8').read(),\nlong_description_content_type='text\/markdown',\ninclude_package_data=True,\npackages=packages,\nclassifiers=[\n'Development Status :: 4 - Beta',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Communications :: Chat',\n'Topic :: Internet',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3 :: Only',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n]\n)\n"
    },
    {
        "package_name": "typepy-1.3.0",
        "file_list": "summary.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst docs_requirements.txt requirements.txt test_requirements.txt setup.cfg setup.py test_checker_bool.py test_checker_bytes.py test_checker_datetime.py test_checker_dictionary.py test_checker_infinite.py test_checker_integer.py test_checker_ipaddress.py test_checker_list.py test_checker_nan.py test_checker_none.py test_checker_realnumber.py test_checker_string.py test_bool.py test_integer.py test_realnumber.py test_string.py _common.py __init__.py test_common.py test_function.py test_str_function.py test_type.py __init__.py tox.ini _bool.py _bytes.py _checker.py _common.py _datetime.py _dictionary.py _infinity.py _integer.py _interface.py _ipaddress.py _list.py _nan.py _none.py _realnumber.py _string.py __init__.py _bool.py _bytes.py _datetime.py _dictionary.py _integer.py _interface.py _ipaddress.py _list.py _nop.py _realnumber.py _string.py __init__.py error.py py.typed _base.py _binary.py _bool.py _bytes.py _datetime.py _dictionary.py _infinity.py _integer.py _ipaddress.py _list.py _nan.py _none.py _realnumber.py _string.py __init__.py _common.py _const.py _function.py _typecode.py __init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "\"\"\"\n.. codeauthor:: Tsuyoshi Hombashi <tsuyoshi.hombashi@gmail.com>\n\"\"\"\n\nimport os.path\nfrom typing import Dict\n\nimport setuptools\n\n\nMODULE_NAME = \"typepy\"\nREPOSITORY_URL = f\"https:\/\/github.com\/thombashi\/{MODULE_NAME:s}\"\nREQUIREMENT_DIR = \"requirements\"\nENCODING = \"utf8\"\n\npkg_info: Dict[str, str] = {}\n\n\ndef get_release_command_class() -> Dict[str, setuptools.Command]:\ntry:\nfrom releasecmd import ReleaseCommand\nexcept ImportError:\nreturn {}\n\nreturn {\"release\": ReleaseCommand}\n\n\nwith open(os.path.join(MODULE_NAME, \"__version__.py\")) as f:\nexec(f.read(), pkg_info)\n\nwith open(\"README.rst\", encoding=ENCODING) as f:\nlong_description = f.read()\n\nwith open(os.path.join(\"docs\", \"pages\", \"introduction\", \"summary.txt\"), encoding=ENCODING) as f:\nsummary = f.read().strip()\n\nwith open(os.path.join(REQUIREMENT_DIR, \"requirements.txt\")) as f:\ninstall_requires = [line.strip() for line in f if line.strip()]\n\nwith open(os.path.join(REQUIREMENT_DIR, \"test_requirements.txt\")) as f:\ntests_requires = [line.strip() for line in f if line.strip()]\n\n\nDATETIME_REQUIRES = [\n\"python-dateutil>=2.8.0,<3.0.0\",\n\"pytz>=2018.9\",\n\"packaging\",\n]\n\nsetuptools.setup(\nname=MODULE_NAME,\nversion=pkg_info[\"__version__\"],\nurl=REPOSITORY_URL,\nauthor=pkg_info[\"__author__\"],\nauthor_email=pkg_info[\"__email__\"],\ndescription=summary,\ninclude_package_data=True,\nkeywords=[\"library\", \"type-checking\", \"type-conversion\", \"validator\"],\nlicense=pkg_info[\"__license__\"],\nlong_description=long_description,\nlong_description_content_type=\"text\/x-rst\",\npackages=setuptools.find_packages(exclude=[\"test*\"]),\npackage_data={MODULE_NAME: [\"py.typed\"]},\nproject_urls={\n\"Documentation\": f\"https:\/\/{MODULE_NAME:s}.rtfd.io\/\",\n\"Source\": REPOSITORY_URL,\n\"Tracker\": f\"{REPOSITORY_URL:s}\/issues\",\n\"Changes\": f\"{REPOSITORY_URL:s}\/releases\",\n},\npython_requires=\">=3.6\",\ninstall_requires=install_requires,\nextras_require={\"datetime\": DATETIME_REQUIRES, \"test\": tests_requires + DATETIME_REQUIRES},\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"Intended Audience :: Information Technology\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3 :: Only\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Topic :: Software Development :: Libraries\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\ncmdclass=get_release_command_class(),\n)\n"
    },
    {
        "package_name": "types-cachetools-5.2.1",
        "file_list": "func.pyi keys.pyi METADATA.toml __init__.pyi CHANGELOG.md MANIFEST.in PKG-INFO setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-cachetools\"\ndescription = \"Typing stubs for cachetools\"\nlong_description = '''\n## Typing stubs for cachetools\n\nThis is a PEP 561 type stub package for the `cachetools` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `cachetools`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/cachetools. All fixes for\ntypes and metadata should be contributed there.\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `634f18f615a93e826b253e261ca05f2c45ada134`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"5.2.1\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/cachetools.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=[],\npackages=['cachetools-stubs'],\npackage_data={'cachetools-stubs': ['__init__.pyi', 'func.pyi', 'keys.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "types-certifi-2021.10.8.3",
        "file_list": "METADATA.toml __init__.pyi CHANGELOG.md MANIFEST.in PKG-INFO setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-certifi\"\ndescription = \"Typing stubs for certifi\"\nlong_description = '''\n## Typing stubs for certifi\n\nThis is a PEP 561 type stub package for the `certifi` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `certifi`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/certifi. All fixes for\ntypes and metadata should be contributed there.\n\n*Note:* The `certifi` package includes type annotations or type stubs\nsince version 2022.5.18.1. Please uninstall the `types-certifi`\npackage if you use this or a newer version.\n\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `95128e61ec82c2ca8ec32d6c03bd9dad9ab68e65`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"2021.10.8.3\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/certifi.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=[],\npackages=['certifi-stubs'],\npackage_data={'certifi-stubs': ['__init__.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "types-colorama-0.4.15",
        "file_list": "CHANGELOG.md ansi.pyi ansitowin32.pyi initialise.pyi METADATA.toml win32.pyi winterm.pyi __init__.pyi MANIFEST.in PKG-INFO setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-colorama\"\ndescription = \"Typing stubs for colorama\"\nlong_description = '''\n## Typing stubs for colorama\n\nThis is a PEP 561 type stub package for the `colorama` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `colorama`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/colorama. All fixes for\ntypes and metadata should be contributed there.\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `6348a58b8b950f894c9bd92f5ee55eeb521a0cbf`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"0.4.15\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/colorama.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=[],\npackages=['colorama-stubs'],\npackage_data={'colorama-stubs': ['__init__.pyi', 'ansi.pyi', 'ansitowin32.pyi', 'initialise.pyi', 'win32.pyi', 'winterm.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "types-dateparser-1.1.4",
        "file_list": "CHANGELOG.md hijri.pyi hijri_parser.pyi jalali.pyi jalali_parser.pyi __init__.pyi conf.pyi languages_info.pyi __init__.pyi date.pyi date_parser.pyi freshness_date_parser.pyi dictionary.pyi loader.pyi locale.pyi validation.pyi __init__.pyi METADATA.toml parser.pyi detection.pyi search.pyi text_detection.pyi __init__.pyi timezones.pyi timezone_parser.pyi strptime.pyi __init__.pyi __init__.pyi METADATA.toml settings.pyi __init__.pyi MANIFEST.in PKG-INFO setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-dateparser\"\ndescription = \"Typing stubs for dateparser\"\nlong_description = '''\n## Typing stubs for dateparser\n\nThis is a PEP 561 type stub package for the `dateparser` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `dateparser`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/dateparser. All fixes for\ntypes and metadata should be contributed there.\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `6348a58b8b950f894c9bd92f5ee55eeb521a0cbf`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"1.1.4\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/dateparser.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=[],\npackages=['dateparser-stubs', 'dateparser_data-stubs'],\npackage_data={'dateparser-stubs': ['__init__.pyi', 'calendars\/__init__.pyi', 'calendars\/hijri.pyi', 'calendars\/hijri_parser.pyi', 'calendars\/jalali.pyi', 'calendars\/jalali_parser.pyi', 'conf.pyi', 'data\/__init__.pyi', 'data\/languages_info.pyi', 'date.pyi', 'date_parser.pyi', 'freshness_date_parser.pyi', 'languages\/__init__.pyi', 'languages\/dictionary.pyi', 'languages\/loader.pyi', 'languages\/locale.pyi', 'languages\/validation.pyi', 'parser.pyi', 'search\/__init__.pyi', 'search\/detection.pyi', 'search\/search.pyi', 'search\/text_detection.pyi', 'timezone_parser.pyi', 'timezones.pyi', 'utils\/__init__.pyi', 'utils\/strptime.pyi', 'METADATA.toml'], 'dateparser_data-stubs': ['__init__.pyi', 'settings.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "types-decorator-5.1.8",
        "file_list": "CHANGELOG.md METADATA.toml __init__.pyi MANIFEST.in PKG-INFO setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-decorator\"\ndescription = \"Typing stubs for decorator\"\nlong_description = '''\n## Typing stubs for decorator\n\nThis is a PEP 561 type stub package for the `decorator` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `decorator`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/decorator. All fixes for\ntypes and metadata should be contributed there.\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `6348a58b8b950f894c9bd92f5ee55eeb521a0cbf`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"5.1.8\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/decorator.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=[],\npackages=['decorator-stubs'],\npackage_data={'decorator-stubs': ['__init__.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "types-docutils-0.19.0",
        "file_list": "CHANGELOG.md core.pyi examples.pyi frontend.pyi io.pyi __init__.pyi METADATA.toml nodes.pyi null.pyi recommonmark_wrapper.pyi admonitions.pyi body.pyi html.pyi images.pyi misc.pyi parts.pyi references.pyi tables.pyi __init__.pyi roles.pyi states.pyi __init__.pyi __init__.pyi doctree.pyi pep.pyi standalone.pyi __init__.pyi statemachine.pyi __init__.pyi __init__.pyi docutils_xml.pyi html4css1.pyi html5_polyglot.pyi latex2e.pyi manpage.pyi null.pyi odf_odt.pyi pep_html.pyi pseudoxml.pyi s5_html.pyi xetex.pyi __init__.pyi __init__.pyi MANIFEST.in PKG-INFO setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-docutils\"\ndescription = \"Typing stubs for docutils\"\nlong_description = '''\n## Typing stubs for docutils\n\nThis is a PEP 561 type stub package for the `docutils` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `docutils`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/docutils. All fixes for\ntypes and metadata should be contributed there.\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `ee09a67c5cf61effaae1bdb894571eac4fc9ac6b`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"0.19.0\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/docutils.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=[],\npackages=['docutils-stubs'],\npackage_data={'docutils-stubs': ['__init__.pyi', 'core.pyi', 'examples.pyi', 'frontend.pyi', 'io.pyi', 'languages\/__init__.pyi', 'nodes.pyi', 'parsers\/__init__.pyi', 'parsers\/null.pyi', 'parsers\/recommonmark_wrapper.pyi', 'parsers\/rst\/__init__.pyi', 'parsers\/rst\/directives\/__init__.pyi', 'parsers\/rst\/directives\/admonitions.pyi', 'parsers\/rst\/directives\/body.pyi', 'parsers\/rst\/directives\/html.pyi', 'parsers\/rst\/directives\/images.pyi', 'parsers\/rst\/directives\/misc.pyi', 'parsers\/rst\/directives\/parts.pyi', 'parsers\/rst\/directives\/references.pyi', 'parsers\/rst\/directives\/tables.pyi', 'parsers\/rst\/roles.pyi', 'parsers\/rst\/states.pyi', 'readers\/__init__.pyi', 'readers\/doctree.pyi', 'readers\/pep.pyi', 'readers\/standalone.pyi', 'statemachine.pyi', 'transforms\/__init__.pyi', 'utils\/__init__.pyi', 'writers\/__init__.pyi', 'writers\/docutils_xml.pyi', 'writers\/html4css1.pyi', 'writers\/html5_polyglot.pyi', 'writers\/latex2e.pyi', 'writers\/manpage.pyi', 'writers\/null.pyi', 'writers\/odf_odt.pyi', 'writers\/pep_html.pyi', 'writers\/pseudoxml.pyi', 'writers\/s5_html.pyi', 'writers\/xetex.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "types-freezegun-1.1.10",
        "file_list": "CHANGELOG.md api.pyi METADATA.toml __init__.pyi MANIFEST.in PKG-INFO setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-freezegun\"\ndescription = \"Typing stubs for freezegun\"\nlong_description = '''\n## Typing stubs for freezegun\n\nThis is a PEP 561 type stub package for the `freezegun` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `freezegun`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/freezegun. All fixes for\ntypes and metadata should be contributed there.\n\n*Note:* The `freezegun` package includes type annotations or type stubs\nsince version 1.2.1. Please uninstall the `types-freezegun`\npackage if you use this or a newer version.\n\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `81fd55a885e678559471710f249c7e27d02ec212`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"1.1.10\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/freezegun.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=[],\npackages=['freezegun-stubs'],\npackage_data={'freezegun-stubs': ['__init__.pyi', 'api.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "types-ipaddress-1.0.8",
        "file_list": "CHANGELOG.md METADATA.toml __init__.pyi MANIFEST.in PKG-INFO setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-ipaddress\"\ndescription = \"Typing stubs for ipaddress\"\nlong_description = '''\n## Typing stubs for ipaddress\n\nThis is a PEP 561 type stub package for the `ipaddress` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `ipaddress`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/ipaddress. All fixes for\ntypes and metadata should be contributed there.\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `45a2dad83cc372cd066a91fc04ab44297b714e69`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"1.0.8\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/ipaddress.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=[],\npackages=['ipaddress-python2-stubs'],\npackage_data={'ipaddress-python2-stubs': ['__init__.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "types-psycopg2-2.9.19",
        "file_list": "CHANGELOG.md MANIFEST.in PKG-INFO errorcodes.pyi errors.pyi extensions.pyi extras.pyi METADATA.toml pool.pyi sql.pyi tz.pyi _ipaddress.pyi _json.pyi _psycopg.pyi _range.pyi __init__.pyi setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-psycopg2\"\ndescription = \"Typing stubs for psycopg2\"\nlong_description = '''\n## Typing stubs for psycopg2\n\nThis is a PEP 561 type stub package for the `psycopg2` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `psycopg2`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/psycopg2. All fixes for\ntypes and metadata should be contributed there.\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `4f6aa12446b7799cd13c8dfb30a953bfcbedc404`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"2.9.19\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/psycopg2.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=[],\npackages=['psycopg2-stubs'],\npackage_data={'psycopg2-stubs': ['__init__.pyi', '_ipaddress.pyi', '_json.pyi', '_psycopg.pyi', '_range.pyi', 'errorcodes.pyi', 'errors.pyi', 'extensions.pyi', 'extras.pyi', 'pool.pyi', 'sql.pyi', 'tz.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "types-Pygments-2.12.1",
        "file_list": "CHANGELOG.md MANIFEST.in PKG-INFO cmdline.pyi console.pyi filter.pyi __init__.pyi formatter.pyi bbcode.pyi html.pyi img.pyi irc.pyi latex.pyi other.pyi pangomarkup.pyi rtf.pyi svg.pyi terminal.pyi terminal256.pyi _mapping.pyi __init__.pyi lexer.pyi __init__.pyi METADATA.toml modeline.pyi plugin.pyi regexopt.pyi scanner.pyi sphinxext.pyi style.pyi __init__.pyi token.pyi unistring.pyi util.pyi __init__.pyi setup.cfg setup.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-Pygments\"\ndescription = \"Typing stubs for Pygments\"\nlong_description = '''\n## Typing stubs for Pygments\n\nThis is a PEP 561 type stub package for the `Pygments` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `Pygments`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/Pygments. All fixes for\ntypes and metadata should be contributed there.\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `db8f3c8f50d8a7e97fa26239af15f3c16201ca2d`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"2.12.1\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/Pygments.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=['types-docutils', 'types-setuptools'],\npackages=['pygments-stubs'],\npackage_data={'pygments-stubs': ['__init__.pyi', 'cmdline.pyi', 'console.pyi', 'filter.pyi', 'filters\/__init__.pyi', 'formatter.pyi', 'formatters\/__init__.pyi', 'formatters\/_mapping.pyi', 'formatters\/bbcode.pyi', 'formatters\/html.pyi', 'formatters\/img.pyi', 'formatters\/irc.pyi', 'formatters\/latex.pyi', 'formatters\/other.pyi', 'formatters\/pangomarkup.pyi', 'formatters\/rtf.pyi', 'formatters\/svg.pyi', 'formatters\/terminal.pyi', 'formatters\/terminal256.pyi', 'lexer.pyi', 'lexers\/__init__.pyi', 'modeline.pyi', 'plugin.pyi', 'regexopt.pyi', 'scanner.pyi', 'sphinxext.pyi', 'style.pyi', 'styles\/__init__.pyi', 'token.pyi', 'unistring.pyi', 'util.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "types-pyOpenSSL-22.0.10",
        "file_list": "CHANGELOG.md MANIFEST.in crypto.pyi METADATA.toml rand.pyi SSL.pyi version.pyi __init__.pyi PKG-INFO setup.cfg setup.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-pyOpenSSL\"\ndescription = \"Typing stubs for pyOpenSSL\"\nlong_description = '''\n## Typing stubs for pyOpenSSL\n\nThis is a PEP 561 type stub package for the `pyOpenSSL` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `pyOpenSSL`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/pyOpenSSL. All fixes for\ntypes and metadata should be contributed there.\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `aba4bbd13bdb4c90e6f716017f74bf1be2acb417`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"22.0.10\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/pyOpenSSL.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=['types-cryptography'],\npackages=['OpenSSL-stubs'],\npackage_data={'OpenSSL-stubs': ['SSL.pyi', '__init__.pyi', 'crypto.pyi', 'rand.pyi', 'version.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "types-redis-4.3.14",
        "file_list": "CHANGELOG.md MANIFEST.in PKG-INFO client.pyi connection.pyi lock.pyi retry.pyi sentinel.pyi utils.pyi __init__.pyi backoff.pyi client.pyi cluster.pyi commands.pyi info.pyi __init__.pyi cluster.pyi core.pyi commands.pyi edge.pyi exceptions.pyi node.pyi path.pyi query_result.pyi __init__.pyi helpers.pyi commands.pyi decoders.pyi path.pyi __init__.pyi parser.pyi redismodules.pyi aggregation.pyi commands.pyi query.pyi result.pyi __init__.pyi sentinel.pyi commands.pyi info.pyi utils.pyi __init__.pyi __init__.pyi connection.pyi crc.pyi exceptions.pyi lock.pyi METADATA.toml ocsp.pyi retry.pyi sentinel.pyi typing.pyi utils.pyi __init__.pyi setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-redis\"\ndescription = \"Typing stubs for redis\"\nlong_description = '''\n## Typing stubs for redis\n\nThis is a PEP 561 type stub package for the `redis` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `redis`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/redis. All fixes for\ntypes and metadata should be contributed there.\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `510feeb3fcc6f7d51145c876bbe3cff3229d7d77`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"4.3.14\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/redis.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=[],\npackages=['redis-stubs'],\npackage_data={'redis-stubs': ['__init__.pyi', 'asyncio\/__init__.pyi', 'asyncio\/client.pyi', 'asyncio\/connection.pyi', 'asyncio\/lock.pyi', 'asyncio\/retry.pyi', 'asyncio\/sentinel.pyi', 'asyncio\/utils.pyi', 'backoff.pyi', 'client.pyi', 'cluster.pyi', 'commands\/__init__.pyi', 'commands\/bf\/__init__.pyi', 'commands\/bf\/commands.pyi', 'commands\/bf\/info.pyi', 'commands\/cluster.pyi', 'commands\/core.pyi', 'commands\/graph\/__init__.pyi', 'commands\/graph\/commands.pyi', 'commands\/graph\/edge.pyi', 'commands\/graph\/exceptions.pyi', 'commands\/graph\/node.pyi', 'commands\/graph\/path.pyi', 'commands\/graph\/query_result.pyi', 'commands\/helpers.pyi', 'commands\/json\/__init__.pyi', 'commands\/json\/commands.pyi', 'commands\/json\/decoders.pyi', 'commands\/json\/path.pyi', 'commands\/parser.pyi', 'commands\/redismodules.pyi', 'commands\/search\/__init__.pyi', 'commands\/search\/aggregation.pyi', 'commands\/search\/commands.pyi', 'commands\/search\/query.pyi', 'commands\/search\/result.pyi', 'commands\/sentinel.pyi', 'commands\/timeseries\/__init__.pyi', 'commands\/timeseries\/commands.pyi', 'commands\/timeseries\/info.pyi', 'commands\/timeseries\/utils.pyi', 'connection.pyi', 'crc.pyi', 'exceptions.pyi', 'lock.pyi', 'ocsp.pyi', 'retry.pyi', 'sentinel.pyi', 'typing.pyi', 'utils.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "types-setuptools-64.0.1",
        "file_list": "CHANGELOG.md MANIFEST.in PKG-INFO METADATA.toml py31compat.pyi __init__.pyi setup.cfg setup.py archive_util.pyi build_meta.pyi alias.pyi bdist_egg.pyi bdist_rpm.pyi build_clib.pyi build_ext.pyi build_py.pyi develop.pyi dist_info.pyi easy_install.pyi egg_info.pyi install.pyi install_egg_info.pyi install_lib.pyi install_scripts.pyi py36compat.pyi register.pyi rotate.pyi saveopts.pyi sdist.pyi setopt.pyi test.pyi upload.pyi upload_docs.pyi __init__.pyi config.pyi depends.pyi dep_util.pyi dist.pyi errors.pyi extension.pyi __init__.pyi glob.pyi installer.pyi launch.pyi METADATA.toml monkey.pyi msvc.pyi namespaces.pyi package_index.pyi sandbox.pyi unicode_utils.pyi version.pyi wheel.pyi windows_support.pyi _deprecation_warning.pyi archive_util.pyi bcppcompiler.pyi ccompiler.pyi cmd.pyi bdist.pyi bdist_dumb.pyi bdist_msi.pyi bdist_rpm.pyi bdist_wininst.pyi build.pyi build_clib.pyi build_ext.pyi build_py.pyi build_scripts.pyi check.pyi clean.pyi config.pyi install.pyi install_data.pyi install_egg_info.pyi install_headers.pyi install_lib.pyi install_scripts.pyi py37compat.pyi register.pyi sdist.pyi upload.pyi __init__.pyi config.pyi core.pyi cygwinccompiler.pyi debug.pyi dep_util.pyi dir_util.pyi dist.pyi errors.pyi extension.pyi fancy_getopt.pyi filelist.pyi file_util.pyi log.pyi msvccompiler.pyi spawn.pyi sysconfig.pyi text_file.pyi unixccompiler.pyi util.pyi version.pyi __init__.pyi __init__.pyi dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-setuptools\"\ndescription = \"Typing stubs for setuptools\"\nlong_description = '''\n## Typing stubs for setuptools\n\nThis is a PEP 561 type stub package for the `setuptools` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `setuptools`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/setuptools. All fixes for\ntypes and metadata should be contributed there.\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `5477097c6de5bc873a65b7b8749ff41876f5aa69`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"64.0.1\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/setuptools.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=[],\npackages=['setuptools-stubs', 'pkg_resources-stubs'],\npackage_data={'setuptools-stubs': ['__init__.pyi', '_deprecation_warning.pyi', '_distutils\/__init__.pyi', '_distutils\/archive_util.pyi', '_distutils\/bcppcompiler.pyi', '_distutils\/ccompiler.pyi', '_distutils\/cmd.pyi', '_distutils\/command\/__init__.pyi', '_distutils\/command\/bdist.pyi', '_distutils\/command\/bdist_dumb.pyi', '_distutils\/command\/bdist_msi.pyi', '_distutils\/command\/bdist_rpm.pyi', '_distutils\/command\/bdist_wininst.pyi', '_distutils\/command\/build.pyi', '_distutils\/command\/build_clib.pyi', '_distutils\/command\/build_ext.pyi', '_distutils\/command\/build_py.pyi', '_distutils\/command\/build_scripts.pyi', '_distutils\/command\/check.pyi', '_distutils\/command\/clean.pyi', '_distutils\/command\/config.pyi', '_distutils\/command\/install.pyi', '_distutils\/command\/install_data.pyi', '_distutils\/command\/install_egg_info.pyi', '_distutils\/command\/install_headers.pyi', '_distutils\/command\/install_lib.pyi', '_distutils\/command\/install_scripts.pyi', '_distutils\/command\/py37compat.pyi', '_distutils\/command\/register.pyi', '_distutils\/command\/sdist.pyi', '_distutils\/command\/upload.pyi', '_distutils\/config.pyi', '_distutils\/core.pyi', '_distutils\/cygwinccompiler.pyi', '_distutils\/debug.pyi', '_distutils\/dep_util.pyi', '_distutils\/dir_util.pyi', '_distutils\/dist.pyi', '_distutils\/errors.pyi', '_distutils\/extension.pyi', '_distutils\/fancy_getopt.pyi', '_distutils\/file_util.pyi', '_distutils\/filelist.pyi', '_distutils\/log.pyi', '_distutils\/msvccompiler.pyi', '_distutils\/spawn.pyi', '_distutils\/sysconfig.pyi', '_distutils\/text_file.pyi', '_distutils\/unixccompiler.pyi', '_distutils\/util.pyi', '_distutils\/version.pyi', 'archive_util.pyi', 'build_meta.pyi', 'command\/__init__.pyi', 'command\/alias.pyi', 'command\/bdist_egg.pyi', 'command\/bdist_rpm.pyi', 'command\/build_clib.pyi', 'command\/build_ext.pyi', 'command\/build_py.pyi', 'command\/develop.pyi', 'command\/dist_info.pyi', 'command\/easy_install.pyi', 'command\/egg_info.pyi', 'command\/install.pyi', 'command\/install_egg_info.pyi', 'command\/install_lib.pyi', 'command\/install_scripts.pyi', 'command\/py36compat.pyi', 'command\/register.pyi', 'command\/rotate.pyi', 'command\/saveopts.pyi', 'command\/sdist.pyi', 'command\/setopt.pyi', 'command\/test.pyi', 'command\/upload.pyi', 'command\/upload_docs.pyi', 'config.pyi', 'dep_util.pyi', 'depends.pyi', 'dist.pyi', 'errors.pyi', 'extension.pyi', 'extern\/__init__.pyi', 'glob.pyi', 'installer.pyi', 'launch.pyi', 'monkey.pyi', 'msvc.pyi', 'namespaces.pyi', 'package_index.pyi', 'sandbox.pyi', 'unicode_utils.pyi', 'version.pyi', 'wheel.pyi', 'windows_support.pyi', 'METADATA.toml'], 'pkg_resources-stubs': ['__init__.pyi', 'py31compat.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "types-tabulate-0.8.11",
        "file_list": "CHANGELOG.md MANIFEST.in PKG-INFO setup.cfg setup.py METADATA.toml __init__.pyi dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-tabulate\"\ndescription = \"Typing stubs for tabulate\"\nlong_description = '''\n## Typing stubs for tabulate\n\nThis is a PEP 561 type stub package for the `tabulate` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `tabulate`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/tabulate. All fixes for\ntypes and metadata should be contributed there.\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `14628b519a4f89ad8f7aab35d88956c58e6156ae`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"0.8.11\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/tabulate.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=[],\npackages=['tabulate-stubs'],\npackage_data={'tabulate-stubs': ['__init__.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "types-toml-0.10.8",
        "file_list": "CHANGELOG.md MANIFEST.in PKG-INFO setup.cfg setup.py decoder.pyi encoder.pyi METADATA.toml ordered.pyi tz.pyi __init__.pyi dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup\n\nname = \"types-toml\"\ndescription = \"Typing stubs for toml\"\nlong_description = '''\n## Typing stubs for toml\n\nThis is a PEP 561 type stub package for the `toml` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `toml`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/toml. All fixes for\ntypes and metadata should be contributed there.\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `6348a58b8b950f894c9bd92f5ee55eeb521a0cbf`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"0.10.8\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/toml.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=[],\npackages=['toml-stubs'],\npackage_data={'toml-stubs': ['__init__.pyi', 'decoder.pyi', 'encoder.pyi', 'ordered.pyi', 'tz.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "types-tzlocal-4.2.2",
        "file_list": "CHANGELOG.md MANIFEST.in PKG-INFO setup.cfg setup.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt METADATA.toml utils.pyi windows_tz.pyi __init__.pyi",
        "setup.py": "from setuptools import setup\n\nname = \"types-tzlocal\"\ndescription = \"Typing stubs for tzlocal\"\nlong_description = '''\n## Typing stubs for tzlocal\n\nThis is a PEP 561 type stub package for the `tzlocal` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `tzlocal`. The source for this package can be found at\nhttps:\/\/github.com\/python\/typeshed\/tree\/master\/stubs\/tzlocal. All fixes for\ntypes and metadata should be contributed there.\n\nSee https:\/\/github.com\/python\/typeshed\/blob\/master\/README.md for more details.\nThis package was generated from typeshed commit `85077b273d15eb837cddc7e9ed5bcaf5661c2f3e`.\n'''.lstrip()\n\nsetup(name=name,\nversion=\"4.2.2\",\ndescription=description,\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/python\/typeshed\",\nproject_urls={\n\"GitHub\": \"https:\/\/github.com\/python\/typeshed\",\n\"Changes\": \"https:\/\/github.com\/typeshed-internal\/stub_uploader\/blob\/main\/data\/changelogs\/tzlocal.md\",\n\"Issue tracker\": \"https:\/\/github.com\/python\/typeshed\/issues\",\n\"Chat\": \"https:\/\/gitter.im\/python\/typing\",\n},\ninstall_requires=['types-pytz'],\npackages=['tzlocal-stubs'],\npackage_data={'tzlocal-stubs': ['__init__.pyi', 'utils.pyi', 'windows_tz.pyi', 'METADATA.toml']},\nlicense=\"Apache-2.0 license\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Typing :: Stubs Only\",\n]\n)\n"
    },
    {
        "package_name": "typing_utils-0.1.0",
        "file_list": "LICENSE PKG-INFO README.md setup.cfg setup.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "import setuptools\n\nwith open(\"README.md\", \"r\", encoding=\"utf8\") as f:\nlong_description = f.read()\n\nsetuptools.setup(\nname=\"typing_utils\",\nversion=\"0.1.0\",\nauthor=\"bojiang\",\nauthor_email=\"bojiang_@outlook.com\",\ndescription=\"utils to inspect Python type annotations\",\nlong_description=long_description,\nlicense=\"Apache License 2.0\",\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/bojiang\/typing_utils\",\npackages=setuptools.find_packages(exclude=[\"tests*\"]),\nclassifiers=[\n\"Operating System :: OS Independent\",\n\"Development Status :: 2 - Pre-Alpha\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n],\npython_requires=\">=3.6.1\",\nextras_require={\"test\": [\"pytest\"]},\n)\n"
    },
    {
        "package_name": "uhashring-2.1",
        "file_list": ".gitignore conftest.py LICENSE Makefile MANIFEST.in PKG-INFO README.rst requirements-tests.txt setup.cfg setup.py benchmark.py benchmark_hashes.py test_distribution.py test_implementation.py test_ketama_compatibility.py test_monkey.py tox.ini monkey.py ring.py ring_ketama.py ring_meta.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe",
        "setup.py": "\"\"\"\nuhashring\n\"\"\"\n\nimport os\n\nfrom setuptools import find_packages, setup\n\n\n# Utility function to read the README file.\n# Used for the long_description. It's nice, because now 1) we have a top level\n# README file and 2) it's easier to type in the README file than to put a raw\n# string in below ...\ndef read(fname):\nreturn open(os.path.join(os.path.dirname(__file__), fname)).read()\n\n\nsetup(\nauthor=\"Ultrabug\",\nauthor_email=\"ultrabug@ultrabug.net\",\nclassifiers=[\n\"License :: OSI Approved :: BSD License\",\n\"Operating System :: POSIX :: Linux\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\ndescription=(\n\"Full featured consistent hashing python library compatible with ketama.\"\n),\ndownload_url=\"https:\/\/github.com\/ultrabug\/uhashring\/tags\",\ninclude_package_data=True,\ninstall_requires=[],\nlicense=\"BSD\",\nlong_description=read(\"README.rst\"),\nname=\"uhashring\",\npackages=find_packages(),\nplatforms=\"any\",\npython_requires=\">=3.6\",\nurl=\"https:\/\/github.com\/ultrabug\/uhashring\",\nversion=\"2.1\",\nzip_safe=True,\n)\n"
    },
    {
        "package_name": "undetected-chromedriver-3.1.5.post4",
        "file_list": "LICENSE PKG-INFO README.md setup.cfg setup.py cdp.py devtool.py dprocess.py options.py patcher.py reactor.py v2.py webelement.py _compat.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "\"\"\"\n\n888 888 d8b\n888 888 Y8P\n888 888\n.d8888b 88888b. 888d888 .d88b. 88888b.d88b. .d88b. .d88888 888d888 888 888 888 .d88b. 888d888\nd88P\" 888 \"88b 888P\" d88\"\"88b 888 \"888 \"88b d8P Y8b d88\" 888 888P\" 888 888 888 d8P Y8b 888P\"\n888 888 888 888 888 888 888 888 888 88888888 888 888 888 888 Y88 88P 88888888 888\nY88b. 888 888 888 Y88..88P 888 888 888 Y8b. Y88b 888 888 888 Y8bd8P Y8b. 888\n\"Y8888P 888 888 888 \"Y88P\" 888 888 888 \"Y8888 \"Y88888 888 888 Y88P \"Y8888 888 88888888\n\nBY ULTRAFUNKAMSTERDAM (https:\/\/github.com\/ultrafunkamsterdam)\"\"\"\n\nfrom setuptools import setup\nimport os\nimport re\nimport codecs\n\n\ndirname = os.path.abspath(os.path.dirname(__file__))\n\nwith codecs.open(\nos.path.join(dirname, \"undetected_chromedriver\", \"__init__.py\"),\nmode=\"r\",\nencoding=\"utf-8\",\n) as fp:\ntry:\nversion = re.findall(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", fp.read(), re.M)[0]\nexcept Exception:\nraise RuntimeError(\"unable to determine version\")\n\ndescription = (\n\"Selenium.webdriver.Chrome replacement with compatiblity for Brave, and other Chromium based browsers.\",\n\"Not triggered by CloudFlare\/Imperva\/hCaptcha and such.\",\n\"NOTE: results may vary due to many factors. No guarantees are given, except for ongoing efforts in understanding detection algorithms.\",\n)\n\nsetup(\nname=\"undetected-chromedriver\",\nversion=version,\npackages=[\"undetected_chromedriver\"],\ninstall_requires=[\n\"selenium>=4.0.0\",\n\"requests\",\n\"websockets\",\n],\nurl=\"https:\/\/github.com\/ultrafunkamsterdam\/undetected-chromedriver\",\nlicense=\"GPL-3.0\",\nauthor=\"UltrafunkAmsterdam\",\nauthor_email=\"info@blackhat-security.nl\",\ndescription=description,\nlong_description=open(os.path.join(dirname, \"README.md\"), encoding=\"utf-8\").read(),\nlong_description_content_type=\"text\/markdown\",\nclassifiers=[\n\"License :: OSI Approved :: GNU General Public License v3 (GPLv3)\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3.11\",\n],\n)\n"
    },
    {
        "package_name": "unicode-2.9",
        "file_list": "COPYING MANIFEST.in paracode paracode.1 PKG-INFO README README-paracode setup.cfg setup.py unicode unicode.1 dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "import io\nimport os\nfrom setuptools import setup\n\n\nos.chdir(os.path.abspath(os.path.dirname(__file__)))\n\n\n\nsetup(name='unicode',\nversion='2.9',\nscripts=['unicode', 'paracode'],\n# entry_points={'console_scripts': [\n# 'unicode = unicode:main',\n# 'paracode = paracode:main']},\ndescription=\"Display unicode character properties\",\nlong_description=\"\"\"\nDisplay unicode character properties:\nEnter regular expression, hexadecimal number or some characters as an\nargument. unicode will try to guess what you want to look up.\nUse four-digit hexadecimal number followed by two dots to display\ngiven unicode block in a nice tabular format.\n\"\"\",\nauthor=\"Radovan Garabik\",\nauthor_email='radovan.garabik@kassiopeia.juls.savba.sk',\nurl='http:\/\/kassiopeia.juls.savba.sk\/~garabik\/software\/unicode.html',\nlicense='GNU GPL v3',\nkeywords=['unicode', 'character properties', 'encoding'],\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Console',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 3',\n'Topic :: Text Editors :: Text Processing',\n'Topic :: Utilities'])\n\n"
    },
    {
        "package_name": "unidic-1.1.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py download.py unidic.py __init__.py __main__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "import pathlib\nimport setuptools\nfrom distutils.core import setup\nimport os\n\nsetup(name='unidic', \nversion='1.1.0',\nauthor=\"Paul O'Leary McCann\",\nauthor_email=\"polm@dampfkraft.com\",\ndescription=\"UniDic packaged for Python\",\nlong_description=pathlib.Path('README.md').read_text('utf8'),\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/polm\/unidic-py\",\npackages=setuptools.find_packages(),\npackage_data={'unidic': ['dicdir\/*']},\n)\n"
    },
    {
        "package_name": "unify-0.5",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt unify.py",
        "setup.py": "#!\/usr\/bin\/env python\n\"\"\"Setup for unify.\"\"\"\n\nfrom __future__ import unicode_literals\n\nimport ast\n\nfrom setuptools import setup\n\n\ndef version():\n\"\"\"Return version string.\"\"\"\nwith open('unify.py') as input_file:\nfor line in input_file:\nif line.startswith('__version__'):\nreturn ast.parse(line).body[0].value.s\nreturn None\n\n\nwith open('README.rst') as readme:\nsetup(name='unify',\nversion=version(),\ndescription='Modifies strings to all use the same '\n'(single\/double) quote where possible.',\nlong_description=readme.read(),\nlicense='Expat License',\nauthor='Steven Myint',\nurl='https:\/\/github.com\/myint\/unify',\nclassifiers=['Intended Audience :: Developers',\n'Environment :: Console',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'License :: OSI Approved :: MIT License'],\nkeywords='strings, formatter, style',\npy_modules=['unify'],\nentry_points={\n'console_scripts': ['unify = unify:main']},\ninstall_requires=['untokenize'],\ntest_suite='test_unify')\n"
    },
    {
        "package_name": "Unihandecode-0.81",
        "file_list": "GPL-3 HACKING.txt Makefile MANIFEST.in mkdist.bat mkdist.sh PKG-INFO README.md requirements-dev.txt requirements.txt setup.cfg setup.py test_gencodemap.py test_unidecode.py test_unidecoder.py test_unihandecode.py test_unihandecode_advanced.py __init__.py UnicodeData.txt Unihan_Readings.txt unicodepoints.py unihan_conv.py __init__.py jadecoder.py krdecoder.py unidecoder.py vndecoder.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/python\n# derivered from unidecode setup.py\n\nfrom setuptools import Command, setup, find_packages\nfrom setuptools.command.install import install\nfrom distutils.command.build import build\n\nimport os,threading\nimport sys\nimport shutil\nimport unihandecode.gencodemap as gencodemap\n\nSUPPORTED_LANG=['kr','ja','zh','vn','yue']\n\ndef gen_map():\nunihan_source = os.path.join('unihandecode','data','Unihan_Readings.txt')\nfor lang in SUPPORTED_LANG:\ndest = os.path.join('unihandecode',lang+'codepoints.pickle')\nu = gencodemap.UnihanConv(lang)\nu.run(source = unihan_source, dest=dest)\n\ndef catdict(src_a, dst):\noutdict = open(dst,'wb')\nfor src_f in src_a:\nshutil.copyfileobj(open(os.path.join('unihandecode','data',src_f),'rb'), outdict)\noutdict.close()\n\ndef pre_build():\nu = gencodemap.Unicodepoints()\nu.run(os.path.join('unihandecode','unicodepoints.pickle'))\ngen_map()\n\nclass my_build(build):\ndef run(self):\nself.execute(pre_build, (),\nmsg=\"Running pre build task\")\nbuild.run(self)\n\nclass my_install(install):\ndef run(self):\nself.execute(pre_build, (),\nmsg=\"Running pre build task\")\ninstall.run(self) # run normal build command\n\ntests_require = ['nose','coverage','mock']\nif sys.version_info < (2, 7):\ntests_require.append('unittest2')\n\nsetup(name='Unihandecode',\nversion='0.81',\ndescription='US-ASCII transliterations of Unicode text',\nurl='https:\/\/github.com\/miurahr\/unihandecode\/',\nlicense='GPLv3\/Perl',\nlong_description=\"\"\"\nIt often happens that you have non-Roman text data in Unicode, but\nyou can't display it -- usually because you're trying to show it\nto a user via an application that doesn't support Unicode, or\nbecause the fonts you need aren't accessible. You could represent\nthe Unicode characters as \"???????\" or \"\\15BA\\15A0\\1610...\", but\nthat's nearly useless to the user who actually wants to read what\nthe text says.\n\nWhat Unihandecode provides is a function, 'decode(...)' that\ntakes Unihancode data and tries to represent it in ASCII characters \n(i.e., the universally displayable characters between 0x00 and 0x7F). \nThe representation is almost always an attempt at transliteration \n-- i.e., conveying, in Roman letters, the pronunciation expressed by \nthe text in some other writing system.\n\nFor example;\n>>>d = Unidecoder()\n>>>d.decode(u\"\\u5317\\u4EB0\")\n'Bei Jing'.\nd = Unidecoder(lang='ja')\n>>>d.decode(u\"\\u5317\\u4EB0\")\n'Pe King'\n\"\"\",\nauthor='Hioshi Miura',\nauthor_email='miurahr@linux.com',\npackages = ['unihandecode',\n'unihandecode.gencodemap'],\ninclude_package_data = True,\npackage_data = {'unihandecode': ['*.pickle.bz2']},\nprovides = [ 'unihandecode' ],\ninstall_requires = [ 'pykakasi', 'six' ],\ntest_suite = 'nose.collector',\ntests_require = tests_require,\ncmdclass = {\n#'install':my_install,\n'build':my_build}\n)\n"
    },
    {
        "package_name": "untokenize-0.1.1",
        "file_list": "MANIFEST.in PKG-INFO README.rst setup.py test_untokenize.py untokenize.py",
        "setup.py": "#!\/usr\/bin\/env python\n\n\"\"\"Setup for untokenize.\"\"\"\n\nimport ast\nfrom distutils import core\n\n\ndef version():\n\"\"\"Return version string.\"\"\"\nwith open('untokenize.py') as input_file:\nfor line in input_file:\nif line.startswith('__version__'):\nreturn ast.parse(line).body[0].value.s\n\n\nwith open('README.rst') as readme:\ncore.setup(name='untokenize',\nversion=version(),\ndescription='Transforms tokens into original source code '\n'(while preserving whitespace).',\nlong_description=readme.read(),\nlicense='Expat License',\nauthor='Steven Myint',\nurl='https:\/\/github.com\/myint\/untokenize',\nclassifiers=['Intended Audience :: Developers',\n'Environment :: Console',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'License :: OSI Approved :: MIT License'],\nkeywords='tokenize,untokenize,transform,generate',\npy_modules=['untokenize'])\n"
    },
    {
        "package_name": "url-normalize-1.4.3",
        "file_list": "LICENSE PKG-INFO pyproject.toml README.md setup.py tools.py url_normalize.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['url_normalize']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['six']\n\nsetup_kwargs = {\n'name': 'url-normalize',\n'version': '1.4.3',\n'description': 'URL normalization for Python',\n'long_description': 'url-normalize\\n=============\\n\\n[![Build Status](https:\/\/travis-ci.org\/niksite\/url-normalize.svg?branch=master)](https:\/\/travis-ci.org\/niksite\/url-normalize)\\n[![Coverage Status](https:\/\/coveralls.io\/repos\/github\/niksite\/url-normalize\/badge.svg?branch=master)](https:\/\/coveralls.io\/github\/niksite\/url-normalize?branch=master)\\n\\nURI Normalization function:\\n\\n* Take care of IDN domains.\\n* Always provide the URI scheme in lowercase characters.\\n* Always provide the host, if any, in lowercase characters.\\n* Only perform percent-encoding where it is essential.\\n* Always use uppercase A-through-F characters when percent-encoding.\\n* Prevent dot-segments appearing in non-relative URI paths.\\n* For schemes that define a default authority, use an empty authority if the default is desired.\\n* For schemes that define an empty path to be equivalent to a path of \"\/\", use \"\/\".\\n* For schemes that define a port, use an empty port if the default is desired\\n* All portions of the URI must be utf-8 encoded NFC from Unicode strings\\n\\nInspired by Sam Ruby\\'s [urlnorm.py](http:\/\/intertwingly.net\/blog\/2004\/08\/04\/Urlnorm)\\n\\nExample:\\n\\n```sh\\n$ pip install url-normalize\\nCollecting url-normalize\\n...\\nSuccessfully installed future-0.16.0 url-normalize-1.3.3\\n$ python\\nPython 3.6.1 (default, Jul 8 2017, 05:00:20)\\n[GCC 4.9.2] on linux\\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\\n> from url_normalize import url_normalize\\n> print(url_normalize(\\'www.foo.com:80\/foo\\'))\\n> https:\/\/www.foo.com\/foo\\n```\\n\\nHistory:\\n\\n* 1.4.3: Added LICENSE file\\n* 1.4.2: Added an optional param sort_query_params (True by default)\\n* 1.4.1: Added an optional param default_scheme to the url_normalize (\\'https\\' by default)\\n* 1.4.0: A bit of code refactoring and cleanup\\n* 1.3.3: Support empty string and double slash urls (\/\/domain.tld)\\n* 1.3.2: Same code support both Python 3 and Python 2.\\n* 1.3.1: Python 3 compatibility\\n* 1.2.1: PEP8, setup.py\\n* 1.1.2: support for shebang (#!) urls\\n* 1.1.1: using \\'http\\' schema by default when appropriate\\n* 1.1.0: added handling of IDN domains\\n* 1.0.0: code pep8\\n* 0.1.0: forked from Sam Ruby\\'s urlnorm.py\\n\\nLicense: MIT License\\n',\n'author': 'Nikolay Panov',\n'author_email': 'github@npanov.com',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/github.com\/niksite\/url-normalize',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'python_requires': '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "urlextract-1.6.0",
        "file_list": "CHANGELOG.rst conf.py index.rst urlextract.rst urlextract_cmd.rst urlextract_test.rst LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst requirements.txt setup.cfg setup.py conftest.py test_dns.py test_enclosure.py test_extract_email.py test_find_urls.py test_has_urls.py test_ignore_list.py test_ipv4.py test_limit.py test_localhost.py test_markdown.py test_permit_list.py test_preserveorder.py cachefile.py tlds-alpha-by-domain.txt urlextract_core.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nsetup for urlextract\n\n.. Created on 2016-07-29\n.. Licence MIT\n.. codeauthor:: Jan Lipovsk\u00fd <janlipovsky@gmail.com>, janlipovsky.cz\n.. contributors: https:\/\/github.com\/lipoja\/URLExtract\/graphs\/contributors\n\"\"\"\n\nfrom os.path import join, dirname\nfrom setuptools import setup, find_packages\n\nscript_dirname = join(dirname(__file__))\n\n# version of URLExtract\n# (do not forget to change it in urlextract_core.py as well)\n__version__ = \"1.6.0\"\n\n\ndef read(readme):\nreturn open(join(script_dirname, readme), \"rb\").read().decode(\"utf-8\")\n\n\nsetup(\nname=\"urlextract\",\nversion=__version__,\npy_modules=[\"urlextract\"],\nentry_points={\"console_scripts\": [\"urlextract = urlextract:_urlextract_cli\"]},\npackages=find_packages(exclude=[\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"]),\ninclude_package_data=True,\nkeywords=[\"url\", \"extract\", \"find\", \"finder\", \"collect\", \"link\", \"tld\", \"list\"],\nurl=\"https:\/\/github.com\/lipoja\/URLExtract\",\nproject_urls={\n\"Documentation\": \"https:\/\/urlextract.readthedocs.io\/en\/latest\/\",\n\"Source Code\": \"https:\/\/github.com\/lipoja\/URLExtract\",\n},\nlicense=\"MIT\",\nauthor=\"Jan Lipovsk\u00fd\",\nauthor_email=\"janlipovsky@gmail.com\",\ndescription=\"Collects and extracts URLs from given text.\",\nlong_description=read(\"README.rst\"),\nlong_description_content_type=\"text\/x-rst\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Text Processing\",\n\"Topic :: Text Processing :: Markup :: HTML\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\ninstall_requires=[\"idna\", \"uritools\", \"platformdirs\", \"filelock\"],\n)\n"
    },
    {
        "package_name": "urllib3-1.26.11",
        "file_list": "CHANGES.rst dev-requirements.txt advanced-usage.rst conf.py contributing.rst demo-button.png favicon.png learn-more-button.png logo.png logo.svg index.rst make.bat Makefile appengine.rst index.rst ntlmpool.rst pyopenssl.rst securetransport.rst socks.rst index.rst urllib3.connection.rst urllib3.connectionpool.rst urllib3.exceptions.rst urllib3.fields.rst urllib3.poolmanager.rst urllib3.request.rst urllib3.response.rst urllib3.util.rst requirements.txt sponsors.rst user-guide.rst v2-roadmap.rst banner.svg dark-logo.svg cacert.key cacert.pem README.rst server.crt server.key handlers.py proxy.py server.py testcase.py __init__.py LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py connection.py connectionpool.py appengine.py ntlmpool.py pyopenssl.py securetransport.py socks.py _appengine_environ.py bindings.py low_level.py __init__.py __init__.py exceptions.py fields.py filepost.py makefile.py __init__.py six.py __init__.py poolmanager.py request.py response.py connection.py proxy.py queue.py request.py response.py retry.py ssltransport.py ssl_.py ssl_match_hostname.py timeout.py url.py wait.py __init__.py _collections.py _version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt conftest.py test_gae_manager.py test_urlfetch.py __init__.py benchmark.py conftest.py duplicate_san.pem test_pyopenssl.py test_pyopenssl_dependencies.py test_securetransport.py test_socks.py __init__.py port_helpers.py socketpair_helper.py test_collections.py test_compatibility.py test_connection.py test_connectionpool.py test_exceptions.py test_fields.py test_filepost.py test_no_ssl.py test_poolmanager.py test_proxymanager.py test_queue_monkeypatch.py test_response.py test_retry.py test_retry_deprecated.py test_ssl.py test_ssltransport.py test_util.py test_wait.py tz_stub.py test_chunked_transfer.py test_connectionpool.py test_https.py test_no_ssl.py test_poolmanager.py test_proxy_poolmanager.py test_socketlevel.py __init__.py __init__.py",
        "setup.py": "#!\/usr\/bin\/env python\n# This file is protected via CODEOWNERS\n\nimport codecs\nimport os\nimport re\n\nfrom setuptools import setup\n\nbase_path = os.path.dirname(__file__)\n\n# Get the version (borrowed from SQLAlchemy)\nwith open(os.path.join(base_path, \"src\", \"urllib3\", \"_version.py\")) as fp:\nVERSION = (\nre.compile(r\"\"\".*__version__ = [\"'](.*?)['\"]\"\"\", re.S).match(fp.read()).group(1)\n)\n\n\nwith codecs.open(\"README.rst\", encoding=\"utf-8\") as fp:\n# Remove reST raw directive from README as they're not allowed on PyPI\n# Those blocks start with a newline and continue until the next newline\nmode = None\nlines = []\nfor line in fp:\nif line.startswith(\".. raw::\"):\nmode = \"ignore_nl\"\nelif line == \"\\n\":\nmode = \"wait_nl\" if mode == \"ignore_nl\" else None\n\nif mode is None:\nlines.append(line)\nreadme = \"\".join(lines)\n\nwith codecs.open(\"CHANGES.rst\", encoding=\"utf-8\") as fp:\nchanges = fp.read()\n\nversion = VERSION\n\nsetup(\nname=\"urllib3\",\nversion=version,\ndescription=\"HTTP library with thread-safe connection pooling, file post, and more.\",\nlong_description=u\"\\n\\n\".join([readme, changes]),\nlong_description_content_type=\"text\/x-rst\",\nclassifiers=[\n\"Environment :: Web Environment\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3.11\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Topic :: Internet :: WWW\/HTTP\",\n\"Topic :: Software Development :: Libraries\",\n],\nkeywords=\"urllib httplib threadsafe filepost http https ssl pooling\",\nauthor=\"Andrey Petrov\",\nauthor_email=\"andrey.petrov@shazow.net\",\nurl=\"https:\/\/urllib3.readthedocs.io\/\",\nproject_urls={\n\"Documentation\": \"https:\/\/urllib3.readthedocs.io\/\",\n\"Code\": \"https:\/\/github.com\/urllib3\/urllib3\",\n\"Issue tracker\": \"https:\/\/github.com\/urllib3\/urllib3\/issues\",\n},\nlicense=\"MIT\",\npackages=[\n\"urllib3\",\n\"urllib3.packages\",\n\"urllib3.packages.backports\",\n\"urllib3.contrib\",\n\"urllib3.contrib._securetransport\",\n\"urllib3.util\",\n],\npackage_dir={\"\": \"src\"},\nrequires=[],\npython_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4\",\nextras_require={\n\"brotli\": [\n\"brotli>=1.0.9; (os_name != 'nt' or python_version >= '3') and platform_python_implementation == 'CPython'\",\n\"brotlicffi>=0.8.0; (os_name != 'nt' or python_version >= '3') and platform_python_implementation != 'CPython'\",\n\"brotlipy>=0.6.0; os_name == 'nt' and python_version < '3'\",\n],\n\"secure\": [\n\"pyOpenSSL>=0.14\",\n\"cryptography>=1.3.4\",\n\"idna>=2.0.0\",\n\"certifi\",\n\"ipaddress; python_version=='2.7'\",\n],\n\"socks\": [\"PySocks>=1.5.6,<2.0,!=1.5.7\"],\n},\n)\n"
    },
    {
        "package_name": "urwid-2.1.2",
        "file_list": "COPYING changelog.rst conf.py bigtext.py bigtext.py.xdotool bigtext1.png bigtext2.png bigtext3.png browse.py browse.py.xdotool browse1.png browse2.png edit.py edit.py.xdotool edit1.png edit2.png graph.py graph.py.xdotool graph1.png graph2.png index.rst palette_test.py palette_test.py.xdotool palette_test1.png palette_test2.png pop_up.py pop_up.py.xdotool pop_up1.png pop_up2.png real_browse.py real_edit.py subproc.py subproc.py.xdotool subproc1.png subproc2.png subproc2.py tour.py tour.py.xdotool tour1.png tour2.png index.rst Makefile bright_combinations.py bright_combinations.py.xdotool bright_combinations1.png canvascache.rst displayattributes.rst displaymodules.rst encodings.rst display_modules.png introduction.png urwid_widgets_1.png urwid_widgets_2.png widget_layout.png index.rst mainloop.rst overview.rst safe_combinations.py safe_combinations.py.xdotool safe_combinations1.png textlayout.rst userinput.rst wanat.py wanat_multi.py wcur1.py wcur2.py widgets.rst wmod.py wsel.py attrspec.rst canvas.rst command_map.rst constants.rst deprecated.rst display_modules.rst exceptions.rst global_settings.rst index.rst list_walkers.rst main_loop.rst meta.rst signals.rst text_layout.rst widget.rst compile_pngs.sh screenshots.sh indexcontent.html indexsidebar.html localtoc.html adventure.py adventure.py.xdotool adventure1.png adventure2.png adventure3.png adventure4.png attr.py attr.py.xdotool attr1.png attr2.png attr3.png attr4.png cmenu.py cmenu.py.xdotool cmenu1.png cmenu2.png cmenu3.png cmenu4.png highcolors.py highcolors.py.xdotool highcolors1.png hmenu.py hmenu.py.xdotool hmenu1.png hmenu2.png hmenu3.png hmenu4.png index.rst input.py input.py.xdotool input1.png input2.png input3.png input4.png input5.png menu25.png minimal.py minimal.py.xdotool minimal1.png multiple.py multiple.py.xdotool multiple1.png multiple2.png multiple3.png multiple4.png qa.py qa.py.xdotool qa1.png qa2.png qa3.png sig.py sig.py.xdotool sig1.png sig2.png sig3.png sig4.png smenu.py smenu.py.xdotool smenu1.png smenu2.png smenu3.png urwid-logo.png asyncio_socket_server.py bigtext.py browse.py calc.py dialog.py edit.py fib.py graph.py input_test.py lcd_cf635.py palette_test.py pop_up.py subproc.py subproc2.py terminal.py tour.py treesample.py twisted_serve_ssh.py twisted_serve_ssh.tac MANIFEST.in PKG-INFO README.rst setup.cfg setup.py str_util.c canvas.py command_map.py compat.py container.py curses_display.py decoration.py display_common.py escape.py font.py graphics.py html_fragment.py lcd_display.py listbox.py main_loop.py monitored_list.py numedit.py old_str_util.py raw_display.py signals.py split_repr.py test_canvas.py test_container.py test_decoration.py test_doctests.py test_escapes.py test_event_loops.py test_graphics.py test_listbox.py test_str_util.py test_text_layout.py test_util.py test_vterm.py test_widget.py util.py __init__.py text_layout.py treetools.py util.py version.py vterm.py web_display.py widget.py wimp.py _async_kw_event_loop.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n#\n# Urwid setup.py exports the useful bits\n# Copyright (C) 2004-2014 Ian Ward\n#\n# This library is free software; you can redistribute it and\/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation; either\n# version 2.1 of the License, or (at your option) any later version.\n#\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n#\n# Urwid web site: http:\/\/excess.org\/urwid\/\n\ntry:\nPYTHON3 = not str is bytes\nexcept NameError:\nPYTHON3 = False\n\ntry:\nfrom setuptools import setup, Extension # distribute required for Python 3\nhave_setuptools = True\nexcept ImportError:\nif PYTHON3:\nraise\nfrom distutils.core import setup, Extension\nhave_setuptools = False\n\nimport os\n\nexec(open(os.path.join(\"urwid\",\"version.py\")).read())\nrelease = __version__\n\nsetup_d = {\n'name':\"urwid\",\n'version':release,\n'author':\"Ian Ward\",\n'author_email':\"ian@excess.org\",\n'ext_modules':[Extension('urwid.str_util', sources=['source\/str_util.c'])],\n'packages':['urwid', 'urwid.tests'],\n'url':\"http:\/\/urwid.org\/\",\n'license':\"LGPL\",\n'keywords':\"curses ui widget scroll listbox user interface text layout console ncurses\",\n'platforms':\"unix-like\",\n'description': \"A full-featured console (xterm et al.) user interface library\",\n'long_description':open(\"README.rst\").read().split('.. content-start\\n',1)[1],\n'classifiers':[\n\"Development Status :: 5 - Production\/Stable\",\n\"Environment :: Console\",\n\"Environment :: Console :: Curses\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)\",\n\"Operating System :: POSIX\",\n\"Operating System :: Unix\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Topic :: Software Development :: Widget Sets\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n],\n}\n\nif have_setuptools:\nsetup_d['zip_safe'] = False\nsetup_d['test_suite'] = 'urwid.tests'\n\nif __name__ == \"__main__\":\ntry:\nsetup(**setup_d)\nexcept (IOError, SystemExit) as e:\nimport sys\nif \"test\" in sys.argv:\nraise\nimport traceback\ntraceback.print_exc()\nprint(\"Couldn't build the extension module, trying without it...\")\ndel setup_d[\"ext_modules\"]\nsetup(**setup_d)\n"
    },
    {
        "package_name": "usaddress-0.5.10",
        "file_list": "PKG-INFO setup.cfg setup.py usaddr.crfsuite __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "try:\nfrom setuptools import setup\nexcept ImportError:\nraise ImportError(\n\"setuptools module required, please go to \"\n\"https:\/\/pypi.python.org\/pypi\/setuptools and follow the instructions \"\n\"for installing setuptools\"\n)\n\nsetup(\nversion='0.5.10',\nurl='https:\/\/github.com\/datamade\/usaddress',\ndescription='Parse US addresses using conditional random fields',\nname='usaddress',\npackages=['usaddress'],\npackage_data={'usaddress': ['usaddr.crfsuite']},\nlicense='The MIT License: http:\/\/www.opensource.org\/licenses\/mit-license.php',\ninstall_requires=['python-crfsuite>=0.7',\n'future>=0.14',\n'probableparsing'],\nclassifiers=[\n'Development Status :: 3 - Alpha',\n'Intended Audience :: Developers',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: MIT License',\n'Natural Language :: English',\n'Operating System :: MacOS :: MacOS X',\n'Operating System :: Microsoft :: Windows',\n'Operating System :: POSIX',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 2 :: Only',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Scientific\/Engineering',\n'Topic :: Scientific\/Engineering :: Information Analysis'],\nlong_description=\"\"\"\nusaddress is a python library for parsing unstructured address strings into\naddress components, using advanced NLP methods.\n\nFrom the python interpreter:\n\n>>> import usaddress\n>>> usaddress.parse('123 Main St. Suite 100 Chicago, IL')\n[('123', 'AddressNumber'),\n('Main', 'StreetName'),\n('St.', 'StreetNamePostType'),\n('Suite', 'OccupancyType'),\n('100', 'OccupancyIdentifier'),\n('Chicago,', 'PlaceName'),\n('IL', 'StateName')]\n\"\"\"\n)\n"
    },
    {
        "package_name": "uvicorn-0.18.2",
        "file_list": "LICENSE.md MANIFEST.in PKG-INFO README.md setup.cfg setup.py config.py importer.py off.py on.py __init__.py logging.py asyncio.py auto.py uvloop.py __init__.py main.py asgi2.py debug.py message_logger.py proxy_headers.py wsgi.py __init__.py auto.py flow_control.py h11_impl.py httptools_impl.py __init__.py utils.py auto.py websockets_impl.py wsproto_impl.py __init__.py __init__.py server.py basereload.py multiprocess.py statreload.py watchfilesreload.py watchgodreload.py __init__.py workers.py _subprocess.py _types.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport re\n\nfrom setuptools import setup\n\n\ndef get_version(package):\n\"\"\"\nReturn package version as listed in `__version__` in `init.py`.\n\"\"\"\npath = os.path.join(package, \"__init__.py\")\ninit_py = open(path, \"r\", encoding=\"utf8\").read()\nreturn re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", init_py).group(1)\n\n\ndef get_long_description():\n\"\"\"\nReturn the README.\n\"\"\"\nreturn open(\"README.md\", \"r\", encoding=\"utf8\").read()\n\n\ndef get_packages(package):\n\"\"\"\nReturn root package and all sub-packages.\n\"\"\"\nreturn [\ndirpath\nfor dirpath, dirnames, filenames in os.walk(package)\nif os.path.exists(os.path.join(dirpath, \"__init__.py\"))\n]\n\n\nenv_marker_cpython = (\n\"sys_platform != 'win32'\"\n\" and (sys_platform != 'cygwin'\"\n\" and platform_python_implementation != 'PyPy')\"\n)\n\nenv_marker_win = \"sys_platform == 'win32'\"\nenv_marker_below_38 = \"python_version < '3.8'\"\n\nminimal_requirements = [\n\"click>=7.0\",\n\"h11>=0.8\",\n\"typing-extensions;\" + env_marker_below_38,\n]\n\n\nextra_requirements = [\n\"websockets>=10.0\",\n\"httptools>=0.4.0\",\n\"uvloop>=0.14.0,!=0.15.0,!=0.15.1; \" + env_marker_cpython,\n\"colorama>=0.4;\" + env_marker_win,\n\"watchfiles>=0.13\",\n\"python-dotenv>=0.13\",\n\"PyYAML>=5.1\",\n]\n\n\nsetup(\nname=\"uvicorn\",\nversion=get_version(\"uvicorn\"),\nurl=\"https:\/\/www.uvicorn.org\/\",\nlicense=\"BSD\",\ndescription=\"The lightning-fast ASGI server.\",\nlong_description=get_long_description(),\nlong_description_content_type=\"text\/markdown\",\nauthor=\"Tom Christie\",\nauthor_email=\"tom@tomchristie.com\",\npackages=get_packages(\"uvicorn\"),\npython_requires=\">=3.7\",\ninstall_requires=minimal_requirements,\nextras_require={\"standard\": extra_requirements},\ninclude_package_data=True,\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Environment :: Web Environment\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: BSD License\",\n\"Operating System :: OS Independent\",\n\"Topic :: Internet :: WWW\/HTTP\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n],\nentry_points=\"\"\"\n[console_scripts]\nuvicorn=uvicorn.main:main\n\"\"\",\nproject_urls={\n\"Funding\": \"https:\/\/github.com\/sponsors\/encode\",\n\"Source\": \"https:\/\/github.com\/encode\/uvicorn\",\n\"Changelog\": \"https:\/\/github.com\/encode\/uvicorn\/blob\/master\/CHANGELOG.md\",\n},\n)\n"
    },
    {
        "package_name": "vaderSentiment-3.3.2",
        "file_list": "hutto_ICWSM_2014.tar.gz LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py emoji_utf8_lexicon.txt vaderSentiment.py vader_lexicon.txt __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt __init__.py",
        "setup.py": "import codecs\nimport os\nfrom setuptools import setup, find_packages\n\nHERE = os.path.abspath(os.path.dirname(__file__))\ndef read(*parts):\n\"\"\"\nBuild an absolute path from *parts* and and return the contents of the\nresulting file. Assume UTF-8 encoding.\n\"\"\"\nwith codecs.open(os.path.join(HERE, *parts), \"rb\", \"utf-8\") as f:\nreturn f.read()\n\nsetup(\nname = 'vaderSentiment',\n#packages = ['vaderSentiment'], # this must be the same as the name above\npackages = find_packages(exclude=['tests*']), # a better way to do it than the line above -- this way no typo\/transpo errors\ninclude_package_data=True,\nversion = '3.3.2',\ndescription = 'VADER Sentiment Analysis. VADER (Valence Aware Dictionary and sEntiment Reasoner) is a lexicon and rule-based sentiment analysis tool that is specifically attuned to sentiments expressed in social media, and works well on texts from other domains.',\nlong_description = read(\"README.rst\"),\nlong_description_content_type = 'text\/x-rst',\nauthor = 'C.J. Hutto',\nauthor_email = 'cjhutto@gatech.edu',\nlicense = 'MIT License',\nurl = 'https:\/\/github.com\/cjhutto\/vaderSentiment', # use the URL to the github repo\ndownload_url = 'https:\/\/github.com\/cjhutto\/vaderSentiment\/archive\/master.zip', \ninstall_requires = ['requests'],\nkeywords = ['vader', 'sentiment', 'analysis', 'opinion', 'mining', 'nlp', 'text', 'data', \n'text analysis', 'opinion analysis', 'sentiment analysis', 'text mining', 'twitter sentiment',\n'opinion mining', 'social media', 'twitter', 'social', 'media'], # arbitrary keywords\nclassifiers = ['Development Status :: 5 - Production\/Stable', 'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: MIT License', 'Natural Language :: English',\n'Programming Language :: Python :: 3.5', 'Topic :: Scientific\/Engineering :: Artificial Intelligence',\n'Topic :: Scientific\/Engineering :: Information Analysis', 'Topic :: Text Processing :: Linguistic',\n'Topic :: Text Processing :: General'],\n)"
    },
    {
        "package_name": "vaex-ml-0.18.0",
        "file_list": "LICENSE.txt MANIFEST.in PKG-INFO setup.cfg setup.py catboost.py cluster.py generate.py annoy.py pygbm.py river.py __init__.py lightgbm.py linear_model.py metrics.py pipeline.py sklearn.py spec.json spec.py state.py tensorflow.py transformations.py ui.py xgboost.py _version.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "import os\nimport imp\nfrom setuptools import setup\n\ndirname = os.path.dirname(__file__)\npath_version = os.path.join(dirname, 'vaex\/ml\/_version.py')\nversion = imp.load_source('version', path_version)\n\nname = 'vaex'\nauthor = 'Jovan Veljanoski'\nauthor_email= 'jovan.veljanoski@gmail.com'\nlicense = 'MIT'\nversion = version.__version__\nurl = 'https:\/\/www.github.com\/vaexio\/vaex'\ninstall_requires_ml = ['vaex-core>=4.8.0,<5', 'numba', 'traitlets', 'jinja2']\n\nsetup(name=name + '-ml',\nversion=version,\ndescription='Machine learning support for vaex',\nurl=url,\nauthor=author,\nauthor_email=author_email,\ninstall_requires=install_requires_ml,\nextras_require={'all': ['tensorflow>=2.1.0', 'tensorflow-io>=0.12.0']},\nlicense=license,\npackages=['vaex.ml', 'vaex.ml.incubator'],\ninclude_package_data=True,\nzip_safe=False,\nentry_points={'vaex.dataframe.accessor': ['ml = vaex.ml:DataFrameAccessorML',\n'ml.tensorflow = vaex.ml.tensorflow:DataFrameAccessorTensorflow',\n'ml.metrics = vaex.ml.metrics:DataFrameAccessorMetrics']}\n)\n"
    },
    {
        "package_name": "validate_email-1.3",
        "file_list": "AUTHORS LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt validate_email.py",
        "setup.py": "from setuptools import setup, find_packages\n\nsetup(name='validate_email',\nversion = '1.3',\ndownload_url = 'git@github.com:syrusakbary\/validate_email.git',\npy_modules = ('validate_email',),\nauthor = 'Syrus Akbary',\nauthor_email = 'me@syrusakbary.com',\ndescription = 'Validate_email verify if an email address is valid and really exists.',\nlong_description=open('README.rst').read(),\nkeywords = 'email validation verification mx verify',\nurl = 'http:\/\/github.com\/syrusakbary\/validate_email',\nlicense = 'LGPL',\n)\n"
    },
    {
        "package_name": "validators-0.20.0",
        "file_list": "CHANGES.rst conf.py index.rst make.bat Makefile LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_es.py test_fi.py __init__.py test_between.py test_btc_address.py test_card.py test_domain.py test_email.py test_extremes.py test_iban.py test_ipv4.py test_ipv4_cidr.py test_ipv6.py test_ipv6_cidr.py test_length.py test_mac_address.py test_md5.py test_sha1.py test_sha224.py test_sha256.py test_sha512.py test_slug.py test_url.py test_uuid.py test_validation_failure.py __init__.py between.py btc_address.py card.py domain.py email.py extremes.py hashes.py es.py fi.py __init__.py iban.py ip_address.py length.py mac_address.py slug.py truthy.py url.py utils.py uuid.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nvalidators\n----------\n\nPython Data Validation for Humans\u2122.\n\"\"\"\n\nfrom setuptools import setup, find_packages\nimport os\nimport re\nimport sys\n\n\nPY3 = sys.version_info[0] == 3\nHERE = os.path.dirname(os.path.abspath(__file__))\n\n\ndef get_version():\nfilename = os.path.join(HERE, 'validators', '__init__.py')\nwith open(filename) as f:\ncontents = f.read()\npattern = r\"^__version__ = '(.*?)'$\"\nreturn re.search(pattern, contents, re.MULTILINE).group(1)\n\n\nextras_require = {\n'test': [\n'pytest>=2.2.3',\n'flake8>=2.4.0',\n'isort>=4.2.2'\n],\n}\n\ninstall_requires = [\n'decorator>=3.4.0',\n]\n\nsetup(\nname='validators',\nversion=get_version(),\nurl='https:\/\/github.com\/kvesteri\/validators',\nlicense='MIT',\nauthor='Konsta Vesterinen',\nauthor_email='konsta@fastmonkeys.com',\ndescription='Python Data Validation for Humans\u2122.',\nlong_description=__doc__,\npackages=find_packages('.', exclude=['tests', 'tests.*']),\nzip_safe=False,\ninclude_package_data=True,\nplatforms='any',\ninstall_requires=install_requires,\nbuild_requires=install_requires,\nextras_require=extras_require,\nclassifiers=[\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n'Topic :: Software Development :: Libraries :: Python Modules'\n],\npython_requires='>=3.4'\n)\n"
    },
    {
        "package_name": "versioneer-0.23",
        "file_list": "details.md developers.md LICENSE MANIFEST.in NOTES PKG-INFO README.md setup.cfg setup.py cmdclass.py from_file.py from_parentdir.py get_versions.py from_keywords.py from_vcs.py install.py long_get_versions.py long_header.py __init__.py header.py installer.py render.py setupfunc.py subprocess_helper.py __init__.py rundemo MANIFEST.in README setup.cfg setup.py __init__.py fake.py MANIFEST.in README setup.cfg setup.py placeholder dummy rundemo-template MANIFEST.in README setup.cfg setup.py main.py __init__.py MANIFEST.in README setup.cfg setup.py main.py __init__.py main.py __init__.py MANIFEST.in README setup.cfg setup.py MANIFEST.in README setup.cfg setup.py __init__.py common.py test_git.py test_invocations.py run_pyflakes_src.py test_config.py test_file.py test_render.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport os, base64, tempfile, io\nfrom pathlib import Path\nfrom setuptools import setup, Command\nfrom setuptools.command.build_py import build_py\nfrom setuptools.command.develop import develop\n\nLONG = Path.read_text(Path(__file__).parent \/ \"README.md\")\n\n# as nice as it'd be to versioneer ourselves, that sounds messy.\nVERSION = \"0.23\"\n\n\ndef ver(s):\nreturn s.replace(\"@VERSIONEER-VERSION@\", VERSION)\n\ndef get(fn, add_ver=False, unquote=False, do_strip=False, do_readme=False):\nwith open(fn) as f:\ntext = f.read()\n\nif add_ver:\ntext = ver(text)\nif unquote:\ntext = text.replace(\"%\", \"%%\")\nif do_strip:\ntext = \"\".join(line for line in text.splitlines(keepends=True)\nif not line.endswith(\"# --STRIP DURING BUILD\\n\"))\nif do_readme:\ntext = text.replace(\"@README@\", get(\"README.md\"))\nreturn text\n\ndef get_vcs_list():\nproject_path = Path(__file__).absolute().parent \/ \"src\"\nreturn [filename\nfor filename\nin os.listdir(str(project_path))\nif Path.is_dir(project_path \/ filename) and filename != \"__pycache__\"]\n\ndef generate_long_version_py(VCS):\ns = io.StringIO()\ns.write(get(f\"src\/{VCS}\/long_header.py\", add_ver=True, do_strip=True))\nfor piece in [\"src\/subprocess_helper.py\",\n\"src\/from_parentdir.py\",\nf\"src\/{VCS}\/from_keywords.py\",\nf\"src\/{VCS}\/from_vcs.py\",\n\"src\/render.py\",\nf\"src\/{VCS}\/long_get_versions.py\"]:\ns.write(get(piece, unquote=True, do_strip=True))\nreturn s.getvalue()\n\ndef generate_versioneer_py():\ns = io.StringIO()\ns.write(get(\"src\/header.py\", add_ver=True, do_readme=True, do_strip=True))\ns.write(get(\"src\/subprocess_helper.py\", do_strip=True))\n\nfor VCS in get_vcs_list():\ns.write(f\"LONG_VERSION_PY['{VCS}'] = r'''\\n\")\ns.write(generate_long_version_py(VCS))\ns.write(\"'''\\n\")\ns.write(\"\\n\\n\")\n\ns.write(get(f\"src\/{VCS}\/from_keywords.py\", do_strip=True))\ns.write(get(f\"src\/{VCS}\/from_vcs.py\", do_strip=True))\n\ns.write(get(f\"src\/{VCS}\/install.py\", do_strip=True))\n\ns.write(get(\"src\/from_parentdir.py\", do_strip=True))\ns.write(get(\"src\/from_file.py\", add_ver=True, do_strip=True))\ns.write(get(\"src\/render.py\", do_strip=True))\ns.write(get(\"src\/get_versions.py\", do_strip=True))\ns.write(get(\"src\/cmdclass.py\", do_strip=True))\ns.write(get(\"src\/setupfunc.py\", do_strip=True))\n\nreturn s.getvalue().encode(\"utf-8\")\n\n\nclass make_versioneer(Command):\ndescription = \"create standalone versioneer.py\"\nuser_options = []\nboolean_options = []\ndef initialize_options(self):\npass\ndef finalize_options(self):\npass\ndef run(self):\nwith open(\"versioneer.py\", \"w\") as f:\nf.write(generate_versioneer_py().decode(\"utf8\"))\nreturn 0\n\nclass make_long_version_py_git(Command):\ndescription = \"create standalone _version.py (for git)\"\nuser_options = []\nboolean_options = []\ndef initialize_options(self):\npass\ndef finalize_options(self):\npass\ndef run(self):\nassert os.path.exists(\"versioneer.py\")\nlong_version = generate_long_version_py(\"git\")\nwith open(\"git_version.py\", \"w\") as f:\nf.write(long_version %\n{\"DOLLAR\": \"$\",\n\"STYLE\": \"pep440\",\n\"TAG_PREFIX\": \"tag-\",\n\"PARENTDIR_PREFIX\": \"parentdir_prefix\",\n\"VERSIONFILE_SOURCE\": \"versionfile_source\",\n})\nreturn 0\n\nclass my_build_py(build_py):\ndef run(self):\nv = generate_versioneer_py()\nv_b64 = base64.b64encode(v).decode(\"ascii\")\nlines = [v_b64[i:i+60] for i in range(0, len(v_b64), 60)]\nv_b64 = \"\\n\".join(lines)+\"\\n\"\n\nwith open(\"src\/installer.py\") as f:\ns = f.read()\ns = ver(s.replace(\"@VERSIONEER-INSTALLER@\", v_b64))\n\nwith tempfile.TemporaryDirectory() as tempdir:\ninstaller = os.path.join(tempdir, \"versioneer.py\")\nwith open(installer, \"w\") as f:\nf.write(s)\n\nself.py_modules = [os.path.splitext(os.path.basename(installer))[0]]\nself.package_dir.update({'': os.path.dirname(installer)})\nrc = build_py.run(self)\nreturn rc\n\n# The structure of versioneer, with its components that are compiled into a single file,\n# makes it unsuitable for development mode.\nclass develop(develop):\ndef run(self):\nraise RuntimeError(\"Versioneer cannot be installed in developer\/editable mode.\")\n\n\nsetup(\nname = \"versioneer\",\nlicense = \"CC0-1.0\",\nversion = VERSION,\ndescription = \"Easy VCS-based management of project version strings\",\nauthor = \"Brian Warner\",\nauthor_email = \"warner-versioneer@lothar.com\",\nurl = \"https:\/\/github.com\/python-versioneer\/python-versioneer\",\n# \"fake\" is replaced with versioneer-installer in build_scripts. We need\n# a non-empty list to provoke \"setup.py build\" into making scripts,\n# otherwise it skips that step.\npy_modules = [\"fake\"],\nentry_points={\n'console_scripts': [\n'versioneer = versioneer:main',\n],\n},\nlong_description=LONG,\nlong_description_content_type=\"text\/markdown\",\ncmdclass = { \"build_py\": my_build_py,\n\"make_versioneer\": make_versioneer,\n\"make_long_version_py_git\": make_long_version_py_git,\n\"develop\": develop,\n},\npython_requires=\">=3.7\",\nclassifiers=[\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication\",\n],\n)\n"
    },
    {
        "package_name": "vine-5.0.0",
        "file_list": "Changelog changelog.rst conf.py celery_128.png favicon.ico introduction.txt index.rst make.bat Makefile index.rst vine.abstract.rst vine.funtools.rst vine.promises.rst vine.synchronization.rst vine.utils.rst readme.txt .keep sidebardonations.html LICENSE MANIFEST.in PKG-INFO README.rst docs.txt pkgutils.txt test-ci.txt test.txt setup.cfg setup.py conftest.py test_abstract.py test_funtools.py test_promises.py test_synchronization.py __init__.py __init__.py abstract.py funtools.py promises.py synchronization.py utils.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\nimport os\nimport re\nimport sys\nimport codecs\n\nimport setuptools\nimport setuptools.command.test\n\nNAME = 'vine'\n\n# -*- Classifiers -*-\n\nclasses = \"\"\"\nDevelopment Status :: 5 - Production\/Stable\nProgramming Language :: Python\nProgramming Language :: Python :: 3\nProgramming Language :: Python :: 3.6\nProgramming Language :: Python :: 3.7\nProgramming Language :: Python :: 3.8\nProgramming Language :: Python :: 3 :: Only\nProgramming Language :: Python :: Implementation :: CPython\nProgramming Language :: Python :: Implementation :: PyPy\nLicense :: OSI Approved :: BSD License\nIntended Audience :: Developers\nOperating System :: OS Independent\n\"\"\"\nclassifiers = [s.strip() for s in classes.split('\\n') if s]\n\n# -*- Distribution Meta -*-\n\nre_meta = re.compile(r'__(\\w+?)__\\s*=\\s*(.*)')\nre_doc = re.compile(r'^\"\"\"(.+?)\"\"\"')\n\n\ndef add_default(m):\nattr_name, attr_value = m.groups()\nreturn ((attr_name, attr_value.strip(\"\\\"'\")),)\n\n\ndef add_doc(m):\nreturn (('doc', m.groups()[0]),)\n\npats = {re_meta: add_default,\nre_doc: add_doc}\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, 'vine', '__init__.py')) as meta_fh:\nmeta = {}\nfor line in meta_fh:\nif line.strip() == '# -eof meta-':\nbreak\nfor pattern, handler in pats.items():\nm = pattern.match(line.strip())\nif m:\nmeta.update(handler(m))\n\n\n# -*- Installation Requires -*-\n\npy_version = sys.version_info\nis_jython = sys.platform.startswith('java')\nis_pypy = hasattr(sys, 'pypy_version_info')\n\n\ndef strip_comments(l):\nreturn l.split('#', 1)[0].strip()\n\n\ndef reqs(f):\nreturn filter(None, [strip_comments(l) for l in open(\nos.path.join(os.getcwd(), 'requirements', f)).readlines()])\n\n# -*- Long Description -*-\n\nif os.path.exists('README.rst'):\nlong_description = codecs.open('README.rst', 'r', 'utf-8').read()\nelse:\nlong_description = 'See https:\/\/pypi.org\/project\/vine\/'\n\n# -*- Entry Points -*- #\n\n# -*- %%% -*-\n\n\nclass pytest(setuptools.command.test.test):\nuser_options = [('pytest-args=', 'a', 'Arguments to pass to py.test')]\n\ndef initialize_options(self):\nsetuptools.command.test.test.initialize_options(self)\nself.pytest_args = []\n\ndef run_tests(self):\nimport pytest\nsys.exit(pytest.main(self.pytest_args))\n\nsetuptools.setup(\nname=NAME,\npackages=setuptools.find_packages(exclude=['t', 't.*']),\nversion=meta['version'],\ndescription=meta['doc'],\nlong_description=long_description,\nkeywords='promise promises lazy future futures',\nauthor=meta['author'],\nauthor_email=meta['contact'],\nurl=meta['homepage'],\nplatforms=['any'],\nclassifiers=classifiers,\nlicense='BSD',\npython_requires=\">=3.6\",\ninstall_requires=[],\ntests_require=reqs('test.txt'),\ncmdclass={'test': pytest},\nzip_safe=False,\ninclude_package_data=False,\n)\n"
    },
    {
        "package_name": "virtualenvwrapper-4.8.4",
        "file_list": "AUTHORS ChangeLog command_ref.html design.html developers.html extensions.html glossary.html history.html hooks.html index.html install.html plugins.html projects.html scripts.html search.html searchindex.js tips.html command_ref.rst.txt design.rst.txt developers.rst.txt extensions.rst.txt glossary.rst.txt history.rst.txt hooks.rst.txt index.rst.txt install.rst.txt plugins.rst.txt projects.rst.txt scripts.rst.txt tips.rst.txt basic.css classic.css comment-bright.png comment-close.png comment.png default.css doctools.js documentation_options.js down-pressed.png down.png file.png jquery-3.2.1.js jquery.js language_data.js minus.png plus.png pygments.css searchtools.js sidebar.js underscore-1.3.1.js underscore.js up-pressed.png up.png websupport.js Makefile requirements.txt command_ref.rst conf.py design.rst developers.rst extensions.rst glossary.rst history.rst hooks.rst index.rst install.rst plugins.rst projects.rst scripts.rst tips.rst spelling_wordlist.txt LICENSE Makefile MANIFEST.in PKG-INFO README.es.rst README.ja.rst README.txt requirements.txt setup.cfg setup.py manual_test_install.sh run_tests setup.sh shunit2 test.sh setup.py testscript.py main.py __init__.py setup.py test_add2virtualenv.sh test_allvirtualenv.sh test_cd.sh test_cd_alias.sh test_cd_space_in_name.sh test_cp.sh test_cpvirtualenv.sh test_deactivate.sh test_derive_workon_home.sh test_dir_stack.sh test_expandpath.sh test_hook_dir.sh test_lazy.sh test_lazy_extending.sh test_lazy_loaded.sh test_lazy_run.sh test_log_file.sh test_ls.sh test_mktmpenv.sh test_mkvirtualenv.sh test_mkvirtualenv_associate.sh test_mkvirtualenv_install.sh test_mkvirtualenv_requirements.sh test_project.sh test_project_activate.sh test_project_cd.sh test_project_mk.sh test_project_templates.sh test_rmvirtualenv.sh test_run_hook.sh test_setvirtualenvproject.sh test_support.sh test_tempfile.sh test_toggleglobalsitepackages.sh test_virtualenvwrapper.sh test_wipeenv.sh test_workon.sh tox.ini hook_loader.py project.py user_scripts.py __init__.py dependency_links.txt entry_points.txt namespace_packages.txt pbr.json PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe virtualenvwrapper.sh virtualenvwrapper_lazy.sh",
        "setup.py": "# Test package for virtualenvwrapper tests\nfrom setuptools import setup\n\nversion = '1.0'\n\nsetup(\nname='testpackage',\nversion=version,\ndescription=\"Fake package\",\nauthor=\"Ingeniweb\",\nauthor_email='thomas.desvenain@gmail.com',\nurl='http:\/\/pypi.python.org\/pypi\/testpackage\/',\nscripts=['testscript.py']\n)\n"
    },
    {
        "package_name": "vk_api-11.9.9",
        "file_list": "base.py jconfig.py memory.py __init__.py LICENSE PKG-INFO README.md setup.cfg setup.py audio.py audio_url_decoder.py bot_longpoll.py enums.py exceptions.py execute.py keyboard.py longpoll.py requests_pool.py streaming.py tools.py upload.py utils.py vk_api.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nfrom io import open\nfrom setuptools import setup\n\n\"\"\"\n:authors: python273\n:license: Apache License, Version 2.0, see LICENSE file\n\n:copyright: (c) 2019 python273\n\"\"\"\n\n\nversion = '11.9.9'\n\nwith open('README.md', encoding='utf-8') as f:\nlong_description = f.read()\n\nsetup(\nname='vk_api',\nversion=version,\n\nauthor='python273',\nauthor_email='vk_api@python273.pw',\n\ndescription=(\n'Python \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u0434\u043b\u044f \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 '\n'\u0412\u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0435 (vk.com API wrapper)'\n),\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\n\nurl='https:\/\/github.com\/python273\/vk_api',\ndownload_url='https:\/\/github.com\/python273\/vk_api\/archive\/v{}.zip'.format(\nversion\n),\n\nlicense='Apache License, Version 2.0, see LICENSE file',\n\npackages=['vk_api', 'jconfig'],\ninstall_requires=['requests'],\nextras_require={\n'vkstreaming': ['websocket-client'],\n'vkaudio': ['beautifulsoup4'],\n},\n\nclassifiers=[\n'License :: OSI Approved :: Apache Software License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n]\n)\n"
    },
    {
        "package_name": "voila-0.3.6",
        "file_list": "CHANGELOG.md CONTRIBUTING.md voila.json voila.json voila.json install.json LICENSE MANIFEST.in package.json PKG-INFO pyproject.toml README.md RELEASE.md setup.cfg setup.py 404.html browser-open.html error.html jupyter_widgets.html.j2 log.macro.html.j2 page.html spinner.macro.html.j2 07173fb77d2ee655811499d40c8388e7.woff 07281897a98a61c3733e1670f82a9fd5.woff 1.voila.js 2.voila.js 3d580bd561716bfb1f0b4fdd7063a802.woff 4c74e33b0feb1fdbda49403a5e7ed604.woff 5589d1a8fc62be6613020ef2fa13e410.woff 72815766b08ca24d4d29ad1f5d4ecb45.woff 77dbcee3c3d9a82a0c04a4ae7992b895.woff 7e83626ba8bf2d20dc41565f1e6d0afc.woff 9995de4787f908d8237dba7007f6c3fe.woff b80e08d5a79acbd1fafb1ca6f3515664.woff bc3af04f9a671fcabd6498042c57478f.woff bc42125861bd5bfc8686deeb612dcbb3.woff c9423d5dc9d82a38ca215f74e9cdd9f2.woff main.js require.min.js voila.js tree.html voila_setup.macro.html.j2 index.html.j2 labvariables.css materialcolors.css browser-open.html error.html index.html.j2 page.html tree.html index.html.j2 labvariables.css materialcolors.css tsconfig.eslint.json tsconfigbase.json app.py configuration.py execute.py exporter.py handler.py package.json package.json.orig plugin.json 643.999197bbd8ad4b2ee222.js 97.e3e53fd66a7d444dfacc.js remoteEntry.65014cb58c79e1651a0a.js style.js third-party-licenses.json notebook_renderer.py paths.py request_info_handler.py server_extension.py shutdown_kernel_handler.py extension.js static_file_handler.py treehandler.py utils.py voila_kernel_manager.py _version.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#############################################################################\n# Copyright (c) 2018, Voil\u00e0 Contributors #\n# Copyright (c) 2018, QuantStack #\n# #\n# Distributed under the terms of the BSD 3-Clause License. #\n# #\n# The full license is in the file LICENSE, distributed with this software. #\n#############################################################################\nfrom pathlib import Path\nfrom urllib.request import urlopen\nimport setuptools\nimport sys\nimport os\n\nHERE = Path(__file__).parent.resolve()\n\n# The name of the project\nNAME = \"voila\"\n\nlabext_name = \"@voila-dashboards\/jupyterlab-preview\"\nlab_extension_dest = HERE \/ NAME \/ \"labextension\"\n\n# Representative files that should exist after a successful build\nensured_targets = [\nstr(HERE \/ \"share\/jupyter\/voila\/templates\/base\/static\/voila.js\"),\nstr(lab_extension_dest \/ \"package.json\"),\n]\n\n\ndata_files_spec = [\n(\n\"etc\/jupyter\/jupyter_server_config.d\",\n\"etc\/jupyter\/jupyter_server_config.d\",\n\"voila.json\",\n),\n(\n\"etc\/jupyter\/jupyter_notebook_config.d\",\n\"etc\/jupyter\/jupyter_notebook_config.d\",\n\"voila.json\",\n),\n(\n\"etc\/jupyter\/nbconfig\/notebook.d\",\n\"etc\/jupyter\/nbconfig\/notebook.d\",\n\"voila.json\",\n),\n(\"share\/jupyter\/nbextensions\/voila\", \"voila\/static\", \"extension.js\"),\n(\"share\/jupyter\/labextensions\/%s\" % labext_name, str(lab_extension_dest), \"**\"),\n(\"share\/jupyter\/labextensions\/%s\" % labext_name, str(HERE), \"install.json\"),\n(\"share\/jupyter\/voila\/templates\", \"share\/jupyter\/voila\/templates\", \"**\/*[!.map]\"),\n]\n\n\njupyterlab_apputils_version = \"3.2.8\"\njupyterlab_theme_light_version = \"3.2.8\"\n\ncss_files = [\n(\n\"https:\/\/unpkg.com\/@jupyterlab\/apputils@%s\/style\/materialcolors.css\"\n% jupyterlab_apputils_version,\n\"materialcolors.css\",\n),\n(\n\"https:\/\/unpkg.com\/@jupyterlab\/theme-light-extension@%s\/style\/variables.css\"\n% jupyterlab_theme_light_version,\n\"labvariables.css\",\n),\n]\n\n\nclass FetchCSS(setuptools.Command):\n\"\"\"Fetch CSS files from the CDNs.\"\"\"\n\ndescription = \"Fetch CSS from CDN\"\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nfor template_name in [\"classic\", \"reveal\"]:\nfor url, filename in css_files:\ndirectory = os.path.join(\n\"share\", \"jupyter\", \"voila\", \"templates\", template_name, \"static\"\n)\ndest = os.path.join(directory, filename)\nif not os.path.exists(directory):\nos.makedirs(directory)\nif not os.path.exists(\".git\") and os.path.exists(dest):\n# not running from git, nothing to do\nreturn\nprint(\"Downloading CSS: %s\" % url)\ntry:\ncss = urlopen(url).read()\nexcept Exception as e:\nmsg = \"Failed to download css from %s: %s\" % (url, e)\nprint(msg, file=sys.stderr)\n\nif os.path.exists(dest):\nprint(\"Already have CSS: %s, moving on.\" % dest)\nelse:\nraise OSError(\"Need CSS to proceed.\")\nreturn\n\nwith open(dest, \"wb\") as f:\nf.write(css)\nprint(\"Downloaded Notebook CSS to %s\" % dest)\n\n\ndef download_css_first(command):\nclass CSSFirst(command):\ndef run(self):\nself.distribution.run_command(\"download_css\")\nreturn command.run(self)\n\nreturn CSSFirst\n\n\ntry:\nfrom jupyter_packaging import wrap_installers, npm_builder, get_data_files\n\n# In develop mode, just run yarn\nbuilder = npm_builder(build_cmd=\"build\", npm=\"jlpm\", force=True)\ncmdclass = wrap_installers(post_develop=builder, ensured_targets=ensured_targets)\n\ncmdclass[\"download_css\"] = FetchCSS\ncmdclass[\"develop\"] = download_css_first(cmdclass[\"develop\"])\ncmdclass[\"sdist\"] = download_css_first(cmdclass[\"sdist\"])\ncmdclass[\"bdist_wheel\"] = download_css_first(cmdclass[\"bdist_wheel\"])\n\nsetup_args = dict(cmdclass=cmdclass, data_files=get_data_files(data_files_spec))\nexcept ImportError:\nsetup_args = dict()\n\n\nif __name__ == \"__main__\":\nsetuptools.setup(**setup_args)\n"
    },
    {
        "package_name": "w3lib-2.0.1",
        "file_list": "conf.py index.rst make.bat Makefile w3lib.rst LICENSE MANIFEST.in NEWS PKG-INFO pytest.ini README.rst setup.cfg setup.py test_encoding.py test_html.py test_http.py test_url.py test_util.py __init__.py tox.ini encoding.py html.py http.py py.typed url.py util.py _types.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup, find_packages\n\n\nsetup(\nname=\"w3lib\",\nversion=\"2.0.1\",\nlicense=\"BSD\",\ndescription=\"Library of web-related functions\",\nauthor=\"Scrapy project\",\nauthor_email=\"info@scrapy.org\",\nurl=\"https:\/\/github.com\/scrapy\/w3lib\",\npackages=find_packages(exclude=(\"tests\", \"tests.*\")),\npackage_data={\n\"w3lib\": [\"py.typed\"],\n},\ninclude_package_data=True,\nzip_safe=False,\nplatforms=[\"Any\"],\npython_requires=\">=3.6\",\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"License :: OSI Approved :: BSD License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Topic :: Internet :: WWW\/HTTP\",\n],\n)\n"
    },
    {
        "package_name": "wavefront-sdk-python-1.8.2",
        "file_list": "LICENSE PKG-INFO README.md setup.cfg setup.py test_applicaiton_tags.py test_histogram_impl.py test_wavefront_client.py test_wavefront_metrics_registry.py test_wavefront_python_sdk.py __init__.py client.py client_factory.py application_tags.py connection_handler.py constants.py heartbeater_service.py counter.py deltacounter.py gauge.py metrics.py registry.py __init__.py proxy_connection_handler.py utils.py __init__.py direct.py sender.py __init__.py histogram_granularity.py histogram_impl.py sender.py __init__.py sender.py __init__.py sender.py span_log.py __init__.py __init__.py multi_clients.py proxy.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python3\n\"\"\"Wavefront Python SDK.\n\n<p>This is a Wavefront Python SDK<\/p>\n\"\"\"\n\nimport os\n\nimport setuptools\n\nwith open(os.path.join(os.path.abspath(os.path.dirname(__file__)),\n'README.md')) as fd:\nLONG_DESCRIPTION = fd.read()\n\nsetuptools.setup(\nname='wavefront-sdk-python',\nversion='1.8.2', # The version number. Update with each pull request.\nauthor='Wavefront by VMware',\nauthor_email='chitimba@wavefront.com',\nurl='https:\/\/github.com\/wavefrontHQ\/wavefront-sdk-python',\nlicense='Apache-2.0',\ndescription='Wavefront Python SDK',\nlong_description=LONG_DESCRIPTION,\nlong_description_content_type='text\/markdown',\nkeywords=[\n'Wavefront',\n'Wavefront SDK'\n],\nclassifiers=[\n'License :: OSI Approved :: Apache Software License',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7'\n],\ninclude_package_data=True,\npackages=setuptools.find_packages(exclude=('*.tests', '*.tests.*',\n'tests.*', 'tests')),\ninstall_requires=(\n'requests>=2.18.4',\n'tdigest>=0.5.2',\n'Deprecated>=1.2.10'\n)\n)\n"
    },
    {
        "package_name": "webdavclient3-3.14.6",
        "file_list": "PKG-INFO README.md setup.cfg setup.py wdc client.py connection.py exceptions.py urn.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nimport sys\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install as InstallCommand\nfrom setuptools.command.test import test as TestCommand\n\nversion = \"3.14.6\"\nrequirements = \"libxml2-dev libxslt-dev python-dev\"\n\n\nclass Install(InstallCommand):\n\ndef run(self):\n\n#params = \"{install_params} {requirements}\".format(install_params=\"install\", requirements=requirements)\n#cmd = \"{command} {params}\".format(command=\"apt-get\", params=params)\n#proc = subprocess.Popen(cmd, shell=True)\n# proc.wait()\nInstallCommand.run(self)\n\n\nclass Test(TestCommand):\n\nuser_options = [('pytest-args=', 'a', \"\")]\n\ndef initialize_options(self):\n\nTestCommand.initialize_options(self)\nself.pytest_args = []\n\ndef finalize_options(self):\n\nTestCommand.finalize_options(self)\nself.test_args = []\nself.test_suite = True\n\ndef run_tests(self):\n\nimport pytest\nerrno = pytest.main(self.pytest_args)\nsys.exit(errno)\n\ntry:\nlong_description = open('README.md', encoding=\"utf-8\").read()\nexcept TypeError:\nlong_description = open('README.md').read()\n\nsetup(\nname='webdavclient3',\nversion=version,\npackages=find_packages(exclude=('tests',)),\nrequires=['python (>= 3.3.0)'],\ninstall_requires=['requests', 'lxml', 'python-dateutil'],\nscripts=['wdc'],\ntest_suite='tests',\ntests_require=['pytest'],\ncmdclass={'install': Install, 'test': Test},\ndescription='WebDAV client, based on original package https:\/\/github.com\/designerror\/webdav-client-python but '\n'uses requests instead of PyCURL',\nlong_description=long_description,\nlong_description_content_type='text\/markdown',\nauthor='Evgeny Ezhov',\nauthor_email='ezhov.evgeny@gmail.com',\nurl='https:\/\/github.com\/ezhov-evgeny\/webdav-client-python-3',\nlicense='MIT License',\nkeywords='webdav, client, python, module, library, packet, Yandex.Disk, Dropbox, Google Disk, Box, 4shared',\nclassifiers=[\n'Environment :: Console',\n'Environment :: Web Environment',\n'License :: OSI Approved :: MIT License',\n'Operating System :: MacOS',\n'Operating System :: Microsoft',\n'Operating System :: Unix',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Topic :: Internet',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\n)\n"
    },
    {
        "package_name": "WebHelpers-1.3",
        "file_list": "CHANGELOG build changelog.rst conf.py contents.rst development.rst history.rst index.rst Makefile constants.rst containers.rst date.rst feedgenerator.rst builder.rst converters.rst grid.rst tags.rst tools.rst __init__.rst markdown.rst media.rst mimehelper.rst misc.rst number.rst paginate.rst flash.rst grid.rst minify.rst secure_form.rst __init__.rst text.rst textile.rst util.rst third_party.rst todo.rst whats_new.rst webhelpers-logo.png config description HEAD applypatch-msg.sample commit-msg.sample post-commit.sample post-receive.sample post-update.sample pre-applypatch.sample pre-commit.sample pre-rebase.sample prepare-commit-msg.sample update.sample index exclude HEAD master pack-7223556f5a85a1e44a4a475abe01be5e042c09f5.idx pack-7223556f5a85a1e44a4a475abe01be5e042c09f5.pack packed-refs master HEAD .gitignore CONTRIBUTORS.txt LICENSE.txt layout.html dialog-note.png dialog-seealso.png dialog-topic.png dialog-warning.png epub.css footerbg.png headerbg.png ie6.css middlebg.png pylons-latex.png pylons-small.png pylons.css_t pylons.ico pylons.png transparent.gif theme.conf pylons.ico pylonsfw-small.png theme.conf pylons_theme_support.py pyramid-latex.png pyramid-small.png pyramid.ico pyramid.png theme.conf README.rst LICENSE MANIFEST.in PKG-INFO README.txt requirements.txt setup.cfg setup.py test_containers.py test_converters.py test_date.py test_escapes.py test_feedgenerator.py test_html.py test_mimetypes.py test_misc.py test_modeltags.py test_number.py test_paginate.py test_pylonslib_flash.py test_tags.py test_text.py test_tools.py util.py TODO baseN.py containers.py disabled_test_pylonslib_minify.py document.py logging_optparse.py multimedia.py number_to_human_size.py opener.py README sanitize_filename.py constants.py containers.py date.py feedgenerator.py builder.py converters.py grid.py grid_demo.py render.py tags.py tools.py __init__.py markdown.py media.py mimehelper.py misc.py number.py paginate.py grid.css webhelpers.css flash.py grid.py minify.py secure_form.py _jsmin.py __init__.py text.py textile.py util.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "try:\nfrom setuptools import setup, find_packages\nexcept ImportError:\nfrom ez_setup import use_setuptools\nuse_setuptools()\nfrom setuptools import setup, find_packages\n\nversion = '1.3'\n\nsetup(\nname=\"WebHelpers\",\nversion=version,\ndescription='Web Helpers',\nlong_description=\"\"\"\nWeb Helpers is a library of helper functions intended to make writing \nweb applications easier. It's the standard function library for\nPylons and TurboGears 2, but can be used with any web framework. It also\ncontains a large number of functions not specific to the web, including text\nprocessing, number formatting, date calculations, container objects, etc.\n\nVersion 1.3 fixes a performance regression in 1.2 regarding paginate with\nSQLAlchemy.\n\nWebHelpers itself depends only on MarkupSafe, but certain helpers depend on\nthird-party packages as described in the docs.\n\nThe development version of WebHelpers is at\nhttp:\/\/bitbucket.org\/bbangert\/webhelpers (Mercurial)\n\n\"\"\",\nauthor='Mike Orr, Ben Bangert, Phil Jenvey',\nauthor_email='sluggoster@gmail.com, ben@groovie.org, pjenvey@groovie.org',\nurl='http:\/\/webhelpers.groovie.org\/',\npackages=find_packages(exclude=['ez_setup']),\nzip_safe=False,\ninclude_package_data=True,\ninstall_requires=[\n'MarkupSafe>=0.9.2',\n],\ntests_require=[ \n'Nose',\n'Routes',\n'WebOb',\n], \ntest_suite='nose.collector',\nclassifiers=[\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: BSD License\",\n\"Programming Language :: Python\",\n\"Topic :: Internet :: WWW\/HTTP :: Dynamic Content\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\nentry_points=\"\"\"\n[buildutils.optional_commands]\ncompress_resources = webhelpers.commands\n\"\"\",\n)\n"
    },
    {
        "package_name": "webrtcvad-wheels-2.0.10.post2",
        "file_list": "pywebrtcvad.c complex_bit_reverse.c complex_fft.c complex_fft_tables.h cross_correlation.c division_operations.c downsample_fast.c energy.c get_scaling_square.c real_fft.h signal_processing_library.h spl_inl.h min_max_operations.c real_fft.c resample_48khz.c resample_by_2_internal.c resample_by_2_internal.h resample_fractional.c spl_init.c vector_scaling_operations.c webrtc_vad.h vad_core.c vad_core.h vad_filterbank.c vad_filterbank.h vad_gmm.c vad_gmm.h vad_sp.c vad_sp.h webrtc_vad.c cpu_features_wrapper.h typedefs.h example.py LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test-audio.raw test_webrtcvad.py webrtcvad.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "from setuptools import setup, find_packages, Extension\nimport glob\nimport os.path\nimport sys\n\n\nC_SRC_PREFIX = os.path.join('cbits', 'webrtc', 'common_audio')\n\nc_sources = (\n[os.path.join(\n'cbits', 'pywebrtcvad.c')]\n+ glob.glob(\nos.path.join(\nC_SRC_PREFIX,\n'signal_processing',\n'*.c'))\n+ glob.glob(\nos.path.join(\nC_SRC_PREFIX,\n'vad',\n'*.c')))\n\ndefine_macros = []\n\nif sys.platform.startswith('win'):\ndefine_macros.extend([('_WIN32', None), ])\nelse:\ndefine_macros.extend([('WEBRTC_POSIX', None), ])\n\nmodule = Extension('_webrtcvad',\ndefine_macros=define_macros,\nsources=c_sources,\ninclude_dirs=['cbits'])\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(os.path.join(here, 'README.rst')) as f:\nlong_description = f.read()\n\nsetup(\nname='webrtcvad-wheels',\nauthor='David Zurow',\nauthor_email='daanzu@gmail.com',\nversion='2.0.10.post2',\ndescription=('Python interface to the Google WebRTC Voice '\n'Activity Detector (VAD) [released with binary wheels!]'),\nlong_description=long_description,\nurl='https:\/\/github.com\/daanzu\/py-webrtcvad-wheels',\nlicense='MIT',\nclassifiers=[\n# How mature is this project? Common values are\n# 3 - Alpha\n# 4 - Beta\n# 5 - Production\/Stable\n'Development Status :: 4 - Beta',\n\n# Indicate who your project is intended for\n'Intended Audience :: Developers',\n'Topic :: Scientific\/Engineering :: Artificial Intelligence',\n'Topic :: Scientific\/Engineering :: Information Analysis',\n'Topic :: Scientific\/Engineering :: Human Machine Interfaces',\n\n# Pick your license as you wish (should match \"license\" above)\n'License :: OSI Approved :: MIT License',\n\n# Specify the Python versions you support here. In particular,\n# ensure that you indicate whether you support Python 2,\n# Python 3 or both.\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n],\nkeywords='speechrecognition asr voiceactivitydetection vad webrtc',\next_modules=[module],\npy_modules=['webrtcvad'],\ntest_suite='nose.collector',\n# List additional groups of dependencies here (e.g. development\n# dependencies). You can install these using the following syntax,\n# for example: $ pip install -e .[dev,test]\nextras_require={\n'dev': ['nose', 'check-manifest', 'unittest2', 'zest.releaser',\n'psutil', 'memory_profiler']\n})\n"
    },
    {
        "package_name": "websocket-client-1.3.3",
        "file_list": "ChangeLog echoapp_client.py echo_client.py rel_client.py LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py header01.txt header02.txt header03.txt echo-server.py test_abnf.py test_app.py test_cookiejar.py test_http.py test_url.py test_websocket.py __init__.py _abnf.py _app.py _cookiejar.py _core.py _exceptions.py _handshake.py _http.py _logging.py _socket.py _ssl_compat.py _url.py _utils.py _wsdump.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "import sys\nimport pkg_resources\nfrom setuptools import setup, find_packages\n\n\"\"\"\nsetup.py\nwebsocket - WebSocket client library for Python\n\nCopyright 2022 engn33r\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\n\nVERSION = \"1.3.3\"\n\ninstall_requires = []\ntests_require = []\n\nsetup(\nname=\"websocket-client\",\nversion=VERSION,\ndescription=\"WebSocket client for Python with low level API options\",\nlong_description=open(\"README.md\").read(),\nlong_description_content_type='text\/markdown',\nauthor=\"liris\",\nauthor_email=\"liris.pp@gmail.com\",\nlicense=\"Apache-2.0\",\nurl=\"https:\/\/github.com\/websocket-client\/websocket-client.git\",\ndownload_url='https:\/\/github.com\/websocket-client\/websocket-client\/releases',\npython_requires='>=3.7',\nextras_require={\n\"test\": [\"websockets\"],\n\"optional\": [\"python-socks\", \"wsaccel\"],\n\"docs\": [\"Sphinx >= 3.4\", \"sphinx_rtd_theme >= 0.5\"],\n},\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Operating System :: MacOS :: MacOS X\",\n\"Operating System :: POSIX\",\n\"Operating System :: Microsoft :: Windows\",\n\"Topic :: Internet\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n\"Intended Audience :: Developers\",\n],\nproject_urls={\n'Documentation': 'https:\/\/websocket-client.readthedocs.io\/',\n'Source': 'https:\/\/github.com\/websocket-client\/websocket-client\/',\n},\nkeywords='websockets client',\nentry_points={\n'console_scripts': [\n'wsdump=websocket._wsdump:main',\n],\n},\ninstall_requires=install_requires,\npackages=find_packages(),\npackage_data={\n'websocket.tests': ['data\/*.txt']\n},\ntests_require=tests_require,\ntest_suite=\"websocket.tests\"\n)\n"
    },
    {
        "package_name": "wemake-python-styleguide-0.16.1",
        "file_list": "LICENSE PKG-INFO pyproject.toml README.md setup.py checker.py aliases.py constants.py functions.py nodes.py packaging.py routing.py types.py __init__.py constants.py formatter.py call_args.py function_args.py super_args.py __init__.py annotations.py cognitive.py functions.py overuses.py __init__.py filenames.py access.py alphabet.py blacklists.py builtins.py constants.py logical.py name_nodes.py __init__.py nodes.py safe_eval.py defs.py predicates.py __init__.py source.py system.py brackets.py comprehensions.py constants.py newlines.py queries.py strings.py __init__.py annotations.py attributes.py bools.py calls.py classes.py collections.py compares.py decorators.py exceptions.py functions.py getters_setters.py ifs.py imports.py keywords.py loops.py operators.py recursion.py slices.py strings.py stubs.py variables.py __init__.py walk.py walrus.py __init__.py config.py defaults.py validation.py __init__.py complexity.py naming.py __init__.py filename.py file_tokens.py tree.py __init__.py __init__.py py.typed bugfixes.py enhancements.py __init__.py ast_tree.py __init__.py types.py version.py base.py best_practices.py complexity.py consistency.py naming.py oop.py refactoring.py system.py __init__.py annotations.py attributes.py blocks.py builtins.py classes.py compares.py access.py annotations.py calls.py classes.py counts.py function.py imports.py jones.py nested.py offset.py overuses.py __init__.py conditions.py decorators.py exceptions.py functions.py imports.py iterables.py keywords.py loops.py modules.py validation.py variables.py __init__.py operators.py redundancy.py statements.py subscripts.py __init__.py base.py decorators.py module.py __init__.py comments.py conditions.py primitives.py statements.py syntax.py __init__.py __init__.py __init__.py",
        "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['wemake_python_styleguide',\n'wemake_python_styleguide.compat',\n'wemake_python_styleguide.logic',\n'wemake_python_styleguide.logic.arguments',\n'wemake_python_styleguide.logic.complexity',\n'wemake_python_styleguide.logic.naming',\n'wemake_python_styleguide.logic.scopes',\n'wemake_python_styleguide.logic.tokens',\n'wemake_python_styleguide.logic.tree',\n'wemake_python_styleguide.options',\n'wemake_python_styleguide.presets',\n'wemake_python_styleguide.presets.topics',\n'wemake_python_styleguide.presets.types',\n'wemake_python_styleguide.transformations',\n'wemake_python_styleguide.transformations.ast',\n'wemake_python_styleguide.violations',\n'wemake_python_styleguide.visitors',\n'wemake_python_styleguide.visitors.ast',\n'wemake_python_styleguide.visitors.ast.complexity',\n'wemake_python_styleguide.visitors.ast.naming',\n'wemake_python_styleguide.visitors.filenames',\n'wemake_python_styleguide.visitors.tokenize']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['astor>=0.8,<0.9',\n'attrs',\n'darglint>=1.2,<2.0',\n'flake8-bandit>=2.1,<4',\n'flake8-broken-line>=0.3,<0.5',\n'flake8-bugbear>=20.1,<23.0',\n'flake8-commas>=2.0,<3.0',\n'flake8-comprehensions>=3.1,<4.0',\n'flake8-debugger>=4.0,<5.0',\n'flake8-docstrings>=1.3,<2.0',\n'flake8-eradicate>=1.0,<2.0',\n'flake8-isort>=4.0,<5.0',\n'flake8-quotes>=3.0,<4.0',\n'flake8-rst-docstrings>=0.2,<0.3',\n'flake8-string-format>=0.3,<0.4',\n'flake8>=3.7,<5',\n'pep8-naming>=0.11,<0.13',\n'pygments>=2.4,<3.0',\n'typing_extensions>=3.6,<5.0']\n\nextras_require = \\\n{':python_version < \"3.8\"': ['importlib-metadata']}\n\nentry_points = \\\n{'flake8.extension': ['WPS = wemake_python_styleguide.checker:Checker'],\n'flake8.report': ['wemake = '\n'wemake_python_styleguide.formatter:WemakeFormatter']}\n\nsetup_kwargs = {\n'name': 'wemake-python-styleguide',\n'version': '0.16.1',\n'description': 'The strictest and most opinionated python linter ever',\n'long_description': '# wemake-python-styleguide\\n\\n[![wemake.services](https:\/\/img.shields.io\/badge\/%20-wemake.services-green.svg?label=%20&logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAABGdBTUEAALGPC%2FxhBQAAAAFzUkdCAK7OHOkAAAAbUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP%2F%2F%2F5TvxDIAAAAIdFJOUwAjRA8xXANAL%2Bv0SAAAADNJREFUGNNjYCAIOJjRBdBFWMkVQeGzcHAwksJnAPPZGOGAASzPzAEHEGVsLExQwE7YswCb7AFZSF3bbAAAAABJRU5ErkJggg%3D%3D)](https:\/\/wemake.services)\\n[![Supporters](https:\/\/img.shields.io\/opencollective\/all\/wemake-python-styleguide.svg?color=gold&label=supporters)](https:\/\/opencollective.com\/wemake-python-styleguide)\\n[![Build Status](https:\/\/github.com\/wemake-services\/wemake-python-styleguide\/workflows\/test\/badge.svg?branch=master&event=push)](https:\/\/github.com\/wemake-services\/wemake-python-styleguide\/actions?query=workflow%3Atest)\\n[![codecov](https:\/\/codecov.io\/gh\/wemake-services\/wemake-python-styleguide\/branch\/master\/graph\/badge.svg)](https:\/\/codecov.io\/gh\/wemake-services\/wemake-python-styleguide)\\n[![Python Version](https:\/\/img.shields.io\/pypi\/pyversions\/wemake-python-styleguide.svg)](https:\/\/pypi.org\/project\/wemake-python-styleguide\/)\\n[![wemake-python-styleguide](https:\/\/img.shields.io\/badge\/style-wemake-000000.svg)](https:\/\/github.com\/wemake-services\/wemake-python-styleguide)\\n\\n---\\n\\nWelcome to the strictest and most opinionated Python linter ever.\\n\\n<p align=\"center\">\\n <a href=\"https:\/\/wemake-python-stylegui.de\">\\n <img src=\"https:\/\/raw.githubusercontent.com\/wemake-services\/wemake-python-styleguide\/master\/docs\/_static\/logo.png\"\\n alt=\"wemake-python-styleguide logo\">\\n <\/a>\\n<\/p>\\n\\n`wemake-python-styleguide` is actually a [flake8](http:\/\/flake8.pycqa.org\/en\/latest\/)\\nplugin with [some other plugins](https:\/\/wemake-python-stylegui.de\/en\/latest\/pages\/usage\/violations\/index.html#external-plugins) as dependencies.\\n\\n\\n## Quickstart\\n\\n```bash\\npip install wemake-python-styleguide\\n```\\n\\nYou will also need to create a `setup.cfg` file with the [configuration](https:\/\/wemake-python-stylegui.de\/en\/latest\/pages\/usage\/configuration.html).\\n\\nWe highly recommend to also use:\\n\\n- [flakehell](https:\/\/wemake-python-stylegui.de\/en\/latest\/pages\/usage\/integrations\/flakehell.html) for easy integration into a **legacy** codebase\\n- [nitpick](https:\/\/wemake-python-stylegui.de\/en\/latest\/pages\/usage\/integrations\/nitpick.html) for sharing and validating configuration across multiple projects\\n\\n\\n## Running\\n\\n```bash\\nflake8 your_module.py\\n```\\n\\nThis app is still just good old `flake8`!\\nAnd it won\\'t change your existing workflow.\\n\\n<p align=\"center\">\\n <img src=\"https:\/\/raw.githubusercontent.com\/wemake-services\/wemake-python-styleguide\/master\/docs\/_static\/running.png\"\\n alt=\"invocation results\">\\n<\/p>\\n\\nSee [\"Usage\" section](https:\/\/wemake-python-stylegui.de\/en\/latest\/pages\/usage\/setup.html)\\nin the docs for examples and integrations.\\n\\nWe also support [GitHub Actions](https:\/\/wemake-python-stylegui.de\/en\/latest\/pages\/usage\/integrations\/github-actions.html) as first class-citizens.\\n[Try it out](https:\/\/github.com\/marketplace\/actions\/wemake-python-styleguide)!\\n\\n\\n## Strict is the new cool\\n\\nStrict linting offers the following benefits to developers and companies:\\n1. Ensures consistency - no matter who works on it, the end product will always be the same dependable code\\n2. Helps avoid potential bugs - strict rules make sure that you don\\'t make common mistakes\\n3. Efficient code reviews - each piece of code has a similar familiar style and syntax. If it passes all the checks, there\\'s little left to review!\\n4. Fewer code revisions - strict linting ensures that you don\\'t have to re-write the codebase again and again\\n5. Reduce code redundancy - Sometimes we write complex code as we are thinking in a certain way about a problem. The linter offers suggestions that can help simplify the code and eliminate redundant statements\\n\\n\\n## What we are about\\n\\nThe ultimate goal of this project is\\nto make all people write **exactly** the same `Python` code.\\n\\n| | flake8 | pylint | black | mypy | wemake-python-styleguide |\\n|----------------------------|--------|--------|-------|------|--------------------------|\\n| Formats code? | \u274c | \u274c | \u2705 | \u274c | \u274c |\\n| Finds style issues? | \ud83e\udd14 | \u2705 | \ud83e\udd14 | \u274c | \u2705 |\\n| Finds bugs? | \ud83e\udd14 | \u2705 | \u274c | \u2705 | \u2705 |\\n| Finds complex code? | \u274c | \ud83e\udd14 | \u274c | \u274c | \u2705 |\\n| Has a lot of strict rules? | \u274c | \ud83e\udd14 | \u274c | \u274c | \u2705 |\\n| Has a lot of plugins? | \u2705 | \u274c | \u274c | \ud83e\udd14 | \u2705 |\\n\\nWe have several primary objectives:\\n\\n0. Enforce `python3.6+` usage\\n1. Significantly reduce the complexity of your code and make it more maintainable\\n2. Enforce \"There should be one -- and preferably only one -- obvious way to do it\" rule to coding and naming styles\\n3. Protect developers from possible errors and enforce best practices\\n\\nYou can find all error codes and plugins [in the docs](https:\/\/wemake-python-stylegui.de\/en\/latest\/pages\/usage\/violations\/index.html).\\n\\n\\n## What we are not\\n\\nWe are *not* planning to do the following things:\\n\\n0. Assume or check types, use `mypy` together with our linter\\n1. [Reformat code](https:\/\/wemake-python-stylegui.de\/en\/latest\/pages\/usage\/integrations\/auto-formatters.html), since we believe that developers should do that\\n2. Check for `SyntaxError` or logical bugs, write tests instead\\n3. Appeal to everyone. But, you can [switch off](https:\/\/wemake-python-stylegui.de\/en\/latest\/pages\/usage\/setup.html#ignoring-violations) any rules that you don\\'t like\\n\\n\\n## Supporting us :tada:\\n\\nWe in [wemake.services](https:\/\/wemake.services) make\\nall our tools open-source by default, so the community can benefit from them.\\nIf you use our tools and they make your life easier and brings business value,\\nyou can return us a favor by supporting the work we do.\\n\\n[![Gold Tier](https:\/\/opencollective.com\/wemake-python-styleguide\/tiers\/gold-sponsor.svg?width=890)](https:\/\/opencollective.com\/wemake-python-styleguide)\\n\\n[![Silver Tier](https:\/\/opencollective.com\/wemake-python-styleguide\/tiers\/silver-sponsor.svg?width=890&avatarHeight=45&button=0)](https:\/\/opencollective.com\/wemake-python-styleguide)\\n\\n[![Bronze Tier](https:\/\/opencollective.com\/wemake-python-styleguide\/tiers\/bronze-sponsor.svg?width=890&avatarHeight=35&button=0)](https:\/\/opencollective.com\/wemake-python-styleguide)\\n\\n\\n## Show your style :sunglasses:\\n\\nIf you use our linter - it means that your code is awesome.\\nYou can be proud of it!\\nAnd you should share your accomplishment with others\\nby including a badge in your `README` file. It looks like this:\\n\\n[![wemake-python-styleguide](https:\/\/img.shields.io\/badge\/style-wemake-000000.svg)](https:\/\/github.com\/wemake-services\/wemake-python-styleguide)\\n\\n### Markdown\\n\\n```md\\n[![wemake-python-styleguide](https:\/\/img.shields.io\/badge\/style-wemake-000000.svg)](https:\/\/github.com\/wemake-services\/wemake-python-styleguide)\\n```\\n\\n### Restructured text\\n\\n```rst\\n.. image:: https:\/\/img.shields.io\/badge\/style-wemake-000000.svg\\n :target: https:\/\/github.com\/wemake-services\/wemake-python-styleguide\\n```\\n\\n\\n## Contributing\\n\\nWe **warmly welcome** all contributions!\\n\\n[![List of contributors](https:\/\/opencollective.com\/wemake-python-styleguide\/contributors.svg?width=890&button=0)](https:\/\/github.com\/wemake-services\/wemake-python-styleguide\/graphs\/contributors)\\n\\nSee [\"Contributing\"](https:\/\/wemake-python-stylegui.de\/en\/latest\/pages\/api\/index.html#contributing) section in the documentation if you want to contribute.\\n\\nYou can start with [issues that need some help](https:\/\/github.com\/wemake-services\/wemake-python-styleguide\/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)\\nright now.\\n',\n'author': 'Nikita Sobolev',\n'author_email': 'mail@sobolevn.me',\n'maintainer': None,\n'maintainer_email': None,\n'url': 'https:\/\/wemake-python-stylegui.de',\n'packages': packages,\n'package_data': package_data,\n'install_requires': install_requires,\n'extras_require': extras_require,\n'entry_points': entry_points,\n'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "whois-0.9.16",
        "file_list": "license MANIFEST.in PKG-INFO README.md setup.cfg setup.py exceptions.py tld_regexpr.py _1_query.py _2_parse.py _3_adjust.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "from distutils.core import setup\n\nsetup(\nname=\"whois\",\nversion=\"0.9.16\",\ndescription=\"Python package for retrieving WHOIS information of domains.\",\nauthor=\"DannyCork\",\nauthor_email=\"ddarko@ddarko.org\",\nlicense=\"MIT http:\/\/www.opensource.org\/licenses\/mit-license.php\",\ndownload_url=\"https:\/\/github.com\/DannyCork\/python-whois\/releases\/tag\/0.9.11\",\nurl=\"https:\/\/github.com\/DannyCork\/python-whois\/\",\nplatforms=[\"any\"],\npackages=[\"whois\"],\nkeywords=[\"Python\", \"whois\", \"tld\", \"domain\", \"expiration\", \"cctld\", \"domainer\", \".com\", \"registrar\"],\nclassifiers=[\n\"License :: OSI Approved :: MIT License\",\n\"Intended Audience :: Developers\",\n\"Environment :: Console\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3.7\",\n\"Topic :: Internet\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\n)\n\n'''\ntest_suite='testsuite',\nentry_points=\"\"\"\n[console_scripts]\ncmd = package:main\n\"\"\",\n'''\n"
    },
    {
        "package_name": "widgetsnbextension-3.6.1",
        "file_list": "LICENSE MANIFEST.in package.json PKG-INFO setup.cfg setup.py embed_widgets.js extension.js manager.js save_state.js widget_output.css widget_output.js webpack.config.js extension.js extension.js.map _version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt widgetsnbextension.json",
        "setup.py": "#!\/usr\/bin\/env python\n# coding: utf-8\n\n# Copyright (c) IPython Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nfrom __future__ import print_function\n\n# the name of the package\nname = 'widgetsnbextension'\n\nLONG_DESCRIPTION = \"\"\"\n.. image:: https:\/\/img.shields.io\/pypi\/v\/widgetsnbextension.svg\n:target: https:\/\/pypi.python.org\/pypi\/widgetsnbextension\/\n:alt: Version Number\n\n.. image:: https:\/\/img.shields.io\/pypi\/dm\/widgetsnbextension.svg\n:target: https:\/\/pypi.python.org\/pypi\/widgetsnbextension\/\n:alt: Number of PyPI downloads\n\nInteractive HTML Widgets\n========================\n\nInteractive HTML widgets for Jupyter notebooks.\n\nUsage\n=====\n\nInstall the corresponding package for your kernel. i.e. Python users would also\ninstall `ipywidgets`. Refer to that package's documentation for usage\ninstructions.\n\"\"\"\n\n#-----------------------------------------------------------------------------\n# Minimal Python version sanity check\n#-----------------------------------------------------------------------------\n\nimport sys\n\nv = sys.version_info\nif v[:2] < (2,7) or (v[0] >= 3 and v[:2] < (3,3)):\nerror = \"ERROR: %s requires Python version 2.7 or 3.3 or above.\" % name\nprint(error, file=sys.stderr)\nsys.exit(1)\n\nPY3 = (sys.version_info[0] >= 3)\n\n#-----------------------------------------------------------------------------\n# get on with it\n#-----------------------------------------------------------------------------\n\nimport os\nimport logging as log\nfrom setuptools import setup, Command\nfrom setuptools.command.build_py import build_py\nfrom setuptools.command.sdist import sdist\nfrom glob import glob\nfrom os.path import join as pjoin\nfrom subprocess import check_call\n\nlog.basicConfig(level=log.DEBUG)\nlog.info('setup.py entered')\nlog.info('$PATH=%s' % os.environ['PATH'])\n\nrepo_root = os.path.dirname(os.path.abspath(__file__))\nis_repo = os.path.exists(pjoin(repo_root, '.git'))\n\nnpm_path = os.pathsep.join([\npjoin(repo_root, 'node_modules', '.bin'),\nos.environ.get(\"PATH\", os.defpath),\n])\n\ndef mtime(path):\n\"\"\"shorthand for mtime\"\"\"\nreturn os.stat(path).st_mtime\n\ndef js_prerelease(command, strict=False):\n\"\"\"decorator for building minified js\/css prior to another command\"\"\"\nclass DecoratedCommand(command):\ndef run(self):\njsdeps = self.distribution.get_command_obj('jsdeps')\nif not is_repo and all(os.path.exists(t) for t in jsdeps.targets):\n# sdist, nothing to do\ncommand.run(self)\nreturn\n\ntry:\nself.distribution.run_command('jsdeps')\nexcept Exception as e:\nmissing = [t for t in jsdeps.targets if not os.path.exists(t)]\nif strict or missing:\nlog.warn(\"rebuilding js and css failed\")\nif missing:\nlog.error(\"missing files: %s\" % missing)\nraise e\nelse:\nlog.warn(\"rebuilding js and css failed (not a problem)\")\nlog.warn(str(e))\ncommand.run(self)\nupdate_package_data(self.distribution)\nreturn DecoratedCommand\n\n\ndef update_package_data(distribution):\n\"\"\"update package_data to catch changes during setup\"\"\"\nbuild_py = distribution.get_command_obj('build_py')\n# distribution.package_data = find_package_data()\n# re-init build_py options which load package_data\nbuild_py.finalize_options()\n\n\nclass NPM(Command):\ndescription = \"install package,json dependencies using npm\"\n\nuser_options = []\n\nnode_modules = pjoin(repo_root, 'node_modules')\n\ntargets = [\npjoin(repo_root, 'widgetsnbextension', 'static', 'extension.js')\n]\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef has_npm(self):\ntry:\n## shell=True needs to be passed for windows to look at non .exe files.\nshell = (sys.platform == 'win32')\ncheck_call(['npm', '--version'], shell=shell)\nreturn True\nexcept:\nreturn False\n\ndef run(self):\nhas_npm = self.has_npm()\nif not has_npm:\nlog.error(\"`npm` unavailable. If you're running this command using sudo, make sure `npm` is available to sudo\")\n\nenv = os.environ.copy()\nenv['PATH'] = npm_path\n\nif self.has_npm():\nlog.info(\"Installing build dependencies with npm. This may take a while...\")\ncheck_call(['npm', 'install'], cwd=repo_root, stdout=sys.stdout, stderr=sys.stderr,\nshell=(sys.platform == 'win32'))\nos.utime(self.node_modules, None)\n\nfor t in self.targets:\nif not os.path.exists(t):\nmsg = \"Missing file: %s\" % t\nif not has_npm:\nmsg += '\\nnpm is required to build a development version of widgetsnbextension'\nraise ValueError(msg)\n\n\n# update package data in case this created new files\nupdate_package_data(self.distribution)\n\npjoin = os.path.join\nhere = os.path.abspath(os.path.dirname(__file__))\npkg_root = pjoin(here, name)\n\nversion_ns = {}\nwith open(pjoin(here, name, '_version.py')) as f:\nexec(f.read(), {}, version_ns)\n\n\nsetup_args = dict(\nname = name,\nversion = version_ns['__version__'],\nscripts = [],\npackages = ['widgetsnbextension'],\npackage_data = {\n'widgetsnbextension': ['widgetsnbextension\/static\/extension.js'],\n},\ndescription = \"IPython HTML widgets for Jupyter\",\nlong_description = LONG_DESCRIPTION,\nauthor = 'IPython Development Team',\nauthor_email = 'ipython-dev@scipy.org',\nurl = 'http:\/\/ipython.org',\nlicense = 'BSD',\nplatforms = \"Linux, Mac OS X, Windows\",\nkeywords = ['Interactive', 'Interpreter', 'Shell', 'Web'],\nclassifiers = [\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'Intended Audience :: Science\/Research',\n'License :: OSI Approved :: BSD License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Framework :: Jupyter'\n],\ncmdclass = {\n'build_py': js_prerelease(build_py),\n'sdist': js_prerelease(sdist, strict=True),\n'jsdeps': NPM,\n},\ndata_files = [(\n'share\/jupyter\/nbextensions\/jupyter-js-widgets', [\n'widgetsnbextension\/static\/extension.js',\n'widgetsnbextension\/static\/extension.js.map'\n]),\n('etc\/jupyter\/nbconfig\/notebook.d' , ['widgetsnbextension.json'])\n],\nzip_safe=False,\ninclude_package_data = True,\n)\n\nif 'develop' in sys.argv or any(a.startswith('bdist') for a in sys.argv):\nimport setuptools\n\nif 'setuptools' in sys.modules:\n# setup.py develop should check for submodules\nfrom setuptools.command.develop import develop\nsetup_args['cmdclass']['develop'] = js_prerelease(develop, strict=True)\n\nsetuptools_args = {}\ninstall_requires = setuptools_args['install_requires'] = [\n'notebook>=4.4.1',\n]\n\nif 'setuptools' in sys.modules:\nsetup_args.update(setuptools_args)\n\nif __name__ == '__main__':\nsetup(**setup_args)\n"
    },
    {
        "package_name": "Willow-1.4.1",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py haarcascade_frontalface_alt2.xml image.py opencv.py pillow.py wand.py __init__.py registry.py deprecation.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n\nimport sys, os\n\ntry:\nfrom setuptools import setup, find_packages\nexcept ImportError:\nfrom distutils.core import setup\n\n\n# Hack to prevent \"TypeError: 'NoneType' object is not callable\" error\n# in multiprocessing\/util.py _exit_function when setup.py exits\n# (see http:\/\/www.eby-sarna.com\/pipermail\/peak\/2010-May\/003357.html)\ntry:\nimport multiprocessing\nexcept ImportError:\npass\n\n\n\nsetup(\nname='Willow',\nversion='1.4.1',\ndescription='A Python image library that sits on top of Pillow, Wand and OpenCV',\nauthor='Karl Hobley',\nauthor_email='karl@kaed.uk',\nurl='',\npackages=find_packages(exclude=['tests']),\ninclude_package_data=True,\nlicense='BSD',\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Topic :: Multimedia :: Graphics',\n'Topic :: Multimedia :: Graphics :: Graphics Conversion',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n],\npython_requires='>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*',\ninstall_requires=[],\nextras_require={\"testing\": [\n\"Pillow>=6.0.0,<10.0.0\",\n\"Wand>=0.6,<1.0\",\n\"mock>=3.0,<4.0\",\n]},\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "WMI-1.5.1",
        "file_list": "PKG-INFO readme.rst setup.cfg setup.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt wmi.py wmitest.cmd wmitest.master.ini wmitest.py wmiweb.py",
        "setup.py": "import os\nimport re\nfrom setuptools import setup\n\nclassifiers = [\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Win32 (MS Windows)',\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'License :: MIT',\n'Natural Language :: English',\n'Operating System :: Microsoft :: Windows :: Windows 95\/98\/2000',\n'Topic :: System :: Systems Administration'\n]\n\nbase_dir = os.path.dirname(__file__)\n\nDUNDER_ASSIGN_RE = re.compile(r\"\"\"^__\\w+__\\s*=\\s*['\"].+['\"]$\"\"\")\nabout = {}\nwith open(os.path.join(base_dir, \"wmi.py\"), \"rb\") as f:\nfor line in f.read().decode(\"utf-8\").splitlines():\nif DUNDER_ASSIGN_RE.search(line):\nexec(line, about)\nchanges = \"\"\n\nTO_STRIP = set([\":class:\", \":mod:\", \":meth:\", \":func:\", \":doc:\"])\nwith open(os.path.join(base_dir, \"README.rst\"), \"rb\") as f:\nreadme = f.read().decode(\"utf-8\")\nfor s in TO_STRIP:\nreadme = readme.replace(s, \"\")\n\n\ninstall_requires = [\n\"pywin32\"\n]\nextras_require = {\n\"tests\": [\n\"pytest\",\n],\n\"docs\": [\"sphinx\"],\n\"package\": [\n# Wheel building and PyPI uploading\n\"wheel\",\n\"twine\",\n],\n}\nextras_require[\"dev\"] = (\nextras_require[\"tests\"]\n+ extras_require[\"docs\"]\n+ extras_require[\"package\"]\n)\nextras_require[\"all\"] = list(\n{req for extra, reqs in extras_require.items() for req in reqs}\n)\n\nsetup (\nname=about[\"__title__\"],\nversion=about[\"__version__\"],\ndescription=about[\"__description__\"],\nlong_description=\"{}\\n\\n{}\".format(readme, changes),\nlong_description_content_type = \"text\/x-rst\",\nauthor=about[\"__author__\"],\nauthor_email=about[\"__email__\"],\nurl=about[\"__url__\"],\nlicense=about[\"__license__\"],\npy_modules = [\"wmi\"],\ninstall_requires=install_requires,\nextras_require=extras_require,\nscripts = [\"wmitest.py\", \"wmiweb.py\", \"wmitest.cmd\", \"wmitest.master.ini\"],\ndata_files = [\"readme.rst\"]\n)\n"
    },
    {
        "package_name": "workos-1.14.0",
        "file_list": "LICENSE PKG-INFO README.md setup.cfg setup.py audit_trail.py client.py directory_sync.py exceptions.py mfa.py organizations.py passwordless.py portal.py base.py directory_sync.py event.py event_action.py mfa.py organizations.py passwordless.py sso.py __init__.py sso.py connection_types.py pagiantion_order.py request.py validation.py __init__.py webhooks.py __about__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "import os\nimport sys\nfrom setuptools import setup, find_packages\n\nbase_dir = os.path.dirname(__file__)\n\nwith open(\"README.md\", \"r\") as f:\nlong_description = f.read()\n\nabout = {}\nwith open(os.path.join(base_dir, \"workos\", \"__about__.py\")) as f:\nexec(f.read(), about)\n\ndev_requirements = [\n\"flake8\",\n\"pytest==4.6.9\",\n\"pytest-cov==2.8.1\",\n\"six==1.13.0\",\n]\nif sys.version_info.major == 3:\ndev_requirements.extend(\n[\n\"black==22.3.0\",\n\"twine==3.1.1\",\n]\n)\n\nsetup(\nname=about[\"__package_name__\"],\nversion=about[\"__version__\"],\nauthor=about[\"__author__\"],\nauthor_email=about[\"__author_email__\"],\nurl=about[\"__package_url__\"],\ndescription=about[\"__description__\"],\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\npackages=find_packages(\nexclude=[\n\"tests*\",\n]\n),\nzip_safe=False,\nlicense=about[\"__license__\"],\ninstall_requires=[\"requests>=2.22.0\"],\nextras_require={\n\"dev\": dev_requirements,\n\":python_version<'3.4'\": [\"enum34\"],\n},\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.4\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n],\n)\n"
    },
    {
        "package_name": "wrapt-1.14.1",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py arguments.py decorators.py importer.py wrappers.py _wrappers.c __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt compat.py conftest.py requirements.txt test_adapter.py test_adapter_py3.py test_adapter_py33.py test_arguments.py test_attribute_wrapper.py test_callable_object_proxy.py test_class.py test_class_py37.py test_copy.py test_decorators.py test_descriptors_py36.py test_formatargspec_py35.py test_formatargspec_py38.py test_function.py test_function_wrapper.py test_inheritance_py37.py test_inner_classmethod.py test_inner_staticmethod.py test_instancemethod.py test_memoize.py test_monkey_patching.py test_nested_function.py test_object_proxy.py test_outer_classmethod.py test_outer_staticmethod.py test_pickle.py test_post_import_hooks.py test_synchronized_lock.py test_update_attributes.py test_weak_function_proxy.py",
        "setup.py": "import os\nimport sys\nimport platform\nimport setuptools\n\n\n# # --- Detect if extensions should be disabled ------------------------------\n\nwrapt_env = os.environ.get('WRAPT_INSTALL_EXTENSIONS')\n\nif wrapt_env is None:\nwrapt_env = os.environ.get('WRAPT_EXTENSIONS')\n\nif wrapt_env is not None:\ndisable_extensions = wrapt_env.lower() == 'false'\nforce_extensions = wrapt_env.lower() == 'true'\nelse:\nif platform.system() == 'Windows' and sys.version_info[0] < 3:\ndisable_extensions = True\nforce_extensions = False\nelse:\ndisable_extensions = False\nforce_extensions = False\n\nif platform.python_implementation() != \"CPython\":\ndisable_extensions = True\n\n# --- C extension ------------------------------------------------------------\n\nextensions = [\nsetuptools.Extension(\n\"wrapt._wrappers\",\nsources=[\"src\/wrapt\/_wrappers.c\"],\noptional=not force_extensions,\n)\n]\n\n\n# --- Setup ------------------------------------------------------------------\n\nsetuptools.setup(\next_modules=[] if disable_extensions else extensions\n)\n"
    },
    {
        "package_name": "wrapt_timeout_decorator-1.3.12.2",
        "file_list": "CHANGES.rst LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py py.typed wrapt_timeout_decorator.py wrapt_timeout_decorator_cli.py wrap_function_multiprocess.py wrap_helper.py __init__.py __init__conf__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python3\n\nimport codecs\nimport os\nimport pathlib\nfrom typing import Any, List, Dict\n\nfrom setuptools import setup # type: ignore\nfrom setuptools import find_packages\n\n\ndef is_travis_deploy() -> bool:\nif os.getenv(\"DEPLOY_SDIST\", \"\") or os.getenv(\"DEPLOY_WHEEL\", \"\"):\nreturn is_tagged_commit()\nelse:\nreturn False\n\n\ndef is_tagged_commit() -> bool:\nif \"TRAVIS_TAG\" in os.environ:\nif os.environ[\"TRAVIS_TAG\"]:\nreturn True\nreturn False\n\n\ndef strip_links_from_required(l_required: List[str]) -> List[str]:\n\"\"\"\n>>> required = ['lib_regexp @ git+https:\/\/github.com\/bitranox\/lib_regexp.git', 'test']\n>>> assert strip_links_from_required(required) == ['lib_regexp', 'test']\n\n\"\"\"\nl_req_stripped: List[str] = list()\nfor req in l_required:\nreq_stripped = req.split(\"@\")[0].strip()\nl_req_stripped.append(req_stripped)\nreturn l_req_stripped\n\n\n# will be overwritten with long_description if exists !\nlong_description = \"The better timout decorator\"\npath_readme = pathlib.Path(__file__).parent \/ \"README.rst\"\n\nif path_readme.exists():\n# noinspection PyBroadException\ntry:\nreadme_content = codecs.open(str(path_readme), encoding=\"utf-8\").read()\nlong_description = readme_content\nexcept Exception:\npass\n\n\ndef get_requirements_from_file(requirements_filename: str) -> List[str]:\n\"\"\"\n>>> assert len(get_requirements_from_file('requirements.txt')) > 0\n\"\"\"\nl_requirements = list()\ntry:\nwith open(str(pathlib.Path(__file__).parent \/ requirements_filename), mode=\"r\") as requirements_file:\nfor line in requirements_file:\nline_data = get_line_data(line)\nif line_data:\nl_requirements.append(line_data)\nexcept FileNotFoundError:\npass\nreturn l_requirements\n\n\ndef get_line_data(line: str) -> str:\nline = line.strip()\nif \"#\" in line:\nline = line.split(\"#\", 1)[0].strip()\nreturn line\n\n\ntests_require = get_requirements_from_file(\"requirements_test.txt\")\ninstall_requires = get_requirements_from_file(\"requirements.txt\")\nsetup_requires = list(set(tests_require + install_requires))\n\n# for deploy on pypi we must not rely on imports from github\nif is_travis_deploy() and is_tagged_commit():\nsetup_requires = strip_links_from_required(setup_requires)\ntests_require = strip_links_from_required(tests_require)\ninstall_requires = strip_links_from_required(install_requires)\n\nsetup_kwargs: Dict[str, Any] = dict()\nsetup_kwargs[\"name\"] = \"wrapt_timeout_decorator\"\nsetup_kwargs[\"version\"] = \"v1.3.12.2\"\nsetup_kwargs[\"url\"] = \"https:\/\/github.com\/bitranox\/wrapt_timeout_decorator\"\nsetup_kwargs[\"packages\"] = find_packages()\nsetup_kwargs[\"package_data\"] = {\"wrapt_timeout_decorator\": [\"py.typed\", \"*.pyi\", \"__init__.pyi\"]}\nsetup_kwargs[\"description\"] = \"The better timout decorator\"\nsetup_kwargs[\"long_description\"] = long_description\nsetup_kwargs[\"long_description_content_type\"] = \"text\/x-rst\"\nsetup_kwargs[\"author\"] = \"Robert Nowotny\"\nsetup_kwargs[\"author_email\"] = \"bitranox@gmail.com\"\nsetup_kwargs[\"classifiers\"] = [\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Natural Language :: English\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n]\nsetup_kwargs[\"entry_points\"] = {\"console_scripts\": [\"wrapt_timeout_decorator = wrapt_timeout_decorator.wrapt_timeout_decorator_cli:cli_main\"]}\n# minimally needs to run tests - no project requirements here\nsetup_kwargs[\"tests_require\"] = tests_require\n# specify what a project minimally needs to run correctly\nsetup_kwargs[\"install_requires\"] = install_requires\n# minimally needs to run the setup script, dependencies needs also to put here for \"setup.py install test\"\n# dependencies must not be put here for pip install\nsetup_kwargs[\"setup_requires\"] = setup_requires\nsetup_kwargs[\"python_requires\"] = \">=3.6.0\"\nsetup_kwargs[\"zip_safe\"] = False\n\n\nif __name__ == \"__main__\":\nsetup(**setup_kwargs)\n"
    },
    {
        "package_name": "wurlitzer-3.0.2",
        "file_list": "Demo.ipynb dev-requirements.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py test.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt wurlitzer.py",
        "setup.py": "#!\/usr\/bin\/env python\nimport sys\n\nfrom setuptools import setup\nfrom setuptools.command.bdist_egg import bdist_egg\n\nwith open(\"README.md\") as f:\nlong_description = f.read()\n\nversion_ns = {}\nwith open(\"wurlitzer.py\") as f:\nfor line in f:\nif line.startswith(\"__version__\"):\nexec(line, version_ns)\n\n\nclass bdist_egg_disabled(bdist_egg):\n\"\"\"Disabled version of bdist_egg\n\nPrevents setup.py install from performing setuptools' default easy_install,\nwhich it should never ever do.\n\"\"\"\n\ndef run(self):\nsys.exit(\n\"Aborting implicit building of eggs. Use `pip install .` to install from source.\"\n)\n\n\nsetup_args = dict(\nname=\"wurlitzer\",\nversion=version_ns[\"__version__\"],\nauthor=\"Min RK\",\nauthor_email=\"benjaminrk@gmail.com\",\ndescription=\"Capture C-level output in context managers\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/minrk\/wurlitzer\",\npy_modules=[\"wurlitzer\"],\npython_requires=\">=3.5\",\nlicense=\"MIT\",\ncmdclass={\n\"bdist_egg\": bdist_egg if \"bdist_egg\" in sys.argv else bdist_egg_disabled\n},\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: MIT License\",\n\"Programming Language :: Python :: 3\",\n],\n)\n\nif __name__ == \"__main__\":\nsetup(**setup_args)\n"
    },
    {
        "package_name": "www-authenticate-0.9.2",
        "file_list": "PKG-INFO README.rst setup.cfg setup.py dependency_links.txt pbr.json PKG-INFO SOURCES.txt top_level.txt www_authenticate.py",
        "setup.py": "from setuptools import setup\n\nsetup(\nname='www-authenticate',\nversion='0.9.2',\ndescription='Parser for WWW-Authenticate headers.',\nlong_description=open('README.rst').read(),\nauthor='Alexander Dutton',\nauthor_email='www-authenticate-lib@alexdutton.co.uk',\nurl='https:\/\/github.com\/alexsdutton\/www-authenticate',\nlicense='BSD',\npy_modules=['www_authenticate'],\ntests_require=['nose'],\ntest_suite='nose.collector',\n)\n"
    },
    {
        "package_name": "xdoctest-1.0.1",
        "file_list": "CHANGELOG.md make.bat Makefile requirements.txt conf.py index.rst installing_python.rst modules.rst xdoctest.checker.rst xdoctest.constants.rst xdoctest.core.rst xdoctest.demo.rst xdoctest.directive.rst xdoctest.docstr.docscrape_google.rst xdoctest.docstr.docscrape_numpy.rst xdoctest.docstr.rst xdoctest.doctest_example.rst xdoctest.doctest_part.rst xdoctest.dynamic_analysis.rst xdoctest.exceptions.rst xdoctest.global_state.rst xdoctest.parser.rst xdoctest.plugin.rst xdoctest.rst xdoctest.runner.rst xdoctest.static_analysis.rst xdoctest.utils.rst xdoctest.utils.util_deprecation.rst xdoctest.utils.util_import.rst xdoctest.utils.util_misc.rst xdoctest.utils.util_mixins.rst xdoctest.utils.util_notebook.rst xdoctest.utils.util_path.rst xdoctest.utils.util_str.rst xdoctest.utils.util_stream.rst xdoc_with_jupyter.rst todo.rst LICENSE MANIFEST.in PKG-INFO pyproject.toml pytest.ini README.rst colors.txt docs.txt jupyter.txt optional.txt problematic.txt runtime.txt tests.txt requirements.txt run_doctests.sh run_tests.py setup.cfg setup.py checker.py checker.pyi constants.py constants.pyi core.py core.pyi demo.py demo.pyi directive.py directive.pyi docscrape_google.py docscrape_numpy.py __init__.py doctest_example.py doctest_example.pyi doctest_part.py doctest_part.pyi dynamic_analysis.py dynamic_analysis.pyi exceptions.py exceptions.pyi global_state.py global_state.pyi parser.py parser.pyi plugin.py plugin.pyi py.typed runner.py runner.pyi static_analysis.py static_analysis.pyi util_deprecation.py util_import.py util_misc.py util_mixins.py util_notebook.py util_path.py util_str.py util_stream.py __init__.py __init__.py __main__.py __main__.pyi dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt notebook_with_doctests.ipynb setup.py test_binary_ext.py test_cases.py test_checker.py test_core.py test_directive.py test_doctest_example.py test_doctest_in_notebook.ipynb test_dynamic.py test_entry_point.py test_errors.py test_import.py test_limitations.py test_notebook.py test_parser.py test_plugin.py test_pytest_cli.py test_runner.py test_static.py test_traceback.py",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\"\"\"\nTODO:\nlook into pbr for versioning?\n\"\"\"\nfrom setuptools import setup\nimport sys\nfrom os.path import exists\nfrom setuptools import find_packages\n\n\ndef parse_version(fpath):\n\"\"\"\nStatically parse the version number from a python file\n\"\"\"\nvalue = static_parse('__version__', fpath)\nreturn value\n\n\ndef static_parse(varname, fpath):\n\"\"\"\nStatically parse the a constant variable from a python file\n\"\"\"\nimport ast\n\nif not exists(fpath):\nraise ValueError('fpath={!r} does not exist'.format(fpath))\nwith open(fpath, 'r') as file_:\nsourcecode = file_.read()\npt = ast.parse(sourcecode)\n\nclass StaticVisitor(ast.NodeVisitor):\ndef visit_Assign(self, node):\nfor target in node.targets:\nif getattr(target, 'id', None) == varname:\nself.static_value = node.value.s\n\nvisitor = StaticVisitor()\nvisitor.visit(pt)\ntry:\nvalue = visitor.static_value\nexcept AttributeError:\nimport warnings\n\nvalue = 'Unknown {}'.format(varname)\nwarnings.warn(value)\nreturn value\n\n\ndef parse_description():\n\"\"\"\nParse the description in the README file\n\nCommandLine:\npandoc --from=markdown --to=rst --output=README.rst README.md\npython -c \"import setup; print(setup.parse_description())\"\n\"\"\"\nfrom os.path import dirname, join, exists\n\nreadme_fpath = join(dirname(__file__), 'README.rst')\n# This breaks on pip install, so check that it exists.\nif exists(readme_fpath):\nwith open(readme_fpath, 'r') as f:\ntext = f.read()\nreturn text\nreturn ''\n\n\ndef parse_requirements(fname='requirements.txt', versions=False):\n\"\"\"\nParse the package dependencies listed in a requirements file but strips\nspecific versioning information.\n\nArgs:\nfname (str): path to requirements file\nversions (bool | str, default=False):\nIf true include version specs.\nIf strict, then pin to the minimum version.\n\nReturns:\nList[str]: list of requirements items\n\"\"\"\nfrom os.path import exists, dirname, join\nimport re\n\nrequire_fpath = fname\n\ndef parse_line(line, dpath=''):\n\"\"\"\nParse information from a line in a requirements text file\n\nline = 'git+https:\/\/a.com\/somedep@sometag#egg=SomeDep'\nline = '-e git+https:\/\/a.com\/somedep@sometag#egg=SomeDep'\n\"\"\"\n# Remove inline comments\ncomment_pos = line.find(' #')\nif comment_pos > -1:\nline = line[:comment_pos]\n\nif line.startswith('-r '):\n# Allow specifying requirements in other files\ntarget = join(dpath, line.split(' ')[1])\nfor info in parse_require_file(target):\nyield info\nelse:\n# See: https:\/\/www.python.org\/dev\/peps\/pep-0508\/\ninfo = {'line': line}\nif line.startswith('-e '):\ninfo['package'] = line.split('#egg=')[1]\nelse:\nif ';' in line:\npkgpart, platpart = line.split(';')\n# Handle platform specific dependencies\n# setuptools.readthedocs.io\/en\/latest\/setuptools.html\n# #declaring-platform-specific-dependencies\nplat_deps = platpart.strip()\ninfo['platform_deps'] = plat_deps\nelse:\npkgpart = line\nplatpart = None\n\n# Remove versioning from the package\npat = '(' + '|'.join(['>=', '==', '>']) + ')'\nparts = re.split(pat, pkgpart, maxsplit=1)\nparts = [p.strip() for p in parts]\n\ninfo['package'] = parts[0]\nif len(parts) > 1:\nop, rest = parts[1:]\nversion = rest # NOQA\ninfo['version'] = (op, version)\nyield info\n\ndef parse_require_file(fpath):\ndpath = dirname(fpath)\nwith open(fpath, 'r') as f:\nfor line in f.readlines():\nline = line.strip()\nif line and not line.startswith('#'):\nfor info in parse_line(line, dpath=dpath):\nyield info\n\ndef gen_packages_items():\nif exists(require_fpath):\nfor info in parse_require_file(require_fpath):\nparts = [info['package']]\nif versions and 'version' in info:\nif versions == 'strict':\n# In strict mode, we pin to the minimum version\nif info['version']:\n# Only replace the first >= instance\nverstr = ''.join(info['version']).replace('>=', '==', 1)\nparts.append(verstr)\nelse:\nparts.extend(info['version'])\nif not sys.version.startswith('3.4'):\n# apparently package_deps are broken in 3.4\nplat_deps = info.get('platform_deps')\nif plat_deps is not None:\nparts.append(';' + plat_deps)\nitem = ''.join(parts)\nyield item\n\npackages = list(gen_packages_items())\nreturn packages\n\n\nNAME = 'xdoctest'\nVERSION = parse_version('src\/xdoctest\/__init__.py')\n\nif __name__ == '__main__':\nsetupkw = {}\nsetupkw['install_requires'] = parse_requirements('requirements\/runtime.txt')\nsetupkw['extras_require'] = {\n'all': parse_requirements('requirements.txt'),\n'tests': parse_requirements('requirements\/tests.txt'),\n'optional': parse_requirements('requirements\/optional.txt'),\n'all-strict': parse_requirements('requirements.txt', versions='strict'),\n'runtime-strict': parse_requirements(\n'requirements\/runtime.txt', versions='strict'\n),\n'tests-strict': parse_requirements('requirements\/tests.txt', versions='strict'),\n'optional-strict': parse_requirements(\n'requirements\/optional.txt', versions='strict'\n),\n'colors': parse_requirements('requirements\/colors.txt'),\n'jupyter': parse_requirements('requirements\/jupyter.txt'),\n}\n\nsetupkw['name'] = NAME\nsetupkw['version'] = VERSION\nsetupkw['author'] = 'Jon Crall'\nsetupkw['author_email'] = 'erotemic@gmail.com'\nsetupkw['url'] = 'https:\/\/github.com\/Erotemic\/xdoctest'\nsetupkw['description'] = 'A rewrite of the builtin doctest module'\nsetupkw['long_description'] = parse_description()\nsetupkw['long_description_content_type'] = 'text\/x-rst'\nsetupkw['license'] = 'Apache 2'\nsetupkw['python_requires'] = '>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4'\nsetupkw['classifiers'] = [\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'Topic :: Software Development :: Libraries :: Python Modules',\n'Topic :: Utilities',\n'Topic :: Software Development :: Testing',\n'Framework :: Pytest',\n# This should be interpreted as Apache License v2.0\n'License :: OSI Approved :: Apache Software License',\n# Supported Python versions\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Programming Language :: Python :: Implementation :: CPython',\n]\n# https:\/\/codefellows.github.io\/sea-python-401d4\/lectures\/python_packaging_1.html\n# We use a key of an empty string to indicate that the directory we are\n# pointing to should be considered the root. Then the value is src, telling\n# setuptools to use that directory as the root of our source.\nsetupkw['package_dir'] = {\n'': 'src',\n}\nsetupkw['packages'] = find_packages('src')\nsetupkw['package_data'] = {\n'xdoctest': ['py.typed', '*.pyi'],\n}\nsetupkw['entry_points'] = {\n'console_scripts': [\n'xdoctest = xdoctest.__main__:main',\n],\n'pytest11': [\n'xdoctest = xdoctest.plugin',\n],\n}\nif sys.version_info[0] == 3 and sys.version_info[1] <= 4:\nsetupkw.pop('long_description_content_type', None)\nsetup(**setupkw)\n"
    },
    {
        "package_name": "XlsxWriter-3.0.3",
        "file_list": "Changes readme.html basic.css default.css hello01.png logo.png pygments.css array_formula.py autofilter.py autofilter_data.txt background.py cell_indentation.py chart.py chartsheet.py chart_area.py chart_bar.py chart_clustered.py chart_column.py chart_combined.py chart_data_labels.py chart_data_table.py chart_data_tools.py chart_date_axis.py chart_doughnut.py chart_gauge.py chart_gradient.py chart_line.py chart_pareto.py chart_pattern.py chart_pie.py chart_radar.py chart_scatter.py chart_secondary_axis.py chart_stock.py chart_styles.py check_close.py comments1.py comments2.py conditional_format.py context_manager.py data_validate.py datetimes.py defined_name.py demo.py diagonal_border.py django_simple.py doc_properties.py dynamic_arrays.py headers_footers.py hello_world.py hide_row_col.py hide_sheet.py http_server.py hyperlink.py ignore_errors.py images.py images_bytesio.py inheritance1.py inheritance2.py lambda.py macros.py merge1.py merge_rich_string.py outline.py outline_collapsed.py pandas_autofilter.py pandas_chart.py pandas_chart_columns.py pandas_chart_line.py pandas_column_formats.py pandas_conditional_format.py pandas_datetime.py pandas_header_format.py pandas_multiple.py pandas_percentage.py pandas_positioning.py pandas_simple.py pandas_table.py panes.py rich_strings.py right_to_left.py sparklines1.py sparklines2.py tables.py tab_colors.py textbox.py text_indent.py tutorial1.py tutorial2.py tutorial3.py unicode.py unicode_polish_utf8.py unicode_polish_utf8.txt unicode_shift_jis.py unicode_shift_jis.txt user_types1.py user_types2.py user_types3.py vbaProject.bin vba_extract.py watermark.py worksheet_protection.py LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py app.py chart.py chartsheet.py chart_area.py chart_bar.py chart_column.py chart_doughnut.py chart_line.py chart_pie.py chart_radar.py chart_scatter.py chart_stock.py comments.py contenttypes.py core.py custom.py drawing.py exceptions.py format.py metadata.py packager.py relationships.py shape.py sharedstrings.py styles.py table.py theme.py utility.py vml.py workbook.py worksheet.py xmlwriter.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "import sys\nimport subprocess\nfrom warnings import warn\n\ntry:\nfrom setuptools import setup, Command\nexcept ImportError:\nfrom distutils.core import setup, Command\n\nif sys.version_info < (3, 4, 0):\nwarn(\"The minimum Python version supported by XlsxWriter is 3.4.2\")\nexit()\n\n\nclass PyTest(Command):\n\nuser_options = []\n\ndef initialize_options(self):\npass\n\ndef finalize_options(self):\npass\n\ndef run(self):\nerrno = subprocess.call(['python', '-m', 'unittest', 'discover'])\nraise SystemExit(errno)\n\nsetup(\nname='XlsxWriter',\nversion='3.0.3',\nauthor='John McNamara',\nauthor_email='jmcnamara@cpan.org',\nurl='https:\/\/github.com\/jmcnamara\/XlsxWriter',\npackages=['xlsxwriter'],\nscripts=['examples\/vba_extract.py'],\ncmdclass={'test': PyTest},\nlicense='BSD-2-Clause',\ndescription='A Python module for creating Excel XLSX files.',\nlong_description=open('README.rst').read(),\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'License :: OSI Approved :: BSD License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n],\npython_requires='>=3.4',\n)\n"
    },
    {
        "package_name": "xlwings-0.27.12",
        "file_list": "LICENSE.txt LICENSE_PRO.txt MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py Dictionary.cls IWebAuthenticator.cls WebClient.cls WebHelpers.bas WebRequest.cls WebResponse.cls xlwings.xlam base_classes.py cli.py constants.py framework.py numpy_conv.py pandas_conv.py standard.py __init__.py expansion.py sql.py __init__.py xlwings.js xlwings.ts mac_dict.py main.py block_parser.py admonition.py base.py include.py toc.py __init__.py inline_parser.py markdown.py abbr.py def_list.py extra.py footnotes.py table.py task_lists.py __init__.py renderers.py scanner.py util.py __init__.py embedded_code.py module_permissions.py filters.py image.py main.py markdown.py pdf.py __init__.py utils.py _xljson.py __init__.py quickstart.xlsm quickstart_addin.xlam quickstart_addin_ribbon.xlam app.py main.py requirements.txt quickstart_standalone.xlsm api.py serializers.py __init__.py server.py udfs.py utils.py xlwings-0.27.12.applescript xlwings.bas _win32patch.py _xlmac.py _xlwindows.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt xlwings32-0.27.12.dll xlwings64-0.27.12.dll",
        "setup.py": "import os\nimport sys\nimport re\nimport glob\nfrom setuptools import setup, find_packages\n\n# long_description: Take from README file\nwith open(os.path.join(os.path.dirname(__file__), \"README.rst\")) as f:\nreadme = f.read()\n\n# Version Number\nwith open(os.path.join(os.path.dirname(__file__), \"xlwings\", \"__init__.py\")) as f:\nversion = re.compile(r'.*__version__ = \"(.*?)\"', re.S).match(f.read()).group(1)\n\n# Dependencies\ndata_files = []\ninstall_requires = [\n\"pywin32 >= 224;platform_system=='Windows'\",\n\"psutil >= 2.0.0;platform_system=='Darwin'\",\n\"appscript >= 1.0.1;platform_system=='Darwin'\",\n]\nif os.environ.get(\"READTHEDOCS\", None) == \"True\" or os.environ.get(\n\"XLWINGS_NO_DEPS\"\n) in [\"1\", \"True\", \"true\"]:\n# Don't add any further dependencies. Instead of using an env var,\n# you could also run: pip install xlwings --no-deps\n# but when running \"pip install -r requirements.txt --no-deps\" this would be\n# applied to all packages, which may not be what you want in case the\n# sub-dependencies are not pinned\npass\nelif sys.platform.startswith(\"win\"):\n# This places dlls next to python.exe for standard setup\n# and in the parent folder for virtualenv\ndata_files += [(\"\", glob.glob(\"xlwings??-*.dll\"))]\nelif sys.platform.startswith(\"darwin\"):\n# This has been broken ever since pip builds a wheel for installing as this uses\n# an absolute path. Relative paths as in the case of Windows are still supported.\n# These days taken care of by \"xlwings addin install\" or \"xlwings runpython install\"\ndata_files = [\n(\nos.path.expanduser(\"~\")\n+ \"\/Library\/Application Scripts\/com.microsoft.Excel\",\n[f\"xlwings\/xlwings-{version}.applescript\"],\n)\n]\nelse:\npass\n\nextras_require = {\n\"pro\": [\"cryptography\"],\n\"reports\": [\"cryptography\", \"Jinja2\", \"pdfrw\"],\n\"all\": [\n\"cryptography\",\n\"Jinja2\",\n\"pandas\",\n\"matplotlib\",\n\"plotly\",\n\"flask\",\n\"requests\",\n\"pdfrw\",\n],\n}\n\nsetup(\nname=\"xlwings\",\nversion=version,\nurl=\"https:\/\/www.xlwings.org\",\nproject_urls={\n\"Source\": \"https:\/\/github.com\/xlwings\/xlwings\",\n\"Documentation\": \"https:\/\/docs.xlwings.org\",\n},\nlicense=\"BSD 3-clause\",\nauthor=\"Zoomer Analytics LLC\",\nauthor_email=\"felix.zumstein@zoomeranalytics.com\",\ndescription=\"Make Excel fly: Interact with Excel from Python and vice versa.\",\nlong_description=readme,\ndata_files=data_files,\npackages=find_packages(\nexclude=(\n\"tests\",\n\"tests.*\",\n)\n),\npackage_data={\n\"xlwings\": [\n\"xlwings.bas\",\n\"*.xlsm\",\n\"*.xlam\",\n\"*.applescript\",\n\"addin\/xlwings.xlam\",\n\"addin\/*.cls\",\n\"addin\/WebHelpers.bas\",\n\"js\/xlwings.*\",\n\"quickstart_fastapi\/*.*\",\n]\n},\nkeywords=[\"xls\", \"excel\", \"spreadsheet\", \"workbook\", \"vba\", \"macro\"],\ninstall_requires=install_requires,\nextras_require=extras_require,\nentry_points={\n\"console_scripts\": [\"xlwings=xlwings.cli:main\"],\n},\nclassifiers=[\n\"Development Status :: 4 - Beta\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Topic :: Office\/Business :: Financial :: Spreadsheet\",\n\"License :: OSI Approved :: BSD License\",\n],\npython_requires=\">=3.6\",\n)\n"
    },
    {
        "package_name": "xmldiff-2.4",
        "file_list": ".coveragerc .coveralls.yml .travis.yml CHANGES.rst make.bat Makefile requirements.txt advanced.rst api.rst commandline.rst conf.py contributing.rst index.rst installation.rst htmlformatter.xslt LICENSE.txt Makefile MANIFEST.in PKG-INFO README.rst README.txt setup.cfg setup.py testing.py all_actions.expected.xml all_actions.left.xml all_actions.right.xml complex-text-update.expected.html complex-text-update.left.html complex-text-update.right.html example.expected.html example.left.html example.right.html insert-node.diff insert-node.expected.html insert-node.left.html insert-node.right.html rmldoc.expected.xml rmldoc.left.xml rmldoc.right.xml sbt_template.expected.xml sbt_template.left.xml sbt_template.right.xml test_diff.py test_formatting.py test_main.py test_patch.py test_utils.py __init__.py actions.py diff.py diff_match_patch.py formatting.py main.py patch.py utils.py _diff_match_patch_py2.py _diff_match_patch_py3.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "from io import open\nfrom setuptools import setup, find_packages\n\nversion = '2.4'\n\nwith open('README.rst', 'rt', encoding='utf8') as readme:\ndescription = readme.read()\n\nwith open('CHANGES.rst', 'rt', encoding='utf8') as changes:\nhistory = changes.read()\n\n\nsetup(name='xmldiff',\nversion=version,\ndescription=\"Creates diffs of XML files\",\nlong_description=description + '\\n' + history,\n# Get strings from http:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\nclassifiers=['Development Status :: 5 - Production\/Stable',\n'Topic :: Text Processing :: Markup :: XML',\n'Operating System :: OS Independent',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'License :: OSI Approved :: MIT License',\n],\nkeywords='xml html diff',\nauthor='Lennart Regebro',\nauthor_email='lregebro@shoobx.com',\nurl='https:\/\/github.com\/Shoobx\/xmldiff',\nlicense='MIT',\npackages=find_packages(exclude=['doc', 'tests']),\ninclude_package_data=True,\nzip_safe=False,\ninstall_requires=[\n'setuptools',\n'lxml>=3.1.0',\n'six',\n],\ntest_suite='tests',\nentry_points={\n'console_scripts': [\n'xmldiff = xmldiff.main:diff_command',\n'xmlpatch = xmldiff.main:patch_command',\n],\n},\n)\n"
    },
    {
        "package_name": "xyzservices-2022.6.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py versioneer.py providers.json __init__.py lib.py providers.py test_lib.py test_providers.py __init__.py _version.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "import setuptools\nimport versioneer\n\n\nwith open(\"README.md\", \"r\", encoding=\"utf8\") as fh:\nlong_description = fh.read()\n\nsetuptools.setup(\nname=\"xyzservices\",\ndescription=\"Source of XYZ tiles providers\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/geopandas\/xyzservices\",\nauthor=\"Dani Arribas-Bel, Martin Fleischmann\",\nauthor_email=\"daniel.arribas.bel@gmail.com, martin@martinfleischmann.net\",\nlicense=\"3-Clause BSD\",\npackages=setuptools.find_packages(exclude=[\"tests\"]),\npython_requires=\">=3.7\",\ninclude_package_data=True,\npackage_data={\n\"xyzservices\": [\"data\/providers.json\"],\n},\nclassifiers=[\n\"License :: OSI Approved :: BSD License\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3 :: Only\",\n],\nversion=versioneer.get_version(),\ncmdclass=versioneer.get_cmdclass(),\ndata_files=[(\"share\/xyzservices\", [\"xyzservices\/data\/providers.json\"])],\n)\n"
    },
    {
        "package_name": "Yapsy-1.12.2",
        "file_list": "LICENSE.txt yapsy-big.png yapsy-favicon.ico yapsy-favicon.png yapsy.png yapsy.svg CHANGELOG.txt Advices.rst AutoInstallPluginManager.rst conf.py ConfigurablePluginManager.rst Extensions.rst FilteredPluginManager.rst IMultiprocessChildPlugin.rst index.rst IPlugin.rst IPluginLocator.rst make.bat Makefile MultiprocessPluginManager.rst MultiprocessPluginProxy.rst PluginFileLocator.rst PluginInfo.rst PluginManager.rst PluginManagerDecorator.rst VersionedPluginManager.rst LICENSE.txt MANIFEST.in PKG-INFO README.txt runtests.py setup.cfg setup.py ConfigPlugin.py configplugin.yapsy-config-plugin configplugin.yapsy-filter-plugin ErroneousPlugin.py erroneousplugin.yapsy-error-plugin legacymultiprocessplugin.multiprocess-plugin LegacyMultiprocessPlugin.py simplemultiprocessplugin.multiprocess-plugin SimpleMultiprocessPlugin.py SimplePlugin.py simpleplugin.yapsy-filter-plugin simpleplugin.yapsy-plugin versioned10.version-plugin versioned11.version-plugin versioned111.version-plugin versioned12.version-plugin versioned12a1.version-plugin VersionedPlugin10.py VersionedPlugin11.py VersionedPlugin111.py VersionedPlugin12.py VersionedPlugin12a1.py __init__.py simpleplugin.yapsy-plugin __init__.py autoinstalldirplugin.yapsy-autoinstall-plugin AutoInstallPlugin.py autoinstallplugin.yapsy-autoinstall-plugin autoinstallWRONGzipplugin.zip autoinstallZIPplugin.zip test_All.py test_AutoInstallPlugin.py test_ConfigPlugin.py test_ErrorInPlugin.py test_FilterPlugin.py test_PluginFileLocator.py test_PluginInfo.py test_settings.py test_SimpleMultiprocessPlugin.py test_SimplePlugin.py test_Singleton.py test_VersionedPlugin.py __init__.py AutoInstallPluginManager.py compat.py ConfigurablePluginManager.py FilteredPluginManager.py IMultiprocessChildPlugin.py IMultiprocessPlugin.py IPlugin.py IPluginLocator.py MultiprocessPluginManager.py MultiprocessPluginProxy.py PluginFileLocator.py PluginInfo.py PluginManager.py PluginManagerDecorator.py VersionedPluginManager.py __init__.py __init___flymake.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/python\n# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: t -*-\n\n\"\"\"\nThe setup.py script needed to build a .egg for an easier distribution\nand installation of yapsy.\n\nRequires 'Easy Install' to be installed :)\nsee there: http:\/\/peak.telecommunity.com\/DevCenter\/EasyInstall#installation-instructions\n\nThen to create a package run:\n$ python setup.py bdist_egg\n\nTo use the generated .egg file then:\neasy_install Yapsy-{yapsy version}-py{python version}.egg\n\nAutomagical stuff:\n\n- test everything::\n\npython setup.py test\n\n- build the packages (sources an egg) and upload all the stuff to pypi::\n\npython setup.py sdist bdist_egg upload\n\n- build the documentation\n\npython setup.py build_sphinx\n\"\"\"\n\nimport os\nfrom setuptools import setup\n\n# just in case setup.py is launched from elsewhere that the containing directory\noriginalDir = os.getcwd()\nos.chdir(os.path.dirname(os.path.abspath(__file__)))\ntry:\nsetup(\nname = \"Yapsy\",\nversion = __import__(\"yapsy\").__version__,\npackages = ['yapsy'],\npackage_dir = {'yapsy':'yapsy'},\n\n# the unit tests\ntest_suite = \"test.test_All.MainTestSuite\",\n\n# metadata for upload to PyPI\nauthor = \"Thibauld Nion\",\nauthor_email = \"thibauld@tibonihoo.net\",\ndescription = \"Yet another plugin system\",\nlicense = \"BSD\",\nkeywords = \"plugin manager\",\nurl = \"http:\/\/yapsy.sourceforge.net\",\n# more details\nlong_description = open(\"README.txt\").read(),\nclassifiers=['Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: BSD License',\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 3',\n'Topic :: Software Development :: Libraries :: Python Modules'],\nplatforms='All',\n)\n\nfinally:\nos.chdir(originalDir)\n"
    },
    {
        "package_name": "yarl-1.8.1",
        "file_list": "CHANGES.rst api.rst conf.py index.rst make.bat Makefile spelling_wordlist.txt yarl-icon-128x128.xcf yarl-icon-128x128.png LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py test_cache.py test_cached_property.py test_normalize_path.py test_pickle.py test_quoting.py test_update_query.py test_url.py test_url_build.py test_url_cmp_and_hash.py test_url_parsing.py test_url_query.py test_url_update_netloc.py py.typed _quoting.py _quoting_c.c _quoting_c.pyi _quoting_c.pyx _quoting_py.py _url.py __init__.py __init__.pyi dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "import os\nimport pathlib\nimport re\nimport sys\n\nfrom setuptools import Extension, setup\n\nNO_EXTENSIONS = bool(os.environ.get(\"YARL_NO_EXTENSIONS\")) # type: bool\n\nif sys.implementation.name != \"cpython\":\nNO_EXTENSIONS = True\n\n\nextensions = [Extension(\"yarl._quoting_c\", [\"yarl\/_quoting_c.c\"])]\n# extra_compile_args=[\"-g\"],\n# extra_link_args=[\"-g\"],\n\n\nhere = pathlib.Path(__file__).parent\nfname = here \/ \"yarl\" \/ \"__init__.py\"\n\nwith fname.open(encoding=\"utf8\") as fp:\ntry:\nversion = re.findall(r'^__version__ = \"([^\"]+)\"$', fp.read(), re.M)[0]\nexcept IndexError:\nraise RuntimeError(\"Unable to determine version.\")\n\ninstall_requires = [\n\"multidict>=4.0\",\n\"idna>=2.0\",\n'typing-extensions>=3.7.4;python_version<\"3.8\"',\n]\n\n\ndef read(name):\nfname = here \/ name\nwith fname.open(encoding=\"utf8\") as f:\nreturn f.read()\n\n\n# $ echo ':something:`test <sdf>`' | sed 's\/:\\w\\+:`\\(\\w\\+\\)\\(\\s\\+\\(.*\\)\\)\\?`\/``\\1``\/g'\n# ``test``\ndef sanitize_rst_roles(rst_source_text: str) -> str:\n\"\"\"Replace RST roles with inline highlighting.\"\"\"\nrole_regex = r\":\\w+:`(?P<rendered_text>[^`]+)(\\s+(.*))?`\"\nsubstitution_pattern = r\"``(?P=rendered_text)``\"\nreturn re.sub(role_regex, substitution_pattern, rst_source_text)\n\n\nargs = dict(\nname=\"yarl\",\nversion=version,\ndescription=(\"Yet another URL library\"),\nlong_description=\"\\n\\n\".join(\n[read(\"README.rst\"), sanitize_rst_roles(read(\"CHANGES.rst\"))]\n),\nlong_description_content_type=\"text\/x-rst\",\nclassifiers=[\n\"License :: OSI Approved :: Apache Software License\",\n\"Intended Audience :: Developers\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Programming Language :: Python :: 3.10\",\n\"Programming Language :: Python :: 3.11\",\n\"Topic :: Internet :: WWW\/HTTP\",\n],\nauthor=\"Andrew Svetlov\",\nauthor_email=\"andrew.svetlov@gmail.com\",\nurl=\"https:\/\/github.com\/aio-libs\/yarl\/\",\nlicense=\"Apache 2\",\npackages=[\"yarl\"],\ninstall_requires=install_requires,\npython_requires=\">=3.7\",\ninclude_package_data=True,\nexclude_package_data={\"\": [\"*.c\"]},\n)\n\n\nif not NO_EXTENSIONS:\nprint(\"**********************\")\nprint(\"* Accelerated build *\")\nprint(\"**********************\")\nsetup(ext_modules=extensions, **args)\nelse:\nprint(\"*********************\")\nprint(\"* Pure Python build *\")\nprint(\"*********************\")\nsetup(**args)\n"
    },
    {
        "package_name": "yattag-1.14.0",
        "file_list": "COPYING lgpl-2.1.txt PKG-INFO README.rst setup.py tests_doc.py tests_indentation.py tests_simpledoc.py doc.py indentation.py py.typed simpledoc.py __init__.py",
        "setup.py": "from distutils.core import setup\n\nwith open('README.rst') as fd:\nlong_description = fd.read()\n\nsetup(\nname='yattag',\nversion='1.14.0',\npackage_data={\"yattag\": [\"py.typed\"]},\npackages=['yattag'],\ninstall_requires=[\n'typing;python_version<\"3.5\"',\n],\nauthor = 'Benjamin Le Forestier',\nauthor_email = 'benjamin@leforestier.org',\nurl = 'https:\/\/www.yattag.org',\nkeywords = [\"html\", \"template\", \"templating\", \"xml\", \"document\", \"form\", \"rendering\"],\ndescription = \"\"\"\\\nGenerate HTML or XML in a pythonic way. Pure python alternative to web template engines.\\\nCan fill HTML forms with default values and error messages.\"\"\",\nlong_description = long_description,\nclassifiers = [\n'Environment :: Web Environment',\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)\",\n'Operating System :: OS Independent',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Programming Language :: Python :: 3.4',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Topic :: Internet :: WWW\/HTTP',\n'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n'Topic :: Software Development :: Libraries :: Python Modules',\n]\n)\n"
    },
    {
        "package_name": "zappa-0.55.0",
        "file_list": "LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py async.py asynchronous.py cli.py core.py django_zappa.py __init__.py handler.py letsencrypt.py middleware.py policies.py utilities.py wsgi.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "from configparser import ConfigParser\nfrom io import open\nfrom pathlib import Path\n\nfrom setuptools import setup\n\nfrom zappa import __version__\n\nwith open(\"README.md\", encoding=\"utf-8\") as readme_file:\nlong_description = readme_file.read()\n\npipfile = ConfigParser()\npipfile.read(Path(__file__).parent.resolve() \/ \"Pipfile\")\nrequired = [\n\"{}{}\".format(name, version.strip('\"')) if version != '\"*\"' else name for name, version in pipfile[\"packages\"].items()\n]\ntest_required = [\n\"{}{}\".format(name, version.strip('\"')) if version != '\"*\"' else name for name, version in pipfile[\"dev-packages\"].items()\n]\n\nsetup(\nname=\"zappa\",\nversion=__version__,\npackages=[\"zappa\"],\ninstall_requires=required,\npython_requires=\">=3.7, <3.10\",\ntests_require=test_required,\ntest_suite=\"nose.collector\",\ninclude_package_data=True,\nlicense=\"MIT License\",\ndescription=\"Server-less Python Web Services for AWS Lambda and API Gateway\",\nlong_description=long_description,\nlong_description_content_type=\"text\/markdown\",\nurl=\"https:\/\/github.com\/zappa\/Zappa\",\nauthor=\"Rich Jones\",\nauthor_email=\"rich@openwatch.net\",\nentry_points={\n\"console_scripts\": [\n\"zappa=zappa.cli:handle\",\n\"z=zappa.cli:handle\",\n]\n},\nclassifiers=[\n\"Environment :: Console\",\n\"License :: OSI Approved :: Apache Software License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: 3.9\",\n\"Framework :: Django\",\n\"Framework :: Django :: 1.11\",\n\"Framework :: Django :: 2.0\",\n\"Framework :: Django :: 3.0\",\n\"Topic :: Internet :: WWW\/HTTP\",\n\"Topic :: Internet :: WWW\/HTTP :: Dynamic Content\",\n],\n)\n"
    },
    {
        "package_name": "zc.lockfile-2.0",
        "file_list": ".gitignore .travis.yml bootstrap.py buildout.cfg CHANGES.rst COPYRIGHT.txt LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py README.txt tests.py __init__.py __init__.py dependency_links.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt tox.ini",
        "setup.py": "##############################################################################\n#\n# Copyright (c) Zope Corporation and Contributors.\n# All Rights Reserved.\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL). A copy of the ZPL should accompany this distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE.\n#\n##############################################################################\n\nversion = '2.0'\n\nimport os\nfrom setuptools import setup, find_packages\nimport sys\n\n# Use unittest.mock in Python >= 3.3, or the mock package from PyPI on < 3.3\nCONDITIONAL_TEST_REQUIREMENTS = ['mock'] if sys.version_info < (3, 3) else []\n\ndef read(*rnames):\nreturn open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n\nlong_description=(\nread('README.rst')\n+ '\\n' +\n'Detailed Documentation\\n'\n'**********************\\n'\n+ '\\n' +\nread('src', 'zc', 'lockfile', 'README.txt')\n+ '\\n' +\nread('CHANGES.rst')\n)\n\nsetup(\nname = 'zc.lockfile',\nversion=version,\nauthor = \"Zope Foundation\",\nauthor_email = \"zope-dev@zope.org\",\ndescription = \"Basic inter-process locks\",\nlong_description=long_description,\nlicense = \"ZPL 2.1\",\nkeywords = \"lock\",\nurl='https:\/\/github.com\/zopefoundation\/zc.lockfile',\npackages = find_packages('src'),\npackage_dir = {'': 'src'},\nnamespace_packages = ['zc'],\ninstall_requires = 'setuptools',\nextras_require=dict(\ntest=CONDITIONAL_TEST_REQUIREMENTS + [\n'zope.testing',\n]),\nclassifiers = [\n'Development Status :: 5 - Production\/Stable',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Zope Public License',\n'Natural Language :: English',\n'Operating System :: POSIX',\n'Operating System :: Microsoft :: Windows',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Topic :: Software Development',\n],\ntest_suite=\"zc.lockfile.tests.test_suite\",\ntests_require=CONDITIONAL_TEST_REQUIREMENTS + [\n'zope.testing'],\ninclude_package_data = True,\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "zc.recipe.egg-2.0.7",
        "file_list": "CHANGES.rst MANIFEST.in PKG-INFO README.rst setup.cfg setup.py api.rst custom.py custom.rst egg.py README.rst tests.py working_set_caching.rst __init__.py __init__.py __init__.py dependency_links.txt entry_points.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "##############################################################################\n#\n# Copyright (c) 2007 Zope Foundation and Contributors.\n# All Rights Reserved.\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL). A copy of the ZPL should accompany this distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE.\n#\n##############################################################################\n\"\"\"Setup for zc.recipe.egg package\n\"\"\"\n\nversion = '2.0.7'\n\nimport os\nfrom setuptools import setup, find_packages\n\ndef read(*rnames):\nreturn open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n\nname = \"zc.recipe.egg\"\nsetup(\nname = name,\nversion = version,\nauthor = \"Jim Fulton\",\nauthor_email = \"jim@zope.com\",\ndescription = \"Recipe for installing Python package distributions as eggs\",\nlong_description = (\nread('README.rst')\n+ '\\n' +\nread('CHANGES.rst')\n+ '\\n' +\n'Detailed Documentation\\n'\n'**********************\\n'\n+ '\\n' +\nread('src', 'zc', 'recipe', 'egg', 'README.rst')\n+ '\\n' +\nread('src', 'zc', 'recipe', 'egg', 'custom.rst')\n+ '\\n' +\nread('src', 'zc', 'recipe', 'egg', 'api.rst')\n+ '\\n' +\nread('src', 'zc', 'recipe', 'egg', 'working_set_caching.rst')\n+ '\\n' +\n'Download\\n'\n'*********\\n'\n),\nkeywords = \"development build\",\nclassifiers = [\n'Development Status :: 5 - Production\/Stable',\n'Framework :: Buildout',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Zope Public License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.6',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.2',\n'Programming Language :: Python :: 3.3',\n'Topic :: Software Development :: Build Tools',\n'Topic :: Software Development :: Libraries :: Python Modules',\n],\nurl='http:\/\/cheeseshop.python.org\/pypi\/zc.recipe.egg',\nlicense = \"ZPL 2.1\",\n\npackages = find_packages('src'),\npackage_dir = {'':'src'},\nnamespace_packages = ['zc', 'zc.recipe'],\ninstall_requires = [\n'zc.buildout >=2.12.0',\n'setuptools'],\ntests_require = ['zope.testing'],\ntest_suite = name+'.tests.test_suite',\nentry_points = {'zc.buildout': ['default = %s:Scripts' % name,\n'script = %s:Scripts' % name,\n'scripts = %s:Scripts' % name,\n'eggs = %s:Eggs' % name,\n'custom = %s:Custom' % name,\n'develop = %s:Develop' % name,\n]\n},\ninclude_package_data = True,\nzip_safe=False,\n)\n"
    },
    {
        "package_name": "zeroconf-0.39.0",
        "file_list": "COPYING MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py asyncio.py const.py py.typed _cache.py _core.py _dns.py _exceptions.py _handlers.py _history.py _logger.py incoming.py outgoing.py __init__.py browser.py info.py registry.py types.py __init__.py _updates.py asyncio.py name.py net.py time.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python3\nfrom io import open\nfrom os.path import abspath, dirname, join\n\nfrom setuptools import setup\n\nPROJECT_ROOT = abspath(dirname(__file__))\nwith open(join(PROJECT_ROOT, 'README.rst'), encoding='utf-8') as f:\nreadme = f.read()\n\nversion = (\n[ln for ln in open(join(PROJECT_ROOT, 'zeroconf', '__init__.py')) if '__version__' in ln][0]\n.split('=')[-1]\n.strip()\n.strip('\\'\"')\n)\n\nsetup(\nname='zeroconf',\nversion=version,\ndescription='Pure Python Multicast DNS Service Discovery Library ' '(Bonjour\/Avahi compatible)',\nlong_description=readme,\nauthor='Paul Scott-Murphy, William McBrine, Jakub Stasiak',\nurl='https:\/\/github.com\/jstasiak\/python-zeroconf',\npackage_data={\"zeroconf\": [\"py.typed\"]},\npackages=[\"zeroconf\", \"zeroconf._protocol\", \"zeroconf._services\", \"zeroconf._utils\"],\nplatforms=['unix', 'linux', 'osx'],\nlicense='LGPL',\nzip_safe=False,\npython_requires='>=3.7',\nclassifiers=[\n'Development Status :: 3 - Alpha',\n'Intended Audience :: Developers',\n'Intended Audience :: System Administrators',\n'License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)',\n'Operating System :: POSIX',\n'Operating System :: POSIX :: Linux',\n'Operating System :: MacOS :: MacOS X',\n'Topic :: Software Development :: Libraries',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n],\nkeywords=['Bonjour', 'Avahi', 'Zeroconf', 'Multicast DNS', 'Service Discovery', 'mDNS'],\ninstall_requires=['async_timeout>=4.0.1', 'ifaddr>=0.1.7'],\n)\n"
    },
    {
        "package_name": "zope.container-4.6",
        "file_list": ".coveragerc .manylinux-install.sh .manylinux.sh appveyor.yml CHANGES.rst compat.cfg CONTRIBUTING.md COPYRIGHT.txt doc-requirements.txt api.rst changelog.rst conf.py constraints.rst index.rst make.bat Makefile narrative.rst LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py btree.py configure.zcml constraints.py constraints.rst contained.py directory.py find.py folder.py i18n.py interfaces.py ordered.py sample.py size.py testing.py constraints_example.py directory.rst test_btree.py test_constraints.py test_contained.py test_contained_zodb.py test_containertraversable.py test_containertraverser.py test_dependencies.py test_directory.py test_find.py test_folder.py test_icontainer.py test_ordered.py test_size.py __init__.py traversal.py _compat.h _compat.py _proxy.py _util.py _zope_container_contained.c __init__.py __init__.py dependency_links.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt tox.ini",
        "setup.py": "##############################################################################\n#\n# Copyright (c) 2006 Zope Foundation and Contributors.\n# All Rights Reserved.\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL). A copy of the ZPL should accompany this distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE.\n#\n##############################################################################\n# This package is developed by the Zope Toolkit project, documented here:\n# http:\/\/docs.zope.org\/zopetoolkit\n# When developing and releasing this package, please follow the documented\n# Zope Toolkit policies as described by this documentation.\n##############################################################################\n\"\"\"Setup for zope.container package\n\"\"\"\nimport os\nimport sys\n\nfrom setuptools import Extension\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef read(*rnames):\nwith open(os.path.join(os.path.dirname(__file__), *rnames)) as f:\nreturn f.read()\n\n\ndef get_include_dirs():\n\"\"\"\nReturn additional include directories that might be needed to\ncompile extensions. Specifically, we need the cPersistence.h from\npersistent, and the `_zope_proxy_proxy.c` from zope.proxy.\n\nThis is done lazily, because ``setup_requires`` will not have made\ndependencies available at the time the Extension is defined, only when\n``setup`` actually runs.\n\"\"\"\n# setuptools will put the normal include directory for Python.h on the\n# include path automatically. We don't want to override that with\n# a different Python.h if we can avoid it: On older versions of Python,\n# that can cause issues with debug builds\n# (see https:\/\/github.com\/gevent\/gevent\/issues\/1461)\n# so order matters here.\n#\n# sysconfig.get_path('include') will return the path to the main include\n# directory. In a virtual environment, that's a symlink to the main\n# Python installation include directory:\n#\n# sysconfig.get_path('include') -> \/path\/to\/venv\/include\/python3.8\n# \/path\/to\/venv\/include\/python3.7 -> \/pythondir\/include\/python3.8\n#\n# distutils.sysconfig.get_python_inc() returns the main Python installation\n# include directory:\n# distutils.sysconfig.get_python_inc() -> \/pythondir\/include\/python3.8\n#\n# Neither sysconfig dir is not enough if we're in a virtualenv; the proxy.h\n# header goes into a site\/ subdir.\n# See https:\/\/github.com\/pypa\/pip\/issues\/4610\nimport sysconfig\nfrom distutils import sysconfig as dist_sysconfig\n\ndist_inc_dir = os.path.abspath(dist_sysconfig.get_python_inc()) # 1\nsys_inc_dir = os.path.abspath(sysconfig.get_path(\"include\")) # 2\n\ndef header_dirs_for_dep(distname, headername): # 3 and 4\n\nvenv_include_dir = os.path.join(\nsys.prefix, 'include', 'site',\n'python' + sysconfig.get_python_version(),\ndistname,\n)\nvenv_include_dir = os.path.abspath(venv_include_dir)\n\n# If we're installed via buildout, and buildout also installs\n# distname, we have *NO* access to its headers in a standard\n# way. So we rely on being able to import the distribution and\n# it including the needed file as package data.\n\ntry:\nimport pkg_resources\nif pkg_resources.resource_exists(distname, headername):\nresource_dir = os.path.dirname(\npkg_resources.resource_filename(distname, headername))\nexcept ImportError:\nresource_dir = None\n\nreturn venv_include_dir, resource_dir\n\nreturn [\np\nfor p in (\n(dist_inc_dir, sys_inc_dir)\n+ header_dirs_for_dep('zope.proxy', '_zope_proxy_proxy.c')\n+ header_dirs_for_dep('persistent', 'cPersistence.h')\n)\nif p is not None and os.path.exists(p)\n]\n\n\nclass IncludeDirs(object):\ndirs = None\n\ndef __getattribute__(self, name):\nif object.__getattribute__(self, 'dirs') is None:\nself.dirs = get_include_dirs()\ndirs = object.__getattribute__(self, 'dirs')\nif name == 'dirs':\nreturn dirs\nreturn getattr(dirs, name)\n\ndef __iter__(self):\nreturn iter(self.dirs)\n\n\nif str is bytes and hasattr(sys, 'pypy_version_info'):\n# zope.proxy, as of 4.3.5, cannot compile on PyPy2 7.3.0\n# because it uses cl_dict in a PyClassObject, which does not exist.\next_modules = []\nelse:\next_modules = [\nExtension(\n\"zope.container._zope_container_contained\",\n[os.path.join(\"src\", \"zope\", \"container\",\n\"_zope_container_contained.c\")],\ninclude_dirs=IncludeDirs(),\n),\n]\n\nsetup_requires = [\n'persistent >= 4.1.0',\n'zope.proxy >= 4.1.5',\n]\n\n\ninstall_requires = setup_requires + [\n'BTrees',\n'six',\n'zope.cachedescriptors',\n'zope.component',\n'zope.deferredimport',\n'zope.dottedname',\n'zope.event',\n'zope.filerepresentation',\n'zope.i18nmessageid',\n'zope.interface',\n'zope.lifecycleevent>=3.5.2',\n'zope.location>=3.5.4',\n'zope.publisher',\n'zope.schema',\n'zope.security',\n'zope.size',\n'zope.traversing>=4.0.0a1',\n'setuptools',\n]\n\nextras = {\n'docs': [\n'Sphinx',\n'repoze.sphinx.autointerface',\n'sphinx_rtd_theme',\n],\n'test': [\n'zope.testing',\n'zope.testrunner',\n],\n'zcml': [\n'zope.component[zcml]',\n'zope.configuration',\n'zope.security[zcml]>=4.0.0a3',\n],\n'zodb': [\n'ZODB>=3.10',\n],\n}\n\nextras['test'] += (extras['zodb'] + extras['zcml'])\n\n\nsetup(name='zope.container',\nversion='4.6',\nauthor='Zope Foundation and Contributors',\nauthor_email='zope-dev@zope.org',\ndescription='Zope Container',\nlong_description=(\nread('README.rst')\n+ '\\n\\n' +\nread('CHANGES.rst')\n),\nkeywords=\"zope container\",\nclassifiers=[\n'Development Status :: 5 - Production\/Stable',\n'Environment :: Web Environment',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: Zope Public License',\n'Programming Language :: Python',\n'Programming Language :: Python :: 2',\n'Programming Language :: Python :: 2.7',\n'Programming Language :: Python :: 3',\n'Programming Language :: Python :: 3.5',\n'Programming Language :: Python :: 3.6',\n'Programming Language :: Python :: 3.7',\n'Programming Language :: Python :: 3.8',\n'Programming Language :: Python :: 3.9',\n'Programming Language :: Python :: 3.10',\n'Programming Language :: Python :: Implementation :: CPython',\n'Programming Language :: Python :: Implementation :: PyPy',\n'Natural Language :: English',\n'Operating System :: OS Independent',\n'Topic :: Internet :: WWW\/HTTP',\n'Framework :: Zope :: 3',\n],\nurl='https:\/\/github.com\/zopefoundation\/zope.container',\nlicense='ZPL 2.1',\npackages=find_packages('src'),\npackage_dir={'': 'src'},\nnamespace_packages=['zope'],\next_modules=ext_modules,\nextras_require=extras,\ninstall_requires=install_requires,\nsetup_requires=setup_requires,\ntests_require=extras['test'],\ninclude_package_data=True,\nzip_safe=False,\npython_requires=', '.join([\n'>=2.7',\n'!=3.0.*',\n'!=3.1.*',\n'!=3.2.*',\n'!=3.3.*',\n'!=3.4.*',\n]),\n)\n"
    },
    {
        "package_name": "zope.interface-5.4.0",
        "file_list": ".coveragerc .manylinux-install.sh .manylinux.sh build.cmd buildout.cfg CHANGES.rst COPYRIGHT.txt adapter.rst adapter.ru.rst adapters.rst common.rst components.rst declarations.rst index.rst ro.rst specifications.rst changes.rst conf.py foodforthought.rst hacking.rst human.rst human.ru.rst index.rst make.bat Makefile README.rst README.ru.rst verify.rst .gitignore LICENSE.txt MANIFEST.in PKG-INFO README.rst rtd.txt setup.cfg setup.py adapter.py advice.py builtins.py collections.py idatetime.py interfaces.py io.py mapping.py numbers.py sequence.py basemapping.py test_builtins.py test_collections.py test_idatetime.py test_import_interfaces.py test_io.py test_numbers.py __init__.py __init__.py declarations.py document.py exceptions.py interface.py interfaces.py registry.py ro.py advisory_testing.py dummy.py idummy.py m1.py odd.py test_adapter.py test_advice.py test_declarations.py test_document.py test_element.py test_exceptions.py test_interface.py test_interfaces.py test_odd_declarations.py test_registry.py test_ro.py test_sorting.py test_verify.py __init__.py verify.py _compat.py _flatten.py _zope_interface_coptimizations.c __init__.py __init__.py dependency_links.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt tox.ini",
        "setup.py": "##############################################################################\n#\n# Copyright (c) 2004-2007 Zope Foundation and Contributors.\n# All Rights Reserved.\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL). A copy of the ZPL should accompany this distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE.\n#\n##############################################################################\n# This package is developed by the Zope Toolkit project, documented here:\n# http:\/\/docs.zope.org\/zopetoolkit\n# When developing and releasing this package, please follow the documented\n# Zope Toolkit policies as described by this documentation.\n##############################################################################\n\"\"\"Setup for zope.interface package\n\"\"\"\n\nimport os\nimport sys\n\nfrom distutils.errors import CCompilerError\nfrom distutils.errors import DistutilsExecError\nfrom distutils.errors import DistutilsPlatformError\n\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\nfrom setuptools import find_packages\n\n\nclass optional_build_ext(build_ext):\n\"\"\"This class subclasses build_ext and allows\nthe building of C extensions to fail.\n\"\"\"\ndef run(self):\ntry:\nbuild_ext.run(self)\nexcept DistutilsPlatformError as e:\nself._unavailable(e)\n\ndef build_extension(self, ext):\ntry:\nbuild_ext.build_extension(self, ext)\nexcept (CCompilerError, DistutilsExecError, OSError) as e:\nself._unavailable(e)\n\ndef _unavailable(self, e):\nprint('*' * 80)\nprint(\"\"\"WARNING:\n\nAn optional code optimization (C extension) could not be compiled.\n\nOptimizations for this package will not be available!\"\"\")\nprint(\"\")\nprint(e)\nprint('*' * 80)\n\n\ncodeoptimization_c = os.path.join('src', 'zope', 'interface',\n'_zope_interface_coptimizations.c')\ncodeoptimization = [\nExtension(\n\"zope.interface._zope_interface_coptimizations\",\n[os.path.normcase(codeoptimization_c)]\n),\n]\n\nis_jython = 'java' in sys.platform\nis_pypy = hasattr(sys, 'pypy_version_info')\n\n# Jython cannot build the C optimizations. Nor, as of 7.3, can PyPy (\n# it doesn't have PySuper_Type) Everywhere else, defer the decision to\n# runtime.\nif is_jython or is_pypy:\next_modules = []\nelse:\next_modules = codeoptimization\ntests_require = [\n# The test dependencies should NOT have direct or transitive\n# dependencies on zope.interface.\n'coverage >= 5.0.3',\n'zope.event',\n'zope.testing',\n]\ntesting_extras = tests_require\n\n\ndef read(*rnames):\nwith open(os.path.join(os.path.dirname(__file__), *rnames)) as f:\nreturn f.read()\n\n\nlong_description = (\nread('README.rst')\n+ '\\n' +\nread('CHANGES.rst')\n)\n\nsetup(name='zope.interface',\nversion='5.4.0',\nurl='https:\/\/github.com\/zopefoundation\/zope.interface',\nlicense='ZPL 2.1',\ndescription='Interfaces for Python',\nauthor='Zope Foundation and Contributors',\nauthor_email='zope-dev@zope.org',\nlong_description=long_description,\nclassifiers=[\n\"Development Status :: 5 - Production\/Stable\",\n\"Intended Audience :: Developers\",\n\"License :: OSI Approved :: Zope Public License\",\n\"Operating System :: OS Independent\",\n\"Programming Language :: Python\",\n\"Programming Language :: Python :: 2\",\n\"Programming Language :: Python :: 2.7\",\n\"Programming Language :: Python :: 3\",\n\"Programming Language :: Python :: 3.5\",\n\"Programming Language :: Python :: 3.6\",\n\"Programming Language :: Python :: 3.7\",\n\"Programming Language :: Python :: 3.8\",\n\"Programming Language :: Python :: Implementation :: CPython\",\n\"Programming Language :: Python :: Implementation :: PyPy\",\n\"Framework :: Zope :: 3\",\n\"Topic :: Software Development :: Libraries :: Python Modules\",\n],\npackages=find_packages('src'),\npackage_dir={'': 'src'},\nnamespace_packages=[\"zope\"],\ncmdclass={\n'build_ext': optional_build_ext,\n},\ntest_suite='zope.interface.tests',\ninclude_package_data=True,\nzip_safe=False,\ntests_require=tests_require,\ninstall_requires=['setuptools'],\npython_requires=', '.join([\n'>=2.7',\n'!=3.0.*',\n'!=3.1.*',\n'!=3.2.*',\n'!=3.3.*',\n'!=3.4.*',\n]),\nextras_require={\n'docs': ['Sphinx', 'repoze.sphinx.autointerface'],\n'test': tests_require,\n'testing': testing_extras,\n},\next_modules=ext_modules,\nkeywords=['interface', 'components', 'plugins'],\n)\n"
    },
    {
        "package_name": "zthreading-0.1.19",
        "file_list": "PKG-INFO README.md setup.cfg setup.py decorators.py decorators_test.py events.py events_test.py exceptions.py signals.py signals_term_tester.py signals_test.py tasks.py tasks_test.py thread_queue.py thread_queue_test.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt",
        "setup.py": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport os\nfrom setuptools import setup\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n\ndef get_version():\nversion_file_path = os.path.join(here, \"package_version.txt\")\nif not os.path.isfile(version_file_path):\nreturn \"debug\"\nversion = None\nwith open(version_file_path, \"r\") as raw:\nversion = raw.read()\n\nreturn version\n\n\nsetup(\nname=\"zthreading\",\nversion=get_version(),\ndescription=\"A collection of wrapper classes for event broadcast and task management for python (Python Threads or Asyncio).\",\nlong_description=\"Please see the github repo and help @ https:\/\/github.com\/LamaAni\/zthreading.py\",\nclassifiers=[],\nauthor=\"Zav Shotan\",\nauthor_email=\"\",\nurl=\"https:\/\/github.com\/LamaAni\/zthreading.py\",\npackages=[\"zthreading\"],\nplatforms=\"any\",\nlicense=\"LICENSE\",\ninstall_requires=[],\npython_requires=\">=3.6\",\ninclude_package_data=True,\n)\n"
    }
]